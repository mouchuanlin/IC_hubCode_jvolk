

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Aug 01 15:58:51 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F26K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     9                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    18                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    19                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    21                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    22                           	psect	text0,global,reloc=2,class=CODE,delta=1
    23                           	psect	text1,global,reloc=2,class=CODE,delta=1
    24                           	psect	text2,global,reloc=2,class=CODE,delta=1
    25                           	psect	text3,global,reloc=2,class=CODE,delta=1
    26                           	psect	text4,global,reloc=2,class=CODE,delta=1
    27                           	psect	text5,global,reloc=2,class=CODE,delta=1
    28                           	psect	text6,global,reloc=2,class=CODE,delta=1
    29                           	psect	text7,global,reloc=2,class=CODE,delta=1
    30                           	psect	text8,global,reloc=2,class=CODE,delta=1
    31                           	psect	text9,global,reloc=2,class=CODE,delta=1
    32                           	psect	text10,global,reloc=2,class=CODE,delta=1
    33                           	psect	text11,global,reloc=2,class=CODE,delta=1
    34                           	psect	text12,global,reloc=2,class=CODE,delta=1
    35                           	psect	text13,global,reloc=2,class=CODE,delta=1
    36                           	psect	text14,global,reloc=2,class=CODE,delta=1
    37                           	psect	text15,global,reloc=2,class=CODE,delta=1
    38                           	psect	text16,global,reloc=2,class=CODE,delta=1
    39                           	psect	text17,global,reloc=2,class=CODE,delta=1
    40                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    41                           	psect	text19,global,reloc=2,class=CODE,delta=1
    42                           	psect	text20,global,reloc=2,class=CODE,delta=1
    43                           	psect	text21,global,reloc=2,class=CODE,delta=1
    44                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    45                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    46                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    47  0000                     
    48                           ; Version 1.45
    49                           ; Generated 16/11/2017 GMT
    50                           ; 
    51                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    52                           ; All rights reserved.
    53                           ; 
    54                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    55                           ; 
    56                           ; Redistribution and use in source and binary forms, with or without modification, are
    57                           ; permitted provided that the following conditions are met:
    58                           ; 
    59                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    60                           ;        conditions and the following disclaimer.
    61                           ; 
    62                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    63                           ;        of conditions and the following disclaimer in the documentation and/or other
    64                           ;        materials provided with the distribution.
    65                           ; 
    66                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    67                           ;        software without specific prior written permission.
    68                           ; 
    69                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    70                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    71                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    72                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    73                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    74                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    75                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    76                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    77                           ; 
    78                           ; 
    79                           ; Code-generator required, PIC18F26K22 Definitions
    80                           ; 
    81                           ; SFR Addresses
    82  0000                     
    83                           	psect	idataCOMRAM
    84  001DD7                     __pidataCOMRAM:
    85                           	opt stack 0
    86                           
    87                           ;initializer for send_md_cfg_cmds_ok@F6857
    88  001DD7  41                 	db	65
    89  001DD8  54                 	db	84
    90  001DD9  2B                 	db	43
    91  001DDA  43                 	db	67
    92  001DDB  52                 	db	82
    93  001DDC  45                 	db	69
    94  001DDD  47                 	db	71
    95  001DDE  3F                 	db	63
    96  001DDF  0D                 	db	13
    97  001DE0  0A                 	db	10
    98  001DE1  00                 	db	0
    99                           
   100                           ;initializer for send_md_cfg_cmds_ok@F6855
   101  001DE2  41                 	db	65
   102  001DE3  54                 	db	84
   103  001DE4  2B                 	db	43
   104  001DE5  43                 	db	67
   105  001DE6  50                 	db	80
   106  001DE7  49                 	db	73
   107  001DE8  4E                 	db	78
   108  001DE9  3F                 	db	63
   109  001DEA  0D                 	db	13
   110  001DEB  0A                 	db	10
   111  001DEC  00                 	db	0
   112                           
   113                           ;initializer for send_md_cfg_cmds_ok@F6853
   114  001DED  41                 	db	65
   115  001DEE  54                 	db	84
   116  001DEF  23                 	db	35
   117  001DF0  43                 	db	67
   118  001DF1  47                 	db	71
   119  001DF2  4D                 	db	77
   120  001DF3  52                 	db	82
   121  001DF4  0D                 	db	13
   122  001DF5  0A                 	db	10
   123  001DF6  00                 	db	0
   124                           
   125                           ;initializer for send_md_cfg_cmds_ok@F6863
   126  001DF7  41                 	db	65
   127  001DF8  54                 	db	84
   128  001DF9  2B                 	db	43
   129  001DFA  43                 	db	67
   130  001DFB  53                 	db	83
   131  001DFC  51                 	db	81
   132  001DFD  0D                 	db	13
   133  001DFE  0A                 	db	10
   134  001DFF  00                 	db	0
   135                           
   136                           ;initializer for _toggle
   137  001E00  01                 	db	1
   138                           
   139                           ;initializer for _numRetries
   140  001E01  0F                 	db	15
   141                           
   142                           	psect	idataBANK0
   143  001E96                     __pidataBANK0:
   144                           	opt stack 0
   145                           
   146                           ;initializer for send_md_cfg_cmds_ok@F6843
   147  001E96  41                 	db	65
   148  001E97  54                 	db	84
   149  001E98  45                 	db	69
   150  001E99  31                 	db	49
   151  001E9A  0D                 	db	13
   152  001E9B  0A                 	db	10
   153  001E9C  00                 	db	0
   154                           
   155                           ;initializer for send_md_cfg_cmds_ok@F6841
   156  001E9D  41                 	db	65
   157  001E9E  54                 	db	84
   158  001E9F  0D                 	db	13
   159  001EA0  0A                 	db	10
   160  001EA1  00                 	db	0
   161                           
   162                           	psect	idataBANK1
   163  001C54                     __pidataBANK1:
   164                           	opt stack 0
   165                           
   166                           ;initializer for setup_data_ok@F6879
   167  001C54  41                 	db	65
   168  001C55  54                 	db	84
   169  001C56  23                 	db	35
   170  001C57  53                 	db	83
   171  001C58  43                 	db	67
   172  001C59  46                 	db	70
   173  001C5A  47                 	db	71
   174  001C5B  45                 	db	69
   175  001C5C  58                 	db	88
   176  001C5D  54                 	db	84
   177  001C5E  3D                 	db	61
   178  001C5F  31                 	db	49
   179  001C60  2C                 	db	44
   180  001C61  31                 	db	49
   181  001C62  2C                 	db	44
   182  001C63  30                 	db	48
   183  001C64  2C                 	db	44
   184  001C65  30                 	db	48
   185  001C66  2C                 	db	44
   186  001C67  30                 	db	48
   187  001C68  2C                 	db	44
   188  001C69  30                 	db	48
   189  001C6A  0D                 	db	13
   190  001C6B  0A                 	db	10
   191  001C6C  00                 	db	0
   192                           
   193                           ;initializer for send_md_cfg_cmds_ok@F6849
   194  001C6D  41                 	db	65
   195  001C6E  54                 	db	84
   196  001C6F  23                 	db	35
   197  001C70  47                 	db	71
   198  001C71  50                 	db	80
   199  001C72  49                 	db	73
   200  001C73  4F                 	db	79
   201  001C74  3D                 	db	61
   202  001C75  37                 	db	55
   203  001C76  2C                 	db	44
   204  001C77  30                 	db	48
   205  001C78  2C                 	db	44
   206  001C79  32                 	db	50
   207  001C7A  0D                 	db	13
   208  001C7B  0A                 	db	10
   209  001C7C  00                 	db	0
   210                           
   211                           ;initializer for send_md_cfg_cmds_ok@F6847
   212  001C7D  41                 	db	65
   213  001C7E  54                 	db	84
   214  001C7F  2B                 	db	43
   215  001C80  49                 	db	73
   216  001C81  50                 	db	80
   217  001C82  52                 	db	82
   218  001C83  3D                 	db	61
   219  001C84  31                 	db	49
   220  001C85  31                 	db	49
   221  001C86  35                 	db	53
   222  001C87  32                 	db	50
   223  001C88  30                 	db	48
   224  001C89  30                 	db	48
   225  001C8A  0D                 	db	13
   226  001C8B  0A                 	db	10
   227  001C8C  00                 	db	0
   228                           
   229                           ;initializer for setup_data_ok@F6881
   230  001C8D  41                 	db	65
   231  001C8E  54                 	db	84
   232  001C8F  23                 	db	35
   233  001C90  53                 	db	83
   234  001C91  47                 	db	71
   235  001C92  41                 	db	65
   236  001C93  43                 	db	67
   237  001C94  54                 	db	84
   238  001C95  3D                 	db	61
   239  001C96  33                 	db	51
   240  001C97  2C                 	db	44
   241  001C98  31                 	db	49
   242  001C99  0D                 	db	13
   243  001C9A  0A                 	db	10
   244  001C9B  00                 	db	0
   245                           
   246                           ;initializer for send_md_cfg_cmds_ok@F6859
   247  001C9C  41                 	db	65
   248  001C9D  54                 	db	84
   249  001C9E  2B                 	db	43
   250  001C9F  43                 	db	67
   251  001CA0  45                 	db	69
   252  001CA1  52                 	db	82
   253  001CA2  45                 	db	69
   254  001CA3  47                 	db	71
   255  001CA4  3F                 	db	63
   256  001CA5  0D                 	db	13
   257  001CA6  0A                 	db	10
   258  001CA7  00                 	db	0
   259                           
   260                           ;initializer for send_md_cfg_cmds_ok@F6851
   261  001CA8  41                 	db	65
   262  001CA9  54                 	db	84
   263  001CAA  23                 	db	35
   264  001CAB  53                 	db	83
   265  001CAC  4C                 	db	76
   266  001CAD  45                 	db	69
   267  001CAE  44                 	db	68
   268  001CAF  3D                 	db	61
   269  001CB0  34                 	db	52
   270  001CB1  0D                 	db	13
   271  001CB2  0A                 	db	10
   272  001CB3  00                 	db	0
   273                           
   274                           ;initializer for send_md_cfg_cmds_ok@F6845
   275  001CB4  41                 	db	65
   276  001CB5  54                 	db	84
   277  001CB6  2B                 	db	43
   278  001CB7  43                 	db	67
   279  001CB8  4D                 	db	77
   280  001CB9  45                 	db	69
   281  001CBA  45                 	db	69
   282  001CBB  3D                 	db	61
   283  001CBC  32                 	db	50
   284  001CBD  0D                 	db	13
   285  001CBE  0A                 	db	10
   286  001CBF  00                 	db	0
   287                           
   288                           ;initializer for send_md_cfg_cmds_ok@F6861
   289  001CC0  41                 	db	65
   290  001CC1  54                 	db	84
   291  001CC2  23                 	db	35
   292  001CC3  47                 	db	71
   293  001CC4  50                 	db	80
   294  001CC5  52                 	db	82
   295  001CC6  53                 	db	83
   296  001CC7  3F                 	db	63
   297  001CC8  0D                 	db	13
   298  001CC9  0A                 	db	10
   299  001CCA  00                 	db	0
   300                           
   301                           	psect	idataBANK2
   302  001DA8                     __pidataBANK2:
   303                           	opt stack 0
   304                           
   305                           ;initializer for setup_data_ok@F6877
   306  001DA8  41                 	db	65
   307  001DA9  54                 	db	84
   308  001DAA  2B                 	db	43
   309  001DAB  43                 	db	67
   310  001DAC  47                 	db	71
   311  001DAD  44                 	db	68
   312  001DAE  43                 	db	67
   313  001DAF  4F                 	db	79
   314  001DB0  4E                 	db	78
   315  001DB1  54                 	db	84
   316  001DB2  3D                 	db	61
   317  001DB3  33                 	db	51
   318  001DB4  2C                 	db	44
   319  001DB5  22                 	db	34
   320  001DB6  49                 	db	73
   321  001DB7  50                 	db	80
   322  001DB8  56                 	db	86
   323  001DB9  34                 	db	52
   324  001DBA  56                 	db	86
   325  001DBB  36                 	db	54
   326  001DBC  22                 	db	34
   327  001DBD  2C                 	db	44
   328  001DBE  22                 	db	34
   329  001DBF  77                 	db	119
   330  001DC0  79                 	db	121
   331  001DC1  6C                 	db	108
   332  001DC2  65                 	db	101
   333  001DC3  73                 	db	115
   334  001DC4  6C                 	db	108
   335  001DC5  74                 	db	116
   336  001DC6  65                 	db	101
   337  001DC7  2E                 	db	46
   338  001DC8  67                 	db	103
   339  001DC9  77                 	db	119
   340  001DCA  37                 	db	55
   341  001DCB  2E                 	db	46
   342  001DCC  76                 	db	118
   343  001DCD  7A                 	db	122
   344  001DCE  77                 	db	119
   345  001DCF  65                 	db	101
   346  001DD0  6E                 	db	110
   347  001DD1  74                 	db	116
   348  001DD2  70                 	db	112
   349  001DD3  22                 	db	34
   350  001DD4  0D                 	db	13
   351  001DD5  0A                 	db	10
   352  001DD6  00                 	db	0
   353                           
   354                           	psect	smallconst
   355  001000                     __psmallconst:
   356                           	opt stack 0
   357  001000  00                 	db	0
   358  001001                     send_over_socket_ok@F6886:
   359                           	opt stack 0
   360  001001  41                 	db	65
   361  001002  54                 	db	84
   362  001003  23                 	db	35
   363  001004  53                 	db	83
   364  001005  44                 	db	68
   365  001006  3D                 	db	61
   366  001007  31                 	db	49
   367  001008  2C                 	db	44
   368  001009  30                 	db	48
   369  00100A  2C                 	db	44
   370  00100B  31                 	db	49
   371  00100C  30                 	db	48
   372  00100D  35                 	db	53
   373  00100E  31                 	db	49
   374  00100F  30                 	db	48
   375  001010  2C                 	db	44
   376  001011  22                 	db	34
   377  001012  6D                 	db	109
   378  001013  6F                 	db	111
   379  001014  64                 	db	100
   380  001015  75                 	db	117
   381  001016  6C                 	db	108
   382  001017  65                 	db	101
   383  001018  73                 	db	115
   384  001019  2E                 	db	46
   385  00101A  74                 	db	116
   386  00101B  65                 	db	101
   387  00101C  6C                 	db	108
   388  00101D  69                 	db	105
   389  00101E  74                 	db	116
   390  00101F  2E                 	db	46
   391  001020  63                 	db	99
   392  001021  6F                 	db	111
   393  001022  6D                 	db	109
   394  001023  22                 	db	34
   395  001024  2C                 	db	44
   396  001025  30                 	db	48
   397  001026  2C                 	db	44
   398  001027  30                 	db	48
   399  001028  2C                 	db	44
   400  001029  31                 	db	49
   401  00102A  0D                 	db	13
   402  00102B  0A                 	db	10
   403  00102C  00                 	db	0
   404  00102D                     __end_ofsend_over_socket_ok@F6886:
   405                           	opt stack 0
   406  00102D                     close_socket_ok@F6904:
   407                           	opt stack 0
   408  00102D  41                 	db	65
   409  00102E  54                 	db	84
   410  00102F  23                 	db	35
   411  001030  46                 	db	70
   412  001031  41                 	db	65
   413  001032  53                 	db	83
   414  001033  54                 	db	84
   415  001034  53                 	db	83
   416  001035  59                 	db	89
   417  001036  53                 	db	83
   418  001037  48                 	db	72
   419  001038  41                 	db	65
   420  001039  4C                 	db	76
   421  00103A  54                 	db	84
   422  00103B  0D                 	db	13
   423  00103C  0A                 	db	10
   424  00103D  00                 	db	0
   425  00103E                     __end_ofclose_socket_ok@F6904:
   426                           	opt stack 0
   427  00103E                     send_over_socket_ok@F6890:
   428                           	opt stack 0
   429  00103E  41                 	db	65
   430  00103F  54                 	db	84
   431  001040  23                 	db	35
   432  001041  53                 	db	83
   433  001042  52                 	db	82
   434  001043  45                 	db	69
   435  001044  43                 	db	67
   436  001045  56                 	db	86
   437  001046  3D                 	db	61
   438  001047  31                 	db	49
   439  001048  2C                 	db	44
   440  001049  38                 	db	56
   441  00104A  39                 	db	57
   442  00104B  0D                 	db	13
   443  00104C  0A                 	db	10
   444  00104D  00                 	db	0
   445  00104E                     __end_ofsend_over_socket_ok@F6890:
   446                           	opt stack 0
   447  00104E                     close_socket_ok@F6902:
   448                           	opt stack 0
   449  00104E  41                 	db	65
   450  00104F  54                 	db	84
   451  001050  23                 	db	35
   452  001051  53                 	db	83
   453  001052  47                 	db	71
   454  001053  41                 	db	65
   455  001054  43                 	db	67
   456  001055  54                 	db	84
   457  001056  3D                 	db	61
   458  001057  33                 	db	51
   459  001058  2C                 	db	44
   460  001059  30                 	db	48
   461  00105A  0D                 	db	13
   462  00105B  0A                 	db	10
   463  00105C  00                 	db	0
   464  00105D                     __end_ofclose_socket_ok@F6902:
   465                           	opt stack 0
   466  00105D                     send_over_socket_ok@F6888:
   467                           	opt stack 0
   468  00105D  41                 	db	65
   469  00105E  54                 	db	84
   470  00105F  23                 	db	35
   471  001060  53                 	db	83
   472  001061  53                 	db	83
   473  001062  45                 	db	69
   474  001063  4E                 	db	78
   475  001064  44                 	db	68
   476  001065  3D                 	db	61
   477  001066  31                 	db	49
   478  001067  0D                 	db	13
   479  001068  0A                 	db	10
   480  001069  00                 	db	0
   481  00106A                     __end_ofsend_over_socket_ok@F6888:
   482                           	opt stack 0
   483  00106A                     close_socket_ok@F6900:
   484                           	opt stack 0
   485  00106A  41                 	db	65
   486  00106B  54                 	db	84
   487  00106C  23                 	db	35
   488  00106D  53                 	db	83
   489  00106E  48                 	db	72
   490  00106F  3D                 	db	61
   491  001070  31                 	db	49
   492  001071  0D                 	db	13
   493  001072  0A                 	db	10
   494  001073  00                 	db	0
   495  001074                     __end_ofclose_socket_ok@F6900:
   496                           	opt stack 0
   497  001074                     send_over_socket_ok@F6892:
   498                           	opt stack 0
   499  001074  45                 	db	69
   500  001075  63                 	db	99
   501  001076  68                 	db	104
   502  001077  6F                 	db	111
   503  001078  2E                 	db	46
   504  001079  0D                 	db	13
   505  00107A  0A                 	db	10
   506  00107B  00                 	db	0
   507  00107C                     __end_ofsend_over_socket_ok@F6892:
   508                           	opt stack 0
   509  00107C                     _VERSION:
   510                           	opt stack 0
   511  00107C  32                 	db	50
   512  00107D  30                 	db	48
   513  00107E  32                 	db	50
   514  00107F  30                 	db	48
   515  001080  00                 	db	0
   516  001081                     __end_of_VERSION:
   517                           	opt stack 0
   518  0000                     _ANSELB	set	3897
   519  0000                     _ANSELC	set	3898
   520  0000                     _ANSELA	set	3896
   521  0000                     _TX1REG	set	4013
   522  0000                     _PIR1bits	set	3998
   523  0000                     _RCSTA1bits	set	4011
   524  0000                     _RC1STAbits	set	4011
   525  0000                     _SPBRG1	set	4015
   526  0000                     _SPBRGH1	set	4016
   527  0000                     _TXSTA1bits	set	4012
   528  0000                     _BAUDCONbits	set	4024
   529  0000                     _BAUDCON1bits	set	4024
   530  0000                     _TMR3L	set	4018
   531  0000                     _TMR3H	set	4019
   532  0000                     _INTCONbits	set	4082
   533  0000                     _PIR2bits	set	4001
   534  0000                     _PIE2bits	set	4000
   535  0000                     _T3CONbits	set	4017
   536  0000                     _T3CON	set	4017
   537  0000                     _TMR0L	set	4054
   538  0000                     _TMR0H	set	4055
   539  0000                     _T0CON	set	4053
   540  0000                     _LATBbits	set	3978
   541  0000                     _TRISB	set	3987
   542  0000                     _LATCbits	set	3979
   543  0000                     _TRISCbits	set	3988
   544  0000                     _PORTCbits	set	3970
   545  0000                     _TRISBbits	set	3987
   546  0000                     _TRISC	set	3988
   547  0000                     _PORTAbits	set	3968
   548  0000                     _TRISAbits	set	3986
   549  0000                     _TRISA	set	3986
   550  0000                     _OSCCONbits	set	4051
   551  0000                     _PORTBbits	set	3969
   552  0000                     _RC1REG	set	4014
   553  0000                     _PIE1bits	set	3997
   554  0000                     _TRMT1	set	32097
   555  0000                     _RC1IE	set	31981
   556  0000                     _CREN1	set	32092
   557  0000                     _GIE	set	32663
   558  0000                     _TMR0IF	set	32658
   559  0000                     _TMR3IF	set	32009
   560  0000                     _RC1IF	set	31989
   561                           
   562                           ; #config settings
   563  001081  00                 	db	0	; dummy byte at the end
   564  0000                     
   565                           	psect	cinit
   566  001A82                     __pcinit:
   567                           	opt stack 0
   568  001A82                     start_initialization:
   569                           	opt stack 0
   570  001A82                     __initialization:
   571                           	opt stack 0
   572                           
   573                           ; Initialize objects allocated to BANK2 (47 bytes)
   574                           ; load TBLPTR registers with __pidataBANK2
   575  001A82  0EA8               	movlw	low __pidataBANK2
   576  001A84  6EF6               	movwf	tblptrl,c
   577  001A86  0E1D               	movlw	high __pidataBANK2
   578  001A88  6EF7               	movwf	tblptrh,c
   579  001A8A  0E00               	movlw	low (__pidataBANK2 shr (0+16))
   580  001A8C  6EF8               	movwf	tblptru,c
   581  001A8E  EE02  F0C0         	lfsr	0,__pdataBANK2
   582  001A92  EE10 F02F          	lfsr	1,47
   583  001A96                     copy_data0:
   584  001A96  0009               	tblrd		*+
   585  001A98  CFF5 FFEE          	movff	tablat,postinc0
   586  001A9C  50E5               	movf	postdec1,w,c
   587  001A9E  50E1               	movf	fsr1l,w,c
   588  001AA0  E1FA               	bnz	copy_data0
   589                           
   590                           ; Initialize objects allocated to BANK1 (119 bytes)
   591                           ; load TBLPTR registers with __pidataBANK1
   592  001AA2  0E54               	movlw	low __pidataBANK1
   593  001AA4  6EF6               	movwf	tblptrl,c
   594  001AA6  0E1C               	movlw	high __pidataBANK1
   595  001AA8  6EF7               	movwf	tblptrh,c
   596  001AAA  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   597  001AAC  6EF8               	movwf	tblptru,c
   598  001AAE  EE01  F000         	lfsr	0,__pdataBANK1
   599  001AB2  EE10 F077          	lfsr	1,119
   600  001AB6                     copy_data1:
   601  001AB6  0009               	tblrd		*+
   602  001AB8  CFF5 FFEE          	movff	tablat,postinc0
   603  001ABC  50E5               	movf	postdec1,w,c
   604  001ABE  50E1               	movf	fsr1l,w,c
   605  001AC0  E1FA               	bnz	copy_data1
   606                           
   607                           ; Initialize objects allocated to BANK0 (12 bytes)
   608                           ; load TBLPTR registers with __pidataBANK0
   609  001AC2  0E96               	movlw	low __pidataBANK0
   610  001AC4  6EF6               	movwf	tblptrl,c
   611  001AC6  0E1E               	movlw	high __pidataBANK0
   612  001AC8  6EF7               	movwf	tblptrh,c
   613  001ACA  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   614  001ACC  6EF8               	movwf	tblptru,c
   615  001ACE  EE00  F0D1         	lfsr	0,__pdataBANK0
   616  001AD2  EE10 F00C          	lfsr	1,12
   617  001AD6                     copy_data2:
   618  001AD6  0009               	tblrd		*+
   619  001AD8  CFF5 FFEE          	movff	tablat,postinc0
   620  001ADC  50E5               	movf	postdec1,w,c
   621  001ADE  50E1               	movf	fsr1l,w,c
   622  001AE0  E1FA               	bnz	copy_data2
   623                           
   624                           ; Initialize objects allocated to COMRAM (43 bytes)
   625                           ; load TBLPTR registers with __pidataCOMRAM
   626  001AE2  0ED7               	movlw	low __pidataCOMRAM
   627  001AE4  6EF6               	movwf	tblptrl,c
   628  001AE6  0E1D               	movlw	high __pidataCOMRAM
   629  001AE8  6EF7               	movwf	tblptrh,c
   630  001AEA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   631  001AEC  6EF8               	movwf	tblptru,c
   632  001AEE  EE00  F001         	lfsr	0,__pdataCOMRAM
   633  001AF2  EE10 F02B          	lfsr	1,43
   634  001AF6                     copy_data3:
   635  001AF6  0009               	tblrd		*+
   636  001AF8  CFF5 FFEE          	movff	tablat,postinc0
   637  001AFC  50E5               	movf	postdec1,w,c
   638  001AFE  50E1               	movf	fsr1l,w,c
   639  001B00  E1FA               	bnz	copy_data3
   640                           
   641                           ; Clear objects allocated to BANK2 (60 bytes)
   642  001B02  EE02  F084         	lfsr	0,__pbssBANK2
   643  001B06  0E3C               	movlw	60
   644  001B08                     clear_0:
   645  001B08  6AEE               	clrf	postinc0,c
   646  001B0A  06E8               	decf	wreg,f,c
   647  001B0C  E1FD               	bnz	clear_0
   648                           
   649                           ; Clear objects allocated to BANK1 (100 bytes)
   650  001B0E  EE01  F077         	lfsr	0,__pbssBANK1
   651  001B12  0E64               	movlw	100
   652  001B14                     clear_1:
   653  001B14  6AEE               	clrf	postinc0,c
   654  001B16  06E8               	decf	wreg,f,c
   655  001B18  E1FD               	bnz	clear_1
   656                           
   657                           ; Clear objects allocated to BANK0 (16 bytes)
   658  001B1A  EE00  F0C1         	lfsr	0,__pbssBANK0
   659  001B1E  0E10               	movlw	16
   660  001B20                     clear_2:
   661  001B20  6AEE               	clrf	postinc0,c
   662  001B22  06E8               	decf	wreg,f,c
   663  001B24  E1FD               	bnz	clear_2
   664                           
   665                           ; Clear objects allocated to COMRAM (17 bytes)
   666  001B26  EE00  F044         	lfsr	0,__pbssCOMRAM
   667  001B2A  0E11               	movlw	17
   668  001B2C                     clear_3:
   669  001B2C  6AEE               	clrf	postinc0,c
   670  001B2E  06E8               	decf	wreg,f,c
   671  001B30  E1FD               	bnz	clear_3
   672  001B32                     end_of_initialization:
   673                           	opt stack 0
   674  001B32                     __end_of__initialization:
   675                           	opt stack 0
   676  001B32  9055               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   677  001B34  9255               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   678  001B36  0E00               	movlw	low (__Lmediumconst shr (0+16))
   679  001B38  6EF8               	movwf	tblptru,c
   680  001B3A  0100               	movlb	0
   681  001B3C  EF01  F00F         	goto	_main	;jump to C main() function
   682                           tblptru	equ	0xFF8
   683                           tblptrh	equ	0xFF7
   684                           tblptrl	equ	0xFF6
   685                           tablat	equ	0xFF5
   686                           postinc0	equ	0xFEE
   687                           wreg	equ	0xFE8
   688                           postdec1	equ	0xFE5
   689                           fsr1l	equ	0xFE1
   690                           
   691                           	psect	bssCOMRAM
   692  000044                     __pbssCOMRAM:
   693                           	opt stack 0
   694  000044                     _tmr3_cnt:
   695                           	opt stack 0
   696  000044                     	ds	4
   697  000048                     _lastChar:
   698                           	opt stack 0
   699  000048                     	ds	1
   700  000049                     _currentChar:
   701                           	opt stack 0
   702  000049                     	ds	1
   703  00004A                     _awake:
   704                           	opt stack 0
   705  00004A                     	ds	1
   706  00004B                     _timedOut:
   707                           	opt stack 0
   708  00004B                     	ds	1
   709  00004C                     _receivedCarat:
   710                           	opt stack 0
   711  00004C                     	ds	1
   712  00004D                     _receivedRESP:
   713                           	opt stack 0
   714  00004D                     	ds	1
   715  00004E                     _receivedERR:
   716                           	opt stack 0
   717  00004E                     	ds	1
   718  00004F                     _receivedOK:
   719                           	opt stack 0
   720  00004F                     	ds	1
   721  000050                     _endPtr:
   722                           	opt stack 0
   723  000050                     	ds	1
   724  000051                     _atCmdState:
   725                           	opt stack 0
   726  000051                     	ds	1
   727  000052                     _tmr5_cnt:
   728                           	opt stack 0
   729  000052                     	ds	1
   730  000053                     _ledPatternCount:
   731                           	opt stack 0
   732  000053                     	ds	1
   733  000054                     _ledPattern:
   734                           	opt stack 0
   735  000054                     	ds	1
   736                           tblptru	equ	0xFF8
   737                           tblptrh	equ	0xFF7
   738                           tblptrl	equ	0xFF6
   739                           tablat	equ	0xFF5
   740                           postinc0	equ	0xFEE
   741                           wreg	equ	0xFE8
   742                           postdec1	equ	0xFE5
   743                           fsr1l	equ	0xFE1
   744                           
   745                           	psect	dataCOMRAM
   746  000001                     __pdataCOMRAM:
   747                           	opt stack 0
   748  000001                     send_md_cfg_cmds_ok@F6857:
   749                           	opt stack 0
   750  000001                     	ds	11
   751  00000C                     send_md_cfg_cmds_ok@F6855:
   752                           	opt stack 0
   753  00000C                     	ds	11
   754  000017                     send_md_cfg_cmds_ok@F6853:
   755                           	opt stack 0
   756  000017                     	ds	10
   757  000021                     send_md_cfg_cmds_ok@F6863:
   758                           	opt stack 0
   759  000021                     	ds	9
   760  00002A                     _toggle:
   761                           	opt stack 0
   762  00002A                     	ds	1
   763  00002B                     _numRetries:
   764                           	opt stack 0
   765  00002B                     	ds	1
   766                           tblptru	equ	0xFF8
   767                           tblptrh	equ	0xFF7
   768                           tblptrl	equ	0xFF6
   769                           tablat	equ	0xFF5
   770                           postinc0	equ	0xFEE
   771                           wreg	equ	0xFE8
   772                           postdec1	equ	0xFE5
   773                           fsr1l	equ	0xFE1
   774                           
   775                           	psect	bssBANK0
   776  0000C1                     __pbssBANK0:
   777                           	opt stack 0
   778  0000C1                     _extendedTimer:
   779                           	opt stack 0
   780  0000C1                     	ds	1
   781  0000C2                     _sentAT12:
   782                           	opt stack 0
   783  0000C2                     	ds	1
   784  0000C3                     _sentAT11:
   785                           	opt stack 0
   786  0000C3                     	ds	1
   787  0000C4                     _sentAT10:
   788                           	opt stack 0
   789  0000C4                     	ds	1
   790  0000C5                     _sentAT9:
   791                           	opt stack 0
   792  0000C5                     	ds	1
   793  0000C6                     _sentAT8:
   794                           	opt stack 0
   795  0000C6                     	ds	1
   796  0000C7                     _sentAT7:
   797                           	opt stack 0
   798  0000C7                     	ds	1
   799  0000C8                     _sentAT6:
   800                           	opt stack 0
   801  0000C8                     	ds	1
   802  0000C9                     _sentAT5:
   803                           	opt stack 0
   804  0000C9                     	ds	1
   805  0000CA                     _sentAT4:
   806                           	opt stack 0
   807  0000CA                     	ds	1
   808  0000CB                     _sentAT3:
   809                           	opt stack 0
   810  0000CB                     	ds	1
   811  0000CC                     _sentAT2:
   812                           	opt stack 0
   813  0000CC                     	ds	1
   814  0000CD                     _sentAT1:
   815                           	opt stack 0
   816  0000CD                     	ds	1
   817  0000CE                     _pdpIsActive:
   818                           	opt stack 0
   819  0000CE                     	ds	1
   820  0000CF                     _bootTimerIsDone:
   821                           	opt stack 0
   822  0000CF                     	ds	1
   823  0000D0                     _md_state:
   824                           	opt stack 0
   825  0000D0                     	ds	1
   826                           tblptru	equ	0xFF8
   827                           tblptrh	equ	0xFF7
   828                           tblptrl	equ	0xFF6
   829                           tablat	equ	0xFF5
   830                           postinc0	equ	0xFEE
   831                           wreg	equ	0xFE8
   832                           postdec1	equ	0xFE5
   833                           fsr1l	equ	0xFE1
   834                           
   835                           	psect	dataBANK0
   836  0000D1                     __pdataBANK0:
   837                           	opt stack 0
   838  0000D1                     send_md_cfg_cmds_ok@F6843:
   839                           	opt stack 0
   840  0000D1                     	ds	7
   841  0000D8                     send_md_cfg_cmds_ok@F6841:
   842                           	opt stack 0
   843  0000D8                     	ds	5
   844                           tblptru	equ	0xFF8
   845                           tblptrh	equ	0xFF7
   846                           tblptrl	equ	0xFF6
   847                           tablat	equ	0xFF5
   848                           postinc0	equ	0xFEE
   849                           wreg	equ	0xFE8
   850                           postdec1	equ	0xFE5
   851                           fsr1l	equ	0xFE1
   852                           
   853                           	psect	bssBANK1
   854  000177                     __pbssBANK1:
   855                           	opt stack 0
   856  000177                     _mdRxBuf:
   857                           	opt stack 0
   858  000177                     	ds	100
   859                           tblptru	equ	0xFF8
   860                           tblptrh	equ	0xFF7
   861                           tblptrl	equ	0xFF6
   862                           tablat	equ	0xFF5
   863                           postinc0	equ	0xFEE
   864                           wreg	equ	0xFE8
   865                           postdec1	equ	0xFE5
   866                           fsr1l	equ	0xFE1
   867                           
   868                           	psect	dataBANK1
   869  000100                     __pdataBANK1:
   870                           	opt stack 0
   871  000100                     setup_data_ok@F6879:
   872                           	opt stack 0
   873  000100                     	ds	25
   874  000119                     send_md_cfg_cmds_ok@F6849:
   875                           	opt stack 0
   876  000119                     	ds	16
   877  000129                     send_md_cfg_cmds_ok@F6847:
   878                           	opt stack 0
   879  000129                     	ds	16
   880  000139                     setup_data_ok@F6881:
   881                           	opt stack 0
   882  000139                     	ds	15
   883  000148                     send_md_cfg_cmds_ok@F6859:
   884                           	opt stack 0
   885  000148                     	ds	12
   886  000154                     send_md_cfg_cmds_ok@F6851:
   887                           	opt stack 0
   888  000154                     	ds	12
   889  000160                     send_md_cfg_cmds_ok@F6845:
   890                           	opt stack 0
   891  000160                     	ds	12
   892  00016C                     send_md_cfg_cmds_ok@F6861:
   893                           	opt stack 0
   894  00016C                     	ds	11
   895                           tblptru	equ	0xFF8
   896                           tblptrh	equ	0xFF7
   897                           tblptrl	equ	0xFF6
   898                           tablat	equ	0xFF5
   899                           postinc0	equ	0xFEE
   900                           wreg	equ	0xFE8
   901                           postdec1	equ	0xFE5
   902                           fsr1l	equ	0xFE1
   903                           
   904                           	psect	bssBANK2
   905  000284                     __pbssBANK2:
   906                           	opt stack 0
   907  000284                     _referenceBuf:
   908                           	opt stack 0
   909  000284                     	ds	60
   910                           tblptru	equ	0xFF8
   911                           tblptrh	equ	0xFF7
   912                           tblptrl	equ	0xFF6
   913                           tablat	equ	0xFF5
   914                           postinc0	equ	0xFEE
   915                           wreg	equ	0xFE8
   916                           postdec1	equ	0xFE5
   917                           fsr1l	equ	0xFE1
   918                           
   919                           	psect	dataBANK2
   920  0002C0                     __pdataBANK2:
   921                           	opt stack 0
   922  0002C0                     setup_data_ok@F6877:
   923                           	opt stack 0
   924  0002C0                     	ds	47
   925                           tblptru	equ	0xFF8
   926                           tblptrh	equ	0xFF7
   927                           tblptrl	equ	0xFF6
   928                           tablat	equ	0xFF5
   929                           postinc0	equ	0xFEE
   930                           wreg	equ	0xFE8
   931                           postdec1	equ	0xFE5
   932                           fsr1l	equ	0xFE1
   933                           
   934                           	psect	cstackBANK2
   935  000200                     __pcstackBANK2:
   936                           	opt stack 0
   937  000200                     send_md_cfg_cmds_ok@baud:
   938                           	opt stack 0
   939                           
   940                           ; 16 bytes @ 0x0
   941  000200                     	ds	16
   942  000210                     send_md_cfg_cmds_ok@ledCfg:
   943                           	opt stack 0
   944                           
   945                           ; 16 bytes @ 0x10
   946  000210                     	ds	16
   947  000220                     send_md_cfg_cmds_ok@cmee:
   948                           	opt stack 0
   949                           
   950                           ; 12 bytes @ 0x20
   951  000220                     	ds	12
   952  00022C                     send_md_cfg_cmds_ok@ledpattern:
   953                           	opt stack 0
   954                           
   955                           ; 12 bytes @ 0x2C
   956  00022C                     	ds	12
   957  000238                     send_md_cfg_cmds_ok@cereg:
   958                           	opt stack 0
   959                           
   960                           ; 12 bytes @ 0x38
   961  000238                     	ds	12
   962  000244                     send_md_cfg_cmds_ok@cpin:
   963                           	opt stack 0
   964                           
   965                           ; 11 bytes @ 0x44
   966  000244                     	ds	11
   967  00024F                     send_md_cfg_cmds_ok@creg:
   968                           	opt stack 0
   969                           
   970                           ; 11 bytes @ 0x4F
   971  00024F                     	ds	11
   972  00025A                     send_md_cfg_cmds_ok@gprs:
   973                           	opt stack 0
   974                           
   975                           ; 11 bytes @ 0x5A
   976  00025A                     	ds	11
   977  000265                     send_md_cfg_cmds_ok@queryVersion:
   978                           	opt stack 0
   979                           
   980                           ; 10 bytes @ 0x65
   981  000265                     	ds	10
   982  00026F                     send_md_cfg_cmds_ok@csq:
   983                           	opt stack 0
   984                           
   985                           ; 9 bytes @ 0x6F
   986  00026F                     	ds	9
   987  000278                     send_md_cfg_cmds_ok@ate:
   988                           	opt stack 0
   989                           
   990                           ; 7 bytes @ 0x78
   991  000278                     	ds	7
   992  00027F                     send_md_cfg_cmds_ok@at:
   993                           	opt stack 0
   994                           
   995                           ; 5 bytes @ 0x7F
   996  00027F                     	ds	5
   997                           tblptru	equ	0xFF8
   998                           tblptrh	equ	0xFF7
   999                           tblptrl	equ	0xFF6
  1000                           tablat	equ	0xFF5
  1001                           postinc0	equ	0xFEE
  1002                           wreg	equ	0xFE8
  1003                           postdec1	equ	0xFE5
  1004                           fsr1l	equ	0xFE1
  1005                           
  1006                           	psect	cstackBANK0
  1007  000060                     __pcstackBANK0:
  1008                           	opt stack 0
  1009  000060                     ??_start_modem_send_process:
  1010  000060                     md_uart_send@data:
  1011                           	opt stack 0
  1012                           
  1013                           ; 1 bytes @ 0x0
  1014  000060                     	ds	1
  1015  000061                     md_uart_write_str_ok@data:
  1016                           	opt stack 0
  1017                           
  1018                           ; 2 bytes @ 0x1
  1019  000061                     	ds	1
  1020  000062                     start_modem_send_process@newEvent:
  1021                           	opt stack 0
  1022                           
  1023                           ; 1 bytes @ 0x2
  1024  000062                     	ds	1
  1025  000063                     md_uart_write_str_ok@len:
  1026                           	opt stack 0
  1027  000063                     start_modem_send_process@i:
  1028                           	opt stack 0
  1029                           
  1030                           ; 1 bytes @ 0x3
  1031  000063                     	ds	1
  1032  000064                     md_uart_write_str_ok@wantOK:
  1033                           	opt stack 0
  1034                           
  1035                           ; 1 bytes @ 0x4
  1036  000064                     	ds	1
  1037  000065                     md_uart_write_str_ok@waitToSendMoreData:
  1038                           	opt stack 0
  1039                           
  1040                           ; 1 bytes @ 0x5
  1041  000065                     	ds	1
  1042  000066                     ??_md_uart_write_str_ok:
  1043                           
  1044                           ; 1 bytes @ 0x6
  1045  000066                     	ds	1
  1046  000067                     md_uart_write_str_ok@currentChar:
  1047                           	opt stack 0
  1048                           
  1049                           ; 1 bytes @ 0x7
  1050  000067                     	ds	1
  1051  000068                     md_uart_write_str_ok@index:
  1052                           	opt stack 0
  1053                           
  1054                           ; 1 bytes @ 0x8
  1055  000068                     	ds	1
  1056  000069                     close_socket_ok@syshalt:
  1057                           	opt stack 0
  1058  000069                     send_over_socket_ok@openConnection:
  1059                           	opt stack 0
  1060  000069                     setup_data_ok@setApn:
  1061                           	opt stack 0
  1062                           
  1063                           ; 47 bytes @ 0x9
  1064  000069                     	ds	17
  1065  00007A                     close_socket_ok@deactivatePDP:
  1066                           	opt stack 0
  1067                           
  1068                           ; 15 bytes @ 0x1A
  1069  00007A                     	ds	15
  1070  000089                     close_socket_ok@closeSocket:
  1071                           	opt stack 0
  1072                           
  1073                           ; 10 bytes @ 0x29
  1074  000089                     	ds	12
  1075  000095                     send_over_socket_ok@srecv:
  1076                           	opt stack 0
  1077                           
  1078                           ; 16 bytes @ 0x35
  1079  000095                     	ds	3
  1080  000098                     setup_data_ok@cfgSocket:
  1081                           	opt stack 0
  1082                           
  1083                           ; 25 bytes @ 0x38
  1084  000098                     	ds	13
  1085  0000A5                     send_over_socket_ok@ssend:
  1086                           	opt stack 0
  1087                           
  1088                           ; 13 bytes @ 0x45
  1089  0000A5                     	ds	12
  1090  0000B1                     setup_data_ok@activatePDP:
  1091                           	opt stack 0
  1092                           
  1093                           ; 15 bytes @ 0x51
  1094  0000B1                     	ds	1
  1095  0000B2                     send_over_socket_ok@msg:
  1096                           	opt stack 0
  1097                           
  1098                           ; 8 bytes @ 0x52
  1099  0000B2                     	ds	8
  1100  0000BA                     send_over_socket_ok@terminateData:
  1101                           	opt stack 0
  1102                           
  1103                           ; 1 bytes @ 0x5A
  1104  0000BA                     	ds	6
  1105  0000C0                     ??_main:
  1106                           
  1107                           ; 1 bytes @ 0x60
  1108  0000C0                     	ds	1
  1109                           tblptru	equ	0xFF8
  1110                           tblptrh	equ	0xFF7
  1111                           tblptrl	equ	0xFF6
  1112                           tablat	equ	0xFF5
  1113                           postinc0	equ	0xFEE
  1114                           wreg	equ	0xFE8
  1115                           postdec1	equ	0xFE5
  1116                           fsr1l	equ	0xFE1
  1117                           
  1118                           	psect	cstackCOMRAM
  1119  00002C                     __pcstackCOMRAM:
  1120                           	opt stack 0
  1121  00002C                     ??_check_mdstate_tmr3:
  1122  00002C                     
  1123                           ; 1 bytes @ 0x0
  1124  00002C                     	ds	1
  1125  00002D                     ??_isr:
  1126                           
  1127                           ; 1 bytes @ 0x1
  1128  00002D                     	ds	23
  1129                           tblptru	equ	0xFF8
  1130                           tblptrh	equ	0xFF7
  1131                           tblptrl	equ	0xFF6
  1132                           tablat	equ	0xFF5
  1133                           postinc0	equ	0xFEE
  1134                           wreg	equ	0xFE8
  1135                           postdec1	equ	0xFE5
  1136                           fsr1l	equ	0xFE1
  1137                           
  1138 ;;
  1139 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1140 ;;
  1141 ;; *************** function _main *****************
  1142 ;; Defined at:
  1143 ;;		line 70 in file "main.c"
  1144 ;; Parameters:    Size  Location     Type
  1145 ;;		None
  1146 ;; Auto vars:     Size  Location     Type
  1147 ;;		None
  1148 ;; Return value:  Size  Location     Type
  1149 ;;                  1    wreg      void 
  1150 ;; Registers used:
  1151 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1152 ;; Tracked objects:
  1153 ;;		On entry : 0/0
  1154 ;;		On exit  : 0/0
  1155 ;;		Unchanged: 0/0
  1156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1159 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1160 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1161 ;;Total ram usage:        1 bytes
  1162 ;; Hardware stack levels required when called:    8
  1163 ;; This function calls:
  1164 ;;		_check_modem_state
  1165 ;;		_init_pic
  1166 ;;		_start_modem_send_process
  1167 ;; This function is called by:
  1168 ;;		Startup code after reset
  1169 ;; This function uses a non-reentrant model
  1170 ;;
  1171                           
  1172                           	psect	text0
  1173  001E02                     __ptext0:
  1174                           	opt stack 0
  1175  001E02                     _main:
  1176                           	opt stack 23
  1177                           
  1178                           ;main.c: 72: init_pic();
  1179                           
  1180                           ;incstack = 0
  1181  001E02  ECEA  F00D         	call	_init_pic	;wreg free
  1182  001E06                     
  1183                           ;main.c: 78: {
  1184                           ;main.c: 79: if (PORTBbits.RB4)
  1185  001E06  A881               	btfss	3969,4,c	;volatile
  1186  001E08  D00E               	goto	l139
  1187                           
  1188                           ;main.c: 80: {
  1189                           ;main.c: 81: _delay((unsigned long)((50)*(8000000/4000.0)));
  1190  001E0A  0E82               	movlw	130
  1191  001E0C  0100               	movlb	0	; () banked
  1192  001E0E  6FC0               	movwf	??_main& (0+255),b
  1193  001E10  0EDD               	movlw	221
  1194  001E12                     u4367:
  1195  001E12  2EE8               	decfsz	wreg,f,c
  1196  001E14  D7FE               	bra	u4367
  1197  001E16  2FC0               	decfsz	??_main& (0+255),f,b
  1198  001E18  D7FC               	bra	u4367
  1199  001E1A  D000               	nop2	
  1200                           
  1201                           ;main.c: 82: if (PORTBbits.RB4)
  1202  001E1C  A881               	btfss	3969,4,c	;volatile
  1203  001E1E  D003               	goto	l139
  1204                           
  1205                           ;main.c: 83: {
  1206                           ;main.c: 84: start_modem_send_process('T');
  1207  001E20  0E54               	movlw	84
  1208  001E22  EC66  F00E         	call	_start_modem_send_process
  1209  001E26                     l139:
  1210                           
  1211                           ;main.c: 85: }
  1212                           ;main.c: 86: }
  1213                           ;main.c: 87: check_modem_state();
  1214  001E26  ECA0  F00D         	call	_check_modem_state	;wreg free
  1215  001E2A  D7ED               	goto	l137
  1216  001E2C                     __end_of_main:
  1217                           	opt stack 0
  1218                           tblptru	equ	0xFF8
  1219                           tblptrh	equ	0xFF7
  1220                           tblptrl	equ	0xFF6
  1221                           tablat	equ	0xFF5
  1222                           postinc0	equ	0xFEE
  1223                           wreg	equ	0xFE8
  1224                           postdec1	equ	0xFE5
  1225                           fsr1l	equ	0xFE1
  1226                           
  1227 ;; *************** function _init_pic *****************
  1228 ;; Defined at:
  1229 ;;		line 91 in file "main.c"
  1230 ;; Parameters:    Size  Location     Type
  1231 ;;		None
  1232 ;; Auto vars:     Size  Location     Type
  1233 ;;		None
  1234 ;; Return value:  Size  Location     Type
  1235 ;;                  1    wreg      void 
  1236 ;; Registers used:
  1237 ;;		wreg, status,2
  1238 ;; Tracked objects:
  1239 ;;		On entry : 0/0
  1240 ;;		On exit  : 0/0
  1241 ;;		Unchanged: 0/0
  1242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1246 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1247 ;;Total ram usage:        0 bytes
  1248 ;; Hardware stack levels used:    1
  1249 ;; Hardware stack levels required when called:    3
  1250 ;; This function calls:
  1251 ;;		Nothing
  1252 ;; This function is called by:
  1253 ;;		_main
  1254 ;; This function uses a non-reentrant model
  1255 ;;
  1256                           
  1257                           	psect	text1
  1258  001BD4                     __ptext1:
  1259                           	opt stack 0
  1260  001BD4                     _init_pic:
  1261                           	opt stack 27
  1262                           
  1263                           ;main.c: 94: OSCCONbits.IDLEN = 0;
  1264                           
  1265                           ;incstack = 0
  1266  001BD4  9ED3               	bcf	4051,7,c	;volatile
  1267                           
  1268                           ;main.c: 95: OSCCONbits.IRCF = 0b101;
  1269  001BD6  50D3               	movf	4051,w,c	;volatile
  1270  001BD8  0B8F               	andlw	-113
  1271  001BDA  0950               	iorlw	80
  1272  001BDC  6ED3               	movwf	4051,c	;volatile
  1273                           
  1274                           ;main.c: 96: OSCCONbits.OSTS = 1;
  1275  001BDE  86D3               	bsf	4051,3,c	;volatile
  1276                           
  1277                           ;main.c: 100: ANSELA = 0x01;
  1278  001BE0  0E01               	movlw	1
  1279  001BE2  010F               	movlb	15	; () banked
  1280  001BE4  6F38               	movwf	56,b	;volatile
  1281                           
  1282                           ;main.c: 101: TRISA = 0b00000001;
  1283  001BE6  0E01               	movlw	1
  1284  001BE8  6E92               	movwf	3986,c	;volatile
  1285                           
  1286                           ; BSR set to: 15
  1287                           ;main.c: 103: TRISAbits.TRISA0 = 1;
  1288  001BEA  8092               	bsf	3986,0,c	;volatile
  1289                           
  1290                           ; BSR set to: 15
  1291                           ;main.c: 104: TRISAbits.TRISA3 = 0;
  1292  001BEC  9692               	bcf	3986,3,c	;volatile
  1293                           
  1294                           ; BSR set to: 15
  1295                           ;main.c: 105: PORTAbits.RA3 = 0;
  1296  001BEE  9680               	bcf	3968,3,c	;volatile
  1297                           
  1298                           ;main.c: 108: ANSELC = 0x00;
  1299  001BF0  0E00               	movlw	0
  1300  001BF2  6F3A               	movwf	58,b	;volatile
  1301                           
  1302                           ;main.c: 109: TRISC = 0b10000000;
  1303  001BF4  0E80               	movlw	128
  1304  001BF6  6E94               	movwf	3988,c	;volatile
  1305                           
  1306                           ; BSR set to: 15
  1307                           ;main.c: 110: PORTBbits.RB3 = 1;
  1308  001BF8  8681               	bsf	3969,3,c	;volatile
  1309                           
  1310                           ; BSR set to: 15
  1311                           ;main.c: 111: TRISBbits.TRISB3 = 0;
  1312  001BFA  9693               	bcf	3987,3,c	;volatile
  1313                           
  1314                           ; BSR set to: 15
  1315                           ;main.c: 112: PORTCbits.RC6 = 1;
  1316  001BFC  8C82               	bsf	3970,6,c	;volatile
  1317                           
  1318                           ; BSR set to: 15
  1319                           ;main.c: 113: TRISCbits.TRISC6 = 0;
  1320  001BFE  9C94               	bcf	3988,6,c	;volatile
  1321                           
  1322                           ; BSR set to: 15
  1323                           ;main.c: 114: LATCbits.LATC7 = 1;
  1324  001C00  8E8B               	bsf	3979,7,c	;volatile
  1325                           
  1326                           ; BSR set to: 15
  1327                           ;main.c: 115: TRISCbits.TRISC7 = 1;
  1328  001C02  8E94               	bsf	3988,7,c	;volatile
  1329                           
  1330                           ;main.c: 118: ANSELB = 0x00;
  1331  001C04  0E00               	movlw	0
  1332  001C06  6F39               	movwf	57,b	;volatile
  1333                           
  1334                           ;main.c: 119: TRISB = 0b10110111;
  1335  001C08  0EB7               	movlw	183
  1336  001C0A  6E93               	movwf	3987,c	;volatile
  1337                           
  1338                           ; BSR set to: 15
  1339                           ;main.c: 121: TRISBbits.TRISB0 = 0;
  1340  001C0C  9093               	bcf	3987,0,c	;volatile
  1341                           
  1342                           ; BSR set to: 15
  1343                           ;main.c: 122: TRISCbits.TRISC1 = 1;
  1344  001C0E  8294               	bsf	3988,1,c	;volatile
  1345                           
  1346                           ; BSR set to: 15
  1347                           ;main.c: 123: PORTBbits.RB1 = 1;
  1348  001C10  8281               	bsf	3969,1,c	;volatile
  1349                           
  1350                           ; BSR set to: 15
  1351                           ;main.c: 124: TRISBbits.TRISB1 = 1;
  1352  001C12  8293               	bsf	3987,1,c	;volatile
  1353                           
  1354                           ; BSR set to: 15
  1355                           ;main.c: 125: PORTBbits.RB2 = 1;
  1356  001C14  8481               	bsf	3969,2,c	;volatile
  1357                           
  1358                           ; BSR set to: 15
  1359                           ;main.c: 126: TRISBbits.TRISB2 = 1;
  1360  001C16  8493               	bsf	3987,2,c	;volatile
  1361                           
  1362                           ; BSR set to: 15
  1363                           ;main.c: 127: PORTCbits.RC4 = 1;
  1364  001C18  8882               	bsf	3970,4,c	;volatile
  1365                           
  1366                           ; BSR set to: 15
  1367                           ;main.c: 128: TRISCbits.TRISC4 = 0;
  1368  001C1A  9894               	bcf	3988,4,c	;volatile
  1369                           
  1370                           ; BSR set to: 15
  1371                           ;main.c: 129: PORTBbits.RB4 = 1;
  1372  001C1C  8881               	bsf	3969,4,c	;volatile
  1373                           
  1374                           ; BSR set to: 15
  1375                           ;main.c: 130: TRISBbits.TRISB4 = 1;
  1376  001C1E  8893               	bsf	3987,4,c	;volatile
  1377                           
  1378                           ; BSR set to: 15
  1379                           ;main.c: 131: PORTBbits.RB5 = 1;
  1380  001C20  8A81               	bsf	3969,5,c	;volatile
  1381                           
  1382                           ; BSR set to: 15
  1383                           ;main.c: 132: TRISBbits.TRISB5 = 1;
  1384  001C22  8A93               	bsf	3987,5,c	;volatile
  1385                           
  1386                           ; BSR set to: 15
  1387                           ;main.c: 133: LATBbits.LATB6 = 1;
  1388  001C24  8C8A               	bsf	3978,6,c	;volatile
  1389                           
  1390                           ; BSR set to: 15
  1391                           ;main.c: 134: TRISBbits.TRISB6 = 0;
  1392  001C26  9C93               	bcf	3987,6,c	;volatile
  1393                           
  1394                           ; BSR set to: 15
  1395                           ;main.c: 135: PORTBbits.RB7 = 1;
  1396  001C28  8E81               	bsf	3969,7,c	;volatile
  1397                           
  1398                           ; BSR set to: 15
  1399                           ;main.c: 136: TRISBbits.TRISB7 = 1;
  1400  001C2A  8E93               	bsf	3987,7,c	;volatile
  1401                           
  1402                           ; BSR set to: 15
  1403                           ;main.c: 138: TRISAbits.TRISA1 = 0;
  1404  001C2C  9292               	bcf	3986,1,c	;volatile
  1405                           
  1406                           ; BSR set to: 15
  1407                           ;main.c: 139: PORTAbits.RA1 = 0;
  1408  001C2E  9280               	bcf	3968,1,c	;volatile
  1409                           
  1410                           ;main.c: 146: T0CON = 0x87;
  1411  001C30  0E87               	movlw	135
  1412  001C32  6ED5               	movwf	4053,c	;volatile
  1413                           
  1414                           ;main.c: 147: TMR0H = ((65535-780)/256);
  1415  001C34  0EFC               	movlw	252
  1416  001C36  6ED7               	movwf	4055,c	;volatile
  1417                           
  1418                           ;main.c: 148: TMR0L = ((65535-780)%256);
  1419  001C38  0EF3               	movlw	243
  1420  001C3A  6ED6               	movwf	4054,c	;volatile
  1421                           
  1422                           ; BSR set to: 15
  1423                           ;main.c: 149: TMR0IF = 0;
  1424  001C3C  94F2               	bcf	intcon,2,c	;volatile
  1425                           
  1426                           ;main.c: 172: T3CON = 0b00000101;
  1427  001C3E  0E05               	movlw	5
  1428  001C40  6EB1               	movwf	4017,c	;volatile
  1429                           
  1430                           ; BSR set to: 15
  1431                           ;main.c: 174: T3CONbits.TMR3ON = 0;
  1432  001C42  90B1               	bcf	4017,0,c	;volatile
  1433                           
  1434                           ; BSR set to: 15
  1435                           ;main.c: 175: PIE2bits.TMR3IE = 1;
  1436  001C44  82A0               	bsf	4000,1,c	;volatile
  1437                           
  1438                           ; BSR set to: 15
  1439                           ;main.c: 176: PIR2bits.TMR3IF = 0;
  1440  001C46  92A1               	bcf	4001,1,c	;volatile
  1441                           
  1442                           ; BSR set to: 15
  1443                           ;main.c: 177: INTCONbits.PEIE = 1;
  1444  001C48  8CF2               	bsf	intcon,6,c	;volatile
  1445                           
  1446                           ; BSR set to: 15
  1447                           ;main.c: 178: INTCONbits.GIE = 1;
  1448  001C4A  8EF2               	bsf	intcon,7,c	;volatile
  1449                           
  1450                           ;main.c: 181: md_state = IDLE;
  1451  001C4C  0E00               	movlw	0
  1452  001C4E  0100               	movlb	0	; () banked
  1453  001C50  6FD0               	movwf	_md_state& (0+255),b
  1454                           
  1455                           ; BSR set to: 0
  1456  001C52  0012               	return		;funcret
  1457  001C54                     __end_of_init_pic:
  1458                           	opt stack 0
  1459                           tblptru	equ	0xFF8
  1460                           tblptrh	equ	0xFF7
  1461                           tblptrl	equ	0xFF6
  1462                           tablat	equ	0xFF5
  1463                           intcon	equ	0xFF2
  1464                           postinc0	equ	0xFEE
  1465                           wreg	equ	0xFE8
  1466                           postdec1	equ	0xFE5
  1467                           fsr1l	equ	0xFE1
  1468                           
  1469 ;; *************** function _check_modem_state *****************
  1470 ;; Defined at:
  1471 ;;		line 48 in file "modem.c"
  1472 ;; Parameters:    Size  Location     Type
  1473 ;;		None
  1474 ;; Auto vars:     Size  Location     Type
  1475 ;;		None
  1476 ;; Return value:  Size  Location     Type
  1477 ;;                  1    wreg      void 
  1478 ;; Registers used:
  1479 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1480 ;; Tracked objects:
  1481 ;;		On entry : 0/0
  1482 ;;		On exit  : 0/0
  1483 ;;		Unchanged: 0/0
  1484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1488 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1489 ;;Total ram usage:        0 bytes
  1490 ;; Hardware stack levels used:    1
  1491 ;; Hardware stack levels required when called:    7
  1492 ;; This function calls:
  1493 ;;		_close_socket_ok
  1494 ;;		_send_md_cfg_cmds_ok
  1495 ;;		_send_over_socket_ok
  1496 ;;		_setup_data_ok
  1497 ;; This function is called by:
  1498 ;;		_main
  1499 ;; This function uses a non-reentrant model
  1500 ;;
  1501                           
  1502                           	psect	text2
  1503  001B40                     __ptext2:
  1504                           	opt stack 0
  1505  001B40                     _check_modem_state:
  1506                           	opt stack 23
  1507                           
  1508                           ;modem.c: 50: switch (md_state)
  1509                           
  1510                           ; BSR set to: 0
  1511                           ;incstack = 0
  1512  001B40  D034               	goto	l403
  1513  001B42                     
  1514                           ;modem.c: 55: if (bootTimerIsDone)
  1515  001B42  0100               	movlb	0	; () banked
  1516  001B44  51CF               	movf	_bootTimerIsDone& (0+255),w,b
  1517  001B46  B4D8               	btfsc	status,2,c
  1518  001B48  0012               	return	
  1519                           
  1520                           ; BSR set to: 0
  1521                           ;modem.c: 56: {
  1522                           ;modem.c: 57: bootTimerIsDone = 0;
  1523  001B4A  0E00               	movlw	0
  1524  001B4C  6FCF               	movwf	_bootTimerIsDone& (0+255),b
  1525                           
  1526                           ;modem.c: 58: numRetries = 15;
  1527  001B4E  0E0F               	movlw	15
  1528  001B50  6E2B               	movwf	_numRetries,c
  1529                           
  1530                           ;modem.c: 59: md_state = CONFIG;
  1531  001B52  0E02               	movlw	2
  1532  001B54  6FD0               	movwf	_md_state& (0+255),b
  1533                           
  1534                           ; BSR set to: 0
  1535                           ;modem.c: 60: }
  1536                           ;modem.c: 61: break;
  1537  001B56  0012               	return	
  1538  001B58                     
  1539                           ; BSR set to: 0
  1540                           ;modem.c: 63: if (send_md_cfg_cmds_ok())
  1541                           
  1542                           ; BSR set to: 0
  1543  001B58  EC41  F008         	call	_send_md_cfg_cmds_ok	;wreg free
  1544  001B5C  0900               	iorlw	0
  1545  001B5E  B4D8               	btfsc	status,2,c
  1546  001B60  0012               	return	
  1547                           
  1548                           ;modem.c: 64: {
  1549                           ;modem.c: 66: md_state = WAITING_PDP_ACTIVE;
  1550  001B62  0E03               	movlw	3
  1551  001B64  0100               	movlb	0	; () banked
  1552  001B66  6FD0               	movwf	_md_state& (0+255),b
  1553                           
  1554                           ; BSR set to: 0
  1555                           ;modem.c: 69: }
  1556                           ;modem.c: 70: break;
  1557  001B68  0012               	return	
  1558  001B6A                     
  1559                           ; BSR set to: 0
  1560                           ;modem.c: 72: setup_data_ok();
  1561                           
  1562                           ; BSR set to: 0
  1563  001B6A  ECDE  F00C         	call	_setup_data_ok	;wreg free
  1564                           
  1565                           ;modem.c: 73: if (pdpIsActive)
  1566  001B6E  0100               	movlb	0	; () banked
  1567  001B70  51CE               	movf	_pdpIsActive& (0+255),w,b
  1568  001B72  B4D8               	btfsc	status,2,c
  1569  001B74  0012               	return	
  1570                           
  1571                           ; BSR set to: 0
  1572                           ;modem.c: 74: md_state = SENDING_DATA;
  1573  001B76  0E04               	movlw	4
  1574  001B78  6FD0               	movwf	_md_state& (0+255),b
  1575                           
  1576                           ; BSR set to: 0
  1577                           ;modem.c: 75: break;
  1578  001B7A  0012               	return	
  1579  001B7C                     
  1580                           ; BSR set to: 0
  1581                           ;modem.c: 77: if (send_over_socket_ok())
  1582                           
  1583                           ; BSR set to: 0
  1584  001B7C  EC2C  F00B         	call	_send_over_socket_ok	;wreg free
  1585  001B80  0900               	iorlw	0
  1586  001B82  B4D8               	btfsc	status,2,c
  1587  001B84  0012               	return	
  1588                           
  1589                           ;modem.c: 78: {
  1590                           ;modem.c: 79: md_state = CLOSE_SOCKET;
  1591  001B86  0E05               	movlw	5
  1592  001B88  0100               	movlb	0	; () banked
  1593  001B8A  6FD0               	movwf	_md_state& (0+255),b
  1594                           
  1595                           ; BSR set to: 0
  1596                           ;modem.c: 80: }
  1597                           ;modem.c: 81: break;
  1598  001B8C  0012               	return	
  1599  001B8E                     
  1600                           ; BSR set to: 0
  1601                           ;modem.c: 83: if (close_socket_ok())
  1602                           
  1603                           ; BSR set to: 0
  1604  001B8E  EC6F  F00C         	call	_close_socket_ok	;wreg free
  1605  001B92  0900               	iorlw	0
  1606  001B94  B4D8               	btfsc	status,2,c
  1607  001B96  0012               	return	
  1608                           
  1609                           ;modem.c: 84: {
  1610                           ;modem.c: 85: pdpIsActive = 0;
  1611  001B98  0E00               	movlw	0
  1612  001B9A  0100               	movlb	0	; () banked
  1613  001B9C  6FCE               	movwf	_pdpIsActive& (0+255),b
  1614                           
  1615                           ;modem.c: 86: md_state = IDLE;
  1616  001B9E  0E00               	movlw	0
  1617  001BA0  6FD0               	movwf	_md_state& (0+255),b
  1618                           
  1619                           ; BSR set to: 0
  1620                           ;modem.c: 87: PORTAbits.RA3 = 0;
  1621  001BA2  9680               	bcf	3968,3,c	;volatile
  1622                           
  1623                           ;modem.c: 88: awake = 0;
  1624  001BA4  0E00               	movlw	0
  1625  001BA6  6E4A               	movwf	_awake,c
  1626                           
  1627                           ; BSR set to: 0
  1628                           ;modem.c: 89: }
  1629                           ;modem.c: 95: }
  1630  001BA8  0012               	return	
  1631  001BAA                     l403:
  1632                           
  1633                           ; BSR set to: 0
  1634  001BAA  0100               	movlb	0	; () banked
  1635  001BAC  51D0               	movf	_md_state& (0+255),w,b
  1636                           
  1637                           ; Switch size 1, requested type "space"
  1638                           ; Number of cases is 6, Range of values is 0 to 5
  1639                           ; switch strategies available:
  1640                           ; Name         Instructions Cycles
  1641                           ; simple_byte           19    10 (average)
  1642                           ;	Chosen strategy is simple_byte
  1643  001BAE  0A00               	xorlw	0	; case 0
  1644  001BB0  B4D8               	btfsc	status,2,c
  1645  001BB2  0012               	return	
  1646  001BB4  0A01               	xorlw	1	; case 1
  1647  001BB6  B4D8               	btfsc	status,2,c
  1648  001BB8  D7C4               	goto	l406
  1649  001BBA  0A03               	xorlw	3	; case 2
  1650  001BBC  B4D8               	btfsc	status,2,c
  1651  001BBE  D7CC               	goto	l408
  1652  001BC0  0A01               	xorlw	1	; case 3
  1653  001BC2  B4D8               	btfsc	status,2,c
  1654  001BC4  D7D2               	goto	l410
  1655  001BC6  0A07               	xorlw	7	; case 4
  1656  001BC8  B4D8               	btfsc	status,2,c
  1657  001BCA  D7D8               	goto	l412
  1658  001BCC  0A01               	xorlw	1	; case 5
  1659  001BCE  A4D8               	btfss	status,2,c
  1660  001BD0  0012               	return	
  1661  001BD2  D7DD               	goto	l414
  1662  001BD4                     __end_of_check_modem_state:
  1663                           	opt stack 0
  1664                           tblptru	equ	0xFF8
  1665                           tblptrh	equ	0xFF7
  1666                           tblptrl	equ	0xFF6
  1667                           tablat	equ	0xFF5
  1668                           intcon	equ	0xFF2
  1669                           postinc0	equ	0xFEE
  1670                           wreg	equ	0xFE8
  1671                           postdec1	equ	0xFE5
  1672                           fsr1l	equ	0xFE1
  1673                           status	equ	0xFD8
  1674                           
  1675 ;; *************** function _setup_data_ok *****************
  1676 ;; Defined at:
  1677 ;;		line 182 in file "modem.c"
  1678 ;; Parameters:    Size  Location     Type
  1679 ;;		None
  1680 ;; Auto vars:     Size  Location     Type
  1681 ;;  setApn         47    9[BANK0 ] unsigned char [47]
  1682 ;;  cfgSocket      25   56[BANK0 ] unsigned char [25]
  1683 ;;  activatePDP    15   81[BANK0 ] unsigned char [15]
  1684 ;; Return value:  Size  Location     Type
  1685 ;;                  1    wreg      unsigned char 
  1686 ;; Registers used:
  1687 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1688 ;; Tracked objects:
  1689 ;;		On entry : 0/0
  1690 ;;		On exit  : 0/0
  1691 ;;		Unchanged: 0/0
  1692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1694 ;;      Locals:         0      87       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1696 ;;      Totals:         0      87       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1697 ;;Total ram usage:       87 bytes
  1698 ;; Hardware stack levels used:    1
  1699 ;; Hardware stack levels required when called:    5
  1700 ;; This function calls:
  1701 ;;		_md_uart_write_str_ok
  1702 ;;		_reset_AT_marks
  1703 ;; This function is called by:
  1704 ;;		_check_modem_state
  1705 ;; This function uses a non-reentrant model
  1706 ;;
  1707                           
  1708                           	psect	text3
  1709  0019BC                     __ptext3:
  1710                           	opt stack 0
  1711  0019BC                     _setup_data_ok:
  1712                           	opt stack 24
  1713                           
  1714                           ;modem.c: 184: uint8_t setApn[] = "AT+CGDCONT=3,\"IPV4V6\",\"wyleslte.gw7.vzwentp\"\r\n"
      +                          ;
  1715                           
  1716                           ;incstack = 0
  1717  0019BC  EE22  F0C0         	lfsr	2,setup_data_ok@F6877
  1718  0019C0  EE10  F069         	lfsr	1,setup_data_ok@setApn
  1719  0019C4  0E2E               	movlw	46
  1720  0019C6                     u3971:
  1721  0019C6  CFDB FFE3          	movff	plusw2,plusw1
  1722  0019CA  06E8               	decf	wreg,f,c
  1723  0019CC  E2FC               	bc	u3971
  1724                           
  1725                           ;modem.c: 185: uint8_t cfgSocket[] = "AT#SCFGEXT=1,1,0,0,0,0\r\n";
  1726  0019CE  EE21  F000         	lfsr	2,setup_data_ok@F6879
  1727  0019D2  EE10  F098         	lfsr	1,setup_data_ok@cfgSocket
  1728  0019D6  0E18               	movlw	24
  1729  0019D8                     u3981:
  1730  0019D8  CFDB FFE3          	movff	plusw2,plusw1
  1731  0019DC  06E8               	decf	wreg,f,c
  1732  0019DE  E2FC               	bc	u3981
  1733                           
  1734                           ;modem.c: 186: uint8_t activatePDP[] = "AT#SGACT=3,1\r\n";
  1735  0019E0  EE21  F039         	lfsr	2,setup_data_ok@F6881
  1736  0019E4  EE10  F0B1         	lfsr	1,setup_data_ok@activatePDP
  1737  0019E8  0E0E               	movlw	14
  1738  0019EA                     u3991:
  1739  0019EA  CFDB FFE3          	movff	plusw2,plusw1
  1740  0019EE  06E8               	decf	wreg,f,c
  1741  0019F0  E2FC               	bc	u3991
  1742                           
  1743                           ;modem.c: 189: if (!(sentAT1 == 0x03))
  1744  0019F2  0E03               	movlw	3
  1745  0019F4  0100               	movlb	0	; () banked
  1746  0019F6  19CD               	xorwf	_sentAT1& (0+255),w,b
  1747  0019F8  B4D8               	btfsc	status,2,c
  1748  0019FA  D00E               	goto	l473
  1749                           
  1750                           ; BSR set to: 0
  1751                           ;modem.c: 190: sentAT1 = md_uart_write_str_ok((uint8_t *)&setApn[0], sizeof(setApn), 1, 
      +                          0);
  1752  0019FC  0E69               	movlw	low setup_data_ok@setApn
  1753  0019FE  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  1754  001A00  0E00               	movlw	high setup_data_ok@setApn
  1755  001A02  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  1756  001A04  0E2F               	movlw	47
  1757  001A06  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  1758  001A08  0E01               	movlw	1
  1759  001A0A  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  1760  001A0C  0E00               	movlw	0
  1761  001A0E  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  1762  001A10  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  1763  001A14  0100               	movlb	0	; () banked
  1764  001A16  6FCD               	movwf	_sentAT1& (0+255),b
  1765  001A18                     l473:
  1766                           
  1767                           ; BSR set to: 0
  1768                           ;modem.c: 191: if ((sentAT1 == 0x03) && !(sentAT2 == 0x03))
  1769                           
  1770                           ; BSR set to: 0
  1771  001A18  0E03               	movlw	3
  1772  001A1A  19CD               	xorwf	_sentAT1& (0+255),w,b
  1773  001A1C  A4D8               	btfss	status,2,c
  1774  001A1E  D012               	goto	l474
  1775                           
  1776                           ; BSR set to: 0
  1777  001A20  0E03               	movlw	3
  1778  001A22  19CC               	xorwf	_sentAT2& (0+255),w,b
  1779  001A24  B4D8               	btfsc	status,2,c
  1780  001A26  D00E               	goto	l474
  1781                           
  1782                           ; BSR set to: 0
  1783                           ;modem.c: 192: sentAT2 = md_uart_write_str_ok((uint8_t *)&cfgSocket[0], sizeof(cfgSocket
      +                          ), 1, 0);
  1784  001A28  0E98               	movlw	low setup_data_ok@cfgSocket
  1785  001A2A  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  1786  001A2C  0E00               	movlw	high setup_data_ok@cfgSocket
  1787  001A2E  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  1788  001A30  0E19               	movlw	25
  1789  001A32  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  1790  001A34  0E01               	movlw	1
  1791  001A36  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  1792  001A38  0E00               	movlw	0
  1793  001A3A  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  1794  001A3C  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  1795  001A40  0100               	movlb	0	; () banked
  1796  001A42  6FCC               	movwf	_sentAT2& (0+255),b
  1797  001A44                     l474:
  1798                           
  1799                           ; BSR set to: 0
  1800                           ;modem.c: 193: if ((sentAT2 == 0x03) && !(sentAT3 == 0x03))
  1801                           
  1802                           ; BSR set to: 0
  1803  001A44  0E03               	movlw	3
  1804  001A46  19CC               	xorwf	_sentAT2& (0+255),w,b
  1805  001A48  A4D8               	btfss	status,2,c
  1806  001A4A  D012               	goto	l475
  1807                           
  1808                           ; BSR set to: 0
  1809  001A4C  0E03               	movlw	3
  1810  001A4E  19CB               	xorwf	_sentAT3& (0+255),w,b
  1811  001A50  B4D8               	btfsc	status,2,c
  1812  001A52  D00E               	goto	l475
  1813                           
  1814                           ; BSR set to: 0
  1815                           ;modem.c: 194: sentAT3 = md_uart_write_str_ok((uint8_t *)&activatePDP[0], sizeof(activat
      +                          ePDP), 1, 0);
  1816  001A54  0EB1               	movlw	low setup_data_ok@activatePDP
  1817  001A56  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  1818  001A58  0E00               	movlw	high setup_data_ok@activatePDP
  1819  001A5A  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  1820  001A5C  0E0F               	movlw	15
  1821  001A5E  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  1822  001A60  0E01               	movlw	1
  1823  001A62  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  1824  001A64  0E00               	movlw	0
  1825  001A66  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  1826  001A68  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  1827  001A6C  0100               	movlb	0	; () banked
  1828  001A6E  6FCB               	movwf	_sentAT3& (0+255),b
  1829  001A70                     l475:
  1830                           
  1831                           ; BSR set to: 0
  1832                           ;modem.c: 195: if (sentAT3 == 0x03)
  1833                           
  1834                           ; BSR set to: 0
  1835  001A70  0E03               	movlw	3
  1836  001A72  19CB               	xorwf	_sentAT3& (0+255),w,b
  1837  001A74  A4D8               	btfss	status,2,c
  1838  001A76  0012               	return	
  1839                           
  1840                           ; BSR set to: 0
  1841                           ;modem.c: 196: {
  1842                           ;modem.c: 197: pdpIsActive = 1;
  1843  001A78  0E01               	movlw	1
  1844  001A7A  6FCE               	movwf	_pdpIsActive& (0+255),b
  1845                           
  1846                           ; BSR set to: 0
  1847                           ;modem.c: 198: reset_AT_marks();
  1848  001A7C  ECBA  F00E         	call	_reset_AT_marks	;wreg free
  1849                           
  1850                           ;modem.c: 199: return 1;
  1851                           ;	Return value of _setup_data_ok is never used
  1852  001A80  0012               	return	
  1853  001A82                     __end_of_setup_data_ok:
  1854                           	opt stack 0
  1855                           tblptru	equ	0xFF8
  1856                           tblptrh	equ	0xFF7
  1857                           tblptrl	equ	0xFF6
  1858                           tablat	equ	0xFF5
  1859                           intcon	equ	0xFF2
  1860                           postinc0	equ	0xFEE
  1861                           wreg	equ	0xFE8
  1862                           postdec1	equ	0xFE5
  1863                           plusw1	equ	0xFE3
  1864                           fsr1l	equ	0xFE1
  1865                           plusw2	equ	0xFDB
  1866                           status	equ	0xFD8
  1867                           
  1868 ;; *************** function _send_over_socket_ok *****************
  1869 ;; Defined at:
  1870 ;;		line 212 in file "modem.c"
  1871 ;; Parameters:    Size  Location     Type
  1872 ;;		None
  1873 ;; Auto vars:     Size  Location     Type
  1874 ;;  openConnecti   44    9[BANK0 ] const unsigned char [44]
  1875 ;;  srecv          16   53[BANK0 ] const unsigned char [16]
  1876 ;;  ssend          13   69[BANK0 ] const unsigned char [13]
  1877 ;;  msg             8   82[BANK0 ] const unsigned char [8]
  1878 ;;  terminateDat    1   90[BANK0 ] unsigned char 
  1879 ;; Return value:  Size  Location     Type
  1880 ;;                  1    wreg      unsigned char 
  1881 ;; Registers used:
  1882 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1883 ;; Tracked objects:
  1884 ;;		On entry : 0/0
  1885 ;;		On exit  : 0/0
  1886 ;;		Unchanged: 0/0
  1887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1889 ;;      Locals:         0      82       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1891 ;;      Totals:         0      82       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1892 ;;Total ram usage:       82 bytes
  1893 ;; Hardware stack levels used:    1
  1894 ;; Hardware stack levels required when called:    5
  1895 ;; This function calls:
  1896 ;;		_md_uart_write_str_ok
  1897 ;;		_reset_AT_marks
  1898 ;; This function is called by:
  1899 ;;		_check_modem_state
  1900 ;; This function uses a non-reentrant model
  1901 ;;
  1902                           
  1903                           	psect	text4
  1904  001658                     __ptext4:
  1905                           	opt stack 0
  1906  001658                     _send_over_socket_ok:
  1907                           	opt stack 24
  1908                           
  1909                           ;modem.c: 214: const uint8_t openConnection[] = "AT#SD=1,0,10510,\"modules.telit.com\",0
      +                          ,0,1\r\n";
  1910                           
  1911                           ;incstack = 0
  1912  001658  0E01               	movlw	low send_over_socket_ok@F6886
  1913  00165A  6EF6               	movwf	tblptrl,c
  1914  00165C                     	if	1	;There is more than 1 active tblptr byte
  1915  00165C  0E10               	movlw	high send_over_socket_ok@F6886
  1916  00165E  6EF7               	movwf	tblptrh,c
  1917  001660                     	endif
  1918  001660                     	if	0	;There are less than 3 active tblptr bytes
  1919  001660                     	endif
  1920  001660  EE20  F069         	lfsr	2,send_over_socket_ok@openConnection
  1921  001664  0E2B               	movlw	43
  1922  001666                     u4060:
  1923  001666  0009               	tblrd		*+
  1924  001668  CFF5 FFDE          	movff	tablat,postinc2
  1925  00166C  06E8               	decf	wreg,f,c
  1926  00166E  E2FB               	bc	u4060
  1927                           
  1928                           ;modem.c: 215: const uint8_t ssend[] = "AT#SSEND=1\r\n";
  1929  001670  0E5D               	movlw	low send_over_socket_ok@F6888
  1930  001672  6EF6               	movwf	tblptrl,c
  1931  001674                     	if	1	;There is more than 1 active tblptr byte
  1932  001674  0E10               	movlw	high send_over_socket_ok@F6888
  1933  001676  6EF7               	movwf	tblptrh,c
  1934  001678                     	endif
  1935  001678                     	if	0	;There are less than 3 active tblptr bytes
  1936  001678                     	endif
  1937  001678  EE20  F0A5         	lfsr	2,send_over_socket_ok@ssend
  1938  00167C  0E0C               	movlw	12
  1939  00167E                     u4070:
  1940  00167E  0009               	tblrd		*+
  1941  001680  CFF5 FFDE          	movff	tablat,postinc2
  1942  001684  06E8               	decf	wreg,f,c
  1943  001686  E2FB               	bc	u4070
  1944                           
  1945                           ;modem.c: 216: const uint8_t srecv[]="AT#SRECV=1,89\r\n";
  1946  001688  0E3E               	movlw	low send_over_socket_ok@F6890
  1947  00168A  6EF6               	movwf	tblptrl,c
  1948  00168C                     	if	1	;There is more than 1 active tblptr byte
  1949  00168C  0E10               	movlw	high send_over_socket_ok@F6890
  1950  00168E  6EF7               	movwf	tblptrh,c
  1951  001690                     	endif
  1952  001690                     	if	0	;There are less than 3 active tblptr bytes
  1953  001690                     	endif
  1954  001690  EE20  F095         	lfsr	2,send_over_socket_ok@srecv
  1955  001694  0E0F               	movlw	15
  1956  001696                     u4080:
  1957  001696  0009               	tblrd		*+
  1958  001698  CFF5 FFDE          	movff	tablat,postinc2
  1959  00169C  06E8               	decf	wreg,f,c
  1960  00169E  E2FB               	bc	u4080
  1961                           
  1962                           ;modem.c: 217: const uint8_t msg[] = "Echo.\r\n";
  1963  0016A0  0E74               	movlw	low send_over_socket_ok@F6892
  1964  0016A2  6EF6               	movwf	tblptrl,c
  1965  0016A4                     	if	1	;There is more than 1 active tblptr byte
  1966  0016A4  0E10               	movlw	high send_over_socket_ok@F6892
  1967  0016A6  6EF7               	movwf	tblptrh,c
  1968  0016A8                     	endif
  1969  0016A8                     	if	0	;There are less than 3 active tblptr bytes
  1970  0016A8                     	endif
  1971  0016A8  EE20  F0B2         	lfsr	2,send_over_socket_ok@msg
  1972  0016AC  0E07               	movlw	7
  1973  0016AE                     u4090:
  1974  0016AE  0009               	tblrd		*+
  1975  0016B0  CFF5 FFDE          	movff	tablat,postinc2
  1976  0016B4  06E8               	decf	wreg,f,c
  1977  0016B6  E2FB               	bc	u4090
  1978                           
  1979                           ;modem.c: 219: uint8_t terminateData = 26;
  1980  0016B8  0E1A               	movlw	26
  1981  0016BA  0100               	movlb	0	; () banked
  1982  0016BC  6FBA               	movwf	send_over_socket_ok@terminateData& (0+255),b
  1983                           
  1984                           ; BSR set to: 0
  1985                           ;modem.c: 221: if (!(sentAT1 == 0x03))
  1986  0016BE  0E03               	movlw	3
  1987  0016C0  19CD               	xorwf	_sentAT1& (0+255),w,b
  1988  0016C2  B4D8               	btfsc	status,2,c
  1989  0016C4  D00E               	goto	l491
  1990                           
  1991                           ; BSR set to: 0
  1992                           ;modem.c: 222: sentAT1 = md_uart_write_str_ok((uint8_t *)&openConnection[0], sizeof(open
      +                          Connection), 1, 0);
  1993  0016C6  0E69               	movlw	low send_over_socket_ok@openConnection
  1994  0016C8  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  1995  0016CA  0E00               	movlw	high send_over_socket_ok@openConnection
  1996  0016CC  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  1997  0016CE  0E2C               	movlw	44
  1998  0016D0  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  1999  0016D2  0E01               	movlw	1
  2000  0016D4  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  2001  0016D6  0E00               	movlw	0
  2002  0016D8  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  2003  0016DA  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  2004  0016DE  0100               	movlb	0	; () banked
  2005  0016E0  6FCD               	movwf	_sentAT1& (0+255),b
  2006  0016E2                     l491:
  2007                           
  2008                           ; BSR set to: 0
  2009                           ;modem.c: 223: if ((sentAT1 == 0x03) && !(sentAT2 == 0x03))
  2010                           
  2011                           ; BSR set to: 0
  2012  0016E2  0E03               	movlw	3
  2013  0016E4  19CD               	xorwf	_sentAT1& (0+255),w,b
  2014  0016E6  A4D8               	btfss	status,2,c
  2015  0016E8  D012               	goto	l492
  2016                           
  2017                           ; BSR set to: 0
  2018  0016EA  0E03               	movlw	3
  2019  0016EC  19CC               	xorwf	_sentAT2& (0+255),w,b
  2020  0016EE  B4D8               	btfsc	status,2,c
  2021  0016F0  D00E               	goto	l492
  2022                           
  2023                           ; BSR set to: 0
  2024                           ;modem.c: 224: sentAT2 = md_uart_write_str_ok((uint8_t *)&ssend[0], sizeof(ssend), 0, 1)
      +                          ;
  2025  0016F2  0EA5               	movlw	low send_over_socket_ok@ssend
  2026  0016F4  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  2027  0016F6  0E00               	movlw	high send_over_socket_ok@ssend
  2028  0016F8  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  2029  0016FA  0E0D               	movlw	13
  2030  0016FC  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  2031  0016FE  0E00               	movlw	0
  2032  001700  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  2033  001702  0E01               	movlw	1
  2034  001704  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  2035  001706  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  2036  00170A  0100               	movlb	0	; () banked
  2037  00170C  6FCC               	movwf	_sentAT2& (0+255),b
  2038  00170E                     l492:
  2039                           
  2040                           ; BSR set to: 0
  2041                           ;modem.c: 225: if ((sentAT2 == 0x03) && !(sentAT3 == 0x03))
  2042                           
  2043                           ; BSR set to: 0
  2044  00170E  0E03               	movlw	3
  2045  001710  19CC               	xorwf	_sentAT2& (0+255),w,b
  2046  001712  A4D8               	btfss	status,2,c
  2047  001714  D012               	goto	l493
  2048                           
  2049                           ; BSR set to: 0
  2050  001716  0E03               	movlw	3
  2051  001718  19CB               	xorwf	_sentAT3& (0+255),w,b
  2052  00171A  B4D8               	btfsc	status,2,c
  2053  00171C  D00E               	goto	l493
  2054                           
  2055                           ; BSR set to: 0
  2056                           ;modem.c: 226: sentAT3 = md_uart_write_str_ok((uint8_t *)&msg[0], sizeof(msg), 0, 0);
  2057  00171E  0EB2               	movlw	low send_over_socket_ok@msg
  2058  001720  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  2059  001722  0E00               	movlw	high send_over_socket_ok@msg
  2060  001724  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  2061  001726  0E08               	movlw	8
  2062  001728  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  2063  00172A  0E00               	movlw	0
  2064  00172C  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  2065  00172E  0E00               	movlw	0
  2066  001730  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  2067  001732  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  2068  001736  0100               	movlb	0	; () banked
  2069  001738  6FCB               	movwf	_sentAT3& (0+255),b
  2070  00173A                     l493:
  2071                           
  2072                           ; BSR set to: 0
  2073                           ;modem.c: 227: if ((sentAT3 == 0x03) && !(sentAT4 == 0x03))
  2074                           
  2075                           ; BSR set to: 0
  2076  00173A  0E03               	movlw	3
  2077  00173C  19CB               	xorwf	_sentAT3& (0+255),w,b
  2078  00173E  A4D8               	btfss	status,2,c
  2079  001740  D012               	goto	l494
  2080                           
  2081                           ; BSR set to: 0
  2082  001742  0E03               	movlw	3
  2083  001744  19CA               	xorwf	_sentAT4& (0+255),w,b
  2084  001746  B4D8               	btfsc	status,2,c
  2085  001748  D00E               	goto	l494
  2086                           
  2087                           ; BSR set to: 0
  2088                           ;modem.c: 228: sentAT4 = md_uart_write_str_ok((uint8_t *)&terminateData, 1, 1, 0);
  2089  00174A  0EBA               	movlw	low send_over_socket_ok@terminateData
  2090  00174C  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  2091  00174E  0E00               	movlw	high send_over_socket_ok@terminateData
  2092  001750  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  2093  001752  0E01               	movlw	1
  2094  001754  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  2095  001756  0E01               	movlw	1
  2096  001758  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  2097  00175A  0E00               	movlw	0
  2098  00175C  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  2099  00175E  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  2100  001762  0100               	movlb	0	; () banked
  2101  001764  6FCA               	movwf	_sentAT4& (0+255),b
  2102  001766                     l494:
  2103                           
  2104                           ; BSR set to: 0
  2105                           ;modem.c: 232: if ((sentAT4 == 0x03) && !(sentAT5 == 0x03))
  2106                           
  2107                           ; BSR set to: 0
  2108  001766  0E03               	movlw	3
  2109  001768  19CA               	xorwf	_sentAT4& (0+255),w,b
  2110  00176A  A4D8               	btfss	status,2,c
  2111  00176C  D012               	goto	l495
  2112                           
  2113                           ; BSR set to: 0
  2114  00176E  0E03               	movlw	3
  2115  001770  19C9               	xorwf	_sentAT5& (0+255),w,b
  2116  001772  B4D8               	btfsc	status,2,c
  2117  001774  D00E               	goto	l495
  2118                           
  2119                           ; BSR set to: 0
  2120                           ;modem.c: 233: sentAT5 = md_uart_write_str_ok((uint8_t *)&srecv[0], sizeof(srecv), 1, 0)
      +                          ;
  2121  001776  0E95               	movlw	low send_over_socket_ok@srecv
  2122  001778  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  2123  00177A  0E00               	movlw	high send_over_socket_ok@srecv
  2124  00177C  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  2125  00177E  0E10               	movlw	16
  2126  001780  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  2127  001782  0E01               	movlw	1
  2128  001784  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  2129  001786  0E00               	movlw	0
  2130  001788  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  2131  00178A  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  2132  00178E  0100               	movlb	0	; () banked
  2133  001790  6FC9               	movwf	_sentAT5& (0+255),b
  2134  001792                     l495:
  2135                           
  2136                           ; BSR set to: 0
  2137                           ;modem.c: 235: if (sentAT5 == 0x03)
  2138                           
  2139                           ; BSR set to: 0
  2140  001792  0E03               	movlw	3
  2141  001794  19C9               	xorwf	_sentAT5& (0+255),w,b
  2142  001796  A4D8               	btfss	status,2,c
  2143  001798  D004               	goto	l496
  2144                           
  2145                           ; BSR set to: 0
  2146                           ;modem.c: 236: {
  2147                           ;modem.c: 237: reset_AT_marks();
  2148  00179A  ECBA  F00E         	call	_reset_AT_marks	;wreg free
  2149                           
  2150                           ;modem.c: 238: return 1;
  2151  00179E  0E01               	movlw	1
  2152  0017A0  0012               	return	
  2153  0017A2                     l496:
  2154                           
  2155                           ;modem.c: 245: }
  2156                           ;modem.c: 248: return 0;
  2157                           
  2158                           ;modem.c: 243: {
  2159  0017A2  0E00               	movlw	0
  2160  0017A4  0012               	return	
  2161  0017A6                     __end_of_send_over_socket_ok:
  2162                           	opt stack 0
  2163                           tblptru	equ	0xFF8
  2164                           tblptrh	equ	0xFF7
  2165                           tblptrl	equ	0xFF6
  2166                           tablat	equ	0xFF5
  2167                           intcon	equ	0xFF2
  2168                           postinc0	equ	0xFEE
  2169                           wreg	equ	0xFE8
  2170                           postdec1	equ	0xFE5
  2171                           plusw1	equ	0xFE3
  2172                           fsr1l	equ	0xFE1
  2173                           postinc2	equ	0xFDE
  2174                           plusw2	equ	0xFDB
  2175                           status	equ	0xFD8
  2176                           
  2177 ;; *************** function _send_md_cfg_cmds_ok *****************
  2178 ;; Defined at:
  2179 ;;		line 99 in file "modem.c"
  2180 ;; Parameters:    Size  Location     Type
  2181 ;;		None
  2182 ;; Auto vars:     Size  Location     Type
  2183 ;;  ledCfg         16   16[BANK2 ] unsigned char [16]
  2184 ;;  baud           16    0[BANK2 ] unsigned char [16]
  2185 ;;  cereg          12   56[BANK2 ] unsigned char [12]
  2186 ;;  ledpattern     12   44[BANK2 ] unsigned char [12]
  2187 ;;  cmee           12   32[BANK2 ] unsigned char [12]
  2188 ;;  gprs           11   90[BANK2 ] unsigned char [11]
  2189 ;;  creg           11   79[BANK2 ] unsigned char [11]
  2190 ;;  cpin           11   68[BANK2 ] unsigned char [11]
  2191 ;;  queryVersion   10  101[BANK2 ] unsigned char [10]
  2192 ;;  csq             9  111[BANK2 ] unsigned char [9]
  2193 ;;  ate             7  120[BANK2 ] unsigned char [7]
  2194 ;;  at              5  127[BANK2 ] unsigned char [5]
  2195 ;; Return value:  Size  Location     Type
  2196 ;;                  1    wreg      unsigned char 
  2197 ;; Registers used:
  2198 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2199 ;; Tracked objects:
  2200 ;;		On entry : 0/0
  2201 ;;		On exit  : 0/0
  2202 ;;		Unchanged: 0/0
  2203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2205 ;;      Locals:         0       0       0     132       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2207 ;;      Totals:         0       0       0     132       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2208 ;;Total ram usage:      132 bytes
  2209 ;; Hardware stack levels used:    1
  2210 ;; Hardware stack levels required when called:    6
  2211 ;; This function calls:
  2212 ;;		_md_uart_write_str_ok
  2213 ;;		_reset_AT_marks
  2214 ;;		_start_md_boot_timer
  2215 ;;		_start_modem_send_process
  2216 ;; This function is called by:
  2217 ;;		_check_modem_state
  2218 ;; This function uses a non-reentrant model
  2219 ;;
  2220                           
  2221                           	psect	text5
  2222  001082                     __ptext5:
  2223                           	opt stack 0
  2224  001082                     _send_md_cfg_cmds_ok:
  2225                           	opt stack 23
  2226                           
  2227                           ;modem.c: 101: uint8_t at[] = "AT\r\n";
  2228                           
  2229                           ;incstack = 0
  2230  001082  EE20  F0D8         	lfsr	2,send_md_cfg_cmds_ok@F6841
  2231  001086  EE12  F07F         	lfsr	1,send_md_cfg_cmds_ok@at
  2232  00108A  0E04               	movlw	4
  2233  00108C                     u3351:
  2234  00108C  CFDB FFE3          	movff	plusw2,plusw1
  2235  001090  06E8               	decf	wreg,f,c
  2236  001092  E2FC               	bc	u3351
  2237                           
  2238                           ;modem.c: 102: uint8_t ate[] = "ATE1\r\n";
  2239  001094  EE20  F0D1         	lfsr	2,send_md_cfg_cmds_ok@F6843
  2240  001098  EE12  F078         	lfsr	1,send_md_cfg_cmds_ok@ate
  2241  00109C  0E06               	movlw	6
  2242  00109E                     u3361:
  2243  00109E  CFDB FFE3          	movff	plusw2,plusw1
  2244  0010A2  06E8               	decf	wreg,f,c
  2245  0010A4  E2FC               	bc	u3361
  2246                           
  2247                           ;modem.c: 103: uint8_t cmee[] = "AT+CMEE=2\r\n";
  2248  0010A6  EE21  F060         	lfsr	2,send_md_cfg_cmds_ok@F6845
  2249  0010AA  EE12  F020         	lfsr	1,send_md_cfg_cmds_ok@cmee
  2250  0010AE  0E0B               	movlw	11
  2251  0010B0                     u3371:
  2252  0010B0  CFDB FFE3          	movff	plusw2,plusw1
  2253  0010B4  06E8               	decf	wreg,f,c
  2254  0010B6  E2FC               	bc	u3371
  2255                           
  2256                           ;modem.c: 104: uint8_t baud[] = "AT+IPR=115200\r\n";
  2257  0010B8  EE21  F029         	lfsr	2,send_md_cfg_cmds_ok@F6847
  2258  0010BC  EE12  F000         	lfsr	1,send_md_cfg_cmds_ok@baud
  2259  0010C0  0E0F               	movlw	15
  2260  0010C2                     u3381:
  2261  0010C2  CFDB FFE3          	movff	plusw2,plusw1
  2262  0010C6  06E8               	decf	wreg,f,c
  2263  0010C8  E2FC               	bc	u3381
  2264                           
  2265                           ;modem.c: 105: uint8_t ledCfg[] = "AT#GPIO=7,0,2\r\n";
  2266  0010CA  EE21  F019         	lfsr	2,send_md_cfg_cmds_ok@F6849
  2267  0010CE  EE12  F010         	lfsr	1,send_md_cfg_cmds_ok@ledCfg
  2268  0010D2  0E0F               	movlw	15
  2269  0010D4                     u3391:
  2270  0010D4  CFDB FFE3          	movff	plusw2,plusw1
  2271  0010D8  06E8               	decf	wreg,f,c
  2272  0010DA  E2FC               	bc	u3391
  2273                           
  2274                           ;modem.c: 106: uint8_t ledpattern[] = "AT#SLED=4\r\n";
  2275  0010DC  EE21  F054         	lfsr	2,send_md_cfg_cmds_ok@F6851
  2276  0010E0  EE12  F02C         	lfsr	1,send_md_cfg_cmds_ok@ledpattern
  2277  0010E4  0E0B               	movlw	11
  2278  0010E6                     u3401:
  2279  0010E6  CFDB FFE3          	movff	plusw2,plusw1
  2280  0010EA  06E8               	decf	wreg,f,c
  2281  0010EC  E2FC               	bc	u3401
  2282                           
  2283                           ;modem.c: 107: uint8_t queryVersion[] = "AT#CGMR\r\n";
  2284  0010EE  EE20  F017         	lfsr	2,send_md_cfg_cmds_ok@F6853
  2285  0010F2  EE12  F065         	lfsr	1,send_md_cfg_cmds_ok@queryVersion
  2286  0010F6  0E09               	movlw	9
  2287  0010F8                     u3411:
  2288  0010F8  CFDB FFE3          	movff	plusw2,plusw1
  2289  0010FC  06E8               	decf	wreg,f,c
  2290  0010FE  E2FC               	bc	u3411
  2291                           
  2292                           ;modem.c: 108: uint8_t cpin[] = "AT+CPIN?\r\n";
  2293  001100  EE20  F00C         	lfsr	2,send_md_cfg_cmds_ok@F6855
  2294  001104  EE12  F044         	lfsr	1,send_md_cfg_cmds_ok@cpin
  2295  001108  0E0A               	movlw	10
  2296  00110A                     u3421:
  2297  00110A  CFDB FFE3          	movff	plusw2,plusw1
  2298  00110E  06E8               	decf	wreg,f,c
  2299  001110  E2FC               	bc	u3421
  2300                           
  2301                           ;modem.c: 109: uint8_t creg[] = "AT+CREG?\r\n";
  2302  001112  EE20  F001         	lfsr	2,send_md_cfg_cmds_ok@F6857
  2303  001116  EE12  F04F         	lfsr	1,send_md_cfg_cmds_ok@creg
  2304  00111A  0E0A               	movlw	10
  2305  00111C                     u3431:
  2306  00111C  CFDB FFE3          	movff	plusw2,plusw1
  2307  001120  06E8               	decf	wreg,f,c
  2308  001122  E2FC               	bc	u3431
  2309                           
  2310                           ;modem.c: 110: uint8_t cereg[] = "AT+CEREG?\r\n";
  2311  001124  EE21  F048         	lfsr	2,send_md_cfg_cmds_ok@F6859
  2312  001128  EE12  F038         	lfsr	1,send_md_cfg_cmds_ok@cereg
  2313  00112C  0E0B               	movlw	11
  2314  00112E                     u3441:
  2315  00112E  CFDB FFE3          	movff	plusw2,plusw1
  2316  001132  06E8               	decf	wreg,f,c
  2317  001134  E2FC               	bc	u3441
  2318                           
  2319                           ;modem.c: 111: uint8_t gprs[] = "AT#GPRS?\r\n";
  2320  001136  EE21  F06C         	lfsr	2,send_md_cfg_cmds_ok@F6861
  2321  00113A  EE12  F05A         	lfsr	1,send_md_cfg_cmds_ok@gprs
  2322  00113E  0E0A               	movlw	10
  2323  001140                     u3451:
  2324  001140  CFDB FFE3          	movff	plusw2,plusw1
  2325  001144  06E8               	decf	wreg,f,c
  2326  001146  E2FC               	bc	u3451
  2327                           
  2328                           ;modem.c: 112: uint8_t csq[] = "AT+CSQ\r\n";
  2329  001148  EE20  F021         	lfsr	2,send_md_cfg_cmds_ok@F6863
  2330  00114C  EE12  F06F         	lfsr	1,send_md_cfg_cmds_ok@csq
  2331  001150  0E08               	movlw	8
  2332  001152                     u3461:
  2333  001152  CFDB FFE3          	movff	plusw2,plusw1
  2334  001156  06E8               	decf	wreg,f,c
  2335  001158  E2FC               	bc	u3461
  2336                           
  2337                           ;modem.c: 116: if (!(sentAT1 == 0x03))
  2338  00115A  0E03               	movlw	3
  2339  00115C  0100               	movlb	0	; () banked
  2340  00115E  19CD               	xorwf	_sentAT1& (0+255),w,b
  2341  001160  B4D8               	btfsc	status,2,c
  2342  001162  D00E               	goto	l443
  2343                           
  2344                           ; BSR set to: 0
  2345                           ;modem.c: 117: sentAT1 = md_uart_write_str_ok((uint8_t *)&at[0], sizeof(at), 1, 0);
  2346  001164  0E7F               	movlw	low send_md_cfg_cmds_ok@at
  2347  001166  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  2348  001168  0E02               	movlw	high send_md_cfg_cmds_ok@at
  2349  00116A  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  2350  00116C  0E05               	movlw	5
  2351  00116E  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  2352  001170  0E01               	movlw	1
  2353  001172  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  2354  001174  0E00               	movlw	0
  2355  001176  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  2356  001178  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  2357  00117C  0100               	movlb	0	; () banked
  2358  00117E  6FCD               	movwf	_sentAT1& (0+255),b
  2359  001180                     l443:
  2360                           
  2361                           ; BSR set to: 0
  2362                           ;modem.c: 118: if (sentAT1 == 0x03 && !(sentAT2 == 0x03))
  2363                           
  2364                           ; BSR set to: 0
  2365  001180  0E03               	movlw	3
  2366  001182  19CD               	xorwf	_sentAT1& (0+255),w,b
  2367  001184  A4D8               	btfss	status,2,c
  2368  001186  D012               	goto	l444
  2369                           
  2370                           ; BSR set to: 0
  2371  001188  0E03               	movlw	3
  2372  00118A  19CC               	xorwf	_sentAT2& (0+255),w,b
  2373  00118C  B4D8               	btfsc	status,2,c
  2374  00118E  D00E               	goto	l444
  2375                           
  2376                           ; BSR set to: 0
  2377                           ;modem.c: 119: sentAT2 = md_uart_write_str_ok((uint8_t *)&ate[0], sizeof(ate), 1, 0);
  2378  001190  0E78               	movlw	low send_md_cfg_cmds_ok@ate
  2379  001192  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  2380  001194  0E02               	movlw	high send_md_cfg_cmds_ok@ate
  2381  001196  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  2382  001198  0E07               	movlw	7
  2383  00119A  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  2384  00119C  0E01               	movlw	1
  2385  00119E  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  2386  0011A0  0E00               	movlw	0
  2387  0011A2  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  2388  0011A4  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  2389  0011A8  0100               	movlb	0	; () banked
  2390  0011AA  6FCC               	movwf	_sentAT2& (0+255),b
  2391  0011AC                     l444:
  2392                           
  2393                           ; BSR set to: 0
  2394                           ;modem.c: 120: if (sentAT2 == 0x03 && !(sentAT3 == 0x03))
  2395                           
  2396                           ; BSR set to: 0
  2397  0011AC  0E03               	movlw	3
  2398  0011AE  19CC               	xorwf	_sentAT2& (0+255),w,b
  2399  0011B0  A4D8               	btfss	status,2,c
  2400  0011B2  D012               	goto	l445
  2401                           
  2402                           ; BSR set to: 0
  2403  0011B4  0E03               	movlw	3
  2404  0011B6  19CB               	xorwf	_sentAT3& (0+255),w,b
  2405  0011B8  B4D8               	btfsc	status,2,c
  2406  0011BA  D00E               	goto	l445
  2407                           
  2408                           ; BSR set to: 0
  2409                           ;modem.c: 121: sentAT3 = md_uart_write_str_ok((uint8_t *)&cmee[0], sizeof(cmee), 1, 0);
  2410  0011BC  0E20               	movlw	low send_md_cfg_cmds_ok@cmee
  2411  0011BE  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  2412  0011C0  0E02               	movlw	high send_md_cfg_cmds_ok@cmee
  2413  0011C2  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  2414  0011C4  0E0C               	movlw	12
  2415  0011C6  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  2416  0011C8  0E01               	movlw	1
  2417  0011CA  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  2418  0011CC  0E00               	movlw	0
  2419  0011CE  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  2420  0011D0  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  2421  0011D4  0100               	movlb	0	; () banked
  2422  0011D6  6FCB               	movwf	_sentAT3& (0+255),b
  2423  0011D8                     l445:
  2424                           
  2425                           ; BSR set to: 0
  2426                           ;modem.c: 122: if (sentAT3 == 0x03 && !(sentAT4 == 0x03))
  2427                           
  2428                           ; BSR set to: 0
  2429  0011D8  0E03               	movlw	3
  2430  0011DA  19CB               	xorwf	_sentAT3& (0+255),w,b
  2431  0011DC  A4D8               	btfss	status,2,c
  2432  0011DE  D012               	goto	l446
  2433                           
  2434                           ; BSR set to: 0
  2435  0011E0  0E03               	movlw	3
  2436  0011E2  19CA               	xorwf	_sentAT4& (0+255),w,b
  2437  0011E4  B4D8               	btfsc	status,2,c
  2438  0011E6  D00E               	goto	l446
  2439                           
  2440                           ; BSR set to: 0
  2441                           ;modem.c: 123: sentAT4 = md_uart_write_str_ok((uint8_t *)&baud[0], sizeof(baud), 1, 0);
  2442  0011E8  0E00               	movlw	low send_md_cfg_cmds_ok@baud
  2443  0011EA  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  2444  0011EC  0E02               	movlw	high send_md_cfg_cmds_ok@baud
  2445  0011EE  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  2446  0011F0  0E10               	movlw	16
  2447  0011F2  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  2448  0011F4  0E01               	movlw	1
  2449  0011F6  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  2450  0011F8  0E00               	movlw	0
  2451  0011FA  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  2452  0011FC  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  2453  001200  0100               	movlb	0	; () banked
  2454  001202  6FCA               	movwf	_sentAT4& (0+255),b
  2455  001204                     l446:
  2456                           
  2457                           ; BSR set to: 0
  2458                           ;modem.c: 124: if (sentAT4 == 0x03 && !(sentAT5 == 0x03))
  2459                           
  2460                           ; BSR set to: 0
  2461  001204  0E03               	movlw	3
  2462  001206  19CA               	xorwf	_sentAT4& (0+255),w,b
  2463  001208  A4D8               	btfss	status,2,c
  2464  00120A  D012               	goto	l447
  2465                           
  2466                           ; BSR set to: 0
  2467  00120C  0E03               	movlw	3
  2468  00120E  19C9               	xorwf	_sentAT5& (0+255),w,b
  2469  001210  B4D8               	btfsc	status,2,c
  2470  001212  D00E               	goto	l447
  2471                           
  2472                           ; BSR set to: 0
  2473                           ;modem.c: 125: sentAT5 = md_uart_write_str_ok((uint8_t *)&ledCfg[0], sizeof(ledCfg), 1, 
      +                          0);
  2474  001214  0E10               	movlw	low send_md_cfg_cmds_ok@ledCfg
  2475  001216  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  2476  001218  0E02               	movlw	high send_md_cfg_cmds_ok@ledCfg
  2477  00121A  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  2478  00121C  0E10               	movlw	16
  2479  00121E  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  2480  001220  0E01               	movlw	1
  2481  001222  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  2482  001224  0E00               	movlw	0
  2483  001226  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  2484  001228  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  2485  00122C  0100               	movlb	0	; () banked
  2486  00122E  6FC9               	movwf	_sentAT5& (0+255),b
  2487  001230                     l447:
  2488                           
  2489                           ; BSR set to: 0
  2490                           ;modem.c: 126: if (sentAT5 == 0x03 && !(sentAT6 == 0x03))
  2491                           
  2492                           ; BSR set to: 0
  2493  001230  0E03               	movlw	3
  2494  001232  19C9               	xorwf	_sentAT5& (0+255),w,b
  2495  001234  A4D8               	btfss	status,2,c
  2496  001236  D012               	goto	l448
  2497                           
  2498                           ; BSR set to: 0
  2499  001238  0E03               	movlw	3
  2500  00123A  19C8               	xorwf	_sentAT6& (0+255),w,b
  2501  00123C  B4D8               	btfsc	status,2,c
  2502  00123E  D00E               	goto	l448
  2503                           
  2504                           ; BSR set to: 0
  2505                           ;modem.c: 127: sentAT6 = md_uart_write_str_ok((uint8_t *)&ledpattern[0], sizeof(ledpatte
      +                          rn), 1, 0);
  2506  001240  0E2C               	movlw	low send_md_cfg_cmds_ok@ledpattern
  2507  001242  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  2508  001244  0E02               	movlw	high send_md_cfg_cmds_ok@ledpattern
  2509  001246  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  2510  001248  0E0C               	movlw	12
  2511  00124A  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  2512  00124C  0E01               	movlw	1
  2513  00124E  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  2514  001250  0E00               	movlw	0
  2515  001252  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  2516  001254  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  2517  001258  0100               	movlb	0	; () banked
  2518  00125A  6FC8               	movwf	_sentAT6& (0+255),b
  2519  00125C                     l448:
  2520                           
  2521                           ; BSR set to: 0
  2522                           ;modem.c: 128: if (sentAT6 == 0x03 && !(sentAT7 == 0x03))
  2523                           
  2524                           ; BSR set to: 0
  2525  00125C  0E03               	movlw	3
  2526  00125E  19C8               	xorwf	_sentAT6& (0+255),w,b
  2527  001260  A4D8               	btfss	status,2,c
  2528  001262  D012               	goto	l449
  2529                           
  2530                           ; BSR set to: 0
  2531  001264  0E03               	movlw	3
  2532  001266  19C7               	xorwf	_sentAT7& (0+255),w,b
  2533  001268  B4D8               	btfsc	status,2,c
  2534  00126A  D00E               	goto	l449
  2535                           
  2536                           ; BSR set to: 0
  2537                           ;modem.c: 129: sentAT7 = md_uart_write_str_ok((uint8_t *)&queryVersion[0], sizeof(queryV
      +                          ersion), 1, 0);
  2538  00126C  0E65               	movlw	low send_md_cfg_cmds_ok@queryVersion
  2539  00126E  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  2540  001270  0E02               	movlw	high send_md_cfg_cmds_ok@queryVersion
  2541  001272  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  2542  001274  0E0A               	movlw	10
  2543  001276  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  2544  001278  0E01               	movlw	1
  2545  00127A  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  2546  00127C  0E00               	movlw	0
  2547  00127E  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  2548  001280  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  2549  001284  0100               	movlb	0	; () banked
  2550  001286  6FC7               	movwf	_sentAT7& (0+255),b
  2551  001288                     l449:
  2552                           
  2553                           ; BSR set to: 0
  2554                           ;modem.c: 130: if (sentAT7 == 0x03 && !(sentAT8 == 0x03))
  2555                           
  2556                           ; BSR set to: 0
  2557  001288  0E03               	movlw	3
  2558  00128A  19C7               	xorwf	_sentAT7& (0+255),w,b
  2559  00128C  A4D8               	btfss	status,2,c
  2560  00128E  D012               	goto	l450
  2561                           
  2562                           ; BSR set to: 0
  2563  001290  0E03               	movlw	3
  2564  001292  19C6               	xorwf	_sentAT8& (0+255),w,b
  2565  001294  B4D8               	btfsc	status,2,c
  2566  001296  D00E               	goto	l450
  2567                           
  2568                           ; BSR set to: 0
  2569                           ;modem.c: 131: sentAT8 = md_uart_write_str_ok((uint8_t *)&cpin[0], sizeof(cpin), 1, 0);
  2570  001298  0E44               	movlw	low send_md_cfg_cmds_ok@cpin
  2571  00129A  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  2572  00129C  0E02               	movlw	high send_md_cfg_cmds_ok@cpin
  2573  00129E  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  2574  0012A0  0E0B               	movlw	11
  2575  0012A2  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  2576  0012A4  0E01               	movlw	1
  2577  0012A6  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  2578  0012A8  0E00               	movlw	0
  2579  0012AA  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  2580  0012AC  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  2581  0012B0  0100               	movlb	0	; () banked
  2582  0012B2  6FC6               	movwf	_sentAT8& (0+255),b
  2583  0012B4                     l450:
  2584                           
  2585                           ; BSR set to: 0
  2586                           ;modem.c: 132: if (sentAT8 == 0x03 && !(sentAT9 == 0x03))
  2587                           
  2588                           ; BSR set to: 0
  2589  0012B4  0E03               	movlw	3
  2590  0012B6  19C6               	xorwf	_sentAT8& (0+255),w,b
  2591  0012B8  A4D8               	btfss	status,2,c
  2592  0012BA  D012               	goto	l451
  2593                           
  2594                           ; BSR set to: 0
  2595  0012BC  0E03               	movlw	3
  2596  0012BE  19C5               	xorwf	_sentAT9& (0+255),w,b
  2597  0012C0  B4D8               	btfsc	status,2,c
  2598  0012C2  D00E               	goto	l451
  2599                           
  2600                           ; BSR set to: 0
  2601                           ;modem.c: 133: sentAT9 = md_uart_write_str_ok((uint8_t *)&creg[0], sizeof(creg), 1, 0);
  2602  0012C4  0E4F               	movlw	low send_md_cfg_cmds_ok@creg
  2603  0012C6  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  2604  0012C8  0E02               	movlw	high send_md_cfg_cmds_ok@creg
  2605  0012CA  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  2606  0012CC  0E0B               	movlw	11
  2607  0012CE  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  2608  0012D0  0E01               	movlw	1
  2609  0012D2  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  2610  0012D4  0E00               	movlw	0
  2611  0012D6  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  2612  0012D8  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  2613  0012DC  0100               	movlb	0	; () banked
  2614  0012DE  6FC5               	movwf	_sentAT9& (0+255),b
  2615  0012E0                     l451:
  2616                           
  2617                           ; BSR set to: 0
  2618                           ;modem.c: 134: if (sentAT9 == 0x03 && !(sentAT10 == 0x03))
  2619                           
  2620                           ; BSR set to: 0
  2621  0012E0  0E03               	movlw	3
  2622  0012E2  19C5               	xorwf	_sentAT9& (0+255),w,b
  2623  0012E4  A4D8               	btfss	status,2,c
  2624  0012E6  D012               	goto	l452
  2625                           
  2626                           ; BSR set to: 0
  2627  0012E8  0E03               	movlw	3
  2628  0012EA  19C4               	xorwf	_sentAT10& (0+255),w,b
  2629  0012EC  B4D8               	btfsc	status,2,c
  2630  0012EE  D00E               	goto	l452
  2631                           
  2632                           ; BSR set to: 0
  2633                           ;modem.c: 135: sentAT10 = md_uart_write_str_ok((uint8_t *)&cereg[0], sizeof(cereg), 1, 0
      +                          );
  2634  0012F0  0E38               	movlw	low send_md_cfg_cmds_ok@cereg
  2635  0012F2  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  2636  0012F4  0E02               	movlw	high send_md_cfg_cmds_ok@cereg
  2637  0012F6  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  2638  0012F8  0E0C               	movlw	12
  2639  0012FA  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  2640  0012FC  0E01               	movlw	1
  2641  0012FE  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  2642  001300  0E00               	movlw	0
  2643  001302  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  2644  001304  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  2645  001308  0100               	movlb	0	; () banked
  2646  00130A  6FC4               	movwf	_sentAT10& (0+255),b
  2647  00130C                     l452:
  2648                           
  2649                           ; BSR set to: 0
  2650                           ;modem.c: 136: if (sentAT10 == 0x03 && !(sentAT11 == 0x03))
  2651                           
  2652                           ; BSR set to: 0
  2653  00130C  0E03               	movlw	3
  2654  00130E  19C4               	xorwf	_sentAT10& (0+255),w,b
  2655  001310  A4D8               	btfss	status,2,c
  2656  001312  D012               	goto	l453
  2657                           
  2658                           ; BSR set to: 0
  2659  001314  0E03               	movlw	3
  2660  001316  19C3               	xorwf	_sentAT11& (0+255),w,b
  2661  001318  B4D8               	btfsc	status,2,c
  2662  00131A  D00E               	goto	l453
  2663                           
  2664                           ; BSR set to: 0
  2665                           ;modem.c: 137: sentAT11 = md_uart_write_str_ok((uint8_t *)&gprs[0], sizeof(gprs), 1, 0);
  2666  00131C  0E5A               	movlw	low send_md_cfg_cmds_ok@gprs
  2667  00131E  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  2668  001320  0E02               	movlw	high send_md_cfg_cmds_ok@gprs
  2669  001322  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  2670  001324  0E0B               	movlw	11
  2671  001326  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  2672  001328  0E01               	movlw	1
  2673  00132A  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  2674  00132C  0E00               	movlw	0
  2675  00132E  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  2676  001330  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  2677  001334  0100               	movlb	0	; () banked
  2678  001336  6FC3               	movwf	_sentAT11& (0+255),b
  2679  001338                     l453:
  2680                           
  2681                           ; BSR set to: 0
  2682                           ;modem.c: 138: if (sentAT11 == 0x03 && !(sentAT12 == 0x03))
  2683                           
  2684                           ; BSR set to: 0
  2685  001338  0E03               	movlw	3
  2686  00133A  19C3               	xorwf	_sentAT11& (0+255),w,b
  2687  00133C  A4D8               	btfss	status,2,c
  2688  00133E  D012               	goto	l454
  2689                           
  2690                           ; BSR set to: 0
  2691  001340  0E03               	movlw	3
  2692  001342  19C2               	xorwf	_sentAT12& (0+255),w,b
  2693  001344  B4D8               	btfsc	status,2,c
  2694  001346  D00E               	goto	l454
  2695                           
  2696                           ; BSR set to: 0
  2697                           ;modem.c: 139: sentAT12 = md_uart_write_str_ok((uint8_t *)&csq[0], sizeof(csq), 1, 0);
  2698  001348  0E6F               	movlw	low send_md_cfg_cmds_ok@csq
  2699  00134A  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  2700  00134C  0E02               	movlw	high send_md_cfg_cmds_ok@csq
  2701  00134E  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  2702  001350  0E09               	movlw	9
  2703  001352  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  2704  001354  0E01               	movlw	1
  2705  001356  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  2706  001358  0E00               	movlw	0
  2707  00135A  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  2708  00135C  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  2709  001360  0100               	movlb	0	; () banked
  2710  001362  6FC2               	movwf	_sentAT12& (0+255),b
  2711  001364                     l454:
  2712                           
  2713                           ; BSR set to: 0
  2714                           ;modem.c: 141: if ((sentAT1 == 0x04 || sentAT2 == 0x04 || sentAT3 == 0x04 || sentAT4 == 
      +                          0x04 || sentAT5 == 0x04 || sentAT6 == 0x04 || sentAT7 == 0x04 || sentAT8 == 0x04 || sent
      +                          AT9 == 0x04 || sentAT10 == 0x04 || sentAT11 == 0x04 || sentAT12 == 0x04) && !extendedTim
      +                          e
  2715                           
  2716                           ; BSR set to: 0
  2717  001364  0E04               	movlw	4
  2718  001366  19CD               	xorwf	_sentAT1& (0+255),w,b
  2719  001368  B4D8               	btfsc	status,2,c
  2720  00136A  D02C               	goto	u3810
  2721                           
  2722                           ; BSR set to: 0
  2723  00136C  0E04               	movlw	4
  2724  00136E  19CC               	xorwf	_sentAT2& (0+255),w,b
  2725  001370  B4D8               	btfsc	status,2,c
  2726  001372  D028               	goto	u3810
  2727                           
  2728                           ; BSR set to: 0
  2729  001374  0E04               	movlw	4
  2730  001376  19CB               	xorwf	_sentAT3& (0+255),w,b
  2731  001378  B4D8               	btfsc	status,2,c
  2732  00137A  D024               	goto	u3810
  2733                           
  2734                           ; BSR set to: 0
  2735  00137C  0E04               	movlw	4
  2736  00137E  19CA               	xorwf	_sentAT4& (0+255),w,b
  2737  001380  B4D8               	btfsc	status,2,c
  2738  001382  D020               	goto	u3810
  2739                           
  2740                           ; BSR set to: 0
  2741  001384  0E04               	movlw	4
  2742  001386  19C9               	xorwf	_sentAT5& (0+255),w,b
  2743  001388  B4D8               	btfsc	status,2,c
  2744  00138A  D01C               	goto	u3810
  2745                           
  2746                           ; BSR set to: 0
  2747  00138C  0E04               	movlw	4
  2748  00138E  19C8               	xorwf	_sentAT6& (0+255),w,b
  2749  001390  B4D8               	btfsc	status,2,c
  2750  001392  D018               	goto	u3810
  2751                           
  2752                           ; BSR set to: 0
  2753  001394  0E04               	movlw	4
  2754  001396  19C7               	xorwf	_sentAT7& (0+255),w,b
  2755  001398  B4D8               	btfsc	status,2,c
  2756  00139A  D014               	goto	u3810
  2757                           
  2758                           ; BSR set to: 0
  2759  00139C  0E04               	movlw	4
  2760  00139E  19C6               	xorwf	_sentAT8& (0+255),w,b
  2761  0013A0  B4D8               	btfsc	status,2,c
  2762  0013A2  D010               	goto	u3810
  2763                           
  2764                           ; BSR set to: 0
  2765  0013A4  0E04               	movlw	4
  2766  0013A6  19C5               	xorwf	_sentAT9& (0+255),w,b
  2767  0013A8  B4D8               	btfsc	status,2,c
  2768  0013AA  D00C               	goto	u3810
  2769                           
  2770                           ; BSR set to: 0
  2771  0013AC  0E04               	movlw	4
  2772  0013AE  19C4               	xorwf	_sentAT10& (0+255),w,b
  2773  0013B0  B4D8               	btfsc	status,2,c
  2774  0013B2  D008               	goto	u3810
  2775                           
  2776                           ; BSR set to: 0
  2777  0013B4  0E04               	movlw	4
  2778  0013B6  19C3               	xorwf	_sentAT11& (0+255),w,b
  2779  0013B8  B4D8               	btfsc	status,2,c
  2780  0013BA  D004               	goto	u3810
  2781                           
  2782                           ; BSR set to: 0
  2783  0013BC  0E04               	movlw	4
  2784  0013BE  19C2               	xorwf	_sentAT12& (0+255),w,b
  2785  0013C0  A4D8               	btfss	status,2,c
  2786  0013C2  D00F               	goto	l455
  2787  0013C4                     u3810:
  2788                           
  2789                           ; BSR set to: 0
  2790                           
  2791                           ; BSR set to: 0
  2792  0013C4  51C1               	movf	_extendedTimer& (0+255),w,b
  2793  0013C6  A4D8               	btfss	status,2,c
  2794  0013C8  D00C               	goto	l455
  2795                           
  2796                           ; BSR set to: 0
  2797                           ;modem.c: 148: {
  2798                           ;modem.c: 149: extendedTimer = 1;
  2799  0013CA  0E01               	movlw	1
  2800  0013CC  6FC1               	movwf	_extendedTimer& (0+255),b
  2801                           
  2802                           ;modem.c: 150: timedOut = 0;
  2803  0013CE  0E00               	movlw	0
  2804  0013D0  6E4B               	movwf	_timedOut,c
  2805                           
  2806                           ; BSR set to: 0
  2807                           ;modem.c: 151: reset_AT_marks();
  2808  0013D2  ECBA  F00E         	call	_reset_AT_marks	;wreg free
  2809                           
  2810                           ;modem.c: 152: start_md_boot_timer();
  2811  0013D6  EC5B  F00F         	call	_start_md_boot_timer	;wreg free
  2812                           
  2813                           ;modem.c: 154: md_state = WAITING_FOR_BOOT;
  2814  0013DA  0E01               	movlw	1
  2815  0013DC  0100               	movlb	0	; () banked
  2816  0013DE  6FD0               	movwf	_md_state& (0+255),b
  2817                           
  2818                           ;modem.c: 155: }
  2819  0013E0  D03A               	goto	l459
  2820  0013E2                     l455:
  2821                           
  2822                           ; BSR set to: 0
  2823                           ;modem.c: 156: else if ((sentAT1 == 0x04 || sentAT2 == 0x04 || sentAT3 == 0x04 || sentAT
      +                          4 == 0x04 || sentAT5 == 0x04 || sentAT6 == 0x04 || sentAT7 == 0x04 || sentAT8 == 0x04 ||
      +                           sentAT9 == 0x04 || sentAT10 == 0x04 || sentAT11 == 0x04 || sentAT12 == 0x04) && extende
      +                          d
  2824                           
  2825                           ; BSR set to: 0
  2826  0013E2  0E04               	movlw	4
  2827  0013E4  19CD               	xorwf	_sentAT1& (0+255),w,b
  2828  0013E6  B4D8               	btfsc	status,2,c
  2829  0013E8  D02C               	goto	u3940
  2830                           
  2831                           ; BSR set to: 0
  2832  0013EA  0E04               	movlw	4
  2833  0013EC  19CC               	xorwf	_sentAT2& (0+255),w,b
  2834  0013EE  B4D8               	btfsc	status,2,c
  2835  0013F0  D028               	goto	u3940
  2836                           
  2837                           ; BSR set to: 0
  2838  0013F2  0E04               	movlw	4
  2839  0013F4  19CB               	xorwf	_sentAT3& (0+255),w,b
  2840  0013F6  B4D8               	btfsc	status,2,c
  2841  0013F8  D024               	goto	u3940
  2842                           
  2843                           ; BSR set to: 0
  2844  0013FA  0E04               	movlw	4
  2845  0013FC  19CA               	xorwf	_sentAT4& (0+255),w,b
  2846  0013FE  B4D8               	btfsc	status,2,c
  2847  001400  D020               	goto	u3940
  2848                           
  2849                           ; BSR set to: 0
  2850  001402  0E04               	movlw	4
  2851  001404  19C9               	xorwf	_sentAT5& (0+255),w,b
  2852  001406  B4D8               	btfsc	status,2,c
  2853  001408  D01C               	goto	u3940
  2854                           
  2855                           ; BSR set to: 0
  2856  00140A  0E04               	movlw	4
  2857  00140C  19C8               	xorwf	_sentAT6& (0+255),w,b
  2858  00140E  B4D8               	btfsc	status,2,c
  2859  001410  D018               	goto	u3940
  2860                           
  2861                           ; BSR set to: 0
  2862  001412  0E04               	movlw	4
  2863  001414  19C7               	xorwf	_sentAT7& (0+255),w,b
  2864  001416  B4D8               	btfsc	status,2,c
  2865  001418  D014               	goto	u3940
  2866                           
  2867                           ; BSR set to: 0
  2868  00141A  0E04               	movlw	4
  2869  00141C  19C6               	xorwf	_sentAT8& (0+255),w,b
  2870  00141E  B4D8               	btfsc	status,2,c
  2871  001420  D010               	goto	u3940
  2872                           
  2873                           ; BSR set to: 0
  2874  001422  0E04               	movlw	4
  2875  001424  19C5               	xorwf	_sentAT9& (0+255),w,b
  2876  001426  B4D8               	btfsc	status,2,c
  2877  001428  D00C               	goto	u3940
  2878                           
  2879                           ; BSR set to: 0
  2880  00142A  0E04               	movlw	4
  2881  00142C  19C4               	xorwf	_sentAT10& (0+255),w,b
  2882  00142E  B4D8               	btfsc	status,2,c
  2883  001430  D008               	goto	u3940
  2884                           
  2885                           ; BSR set to: 0
  2886  001432  0E04               	movlw	4
  2887  001434  19C3               	xorwf	_sentAT11& (0+255),w,b
  2888  001436  B4D8               	btfsc	status,2,c
  2889  001438  D004               	goto	u3940
  2890                           
  2891                           ; BSR set to: 0
  2892  00143A  0E04               	movlw	4
  2893  00143C  19C2               	xorwf	_sentAT12& (0+255),w,b
  2894  00143E  A4D8               	btfss	status,2,c
  2895  001440  D00A               	goto	l459
  2896  001442                     u3940:
  2897                           
  2898                           ; BSR set to: 0
  2899                           
  2900                           ; BSR set to: 0
  2901  001442  51C1               	movf	_extendedTimer& (0+255),w,b
  2902  001444  B4D8               	btfsc	status,2,c
  2903  001446  D007               	goto	l459
  2904                           
  2905                           ; BSR set to: 0
  2906                           ;modem.c: 163: {
  2907                           ;modem.c: 164: extendedTimer = 0;
  2908  001448  0E00               	movlw	0
  2909  00144A  6FC1               	movwf	_extendedTimer& (0+255),b
  2910                           
  2911                           ; BSR set to: 0
  2912                           ;modem.c: 165: reset_AT_marks();
  2913  00144C  ECBA  F00E         	call	_reset_AT_marks	;wreg free
  2914                           
  2915                           ;modem.c: 166: start_modem_send_process(0x00);
  2916  001450  0E00               	movlw	0
  2917  001452  EC66  F00E         	call	_start_modem_send_process
  2918  001456                     l459:
  2919                           
  2920                           ;modem.c: 167: }
  2921                           ;modem.c: 169: if (sentAT12 == 0x03)
  2922  001456  0E03               	movlw	3
  2923  001458  0100               	movlb	0	; () banked
  2924  00145A  19C2               	xorwf	_sentAT12& (0+255),w,b
  2925  00145C  A4D8               	btfss	status,2,c
  2926  00145E  D004               	goto	l462
  2927                           
  2928                           ; BSR set to: 0
  2929                           ;modem.c: 170: {
  2930                           ;modem.c: 171: reset_AT_marks();
  2931  001460  ECBA  F00E         	call	_reset_AT_marks	;wreg free
  2932                           
  2933                           ;modem.c: 172: awake = 1;
  2934  001464  0E01               	movlw	1
  2935  001466  D001               	goto	L1
  2936  001468                     l462:
  2937                           
  2938                           ;modem.c: 174: else
  2939                           ;modem.c: 175: awake = 0;
  2940  001468  0E00               	movlw	0
  2941  00146A                     L1:
  2942  00146A  6E4A               	movwf	_awake,c
  2943                           
  2944                           ;modem.c: 178: return awake;
  2945  00146C  504A               	movf	_awake,w,c
  2946  00146E  0012               	return	
  2947  001470                     __end_of_send_md_cfg_cmds_ok:
  2948                           	opt stack 0
  2949                           tblptru	equ	0xFF8
  2950                           tblptrh	equ	0xFF7
  2951                           tblptrl	equ	0xFF6
  2952                           tablat	equ	0xFF5
  2953                           intcon	equ	0xFF2
  2954                           postinc0	equ	0xFEE
  2955                           wreg	equ	0xFE8
  2956                           postdec1	equ	0xFE5
  2957                           plusw1	equ	0xFE3
  2958                           fsr1l	equ	0xFE1
  2959                           postinc2	equ	0xFDE
  2960                           plusw2	equ	0xFDB
  2961                           status	equ	0xFD8
  2962                           
  2963 ;; *************** function _start_modem_send_process *****************
  2964 ;; Defined at:
  2965 ;;		line 13 in file "modem.c"
  2966 ;; Parameters:    Size  Location     Type
  2967 ;;  newEvent        1    wreg     unsigned char 
  2968 ;; Auto vars:     Size  Location     Type
  2969 ;;  newEvent        1    2[BANK0 ] unsigned char 
  2970 ;;  i               1    3[BANK0 ] unsigned char 
  2971 ;; Return value:  Size  Location     Type
  2972 ;;                  1    wreg      void 
  2973 ;; Registers used:
  2974 ;;		wreg, status,2, status,0, cstack
  2975 ;; Tracked objects:
  2976 ;;		On entry : 0/0
  2977 ;;		On exit  : 0/0
  2978 ;;		Unchanged: 0/0
  2979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2981 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2982 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2983 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2984 ;;Total ram usage:        4 bytes
  2985 ;; Hardware stack levels used:    1
  2986 ;; Hardware stack levels required when called:    5
  2987 ;; This function calls:
  2988 ;;		_start_md_boot_timer
  2989 ;; This function is called by:
  2990 ;;		_main
  2991 ;;		_send_md_cfg_cmds_ok
  2992 ;; This function uses a non-reentrant model
  2993 ;;
  2994                           
  2995                           	psect	text6
  2996  001CCC                     __ptext6:
  2997                           	opt stack 0
  2998  001CCC                     _start_modem_send_process:
  2999                           	opt stack 25
  3000                           
  3001                           ;incstack = 0
  3002                           ;start_modem_send_process@newEvent stored from wreg
  3003  001CCC  0100               	movlb	0	; () banked
  3004  001CCE  6F62               	movwf	start_modem_send_process@newEvent& (0+255),b
  3005                           
  3006                           ;modem.c: 17: if (!awake && newEvent == 0x00)
  3007  001CD0  504A               	movf	_awake,w,c
  3008  001CD2  A4D8               	btfss	status,2,c
  3009  001CD4  D020               	goto	l394
  3010  001CD6  0100               	movlb	0	; () banked
  3011  001CD8  5162               	movf	start_modem_send_process@newEvent& (0+255),w,b
  3012  001CDA  A4D8               	btfss	status,2,c
  3013  001CDC  D01C               	goto	l394
  3014                           
  3015                           ; BSR set to: 0
  3016                           ;modem.c: 18: {
  3017                           ;modem.c: 19: start_md_boot_timer();
  3018  001CDE  EC5B  F00F         	call	_start_md_boot_timer	;wreg free
  3019                           
  3020                           ;modem.c: 20: md_state = WAITING_FOR_BOOT;
  3021  001CE2  0E01               	movlw	1
  3022  001CE4  0100               	movlb	0	; () banked
  3023  001CE6  6FD0               	movwf	_md_state& (0+255),b
  3024                           
  3025                           ; BSR set to: 0
  3026                           ;modem.c: 21: PORTAbits.RA3 = 0;
  3027  001CE8  9680               	bcf	3968,3,c	;volatile
  3028                           
  3029                           ; BSR set to: 0
  3030                           ;modem.c: 22: for (uint8_t i = 0; i < 10; i++)
  3031  001CEA  0E00               	movlw	0
  3032  001CEC  6F63               	movwf	start_modem_send_process@i& (0+255),b
  3033  001CEE  D00F               	goto	L2
  3034  001CF0                     l395:
  3035                           
  3036                           ; BSR set to: 0
  3037  001CF0  0004               	clrwdt		;# 
  3038                           
  3039                           ;modem.c: 25: _delay((unsigned long)((200)*(8000000/4000.0)));
  3040  001CF2  0E03               	movlw	3
  3041  001CF4  0100               	movlb	0	; () banked
  3042  001CF6  6F61               	movwf	(??_start_modem_send_process+1)& (0+255),b
  3043  001CF8  0E08               	movlw	8
  3044  001CFA  6F60               	movwf	??_start_modem_send_process& (0+255),b
  3045  001CFC  0E77               	movlw	119
  3046  001CFE                     u4377:
  3047  001CFE  2EE8               	decfsz	wreg,f,c
  3048  001D00  D7FE               	bra	u4377
  3049  001D02  2F60               	decfsz	??_start_modem_send_process& (0+255),f,b
  3050  001D04  D7FC               	bra	u4377
  3051  001D06  2F61               	decfsz	(??_start_modem_send_process+1)& (0+255),f,b
  3052  001D08  D7FA               	bra	u4377
  3053  001D0A  0100               	movlb	0	; () banked
  3054  001D0C  2B63               	incf	start_modem_send_process@i& (0+255),f,b
  3055  001D0E                     L2:
  3056  001D0E  0E09               	movlw	9
  3057  001D10  6563               	cpfsgt	start_modem_send_process@i& (0+255),b
  3058  001D12  D7EE               	goto	l395
  3059                           
  3060                           ; BSR set to: 0
  3061  001D14  0004               	clrwdt		;# 
  3062  001D16                     l394:
  3063                           
  3064                           ;modem.c: 28: }
  3065                           ;modem.c: 33: PORTAbits.RA3 = 1;
  3066  001D16  8680               	bsf	3968,3,c	;volatile
  3067                           
  3068                           ;modem.c: 34: start_md_boot_timer();
  3069  001D18  EC5B  F00F         	call	_start_md_boot_timer	;wreg free
  3070                           
  3071                           ;modem.c: 35: md_state = WAITING_FOR_BOOT;
  3072  001D1C  0E01               	movlw	1
  3073  001D1E  0100               	movlb	0	; () banked
  3074  001D20  6FD0               	movwf	_md_state& (0+255),b
  3075                           
  3076                           ; BSR set to: 0
  3077  001D22  0012               	return		;funcret
  3078  001D24                     __end_of_start_modem_send_process:
  3079                           	opt stack 0
  3080                           tblptru	equ	0xFF8
  3081                           tblptrh	equ	0xFF7
  3082                           tblptrl	equ	0xFF6
  3083                           tablat	equ	0xFF5
  3084                           intcon	equ	0xFF2
  3085                           postinc0	equ	0xFEE
  3086                           wreg	equ	0xFE8
  3087                           postdec1	equ	0xFE5
  3088                           plusw1	equ	0xFE3
  3089                           fsr1l	equ	0xFE1
  3090                           postinc2	equ	0xFDE
  3091                           plusw2	equ	0xFDB
  3092                           status	equ	0xFD8
  3093                           
  3094 ;; *************** function _start_md_boot_timer *****************
  3095 ;; Defined at:
  3096 ;;		line 42 in file "modem.c"
  3097 ;; Parameters:    Size  Location     Type
  3098 ;;		None
  3099 ;; Auto vars:     Size  Location     Type
  3100 ;;		None
  3101 ;; Return value:  Size  Location     Type
  3102 ;;                  1    wreg      void 
  3103 ;; Registers used:
  3104 ;;		cstack
  3105 ;; Tracked objects:
  3106 ;;		On entry : 0/0
  3107 ;;		On exit  : 0/0
  3108 ;;		Unchanged: 0/0
  3109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3111 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3113 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3114 ;;Total ram usage:        0 bytes
  3115 ;; Hardware stack levels used:    1
  3116 ;; Hardware stack levels required when called:    4
  3117 ;; This function calls:
  3118 ;;		_reload_tmr3_1s
  3119 ;; This function is called by:
  3120 ;;		_start_modem_send_process
  3121 ;;		_send_md_cfg_cmds_ok
  3122 ;; This function uses a non-reentrant model
  3123 ;;
  3124                           
  3125                           	psect	text7
  3126  001EB6                     __ptext7:
  3127                           	opt stack 0
  3128  001EB6                     _start_md_boot_timer:
  3129                           	opt stack 25
  3130                           
  3131                           ;modem.c: 45: reload_tmr3_1s();
  3132                           
  3133                           ; BSR set to: 0
  3134                           ;incstack = 0
  3135  001EB6  EC5E  F00F         	call	_reload_tmr3_1s	;wreg free
  3136  001EBA  0012               	return		;funcret
  3137  001EBC                     __end_of_start_md_boot_timer:
  3138                           	opt stack 0
  3139                           tblptru	equ	0xFF8
  3140                           tblptrh	equ	0xFF7
  3141                           tblptrl	equ	0xFF6
  3142                           tablat	equ	0xFF5
  3143                           intcon	equ	0xFF2
  3144                           postinc0	equ	0xFEE
  3145                           wreg	equ	0xFE8
  3146                           postdec1	equ	0xFE5
  3147                           plusw1	equ	0xFE3
  3148                           fsr1l	equ	0xFE1
  3149                           postinc2	equ	0xFDE
  3150                           plusw2	equ	0xFDB
  3151                           status	equ	0xFD8
  3152                           
  3153 ;; *************** function _close_socket_ok *****************
  3154 ;; Defined at:
  3155 ;;		line 252 in file "modem.c"
  3156 ;; Parameters:    Size  Location     Type
  3157 ;;		None
  3158 ;; Auto vars:     Size  Location     Type
  3159 ;;  syshalt        17    9[BANK0 ] const unsigned char [17]
  3160 ;;  deactivatePD   15   26[BANK0 ] const unsigned char [15]
  3161 ;;  closeSocket    10   41[BANK0 ] const unsigned char [10]
  3162 ;; Return value:  Size  Location     Type
  3163 ;;                  1    wreg      unsigned char 
  3164 ;; Registers used:
  3165 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3166 ;; Tracked objects:
  3167 ;;		On entry : 0/0
  3168 ;;		On exit  : 0/0
  3169 ;;		Unchanged: 0/0
  3170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3172 ;;      Locals:         0      42       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3174 ;;      Totals:         0      42       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3175 ;;Total ram usage:       42 bytes
  3176 ;; Hardware stack levels used:    1
  3177 ;; Hardware stack levels required when called:    5
  3178 ;; This function calls:
  3179 ;;		_md_uart_write_str_ok
  3180 ;;		_reset_AT_marks
  3181 ;; This function is called by:
  3182 ;;		_check_modem_state
  3183 ;; This function uses a non-reentrant model
  3184 ;;
  3185                           
  3186                           	psect	text8
  3187  0018DE                     __ptext8:
  3188                           	opt stack 0
  3189  0018DE                     _close_socket_ok:
  3190                           	opt stack 24
  3191                           
  3192                           ;modem.c: 254: const uint8_t closeSocket[] = "AT#SH=1\r\n";
  3193                           
  3194                           ;incstack = 0
  3195  0018DE  0E6A               	movlw	low close_socket_ok@F6900
  3196  0018E0  6EF6               	movwf	tblptrl,c
  3197  0018E2                     	if	1	;There is more than 1 active tblptr byte
  3198  0018E2  0E10               	movlw	high close_socket_ok@F6900
  3199  0018E4  6EF7               	movwf	tblptrh,c
  3200  0018E6                     	endif
  3201  0018E6                     	if	0	;There are less than 3 active tblptr bytes
  3202  0018E6                     	endif
  3203  0018E6  EE20  F089         	lfsr	2,close_socket_ok@closeSocket
  3204  0018EA  0E09               	movlw	9
  3205  0018EC                     u4200:
  3206  0018EC  0009               	tblrd		*+
  3207  0018EE  CFF5 FFDE          	movff	tablat,postinc2
  3208  0018F2  06E8               	decf	wreg,f,c
  3209  0018F4  E2FB               	bc	u4200
  3210                           
  3211                           ;modem.c: 255: const uint8_t deactivatePDP[] = "AT#SGACT=3,0\r\n";
  3212  0018F6  0E4E               	movlw	low close_socket_ok@F6902
  3213  0018F8  6EF6               	movwf	tblptrl,c
  3214  0018FA                     	if	1	;There is more than 1 active tblptr byte
  3215  0018FA  0E10               	movlw	high close_socket_ok@F6902
  3216  0018FC  6EF7               	movwf	tblptrh,c
  3217  0018FE                     	endif
  3218  0018FE                     	if	0	;There are less than 3 active tblptr bytes
  3219  0018FE                     	endif
  3220  0018FE  EE20  F07A         	lfsr	2,close_socket_ok@deactivatePDP
  3221  001902  0E0E               	movlw	14
  3222  001904                     u4210:
  3223  001904  0009               	tblrd		*+
  3224  001906  CFF5 FFDE          	movff	tablat,postinc2
  3225  00190A  06E8               	decf	wreg,f,c
  3226  00190C  E2FB               	bc	u4210
  3227                           
  3228                           ;modem.c: 256: const uint8_t syshalt[] = "AT#FASTSYSHALT\r\n";
  3229  00190E  0E2D               	movlw	low close_socket_ok@F6904
  3230  001910  6EF6               	movwf	tblptrl,c
  3231  001912                     	if	1	;There is more than 1 active tblptr byte
  3232  001912  0E10               	movlw	high close_socket_ok@F6904
  3233  001914  6EF7               	movwf	tblptrh,c
  3234  001916                     	endif
  3235  001916                     	if	0	;There are less than 3 active tblptr bytes
  3236  001916                     	endif
  3237  001916  EE20  F069         	lfsr	2,close_socket_ok@syshalt
  3238  00191A  0E10               	movlw	16
  3239  00191C                     u4220:
  3240  00191C  0009               	tblrd		*+
  3241  00191E  CFF5 FFDE          	movff	tablat,postinc2
  3242  001922  06E8               	decf	wreg,f,c
  3243  001924  E2FB               	bc	u4220
  3244                           
  3245                           ;modem.c: 258: if (!(sentAT1 == 0x03))
  3246  001926  0E03               	movlw	3
  3247  001928  0100               	movlb	0	; () banked
  3248  00192A  19CD               	xorwf	_sentAT1& (0+255),w,b
  3249  00192C  B4D8               	btfsc	status,2,c
  3250  00192E  D00E               	goto	l509
  3251                           
  3252                           ; BSR set to: 0
  3253                           ;modem.c: 259: sentAT1 = md_uart_write_str_ok((uint8_t *)&closeSocket[0], sizeof(closeSo
      +                          cket), 1, 0);
  3254  001930  0E89               	movlw	low close_socket_ok@closeSocket
  3255  001932  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  3256  001934  0E00               	movlw	high close_socket_ok@closeSocket
  3257  001936  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  3258  001938  0E0A               	movlw	10
  3259  00193A  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  3260  00193C  0E01               	movlw	1
  3261  00193E  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  3262  001940  0E00               	movlw	0
  3263  001942  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  3264  001944  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  3265  001948  0100               	movlb	0	; () banked
  3266  00194A  6FCD               	movwf	_sentAT1& (0+255),b
  3267  00194C                     l509:
  3268                           
  3269                           ; BSR set to: 0
  3270                           ;modem.c: 260: if ((sentAT1 == 0x03) && !(sentAT2 == 0x03))
  3271                           
  3272                           ; BSR set to: 0
  3273  00194C  0E03               	movlw	3
  3274  00194E  19CD               	xorwf	_sentAT1& (0+255),w,b
  3275  001950  A4D8               	btfss	status,2,c
  3276  001952  D012               	goto	l510
  3277                           
  3278                           ; BSR set to: 0
  3279  001954  0E03               	movlw	3
  3280  001956  19CC               	xorwf	_sentAT2& (0+255),w,b
  3281  001958  B4D8               	btfsc	status,2,c
  3282  00195A  D00E               	goto	l510
  3283                           
  3284                           ; BSR set to: 0
  3285                           ;modem.c: 261: sentAT2 = md_uart_write_str_ok((uint8_t *)&deactivatePDP[0], sizeof(deact
      +                          ivatePDP), 1, 0);
  3286  00195C  0E7A               	movlw	low close_socket_ok@deactivatePDP
  3287  00195E  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  3288  001960  0E00               	movlw	high close_socket_ok@deactivatePDP
  3289  001962  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  3290  001964  0E0F               	movlw	15
  3291  001966  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  3292  001968  0E01               	movlw	1
  3293  00196A  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  3294  00196C  0E00               	movlw	0
  3295  00196E  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  3296  001970  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  3297  001974  0100               	movlb	0	; () banked
  3298  001976  6FCC               	movwf	_sentAT2& (0+255),b
  3299  001978                     l510:
  3300                           
  3301                           ; BSR set to: 0
  3302                           ;modem.c: 263: if ((sentAT2 == 0x03) && !(sentAT3 == 0x03))
  3303                           
  3304                           ; BSR set to: 0
  3305  001978  0E03               	movlw	3
  3306  00197A  19CC               	xorwf	_sentAT2& (0+255),w,b
  3307  00197C  A4D8               	btfss	status,2,c
  3308  00197E  D012               	goto	l511
  3309                           
  3310                           ; BSR set to: 0
  3311  001980  0E03               	movlw	3
  3312  001982  19CB               	xorwf	_sentAT3& (0+255),w,b
  3313  001984  B4D8               	btfsc	status,2,c
  3314  001986  D00E               	goto	l511
  3315                           
  3316                           ; BSR set to: 0
  3317                           ;modem.c: 264: sentAT3 = md_uart_write_str_ok((uint8_t *)&syshalt[0], sizeof(syshalt), 1
      +                          , 0);
  3318  001988  0E69               	movlw	low close_socket_ok@syshalt
  3319  00198A  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  3320  00198C  0E00               	movlw	high close_socket_ok@syshalt
  3321  00198E  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  3322  001990  0E11               	movlw	17
  3323  001992  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  3324  001994  0E01               	movlw	1
  3325  001996  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  3326  001998  0E00               	movlw	0
  3327  00199A  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  3328  00199C  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  3329  0019A0  0100               	movlb	0	; () banked
  3330  0019A2  6FCB               	movwf	_sentAT3& (0+255),b
  3331  0019A4                     l511:
  3332                           
  3333                           ; BSR set to: 0
  3334                           ;modem.c: 265: if (sentAT3 == 0x03)
  3335                           
  3336                           ; BSR set to: 0
  3337  0019A4  0E03               	movlw	3
  3338  0019A6  19CB               	xorwf	_sentAT3& (0+255),w,b
  3339  0019A8  A4D8               	btfss	status,2,c
  3340  0019AA  D006               	goto	l512
  3341                           
  3342                           ; BSR set to: 0
  3343                           ;modem.c: 266: {
  3344                           ;modem.c: 267: pdpIsActive = 0;
  3345  0019AC  0E00               	movlw	0
  3346  0019AE  6FCE               	movwf	_pdpIsActive& (0+255),b
  3347                           
  3348                           ; BSR set to: 0
  3349                           ;modem.c: 268: reset_AT_marks();
  3350  0019B0  ECBA  F00E         	call	_reset_AT_marks	;wreg free
  3351                           
  3352                           ;modem.c: 269: return 1;
  3353  0019B4  0E01               	movlw	1
  3354  0019B6  0012               	return	
  3355  0019B8                     l512:
  3356                           
  3357                           ;modem.c: 274: }
  3358                           ;modem.c: 275: return 0;
  3359                           
  3360                           ;modem.c: 272: {
  3361  0019B8  0E00               	movlw	0
  3362  0019BA  0012               	return	
  3363  0019BC                     __end_of_close_socket_ok:
  3364                           	opt stack 0
  3365                           tblptru	equ	0xFF8
  3366                           tblptrh	equ	0xFF7
  3367                           tblptrl	equ	0xFF6
  3368                           tablat	equ	0xFF5
  3369                           intcon	equ	0xFF2
  3370                           postinc0	equ	0xFEE
  3371                           wreg	equ	0xFE8
  3372                           postdec1	equ	0xFE5
  3373                           plusw1	equ	0xFE3
  3374                           fsr1l	equ	0xFE1
  3375                           postinc2	equ	0xFDE
  3376                           plusw2	equ	0xFDB
  3377                           status	equ	0xFD8
  3378                           
  3379 ;; *************** function _reset_AT_marks *****************
  3380 ;; Defined at:
  3381 ;;		line 278 in file "modem.c"
  3382 ;; Parameters:    Size  Location     Type
  3383 ;;		None
  3384 ;; Auto vars:     Size  Location     Type
  3385 ;;		None
  3386 ;; Return value:  Size  Location     Type
  3387 ;;                  1    wreg      void 
  3388 ;; Registers used:
  3389 ;;		wreg, status,2
  3390 ;; Tracked objects:
  3391 ;;		On entry : 0/0
  3392 ;;		On exit  : 0/0
  3393 ;;		Unchanged: 0/0
  3394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3398 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3399 ;;Total ram usage:        0 bytes
  3400 ;; Hardware stack levels used:    1
  3401 ;; Hardware stack levels required when called:    3
  3402 ;; This function calls:
  3403 ;;		Nothing
  3404 ;; This function is called by:
  3405 ;;		_send_md_cfg_cmds_ok
  3406 ;;		_setup_data_ok
  3407 ;;		_send_over_socket_ok
  3408 ;;		_close_socket_ok
  3409 ;; This function uses a non-reentrant model
  3410 ;;
  3411                           
  3412                           	psect	text9
  3413  001D74                     __ptext9:
  3414                           	opt stack 0
  3415  001D74                     _reset_AT_marks:
  3416                           	opt stack 25
  3417                           
  3418                           ;modem.c: 280: sentAT1 = 0;
  3419                           
  3420                           ;incstack = 0
  3421  001D74  0E00               	movlw	0
  3422  001D76  0100               	movlb	0	; () banked
  3423  001D78  6FCD               	movwf	_sentAT1& (0+255),b
  3424                           
  3425                           ;modem.c: 281: sentAT2 = 0;
  3426  001D7A  0E00               	movlw	0
  3427  001D7C  6FCC               	movwf	_sentAT2& (0+255),b
  3428                           
  3429                           ;modem.c: 282: sentAT3 = 0;
  3430  001D7E  0E00               	movlw	0
  3431  001D80  6FCB               	movwf	_sentAT3& (0+255),b
  3432                           
  3433                           ;modem.c: 283: sentAT4 = 0;
  3434  001D82  0E00               	movlw	0
  3435  001D84  6FCA               	movwf	_sentAT4& (0+255),b
  3436                           
  3437                           ;modem.c: 284: sentAT5 = 0;
  3438  001D86  0E00               	movlw	0
  3439  001D88  6FC9               	movwf	_sentAT5& (0+255),b
  3440                           
  3441                           ;modem.c: 285: sentAT6 = 0;
  3442  001D8A  0E00               	movlw	0
  3443  001D8C  6FC8               	movwf	_sentAT6& (0+255),b
  3444                           
  3445                           ;modem.c: 286: sentAT7 = 0;
  3446  001D8E  0E00               	movlw	0
  3447  001D90  6FC7               	movwf	_sentAT7& (0+255),b
  3448                           
  3449                           ;modem.c: 287: sentAT8 = 0;
  3450  001D92  0E00               	movlw	0
  3451  001D94  6FC6               	movwf	_sentAT8& (0+255),b
  3452                           
  3453                           ;modem.c: 288: sentAT9 = 0;
  3454  001D96  0E00               	movlw	0
  3455  001D98  6FC5               	movwf	_sentAT9& (0+255),b
  3456                           
  3457                           ;modem.c: 289: sentAT10 = 0;
  3458  001D9A  0E00               	movlw	0
  3459  001D9C  6FC4               	movwf	_sentAT10& (0+255),b
  3460                           
  3461                           ;modem.c: 290: sentAT11 = 0;
  3462  001D9E  0E00               	movlw	0
  3463  001DA0  6FC3               	movwf	_sentAT11& (0+255),b
  3464                           
  3465                           ;modem.c: 291: sentAT12 = 0;
  3466  001DA2  0E00               	movlw	0
  3467  001DA4  6FC2               	movwf	_sentAT12& (0+255),b
  3468                           
  3469                           ; BSR set to: 0
  3470  001DA6  0012               	return		;funcret
  3471  001DA8                     __end_of_reset_AT_marks:
  3472                           	opt stack 0
  3473                           tblptru	equ	0xFF8
  3474                           tblptrh	equ	0xFF7
  3475                           tblptrl	equ	0xFF6
  3476                           tablat	equ	0xFF5
  3477                           intcon	equ	0xFF2
  3478                           postinc0	equ	0xFEE
  3479                           wreg	equ	0xFE8
  3480                           postdec1	equ	0xFE5
  3481                           plusw1	equ	0xFE3
  3482                           fsr1l	equ	0xFE1
  3483                           postinc2	equ	0xFDE
  3484                           plusw2	equ	0xFDB
  3485                           status	equ	0xFD8
  3486                           
  3487 ;; *************** function _md_uart_write_str_ok *****************
  3488 ;; Defined at:
  3489 ;;		line 76 in file "uart.c"
  3490 ;; Parameters:    Size  Location     Type
  3491 ;;  data            2    1[BANK0 ] PTR unsigned char 
  3492 ;;		 -> close_socket_ok@syshalt(17), close_socket_ok@deactivatePDP(15), close_socket_ok@closeSocket(10), send_over_socke
      +t_ok@terminateData(1), 
  3493 ;;		 -> send_over_socket_ok@msg(8), send_over_socket_ok@srecv(16), send_over_socket_ok@ssend(13), send_over_socket_ok@op
      +enConnection(44), 
  3494 ;;		 -> setup_data_ok@activatePDP(15), setup_data_ok@cfgSocket(25), setup_data_ok@setApn(47), send_md_cfg_cmds_ok@csq(9)
      +, 
  3495 ;;		 -> send_md_cfg_cmds_ok@gprs(11), send_md_cfg_cmds_ok@cereg(12), send_md_cfg_cmds_ok@creg(11), send_md_cfg_cmds_ok@c
      +pin(11), 
  3496 ;;		 -> send_md_cfg_cmds_ok@queryVersion(10), send_md_cfg_cmds_ok@ledpattern(12), send_md_cfg_cmds_ok@ledCfg(16), send_m
      +d_cfg_cmds_ok@baud(16), 
  3497 ;;		 -> send_md_cfg_cmds_ok@cmee(12), send_md_cfg_cmds_ok@ate(7), send_md_cfg_cmds_ok@at(5), 
  3498 ;;  len             1    3[BANK0 ] unsigned char 
  3499 ;;  wantOK          1    4[BANK0 ] unsigned char 
  3500 ;;  waitToSendMo    1    5[BANK0 ] unsigned char 
  3501 ;; Auto vars:     Size  Location     Type
  3502 ;;  index           1    8[BANK0 ] unsigned char 
  3503 ;;  currentChar     1    7[BANK0 ] unsigned char 
  3504 ;;  temp            1    0        unsigned char 
  3505 ;; Return value:  Size  Location     Type
  3506 ;;                  1    wreg      unsigned char 
  3507 ;; Registers used:
  3508 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3509 ;; Tracked objects:
  3510 ;;		On entry : 0/0
  3511 ;;		On exit  : 0/0
  3512 ;;		Unchanged: 0/0
  3513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3514 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3515 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3516 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3517 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3518 ;;Total ram usage:        8 bytes
  3519 ;; Hardware stack levels used:    1
  3520 ;; Hardware stack levels required when called:    4
  3521 ;; This function calls:
  3522 ;;		_disable_tmr3
  3523 ;;		_enable_md_rxint
  3524 ;;		_init_md_uart
  3525 ;;		_md_uart_send
  3526 ;;		_reload_tmr3_1s
  3527 ;;		_reset_retry_count
  3528 ;;		_terminate_md_uart
  3529 ;; This function is called by:
  3530 ;;		_send_md_cfg_cmds_ok
  3531 ;;		_setup_data_ok
  3532 ;;		_send_over_socket_ok
  3533 ;;		_close_socket_ok
  3534 ;; This function uses a non-reentrant model
  3535 ;;
  3536                           
  3537                           	psect	text10
  3538  001470                     __ptext10:
  3539                           	opt stack 0
  3540  001470                     _md_uart_write_str_ok:
  3541                           	opt stack 24
  3542                           
  3543                           ;uart.c: 79: uint8_t currentChar, temp;
  3544                           ;uart.c: 80: switch (atCmdState)
  3545                           
  3546                           ; BSR set to: 0
  3547                           ;incstack = 0
  3548  001470  D0D8               	goto	l270
  3549  001472                     
  3550                           ;uart.c: 83: tmr3_cnt = 0;
  3551  001472  0E00               	movlw	0
  3552  001474  6E44               	movwf	_tmr3_cnt,c
  3553  001476  0E00               	movlw	0
  3554  001478  6E45               	movwf	_tmr3_cnt+1,c
  3555  00147A  0E00               	movlw	0
  3556  00147C  6E46               	movwf	_tmr3_cnt+2,c
  3557  00147E  0E00               	movlw	0
  3558  001480  6E47               	movwf	_tmr3_cnt+3,c
  3559                           
  3560                           ;uart.c: 84: endPtr = 0;
  3561  001482  0E00               	movlw	0
  3562  001484  6E50               	movwf	_endPtr,c
  3563                           
  3564                           ;uart.c: 85: receivedOK = 0;
  3565  001486  0E00               	movlw	0
  3566  001488  6E4F               	movwf	_receivedOK,c
  3567                           
  3568                           ;uart.c: 86: receivedERR = 0;
  3569  00148A  0E00               	movlw	0
  3570  00148C  6E4E               	movwf	_receivedERR,c
  3571                           
  3572                           ;uart.c: 87: if (numRetries -- > 0)
  3573  00148E  062B               	decf	_numRetries,f,c
  3574  001490  282B               	incf	_numRetries,w,c
  3575  001492  0A80               	xorlw	128
  3576  001494  0F7F               	addlw	-129
  3577  001496  A0D8               	btfss	status,0,c
  3578  001498  D044               	goto	l272
  3579                           
  3580                           ;uart.c: 88: {
  3581                           ;uart.c: 89: init_md_uart();
  3582  00149A  EC16  F00F         	call	_init_md_uart	;wreg free
  3583                           
  3584                           ;uart.c: 90: _delay((unsigned long)((10)*(8000000/4000.0)));
  3585  00149E  0E1A               	movlw	26
  3586  0014A0  0100               	movlb	0	; () banked
  3587  0014A2  6F66               	movwf	??_md_uart_write_str_ok& (0+255),b
  3588  0014A4  0EF8               	movlw	248
  3589  0014A6                     u4387:
  3590  0014A6  2EE8               	decfsz	wreg,f,c
  3591  0014A8  D7FE               	bra	u4387
  3592  0014AA  2F66               	decfsz	??_md_uart_write_str_ok& (0+255),f,b
  3593  0014AC  D7FC               	bra	u4387
  3594  0014AE  F000               	nop	
  3595                           
  3596                           ;uart.c: 91: timedOut = 0;
  3597  0014B0  0E00               	movlw	0
  3598  0014B2  6E4B               	movwf	_timedOut,c
  3599                           
  3600                           ;uart.c: 93: for (uint8_t index = 0; index < len; index++)
  3601  0014B4  0E00               	movlw	0
  3602  0014B6  0100               	movlb	0	; () banked
  3603  0014B8  6F68               	movwf	md_uart_write_str_ok@index& (0+255),b
  3604  0014BA  D00D               	goto	l273
  3605  0014BC                     
  3606                           ; BSR set to: 0
  3607                           ;uart.c: 94: {
  3608                           ;uart.c: 95: currentChar = *data;
  3609                           
  3610                           ; BSR set to: 0
  3611  0014BC  C061  FFD9         	movff	md_uart_write_str_ok@data,fsr2l
  3612  0014C0  C062  FFDA         	movff	md_uart_write_str_ok@data+1,fsr2h
  3613  0014C4  50DF               	movf	indf2,w,c
  3614  0014C6  6F67               	movwf	md_uart_write_str_ok@currentChar& (0+255),b
  3615                           
  3616                           ; BSR set to: 0
  3617                           ;uart.c: 96: md_uart_send(currentChar);
  3618  0014C8  5167               	movf	md_uart_write_str_ok@currentChar& (0+255),w,b
  3619  0014CA  EC44  F00F         	call	_md_uart_send
  3620                           
  3621                           ;uart.c: 97: data++;
  3622  0014CE  0100               	movlb	0	; () banked
  3623  0014D0  4B61               	infsnz	md_uart_write_str_ok@data& (0+255),f,b
  3624  0014D2  2B62               	incf	(md_uart_write_str_ok@data+1)& (0+255),f,b
  3625                           
  3626                           ; BSR set to: 0
  3627  0014D4  2B68               	incf	md_uart_write_str_ok@index& (0+255),f,b
  3628  0014D6                     l273:
  3629                           
  3630                           ; BSR set to: 0
  3631                           
  3632                           ; BSR set to: 0
  3633  0014D6  5163               	movf	md_uart_write_str_ok@len& (0+255),w,b
  3634  0014D8  5D68               	subwf	md_uart_write_str_ok@index& (0+255),w,b
  3635  0014DA  A0D8               	btfss	status,0,c
  3636  0014DC  D7EF               	goto	l274
  3637                           
  3638                           ; BSR set to: 0
  3639                           ;uart.c: 98: }
  3640                           ;uart.c: 99: if (wantOK && !waitToSendMoreData)
  3641                           
  3642                           ; BSR set to: 0
  3643  0014DE  5164               	movf	md_uart_write_str_ok@wantOK& (0+255),w,b
  3644  0014E0  B4D8               	btfsc	status,2,c
  3645  0014E2  D009               	goto	l276
  3646                           
  3647                           ; BSR set to: 0
  3648  0014E4  5165               	movf	md_uart_write_str_ok@waitToSendMoreData& (0+255),w,b
  3649  0014E6  A4D8               	btfss	status,2,c
  3650  0014E8  D006               	goto	l276
  3651                           
  3652                           ; BSR set to: 0
  3653                           ;uart.c: 100: {
  3654                           ;uart.c: 101: enable_md_rxint();
  3655  0014EA  EC3B  F00F         	call	_enable_md_rxint	;wreg free
  3656                           
  3657                           ;uart.c: 102: reload_tmr3_1s();
  3658  0014EE  EC5E  F00F         	call	_reload_tmr3_1s	;wreg free
  3659                           
  3660                           ;uart.c: 103: atCmdState = AT_WAIT_OK;
  3661  0014F2  0E02               	movlw	2
  3662  0014F4  D014               	goto	L3
  3663  0014F6                     l276:
  3664                           
  3665                           ;uart.c: 105: else if (!wantOK && !waitToSendMoreData)
  3666  0014F6  0100               	movlb	0	; () banked
  3667  0014F8  5164               	movf	md_uart_write_str_ok@wantOK& (0+255),w,b
  3668  0014FA  A4D8               	btfss	status,2,c
  3669  0014FC  D007               	goto	l278
  3670                           
  3671                           ; BSR set to: 0
  3672  0014FE  5165               	movf	md_uart_write_str_ok@waitToSendMoreData& (0+255),w,b
  3673  001500  A4D8               	btfss	status,2,c
  3674  001502  D004               	goto	l278
  3675                           
  3676                           ; BSR set to: 0
  3677                           ;uart.c: 106: {
  3678                           ;uart.c: 107: terminate_md_uart();
  3679  001504  EC51  F00F         	call	_terminate_md_uart	;wreg free
  3680                           
  3681                           ;uart.c: 108: return 1;
  3682  001508  0E01               	movlw	1
  3683  00150A  0012               	return	
  3684  00150C                     l278:
  3685                           
  3686                           ;uart.c: 168: else if (waitToSendMoreData)
  3687  00150C  0100               	movlb	0	; () banked
  3688  00150E  5165               	movf	md_uart_write_str_ok@waitToSendMoreData& (0+255),w,b
  3689  001510  B4D8               	btfsc	status,2,c
  3690  001512  D091               	goto	l283
  3691                           
  3692                           ; BSR set to: 0
  3693                           ;uart.c: 169: {
  3694                           ;uart.c: 170: enable_md_rxint();
  3695  001514  EC3B  F00F         	call	_enable_md_rxint	;wreg free
  3696                           
  3697                           ;uart.c: 171: reload_tmr3_1s();
  3698  001518  EC5E  F00F         	call	_reload_tmr3_1s	;wreg free
  3699                           
  3700                           ;uart.c: 172: atCmdState = AT_WAIT_MORE;
  3701  00151C  0E01               	movlw	1
  3702  00151E                     L3:
  3703  00151E  6E51               	movwf	_atCmdState,c
  3704                           
  3705                           ;uart.c: 173: }
  3706                           ;uart.c: 174: }
  3707  001520  D08A               	goto	l283
  3708  001522                     l272:
  3709                           
  3710                           ;uart.c: 175: else
  3711                           ;uart.c: 176: {
  3712                           ;uart.c: 177: numRetries = 15;
  3713  001522  0E0F               	movlw	15
  3714  001524  6E2B               	movwf	_numRetries,c
  3715  001526                     l2836:
  3716                           
  3717                           ;uart.c: 178: return 0x04;
  3718  001526  0E04               	movlw	4
  3719  001528  0012               	return	
  3720  00152A                     
  3721                           ;uart.c: 182: if (receivedCarat)
  3722  00152A  504C               	movf	_receivedCarat,w,c
  3723  00152C  B4D8               	btfsc	status,2,c
  3724  00152E  D00A               	goto	l285
  3725                           
  3726                           ;uart.c: 183: {
  3727                           ;uart.c: 184: disable_tmr3();
  3728  001530  EC27  F00F         	call	_disable_tmr3	;wreg free
  3729                           
  3730                           ;uart.c: 185: terminate_md_uart();
  3731  001534  EC51  F00F         	call	_terminate_md_uart	;wreg free
  3732                           
  3733                           ;uart.c: 186: receivedCarat = 0;
  3734  001538  0E00               	movlw	0
  3735  00153A  6E4C               	movwf	_receivedCarat,c
  3736                           
  3737                           ;uart.c: 187: atCmdState = AT_SEND;
  3738  00153C  0E00               	movlw	0
  3739  00153E  6E51               	movwf	_atCmdState,c
  3740                           
  3741                           ;uart.c: 188: return 0x03;
  3742  001540  0E03               	movlw	3
  3743  001542  0012               	return	
  3744  001544                     l285:
  3745                           
  3746                           ;uart.c: 190: else if (!receivedCarat && timedOut && numRetries > 0)
  3747  001544  504C               	movf	_receivedCarat,w,c
  3748  001546  A4D8               	btfss	status,2,c
  3749  001548  D012               	goto	l287
  3750  00154A  504B               	movf	_timedOut,w,c
  3751  00154C  B4D8               	btfsc	status,2,c
  3752  00154E  D00F               	goto	l287
  3753  001550  502B               	movf	_numRetries,w,c
  3754  001552  0A80               	xorlw	128
  3755  001554  0F7F               	addlw	-129
  3756  001556  A0D8               	btfss	status,0,c
  3757  001558  D00A               	goto	l287
  3758                           
  3759                           ;uart.c: 191: {
  3760                           ;uart.c: 192: disable_tmr3();
  3761  00155A  EC27  F00F         	call	_disable_tmr3	;wreg free
  3762                           
  3763                           ;uart.c: 193: terminate_md_uart();
  3764  00155E  EC51  F00F         	call	_terminate_md_uart	;wreg free
  3765                           
  3766                           ;uart.c: 194: timedOut = 0;
  3767  001562  0E00               	movlw	0
  3768  001564  6E4B               	movwf	_timedOut,c
  3769                           
  3770                           ;uart.c: 195: atCmdState = AT_SEND;
  3771  001566  0E00               	movlw	0
  3772  001568  6E51               	movwf	_atCmdState,c
  3773                           
  3774                           ;uart.c: 196: return 0x01;
  3775  00156A  0E01               	movlw	1
  3776  00156C  0012               	return	
  3777  00156E                     l287:
  3778                           
  3779                           ;uart.c: 197: }
  3780                           ;uart.c: 198: if (numRetries == 0)
  3781  00156E  502B               	movf	_numRetries,w,c
  3782  001570  A4D8               	btfss	status,2,c
  3783  001572  D061               	goto	l283
  3784                           
  3785                           ;uart.c: 199: {
  3786                           ;uart.c: 200: disable_tmr3();
  3787  001574  EC27  F00F         	call	_disable_tmr3	;wreg free
  3788                           
  3789                           ;uart.c: 201: terminate_md_uart();
  3790  001578  EC51  F00F         	call	_terminate_md_uart	;wreg free
  3791  00157C  D04F               	goto	L4
  3792  00157E                     
  3793                           ;uart.c: 207: if (receivedOK && !receivedERR)
  3794  00157E  504F               	movf	_receivedOK,w,c
  3795  001580  B4D8               	btfsc	status,2,c
  3796  001582  D017               	goto	l290
  3797  001584  504E               	movf	_receivedERR,w,c
  3798  001586  A4D8               	btfss	status,2,c
  3799  001588  D014               	goto	l290
  3800                           
  3801                           ;uart.c: 208: {
  3802                           ;uart.c: 209: reset_retry_count();
  3803  00158A  EC92  F00E         	call	_reset_retry_count	;wreg free
  3804                           
  3805                           ;uart.c: 210: tmr3_cnt = 0;
  3806  00158E  0E00               	movlw	0
  3807  001590  6E44               	movwf	_tmr3_cnt,c
  3808  001592  0E00               	movlw	0
  3809  001594  6E45               	movwf	_tmr3_cnt+1,c
  3810  001596  0E00               	movlw	0
  3811  001598  6E46               	movwf	_tmr3_cnt+2,c
  3812  00159A  0E00               	movlw	0
  3813  00159C  6E47               	movwf	_tmr3_cnt+3,c
  3814                           
  3815                           ;uart.c: 211: disable_tmr3();
  3816  00159E  EC27  F00F         	call	_disable_tmr3	;wreg free
  3817                           
  3818                           ;uart.c: 212: terminate_md_uart();
  3819  0015A2  EC51  F00F         	call	_terminate_md_uart	;wreg free
  3820                           
  3821                           ;uart.c: 213: receivedOK = 0;
  3822  0015A6  0E00               	movlw	0
  3823  0015A8  6E4F               	movwf	_receivedOK,c
  3824                           
  3825                           ;uart.c: 214: atCmdState = AT_SEND;
  3826  0015AA  0E00               	movlw	0
  3827  0015AC  6E51               	movwf	_atCmdState,c
  3828                           
  3829                           ;uart.c: 215: return 0x03;
  3830  0015AE  0E03               	movlw	3
  3831  0015B0  0012               	return	
  3832  0015B2                     l290:
  3833                           
  3834                           ;uart.c: 217: else if (!receivedOK && receivedERR && timedOut)
  3835  0015B2  504F               	movf	_receivedOK,w,c
  3836  0015B4  A4D8               	btfss	status,2,c
  3837  0015B6  D012               	goto	l292
  3838  0015B8  504E               	movf	_receivedERR,w,c
  3839  0015BA  B4D8               	btfsc	status,2,c
  3840  0015BC  D00F               	goto	l292
  3841  0015BE  504B               	movf	_timedOut,w,c
  3842  0015C0  B4D8               	btfsc	status,2,c
  3843  0015C2  D00C               	goto	l292
  3844                           
  3845                           ;uart.c: 218: {
  3846                           ;uart.c: 219: receivedERR = 0;
  3847  0015C4  0E00               	movlw	0
  3848  0015C6  6E4E               	movwf	_receivedERR,c
  3849                           
  3850                           ;uart.c: 220: timedOut = 0;
  3851  0015C8  0E00               	movlw	0
  3852  0015CA  6E4B               	movwf	_timedOut,c
  3853                           
  3854                           ;uart.c: 221: disable_tmr3();
  3855  0015CC  EC27  F00F         	call	_disable_tmr3	;wreg free
  3856                           
  3857                           ;uart.c: 222: terminate_md_uart();
  3858  0015D0  EC51  F00F         	call	_terminate_md_uart	;wreg free
  3859                           
  3860                           ;uart.c: 223: atCmdState = AT_SEND;
  3861  0015D4  0E00               	movlw	0
  3862  0015D6  6E51               	movwf	_atCmdState,c
  3863                           
  3864                           ;uart.c: 224: return 0x02;
  3865  0015D8  0E02               	movlw	2
  3866  0015DA  0012               	return	
  3867  0015DC                     l292:
  3868                           
  3869                           ;uart.c: 226: else if (!receivedOK && !receivedERR && timedOut)
  3870  0015DC  504F               	movf	_receivedOK,w,c
  3871  0015DE  A4D8               	btfss	status,2,c
  3872  0015E0  D016               	goto	l294
  3873  0015E2  504E               	movf	_receivedERR,w,c
  3874  0015E4  A4D8               	btfss	status,2,c
  3875  0015E6  D013               	goto	l294
  3876  0015E8  504B               	movf	_timedOut,w,c
  3877  0015EA  B4D8               	btfsc	status,2,c
  3878  0015EC  D010               	goto	l294
  3879                           
  3880                           ;uart.c: 227: {
  3881                           ;uart.c: 228: toggle = ~toggle;
  3882  0015EE  1E2A               	comf	_toggle,f,c
  3883                           
  3884                           ;uart.c: 229: PORTBbits.RB3 = toggle;
  3885  0015F0  B02A               	btfsc	_toggle,0,c
  3886  0015F2  D002               	bra	u3305
  3887  0015F4  9681               	bcf	3969,3,c	;volatile
  3888  0015F6  D001               	bra	u3306
  3889  0015F8                     u3305:
  3890  0015F8  8681               	bsf	3969,3,c	;volatile
  3891  0015FA                     u3306:
  3892                           
  3893                           ;uart.c: 230: timedOut = 0;
  3894  0015FA  0E00               	movlw	0
  3895  0015FC  6E4B               	movwf	_timedOut,c
  3896                           
  3897                           ;uart.c: 231: disable_tmr3();
  3898  0015FE  EC27  F00F         	call	_disable_tmr3	;wreg free
  3899                           
  3900                           ;uart.c: 232: terminate_md_uart();
  3901  001602  EC51  F00F         	call	_terminate_md_uart	;wreg free
  3902                           
  3903                           ;uart.c: 233: atCmdState = AT_SEND;
  3904  001606  0E00               	movlw	0
  3905  001608  6E51               	movwf	_atCmdState,c
  3906                           
  3907                           ;uart.c: 234: return 0x01;
  3908  00160A  0E01               	movlw	1
  3909  00160C  0012               	return	
  3910  00160E                     l294:
  3911                           
  3912                           ;uart.c: 235: }
  3913                           ;uart.c: 236: if (numRetries == 0)
  3914  00160E  502B               	movf	_numRetries,w,c
  3915  001610  A4D8               	btfss	status,2,c
  3916  001612  D011               	goto	l283
  3917                           
  3918                           ;uart.c: 237: {
  3919                           ;uart.c: 239: disable_tmr3();
  3920  001614  EC27  F00F         	call	_disable_tmr3	;wreg free
  3921                           
  3922                           ;uart.c: 240: terminate_md_uart();
  3923  001618  EC51  F00F         	call	_terminate_md_uart	;wreg free
  3924  00161C                     L4:
  3925                           
  3926                           ;uart.c: 241: atCmdState = AT_SEND;
  3927  00161C  0E00               	movlw	0
  3928  00161E  6E51               	movwf	_atCmdState,c
  3929  001620  D782               	goto	l2836
  3930  001622                     l270:
  3931  001622  5051               	movf	_atCmdState,w,c
  3932                           
  3933                           ; Switch size 1, requested type "space"
  3934                           ; Number of cases is 3, Range of values is 0 to 2
  3935                           ; switch strategies available:
  3936                           ; Name         Instructions Cycles
  3937                           ; simple_byte           10     6 (average)
  3938                           ;	Chosen strategy is simple_byte
  3939  001624  0A00               	xorlw	0	; case 0
  3940  001626  B4D8               	btfsc	status,2,c
  3941  001628  D724               	goto	l271
  3942  00162A  0A01               	xorlw	1	; case 1
  3943  00162C  B4D8               	btfsc	status,2,c
  3944  00162E  D77D               	goto	l284
  3945  001630  0A03               	xorlw	3	; case 2
  3946  001632  B4D8               	btfsc	status,2,c
  3947  001634  D7A4               	goto	l289
  3948  001636                     l283:
  3949                           
  3950                           ;uart.c: 246: if (receivedOK)
  3951  001636  504F               	movf	_receivedOK,w,c
  3952  001638  B4D8               	btfsc	status,2,c
  3953  00163A  D002               	goto	l296
  3954                           
  3955                           ;uart.c: 247: return 0x03;
  3956  00163C  0E03               	movlw	3
  3957  00163E  0012               	return	
  3958  001640                     l296:
  3959                           
  3960                           ;uart.c: 248: else if (receivedERR)
  3961  001640  504E               	movf	_receivedERR,w,c
  3962  001642  B4D8               	btfsc	status,2,c
  3963  001644  D002               	goto	l298
  3964                           
  3965                           ;uart.c: 249: return 0x02;
  3966  001646  0E02               	movlw	2
  3967  001648  0012               	return	
  3968  00164A                     l298:
  3969                           
  3970                           ;uart.c: 250: else if (timedOut)
  3971  00164A  504B               	movf	_timedOut,w,c
  3972  00164C  B4D8               	btfsc	status,2,c
  3973  00164E  D002               	goto	l300
  3974                           
  3975                           ;uart.c: 251: return 0x01;
  3976  001650  0E01               	movlw	1
  3977  001652  0012               	return	
  3978  001654                     l300:
  3979                           
  3980                           ;uart.c: 252: else
  3981                           ;uart.c: 253: return 0x05;
  3982  001654  0E05               	movlw	5
  3983  001656  0012               	return	
  3984  001658                     __end_of_md_uart_write_str_ok:
  3985                           	opt stack 0
  3986                           tblptru	equ	0xFF8
  3987                           tblptrh	equ	0xFF7
  3988                           tblptrl	equ	0xFF6
  3989                           tablat	equ	0xFF5
  3990                           intcon	equ	0xFF2
  3991                           postinc0	equ	0xFEE
  3992                           wreg	equ	0xFE8
  3993                           postdec1	equ	0xFE5
  3994                           plusw1	equ	0xFE3
  3995                           fsr1l	equ	0xFE1
  3996                           indf2	equ	0xFDF
  3997                           postinc2	equ	0xFDE
  3998                           plusw2	equ	0xFDB
  3999                           fsr2h	equ	0xFDA
  4000                           fsr2l	equ	0xFD9
  4001                           status	equ	0xFD8
  4002                           
  4003 ;; *************** function _terminate_md_uart *****************
  4004 ;; Defined at:
  4005 ;;		line 64 in file "uart.c"
  4006 ;; Parameters:    Size  Location     Type
  4007 ;;		None
  4008 ;; Auto vars:     Size  Location     Type
  4009 ;;		None
  4010 ;; Return value:  Size  Location     Type
  4011 ;;                  1    wreg      void 
  4012 ;; Registers used:
  4013 ;;		None
  4014 ;; Tracked objects:
  4015 ;;		On entry : 0/0
  4016 ;;		On exit  : 0/0
  4017 ;;		Unchanged: 0/0
  4018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4022 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4023 ;;Total ram usage:        0 bytes
  4024 ;; Hardware stack levels used:    1
  4025 ;; Hardware stack levels required when called:    3
  4026 ;; This function calls:
  4027 ;;		Nothing
  4028 ;; This function is called by:
  4029 ;;		_md_uart_write_str_ok
  4030 ;; This function uses a non-reentrant model
  4031 ;;
  4032                           
  4033                           	psect	text11
  4034  001EA2                     __ptext11:
  4035                           	opt stack 0
  4036  001EA2                     _terminate_md_uart:
  4037                           	opt stack 24
  4038                           
  4039                           ;uart.c: 66: RCSTA1bits.SPEN = 0;
  4040                           
  4041                           ;incstack = 0
  4042  001EA2  9EAB               	bcf	4011,7,c	;volatile
  4043                           
  4044                           ;uart.c: 69: TRISCbits.TRISC6 = 0;
  4045  001EA4  9C94               	bcf	3988,6,c	;volatile
  4046                           
  4047                           ;uart.c: 70: PORTCbits.RC6 = 0;
  4048  001EA6  9C82               	bcf	3970,6,c	;volatile
  4049                           
  4050                           ;uart.c: 71: RC1IE = 0;
  4051  001EA8  9A9D               	bcf	3997,5,c	;volatile
  4052  001EAA  0012               	return		;funcret
  4053  001EAC                     __end_of_terminate_md_uart:
  4054                           	opt stack 0
  4055                           tblptru	equ	0xFF8
  4056                           tblptrh	equ	0xFF7
  4057                           tblptrl	equ	0xFF6
  4058                           tablat	equ	0xFF5
  4059                           intcon	equ	0xFF2
  4060                           postinc0	equ	0xFEE
  4061                           wreg	equ	0xFE8
  4062                           postdec1	equ	0xFE5
  4063                           plusw1	equ	0xFE3
  4064                           fsr1l	equ	0xFE1
  4065                           indf2	equ	0xFDF
  4066                           postinc2	equ	0xFDE
  4067                           plusw2	equ	0xFDB
  4068                           fsr2h	equ	0xFDA
  4069                           fsr2l	equ	0xFD9
  4070                           status	equ	0xFD8
  4071                           
  4072 ;; *************** function _reset_retry_count *****************
  4073 ;; Defined at:
  4074 ;;		line 294 in file "modem.c"
  4075 ;; Parameters:    Size  Location     Type
  4076 ;;		None
  4077 ;; Auto vars:     Size  Location     Type
  4078 ;;		None
  4079 ;; Return value:  Size  Location     Type
  4080 ;;                  1    wreg      void 
  4081 ;; Registers used:
  4082 ;;		wreg, status,2, status,0
  4083 ;; Tracked objects:
  4084 ;;		On entry : 0/0
  4085 ;;		On exit  : 0/0
  4086 ;;		Unchanged: 0/0
  4087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4091 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4092 ;;Total ram usage:        0 bytes
  4093 ;; Hardware stack levels used:    1
  4094 ;; Hardware stack levels required when called:    3
  4095 ;; This function calls:
  4096 ;;		Nothing
  4097 ;; This function is called by:
  4098 ;;		_md_uart_write_str_ok
  4099 ;; This function uses a non-reentrant model
  4100 ;;
  4101                           
  4102                           	psect	text12
  4103  001D24                     __ptext12:
  4104                           	opt stack 0
  4105  001D24                     _reset_retry_count:
  4106                           	opt stack 24
  4107                           
  4108                           ;modem.c: 296: switch (md_state)
  4109                           
  4110                           ;incstack = 0
  4111  001D24  D012               	goto	l522
  4112  001D26                     
  4113                           ;modem.c: 300: numRetries = 15;
  4114  001D26  0E0F               	movlw	15
  4115  001D28  6E2B               	movwf	_numRetries,c
  4116                           
  4117                           ;modem.c: 301: break;
  4118  001D2A  0012               	return	
  4119  001D2C                     
  4120                           ;modem.c: 303: numRetries = 20;
  4121  001D2C  0E14               	movlw	20
  4122  001D2E  6E2B               	movwf	_numRetries,c
  4123                           
  4124                           ;modem.c: 304: break;
  4125  001D30  0012               	return	
  4126  001D32                     
  4127                           ;modem.c: 306: numRetries = 20;
  4128  001D32  0E14               	movlw	20
  4129  001D34  6E2B               	movwf	_numRetries,c
  4130                           
  4131                           ;modem.c: 307: break;
  4132  001D36  0012               	return	
  4133  001D38                     
  4134                           ;modem.c: 309: numRetries = 15;
  4135  001D38  0E0F               	movlw	15
  4136  001D3A  6E2B               	movwf	_numRetries,c
  4137                           
  4138                           ;modem.c: 310: break;
  4139  001D3C  0012               	return	
  4140  001D3E                     
  4141                           ;modem.c: 312: numRetries = 15;
  4142  001D3E  0E0F               	movlw	15
  4143  001D40  6E2B               	movwf	_numRetries,c
  4144                           
  4145                           ;modem.c: 313: break;
  4146  001D42  0012               	return	
  4147  001D44                     
  4148                           ;modem.c: 315: numRetries = 15;
  4149  001D44  0E0F               	movlw	15
  4150  001D46  6E2B               	movwf	_numRetries,c
  4151                           
  4152                           ;modem.c: 317: }
  4153                           
  4154                           ;modem.c: 316: break;
  4155  001D48  0012               	return	
  4156  001D4A                     l522:
  4157  001D4A  0100               	movlb	0	; () banked
  4158  001D4C  51D0               	movf	_md_state& (0+255),w,b
  4159                           
  4160                           ; Switch size 1, requested type "space"
  4161                           ; Number of cases is 6, Range of values is 2 to 7
  4162                           ; switch strategies available:
  4163                           ; Name         Instructions Cycles
  4164                           ; simple_byte           19    10 (average)
  4165                           ;	Chosen strategy is simple_byte
  4166  001D4E  0A02               	xorlw	2	; case 2
  4167  001D50  B4D8               	btfsc	status,2,c
  4168  001D52  D7E9               	goto	l523
  4169  001D54  0A01               	xorlw	1	; case 3
  4170  001D56  B4D8               	btfsc	status,2,c
  4171  001D58  D7E9               	goto	l525
  4172  001D5A  0A07               	xorlw	7	; case 4
  4173  001D5C  B4D8               	btfsc	status,2,c
  4174  001D5E  D7E9               	goto	l526
  4175  001D60  0A01               	xorlw	1	; case 5
  4176  001D62  B4D8               	btfsc	status,2,c
  4177  001D64  D7E9               	goto	l527
  4178  001D66  0A03               	xorlw	3	; case 6
  4179  001D68  B4D8               	btfsc	status,2,c
  4180  001D6A  D7E9               	goto	l528
  4181  001D6C  0A01               	xorlw	1	; case 7
  4182  001D6E  A4D8               	btfss	status,2,c
  4183  001D70  0012               	return	
  4184  001D72  D7E8               	goto	l529
  4185  001D74                     __end_of_reset_retry_count:
  4186                           	opt stack 0
  4187                           tblptru	equ	0xFF8
  4188                           tblptrh	equ	0xFF7
  4189                           tblptrl	equ	0xFF6
  4190                           tablat	equ	0xFF5
  4191                           intcon	equ	0xFF2
  4192                           postinc0	equ	0xFEE
  4193                           wreg	equ	0xFE8
  4194                           postdec1	equ	0xFE5
  4195                           plusw1	equ	0xFE3
  4196                           fsr1l	equ	0xFE1
  4197                           indf2	equ	0xFDF
  4198                           postinc2	equ	0xFDE
  4199                           plusw2	equ	0xFDB
  4200                           fsr2h	equ	0xFDA
  4201                           fsr2l	equ	0xFD9
  4202                           status	equ	0xFD8
  4203                           
  4204 ;; *************** function _reload_tmr3_1s *****************
  4205 ;; Defined at:
  4206 ;;		line 194 in file "main.c"
  4207 ;; Parameters:    Size  Location     Type
  4208 ;;		None
  4209 ;; Auto vars:     Size  Location     Type
  4210 ;;		None
  4211 ;; Return value:  Size  Location     Type
  4212 ;;                  1    wreg      void 
  4213 ;; Registers used:
  4214 ;;		None
  4215 ;; Tracked objects:
  4216 ;;		On entry : 0/0
  4217 ;;		On exit  : 0/0
  4218 ;;		Unchanged: 0/0
  4219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4223 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4224 ;;Total ram usage:        0 bytes
  4225 ;; Hardware stack levels used:    1
  4226 ;; Hardware stack levels required when called:    3
  4227 ;; This function calls:
  4228 ;;		Nothing
  4229 ;; This function is called by:
  4230 ;;		_md_uart_write_str_ok
  4231 ;;		_start_md_boot_timer
  4232 ;; This function uses a non-reentrant model
  4233 ;;
  4234                           
  4235                           	psect	text13
  4236  001EBC                     __ptext13:
  4237                           	opt stack 0
  4238  001EBC                     _reload_tmr3_1s:
  4239                           	opt stack 25
  4240                           
  4241                           ;main.c: 196: T3CONbits.TMR3ON = 1;
  4242                           
  4243                           ;incstack = 0
  4244  001EBC  80B1               	bsf	4017,0,c	;volatile
  4245  001EBE  0012               	return		;funcret
  4246  001EC0                     __end_of_reload_tmr3_1s:
  4247                           	opt stack 0
  4248                           tblptru	equ	0xFF8
  4249                           tblptrh	equ	0xFF7
  4250                           tblptrl	equ	0xFF6
  4251                           tablat	equ	0xFF5
  4252                           intcon	equ	0xFF2
  4253                           postinc0	equ	0xFEE
  4254                           wreg	equ	0xFE8
  4255                           postdec1	equ	0xFE5
  4256                           plusw1	equ	0xFE3
  4257                           fsr1l	equ	0xFE1
  4258                           indf2	equ	0xFDF
  4259                           postinc2	equ	0xFDE
  4260                           plusw2	equ	0xFDB
  4261                           fsr2h	equ	0xFDA
  4262                           fsr2l	equ	0xFD9
  4263                           status	equ	0xFD8
  4264                           
  4265 ;; *************** function _md_uart_send *****************
  4266 ;; Defined at:
  4267 ;;		line 380 in file "uart.c"
  4268 ;; Parameters:    Size  Location     Type
  4269 ;;  data            1    wreg     unsigned char 
  4270 ;; Auto vars:     Size  Location     Type
  4271 ;;  data            1    0[BANK0 ] unsigned char 
  4272 ;; Return value:  Size  Location     Type
  4273 ;;                  1    wreg      void 
  4274 ;; Registers used:
  4275 ;;		wreg
  4276 ;; Tracked objects:
  4277 ;;		On entry : 0/0
  4278 ;;		On exit  : 0/0
  4279 ;;		Unchanged: 0/0
  4280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4282 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4284 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4285 ;;Total ram usage:        1 bytes
  4286 ;; Hardware stack levels used:    1
  4287 ;; Hardware stack levels required when called:    3
  4288 ;; This function calls:
  4289 ;;		Nothing
  4290 ;; This function is called by:
  4291 ;;		_md_uart_write_str_ok
  4292 ;; This function uses a non-reentrant model
  4293 ;;
  4294                           
  4295                           	psect	text14
  4296  001E88                     __ptext14:
  4297                           	opt stack 0
  4298  001E88                     _md_uart_send:
  4299                           	opt stack 24
  4300                           
  4301                           ;incstack = 0
  4302                           ;md_uart_send@data stored from wreg
  4303  001E88  0100               	movlb	0	; () banked
  4304  001E8A  6F60               	movwf	md_uart_send@data& (0+255),b
  4305  001E8C                     
  4306                           ;uart.c: 383: while (!TRMT1);
  4307  001E8C  A2AC               	btfss	4012,1,c	;volatile
  4308  001E8E  D7FE               	goto	l2736
  4309                           
  4310                           ;uart.c: 384: TX1REG = data;
  4311  001E90  C060  FFAD         	movff	md_uart_send@data,4013	;volatile
  4312  001E94  0012               	return		;funcret
  4313  001E96                     __end_of_md_uart_send:
  4314                           	opt stack 0
  4315                           tblptru	equ	0xFF8
  4316                           tblptrh	equ	0xFF7
  4317                           tblptrl	equ	0xFF6
  4318                           tablat	equ	0xFF5
  4319                           intcon	equ	0xFF2
  4320                           postinc0	equ	0xFEE
  4321                           wreg	equ	0xFE8
  4322                           postdec1	equ	0xFE5
  4323                           plusw1	equ	0xFE3
  4324                           fsr1l	equ	0xFE1
  4325                           indf2	equ	0xFDF
  4326                           postinc2	equ	0xFDE
  4327                           plusw2	equ	0xFDB
  4328                           fsr2h	equ	0xFDA
  4329                           fsr2l	equ	0xFD9
  4330                           status	equ	0xFD8
  4331                           
  4332 ;; *************** function _init_md_uart *****************
  4333 ;; Defined at:
  4334 ;;		line 12 in file "uart.c"
  4335 ;; Parameters:    Size  Location     Type
  4336 ;;		None
  4337 ;; Auto vars:     Size  Location     Type
  4338 ;;		None
  4339 ;; Return value:  Size  Location     Type
  4340 ;;                  1    wreg      void 
  4341 ;; Registers used:
  4342 ;;		wreg, status,2
  4343 ;; Tracked objects:
  4344 ;;		On entry : 0/0
  4345 ;;		On exit  : 0/0
  4346 ;;		Unchanged: 0/0
  4347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4351 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4352 ;;Total ram usage:        0 bytes
  4353 ;; Hardware stack levels used:    1
  4354 ;; Hardware stack levels required when called:    3
  4355 ;; This function calls:
  4356 ;;		Nothing
  4357 ;; This function is called by:
  4358 ;;		_md_uart_write_str_ok
  4359 ;; This function uses a non-reentrant model
  4360 ;;
  4361                           
  4362                           	psect	text15
  4363  001E2C                     __ptext15:
  4364                           	opt stack 0
  4365  001E2C                     _init_md_uart:
  4366                           	opt stack 24
  4367                           
  4368                           ;uart.c: 14: BAUDCON1bits.BRG16 = 1;
  4369                           
  4370                           ;incstack = 0
  4371  001E2C  86B8               	bsf	4024,3,c	;volatile
  4372                           
  4373                           ;uart.c: 15: BAUDCON1bits.RCIDL = 1;
  4374  001E2E  8CB8               	bsf	4024,6,c	;volatile
  4375                           
  4376                           ;uart.c: 16: BAUDCONbits.CKTXP = 0;
  4377  001E30  98B8               	bcf	4024,4,c	;volatile
  4378                           
  4379                           ;uart.c: 17: BAUDCONbits.WUE = 0;
  4380  001E32  92B8               	bcf	4024,1,c	;volatile
  4381                           
  4382                           ;uart.c: 18: BAUDCONbits.ABDEN = 0;
  4383  001E34  90B8               	bcf	4024,0,c	;volatile
  4384                           
  4385                           ;uart.c: 19: TXSTA1bits.BRGH = 1;
  4386  001E36  84AC               	bsf	4012,2,c	;volatile
  4387                           
  4388                           ;uart.c: 20: TXSTA1bits.SYNC = 0;
  4389  001E38  98AC               	bcf	4012,4,c	;volatile
  4390                           
  4391                           ;uart.c: 21: SPBRGH1 = 0;
  4392  001E3A  0E00               	movlw	0
  4393  001E3C  6EB0               	movwf	4016,c	;volatile
  4394                           
  4395                           ;uart.c: 22: SPBRG1 = 16;
  4396  001E3E  0E10               	movlw	16
  4397  001E40  6EAF               	movwf	4015,c	;volatile
  4398                           
  4399                           ;uart.c: 24: RC1STAbits.SPEN = 1;
  4400  001E42  8EAB               	bsf	4011,7,c	;volatile
  4401                           
  4402                           ;uart.c: 25: TRISCbits.TRISC7 = 1;
  4403  001E44  8E94               	bsf	3988,7,c	;volatile
  4404                           
  4405                           ;uart.c: 26: TRISCbits.TRISC6 = 0;
  4406  001E46  9C94               	bcf	3988,6,c	;volatile
  4407                           
  4408                           ;uart.c: 29: RCSTA1bits.CREN = 0;
  4409  001E48  98AB               	bcf	4011,4,c	;volatile
  4410                           
  4411                           ;uart.c: 30: TXSTA1bits.TXEN = 1;
  4412  001E4A  8AAC               	bsf	4012,5,c	;volatile
  4413  001E4C  0012               	return		;funcret
  4414  001E4E                     __end_of_init_md_uart:
  4415                           	opt stack 0
  4416                           tblptru	equ	0xFF8
  4417                           tblptrh	equ	0xFF7
  4418                           tblptrl	equ	0xFF6
  4419                           tablat	equ	0xFF5
  4420                           intcon	equ	0xFF2
  4421                           postinc0	equ	0xFEE
  4422                           wreg	equ	0xFE8
  4423                           postdec1	equ	0xFE5
  4424                           plusw1	equ	0xFE3
  4425                           fsr1l	equ	0xFE1
  4426                           indf2	equ	0xFDF
  4427                           postinc2	equ	0xFDE
  4428                           plusw2	equ	0xFDB
  4429                           fsr2h	equ	0xFDA
  4430                           fsr2l	equ	0xFD9
  4431                           status	equ	0xFD8
  4432                           
  4433 ;; *************** function _enable_md_rxint *****************
  4434 ;; Defined at:
  4435 ;;		line 44 in file "uart.c"
  4436 ;; Parameters:    Size  Location     Type
  4437 ;;		None
  4438 ;; Auto vars:     Size  Location     Type
  4439 ;;		None
  4440 ;; Return value:  Size  Location     Type
  4441 ;;                  1    wreg      void 
  4442 ;; Registers used:
  4443 ;;		wreg, status,2
  4444 ;; Tracked objects:
  4445 ;;		On entry : 0/0
  4446 ;;		On exit  : 0/0
  4447 ;;		Unchanged: 0/0
  4448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4452 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4453 ;;Total ram usage:        0 bytes
  4454 ;; Hardware stack levels used:    1
  4455 ;; Hardware stack levels required when called:    3
  4456 ;; This function calls:
  4457 ;;		Nothing
  4458 ;; This function is called by:
  4459 ;;		_md_uart_write_str_ok
  4460 ;; This function uses a non-reentrant model
  4461 ;;
  4462                           
  4463                           	psect	text16
  4464  001E76                     __ptext16:
  4465                           	opt stack 0
  4466  001E76                     _enable_md_rxint:
  4467                           	opt stack 24
  4468                           
  4469                           ;uart.c: 46: GIE = 0;
  4470                           
  4471                           ;incstack = 0
  4472  001E76  9EF2               	bcf	intcon,7,c	;volatile
  4473                           
  4474                           ;uart.c: 47: PIE1bits.RC1IE = 1;
  4475  001E78  8A9D               	bsf	3997,5,c	;volatile
  4476                           
  4477                           ;uart.c: 48: PIR1bits.RC1IF = 0;
  4478  001E7A  9A9E               	bcf	3998,5,c	;volatile
  4479                           
  4480                           ;uart.c: 49: INTCONbits.PEIE = 1;
  4481  001E7C  8CF2               	bsf	intcon,6,c	;volatile
  4482                           
  4483                           ;uart.c: 50: CREN1 = 1;
  4484  001E7E  88AB               	bsf	4011,4,c	;volatile
  4485                           
  4486                           ;uart.c: 51: endPtr = 0;
  4487  001E80  0E00               	movlw	0
  4488  001E82  6E50               	movwf	_endPtr,c
  4489                           
  4490                           ;uart.c: 52: GIE = 1;
  4491  001E84  8EF2               	bsf	intcon,7,c	;volatile
  4492  001E86  0012               	return		;funcret
  4493  001E88                     __end_of_enable_md_rxint:
  4494                           	opt stack 0
  4495                           tblptru	equ	0xFF8
  4496                           tblptrh	equ	0xFF7
  4497                           tblptrl	equ	0xFF6
  4498                           tablat	equ	0xFF5
  4499                           intcon	equ	0xFF2
  4500                           postinc0	equ	0xFEE
  4501                           wreg	equ	0xFE8
  4502                           postdec1	equ	0xFE5
  4503                           plusw1	equ	0xFE3
  4504                           fsr1l	equ	0xFE1
  4505                           indf2	equ	0xFDF
  4506                           postinc2	equ	0xFDE
  4507                           plusw2	equ	0xFDB
  4508                           fsr2h	equ	0xFDA
  4509                           fsr2l	equ	0xFD9
  4510                           status	equ	0xFD8
  4511                           
  4512 ;; *************** function _disable_tmr3 *****************
  4513 ;; Defined at:
  4514 ;;		line 199 in file "main.c"
  4515 ;; Parameters:    Size  Location     Type
  4516 ;;		None
  4517 ;; Auto vars:     Size  Location     Type
  4518 ;;		None
  4519 ;; Return value:  Size  Location     Type
  4520 ;;                  1    wreg      void 
  4521 ;; Registers used:
  4522 ;;		wreg, status,2
  4523 ;; Tracked objects:
  4524 ;;		On entry : 0/0
  4525 ;;		On exit  : 0/0
  4526 ;;		Unchanged: 0/0
  4527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4529 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4531 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4532 ;;Total ram usage:        0 bytes
  4533 ;; Hardware stack levels used:    1
  4534 ;; Hardware stack levels required when called:    3
  4535 ;; This function calls:
  4536 ;;		Nothing
  4537 ;; This function is called by:
  4538 ;;		_md_uart_write_str_ok
  4539 ;; This function uses a non-reentrant model
  4540 ;;
  4541                           
  4542                           	psect	text17
  4543  001E4E                     __ptext17:
  4544                           	opt stack 0
  4545  001E4E                     _disable_tmr3:
  4546                           	opt stack 24
  4547                           
  4548                           ;main.c: 201: tmr3_cnt = 0;
  4549                           
  4550                           ;incstack = 0
  4551  001E4E  0E00               	movlw	0
  4552  001E50  6E44               	movwf	_tmr3_cnt,c
  4553  001E52  0E00               	movlw	0
  4554  001E54  6E45               	movwf	_tmr3_cnt+1,c
  4555  001E56  0E00               	movlw	0
  4556  001E58  6E46               	movwf	_tmr3_cnt+2,c
  4557  001E5A  0E00               	movlw	0
  4558  001E5C  6E47               	movwf	_tmr3_cnt+3,c
  4559                           
  4560                           ;main.c: 202: T3CONbits.TMR3ON = 0;
  4561  001E5E  90B1               	bcf	4017,0,c	;volatile
  4562  001E60  0012               	return		;funcret
  4563  001E62                     __end_of_disable_tmr3:
  4564                           	opt stack 0
  4565                           tblptru	equ	0xFF8
  4566                           tblptrh	equ	0xFF7
  4567                           tblptrl	equ	0xFF6
  4568                           tablat	equ	0xFF5
  4569                           intcon	equ	0xFF2
  4570                           postinc0	equ	0xFEE
  4571                           wreg	equ	0xFE8
  4572                           postdec1	equ	0xFE5
  4573                           plusw1	equ	0xFE3
  4574                           fsr1l	equ	0xFE1
  4575                           indf2	equ	0xFDF
  4576                           postinc2	equ	0xFDE
  4577                           plusw2	equ	0xFDB
  4578                           fsr2h	equ	0xFDA
  4579                           fsr2l	equ	0xFD9
  4580                           status	equ	0xFD8
  4581                           
  4582 ;; *************** function _isr *****************
  4583 ;; Defined at:
  4584 ;;		line 15 in file "main.c"
  4585 ;; Parameters:    Size  Location     Type
  4586 ;;		None
  4587 ;; Auto vars:     Size  Location     Type
  4588 ;;		None
  4589 ;; Return value:  Size  Location     Type
  4590 ;;                  1    wreg      void 
  4591 ;; Registers used:
  4592 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4593 ;; Tracked objects:
  4594 ;;		On entry : 0/0
  4595 ;;		On exit  : 0/0
  4596 ;;		Unchanged: 0/0
  4597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4600 ;;      Temps:         23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4601 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4602 ;;Total ram usage:       23 bytes
  4603 ;; Hardware stack levels used:    1
  4604 ;; Hardware stack levels required when called:    2
  4605 ;; This function calls:
  4606 ;;		_check_mdstate_tmr3
  4607 ;;		_disable_md_rxint
  4608 ;;		i2_disable_tmr3
  4609 ;; This function is called by:
  4610 ;;		Interrupt level 2
  4611 ;; This function uses a non-reentrant model
  4612 ;;
  4613                           
  4614                           	psect	intcode
  4615  000008                     __pintcode:
  4616                           	opt stack 0
  4617  000008                     _isr:
  4618                           	opt stack 23
  4619                           
  4620                           ;incstack = 0
  4621  000008  8255               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4622  00000A  CFFA F032          	movff	pclath,??_isr+5
  4623  00000E  CFFB F033          	movff	pclatu,??_isr+6
  4624  000012  CFE9 F034          	movff	fsr0l,??_isr+7
  4625  000016  CFEA F035          	movff	fsr0h,??_isr+8
  4626  00001A  CFE1 F036          	movff	fsr1l,??_isr+9
  4627  00001E  CFE2 F037          	movff	fsr1h,??_isr+10
  4628  000022  CFD9 F038          	movff	fsr2l,??_isr+11
  4629  000026  CFDA F039          	movff	fsr2h,??_isr+12
  4630  00002A  CFF3 F03A          	movff	prodl,??_isr+13
  4631  00002E  CFF4 F03B          	movff	prodh,??_isr+14
  4632  000032  CFF6 F03C          	movff	tblptrl,??_isr+15
  4633  000036  CFF7 F03D          	movff	tblptrh,??_isr+16
  4634  00003A  CFF8 F03E          	movff	tblptru,??_isr+17
  4635  00003E  CFF5 F03F          	movff	tablat,??_isr+18
  4636  000042  C055  F040         	movff	btemp,??_isr+19
  4637  000046  C056  F041         	movff	btemp+1,??_isr+20
  4638  00004A  C057  F042         	movff	btemp+2,??_isr+21
  4639  00004E  C058  F043         	movff	btemp+3,??_isr+22
  4640                           
  4641                           ;main.c: 17: if (RC1IF && PIE1bits.RCIE)
  4642  000052  BA9E               	btfsc	3998,5,c	;volatile
  4643  000054  AA9D               	btfss	3997,5,c	;volatile
  4644  000056  D0D5               	goto	i2l130
  4645                           
  4646                           ;main.c: 18: {
  4647                           ;main.c: 19: RC1IF = 0;
  4648  000058  9A9E               	bcf	3998,5,c	;volatile
  4649                           
  4650                           ;main.c: 20: currentChar = RC1REG;
  4651  00005A  CFAE F049          	movff	4014,_currentChar	;volatile
  4652                           
  4653                           ;main.c: 21: mdRxBuf[endPtr++] = currentChar;
  4654  00005E  5050               	movf	_endPtr,w,c
  4655  000060  0D01               	mullw	1
  4656  000062  0E77               	movlw	low _mdRxBuf
  4657  000064  24F3               	addwf	prodl,w,c
  4658  000066  6ED9               	movwf	fsr2l,c
  4659  000068  0E01               	movlw	high _mdRxBuf
  4660  00006A  20F4               	addwfc	prodh,w,c
  4661  00006C  6EDA               	movwf	fsr2h,c
  4662  00006E  C049  FFDF         	movff	_currentChar,indf2
  4663  000072  2A50               	incf	_endPtr,f,c
  4664                           
  4665                           ;main.c: 22: if (endPtr >= sizeof(mdRxBuf))
  4666  000074  0E63               	movlw	99
  4667  000076  6450               	cpfsgt	_endPtr,c
  4668  000078  D001               	goto	i2l122
  4669                           
  4670                           ;main.c: 23: endPtr--;
  4671  00007A  0650               	decf	_endPtr,f,c
  4672  00007C                     i2l122:
  4673                           
  4674                           ;main.c: 24: if (endPtr > 2)
  4675  00007C  0E02               	movlw	2
  4676  00007E  6450               	cpfsgt	_endPtr,c
  4677  000080  D0AA               	goto	i2l123
  4678                           
  4679                           ;main.c: 25: {
  4680                           ;main.c: 27: if (mdRxBuf[(uint8_t)(endPtr - 3)] == 'O' && mdRxBuf[(uint8_t)(endPtr - 2)]
      +                           == 'K' && (mdRxBuf[(uint8_t)(endPtr - 1)] == '\r' || mdRxBuf[(uint8_t)(endPtr - 1)] == 
      +                          '\n'))
  4681  000082  C050  F02D         	movff	_endPtr,??_isr
  4682  000086  0EFD               	movlw	253
  4683  000088  262D               	addwf	??_isr,f,c
  4684  00008A  502D               	movf	??_isr,w,c
  4685  00008C  0D01               	mullw	1
  4686  00008E  0E77               	movlw	low _mdRxBuf
  4687  000090  24F3               	addwf	prodl,w,c
  4688  000092  6ED9               	movwf	fsr2l,c
  4689  000094  0E01               	movlw	high _mdRxBuf
  4690  000096  20F4               	addwfc	prodh,w,c
  4691  000098  6EDA               	movwf	fsr2h,c
  4692  00009A  0E4F               	movlw	79
  4693  00009C  18DE               	xorwf	postinc2,w,c
  4694  00009E  A4D8               	btfss	status,2,c
  4695  0000A0  D039               	goto	i2l124
  4696  0000A2  C050  F02D         	movff	_endPtr,??_isr
  4697  0000A6  0EFE               	movlw	254
  4698  0000A8  262D               	addwf	??_isr,f,c
  4699  0000AA  502D               	movf	??_isr,w,c
  4700  0000AC  0D01               	mullw	1
  4701  0000AE  0E77               	movlw	low _mdRxBuf
  4702  0000B0  24F3               	addwf	prodl,w,c
  4703  0000B2  6ED9               	movwf	fsr2l,c
  4704  0000B4  0E01               	movlw	high _mdRxBuf
  4705  0000B6  20F4               	addwfc	prodh,w,c
  4706  0000B8  6EDA               	movwf	fsr2h,c
  4707  0000BA  0E4B               	movlw	75
  4708  0000BC  18DE               	xorwf	postinc2,w,c
  4709  0000BE  A4D8               	btfss	status,2,c
  4710  0000C0  D029               	goto	i2l124
  4711  0000C2  C050  F02D         	movff	_endPtr,??_isr
  4712  0000C6  0EFF               	movlw	255
  4713  0000C8  262D               	addwf	??_isr,f,c
  4714  0000CA  502D               	movf	??_isr,w,c
  4715  0000CC  0D01               	mullw	1
  4716  0000CE  0E77               	movlw	low _mdRxBuf
  4717  0000D0  24F3               	addwf	prodl,w,c
  4718  0000D2  6ED9               	movwf	fsr2l,c
  4719  0000D4  0E01               	movlw	high _mdRxBuf
  4720  0000D6  20F4               	addwfc	prodh,w,c
  4721  0000D8  6EDA               	movwf	fsr2h,c
  4722  0000DA  0E0D               	movlw	13
  4723  0000DC  18DE               	xorwf	postinc2,w,c
  4724  0000DE  B4D8               	btfsc	status,2,c
  4725  0000E0  D010               	goto	i2u294_40
  4726  0000E2  C050  F02D         	movff	_endPtr,??_isr
  4727  0000E6  0EFF               	movlw	255
  4728  0000E8  262D               	addwf	??_isr,f,c
  4729  0000EA  502D               	movf	??_isr,w,c
  4730  0000EC  0D01               	mullw	1
  4731  0000EE  0E77               	movlw	low _mdRxBuf
  4732  0000F0  24F3               	addwf	prodl,w,c
  4733  0000F2  6ED9               	movwf	fsr2l,c
  4734  0000F4  0E01               	movlw	high _mdRxBuf
  4735  0000F6  20F4               	addwfc	prodh,w,c
  4736  0000F8  6EDA               	movwf	fsr2h,c
  4737  0000FA  0E0A               	movlw	10
  4738  0000FC  18DE               	xorwf	postinc2,w,c
  4739  0000FE  A4D8               	btfss	status,2,c
  4740  000100  D009               	goto	i2l124
  4741  000102                     i2u294_40:
  4742                           
  4743                           ;main.c: 29: {
  4744                           ;main.c: 32: receivedOK = 1;
  4745  000102  0E01               	movlw	1
  4746  000104  6E4F               	movwf	_receivedOK,c
  4747                           
  4748                           ;main.c: 33: receivedERR = 0;
  4749  000106  0E00               	movlw	0
  4750  000108  6E4E               	movwf	_receivedERR,c
  4751                           
  4752                           ;main.c: 34: timedOut = 0;
  4753  00010A  0E00               	movlw	0
  4754  00010C  6E4B               	movwf	_timedOut,c
  4755                           
  4756                           ;main.c: 35: disable_md_rxint();
  4757  00010E  EC56  F00F         	call	_disable_md_rxint	;wreg free
  4758                           
  4759                           ;main.c: 36: }
  4760  000112  D077               	goto	i2l130
  4761  000114                     i2l124:
  4762                           
  4763                           ;main.c: 37: else if (endPtr >= 5 && mdRxBuf[(uint8_t)(endPtr - 5)] == 'E' && mdRxBuf[(u
      +                          int8_t)(endPtr - 4)] == 'R' && mdRxBuf[(uint8_t)(endPtr - 3)] == 'R' && mdRxBuf[(uint8_t
      +                          )(endPtr - 2)] == 'O' && mdRxBuf[endPtr - 1] == 'R')
  4764  000114  0E04               	movlw	4
  4765  000116  6450               	cpfsgt	_endPtr,c
  4766  000118  D074               	goto	i2l130
  4767  00011A  C050  F02D         	movff	_endPtr,??_isr
  4768  00011E  0EFB               	movlw	251
  4769  000120  262D               	addwf	??_isr,f,c
  4770  000122  502D               	movf	??_isr,w,c
  4771  000124  0D01               	mullw	1
  4772  000126  0E77               	movlw	low _mdRxBuf
  4773  000128  24F3               	addwf	prodl,w,c
  4774  00012A  6ED9               	movwf	fsr2l,c
  4775  00012C  0E01               	movlw	high _mdRxBuf
  4776  00012E  20F4               	addwfc	prodh,w,c
  4777  000130  6EDA               	movwf	fsr2h,c
  4778  000132  0E45               	movlw	69
  4779  000134  18DE               	xorwf	postinc2,w,c
  4780  000136  A4D8               	btfss	status,2,c
  4781  000138  D064               	goto	i2l130
  4782  00013A  C050  F02D         	movff	_endPtr,??_isr
  4783  00013E  0EFC               	movlw	252
  4784  000140  262D               	addwf	??_isr,f,c
  4785  000142  502D               	movf	??_isr,w,c
  4786  000144  0D01               	mullw	1
  4787  000146  0E77               	movlw	low _mdRxBuf
  4788  000148  24F3               	addwf	prodl,w,c
  4789  00014A  6ED9               	movwf	fsr2l,c
  4790  00014C  0E01               	movlw	high _mdRxBuf
  4791  00014E  20F4               	addwfc	prodh,w,c
  4792  000150  6EDA               	movwf	fsr2h,c
  4793  000152  0E52               	movlw	82
  4794  000154  18DE               	xorwf	postinc2,w,c
  4795  000156  A4D8               	btfss	status,2,c
  4796  000158  D054               	goto	i2l130
  4797  00015A  C050  F02D         	movff	_endPtr,??_isr
  4798  00015E  0EFD               	movlw	253
  4799  000160  262D               	addwf	??_isr,f,c
  4800  000162  502D               	movf	??_isr,w,c
  4801  000164  0D01               	mullw	1
  4802  000166  0E77               	movlw	low _mdRxBuf
  4803  000168  24F3               	addwf	prodl,w,c
  4804  00016A  6ED9               	movwf	fsr2l,c
  4805  00016C  0E01               	movlw	high _mdRxBuf
  4806  00016E  20F4               	addwfc	prodh,w,c
  4807  000170  6EDA               	movwf	fsr2h,c
  4808  000172  0E52               	movlw	82
  4809  000174  18DE               	xorwf	postinc2,w,c
  4810  000176  A4D8               	btfss	status,2,c
  4811  000178  D044               	goto	i2l130
  4812  00017A  C050  F02D         	movff	_endPtr,??_isr
  4813  00017E  0EFE               	movlw	254
  4814  000180  262D               	addwf	??_isr,f,c
  4815  000182  502D               	movf	??_isr,w,c
  4816  000184  0D01               	mullw	1
  4817  000186  0E77               	movlw	low _mdRxBuf
  4818  000188  24F3               	addwf	prodl,w,c
  4819  00018A  6ED9               	movwf	fsr2l,c
  4820  00018C  0E01               	movlw	high _mdRxBuf
  4821  00018E  20F4               	addwfc	prodh,w,c
  4822  000190  6EDA               	movwf	fsr2h,c
  4823  000192  0E4F               	movlw	79
  4824  000194  18DE               	xorwf	postinc2,w,c
  4825  000196  A4D8               	btfss	status,2,c
  4826  000198  D034               	goto	i2l130
  4827  00019A  0EFF               	movlw	255
  4828  00019C  6E2D               	movwf	??_isr& (0+255),c
  4829  00019E  0EFF               	movlw	255
  4830  0001A0  6E2E               	movwf	(??_isr+1)& (0+255),c
  4831  0001A2  5050               	movf	_endPtr,w,c
  4832  0001A4  6E2F               	movwf	(??_isr+2)& (0+255),c
  4833  0001A6  6A30               	clrf	(??_isr+3)& (0+255),c
  4834  0001A8  502D               	movf	??_isr,w,c
  4835  0001AA  262F               	addwf	??_isr+2,f,c
  4836  0001AC  502E               	movf	??_isr+1,w,c
  4837  0001AE  2230               	addwfc	??_isr+3,f,c
  4838  0001B0  0E77               	movlw	low _mdRxBuf
  4839  0001B2  242F               	addwf	??_isr+2,w,c
  4840  0001B4  6ED9               	movwf	fsr2l,c
  4841  0001B6  0E01               	movlw	high _mdRxBuf
  4842  0001B8  2030               	addwfc	??_isr+3,w,c
  4843  0001BA  6EDA               	movwf	fsr2h,c
  4844  0001BC  0E52               	movlw	82
  4845  0001BE  18DE               	xorwf	postinc2,w,c
  4846  0001C0  A4D8               	btfss	status,2,c
  4847  0001C2  D01F               	goto	i2l130
  4848                           
  4849                           ;main.c: 40: {
  4850                           ;main.c: 43: receivedOK = 0;
  4851  0001C4  0E00               	movlw	0
  4852  0001C6  6E4F               	movwf	_receivedOK,c
  4853                           
  4854                           ;main.c: 44: receivedERR = 1;
  4855  0001C8  0E01               	movlw	1
  4856  0001CA  6E4E               	movwf	_receivedERR,c
  4857                           
  4858                           ;main.c: 45: timedOut = 0;
  4859  0001CC  0E00               	movlw	0
  4860  0001CE  6E4B               	movwf	_timedOut,c
  4861                           
  4862                           ;main.c: 46: disable_md_rxint();
  4863  0001D0  EC56  F00F         	call	_disable_md_rxint	;wreg free
  4864                           
  4865                           ;main.c: 47: }
  4866                           ;main.c: 48: }
  4867  0001D4  D016               	goto	i2l130
  4868  0001D6                     i2l123:
  4869                           
  4870                           ;main.c: 49: else if (currentChar == '>')
  4871  0001D6  0E3E               	movlw	62
  4872  0001D8  1849               	xorwf	_currentChar,w,c
  4873  0001DA  A4D8               	btfss	status,2,c
  4874  0001DC  D012               	goto	i2l130
  4875                           
  4876                           ;main.c: 50: {
  4877                           ;main.c: 51: tmr3_cnt = 0;
  4878  0001DE  0E00               	movlw	0
  4879  0001E0  6E44               	movwf	_tmr3_cnt,c
  4880  0001E2  0E00               	movlw	0
  4881  0001E4  6E45               	movwf	_tmr3_cnt+1,c
  4882  0001E6  0E00               	movlw	0
  4883  0001E8  6E46               	movwf	_tmr3_cnt+2,c
  4884  0001EA  0E00               	movlw	0
  4885  0001EC  6E47               	movwf	_tmr3_cnt+3,c
  4886                           
  4887                           ;main.c: 52: disable_tmr3();
  4888  0001EE  EC31  F00F         	call	i2_disable_tmr3	;wreg free
  4889                           
  4890                           ;main.c: 53: disable_md_rxint();
  4891  0001F2  EC56  F00F         	call	_disable_md_rxint	;wreg free
  4892                           
  4893                           ;main.c: 54: receivedOK = 0;
  4894  0001F6  0E00               	movlw	0
  4895  0001F8  6E4F               	movwf	_receivedOK,c
  4896                           
  4897                           ;main.c: 55: receivedERR = 0;
  4898  0001FA  0E00               	movlw	0
  4899  0001FC  6E4E               	movwf	_receivedERR,c
  4900                           
  4901                           ;main.c: 56: receivedCarat = 1;
  4902  0001FE  0E01               	movlw	1
  4903  000200  6E4C               	movwf	_receivedCarat,c
  4904  000202                     i2l130:
  4905                           
  4906                           ;main.c: 57: }
  4907                           ;main.c: 58: }
  4908                           ;main.c: 60: if (TMR3IF)
  4909  000202  A2A1               	btfss	4001,1,c	;volatile
  4910  000204  D009               	goto	i2l131
  4911                           
  4912                           ;main.c: 61: {
  4913                           ;main.c: 63: tmr3_cnt++;
  4914  000206  0E01               	movlw	1
  4915  000208  2644               	addwf	_tmr3_cnt,f,c
  4916  00020A  0E00               	movlw	0
  4917  00020C  2245               	addwfc	_tmr3_cnt+1,f,c
  4918  00020E  2246               	addwfc	_tmr3_cnt+2,f,c
  4919  000210  2247               	addwfc	_tmr3_cnt+3,f,c
  4920                           
  4921                           ;main.c: 64: TMR3IF = 0;
  4922  000212  92A1               	bcf	4001,1,c	;volatile
  4923                           
  4924                           ;main.c: 66: check_mdstate_tmr3();
  4925  000214  ECD3  F00B         	call	_check_mdstate_tmr3	;wreg free
  4926  000218                     i2l131:
  4927  000218  C043  F058         	movff	??_isr+22,btemp+3
  4928  00021C  C042  F057         	movff	??_isr+21,btemp+2
  4929  000220  C041  F056         	movff	??_isr+20,btemp+1
  4930  000224  C040  F055         	movff	??_isr+19,btemp
  4931  000228  C03F  FFF5         	movff	??_isr+18,tablat
  4932  00022C  C03E  FFF8         	movff	??_isr+17,tblptru
  4933  000230  C03D  FFF7         	movff	??_isr+16,tblptrh
  4934  000234  C03C  FFF6         	movff	??_isr+15,tblptrl
  4935  000238  C03B  FFF4         	movff	??_isr+14,prodh
  4936  00023C  C03A  FFF3         	movff	??_isr+13,prodl
  4937  000240  C039  FFDA         	movff	??_isr+12,fsr2h
  4938  000244  C038  FFD9         	movff	??_isr+11,fsr2l
  4939  000248  C037  FFE2         	movff	??_isr+10,fsr1h
  4940  00024C  C036  FFE1         	movff	??_isr+9,fsr1l
  4941  000250  C035  FFEA         	movff	??_isr+8,fsr0h
  4942  000254  C034  FFE9         	movff	??_isr+7,fsr0l
  4943  000258  C033  FFFB         	movff	??_isr+6,pclatu
  4944  00025C  C032  FFFA         	movff	??_isr+5,pclath
  4945  000260  9255               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4946  000262  0011               	retfie		f
  4947  000264                     __end_of_isr:
  4948                           	opt stack 0
  4949                           pclatu	equ	0xFFB
  4950                           pclath	equ	0xFFA
  4951                           tblptru	equ	0xFF8
  4952                           tblptrh	equ	0xFF7
  4953                           tblptrl	equ	0xFF6
  4954                           tablat	equ	0xFF5
  4955                           prodh	equ	0xFF4
  4956                           prodl	equ	0xFF3
  4957                           intcon	equ	0xFF2
  4958                           postinc0	equ	0xFEE
  4959                           fsr0h	equ	0xFEA
  4960                           fsr0l	equ	0xFE9
  4961                           wreg	equ	0xFE8
  4962                           postdec1	equ	0xFE5
  4963                           plusw1	equ	0xFE3
  4964                           fsr1h	equ	0xFE2
  4965                           fsr1l	equ	0xFE1
  4966                           indf2	equ	0xFDF
  4967                           postinc2	equ	0xFDE
  4968                           plusw2	equ	0xFDB
  4969                           fsr2h	equ	0xFDA
  4970                           fsr2l	equ	0xFD9
  4971                           status	equ	0xFD8
  4972                           
  4973 ;; *************** function _disable_md_rxint *****************
  4974 ;; Defined at:
  4975 ;;		line 55 in file "uart.c"
  4976 ;; Parameters:    Size  Location     Type
  4977 ;;		None
  4978 ;; Auto vars:     Size  Location     Type
  4979 ;;		None
  4980 ;; Return value:  Size  Location     Type
  4981 ;;                  1    wreg      void 
  4982 ;; Registers used:
  4983 ;;		None
  4984 ;; Tracked objects:
  4985 ;;		On entry : 0/0
  4986 ;;		On exit  : 0/0
  4987 ;;		Unchanged: 0/0
  4988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4992 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4993 ;;Total ram usage:        0 bytes
  4994 ;; Hardware stack levels used:    1
  4995 ;; This function calls:
  4996 ;;		Nothing
  4997 ;; This function is called by:
  4998 ;;		_isr
  4999 ;; This function uses a non-reentrant model
  5000 ;;
  5001                           
  5002                           	psect	text19
  5003  001EAC                     __ptext19:
  5004                           	opt stack 0
  5005  001EAC                     _disable_md_rxint:
  5006                           	opt stack 24
  5007                           
  5008                           ;uart.c: 57: CREN1 = 0;
  5009                           
  5010                           ;incstack = 0
  5011  001EAC  98AB               	bcf	4011,4,c	;volatile
  5012                           
  5013                           ;uart.c: 58: GIE = 0;
  5014  001EAE  9EF2               	bcf	intcon,7,c	;volatile
  5015                           
  5016                           ;uart.c: 59: PIE1bits.RC1IE = 0;
  5017  001EB0  9A9D               	bcf	3997,5,c	;volatile
  5018                           
  5019                           ;uart.c: 60: GIE = 1;
  5020  001EB2  8EF2               	bsf	intcon,7,c	;volatile
  5021  001EB4  0012               	return		;funcret
  5022  001EB6                     __end_of_disable_md_rxint:
  5023                           	opt stack 0
  5024                           pclatu	equ	0xFFB
  5025                           pclath	equ	0xFFA
  5026                           tblptru	equ	0xFF8
  5027                           tblptrh	equ	0xFF7
  5028                           tblptrl	equ	0xFF6
  5029                           tablat	equ	0xFF5
  5030                           prodh	equ	0xFF4
  5031                           prodl	equ	0xFF3
  5032                           intcon	equ	0xFF2
  5033                           postinc0	equ	0xFEE
  5034                           fsr0h	equ	0xFEA
  5035                           fsr0l	equ	0xFE9
  5036                           wreg	equ	0xFE8
  5037                           postdec1	equ	0xFE5
  5038                           plusw1	equ	0xFE3
  5039                           fsr1h	equ	0xFE2
  5040                           fsr1l	equ	0xFE1
  5041                           indf2	equ	0xFDF
  5042                           postinc2	equ	0xFDE
  5043                           plusw2	equ	0xFDB
  5044                           fsr2h	equ	0xFDA
  5045                           fsr2l	equ	0xFD9
  5046                           status	equ	0xFD8
  5047                           
  5048 ;; *************** function _check_mdstate_tmr3 *****************
  5049 ;; Defined at:
  5050 ;;		line 207 in file "main.c"
  5051 ;; Parameters:    Size  Location     Type
  5052 ;;		None
  5053 ;; Auto vars:     Size  Location     Type
  5054 ;;		None
  5055 ;; Return value:  Size  Location     Type
  5056 ;;                  1    wreg      void 
  5057 ;; Registers used:
  5058 ;;		wreg, status,2, status,0, cstack
  5059 ;; Tracked objects:
  5060 ;;		On entry : 0/0
  5061 ;;		On exit  : 0/0
  5062 ;;		Unchanged: 0/0
  5063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5066 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5067 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5068 ;;Total ram usage:        1 bytes
  5069 ;; Hardware stack levels used:    1
  5070 ;; Hardware stack levels required when called:    1
  5071 ;; This function calls:
  5072 ;;		i2_disable_tmr3
  5073 ;; This function is called by:
  5074 ;;		_isr
  5075 ;; This function uses a non-reentrant model
  5076 ;;
  5077                           
  5078                           	psect	text20
  5079  0017A6                     __ptext20:
  5080                           	opt stack 0
  5081  0017A6                     _check_mdstate_tmr3:
  5082                           	opt stack 23
  5083                           
  5084                           ;main.c: 209: switch (md_state)
  5085                           
  5086                           ;incstack = 0
  5087  0017A6  D089               	goto	i2l157
  5088  0017A8                     
  5089                           ;main.c: 213: PORTBbits.RB3 = (bool)(tmr3_cnt % 2);
  5090  0017A8  C044  F02C         	movff	_tmr3_cnt,??_check_mdstate_tmr3
  5091  0017AC  0E01               	movlw	1
  5092  0017AE  162C               	andwf	??_check_mdstate_tmr3,f,c
  5093  0017B0  462C               	rlncf	??_check_mdstate_tmr3,f,c
  5094  0017B2  462C               	rlncf	??_check_mdstate_tmr3,f,c
  5095  0017B4  462C               	rlncf	??_check_mdstate_tmr3,f,c
  5096  0017B6  5081               	movf	3969,w,c	;volatile
  5097  0017B8  182C               	xorwf	??_check_mdstate_tmr3,w,c
  5098  0017BA  0BF7               	andlw	-9
  5099  0017BC  182C               	xorwf	??_check_mdstate_tmr3,w,c
  5100  0017BE  6E81               	movwf	3969,c	;volatile
  5101                           
  5102                           ;main.c: 214: if (tmr3_cnt >= (15*1))
  5103  0017C0  5047               	movf	_tmr3_cnt+3,w,c
  5104  0017C2  1046               	iorwf	_tmr3_cnt+2,w,c
  5105  0017C4  1045               	iorwf	_tmr3_cnt+1,w,c
  5106  0017C6  E104               	bnz	i2u277_40
  5107  0017C8  0E0F               	movlw	15
  5108  0017CA  5C44               	subwf	_tmr3_cnt,w,c
  5109  0017CC  A0D8               	btfss	status,0,c
  5110  0017CE  0012               	return	
  5111  0017D0                     i2u277_40:
  5112                           
  5113                           ;main.c: 215: {
  5114                           ;main.c: 216: disable_tmr3();
  5115  0017D0  EC31  F00F         	call	i2_disable_tmr3	;wreg free
  5116                           
  5117                           ;main.c: 217: tmr3_cnt = 0;
  5118  0017D4  0E00               	movlw	0
  5119  0017D6  6E44               	movwf	_tmr3_cnt,c
  5120  0017D8  0E00               	movlw	0
  5121  0017DA  6E45               	movwf	_tmr3_cnt+1,c
  5122  0017DC  0E00               	movlw	0
  5123  0017DE  6E46               	movwf	_tmr3_cnt+2,c
  5124  0017E0  0E00               	movlw	0
  5125  0017E2  6E47               	movwf	_tmr3_cnt+3,c
  5126                           
  5127                           ;main.c: 218: receivedOK = 0;
  5128  0017E4  0E00               	movlw	0
  5129  0017E6  6E4F               	movwf	_receivedOK,c
  5130                           
  5131                           ;main.c: 219: timedOut = 1;
  5132  0017E8  0E01               	movlw	1
  5133  0017EA  6E4B               	movwf	_timedOut,c
  5134                           
  5135                           ;main.c: 220: }
  5136                           ;main.c: 221: break;
  5137  0017EC  0012               	return	
  5138  0017EE                     
  5139                           ;main.c: 225: PORTCbits.RC4 = (bool)(tmr3_cnt % 2);
  5140  0017EE  C044  F02C         	movff	_tmr3_cnt,??_check_mdstate_tmr3
  5141  0017F2  0E01               	movlw	1
  5142  0017F4  162C               	andwf	??_check_mdstate_tmr3,f,c
  5143  0017F6  3A2C               	swapf	??_check_mdstate_tmr3,f,c
  5144  0017F8  5082               	movf	3970,w,c	;volatile
  5145  0017FA  182C               	xorwf	??_check_mdstate_tmr3,w,c
  5146  0017FC  0BEF               	andlw	-17
  5147  0017FE  182C               	xorwf	??_check_mdstate_tmr3,w,c
  5148  001800  6E82               	movwf	3970,c	;volatile
  5149                           
  5150                           ;main.c: 226: if (tmr3_cnt >= (15*45))
  5151  001802  5047               	movf	_tmr3_cnt+3,w,c
  5152  001804  1046               	iorwf	_tmr3_cnt+2,w,c
  5153  001806  E106               	bnz	i2u278_40
  5154  001808  0EA3               	movlw	163
  5155  00180A  5C44               	subwf	_tmr3_cnt,w,c
  5156  00180C  0E02               	movlw	2
  5157  00180E  5845               	subwfb	_tmr3_cnt+1,w,c
  5158  001810  A0D8               	btfss	status,0,c
  5159  001812  0012               	return	
  5160  001814                     i2u278_40:
  5161                           
  5162                           ;main.c: 227: {
  5163                           ;main.c: 228: disable_tmr3();
  5164  001814  EC31  F00F         	call	i2_disable_tmr3	;wreg free
  5165                           
  5166                           ;main.c: 229: tmr3_cnt = 0;
  5167  001818  0E00               	movlw	0
  5168  00181A  6E44               	movwf	_tmr3_cnt,c
  5169  00181C  0E00               	movlw	0
  5170  00181E  6E45               	movwf	_tmr3_cnt+1,c
  5171  001820  0E00               	movlw	0
  5172  001822  6E46               	movwf	_tmr3_cnt+2,c
  5173  001824  0E00               	movlw	0
  5174  001826  6E47               	movwf	_tmr3_cnt+3,c
  5175                           
  5176                           ;main.c: 230: bootTimerIsDone = 1;
  5177  001828  0E01               	movlw	1
  5178  00182A  0100               	movlb	0	; () banked
  5179  00182C  6FCF               	movwf	_bootTimerIsDone& (0+255),b
  5180                           
  5181                           ; BSR set to: 0
  5182                           ;main.c: 231: }
  5183                           ;main.c: 232: break;
  5184  00182E  0012               	return	
  5185  001830                     
  5186                           ; BSR set to: 0
  5187                           ;main.c: 234: if (tmr3_cnt >= (15*1))
  5188                           
  5189                           ; BSR set to: 0
  5190  001830  5047               	movf	_tmr3_cnt+3,w,c
  5191  001832  1046               	iorwf	_tmr3_cnt+2,w,c
  5192  001834  1045               	iorwf	_tmr3_cnt+1,w,c
  5193  001836  E104               	bnz	i2u279_40
  5194  001838  0E0F               	movlw	15
  5195  00183A  5C44               	subwf	_tmr3_cnt,w,c
  5196  00183C  A0D8               	btfss	status,0,c
  5197  00183E  0012               	return	
  5198  001840                     i2u279_40:
  5199                           
  5200                           ; BSR set to: 0
  5201                           ;main.c: 235: {
  5202                           ;main.c: 236: disable_tmr3();
  5203  001840  EC31  F00F         	call	i2_disable_tmr3	;wreg free
  5204                           
  5205                           ;main.c: 237: tmr3_cnt = 0;
  5206  001844  0E00               	movlw	0
  5207  001846  6E44               	movwf	_tmr3_cnt,c
  5208  001848  0E00               	movlw	0
  5209  00184A  6E45               	movwf	_tmr3_cnt+1,c
  5210  00184C  0E00               	movlw	0
  5211  00184E  6E46               	movwf	_tmr3_cnt+2,c
  5212  001850  0E00               	movlw	0
  5213  001852  6E47               	movwf	_tmr3_cnt+3,c
  5214                           
  5215                           ;main.c: 238: receivedOK = 0;
  5216  001854  0E00               	movlw	0
  5217  001856  6E4F               	movwf	_receivedOK,c
  5218                           
  5219                           ;main.c: 240: timedOut = 1;
  5220  001858  0E01               	movlw	1
  5221  00185A  6E4B               	movwf	_timedOut,c
  5222                           
  5223                           ;main.c: 241: }
  5224                           ;main.c: 242: break;
  5225  00185C  0012               	return	
  5226  00185E                     
  5227                           ;main.c: 244: if (tmr3_cnt >= (15*10))
  5228  00185E  5047               	movf	_tmr3_cnt+3,w,c
  5229  001860  1046               	iorwf	_tmr3_cnt+2,w,c
  5230  001862  1045               	iorwf	_tmr3_cnt+1,w,c
  5231  001864  E104               	bnz	i2u280_40
  5232  001866  0E96               	movlw	150
  5233  001868  5C44               	subwf	_tmr3_cnt,w,c
  5234  00186A  A0D8               	btfss	status,0,c
  5235  00186C  0012               	return	
  5236  00186E                     i2u280_40:
  5237                           
  5238                           ;main.c: 245: {
  5239                           ;main.c: 246: disable_tmr3();
  5240  00186E  EC31  F00F         	call	i2_disable_tmr3	;wreg free
  5241                           
  5242                           ;main.c: 247: tmr3_cnt = 0;
  5243  001872  0E00               	movlw	0
  5244  001874  6E44               	movwf	_tmr3_cnt,c
  5245  001876  0E00               	movlw	0
  5246  001878  6E45               	movwf	_tmr3_cnt+1,c
  5247  00187A  0E00               	movlw	0
  5248  00187C  6E46               	movwf	_tmr3_cnt+2,c
  5249  00187E  0E00               	movlw	0
  5250  001880  6E47               	movwf	_tmr3_cnt+3,c
  5251                           
  5252                           ;main.c: 248: receivedOK = 0;
  5253  001882  0E00               	movlw	0
  5254  001884  6E4F               	movwf	_receivedOK,c
  5255                           
  5256                           ;main.c: 250: timedOut = 1;
  5257  001886  0E01               	movlw	1
  5258  001888  6E4B               	movwf	_timedOut,c
  5259                           
  5260                           ;main.c: 251: }
  5261                           ;main.c: 252: break;
  5262  00188A  0012               	return	
  5263  00188C                     
  5264                           ;main.c: 254: if (tmr3_cnt >= (15*10))
  5265  00188C  5047               	movf	_tmr3_cnt+3,w,c
  5266  00188E  1046               	iorwf	_tmr3_cnt+2,w,c
  5267  001890  1045               	iorwf	_tmr3_cnt+1,w,c
  5268  001892  E104               	bnz	i2u281_40
  5269  001894  0E96               	movlw	150
  5270  001896  5C44               	subwf	_tmr3_cnt,w,c
  5271  001898  A0D8               	btfss	status,0,c
  5272  00189A  0012               	return	
  5273  00189C                     i2u281_40:
  5274                           
  5275                           ;main.c: 255: {
  5276                           ;main.c: 256: disable_tmr3();
  5277  00189C  EC31  F00F         	call	i2_disable_tmr3	;wreg free
  5278                           
  5279                           ;main.c: 257: tmr3_cnt = 0;
  5280  0018A0  0E00               	movlw	0
  5281  0018A2  6E44               	movwf	_tmr3_cnt,c
  5282  0018A4  0E00               	movlw	0
  5283  0018A6  6E45               	movwf	_tmr3_cnt+1,c
  5284  0018A8  0E00               	movlw	0
  5285  0018AA  6E46               	movwf	_tmr3_cnt+2,c
  5286  0018AC  0E00               	movlw	0
  5287  0018AE  6E47               	movwf	_tmr3_cnt+3,c
  5288                           
  5289                           ;main.c: 258: receivedOK = 0;
  5290  0018B0  0E00               	movlw	0
  5291  0018B2  6E4F               	movwf	_receivedOK,c
  5292                           
  5293                           ;main.c: 260: timedOut = 1;
  5294  0018B4  0E01               	movlw	1
  5295  0018B6  6E4B               	movwf	_timedOut,c
  5296                           
  5297                           ;main.c: 263: }
  5298                           
  5299                           ;main.c: 261: }
  5300                           ;main.c: 262: break;
  5301  0018B8  0012               	return	
  5302  0018BA                     i2l157:
  5303  0018BA  0100               	movlb	0	; () banked
  5304  0018BC  51D0               	movf	_md_state& (0+255),w,b
  5305                           
  5306                           ; Switch size 1, requested type "space"
  5307                           ; Number of cases is 5, Range of values is 0 to 4
  5308                           ; switch strategies available:
  5309                           ; Name         Instructions Cycles
  5310                           ; simple_byte           16     9 (average)
  5311                           ;	Chosen strategy is simple_byte
  5312  0018BE  0A00               	xorlw	0	; case 0
  5313  0018C0  B4D8               	btfsc	status,2,c
  5314  0018C2  D772               	goto	i2l158
  5315  0018C4  0A01               	xorlw	1	; case 1
  5316  0018C6  B4D8               	btfsc	status,2,c
  5317  0018C8  D792               	goto	i2l161
  5318  0018CA  0A03               	xorlw	3	; case 2
  5319  0018CC  B4D8               	btfsc	status,2,c
  5320  0018CE  D7B0               	goto	i2l163
  5321  0018D0  0A01               	xorlw	1	; case 3
  5322  0018D2  B4D8               	btfsc	status,2,c
  5323  0018D4  D7C4               	goto	i2l165
  5324  0018D6  0A07               	xorlw	7	; case 4
  5325  0018D8  A4D8               	btfss	status,2,c
  5326  0018DA  0012               	return	
  5327  0018DC  D7D7               	goto	i2l167
  5328  0018DE                     __end_of_check_mdstate_tmr3:
  5329                           	opt stack 0
  5330                           pclatu	equ	0xFFB
  5331                           pclath	equ	0xFFA
  5332                           tblptru	equ	0xFF8
  5333                           tblptrh	equ	0xFF7
  5334                           tblptrl	equ	0xFF6
  5335                           tablat	equ	0xFF5
  5336                           prodh	equ	0xFF4
  5337                           prodl	equ	0xFF3
  5338                           intcon	equ	0xFF2
  5339                           postinc0	equ	0xFEE
  5340                           fsr0h	equ	0xFEA
  5341                           fsr0l	equ	0xFE9
  5342                           wreg	equ	0xFE8
  5343                           postdec1	equ	0xFE5
  5344                           plusw1	equ	0xFE3
  5345                           fsr1h	equ	0xFE2
  5346                           fsr1l	equ	0xFE1
  5347                           indf2	equ	0xFDF
  5348                           postinc2	equ	0xFDE
  5349                           plusw2	equ	0xFDB
  5350                           fsr2h	equ	0xFDA
  5351                           fsr2l	equ	0xFD9
  5352                           status	equ	0xFD8
  5353                           
  5354 ;; *************** function i2_disable_tmr3 *****************
  5355 ;; Defined at:
  5356 ;;		line 199 in file "main.c"
  5357 ;; Parameters:    Size  Location     Type
  5358 ;;		None
  5359 ;; Auto vars:     Size  Location     Type
  5360 ;;		None
  5361 ;; Return value:  Size  Location     Type
  5362 ;;                  1    wreg      void 
  5363 ;; Registers used:
  5364 ;;		wreg, status,2
  5365 ;; Tracked objects:
  5366 ;;		On entry : 0/0
  5367 ;;		On exit  : 0/0
  5368 ;;		Unchanged: 0/0
  5369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5371 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5373 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5374 ;;Total ram usage:        0 bytes
  5375 ;; Hardware stack levels used:    1
  5376 ;; This function calls:
  5377 ;;		Nothing
  5378 ;; This function is called by:
  5379 ;;		_isr
  5380 ;;		_check_mdstate_tmr3
  5381 ;; This function uses a non-reentrant model
  5382 ;;
  5383                           
  5384                           	psect	text21
  5385  001E62                     __ptext21:
  5386                           	opt stack 0
  5387  001E62                     i2_disable_tmr3:
  5388                           	opt stack 24
  5389                           
  5390                           ;main.c: 201: tmr3_cnt = 0;
  5391                           
  5392                           ;incstack = 0
  5393  001E62  0E00               	movlw	0
  5394  001E64  6E44               	movwf	_tmr3_cnt,c
  5395  001E66  0E00               	movlw	0
  5396  001E68  6E45               	movwf	_tmr3_cnt+1,c
  5397  001E6A  0E00               	movlw	0
  5398  001E6C  6E46               	movwf	_tmr3_cnt+2,c
  5399  001E6E  0E00               	movlw	0
  5400  001E70  6E47               	movwf	_tmr3_cnt+3,c
  5401                           
  5402                           ;main.c: 202: T3CONbits.TMR3ON = 0;
  5403  001E72  90B1               	bcf	4017,0,c	;volatile
  5404  001E74  0012               	return		;funcret
  5405  001E76                     __end_ofi2_disable_tmr3:
  5406                           	opt stack 0
  5407                           pclatu	equ	0xFFB
  5408                           pclath	equ	0xFFA
  5409                           tblptru	equ	0xFF8
  5410                           tblptrh	equ	0xFF7
  5411                           tblptrl	equ	0xFF6
  5412                           tablat	equ	0xFF5
  5413                           prodh	equ	0xFF4
  5414                           prodl	equ	0xFF3
  5415                           intcon	equ	0xFF2
  5416                           postinc0	equ	0xFEE
  5417                           fsr0h	equ	0xFEA
  5418                           fsr0l	equ	0xFE9
  5419                           wreg	equ	0xFE8
  5420                           postdec1	equ	0xFE5
  5421                           plusw1	equ	0xFE3
  5422                           fsr1h	equ	0xFE2
  5423                           fsr1l	equ	0xFE1
  5424                           indf2	equ	0xFDF
  5425                           postinc2	equ	0xFDE
  5426                           plusw2	equ	0xFDB
  5427                           fsr2h	equ	0xFDA
  5428                           fsr2l	equ	0xFD9
  5429                           status	equ	0xFD8
  5430                           pclatu	equ	0xFFB
  5431                           pclath	equ	0xFFA
  5432                           tblptru	equ	0xFF8
  5433                           tblptrh	equ	0xFF7
  5434                           tblptrl	equ	0xFF6
  5435                           tablat	equ	0xFF5
  5436                           prodh	equ	0xFF4
  5437                           prodl	equ	0xFF3
  5438                           intcon	equ	0xFF2
  5439                           postinc0	equ	0xFEE
  5440                           fsr0h	equ	0xFEA
  5441                           fsr0l	equ	0xFE9
  5442                           wreg	equ	0xFE8
  5443                           postdec1	equ	0xFE5
  5444                           plusw1	equ	0xFE3
  5445                           fsr1h	equ	0xFE2
  5446                           fsr1l	equ	0xFE1
  5447                           indf2	equ	0xFDF
  5448                           postinc2	equ	0xFDE
  5449                           plusw2	equ	0xFDB
  5450                           fsr2h	equ	0xFDA
  5451                           fsr2l	equ	0xFD9
  5452                           status	equ	0xFD8
  5453                           
  5454                           	psect	rparam
  5455  0000                     pclatu	equ	0xFFB
  5456                           pclath	equ	0xFFA
  5457                           tblptru	equ	0xFF8
  5458                           tblptrh	equ	0xFF7
  5459                           tblptrl	equ	0xFF6
  5460                           tablat	equ	0xFF5
  5461                           prodh	equ	0xFF4
  5462                           prodl	equ	0xFF3
  5463                           intcon	equ	0xFF2
  5464                           postinc0	equ	0xFEE
  5465                           fsr0h	equ	0xFEA
  5466                           fsr0l	equ	0xFE9
  5467                           wreg	equ	0xFE8
  5468                           postdec1	equ	0xFE5
  5469                           plusw1	equ	0xFE3
  5470                           fsr1h	equ	0xFE2
  5471                           fsr1l	equ	0xFE1
  5472                           indf2	equ	0xFDF
  5473                           postinc2	equ	0xFDE
  5474                           plusw2	equ	0xFDB
  5475                           fsr2h	equ	0xFDA
  5476                           fsr2l	equ	0xFD9
  5477                           status	equ	0xFD8
  5478                           
  5479                           	psect	temp
  5480  000055                     btemp:
  5481                           	opt stack 0
  5482  000055                     	ds	1
  5483  0000                     int$flags	set	btemp
  5484  0000                     wtemp6	set	btemp+1
  5485                           pclatu	equ	0xFFB
  5486                           pclath	equ	0xFFA
  5487                           tblptru	equ	0xFF8
  5488                           tblptrh	equ	0xFF7
  5489                           tblptrl	equ	0xFF6
  5490                           tablat	equ	0xFF5
  5491                           prodh	equ	0xFF4
  5492                           prodl	equ	0xFF3
  5493                           intcon	equ	0xFF2
  5494                           postinc0	equ	0xFEE
  5495                           fsr0h	equ	0xFEA
  5496                           fsr0l	equ	0xFE9
  5497                           wreg	equ	0xFE8
  5498                           postdec1	equ	0xFE5
  5499                           plusw1	equ	0xFE3
  5500                           fsr1h	equ	0xFE2
  5501                           fsr1l	equ	0xFE1
  5502                           indf2	equ	0xFDF
  5503                           postinc2	equ	0xFDE
  5504                           plusw2	equ	0xFDB
  5505                           fsr2h	equ	0xFDA
  5506                           fsr2l	equ	0xFD9
  5507                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    128
    Data        221
    BSS         193
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     24      84
    BANK0           160     97     125
    BANK1           256      0     219
    BANK2           256    132     239
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    md_uart_write_str_ok@data	PTR unsigned char  size(2) Largest target is 47
		 -> close_socket_ok@syshalt(BANK0[17]), close_socket_ok@deactivatePDP(BANK0[15]), close_socket_ok@closeSocket(BANK0[10]), send_over_socket_ok@terminateData(BANK0[1]), 
		 -> send_over_socket_ok@msg(BANK0[8]), send_over_socket_ok@srecv(BANK0[16]), send_over_socket_ok@ssend(BANK0[13]), send_over_socket_ok@openConnection(BANK0[44]), 
		 -> setup_data_ok@activatePDP(BANK0[15]), setup_data_ok@cfgSocket(BANK0[25]), setup_data_ok@setApn(BANK0[47]), send_md_cfg_cmds_ok@csq(BANK2[9]), 
		 -> send_md_cfg_cmds_ok@gprs(BANK2[11]), send_md_cfg_cmds_ok@cereg(BANK2[12]), send_md_cfg_cmds_ok@creg(BANK2[11]), send_md_cfg_cmds_ok@cpin(BANK2[11]), 
		 -> send_md_cfg_cmds_ok@queryVersion(BANK2[10]), send_md_cfg_cmds_ok@ledpattern(BANK2[12]), send_md_cfg_cmds_ok@ledCfg(BANK2[16]), send_md_cfg_cmds_ok@baud(BANK2[16]), 
		 -> send_md_cfg_cmds_ok@cmee(BANK2[12]), send_md_cfg_cmds_ok@ate(BANK2[7]), send_md_cfg_cmds_ok@at(BANK2[5]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_check_mdstate_tmr3

Critical Paths under _main in BANK0

    _check_modem_state->_setup_data_ok
    _setup_data_ok->_md_uart_write_str_ok
    _send_over_socket_ok->_md_uart_write_str_ok
    _send_md_cfg_cmds_ok->_md_uart_write_str_ok
    _close_socket_ok->_md_uart_write_str_ok
    _md_uart_write_str_ok->_md_uart_send

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _check_modem_state->_send_md_cfg_cmds_ok

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   35457
                                             96 BANK0      1     1      0
                  _check_modem_state
                           _init_pic
           _start_modem_send_process
 ---------------------------------------------------------------------------------
 (1) _init_pic                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _check_modem_state                                    0     0      0   35358
                    _close_socket_ok
                _send_md_cfg_cmds_ok
                _send_over_socket_ok
                      _setup_data_ok
 ---------------------------------------------------------------------------------
 (2) _setup_data_ok                                       87    87      0    8713
                                              9 BANK0     87    87      0
               _md_uart_write_str_ok
                     _reset_AT_marks
 ---------------------------------------------------------------------------------
 (2) _send_over_socket_ok                                 82    82      0    8787
                                              9 BANK0     82    82      0
               _md_uart_write_str_ok
                     _reset_AT_marks
 ---------------------------------------------------------------------------------
 (2) _send_md_cfg_cmds_ok                                132   132      0    9145
                                              0 BANK2    132   132      0
               _md_uart_write_str_ok
                     _reset_AT_marks
                _start_md_boot_timer
           _start_modem_send_process
 ---------------------------------------------------------------------------------
 (1) _start_modem_send_process                             4     4      0      99
                                              0 BANK0      4     4      0
                _start_md_boot_timer
 ---------------------------------------------------------------------------------
 (2) _start_md_boot_timer                                  0     0      0       0
                     _reload_tmr3_1s
 ---------------------------------------------------------------------------------
 (2) _close_socket_ok                                     42    42      0    8713
                                              9 BANK0     42    42      0
               _md_uart_write_str_ok
                     _reset_AT_marks
 ---------------------------------------------------------------------------------
 (3) _reset_AT_marks                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _md_uart_write_str_ok                                 9     4      5    8602
                                              1 BANK0      8     3      5
                       _disable_tmr3
                    _enable_md_rxint
                       _init_md_uart
                       _md_uart_send
                     _reload_tmr3_1s
                  _reset_retry_count
                  _terminate_md_uart
 ---------------------------------------------------------------------------------
 (4) _terminate_md_uart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _reset_retry_count                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _reload_tmr3_1s                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _md_uart_send                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _init_md_uart                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _enable_md_rxint                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _disable_tmr3                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _isr                                                 23    23      0       0
                                              1 COMRAM    23    23      0
                 _check_mdstate_tmr3
                   _disable_md_rxint
                     i2_disable_tmr3
 ---------------------------------------------------------------------------------
 (7) _disable_md_rxint                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _check_mdstate_tmr3                                   1     1      0       0
                                              0 COMRAM     1     1      0
                     i2_disable_tmr3
 ---------------------------------------------------------------------------------
 (7) i2_disable_tmr3                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _check_modem_state
     _close_socket_ok
       _md_uart_write_str_ok
         _disable_tmr3
         _enable_md_rxint
         _init_md_uart
         _md_uart_send
         _reload_tmr3_1s
         _reset_retry_count
         _terminate_md_uart
       _reset_AT_marks
     _send_md_cfg_cmds_ok
       _md_uart_write_str_ok
         _disable_tmr3
         _enable_md_rxint
         _init_md_uart
         _md_uart_send
         _reload_tmr3_1s
         _reset_retry_count
         _terminate_md_uart
       _reset_AT_marks
       _start_md_boot_timer
         _reload_tmr3_1s
       _start_modem_send_process
         _start_md_boot_timer
           _reload_tmr3_1s
     _send_over_socket_ok
       _md_uart_write_str_ok
         _disable_tmr3
         _enable_md_rxint
         _init_md_uart
         _md_uart_send
         _reload_tmr3_1s
         _reset_retry_count
         _terminate_md_uart
       _reset_AT_marks
     _setup_data_ok
       _md_uart_write_str_ok
         _disable_tmr3
         _enable_md_rxint
         _init_md_uart
         _md_uart_send
         _reload_tmr3_1s
         _reset_retry_count
         _terminate_md_uart
       _reset_AT_marks
   _init_pic
   _start_modem_send_process
     _start_md_boot_timer
       _reload_tmr3_1s

 _isr (ROOT)
   _check_mdstate_tmr3
     i2_disable_tmr3
   _disable_md_rxint
   i2_disable_tmr3

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     84      EF       9       93.4%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      DB       7       85.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     61      7D       5       78.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     18      54       1       89.4%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     29B      12        0.0%
DATA                 0      0     29B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Aug 01 15:58:51 2018

                        ??_disable_tmr3 0060                             __CFG_CP0$ON 000000  
                           __CFG_CP1$ON 000000                             __CFG_CP2$ON 000000  
                           __CFG_CP3$ON 000000                             __CFG_CPB$ON 000000  
                      ?_close_socket_ok 002C                             __CFG_CPD$ON 000000  
      __end_ofsend_over_socket_ok@F6890 104E        __end_ofsend_over_socket_ok@F6892 107C  
      __end_ofsend_over_socket_ok@F6886 102D        __end_ofsend_over_socket_ok@F6888 106A  
               __size_of_reload_tmr3_1s 0004                       ?_disable_md_rxint 002C  
                                   l300 1654                                     l137 1E06  
                                   l410 1B6A                                     l403 1BAA  
                                   l139 1E26                                     l412 1B7C  
                                   l270 1622                                     l510 1978  
                                   l414 1B8E                                     l406 1B42  
                                   l271 1472                                     l511 19A4  
                                   l272 1522                                     l512 19B8  
                                   l408 1B58                                     l273 14D6  
                                   l522 1D4A                                     l290 15B2  
                                   l274 14BC                                     l450 12B4  
                                   l523 1D26                                     l283 1636  
                                   l451 12E0                                     l443 1180  
                                   l292 15DC                                     l284 152A  
                                   l276 14F6                                     l452 130C  
                                   l444 11AC                                     l525 1D2C  
                                   l285 1544                                     l509 194C  
                                   l453 1338                                     l445 11D8  
                                   l526 1D32                                     l294 160E  
                                   l278 150C                                     l462 1468  
                                   l454 1364                                     l446 1204  
                                   l527 1D38                                     l287 156E  
                                   l455 13E2                                     l447 1230  
                                   l528 1D3E                                     l296 1640  
                                   l448 125C                                     l529 1D44  
                                   l289 157E                                     l449 1288  
                                   l473 1A18                                     l298 164A  
                                   l394 1D16                                     l474 1A44  
                                   l395 1CF0                                     l459 1456  
                                   l491 16E2                                     l475 1A70  
                                   l492 170E                                     l493 173A  
                                   l494 1766                                     l495 1792  
                                   l496 17A2                                     _GIE 007F97  
                                   _isr 0008                      ??_disable_md_rxint 002C  
                                   prod 000FF3                                     wreg 000FE8  
                            _TXSTA1bits 000FAC                            __CFG_LVP$OFF 000000  
                                  l2736 1E8C                                    l2836 1526  
                                  ?_isr 002C                                    u4200 18EC  
                                  u3305 15F8                                    u3401 10E6  
                                  u3306 15FA                                    u4210 1904  
                                  u3411 10F8                                    u4220 191C  
                                  u4060 1666                                    u3421 110A  
                                  u4070 167E                                    u3431 111C  
                                  u3351 108C                                    u4080 1696  
                                  u3441 112E                                    u3361 109E  
                                  u4090 16AE                                    u3451 1140  
                                  u3371 10B0                                    u3461 1152  
                                  u3381 10C2                                    u3391 10D4  
                                  u3810 13C4                                    u4367 1E12  
                                  u4377 1CFE                                    u4387 14A6  
                                  u3940 1442                                    u3971 19C6  
                                  u3981 19D8                                    u3991 19EA  
                       __end_of_VERSION 1081                                    _main 1E02  
                                  fsr0h 000FEA                                    fsr1h 000FE2  
                                  fsr2h 000FDA                                    fsr0l 000FE9  
                                  indf2 000FDF                                    fsr1l 000FE1  
                                  fsr2l 000FD9                                    btemp 0055  
                         __CFG_BORV$190 000000                                    prodh 000FF4  
                                  prodl 000FF3                                    start 0264  
                         __CFG_IESO$OFF 000000                            ___param_bank 000000  
          __size_of_start_md_boot_timer 0006                                   ??_isr 002D  
                          _BAUDCON1bits 000FB8                                   ?_main 002C  
                         ?_md_uart_send 002C                                   _CREN1 007D5C  
                                 _T0CON 000FD5                                   _T3CON 000FB1  
                                 _RC1IE 007CED                                   _RC1IF 007CF5  
                                 i2l130 0202                                   i2l122 007C  
                                 i2l131 0218                                   i2l123 01D6  
                                 i2l124 0114                                   i2l161 17EE  
                                 i2l163 1830                                   i2l157 18BA  
                                 i2l165 185E                                   i2l158 17A8  
                                 i2l167 188C                      setup_data_ok@F6881 0139  
                    setup_data_ok@F6877 02C0                      setup_data_ok@F6879 0100  
      start_modem_send_process@newEvent 0062                                   _TMR0H 000FD7  
                                 _TMR0L 000FD6                                   _TMR3H 000FB3  
                                 _TMR3L 000FB2                                   _TRISA 000F92  
                                 _TRISB 000F93                                   _TRMT1 007D61  
                                 _TRISC 000F94                           __CFG_WRT0$OFF 000000  
                         __CFG_WRT1$OFF 000000                           __CFG_WRT2$OFF 000000  
                         __CFG_WRT3$OFF 000000                          __CFG_EBTR0$OFF 000000  
                        __CFG_FCMEN$OFF 000000                          __CFG_EBTR1$OFF 000000  
                        __CFG_EBTR2$OFF 000000                          __CFG_EBTR3$OFF 000000  
                         __CFG_WRTB$OFF 000000                           __CFG_WRTC$OFF 000000  
                         __CFG_WRTD$OFF 000000                         ??_setup_data_ok 0069  
                        __CFG_EBTRB$OFF 000000                                   _awake 004A  
              setup_data_ok@activatePDP 00B1                      __CFG_MCLRE$INTMCLR 000000  
                                 pclath 000FFA                                   tablat 000FF5  
                                 plusw1 000FE3                                   plusw2 000FDB  
                                 status 000FD8              ??_start_modem_send_process 0060  
                                 wtemp6 0056                          __CFG_HFOFST$ON 000000  
                       _enable_md_rxint 1E76                 __size_of_reset_AT_marks 0034  
                       __initialization 1A82                            __end_of_main 1E2C  
           __end_of_send_over_socket_ok 17A6                          ??_md_uart_send 0060  
                                ??_main 00C0                           __activetblptr 000002  
                  close_socket_ok@F6900 106A                    close_socket_ok@F6902 104E  
                  close_socket_ok@F6904 102D                       _terminate_md_uart 1EA2  
           __end_of_send_md_cfg_cmds_ok 1470        send_over_socket_ok@terminateData 00BA  
                    ?_terminate_md_uart 002C                    __end_of_disable_tmr3 1E62  
                                _ANSELA 000F38                                  _ANSELB 000F39  
                                _ANSELC 000F3A                   send_md_cfg_cmds_ok@at 027F  
                                _RC1REG 000FAE                          __CFG_WDTEN$OFF 000000  
                         ?_init_md_uart 002C                                  _SPBRG1 000FAF  
                                _TMR0IF 007F92                                  _TMR3IF 007D09  
                                _TX1REG 000FAD                     ??_terminate_md_uart 0060  
                        __CFG_XINST$OFF 000000                          __CFG_STVREN$ON 000000  
                                _endPtr 0050                        __end_of_init_pic 1C54  
         __size_of_md_uart_write_str_ok 01E8                                  clear_0 1B08  
                                clear_1 1B14                                  clear_2 1B20  
                                clear_3 1B2C                          _reload_tmr3_1s 1EBC  
                                _toggle 002A               __end_of_terminate_md_uart 1EAC  
                          __pdataCOMRAM 0001                     setup_data_ok@setApn 0069  
                          __mediumconst 0000                                  tblptrh 000FF7  
                                tblptrl 000FF6                                  tblptru 000FF8  
               __end_of_enable_md_rxint 1E88                          ??_init_md_uart 0060  
                            __accesstop 0060                 __end_of__initialization 1B32  
                       __CFG_PBADEN$OFF 000000                           ___rparam_used 000001  
                        __pcstackCOMRAM 002C                            __pidataBANK0 1E96  
                          __pidataBANK1 1C54                            __pidataBANK2 1DA8  
                __end_of_reload_tmr3_1s 1EC0              close_socket_ok@closeSocket 0089  
                            _atCmdState 0051              __end_of_check_mdstate_tmr3 18DE  
                     _check_modem_state 1B40                      ?_check_modem_state 002C  
                   _start_md_boot_timer 1EB6                              __pbssBANK0 00C1  
                            __pbssBANK1 0177                              __pbssBANK2 0284  
                       __CFG_PLLCFG$OFF 000000        __end_of_start_modem_send_process 1D24  
             __size_of_disable_md_rxint 000A                    __end_of_md_uart_send 1E96  
                   ??_check_modem_state 00C0                          _reset_AT_marks 1D74  
                    __CFG_CCP2MX$PORTC1 000000               start_modem_send_process@i 0063  
                  ?_start_md_boot_timer 002C                      __CFG_CCP3MX$PORTB5 000000  
                       ?_reload_tmr3_1s 002C               __end_of_check_modem_state 1BD4  
                send_md_cfg_cmds_ok@ate 0278              __size_of_terminate_md_uart 000A  
                send_md_cfg_cmds_ok@csq 026F                              _ledPattern 0054  
                 __size_of_disable_tmr3 0014                __size_of_close_socket_ok 00DE  
                               _SPBRGH1 000FB0                                 _VERSION 107C  
                      ?_enable_md_rxint 002C                  __end_of_reset_AT_marks 1DA8  
                             ?_init_pic 002C                         __CFG_PWRTEN$OFF 000000  
            md_uart_write_str_ok@wantOK 0064                                 __Hparam 0000  
                               __Lparam 0000               md_uart_write_str_ok@index 0068  
                 ??_start_md_boot_timer 0060                send_md_cfg_cmds_ok@F6841 00D8  
              send_md_cfg_cmds_ok@F6851 0154                send_md_cfg_cmds_ok@F6843 00D1  
              send_md_cfg_cmds_ok@F6861 016C                send_md_cfg_cmds_ok@F6845 0160  
              send_md_cfg_cmds_ok@F6853 0017                send_md_cfg_cmds_ok@F6847 0129  
              send_md_cfg_cmds_ok@F6863 0021                send_md_cfg_cmds_ok@F6855 000C  
              send_md_cfg_cmds_ok@F6849 0119                send_md_cfg_cmds_ok@F6857 0001  
              send_md_cfg_cmds_ok@F6859 0148                            _disable_tmr3 1E4E  
                          __psmallconst 1000                                 __pcinit 1A82  
                               __ramtop 1000                    __end_of_init_md_uart 1E4E  
                               _mdRxBuf 0177                                 __ptext0 1E02  
                               __ptext1 1BD4                                 __ptext2 1B40  
                               __ptext3 19BC                                 __ptext4 1658  
                               __ptext5 1082                                 __ptext6 1CCC  
                               __ptext7 1EB6                                 __ptext8 18DE  
                               __ptext9 1D74                 __size_ofi2_disable_tmr3 0014  
                       _ledPatternCount 0053                send_md_cfg_cmds_ok@cereg 0238  
                          __size_of_isr 025C                               _T3CONbits 000FB1  
                            _receivedOK 004F                                 _sentAT1 00CD  
                               _sentAT2 00CC                                 _sentAT3 00CB  
                               _sentAT4 00CA                                 _sentAT5 00C9  
                               _sentAT6 00C8                                 _sentAT7 00C7  
                               _sentAT8 00C6                                 _sentAT9 00C5  
                         _receivedCarat 004C               send_md_cfg_cmds_ok@ledCfg 0210  
                 __end_of_setup_data_ok 1A82                    end_of_initialization 1B32  
                       ?_reset_AT_marks 002C                 md_uart_write_str_ok@len 0063  
                         __Lmediumconst 0000                              ??_init_pic 0060  
                            _numRetries 002B                                 postdec1 000FE5  
                         _extendedTimer 00C1                                 postinc0 000FEE  
                               postinc2 000FDE       __size_of_start_modem_send_process 0058  
                             _PORTAbits 000F80                               _PORTBbits 000F81  
             ?_start_modem_send_process 002C                               _PORTCbits 000F82  
            __size_of_check_modem_state 0094            __size_of_send_over_socket_ok 014E  
                             _TRISAbits 000F92                               _TRISBbits 000F93  
                             _TRISCbits 000F94                   __size_of_md_uart_send 000E  
          __end_of_md_uart_write_str_ok 1658                       ??_close_socket_ok 0069  
                      _disable_md_rxint 1EAC            __size_of_send_md_cfg_cmds_ok 03EE  
                           _BAUDCONbits 000FB8  md_uart_write_str_ok@waitToSendMoreData 0065  
                         __pidataCOMRAM 1DD7                            _md_uart_send 1E88  
                   start_initialization 1A82                             __end_of_isr 0264  
              send_over_socket_ok@F6890 103E                send_over_socket_ok@F6892 1074  
              send_over_socket_ok@F6886 1001                send_over_socket_ok@F6888 105D  
                    _check_mdstate_tmr3 17A6                        ??_reload_tmr3_1s 0060  
                   ?_check_mdstate_tmr3 002C           send_md_cfg_cmds_ok@ledpattern 022C  
              send_over_socket_ok@srecv 0095                send_over_socket_ok@ssend 00A5  
                 __size_of_init_md_uart 0022                             __pdataBANK0 00D1  
                           __pdataBANK1 0100                             __pdataBANK2 02C0  
                        i2_disable_tmr3 1E62                             __pbssCOMRAM 0044  
                  ??_check_mdstate_tmr3 002C                           __pcstackBANK0 0060  
                         __pcstackBANK2 0200                            _init_md_uart 1E2C  
                     __size_of_init_pic 0080                               __pintcode 0008  
                       _bootTimerIsDone 00CF                  __end_ofi2_disable_tmr3 1E76  
                  _md_uart_write_str_ok 1470                        __CFG_PRICLKEN$ON 000000  
                           __smallconst 1000            close_socket_ok@deactivatePDP 007A  
                     _reset_retry_count 1D24       send_over_socket_ok@openConnection 0069  
                      ??_reset_AT_marks 0060                      ?_reset_retry_count 002C  
               send_md_cfg_cmds_ok@baud 0200                 send_md_cfg_cmds_ok@cmee 0220  
               send_md_cfg_cmds_ok@creg 024F                 send_md_cfg_cmds_ok@cpin 0244  
               send_md_cfg_cmds_ok@gprs 025A                            _receivedRESP 004D  
                              _LATBbits 000F8A             __end_of_start_md_boot_timer 1EBC  
                              _LATCbits 000F8B                     ??_reset_retry_count 0060  
                              _PIE1bits 000F9D                                _PIE2bits 000FA0  
                   _send_over_socket_ok 1658                                i2u280_40 186E  
                              i2u281_40 189C                                _PIR1bits 000F9E  
                              _PIR2bits 000FA1                                i2u277_40 17D0  
                              i2u278_40 1814                                i2u294_40 0102  
                              i2u279_40 1840                __size_of_enable_md_rxint 0012  
                      __CFG_WDTPS$32768 000000                  close_socket_ok@syshalt 0069  
                       ?i2_disable_tmr3 002C                   ?_md_uart_write_str_ok 0061  
                          _referenceBuf 0284                __end_of_disable_md_rxint 1EB6  
                   _send_md_cfg_cmds_ok 1082               __end_of_reset_retry_count 1D74  
                  ?_send_over_socket_ok 002C                         _close_socket_ok 18DE  
                setup_data_ok@cfgSocket 0098                               copy_data0 1A96  
                             copy_data1 1AB6                               copy_data2 1AD6  
                             copy_data3 1AF6                    ?_send_md_cfg_cmds_ok 002C  
                              __Hrparam 0000                             _pdpIsActive 00CE  
                              __Lrparam 0000                      __CFG_BOREN$SBORDIS 000000  
                     __CFG_P2BMX$PORTB5 000000                  __size_of_setup_data_ok 00C6  
                 ??_send_over_socket_ok 0069                             _currentChar 0049  
       md_uart_write_str_ok@currentChar 0067                                __ptext10 1470  
                              __ptext11 1EA2                                __ptext20 17A6  
                              __ptext12 1D24                                __ptext21 1E62  
                              __ptext13 1EBC                                __ptext14 1E88  
                              __ptext15 1E2C                                __ptext16 1E76  
                              __ptext17 1E4E                                __ptext19 1EAC  
                              _lastChar 0048                                _md_state 00D0  
                 ??_send_md_cfg_cmds_ok 0069                           __size_of_main 002A  
                              _init_pic 1BD4                             _receivedERR 004E  
                              _sentAT10 00C4                                _sentAT11 00C3  
                              _sentAT12 00C2                                _tmr3_cnt 0044  
                              _tmr5_cnt 0052                              _RC1STAbits 000FAB  
       send_md_cfg_cmds_ok@queryVersion 0265                                _timedOut 004B  
                ??_md_uart_write_str_ok 0066                                int$flags 0055  
              _start_modem_send_process 1CCC                 __end_of_close_socket_ok 19BC  
                     ??_enable_md_rxint 0060              __size_of_reset_retry_count 0050  
                            _INTCONbits 000FF2                  send_over_socket_ok@msg 00B2  
              md_uart_write_str_ok@data 0061                                intlevel2 0000  
                         _setup_data_ok 19BC                              _RCSTA1bits 000FAB  
                            _OSCCONbits 000FD3                        md_uart_send@data 0060  
                         ?_disable_tmr3 002C             __size_of_check_mdstate_tmr3 0138  
                     __CFG_T3CMX$PORTC0 000000                          ?_setup_data_ok 002C  
                     __CFG_FOSC$INTIO67 000000            __end_ofclose_socket_ok@F6900 1074  
          __end_ofclose_socket_ok@F6902 105D            __end_ofclose_socket_ok@F6904 103E  
                      ??i2_disable_tmr3 002C  
