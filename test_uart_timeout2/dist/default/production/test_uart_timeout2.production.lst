

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Aug 01 15:12:36 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F26K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     9                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    18                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    19                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    21                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    22                           	psect	text0,global,reloc=2,class=CODE,delta=1
    23                           	psect	text1,global,reloc=2,class=CODE,delta=1
    24                           	psect	text2,global,reloc=2,class=CODE,delta=1
    25                           	psect	text3,global,reloc=2,class=CODE,delta=1
    26                           	psect	text4,global,reloc=2,class=CODE,delta=1
    27                           	psect	text5,global,reloc=2,class=CODE,delta=1
    28                           	psect	text6,global,reloc=2,class=CODE,delta=1
    29                           	psect	text7,global,reloc=2,class=CODE,delta=1
    30                           	psect	text8,global,reloc=2,class=CODE,delta=1
    31                           	psect	text9,global,reloc=2,class=CODE,delta=1
    32                           	psect	text10,global,reloc=2,class=CODE,delta=1
    33                           	psect	text11,global,reloc=2,class=CODE,delta=1
    34                           	psect	text12,global,reloc=2,class=CODE,delta=1
    35                           	psect	text13,global,reloc=2,class=CODE,delta=1
    36                           	psect	text14,global,reloc=2,class=CODE,delta=1
    37                           	psect	text15,global,reloc=2,class=CODE,delta=1
    38                           	psect	text16,global,reloc=2,class=CODE,delta=1
    39                           	psect	text17,global,reloc=2,class=CODE,delta=1
    40                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    41                           	psect	text19,global,reloc=2,class=CODE,delta=1
    42                           	psect	text20,global,reloc=2,class=CODE,delta=1
    43                           	psect	text21,global,reloc=2,class=CODE,delta=1
    44                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    45                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    46                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    47  0000                     
    48                           ; Version 1.45
    49                           ; Generated 16/11/2017 GMT
    50                           ; 
    51                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    52                           ; All rights reserved.
    53                           ; 
    54                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    55                           ; 
    56                           ; Redistribution and use in source and binary forms, with or without modification, are
    57                           ; permitted provided that the following conditions are met:
    58                           ; 
    59                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    60                           ;        conditions and the following disclaimer.
    61                           ; 
    62                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    63                           ;        of conditions and the following disclaimer in the documentation and/or other
    64                           ;        materials provided with the distribution.
    65                           ; 
    66                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    67                           ;        software without specific prior written permission.
    68                           ; 
    69                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    70                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    71                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    72                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    73                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    74                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    75                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    76                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    77                           ; 
    78                           ; 
    79                           ; Code-generator required, PIC18F26K22 Definitions
    80                           ; 
    81                           ; SFR Addresses
    82  0000                     
    83                           	psect	idataCOMRAM
    84  001DD3                     __pidataCOMRAM:
    85                           	opt stack 0
    86                           
    87                           ;initializer for send_md_cfg_cmds_ok@F6857
    88  001DD3  41                 	db	65
    89  001DD4  54                 	db	84
    90  001DD5  2B                 	db	43
    91  001DD6  43                 	db	67
    92  001DD7  52                 	db	82
    93  001DD8  45                 	db	69
    94  001DD9  47                 	db	71
    95  001DDA  3F                 	db	63
    96  001DDB  0D                 	db	13
    97  001DDC  0A                 	db	10
    98  001DDD  00                 	db	0
    99                           
   100                           ;initializer for send_md_cfg_cmds_ok@F6855
   101  001DDE  41                 	db	65
   102  001DDF  54                 	db	84
   103  001DE0  2B                 	db	43
   104  001DE1  43                 	db	67
   105  001DE2  50                 	db	80
   106  001DE3  49                 	db	73
   107  001DE4  4E                 	db	78
   108  001DE5  3F                 	db	63
   109  001DE6  0D                 	db	13
   110  001DE7  0A                 	db	10
   111  001DE8  00                 	db	0
   112                           
   113                           ;initializer for send_md_cfg_cmds_ok@F6853
   114  001DE9  41                 	db	65
   115  001DEA  54                 	db	84
   116  001DEB  23                 	db	35
   117  001DEC  43                 	db	67
   118  001DED  47                 	db	71
   119  001DEE  4D                 	db	77
   120  001DEF  52                 	db	82
   121  001DF0  0D                 	db	13
   122  001DF1  0A                 	db	10
   123  001DF2  00                 	db	0
   124                           
   125                           ;initializer for send_md_cfg_cmds_ok@F6863
   126  001DF3  41                 	db	65
   127  001DF4  54                 	db	84
   128  001DF5  2B                 	db	43
   129  001DF6  43                 	db	67
   130  001DF7  53                 	db	83
   131  001DF8  51                 	db	81
   132  001DF9  0D                 	db	13
   133  001DFA  0A                 	db	10
   134  001DFB  00                 	db	0
   135                           
   136                           ;initializer for _toggle
   137  001DFC  01                 	db	1
   138                           
   139                           ;initializer for _numRetries
   140  001DFD  0F                 	db	15
   141                           
   142                           	psect	idataBANK0
   143  001E92                     __pidataBANK0:
   144                           	opt stack 0
   145                           
   146                           ;initializer for send_md_cfg_cmds_ok@F6843
   147  001E92  41                 	db	65
   148  001E93  54                 	db	84
   149  001E94  45                 	db	69
   150  001E95  31                 	db	49
   151  001E96  0D                 	db	13
   152  001E97  0A                 	db	10
   153  001E98  00                 	db	0
   154                           
   155                           ;initializer for send_md_cfg_cmds_ok@F6841
   156  001E99  41                 	db	65
   157  001E9A  54                 	db	84
   158  001E9B  0D                 	db	13
   159  001E9C  0A                 	db	10
   160  001E9D  00                 	db	0
   161                           
   162                           	psect	idataBANK1
   163  001C50                     __pidataBANK1:
   164                           	opt stack 0
   165                           
   166                           ;initializer for setup_data_ok@F6879
   167  001C50  41                 	db	65
   168  001C51  54                 	db	84
   169  001C52  23                 	db	35
   170  001C53  53                 	db	83
   171  001C54  43                 	db	67
   172  001C55  46                 	db	70
   173  001C56  47                 	db	71
   174  001C57  45                 	db	69
   175  001C58  58                 	db	88
   176  001C59  54                 	db	84
   177  001C5A  3D                 	db	61
   178  001C5B  31                 	db	49
   179  001C5C  2C                 	db	44
   180  001C5D  31                 	db	49
   181  001C5E  2C                 	db	44
   182  001C5F  30                 	db	48
   183  001C60  2C                 	db	44
   184  001C61  30                 	db	48
   185  001C62  2C                 	db	44
   186  001C63  30                 	db	48
   187  001C64  2C                 	db	44
   188  001C65  30                 	db	48
   189  001C66  0D                 	db	13
   190  001C67  0A                 	db	10
   191  001C68  00                 	db	0
   192                           
   193                           ;initializer for send_md_cfg_cmds_ok@F6849
   194  001C69  41                 	db	65
   195  001C6A  54                 	db	84
   196  001C6B  23                 	db	35
   197  001C6C  47                 	db	71
   198  001C6D  50                 	db	80
   199  001C6E  49                 	db	73
   200  001C6F  4F                 	db	79
   201  001C70  3D                 	db	61
   202  001C71  37                 	db	55
   203  001C72  2C                 	db	44
   204  001C73  30                 	db	48
   205  001C74  2C                 	db	44
   206  001C75  32                 	db	50
   207  001C76  0D                 	db	13
   208  001C77  0A                 	db	10
   209  001C78  00                 	db	0
   210                           
   211                           ;initializer for send_md_cfg_cmds_ok@F6847
   212  001C79  41                 	db	65
   213  001C7A  54                 	db	84
   214  001C7B  2B                 	db	43
   215  001C7C  49                 	db	73
   216  001C7D  50                 	db	80
   217  001C7E  52                 	db	82
   218  001C7F  3D                 	db	61
   219  001C80  31                 	db	49
   220  001C81  31                 	db	49
   221  001C82  35                 	db	53
   222  001C83  32                 	db	50
   223  001C84  30                 	db	48
   224  001C85  30                 	db	48
   225  001C86  0D                 	db	13
   226  001C87  0A                 	db	10
   227  001C88  00                 	db	0
   228                           
   229                           ;initializer for setup_data_ok@F6881
   230  001C89  41                 	db	65
   231  001C8A  54                 	db	84
   232  001C8B  23                 	db	35
   233  001C8C  53                 	db	83
   234  001C8D  47                 	db	71
   235  001C8E  41                 	db	65
   236  001C8F  43                 	db	67
   237  001C90  54                 	db	84
   238  001C91  3D                 	db	61
   239  001C92  33                 	db	51
   240  001C93  2C                 	db	44
   241  001C94  31                 	db	49
   242  001C95  0D                 	db	13
   243  001C96  0A                 	db	10
   244  001C97  00                 	db	0
   245                           
   246                           ;initializer for send_md_cfg_cmds_ok@F6859
   247  001C98  41                 	db	65
   248  001C99  54                 	db	84
   249  001C9A  2B                 	db	43
   250  001C9B  43                 	db	67
   251  001C9C  45                 	db	69
   252  001C9D  52                 	db	82
   253  001C9E  45                 	db	69
   254  001C9F  47                 	db	71
   255  001CA0  3F                 	db	63
   256  001CA1  0D                 	db	13
   257  001CA2  0A                 	db	10
   258  001CA3  00                 	db	0
   259                           
   260                           ;initializer for send_md_cfg_cmds_ok@F6851
   261  001CA4  41                 	db	65
   262  001CA5  54                 	db	84
   263  001CA6  23                 	db	35
   264  001CA7  53                 	db	83
   265  001CA8  4C                 	db	76
   266  001CA9  45                 	db	69
   267  001CAA  44                 	db	68
   268  001CAB  3D                 	db	61
   269  001CAC  34                 	db	52
   270  001CAD  0D                 	db	13
   271  001CAE  0A                 	db	10
   272  001CAF  00                 	db	0
   273                           
   274                           ;initializer for send_md_cfg_cmds_ok@F6845
   275  001CB0  41                 	db	65
   276  001CB1  54                 	db	84
   277  001CB2  2B                 	db	43
   278  001CB3  43                 	db	67
   279  001CB4  4D                 	db	77
   280  001CB5  45                 	db	69
   281  001CB6  45                 	db	69
   282  001CB7  3D                 	db	61
   283  001CB8  32                 	db	50
   284  001CB9  0D                 	db	13
   285  001CBA  0A                 	db	10
   286  001CBB  00                 	db	0
   287                           
   288                           ;initializer for send_md_cfg_cmds_ok@F6861
   289  001CBC  41                 	db	65
   290  001CBD  54                 	db	84
   291  001CBE  23                 	db	35
   292  001CBF  47                 	db	71
   293  001CC0  50                 	db	80
   294  001CC1  52                 	db	82
   295  001CC2  53                 	db	83
   296  001CC3  3F                 	db	63
   297  001CC4  0D                 	db	13
   298  001CC5  0A                 	db	10
   299  001CC6  00                 	db	0
   300                           
   301                           	psect	idataBANK2
   302  001DA4                     __pidataBANK2:
   303                           	opt stack 0
   304                           
   305                           ;initializer for setup_data_ok@F6877
   306  001DA4  41                 	db	65
   307  001DA5  54                 	db	84
   308  001DA6  2B                 	db	43
   309  001DA7  43                 	db	67
   310  001DA8  47                 	db	71
   311  001DA9  44                 	db	68
   312  001DAA  43                 	db	67
   313  001DAB  4F                 	db	79
   314  001DAC  4E                 	db	78
   315  001DAD  54                 	db	84
   316  001DAE  3D                 	db	61
   317  001DAF  33                 	db	51
   318  001DB0  2C                 	db	44
   319  001DB1  22                 	db	34
   320  001DB2  49                 	db	73
   321  001DB3  50                 	db	80
   322  001DB4  56                 	db	86
   323  001DB5  34                 	db	52
   324  001DB6  56                 	db	86
   325  001DB7  36                 	db	54
   326  001DB8  22                 	db	34
   327  001DB9  2C                 	db	44
   328  001DBA  22                 	db	34
   329  001DBB  77                 	db	119
   330  001DBC  79                 	db	121
   331  001DBD  6C                 	db	108
   332  001DBE  65                 	db	101
   333  001DBF  73                 	db	115
   334  001DC0  6C                 	db	108
   335  001DC1  74                 	db	116
   336  001DC2  65                 	db	101
   337  001DC3  2E                 	db	46
   338  001DC4  67                 	db	103
   339  001DC5  77                 	db	119
   340  001DC6  37                 	db	55
   341  001DC7  2E                 	db	46
   342  001DC8  76                 	db	118
   343  001DC9  7A                 	db	122
   344  001DCA  77                 	db	119
   345  001DCB  65                 	db	101
   346  001DCC  6E                 	db	110
   347  001DCD  74                 	db	116
   348  001DCE  70                 	db	112
   349  001DCF  22                 	db	34
   350  001DD0  0D                 	db	13
   351  001DD1  0A                 	db	10
   352  001DD2  00                 	db	0
   353                           
   354                           	psect	smallconst
   355  001000                     __psmallconst:
   356                           	opt stack 0
   357  001000  00                 	db	0
   358  001001                     send_over_socket_ok@F6886:
   359                           	opt stack 0
   360  001001  41                 	db	65
   361  001002  54                 	db	84
   362  001003  23                 	db	35
   363  001004  53                 	db	83
   364  001005  44                 	db	68
   365  001006  3D                 	db	61
   366  001007  31                 	db	49
   367  001008  2C                 	db	44
   368  001009  30                 	db	48
   369  00100A  2C                 	db	44
   370  00100B  31                 	db	49
   371  00100C  30                 	db	48
   372  00100D  35                 	db	53
   373  00100E  31                 	db	49
   374  00100F  30                 	db	48
   375  001010  2C                 	db	44
   376  001011  22                 	db	34
   377  001012  6D                 	db	109
   378  001013  6F                 	db	111
   379  001014  64                 	db	100
   380  001015  75                 	db	117
   381  001016  6C                 	db	108
   382  001017  65                 	db	101
   383  001018  73                 	db	115
   384  001019  2E                 	db	46
   385  00101A  74                 	db	116
   386  00101B  65                 	db	101
   387  00101C  6C                 	db	108
   388  00101D  69                 	db	105
   389  00101E  74                 	db	116
   390  00101F  2E                 	db	46
   391  001020  63                 	db	99
   392  001021  6F                 	db	111
   393  001022  6D                 	db	109
   394  001023  22                 	db	34
   395  001024  2C                 	db	44
   396  001025  30                 	db	48
   397  001026  2C                 	db	44
   398  001027  30                 	db	48
   399  001028  2C                 	db	44
   400  001029  31                 	db	49
   401  00102A  0D                 	db	13
   402  00102B  0A                 	db	10
   403  00102C  00                 	db	0
   404  00102D                     __end_ofsend_over_socket_ok@F6886:
   405                           	opt stack 0
   406  00102D                     close_socket_ok@F6904:
   407                           	opt stack 0
   408  00102D  41                 	db	65
   409  00102E  54                 	db	84
   410  00102F  23                 	db	35
   411  001030  46                 	db	70
   412  001031  41                 	db	65
   413  001032  53                 	db	83
   414  001033  54                 	db	84
   415  001034  53                 	db	83
   416  001035  59                 	db	89
   417  001036  53                 	db	83
   418  001037  48                 	db	72
   419  001038  41                 	db	65
   420  001039  4C                 	db	76
   421  00103A  54                 	db	84
   422  00103B  0D                 	db	13
   423  00103C  0A                 	db	10
   424  00103D  00                 	db	0
   425  00103E                     __end_ofclose_socket_ok@F6904:
   426                           	opt stack 0
   427  00103E                     send_over_socket_ok@F6890:
   428                           	opt stack 0
   429  00103E  41                 	db	65
   430  00103F  54                 	db	84
   431  001040  23                 	db	35
   432  001041  53                 	db	83
   433  001042  52                 	db	82
   434  001043  45                 	db	69
   435  001044  43                 	db	67
   436  001045  56                 	db	86
   437  001046  3D                 	db	61
   438  001047  31                 	db	49
   439  001048  2C                 	db	44
   440  001049  38                 	db	56
   441  00104A  39                 	db	57
   442  00104B  0D                 	db	13
   443  00104C  0A                 	db	10
   444  00104D  00                 	db	0
   445  00104E                     __end_ofsend_over_socket_ok@F6890:
   446                           	opt stack 0
   447  00104E                     close_socket_ok@F6902:
   448                           	opt stack 0
   449  00104E  41                 	db	65
   450  00104F  54                 	db	84
   451  001050  23                 	db	35
   452  001051  53                 	db	83
   453  001052  47                 	db	71
   454  001053  41                 	db	65
   455  001054  43                 	db	67
   456  001055  54                 	db	84
   457  001056  3D                 	db	61
   458  001057  33                 	db	51
   459  001058  2C                 	db	44
   460  001059  30                 	db	48
   461  00105A  0D                 	db	13
   462  00105B  0A                 	db	10
   463  00105C  00                 	db	0
   464  00105D                     __end_ofclose_socket_ok@F6902:
   465                           	opt stack 0
   466  00105D                     send_over_socket_ok@F6888:
   467                           	opt stack 0
   468  00105D  41                 	db	65
   469  00105E  54                 	db	84
   470  00105F  23                 	db	35
   471  001060  53                 	db	83
   472  001061  53                 	db	83
   473  001062  45                 	db	69
   474  001063  4E                 	db	78
   475  001064  44                 	db	68
   476  001065  3D                 	db	61
   477  001066  31                 	db	49
   478  001067  0D                 	db	13
   479  001068  0A                 	db	10
   480  001069  00                 	db	0
   481  00106A                     __end_ofsend_over_socket_ok@F6888:
   482                           	opt stack 0
   483  00106A                     close_socket_ok@F6900:
   484                           	opt stack 0
   485  00106A  41                 	db	65
   486  00106B  54                 	db	84
   487  00106C  23                 	db	35
   488  00106D  53                 	db	83
   489  00106E  48                 	db	72
   490  00106F  3D                 	db	61
   491  001070  31                 	db	49
   492  001071  0D                 	db	13
   493  001072  0A                 	db	10
   494  001073  00                 	db	0
   495  001074                     __end_ofclose_socket_ok@F6900:
   496                           	opt stack 0
   497  001074                     send_over_socket_ok@F6892:
   498                           	opt stack 0
   499  001074  45                 	db	69
   500  001075  63                 	db	99
   501  001076  68                 	db	104
   502  001077  6F                 	db	111
   503  001078  2E                 	db	46
   504  001079  0D                 	db	13
   505  00107A  0A                 	db	10
   506  00107B  00                 	db	0
   507  00107C                     __end_ofsend_over_socket_ok@F6892:
   508                           	opt stack 0
   509  00107C                     _VERSION:
   510                           	opt stack 0
   511  00107C  32                 	db	50
   512  00107D  30                 	db	48
   513  00107E  32                 	db	50
   514  00107F  30                 	db	48
   515  001080  00                 	db	0
   516  001081                     __end_of_VERSION:
   517                           	opt stack 0
   518  0000                     _ANSELB	set	3897
   519  0000                     _ANSELC	set	3898
   520  0000                     _ANSELA	set	3896
   521  0000                     _TX1REG	set	4013
   522  0000                     _PIR1bits	set	3998
   523  0000                     _RCSTA1bits	set	4011
   524  0000                     _RC1STAbits	set	4011
   525  0000                     _SPBRG1	set	4015
   526  0000                     _SPBRGH1	set	4016
   527  0000                     _TXSTA1bits	set	4012
   528  0000                     _BAUDCONbits	set	4024
   529  0000                     _BAUDCON1bits	set	4024
   530  0000                     _TMR3L	set	4018
   531  0000                     _TMR3H	set	4019
   532  0000                     _INTCONbits	set	4082
   533  0000                     _PIR2bits	set	4001
   534  0000                     _PIE2bits	set	4000
   535  0000                     _T3CONbits	set	4017
   536  0000                     _T3CON	set	4017
   537  0000                     _TMR0L	set	4054
   538  0000                     _TMR0H	set	4055
   539  0000                     _T0CON	set	4053
   540  0000                     _LATBbits	set	3978
   541  0000                     _TRISB	set	3987
   542  0000                     _LATCbits	set	3979
   543  0000                     _TRISCbits	set	3988
   544  0000                     _PORTCbits	set	3970
   545  0000                     _TRISBbits	set	3987
   546  0000                     _TRISC	set	3988
   547  0000                     _PORTAbits	set	3968
   548  0000                     _TRISAbits	set	3986
   549  0000                     _TRISA	set	3986
   550  0000                     _OSCCONbits	set	4051
   551  0000                     _PORTBbits	set	3969
   552  0000                     _RC1REG	set	4014
   553  0000                     _PIE1bits	set	3997
   554  0000                     _TRMT1	set	32097
   555  0000                     _RC1IE	set	31981
   556  0000                     _CREN1	set	32092
   557  0000                     _GIE	set	32663
   558  0000                     _TMR0IF	set	32658
   559  0000                     _TMR3IF	set	32009
   560  0000                     _RC1IF	set	31989
   561                           
   562                           ; #config settings
   563  001081  00                 	db	0	; dummy byte at the end
   564  0000                     
   565                           	psect	cinit
   566  001A82                     __pcinit:
   567                           	opt stack 0
   568  001A82                     start_initialization:
   569                           	opt stack 0
   570  001A82                     __initialization:
   571                           	opt stack 0
   572                           
   573                           ; Initialize objects allocated to BANK2 (47 bytes)
   574                           ; load TBLPTR registers with __pidataBANK2
   575  001A82  0EA4               	movlw	low __pidataBANK2
   576  001A84  6EF6               	movwf	tblptrl,c
   577  001A86  0E1D               	movlw	high __pidataBANK2
   578  001A88  6EF7               	movwf	tblptrh,c
   579  001A8A  0E00               	movlw	low (__pidataBANK2 shr (0+16))
   580  001A8C  6EF8               	movwf	tblptru,c
   581  001A8E  EE02  F0C0         	lfsr	0,__pdataBANK2
   582  001A92  EE10 F02F          	lfsr	1,47
   583  001A96                     copy_data0:
   584  001A96  0009               	tblrd		*+
   585  001A98  CFF5 FFEE          	movff	tablat,postinc0
   586  001A9C  50E5               	movf	postdec1,w,c
   587  001A9E  50E1               	movf	fsr1l,w,c
   588  001AA0  E1FA               	bnz	copy_data0
   589                           
   590                           ; Initialize objects allocated to BANK1 (119 bytes)
   591                           ; load TBLPTR registers with __pidataBANK1
   592  001AA2  0E50               	movlw	low __pidataBANK1
   593  001AA4  6EF6               	movwf	tblptrl,c
   594  001AA6  0E1C               	movlw	high __pidataBANK1
   595  001AA8  6EF7               	movwf	tblptrh,c
   596  001AAA  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   597  001AAC  6EF8               	movwf	tblptru,c
   598  001AAE  EE01  F000         	lfsr	0,__pdataBANK1
   599  001AB2  EE10 F077          	lfsr	1,119
   600  001AB6                     copy_data1:
   601  001AB6  0009               	tblrd		*+
   602  001AB8  CFF5 FFEE          	movff	tablat,postinc0
   603  001ABC  50E5               	movf	postdec1,w,c
   604  001ABE  50E1               	movf	fsr1l,w,c
   605  001AC0  E1FA               	bnz	copy_data1
   606                           
   607                           ; Initialize objects allocated to BANK0 (12 bytes)
   608                           ; load TBLPTR registers with __pidataBANK0
   609  001AC2  0E92               	movlw	low __pidataBANK0
   610  001AC4  6EF6               	movwf	tblptrl,c
   611  001AC6  0E1E               	movlw	high __pidataBANK0
   612  001AC8  6EF7               	movwf	tblptrh,c
   613  001ACA  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   614  001ACC  6EF8               	movwf	tblptru,c
   615  001ACE  EE00  F0D1         	lfsr	0,__pdataBANK0
   616  001AD2  EE10 F00C          	lfsr	1,12
   617  001AD6                     copy_data2:
   618  001AD6  0009               	tblrd		*+
   619  001AD8  CFF5 FFEE          	movff	tablat,postinc0
   620  001ADC  50E5               	movf	postdec1,w,c
   621  001ADE  50E1               	movf	fsr1l,w,c
   622  001AE0  E1FA               	bnz	copy_data2
   623                           
   624                           ; Initialize objects allocated to COMRAM (43 bytes)
   625                           ; load TBLPTR registers with __pidataCOMRAM
   626  001AE2  0ED3               	movlw	low __pidataCOMRAM
   627  001AE4  6EF6               	movwf	tblptrl,c
   628  001AE6  0E1D               	movlw	high __pidataCOMRAM
   629  001AE8  6EF7               	movwf	tblptrh,c
   630  001AEA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   631  001AEC  6EF8               	movwf	tblptru,c
   632  001AEE  EE00  F001         	lfsr	0,__pdataCOMRAM
   633  001AF2  EE10 F02B          	lfsr	1,43
   634  001AF6                     copy_data3:
   635  001AF6  0009               	tblrd		*+
   636  001AF8  CFF5 FFEE          	movff	tablat,postinc0
   637  001AFC  50E5               	movf	postdec1,w,c
   638  001AFE  50E1               	movf	fsr1l,w,c
   639  001B00  E1FA               	bnz	copy_data3
   640                           
   641                           ; Clear objects allocated to BANK2 (60 bytes)
   642  001B02  EE02  F084         	lfsr	0,__pbssBANK2
   643  001B06  0E3C               	movlw	60
   644  001B08                     clear_0:
   645  001B08  6AEE               	clrf	postinc0,c
   646  001B0A  06E8               	decf	wreg,f,c
   647  001B0C  E1FD               	bnz	clear_0
   648                           
   649                           ; Clear objects allocated to BANK1 (100 bytes)
   650  001B0E  EE01  F077         	lfsr	0,__pbssBANK1
   651  001B12  0E64               	movlw	100
   652  001B14                     clear_1:
   653  001B14  6AEE               	clrf	postinc0,c
   654  001B16  06E8               	decf	wreg,f,c
   655  001B18  E1FD               	bnz	clear_1
   656                           
   657                           ; Clear objects allocated to BANK0 (16 bytes)
   658  001B1A  EE00  F0C1         	lfsr	0,__pbssBANK0
   659  001B1E  0E10               	movlw	16
   660  001B20                     clear_2:
   661  001B20  6AEE               	clrf	postinc0,c
   662  001B22  06E8               	decf	wreg,f,c
   663  001B24  E1FD               	bnz	clear_2
   664                           
   665                           ; Clear objects allocated to COMRAM (17 bytes)
   666  001B26  EE00  F044         	lfsr	0,__pbssCOMRAM
   667  001B2A  0E11               	movlw	17
   668  001B2C                     clear_3:
   669  001B2C  6AEE               	clrf	postinc0,c
   670  001B2E  06E8               	decf	wreg,f,c
   671  001B30  E1FD               	bnz	clear_3
   672  001B32                     end_of_initialization:
   673                           	opt stack 0
   674  001B32                     __end_of__initialization:
   675                           	opt stack 0
   676  001B32  9055               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   677  001B34  9255               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   678  001B36  0E00               	movlw	low (__Lmediumconst shr (0+16))
   679  001B38  6EF8               	movwf	tblptru,c
   680  001B3A  0100               	movlb	0
   681  001B3C  EFFF  F00E         	goto	_main	;jump to C main() function
   682                           tblptru	equ	0xFF8
   683                           tblptrh	equ	0xFF7
   684                           tblptrl	equ	0xFF6
   685                           tablat	equ	0xFF5
   686                           postinc0	equ	0xFEE
   687                           wreg	equ	0xFE8
   688                           postdec1	equ	0xFE5
   689                           fsr1l	equ	0xFE1
   690                           
   691                           	psect	bssCOMRAM
   692  000044                     __pbssCOMRAM:
   693                           	opt stack 0
   694  000044                     _tmr3_cnt:
   695                           	opt stack 0
   696  000044                     	ds	4
   697  000048                     _lastChar:
   698                           	opt stack 0
   699  000048                     	ds	1
   700  000049                     _currentChar:
   701                           	opt stack 0
   702  000049                     	ds	1
   703  00004A                     _awake:
   704                           	opt stack 0
   705  00004A                     	ds	1
   706  00004B                     _timedOut:
   707                           	opt stack 0
   708  00004B                     	ds	1
   709  00004C                     _receivedCarat:
   710                           	opt stack 0
   711  00004C                     	ds	1
   712  00004D                     _receivedRESP:
   713                           	opt stack 0
   714  00004D                     	ds	1
   715  00004E                     _receivedERR:
   716                           	opt stack 0
   717  00004E                     	ds	1
   718  00004F                     _receivedOK:
   719                           	opt stack 0
   720  00004F                     	ds	1
   721  000050                     _endPtr:
   722                           	opt stack 0
   723  000050                     	ds	1
   724  000051                     _atCmdState:
   725                           	opt stack 0
   726  000051                     	ds	1
   727  000052                     _tmr5_cnt:
   728                           	opt stack 0
   729  000052                     	ds	1
   730  000053                     _ledPatternCount:
   731                           	opt stack 0
   732  000053                     	ds	1
   733  000054                     _ledPattern:
   734                           	opt stack 0
   735  000054                     	ds	1
   736                           tblptru	equ	0xFF8
   737                           tblptrh	equ	0xFF7
   738                           tblptrl	equ	0xFF6
   739                           tablat	equ	0xFF5
   740                           postinc0	equ	0xFEE
   741                           wreg	equ	0xFE8
   742                           postdec1	equ	0xFE5
   743                           fsr1l	equ	0xFE1
   744                           
   745                           	psect	dataCOMRAM
   746  000001                     __pdataCOMRAM:
   747                           	opt stack 0
   748  000001                     send_md_cfg_cmds_ok@F6857:
   749                           	opt stack 0
   750  000001                     	ds	11
   751  00000C                     send_md_cfg_cmds_ok@F6855:
   752                           	opt stack 0
   753  00000C                     	ds	11
   754  000017                     send_md_cfg_cmds_ok@F6853:
   755                           	opt stack 0
   756  000017                     	ds	10
   757  000021                     send_md_cfg_cmds_ok@F6863:
   758                           	opt stack 0
   759  000021                     	ds	9
   760  00002A                     _toggle:
   761                           	opt stack 0
   762  00002A                     	ds	1
   763  00002B                     _numRetries:
   764                           	opt stack 0
   765  00002B                     	ds	1
   766                           tblptru	equ	0xFF8
   767                           tblptrh	equ	0xFF7
   768                           tblptrl	equ	0xFF6
   769                           tablat	equ	0xFF5
   770                           postinc0	equ	0xFEE
   771                           wreg	equ	0xFE8
   772                           postdec1	equ	0xFE5
   773                           fsr1l	equ	0xFE1
   774                           
   775                           	psect	bssBANK0
   776  0000C1                     __pbssBANK0:
   777                           	opt stack 0
   778  0000C1                     _extendedTimer:
   779                           	opt stack 0
   780  0000C1                     	ds	1
   781  0000C2                     _sentAT12:
   782                           	opt stack 0
   783  0000C2                     	ds	1
   784  0000C3                     _sentAT11:
   785                           	opt stack 0
   786  0000C3                     	ds	1
   787  0000C4                     _sentAT10:
   788                           	opt stack 0
   789  0000C4                     	ds	1
   790  0000C5                     _sentAT9:
   791                           	opt stack 0
   792  0000C5                     	ds	1
   793  0000C6                     _sentAT8:
   794                           	opt stack 0
   795  0000C6                     	ds	1
   796  0000C7                     _sentAT7:
   797                           	opt stack 0
   798  0000C7                     	ds	1
   799  0000C8                     _sentAT6:
   800                           	opt stack 0
   801  0000C8                     	ds	1
   802  0000C9                     _sentAT5:
   803                           	opt stack 0
   804  0000C9                     	ds	1
   805  0000CA                     _sentAT4:
   806                           	opt stack 0
   807  0000CA                     	ds	1
   808  0000CB                     _sentAT3:
   809                           	opt stack 0
   810  0000CB                     	ds	1
   811  0000CC                     _sentAT2:
   812                           	opt stack 0
   813  0000CC                     	ds	1
   814  0000CD                     _sentAT1:
   815                           	opt stack 0
   816  0000CD                     	ds	1
   817  0000CE                     _pdpIsActive:
   818                           	opt stack 0
   819  0000CE                     	ds	1
   820  0000CF                     _bootTimerIsDone:
   821                           	opt stack 0
   822  0000CF                     	ds	1
   823  0000D0                     _md_state:
   824                           	opt stack 0
   825  0000D0                     	ds	1
   826                           tblptru	equ	0xFF8
   827                           tblptrh	equ	0xFF7
   828                           tblptrl	equ	0xFF6
   829                           tablat	equ	0xFF5
   830                           postinc0	equ	0xFEE
   831                           wreg	equ	0xFE8
   832                           postdec1	equ	0xFE5
   833                           fsr1l	equ	0xFE1
   834                           
   835                           	psect	dataBANK0
   836  0000D1                     __pdataBANK0:
   837                           	opt stack 0
   838  0000D1                     send_md_cfg_cmds_ok@F6843:
   839                           	opt stack 0
   840  0000D1                     	ds	7
   841  0000D8                     send_md_cfg_cmds_ok@F6841:
   842                           	opt stack 0
   843  0000D8                     	ds	5
   844                           tblptru	equ	0xFF8
   845                           tblptrh	equ	0xFF7
   846                           tblptrl	equ	0xFF6
   847                           tablat	equ	0xFF5
   848                           postinc0	equ	0xFEE
   849                           wreg	equ	0xFE8
   850                           postdec1	equ	0xFE5
   851                           fsr1l	equ	0xFE1
   852                           
   853                           	psect	bssBANK1
   854  000177                     __pbssBANK1:
   855                           	opt stack 0
   856  000177                     _mdRxBuf:
   857                           	opt stack 0
   858  000177                     	ds	100
   859                           tblptru	equ	0xFF8
   860                           tblptrh	equ	0xFF7
   861                           tblptrl	equ	0xFF6
   862                           tablat	equ	0xFF5
   863                           postinc0	equ	0xFEE
   864                           wreg	equ	0xFE8
   865                           postdec1	equ	0xFE5
   866                           fsr1l	equ	0xFE1
   867                           
   868                           	psect	dataBANK1
   869  000100                     __pdataBANK1:
   870                           	opt stack 0
   871  000100                     setup_data_ok@F6879:
   872                           	opt stack 0
   873  000100                     	ds	25
   874  000119                     send_md_cfg_cmds_ok@F6849:
   875                           	opt stack 0
   876  000119                     	ds	16
   877  000129                     send_md_cfg_cmds_ok@F6847:
   878                           	opt stack 0
   879  000129                     	ds	16
   880  000139                     setup_data_ok@F6881:
   881                           	opt stack 0
   882  000139                     	ds	15
   883  000148                     send_md_cfg_cmds_ok@F6859:
   884                           	opt stack 0
   885  000148                     	ds	12
   886  000154                     send_md_cfg_cmds_ok@F6851:
   887                           	opt stack 0
   888  000154                     	ds	12
   889  000160                     send_md_cfg_cmds_ok@F6845:
   890                           	opt stack 0
   891  000160                     	ds	12
   892  00016C                     send_md_cfg_cmds_ok@F6861:
   893                           	opt stack 0
   894  00016C                     	ds	11
   895                           tblptru	equ	0xFF8
   896                           tblptrh	equ	0xFF7
   897                           tblptrl	equ	0xFF6
   898                           tablat	equ	0xFF5
   899                           postinc0	equ	0xFEE
   900                           wreg	equ	0xFE8
   901                           postdec1	equ	0xFE5
   902                           fsr1l	equ	0xFE1
   903                           
   904                           	psect	bssBANK2
   905  000284                     __pbssBANK2:
   906                           	opt stack 0
   907  000284                     _referenceBuf:
   908                           	opt stack 0
   909  000284                     	ds	60
   910                           tblptru	equ	0xFF8
   911                           tblptrh	equ	0xFF7
   912                           tblptrl	equ	0xFF6
   913                           tablat	equ	0xFF5
   914                           postinc0	equ	0xFEE
   915                           wreg	equ	0xFE8
   916                           postdec1	equ	0xFE5
   917                           fsr1l	equ	0xFE1
   918                           
   919                           	psect	dataBANK2
   920  0002C0                     __pdataBANK2:
   921                           	opt stack 0
   922  0002C0                     setup_data_ok@F6877:
   923                           	opt stack 0
   924  0002C0                     	ds	47
   925                           tblptru	equ	0xFF8
   926                           tblptrh	equ	0xFF7
   927                           tblptrl	equ	0xFF6
   928                           tablat	equ	0xFF5
   929                           postinc0	equ	0xFEE
   930                           wreg	equ	0xFE8
   931                           postdec1	equ	0xFE5
   932                           fsr1l	equ	0xFE1
   933                           
   934                           	psect	cstackBANK2
   935  000200                     __pcstackBANK2:
   936                           	opt stack 0
   937  000200                     send_md_cfg_cmds_ok@baud:
   938                           	opt stack 0
   939                           
   940                           ; 16 bytes @ 0x0
   941  000200                     	ds	16
   942  000210                     send_md_cfg_cmds_ok@ledCfg:
   943                           	opt stack 0
   944                           
   945                           ; 16 bytes @ 0x10
   946  000210                     	ds	16
   947  000220                     send_md_cfg_cmds_ok@cmee:
   948                           	opt stack 0
   949                           
   950                           ; 12 bytes @ 0x20
   951  000220                     	ds	12
   952  00022C                     send_md_cfg_cmds_ok@ledpattern:
   953                           	opt stack 0
   954                           
   955                           ; 12 bytes @ 0x2C
   956  00022C                     	ds	12
   957  000238                     send_md_cfg_cmds_ok@cereg:
   958                           	opt stack 0
   959                           
   960                           ; 12 bytes @ 0x38
   961  000238                     	ds	12
   962  000244                     send_md_cfg_cmds_ok@cpin:
   963                           	opt stack 0
   964                           
   965                           ; 11 bytes @ 0x44
   966  000244                     	ds	11
   967  00024F                     send_md_cfg_cmds_ok@creg:
   968                           	opt stack 0
   969                           
   970                           ; 11 bytes @ 0x4F
   971  00024F                     	ds	11
   972  00025A                     send_md_cfg_cmds_ok@gprs:
   973                           	opt stack 0
   974                           
   975                           ; 11 bytes @ 0x5A
   976  00025A                     	ds	11
   977  000265                     send_md_cfg_cmds_ok@queryVersion:
   978                           	opt stack 0
   979                           
   980                           ; 10 bytes @ 0x65
   981  000265                     	ds	10
   982  00026F                     send_md_cfg_cmds_ok@csq:
   983                           	opt stack 0
   984                           
   985                           ; 9 bytes @ 0x6F
   986  00026F                     	ds	9
   987  000278                     send_md_cfg_cmds_ok@ate:
   988                           	opt stack 0
   989                           
   990                           ; 7 bytes @ 0x78
   991  000278                     	ds	7
   992  00027F                     send_md_cfg_cmds_ok@at:
   993                           	opt stack 0
   994                           
   995                           ; 5 bytes @ 0x7F
   996  00027F                     	ds	5
   997                           tblptru	equ	0xFF8
   998                           tblptrh	equ	0xFF7
   999                           tblptrl	equ	0xFF6
  1000                           tablat	equ	0xFF5
  1001                           postinc0	equ	0xFEE
  1002                           wreg	equ	0xFE8
  1003                           postdec1	equ	0xFE5
  1004                           fsr1l	equ	0xFE1
  1005                           
  1006                           	psect	cstackBANK0
  1007  000060                     __pcstackBANK0:
  1008                           	opt stack 0
  1009  000060                     ??_start_modem_send_process:
  1010  000060                     md_uart_send@data:
  1011                           	opt stack 0
  1012                           
  1013                           ; 1 bytes @ 0x0
  1014  000060                     	ds	1
  1015  000061                     md_uart_write_str_ok@data:
  1016                           	opt stack 0
  1017                           
  1018                           ; 2 bytes @ 0x1
  1019  000061                     	ds	1
  1020  000062                     start_modem_send_process@newEvent:
  1021                           	opt stack 0
  1022                           
  1023                           ; 1 bytes @ 0x2
  1024  000062                     	ds	1
  1025  000063                     md_uart_write_str_ok@len:
  1026                           	opt stack 0
  1027  000063                     start_modem_send_process@i:
  1028                           	opt stack 0
  1029                           
  1030                           ; 1 bytes @ 0x3
  1031  000063                     	ds	1
  1032  000064                     md_uart_write_str_ok@wantOK:
  1033                           	opt stack 0
  1034                           
  1035                           ; 1 bytes @ 0x4
  1036  000064                     	ds	1
  1037  000065                     md_uart_write_str_ok@waitToSendMoreData:
  1038                           	opt stack 0
  1039                           
  1040                           ; 1 bytes @ 0x5
  1041  000065                     	ds	1
  1042  000066                     ??_md_uart_write_str_ok:
  1043                           
  1044                           ; 1 bytes @ 0x6
  1045  000066                     	ds	1
  1046  000067                     md_uart_write_str_ok@currentChar:
  1047                           	opt stack 0
  1048                           
  1049                           ; 1 bytes @ 0x7
  1050  000067                     	ds	1
  1051  000068                     md_uart_write_str_ok@index:
  1052                           	opt stack 0
  1053                           
  1054                           ; 1 bytes @ 0x8
  1055  000068                     	ds	1
  1056  000069                     close_socket_ok@syshalt:
  1057                           	opt stack 0
  1058  000069                     send_over_socket_ok@openConnection:
  1059                           	opt stack 0
  1060  000069                     setup_data_ok@setApn:
  1061                           	opt stack 0
  1062                           
  1063                           ; 47 bytes @ 0x9
  1064  000069                     	ds	17
  1065  00007A                     close_socket_ok@deactivatePDP:
  1066                           	opt stack 0
  1067                           
  1068                           ; 15 bytes @ 0x1A
  1069  00007A                     	ds	15
  1070  000089                     close_socket_ok@closeSocket:
  1071                           	opt stack 0
  1072                           
  1073                           ; 10 bytes @ 0x29
  1074  000089                     	ds	12
  1075  000095                     send_over_socket_ok@srecv:
  1076                           	opt stack 0
  1077                           
  1078                           ; 16 bytes @ 0x35
  1079  000095                     	ds	3
  1080  000098                     setup_data_ok@cfgSocket:
  1081                           	opt stack 0
  1082                           
  1083                           ; 25 bytes @ 0x38
  1084  000098                     	ds	13
  1085  0000A5                     send_over_socket_ok@ssend:
  1086                           	opt stack 0
  1087                           
  1088                           ; 13 bytes @ 0x45
  1089  0000A5                     	ds	12
  1090  0000B1                     setup_data_ok@activatePDP:
  1091                           	opt stack 0
  1092                           
  1093                           ; 15 bytes @ 0x51
  1094  0000B1                     	ds	1
  1095  0000B2                     send_over_socket_ok@msg:
  1096                           	opt stack 0
  1097                           
  1098                           ; 8 bytes @ 0x52
  1099  0000B2                     	ds	8
  1100  0000BA                     send_over_socket_ok@terminateData:
  1101                           	opt stack 0
  1102                           
  1103                           ; 1 bytes @ 0x5A
  1104  0000BA                     	ds	6
  1105  0000C0                     ??_main:
  1106                           
  1107                           ; 1 bytes @ 0x60
  1108  0000C0                     	ds	1
  1109                           tblptru	equ	0xFF8
  1110                           tblptrh	equ	0xFF7
  1111                           tblptrl	equ	0xFF6
  1112                           tablat	equ	0xFF5
  1113                           postinc0	equ	0xFEE
  1114                           wreg	equ	0xFE8
  1115                           postdec1	equ	0xFE5
  1116                           fsr1l	equ	0xFE1
  1117                           
  1118                           	psect	cstackCOMRAM
  1119  00002C                     __pcstackCOMRAM:
  1120                           	opt stack 0
  1121  00002C                     ??_check_mdstate_tmr3:
  1122  00002C                     
  1123                           ; 1 bytes @ 0x0
  1124  00002C                     	ds	1
  1125  00002D                     ??_isr:
  1126                           
  1127                           ; 1 bytes @ 0x1
  1128  00002D                     	ds	23
  1129                           tblptru	equ	0xFF8
  1130                           tblptrh	equ	0xFF7
  1131                           tblptrl	equ	0xFF6
  1132                           tablat	equ	0xFF5
  1133                           postinc0	equ	0xFEE
  1134                           wreg	equ	0xFE8
  1135                           postdec1	equ	0xFE5
  1136                           fsr1l	equ	0xFE1
  1137                           
  1138 ;;
  1139 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1140 ;;
  1141 ;; *************** function _main *****************
  1142 ;; Defined at:
  1143 ;;		line 70 in file "main.c"
  1144 ;; Parameters:    Size  Location     Type
  1145 ;;		None
  1146 ;; Auto vars:     Size  Location     Type
  1147 ;;		None
  1148 ;; Return value:  Size  Location     Type
  1149 ;;                  1    wreg      void 
  1150 ;; Registers used:
  1151 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1152 ;; Tracked objects:
  1153 ;;		On entry : 0/0
  1154 ;;		On exit  : 0/0
  1155 ;;		Unchanged: 0/0
  1156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1159 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1160 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1161 ;;Total ram usage:        1 bytes
  1162 ;; Hardware stack levels required when called:    8
  1163 ;; This function calls:
  1164 ;;		_check_modem_state
  1165 ;;		_init_pic
  1166 ;;		_start_modem_send_process
  1167 ;; This function is called by:
  1168 ;;		Startup code after reset
  1169 ;; This function uses a non-reentrant model
  1170 ;;
  1171                           
  1172                           	psect	text0
  1173  001DFE                     __ptext0:
  1174                           	opt stack 0
  1175  001DFE                     _main:
  1176                           	opt stack 23
  1177                           
  1178                           ;main.c: 72: init_pic();
  1179                           
  1180                           ;incstack = 0
  1181  001DFE  ECE8  F00D         	call	_init_pic	;wreg free
  1182  001E02                     
  1183                           ;main.c: 78: {
  1184                           ;main.c: 79: if (PORTBbits.RB4)
  1185  001E02  A881               	btfss	3969,4,c	;volatile
  1186  001E04  D00E               	goto	l139
  1187                           
  1188                           ;main.c: 80: {
  1189                           ;main.c: 81: _delay((unsigned long)((50)*(8000000/4000.0)));
  1190  001E06  0E82               	movlw	130
  1191  001E08  0100               	movlb	0	; () banked
  1192  001E0A  6FC0               	movwf	??_main& (0+255),b
  1193  001E0C  0EDD               	movlw	221
  1194  001E0E                     u4367:
  1195  001E0E  2EE8               	decfsz	wreg,f,c
  1196  001E10  D7FE               	bra	u4367
  1197  001E12  2FC0               	decfsz	??_main& (0+255),f,b
  1198  001E14  D7FC               	bra	u4367
  1199  001E16  D000               	nop2	
  1200                           
  1201                           ;main.c: 82: if (PORTBbits.RB4)
  1202  001E18  A881               	btfss	3969,4,c	;volatile
  1203  001E1A  D003               	goto	l139
  1204                           
  1205                           ;main.c: 83: {
  1206                           ;main.c: 84: start_modem_send_process('T');
  1207  001E1C  0E54               	movlw	84
  1208  001E1E  EC64  F00E         	call	_start_modem_send_process
  1209  001E22                     l139:
  1210                           
  1211                           ;main.c: 85: }
  1212                           ;main.c: 86: }
  1213                           ;main.c: 87: check_modem_state();
  1214  001E22  ECA0  F00D         	call	_check_modem_state	;wreg free
  1215  001E26  D7ED               	goto	l137
  1216  001E28                     __end_of_main:
  1217                           	opt stack 0
  1218                           tblptru	equ	0xFF8
  1219                           tblptrh	equ	0xFF7
  1220                           tblptrl	equ	0xFF6
  1221                           tablat	equ	0xFF5
  1222                           postinc0	equ	0xFEE
  1223                           wreg	equ	0xFE8
  1224                           postdec1	equ	0xFE5
  1225                           fsr1l	equ	0xFE1
  1226                           
  1227 ;; *************** function _init_pic *****************
  1228 ;; Defined at:
  1229 ;;		line 91 in file "main.c"
  1230 ;; Parameters:    Size  Location     Type
  1231 ;;		None
  1232 ;; Auto vars:     Size  Location     Type
  1233 ;;		None
  1234 ;; Return value:  Size  Location     Type
  1235 ;;                  1    wreg      void 
  1236 ;; Registers used:
  1237 ;;		wreg, status,2
  1238 ;; Tracked objects:
  1239 ;;		On entry : 0/0
  1240 ;;		On exit  : 0/0
  1241 ;;		Unchanged: 0/0
  1242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1246 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1247 ;;Total ram usage:        0 bytes
  1248 ;; Hardware stack levels used:    1
  1249 ;; Hardware stack levels required when called:    3
  1250 ;; This function calls:
  1251 ;;		Nothing
  1252 ;; This function is called by:
  1253 ;;		_main
  1254 ;; This function uses a non-reentrant model
  1255 ;;
  1256                           
  1257                           	psect	text1
  1258  001BD0                     __ptext1:
  1259                           	opt stack 0
  1260  001BD0                     _init_pic:
  1261                           	opt stack 27
  1262                           
  1263                           ;main.c: 94: OSCCONbits.IDLEN = 0;
  1264                           
  1265                           ;incstack = 0
  1266  001BD0  9ED3               	bcf	4051,7,c	;volatile
  1267                           
  1268                           ;main.c: 95: OSCCONbits.IRCF = 0b101;
  1269  001BD2  50D3               	movf	4051,w,c	;volatile
  1270  001BD4  0B8F               	andlw	-113
  1271  001BD6  0950               	iorlw	80
  1272  001BD8  6ED3               	movwf	4051,c	;volatile
  1273                           
  1274                           ;main.c: 96: OSCCONbits.OSTS = 1;
  1275  001BDA  86D3               	bsf	4051,3,c	;volatile
  1276                           
  1277                           ;main.c: 100: ANSELA = 0x01;
  1278  001BDC  0E01               	movlw	1
  1279  001BDE  010F               	movlb	15	; () banked
  1280  001BE0  6F38               	movwf	56,b	;volatile
  1281                           
  1282                           ;main.c: 101: TRISA = 0b00000001;
  1283  001BE2  0E01               	movlw	1
  1284  001BE4  6E92               	movwf	3986,c	;volatile
  1285                           
  1286                           ; BSR set to: 15
  1287                           ;main.c: 103: TRISAbits.TRISA0 = 1;
  1288  001BE6  8092               	bsf	3986,0,c	;volatile
  1289                           
  1290                           ; BSR set to: 15
  1291                           ;main.c: 104: TRISAbits.TRISA3 = 0;
  1292  001BE8  9692               	bcf	3986,3,c	;volatile
  1293                           
  1294                           ; BSR set to: 15
  1295                           ;main.c: 105: PORTAbits.RA3 = 0;
  1296  001BEA  9680               	bcf	3968,3,c	;volatile
  1297                           
  1298                           ;main.c: 108: ANSELC = 0x00;
  1299  001BEC  0E00               	movlw	0
  1300  001BEE  6F3A               	movwf	58,b	;volatile
  1301                           
  1302                           ;main.c: 109: TRISC = 0b10000000;
  1303  001BF0  0E80               	movlw	128
  1304  001BF2  6E94               	movwf	3988,c	;volatile
  1305                           
  1306                           ; BSR set to: 15
  1307                           ;main.c: 110: PORTBbits.RB3 = 1;
  1308  001BF4  8681               	bsf	3969,3,c	;volatile
  1309                           
  1310                           ; BSR set to: 15
  1311                           ;main.c: 111: TRISBbits.TRISB3 = 0;
  1312  001BF6  9693               	bcf	3987,3,c	;volatile
  1313                           
  1314                           ; BSR set to: 15
  1315                           ;main.c: 112: PORTCbits.RC6 = 1;
  1316  001BF8  8C82               	bsf	3970,6,c	;volatile
  1317                           
  1318                           ; BSR set to: 15
  1319                           ;main.c: 113: TRISCbits.TRISC6 = 0;
  1320  001BFA  9C94               	bcf	3988,6,c	;volatile
  1321                           
  1322                           ; BSR set to: 15
  1323                           ;main.c: 114: LATCbits.LATC7 = 1;
  1324  001BFC  8E8B               	bsf	3979,7,c	;volatile
  1325                           
  1326                           ; BSR set to: 15
  1327                           ;main.c: 115: TRISCbits.TRISC7 = 1;
  1328  001BFE  8E94               	bsf	3988,7,c	;volatile
  1329                           
  1330                           ;main.c: 118: ANSELB = 0x00;
  1331  001C00  0E00               	movlw	0
  1332  001C02  6F39               	movwf	57,b	;volatile
  1333                           
  1334                           ;main.c: 119: TRISB = 0b10110111;
  1335  001C04  0EB7               	movlw	183
  1336  001C06  6E93               	movwf	3987,c	;volatile
  1337                           
  1338                           ; BSR set to: 15
  1339                           ;main.c: 121: TRISBbits.TRISB0 = 0;
  1340  001C08  9093               	bcf	3987,0,c	;volatile
  1341                           
  1342                           ; BSR set to: 15
  1343                           ;main.c: 122: TRISCbits.TRISC1 = 1;
  1344  001C0A  8294               	bsf	3988,1,c	;volatile
  1345                           
  1346                           ; BSR set to: 15
  1347                           ;main.c: 123: PORTBbits.RB1 = 1;
  1348  001C0C  8281               	bsf	3969,1,c	;volatile
  1349                           
  1350                           ; BSR set to: 15
  1351                           ;main.c: 124: TRISBbits.TRISB1 = 1;
  1352  001C0E  8293               	bsf	3987,1,c	;volatile
  1353                           
  1354                           ; BSR set to: 15
  1355                           ;main.c: 125: PORTBbits.RB2 = 1;
  1356  001C10  8481               	bsf	3969,2,c	;volatile
  1357                           
  1358                           ; BSR set to: 15
  1359                           ;main.c: 126: TRISBbits.TRISB2 = 1;
  1360  001C12  8493               	bsf	3987,2,c	;volatile
  1361                           
  1362                           ; BSR set to: 15
  1363                           ;main.c: 127: PORTCbits.RC4 = 1;
  1364  001C14  8882               	bsf	3970,4,c	;volatile
  1365                           
  1366                           ; BSR set to: 15
  1367                           ;main.c: 128: TRISCbits.TRISC4 = 0;
  1368  001C16  9894               	bcf	3988,4,c	;volatile
  1369                           
  1370                           ; BSR set to: 15
  1371                           ;main.c: 129: PORTBbits.RB4 = 1;
  1372  001C18  8881               	bsf	3969,4,c	;volatile
  1373                           
  1374                           ; BSR set to: 15
  1375                           ;main.c: 130: TRISBbits.TRISB4 = 1;
  1376  001C1A  8893               	bsf	3987,4,c	;volatile
  1377                           
  1378                           ; BSR set to: 15
  1379                           ;main.c: 131: PORTBbits.RB5 = 1;
  1380  001C1C  8A81               	bsf	3969,5,c	;volatile
  1381                           
  1382                           ; BSR set to: 15
  1383                           ;main.c: 132: TRISBbits.TRISB5 = 1;
  1384  001C1E  8A93               	bsf	3987,5,c	;volatile
  1385                           
  1386                           ; BSR set to: 15
  1387                           ;main.c: 133: LATBbits.LATB6 = 1;
  1388  001C20  8C8A               	bsf	3978,6,c	;volatile
  1389                           
  1390                           ; BSR set to: 15
  1391                           ;main.c: 134: TRISBbits.TRISB6 = 0;
  1392  001C22  9C93               	bcf	3987,6,c	;volatile
  1393                           
  1394                           ; BSR set to: 15
  1395                           ;main.c: 135: PORTBbits.RB7 = 1;
  1396  001C24  8E81               	bsf	3969,7,c	;volatile
  1397                           
  1398                           ; BSR set to: 15
  1399                           ;main.c: 136: TRISBbits.TRISB7 = 1;
  1400  001C26  8E93               	bsf	3987,7,c	;volatile
  1401                           
  1402                           ; BSR set to: 15
  1403                           ;main.c: 138: TRISAbits.TRISA1 = 0;
  1404  001C28  9292               	bcf	3986,1,c	;volatile
  1405                           
  1406                           ; BSR set to: 15
  1407                           ;main.c: 139: PORTAbits.RA1 = 0;
  1408  001C2A  9280               	bcf	3968,1,c	;volatile
  1409                           
  1410                           ;main.c: 146: T0CON = 0x87;
  1411  001C2C  0E87               	movlw	135
  1412  001C2E  6ED5               	movwf	4053,c	;volatile
  1413                           
  1414                           ;main.c: 147: TMR0H = ((65535-780)/256);
  1415  001C30  0EFC               	movlw	252
  1416  001C32  6ED7               	movwf	4055,c	;volatile
  1417                           
  1418                           ;main.c: 148: TMR0L = ((65535-780)%256);
  1419  001C34  0EF3               	movlw	243
  1420  001C36  6ED6               	movwf	4054,c	;volatile
  1421                           
  1422                           ; BSR set to: 15
  1423                           ;main.c: 149: TMR0IF = 0;
  1424  001C38  94F2               	bcf	intcon,2,c	;volatile
  1425                           
  1426                           ;main.c: 172: T3CON = 0b00000101;
  1427  001C3A  0E05               	movlw	5
  1428  001C3C  6EB1               	movwf	4017,c	;volatile
  1429                           
  1430                           ; BSR set to: 15
  1431                           ;main.c: 174: T3CONbits.TMR3ON = 0;
  1432  001C3E  90B1               	bcf	4017,0,c	;volatile
  1433                           
  1434                           ; BSR set to: 15
  1435                           ;main.c: 175: PIE2bits.TMR3IE = 1;
  1436  001C40  82A0               	bsf	4000,1,c	;volatile
  1437                           
  1438                           ; BSR set to: 15
  1439                           ;main.c: 176: PIR2bits.TMR3IF = 0;
  1440  001C42  92A1               	bcf	4001,1,c	;volatile
  1441                           
  1442                           ; BSR set to: 15
  1443                           ;main.c: 177: INTCONbits.PEIE = 1;
  1444  001C44  8CF2               	bsf	intcon,6,c	;volatile
  1445                           
  1446                           ; BSR set to: 15
  1447                           ;main.c: 178: INTCONbits.GIE = 1;
  1448  001C46  8EF2               	bsf	intcon,7,c	;volatile
  1449                           
  1450                           ;main.c: 181: md_state = IDLE;
  1451  001C48  0E00               	movlw	0
  1452  001C4A  0100               	movlb	0	; () banked
  1453  001C4C  6FD0               	movwf	_md_state& (0+255),b
  1454                           
  1455                           ; BSR set to: 0
  1456  001C4E  0012               	return		;funcret
  1457  001C50                     __end_of_init_pic:
  1458                           	opt stack 0
  1459                           tblptru	equ	0xFF8
  1460                           tblptrh	equ	0xFF7
  1461                           tblptrl	equ	0xFF6
  1462                           tablat	equ	0xFF5
  1463                           intcon	equ	0xFF2
  1464                           postinc0	equ	0xFEE
  1465                           wreg	equ	0xFE8
  1466                           postdec1	equ	0xFE5
  1467                           fsr1l	equ	0xFE1
  1468                           
  1469 ;; *************** function _check_modem_state *****************
  1470 ;; Defined at:
  1471 ;;		line 48 in file "modem.c"
  1472 ;; Parameters:    Size  Location     Type
  1473 ;;		None
  1474 ;; Auto vars:     Size  Location     Type
  1475 ;;		None
  1476 ;; Return value:  Size  Location     Type
  1477 ;;                  1    wreg      void 
  1478 ;; Registers used:
  1479 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1480 ;; Tracked objects:
  1481 ;;		On entry : 0/0
  1482 ;;		On exit  : 0/0
  1483 ;;		Unchanged: 0/0
  1484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1488 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1489 ;;Total ram usage:        0 bytes
  1490 ;; Hardware stack levels used:    1
  1491 ;; Hardware stack levels required when called:    7
  1492 ;; This function calls:
  1493 ;;		_close_socket_ok
  1494 ;;		_send_md_cfg_cmds_ok
  1495 ;;		_send_over_socket_ok
  1496 ;;		_setup_data_ok
  1497 ;; This function is called by:
  1498 ;;		_main
  1499 ;; This function uses a non-reentrant model
  1500 ;;
  1501                           
  1502                           	psect	text2
  1503  001B40                     __ptext2:
  1504                           	opt stack 0
  1505  001B40                     _check_modem_state:
  1506                           	opt stack 23
  1507                           
  1508                           ;modem.c: 50: switch (md_state)
  1509                           
  1510                           ; BSR set to: 0
  1511                           ;incstack = 0
  1512  001B40  D032               	goto	l403
  1513  001B42                     
  1514                           ;modem.c: 55: if (bootTimerIsDone)
  1515  001B42  0100               	movlb	0	; () banked
  1516  001B44  51CF               	movf	_bootTimerIsDone& (0+255),w,b
  1517  001B46  B4D8               	btfsc	status,2,c
  1518  001B48  0012               	return	
  1519                           
  1520                           ; BSR set to: 0
  1521                           ;modem.c: 56: {
  1522                           ;modem.c: 57: numRetries = 15;
  1523  001B4A  0E0F               	movlw	15
  1524  001B4C  6E2B               	movwf	_numRetries,c
  1525                           
  1526                           ;modem.c: 58: md_state = CONFIG;
  1527  001B4E  0E02               	movlw	2
  1528  001B50  6FD0               	movwf	_md_state& (0+255),b
  1529                           
  1530                           ; BSR set to: 0
  1531                           ;modem.c: 59: }
  1532                           ;modem.c: 60: break;
  1533  001B52  0012               	return	
  1534  001B54                     
  1535                           ; BSR set to: 0
  1536                           ;modem.c: 62: if (send_md_cfg_cmds_ok())
  1537                           
  1538                           ; BSR set to: 0
  1539  001B54  EC41  F008         	call	_send_md_cfg_cmds_ok	;wreg free
  1540  001B58  0900               	iorlw	0
  1541  001B5A  B4D8               	btfsc	status,2,c
  1542  001B5C  0012               	return	
  1543                           
  1544                           ;modem.c: 63: {
  1545                           ;modem.c: 65: md_state = WAITING_PDP_ACTIVE;
  1546  001B5E  0E03               	movlw	3
  1547  001B60  0100               	movlb	0	; () banked
  1548  001B62  6FD0               	movwf	_md_state& (0+255),b
  1549                           
  1550                           ; BSR set to: 0
  1551                           ;modem.c: 68: }
  1552                           ;modem.c: 69: break;
  1553  001B64  0012               	return	
  1554  001B66                     
  1555                           ; BSR set to: 0
  1556                           ;modem.c: 71: setup_data_ok();
  1557                           
  1558                           ; BSR set to: 0
  1559  001B66  ECDE  F00C         	call	_setup_data_ok	;wreg free
  1560                           
  1561                           ;modem.c: 72: if (pdpIsActive)
  1562  001B6A  0100               	movlb	0	; () banked
  1563  001B6C  51CE               	movf	_pdpIsActive& (0+255),w,b
  1564  001B6E  B4D8               	btfsc	status,2,c
  1565  001B70  0012               	return	
  1566                           
  1567                           ; BSR set to: 0
  1568                           ;modem.c: 73: md_state = SENDING_DATA;
  1569  001B72  0E04               	movlw	4
  1570  001B74  6FD0               	movwf	_md_state& (0+255),b
  1571                           
  1572                           ; BSR set to: 0
  1573                           ;modem.c: 74: break;
  1574  001B76  0012               	return	
  1575  001B78                     
  1576                           ; BSR set to: 0
  1577                           ;modem.c: 76: if (send_over_socket_ok())
  1578                           
  1579                           ; BSR set to: 0
  1580  001B78  EC2C  F00B         	call	_send_over_socket_ok	;wreg free
  1581  001B7C  0900               	iorlw	0
  1582  001B7E  B4D8               	btfsc	status,2,c
  1583  001B80  0012               	return	
  1584                           
  1585                           ;modem.c: 77: {
  1586                           ;modem.c: 78: md_state = CLOSE_SOCKET;
  1587  001B82  0E05               	movlw	5
  1588  001B84  0100               	movlb	0	; () banked
  1589  001B86  6FD0               	movwf	_md_state& (0+255),b
  1590                           
  1591                           ; BSR set to: 0
  1592                           ;modem.c: 79: }
  1593                           ;modem.c: 80: break;
  1594  001B88  0012               	return	
  1595  001B8A                     
  1596                           ; BSR set to: 0
  1597                           ;modem.c: 82: if (close_socket_ok())
  1598                           
  1599                           ; BSR set to: 0
  1600  001B8A  EC6F  F00C         	call	_close_socket_ok	;wreg free
  1601  001B8E  0900               	iorlw	0
  1602  001B90  B4D8               	btfsc	status,2,c
  1603  001B92  0012               	return	
  1604                           
  1605                           ;modem.c: 83: {
  1606                           ;modem.c: 84: pdpIsActive = 0;
  1607  001B94  0E00               	movlw	0
  1608  001B96  0100               	movlb	0	; () banked
  1609  001B98  6FCE               	movwf	_pdpIsActive& (0+255),b
  1610                           
  1611                           ;modem.c: 85: md_state = IDLE;
  1612  001B9A  0E00               	movlw	0
  1613  001B9C  6FD0               	movwf	_md_state& (0+255),b
  1614                           
  1615                           ; BSR set to: 0
  1616                           ;modem.c: 86: PORTAbits.RA3 = 0;
  1617  001B9E  9680               	bcf	3968,3,c	;volatile
  1618                           
  1619                           ;modem.c: 87: awake = 0;
  1620  001BA0  0E00               	movlw	0
  1621  001BA2  6E4A               	movwf	_awake,c
  1622                           
  1623                           ; BSR set to: 0
  1624                           ;modem.c: 88: }
  1625                           ;modem.c: 94: }
  1626  001BA4  0012               	return	
  1627  001BA6                     l403:
  1628                           
  1629                           ; BSR set to: 0
  1630  001BA6  0100               	movlb	0	; () banked
  1631  001BA8  51D0               	movf	_md_state& (0+255),w,b
  1632                           
  1633                           ; Switch size 1, requested type "space"
  1634                           ; Number of cases is 6, Range of values is 0 to 5
  1635                           ; switch strategies available:
  1636                           ; Name         Instructions Cycles
  1637                           ; simple_byte           19    10 (average)
  1638                           ;	Chosen strategy is simple_byte
  1639  001BAA  0A00               	xorlw	0	; case 0
  1640  001BAC  B4D8               	btfsc	status,2,c
  1641  001BAE  0012               	return	
  1642  001BB0  0A01               	xorlw	1	; case 1
  1643  001BB2  B4D8               	btfsc	status,2,c
  1644  001BB4  D7C6               	goto	l406
  1645  001BB6  0A03               	xorlw	3	; case 2
  1646  001BB8  B4D8               	btfsc	status,2,c
  1647  001BBA  D7CC               	goto	l408
  1648  001BBC  0A01               	xorlw	1	; case 3
  1649  001BBE  B4D8               	btfsc	status,2,c
  1650  001BC0  D7D2               	goto	l410
  1651  001BC2  0A07               	xorlw	7	; case 4
  1652  001BC4  B4D8               	btfsc	status,2,c
  1653  001BC6  D7D8               	goto	l412
  1654  001BC8  0A01               	xorlw	1	; case 5
  1655  001BCA  A4D8               	btfss	status,2,c
  1656  001BCC  0012               	return	
  1657  001BCE  D7DD               	goto	l414
  1658  001BD0                     __end_of_check_modem_state:
  1659                           	opt stack 0
  1660                           tblptru	equ	0xFF8
  1661                           tblptrh	equ	0xFF7
  1662                           tblptrl	equ	0xFF6
  1663                           tablat	equ	0xFF5
  1664                           intcon	equ	0xFF2
  1665                           postinc0	equ	0xFEE
  1666                           wreg	equ	0xFE8
  1667                           postdec1	equ	0xFE5
  1668                           fsr1l	equ	0xFE1
  1669                           status	equ	0xFD8
  1670                           
  1671 ;; *************** function _setup_data_ok *****************
  1672 ;; Defined at:
  1673 ;;		line 181 in file "modem.c"
  1674 ;; Parameters:    Size  Location     Type
  1675 ;;		None
  1676 ;; Auto vars:     Size  Location     Type
  1677 ;;  setApn         47    9[BANK0 ] unsigned char [47]
  1678 ;;  cfgSocket      25   56[BANK0 ] unsigned char [25]
  1679 ;;  activatePDP    15   81[BANK0 ] unsigned char [15]
  1680 ;; Return value:  Size  Location     Type
  1681 ;;                  1    wreg      unsigned char 
  1682 ;; Registers used:
  1683 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1684 ;; Tracked objects:
  1685 ;;		On entry : 0/0
  1686 ;;		On exit  : 0/0
  1687 ;;		Unchanged: 0/0
  1688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1690 ;;      Locals:         0      87       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1692 ;;      Totals:         0      87       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1693 ;;Total ram usage:       87 bytes
  1694 ;; Hardware stack levels used:    1
  1695 ;; Hardware stack levels required when called:    5
  1696 ;; This function calls:
  1697 ;;		_md_uart_write_str_ok
  1698 ;;		_reset_AT_marks
  1699 ;; This function is called by:
  1700 ;;		_check_modem_state
  1701 ;; This function uses a non-reentrant model
  1702 ;;
  1703                           
  1704                           	psect	text3
  1705  0019BC                     __ptext3:
  1706                           	opt stack 0
  1707  0019BC                     _setup_data_ok:
  1708                           	opt stack 24
  1709                           
  1710                           ;modem.c: 183: uint8_t setApn[] = "AT+CGDCONT=3,\"IPV4V6\",\"wyleslte.gw7.vzwentp\"\r\n"
      +                          ;
  1711                           
  1712                           ;incstack = 0
  1713  0019BC  EE22  F0C0         	lfsr	2,setup_data_ok@F6877
  1714  0019C0  EE10  F069         	lfsr	1,setup_data_ok@setApn
  1715  0019C4  0E2E               	movlw	46
  1716  0019C6                     u3971:
  1717  0019C6  CFDB FFE3          	movff	plusw2,plusw1
  1718  0019CA  06E8               	decf	wreg,f,c
  1719  0019CC  E2FC               	bc	u3971
  1720                           
  1721                           ;modem.c: 184: uint8_t cfgSocket[] = "AT#SCFGEXT=1,1,0,0,0,0\r\n";
  1722  0019CE  EE21  F000         	lfsr	2,setup_data_ok@F6879
  1723  0019D2  EE10  F098         	lfsr	1,setup_data_ok@cfgSocket
  1724  0019D6  0E18               	movlw	24
  1725  0019D8                     u3981:
  1726  0019D8  CFDB FFE3          	movff	plusw2,plusw1
  1727  0019DC  06E8               	decf	wreg,f,c
  1728  0019DE  E2FC               	bc	u3981
  1729                           
  1730                           ;modem.c: 185: uint8_t activatePDP[] = "AT#SGACT=3,1\r\n";
  1731  0019E0  EE21  F039         	lfsr	2,setup_data_ok@F6881
  1732  0019E4  EE10  F0B1         	lfsr	1,setup_data_ok@activatePDP
  1733  0019E8  0E0E               	movlw	14
  1734  0019EA                     u3991:
  1735  0019EA  CFDB FFE3          	movff	plusw2,plusw1
  1736  0019EE  06E8               	decf	wreg,f,c
  1737  0019F0  E2FC               	bc	u3991
  1738                           
  1739                           ;modem.c: 188: if (!(sentAT1 == 0x03))
  1740  0019F2  0E03               	movlw	3
  1741  0019F4  0100               	movlb	0	; () banked
  1742  0019F6  19CD               	xorwf	_sentAT1& (0+255),w,b
  1743  0019F8  B4D8               	btfsc	status,2,c
  1744  0019FA  D00E               	goto	l473
  1745                           
  1746                           ; BSR set to: 0
  1747                           ;modem.c: 189: sentAT1 = md_uart_write_str_ok((uint8_t *)&setApn[0], sizeof(setApn), 1, 
      +                          0);
  1748  0019FC  0E69               	movlw	low setup_data_ok@setApn
  1749  0019FE  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  1750  001A00  0E00               	movlw	high setup_data_ok@setApn
  1751  001A02  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  1752  001A04  0E2F               	movlw	47
  1753  001A06  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  1754  001A08  0E01               	movlw	1
  1755  001A0A  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  1756  001A0C  0E00               	movlw	0
  1757  001A0E  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  1758  001A10  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  1759  001A14  0100               	movlb	0	; () banked
  1760  001A16  6FCD               	movwf	_sentAT1& (0+255),b
  1761  001A18                     l473:
  1762                           
  1763                           ; BSR set to: 0
  1764                           ;modem.c: 190: if ((sentAT1 == 0x03) && !(sentAT2 == 0x03))
  1765                           
  1766                           ; BSR set to: 0
  1767  001A18  0E03               	movlw	3
  1768  001A1A  19CD               	xorwf	_sentAT1& (0+255),w,b
  1769  001A1C  A4D8               	btfss	status,2,c
  1770  001A1E  D012               	goto	l474
  1771                           
  1772                           ; BSR set to: 0
  1773  001A20  0E03               	movlw	3
  1774  001A22  19CC               	xorwf	_sentAT2& (0+255),w,b
  1775  001A24  B4D8               	btfsc	status,2,c
  1776  001A26  D00E               	goto	l474
  1777                           
  1778                           ; BSR set to: 0
  1779                           ;modem.c: 191: sentAT2 = md_uart_write_str_ok((uint8_t *)&cfgSocket[0], sizeof(cfgSocket
      +                          ), 1, 0);
  1780  001A28  0E98               	movlw	low setup_data_ok@cfgSocket
  1781  001A2A  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  1782  001A2C  0E00               	movlw	high setup_data_ok@cfgSocket
  1783  001A2E  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  1784  001A30  0E19               	movlw	25
  1785  001A32  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  1786  001A34  0E01               	movlw	1
  1787  001A36  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  1788  001A38  0E00               	movlw	0
  1789  001A3A  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  1790  001A3C  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  1791  001A40  0100               	movlb	0	; () banked
  1792  001A42  6FCC               	movwf	_sentAT2& (0+255),b
  1793  001A44                     l474:
  1794                           
  1795                           ; BSR set to: 0
  1796                           ;modem.c: 192: if ((sentAT2 == 0x03) && !(sentAT3 == 0x03))
  1797                           
  1798                           ; BSR set to: 0
  1799  001A44  0E03               	movlw	3
  1800  001A46  19CC               	xorwf	_sentAT2& (0+255),w,b
  1801  001A48  A4D8               	btfss	status,2,c
  1802  001A4A  D012               	goto	l475
  1803                           
  1804                           ; BSR set to: 0
  1805  001A4C  0E03               	movlw	3
  1806  001A4E  19CB               	xorwf	_sentAT3& (0+255),w,b
  1807  001A50  B4D8               	btfsc	status,2,c
  1808  001A52  D00E               	goto	l475
  1809                           
  1810                           ; BSR set to: 0
  1811                           ;modem.c: 193: sentAT3 = md_uart_write_str_ok((uint8_t *)&activatePDP[0], sizeof(activat
      +                          ePDP), 1, 0);
  1812  001A54  0EB1               	movlw	low setup_data_ok@activatePDP
  1813  001A56  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  1814  001A58  0E00               	movlw	high setup_data_ok@activatePDP
  1815  001A5A  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  1816  001A5C  0E0F               	movlw	15
  1817  001A5E  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  1818  001A60  0E01               	movlw	1
  1819  001A62  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  1820  001A64  0E00               	movlw	0
  1821  001A66  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  1822  001A68  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  1823  001A6C  0100               	movlb	0	; () banked
  1824  001A6E  6FCB               	movwf	_sentAT3& (0+255),b
  1825  001A70                     l475:
  1826                           
  1827                           ; BSR set to: 0
  1828                           ;modem.c: 194: if (sentAT3 == 0x03)
  1829                           
  1830                           ; BSR set to: 0
  1831  001A70  0E03               	movlw	3
  1832  001A72  19CB               	xorwf	_sentAT3& (0+255),w,b
  1833  001A74  A4D8               	btfss	status,2,c
  1834  001A76  0012               	return	
  1835                           
  1836                           ; BSR set to: 0
  1837                           ;modem.c: 195: {
  1838                           ;modem.c: 196: pdpIsActive = 1;
  1839  001A78  0E01               	movlw	1
  1840  001A7A  6FCE               	movwf	_pdpIsActive& (0+255),b
  1841                           
  1842                           ; BSR set to: 0
  1843                           ;modem.c: 197: reset_AT_marks();
  1844  001A7C  ECB8  F00E         	call	_reset_AT_marks	;wreg free
  1845                           
  1846                           ;modem.c: 198: return 1;
  1847                           ;	Return value of _setup_data_ok is never used
  1848  001A80  0012               	return	
  1849  001A82                     __end_of_setup_data_ok:
  1850                           	opt stack 0
  1851                           tblptru	equ	0xFF8
  1852                           tblptrh	equ	0xFF7
  1853                           tblptrl	equ	0xFF6
  1854                           tablat	equ	0xFF5
  1855                           intcon	equ	0xFF2
  1856                           postinc0	equ	0xFEE
  1857                           wreg	equ	0xFE8
  1858                           postdec1	equ	0xFE5
  1859                           plusw1	equ	0xFE3
  1860                           fsr1l	equ	0xFE1
  1861                           plusw2	equ	0xFDB
  1862                           status	equ	0xFD8
  1863                           
  1864 ;; *************** function _send_over_socket_ok *****************
  1865 ;; Defined at:
  1866 ;;		line 211 in file "modem.c"
  1867 ;; Parameters:    Size  Location     Type
  1868 ;;		None
  1869 ;; Auto vars:     Size  Location     Type
  1870 ;;  openConnecti   44    9[BANK0 ] const unsigned char [44]
  1871 ;;  srecv          16   53[BANK0 ] const unsigned char [16]
  1872 ;;  ssend          13   69[BANK0 ] const unsigned char [13]
  1873 ;;  msg             8   82[BANK0 ] const unsigned char [8]
  1874 ;;  terminateDat    1   90[BANK0 ] unsigned char 
  1875 ;; Return value:  Size  Location     Type
  1876 ;;                  1    wreg      unsigned char 
  1877 ;; Registers used:
  1878 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1879 ;; Tracked objects:
  1880 ;;		On entry : 0/0
  1881 ;;		On exit  : 0/0
  1882 ;;		Unchanged: 0/0
  1883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1885 ;;      Locals:         0      82       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1887 ;;      Totals:         0      82       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1888 ;;Total ram usage:       82 bytes
  1889 ;; Hardware stack levels used:    1
  1890 ;; Hardware stack levels required when called:    5
  1891 ;; This function calls:
  1892 ;;		_md_uart_write_str_ok
  1893 ;;		_reset_AT_marks
  1894 ;; This function is called by:
  1895 ;;		_check_modem_state
  1896 ;; This function uses a non-reentrant model
  1897 ;;
  1898                           
  1899                           	psect	text4
  1900  001658                     __ptext4:
  1901                           	opt stack 0
  1902  001658                     _send_over_socket_ok:
  1903                           	opt stack 24
  1904                           
  1905                           ;modem.c: 213: const uint8_t openConnection[] = "AT#SD=1,0,10510,\"modules.telit.com\",0
      +                          ,0,1\r\n";
  1906                           
  1907                           ;incstack = 0
  1908  001658  0E01               	movlw	low send_over_socket_ok@F6886
  1909  00165A  6EF6               	movwf	tblptrl,c
  1910  00165C                     	if	1	;There is more than 1 active tblptr byte
  1911  00165C  0E10               	movlw	high send_over_socket_ok@F6886
  1912  00165E  6EF7               	movwf	tblptrh,c
  1913  001660                     	endif
  1914  001660                     	if	0	;There are less than 3 active tblptr bytes
  1915  001660                     	endif
  1916  001660  EE20  F069         	lfsr	2,send_over_socket_ok@openConnection
  1917  001664  0E2B               	movlw	43
  1918  001666                     u4060:
  1919  001666  0009               	tblrd		*+
  1920  001668  CFF5 FFDE          	movff	tablat,postinc2
  1921  00166C  06E8               	decf	wreg,f,c
  1922  00166E  E2FB               	bc	u4060
  1923                           
  1924                           ;modem.c: 214: const uint8_t ssend[] = "AT#SSEND=1\r\n";
  1925  001670  0E5D               	movlw	low send_over_socket_ok@F6888
  1926  001672  6EF6               	movwf	tblptrl,c
  1927  001674                     	if	1	;There is more than 1 active tblptr byte
  1928  001674  0E10               	movlw	high send_over_socket_ok@F6888
  1929  001676  6EF7               	movwf	tblptrh,c
  1930  001678                     	endif
  1931  001678                     	if	0	;There are less than 3 active tblptr bytes
  1932  001678                     	endif
  1933  001678  EE20  F0A5         	lfsr	2,send_over_socket_ok@ssend
  1934  00167C  0E0C               	movlw	12
  1935  00167E                     u4070:
  1936  00167E  0009               	tblrd		*+
  1937  001680  CFF5 FFDE          	movff	tablat,postinc2
  1938  001684  06E8               	decf	wreg,f,c
  1939  001686  E2FB               	bc	u4070
  1940                           
  1941                           ;modem.c: 215: const uint8_t srecv[]="AT#SRECV=1,89\r\n";
  1942  001688  0E3E               	movlw	low send_over_socket_ok@F6890
  1943  00168A  6EF6               	movwf	tblptrl,c
  1944  00168C                     	if	1	;There is more than 1 active tblptr byte
  1945  00168C  0E10               	movlw	high send_over_socket_ok@F6890
  1946  00168E  6EF7               	movwf	tblptrh,c
  1947  001690                     	endif
  1948  001690                     	if	0	;There are less than 3 active tblptr bytes
  1949  001690                     	endif
  1950  001690  EE20  F095         	lfsr	2,send_over_socket_ok@srecv
  1951  001694  0E0F               	movlw	15
  1952  001696                     u4080:
  1953  001696  0009               	tblrd		*+
  1954  001698  CFF5 FFDE          	movff	tablat,postinc2
  1955  00169C  06E8               	decf	wreg,f,c
  1956  00169E  E2FB               	bc	u4080
  1957                           
  1958                           ;modem.c: 216: const uint8_t msg[] = "Echo.\r\n";
  1959  0016A0  0E74               	movlw	low send_over_socket_ok@F6892
  1960  0016A2  6EF6               	movwf	tblptrl,c
  1961  0016A4                     	if	1	;There is more than 1 active tblptr byte
  1962  0016A4  0E10               	movlw	high send_over_socket_ok@F6892
  1963  0016A6  6EF7               	movwf	tblptrh,c
  1964  0016A8                     	endif
  1965  0016A8                     	if	0	;There are less than 3 active tblptr bytes
  1966  0016A8                     	endif
  1967  0016A8  EE20  F0B2         	lfsr	2,send_over_socket_ok@msg
  1968  0016AC  0E07               	movlw	7
  1969  0016AE                     u4090:
  1970  0016AE  0009               	tblrd		*+
  1971  0016B0  CFF5 FFDE          	movff	tablat,postinc2
  1972  0016B4  06E8               	decf	wreg,f,c
  1973  0016B6  E2FB               	bc	u4090
  1974                           
  1975                           ;modem.c: 218: uint8_t terminateData = 26;
  1976  0016B8  0E1A               	movlw	26
  1977  0016BA  0100               	movlb	0	; () banked
  1978  0016BC  6FBA               	movwf	send_over_socket_ok@terminateData& (0+255),b
  1979                           
  1980                           ; BSR set to: 0
  1981                           ;modem.c: 220: if (!(sentAT1 == 0x03))
  1982  0016BE  0E03               	movlw	3
  1983  0016C0  19CD               	xorwf	_sentAT1& (0+255),w,b
  1984  0016C2  B4D8               	btfsc	status,2,c
  1985  0016C4  D00E               	goto	l491
  1986                           
  1987                           ; BSR set to: 0
  1988                           ;modem.c: 221: sentAT1 = md_uart_write_str_ok((uint8_t *)&openConnection[0], sizeof(open
      +                          Connection), 1, 0);
  1989  0016C6  0E69               	movlw	low send_over_socket_ok@openConnection
  1990  0016C8  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  1991  0016CA  0E00               	movlw	high send_over_socket_ok@openConnection
  1992  0016CC  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  1993  0016CE  0E2C               	movlw	44
  1994  0016D0  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  1995  0016D2  0E01               	movlw	1
  1996  0016D4  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  1997  0016D6  0E00               	movlw	0
  1998  0016D8  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  1999  0016DA  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  2000  0016DE  0100               	movlb	0	; () banked
  2001  0016E0  6FCD               	movwf	_sentAT1& (0+255),b
  2002  0016E2                     l491:
  2003                           
  2004                           ; BSR set to: 0
  2005                           ;modem.c: 222: if ((sentAT1 == 0x03) && !(sentAT2 == 0x03))
  2006                           
  2007                           ; BSR set to: 0
  2008  0016E2  0E03               	movlw	3
  2009  0016E4  19CD               	xorwf	_sentAT1& (0+255),w,b
  2010  0016E6  A4D8               	btfss	status,2,c
  2011  0016E8  D012               	goto	l492
  2012                           
  2013                           ; BSR set to: 0
  2014  0016EA  0E03               	movlw	3
  2015  0016EC  19CC               	xorwf	_sentAT2& (0+255),w,b
  2016  0016EE  B4D8               	btfsc	status,2,c
  2017  0016F0  D00E               	goto	l492
  2018                           
  2019                           ; BSR set to: 0
  2020                           ;modem.c: 223: sentAT2 = md_uart_write_str_ok((uint8_t *)&ssend[0], sizeof(ssend), 0, 1)
      +                          ;
  2021  0016F2  0EA5               	movlw	low send_over_socket_ok@ssend
  2022  0016F4  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  2023  0016F6  0E00               	movlw	high send_over_socket_ok@ssend
  2024  0016F8  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  2025  0016FA  0E0D               	movlw	13
  2026  0016FC  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  2027  0016FE  0E00               	movlw	0
  2028  001700  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  2029  001702  0E01               	movlw	1
  2030  001704  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  2031  001706  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  2032  00170A  0100               	movlb	0	; () banked
  2033  00170C  6FCC               	movwf	_sentAT2& (0+255),b
  2034  00170E                     l492:
  2035                           
  2036                           ; BSR set to: 0
  2037                           ;modem.c: 224: if ((sentAT2 == 0x03) && !(sentAT3 == 0x03))
  2038                           
  2039                           ; BSR set to: 0
  2040  00170E  0E03               	movlw	3
  2041  001710  19CC               	xorwf	_sentAT2& (0+255),w,b
  2042  001712  A4D8               	btfss	status,2,c
  2043  001714  D012               	goto	l493
  2044                           
  2045                           ; BSR set to: 0
  2046  001716  0E03               	movlw	3
  2047  001718  19CB               	xorwf	_sentAT3& (0+255),w,b
  2048  00171A  B4D8               	btfsc	status,2,c
  2049  00171C  D00E               	goto	l493
  2050                           
  2051                           ; BSR set to: 0
  2052                           ;modem.c: 225: sentAT3 = md_uart_write_str_ok((uint8_t *)&msg[0], sizeof(msg), 0, 0);
  2053  00171E  0EB2               	movlw	low send_over_socket_ok@msg
  2054  001720  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  2055  001722  0E00               	movlw	high send_over_socket_ok@msg
  2056  001724  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  2057  001726  0E08               	movlw	8
  2058  001728  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  2059  00172A  0E00               	movlw	0
  2060  00172C  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  2061  00172E  0E00               	movlw	0
  2062  001730  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  2063  001732  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  2064  001736  0100               	movlb	0	; () banked
  2065  001738  6FCB               	movwf	_sentAT3& (0+255),b
  2066  00173A                     l493:
  2067                           
  2068                           ; BSR set to: 0
  2069                           ;modem.c: 226: if ((sentAT3 == 0x03) && !(sentAT4 == 0x03))
  2070                           
  2071                           ; BSR set to: 0
  2072  00173A  0E03               	movlw	3
  2073  00173C  19CB               	xorwf	_sentAT3& (0+255),w,b
  2074  00173E  A4D8               	btfss	status,2,c
  2075  001740  D012               	goto	l494
  2076                           
  2077                           ; BSR set to: 0
  2078  001742  0E03               	movlw	3
  2079  001744  19CA               	xorwf	_sentAT4& (0+255),w,b
  2080  001746  B4D8               	btfsc	status,2,c
  2081  001748  D00E               	goto	l494
  2082                           
  2083                           ; BSR set to: 0
  2084                           ;modem.c: 227: sentAT4 = md_uart_write_str_ok((uint8_t *)&terminateData, 1, 1, 0);
  2085  00174A  0EBA               	movlw	low send_over_socket_ok@terminateData
  2086  00174C  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  2087  00174E  0E00               	movlw	high send_over_socket_ok@terminateData
  2088  001750  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  2089  001752  0E01               	movlw	1
  2090  001754  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  2091  001756  0E01               	movlw	1
  2092  001758  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  2093  00175A  0E00               	movlw	0
  2094  00175C  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  2095  00175E  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  2096  001762  0100               	movlb	0	; () banked
  2097  001764  6FCA               	movwf	_sentAT4& (0+255),b
  2098  001766                     l494:
  2099                           
  2100                           ; BSR set to: 0
  2101                           ;modem.c: 231: if ((sentAT4 == 0x03) && !(sentAT5 == 0x03))
  2102                           
  2103                           ; BSR set to: 0
  2104  001766  0E03               	movlw	3
  2105  001768  19CA               	xorwf	_sentAT4& (0+255),w,b
  2106  00176A  A4D8               	btfss	status,2,c
  2107  00176C  D012               	goto	l495
  2108                           
  2109                           ; BSR set to: 0
  2110  00176E  0E03               	movlw	3
  2111  001770  19C9               	xorwf	_sentAT5& (0+255),w,b
  2112  001772  B4D8               	btfsc	status,2,c
  2113  001774  D00E               	goto	l495
  2114                           
  2115                           ; BSR set to: 0
  2116                           ;modem.c: 232: sentAT5 = md_uart_write_str_ok((uint8_t *)&srecv[0], sizeof(srecv), 1, 0)
      +                          ;
  2117  001776  0E95               	movlw	low send_over_socket_ok@srecv
  2118  001778  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  2119  00177A  0E00               	movlw	high send_over_socket_ok@srecv
  2120  00177C  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  2121  00177E  0E10               	movlw	16
  2122  001780  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  2123  001782  0E01               	movlw	1
  2124  001784  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  2125  001786  0E00               	movlw	0
  2126  001788  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  2127  00178A  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  2128  00178E  0100               	movlb	0	; () banked
  2129  001790  6FC9               	movwf	_sentAT5& (0+255),b
  2130  001792                     l495:
  2131                           
  2132                           ; BSR set to: 0
  2133                           ;modem.c: 234: if (sentAT5 == 0x03)
  2134                           
  2135                           ; BSR set to: 0
  2136  001792  0E03               	movlw	3
  2137  001794  19C9               	xorwf	_sentAT5& (0+255),w,b
  2138  001796  A4D8               	btfss	status,2,c
  2139  001798  D004               	goto	l496
  2140                           
  2141                           ; BSR set to: 0
  2142                           ;modem.c: 235: {
  2143                           ;modem.c: 236: reset_AT_marks();
  2144  00179A  ECB8  F00E         	call	_reset_AT_marks	;wreg free
  2145                           
  2146                           ;modem.c: 237: return 1;
  2147  00179E  0E01               	movlw	1
  2148  0017A0  0012               	return	
  2149  0017A2                     l496:
  2150                           
  2151                           ;modem.c: 244: }
  2152                           ;modem.c: 247: return 0;
  2153                           
  2154                           ;modem.c: 242: {
  2155  0017A2  0E00               	movlw	0
  2156  0017A4  0012               	return	
  2157  0017A6                     __end_of_send_over_socket_ok:
  2158                           	opt stack 0
  2159                           tblptru	equ	0xFF8
  2160                           tblptrh	equ	0xFF7
  2161                           tblptrl	equ	0xFF6
  2162                           tablat	equ	0xFF5
  2163                           intcon	equ	0xFF2
  2164                           postinc0	equ	0xFEE
  2165                           wreg	equ	0xFE8
  2166                           postdec1	equ	0xFE5
  2167                           plusw1	equ	0xFE3
  2168                           fsr1l	equ	0xFE1
  2169                           postinc2	equ	0xFDE
  2170                           plusw2	equ	0xFDB
  2171                           status	equ	0xFD8
  2172                           
  2173 ;; *************** function _send_md_cfg_cmds_ok *****************
  2174 ;; Defined at:
  2175 ;;		line 98 in file "modem.c"
  2176 ;; Parameters:    Size  Location     Type
  2177 ;;		None
  2178 ;; Auto vars:     Size  Location     Type
  2179 ;;  ledCfg         16   16[BANK2 ] unsigned char [16]
  2180 ;;  baud           16    0[BANK2 ] unsigned char [16]
  2181 ;;  cereg          12   56[BANK2 ] unsigned char [12]
  2182 ;;  ledpattern     12   44[BANK2 ] unsigned char [12]
  2183 ;;  cmee           12   32[BANK2 ] unsigned char [12]
  2184 ;;  gprs           11   90[BANK2 ] unsigned char [11]
  2185 ;;  creg           11   79[BANK2 ] unsigned char [11]
  2186 ;;  cpin           11   68[BANK2 ] unsigned char [11]
  2187 ;;  queryVersion   10  101[BANK2 ] unsigned char [10]
  2188 ;;  csq             9  111[BANK2 ] unsigned char [9]
  2189 ;;  ate             7  120[BANK2 ] unsigned char [7]
  2190 ;;  at              5  127[BANK2 ] unsigned char [5]
  2191 ;; Return value:  Size  Location     Type
  2192 ;;                  1    wreg      unsigned char 
  2193 ;; Registers used:
  2194 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2195 ;; Tracked objects:
  2196 ;;		On entry : 0/0
  2197 ;;		On exit  : 0/0
  2198 ;;		Unchanged: 0/0
  2199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2201 ;;      Locals:         0       0       0     132       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2203 ;;      Totals:         0       0       0     132       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2204 ;;Total ram usage:      132 bytes
  2205 ;; Hardware stack levels used:    1
  2206 ;; Hardware stack levels required when called:    6
  2207 ;; This function calls:
  2208 ;;		_md_uart_write_str_ok
  2209 ;;		_reset_AT_marks
  2210 ;;		_start_md_boot_timer
  2211 ;;		_start_modem_send_process
  2212 ;; This function is called by:
  2213 ;;		_check_modem_state
  2214 ;; This function uses a non-reentrant model
  2215 ;;
  2216                           
  2217                           	psect	text5
  2218  001082                     __ptext5:
  2219                           	opt stack 0
  2220  001082                     _send_md_cfg_cmds_ok:
  2221                           	opt stack 23
  2222                           
  2223                           ;modem.c: 100: uint8_t at[] = "AT\r\n";
  2224                           
  2225                           ;incstack = 0
  2226  001082  EE20  F0D8         	lfsr	2,send_md_cfg_cmds_ok@F6841
  2227  001086  EE12  F07F         	lfsr	1,send_md_cfg_cmds_ok@at
  2228  00108A  0E04               	movlw	4
  2229  00108C                     u3351:
  2230  00108C  CFDB FFE3          	movff	plusw2,plusw1
  2231  001090  06E8               	decf	wreg,f,c
  2232  001092  E2FC               	bc	u3351
  2233                           
  2234                           ;modem.c: 101: uint8_t ate[] = "ATE1\r\n";
  2235  001094  EE20  F0D1         	lfsr	2,send_md_cfg_cmds_ok@F6843
  2236  001098  EE12  F078         	lfsr	1,send_md_cfg_cmds_ok@ate
  2237  00109C  0E06               	movlw	6
  2238  00109E                     u3361:
  2239  00109E  CFDB FFE3          	movff	plusw2,plusw1
  2240  0010A2  06E8               	decf	wreg,f,c
  2241  0010A4  E2FC               	bc	u3361
  2242                           
  2243                           ;modem.c: 102: uint8_t cmee[] = "AT+CMEE=2\r\n";
  2244  0010A6  EE21  F060         	lfsr	2,send_md_cfg_cmds_ok@F6845
  2245  0010AA  EE12  F020         	lfsr	1,send_md_cfg_cmds_ok@cmee
  2246  0010AE  0E0B               	movlw	11
  2247  0010B0                     u3371:
  2248  0010B0  CFDB FFE3          	movff	plusw2,plusw1
  2249  0010B4  06E8               	decf	wreg,f,c
  2250  0010B6  E2FC               	bc	u3371
  2251                           
  2252                           ;modem.c: 103: uint8_t baud[] = "AT+IPR=115200\r\n";
  2253  0010B8  EE21  F029         	lfsr	2,send_md_cfg_cmds_ok@F6847
  2254  0010BC  EE12  F000         	lfsr	1,send_md_cfg_cmds_ok@baud
  2255  0010C0  0E0F               	movlw	15
  2256  0010C2                     u3381:
  2257  0010C2  CFDB FFE3          	movff	plusw2,plusw1
  2258  0010C6  06E8               	decf	wreg,f,c
  2259  0010C8  E2FC               	bc	u3381
  2260                           
  2261                           ;modem.c: 104: uint8_t ledCfg[] = "AT#GPIO=7,0,2\r\n";
  2262  0010CA  EE21  F019         	lfsr	2,send_md_cfg_cmds_ok@F6849
  2263  0010CE  EE12  F010         	lfsr	1,send_md_cfg_cmds_ok@ledCfg
  2264  0010D2  0E0F               	movlw	15
  2265  0010D4                     u3391:
  2266  0010D4  CFDB FFE3          	movff	plusw2,plusw1
  2267  0010D8  06E8               	decf	wreg,f,c
  2268  0010DA  E2FC               	bc	u3391
  2269                           
  2270                           ;modem.c: 105: uint8_t ledpattern[] = "AT#SLED=4\r\n";
  2271  0010DC  EE21  F054         	lfsr	2,send_md_cfg_cmds_ok@F6851
  2272  0010E0  EE12  F02C         	lfsr	1,send_md_cfg_cmds_ok@ledpattern
  2273  0010E4  0E0B               	movlw	11
  2274  0010E6                     u3401:
  2275  0010E6  CFDB FFE3          	movff	plusw2,plusw1
  2276  0010EA  06E8               	decf	wreg,f,c
  2277  0010EC  E2FC               	bc	u3401
  2278                           
  2279                           ;modem.c: 106: uint8_t queryVersion[] = "AT#CGMR\r\n";
  2280  0010EE  EE20  F017         	lfsr	2,send_md_cfg_cmds_ok@F6853
  2281  0010F2  EE12  F065         	lfsr	1,send_md_cfg_cmds_ok@queryVersion
  2282  0010F6  0E09               	movlw	9
  2283  0010F8                     u3411:
  2284  0010F8  CFDB FFE3          	movff	plusw2,plusw1
  2285  0010FC  06E8               	decf	wreg,f,c
  2286  0010FE  E2FC               	bc	u3411
  2287                           
  2288                           ;modem.c: 107: uint8_t cpin[] = "AT+CPIN?\r\n";
  2289  001100  EE20  F00C         	lfsr	2,send_md_cfg_cmds_ok@F6855
  2290  001104  EE12  F044         	lfsr	1,send_md_cfg_cmds_ok@cpin
  2291  001108  0E0A               	movlw	10
  2292  00110A                     u3421:
  2293  00110A  CFDB FFE3          	movff	plusw2,plusw1
  2294  00110E  06E8               	decf	wreg,f,c
  2295  001110  E2FC               	bc	u3421
  2296                           
  2297                           ;modem.c: 108: uint8_t creg[] = "AT+CREG?\r\n";
  2298  001112  EE20  F001         	lfsr	2,send_md_cfg_cmds_ok@F6857
  2299  001116  EE12  F04F         	lfsr	1,send_md_cfg_cmds_ok@creg
  2300  00111A  0E0A               	movlw	10
  2301  00111C                     u3431:
  2302  00111C  CFDB FFE3          	movff	plusw2,plusw1
  2303  001120  06E8               	decf	wreg,f,c
  2304  001122  E2FC               	bc	u3431
  2305                           
  2306                           ;modem.c: 109: uint8_t cereg[] = "AT+CEREG?\r\n";
  2307  001124  EE21  F048         	lfsr	2,send_md_cfg_cmds_ok@F6859
  2308  001128  EE12  F038         	lfsr	1,send_md_cfg_cmds_ok@cereg
  2309  00112C  0E0B               	movlw	11
  2310  00112E                     u3441:
  2311  00112E  CFDB FFE3          	movff	plusw2,plusw1
  2312  001132  06E8               	decf	wreg,f,c
  2313  001134  E2FC               	bc	u3441
  2314                           
  2315                           ;modem.c: 110: uint8_t gprs[] = "AT#GPRS?\r\n";
  2316  001136  EE21  F06C         	lfsr	2,send_md_cfg_cmds_ok@F6861
  2317  00113A  EE12  F05A         	lfsr	1,send_md_cfg_cmds_ok@gprs
  2318  00113E  0E0A               	movlw	10
  2319  001140                     u3451:
  2320  001140  CFDB FFE3          	movff	plusw2,plusw1
  2321  001144  06E8               	decf	wreg,f,c
  2322  001146  E2FC               	bc	u3451
  2323                           
  2324                           ;modem.c: 111: uint8_t csq[] = "AT+CSQ\r\n";
  2325  001148  EE20  F021         	lfsr	2,send_md_cfg_cmds_ok@F6863
  2326  00114C  EE12  F06F         	lfsr	1,send_md_cfg_cmds_ok@csq
  2327  001150  0E08               	movlw	8
  2328  001152                     u3461:
  2329  001152  CFDB FFE3          	movff	plusw2,plusw1
  2330  001156  06E8               	decf	wreg,f,c
  2331  001158  E2FC               	bc	u3461
  2332                           
  2333                           ;modem.c: 115: if (!(sentAT1 == 0x03))
  2334  00115A  0E03               	movlw	3
  2335  00115C  0100               	movlb	0	; () banked
  2336  00115E  19CD               	xorwf	_sentAT1& (0+255),w,b
  2337  001160  B4D8               	btfsc	status,2,c
  2338  001162  D00E               	goto	l443
  2339                           
  2340                           ; BSR set to: 0
  2341                           ;modem.c: 116: sentAT1 = md_uart_write_str_ok((uint8_t *)&at[0], sizeof(at), 1, 0);
  2342  001164  0E7F               	movlw	low send_md_cfg_cmds_ok@at
  2343  001166  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  2344  001168  0E02               	movlw	high send_md_cfg_cmds_ok@at
  2345  00116A  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  2346  00116C  0E05               	movlw	5
  2347  00116E  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  2348  001170  0E01               	movlw	1
  2349  001172  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  2350  001174  0E00               	movlw	0
  2351  001176  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  2352  001178  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  2353  00117C  0100               	movlb	0	; () banked
  2354  00117E  6FCD               	movwf	_sentAT1& (0+255),b
  2355  001180                     l443:
  2356                           
  2357                           ; BSR set to: 0
  2358                           ;modem.c: 117: if (sentAT1 == 0x03 && !(sentAT2 == 0x03))
  2359                           
  2360                           ; BSR set to: 0
  2361  001180  0E03               	movlw	3
  2362  001182  19CD               	xorwf	_sentAT1& (0+255),w,b
  2363  001184  A4D8               	btfss	status,2,c
  2364  001186  D012               	goto	l444
  2365                           
  2366                           ; BSR set to: 0
  2367  001188  0E03               	movlw	3
  2368  00118A  19CC               	xorwf	_sentAT2& (0+255),w,b
  2369  00118C  B4D8               	btfsc	status,2,c
  2370  00118E  D00E               	goto	l444
  2371                           
  2372                           ; BSR set to: 0
  2373                           ;modem.c: 118: sentAT2 = md_uart_write_str_ok((uint8_t *)&ate[0], sizeof(ate), 1, 0);
  2374  001190  0E78               	movlw	low send_md_cfg_cmds_ok@ate
  2375  001192  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  2376  001194  0E02               	movlw	high send_md_cfg_cmds_ok@ate
  2377  001196  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  2378  001198  0E07               	movlw	7
  2379  00119A  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  2380  00119C  0E01               	movlw	1
  2381  00119E  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  2382  0011A0  0E00               	movlw	0
  2383  0011A2  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  2384  0011A4  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  2385  0011A8  0100               	movlb	0	; () banked
  2386  0011AA  6FCC               	movwf	_sentAT2& (0+255),b
  2387  0011AC                     l444:
  2388                           
  2389                           ; BSR set to: 0
  2390                           ;modem.c: 119: if (sentAT2 == 0x03 && !(sentAT3 == 0x03))
  2391                           
  2392                           ; BSR set to: 0
  2393  0011AC  0E03               	movlw	3
  2394  0011AE  19CC               	xorwf	_sentAT2& (0+255),w,b
  2395  0011B0  A4D8               	btfss	status,2,c
  2396  0011B2  D012               	goto	l445
  2397                           
  2398                           ; BSR set to: 0
  2399  0011B4  0E03               	movlw	3
  2400  0011B6  19CB               	xorwf	_sentAT3& (0+255),w,b
  2401  0011B8  B4D8               	btfsc	status,2,c
  2402  0011BA  D00E               	goto	l445
  2403                           
  2404                           ; BSR set to: 0
  2405                           ;modem.c: 120: sentAT3 = md_uart_write_str_ok((uint8_t *)&cmee[0], sizeof(cmee), 1, 0);
  2406  0011BC  0E20               	movlw	low send_md_cfg_cmds_ok@cmee
  2407  0011BE  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  2408  0011C0  0E02               	movlw	high send_md_cfg_cmds_ok@cmee
  2409  0011C2  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  2410  0011C4  0E0C               	movlw	12
  2411  0011C6  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  2412  0011C8  0E01               	movlw	1
  2413  0011CA  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  2414  0011CC  0E00               	movlw	0
  2415  0011CE  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  2416  0011D0  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  2417  0011D4  0100               	movlb	0	; () banked
  2418  0011D6  6FCB               	movwf	_sentAT3& (0+255),b
  2419  0011D8                     l445:
  2420                           
  2421                           ; BSR set to: 0
  2422                           ;modem.c: 121: if (sentAT3 == 0x03 && !(sentAT4 == 0x03))
  2423                           
  2424                           ; BSR set to: 0
  2425  0011D8  0E03               	movlw	3
  2426  0011DA  19CB               	xorwf	_sentAT3& (0+255),w,b
  2427  0011DC  A4D8               	btfss	status,2,c
  2428  0011DE  D012               	goto	l446
  2429                           
  2430                           ; BSR set to: 0
  2431  0011E0  0E03               	movlw	3
  2432  0011E2  19CA               	xorwf	_sentAT4& (0+255),w,b
  2433  0011E4  B4D8               	btfsc	status,2,c
  2434  0011E6  D00E               	goto	l446
  2435                           
  2436                           ; BSR set to: 0
  2437                           ;modem.c: 122: sentAT4 = md_uart_write_str_ok((uint8_t *)&baud[0], sizeof(baud), 1, 0);
  2438  0011E8  0E00               	movlw	low send_md_cfg_cmds_ok@baud
  2439  0011EA  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  2440  0011EC  0E02               	movlw	high send_md_cfg_cmds_ok@baud
  2441  0011EE  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  2442  0011F0  0E10               	movlw	16
  2443  0011F2  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  2444  0011F4  0E01               	movlw	1
  2445  0011F6  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  2446  0011F8  0E00               	movlw	0
  2447  0011FA  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  2448  0011FC  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  2449  001200  0100               	movlb	0	; () banked
  2450  001202  6FCA               	movwf	_sentAT4& (0+255),b
  2451  001204                     l446:
  2452                           
  2453                           ; BSR set to: 0
  2454                           ;modem.c: 123: if (sentAT4 == 0x03 && !(sentAT5 == 0x03))
  2455                           
  2456                           ; BSR set to: 0
  2457  001204  0E03               	movlw	3
  2458  001206  19CA               	xorwf	_sentAT4& (0+255),w,b
  2459  001208  A4D8               	btfss	status,2,c
  2460  00120A  D012               	goto	l447
  2461                           
  2462                           ; BSR set to: 0
  2463  00120C  0E03               	movlw	3
  2464  00120E  19C9               	xorwf	_sentAT5& (0+255),w,b
  2465  001210  B4D8               	btfsc	status,2,c
  2466  001212  D00E               	goto	l447
  2467                           
  2468                           ; BSR set to: 0
  2469                           ;modem.c: 124: sentAT5 = md_uart_write_str_ok((uint8_t *)&ledCfg[0], sizeof(ledCfg), 1, 
      +                          0);
  2470  001214  0E10               	movlw	low send_md_cfg_cmds_ok@ledCfg
  2471  001216  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  2472  001218  0E02               	movlw	high send_md_cfg_cmds_ok@ledCfg
  2473  00121A  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  2474  00121C  0E10               	movlw	16
  2475  00121E  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  2476  001220  0E01               	movlw	1
  2477  001222  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  2478  001224  0E00               	movlw	0
  2479  001226  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  2480  001228  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  2481  00122C  0100               	movlb	0	; () banked
  2482  00122E  6FC9               	movwf	_sentAT5& (0+255),b
  2483  001230                     l447:
  2484                           
  2485                           ; BSR set to: 0
  2486                           ;modem.c: 125: if (sentAT5 == 0x03 && !(sentAT6 == 0x03))
  2487                           
  2488                           ; BSR set to: 0
  2489  001230  0E03               	movlw	3
  2490  001232  19C9               	xorwf	_sentAT5& (0+255),w,b
  2491  001234  A4D8               	btfss	status,2,c
  2492  001236  D012               	goto	l448
  2493                           
  2494                           ; BSR set to: 0
  2495  001238  0E03               	movlw	3
  2496  00123A  19C8               	xorwf	_sentAT6& (0+255),w,b
  2497  00123C  B4D8               	btfsc	status,2,c
  2498  00123E  D00E               	goto	l448
  2499                           
  2500                           ; BSR set to: 0
  2501                           ;modem.c: 126: sentAT6 = md_uart_write_str_ok((uint8_t *)&ledpattern[0], sizeof(ledpatte
      +                          rn), 1, 0);
  2502  001240  0E2C               	movlw	low send_md_cfg_cmds_ok@ledpattern
  2503  001242  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  2504  001244  0E02               	movlw	high send_md_cfg_cmds_ok@ledpattern
  2505  001246  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  2506  001248  0E0C               	movlw	12
  2507  00124A  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  2508  00124C  0E01               	movlw	1
  2509  00124E  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  2510  001250  0E00               	movlw	0
  2511  001252  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  2512  001254  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  2513  001258  0100               	movlb	0	; () banked
  2514  00125A  6FC8               	movwf	_sentAT6& (0+255),b
  2515  00125C                     l448:
  2516                           
  2517                           ; BSR set to: 0
  2518                           ;modem.c: 127: if (sentAT6 == 0x03 && !(sentAT7 == 0x03))
  2519                           
  2520                           ; BSR set to: 0
  2521  00125C  0E03               	movlw	3
  2522  00125E  19C8               	xorwf	_sentAT6& (0+255),w,b
  2523  001260  A4D8               	btfss	status,2,c
  2524  001262  D012               	goto	l449
  2525                           
  2526                           ; BSR set to: 0
  2527  001264  0E03               	movlw	3
  2528  001266  19C7               	xorwf	_sentAT7& (0+255),w,b
  2529  001268  B4D8               	btfsc	status,2,c
  2530  00126A  D00E               	goto	l449
  2531                           
  2532                           ; BSR set to: 0
  2533                           ;modem.c: 128: sentAT7 = md_uart_write_str_ok((uint8_t *)&queryVersion[0], sizeof(queryV
      +                          ersion), 1, 0);
  2534  00126C  0E65               	movlw	low send_md_cfg_cmds_ok@queryVersion
  2535  00126E  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  2536  001270  0E02               	movlw	high send_md_cfg_cmds_ok@queryVersion
  2537  001272  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  2538  001274  0E0A               	movlw	10
  2539  001276  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  2540  001278  0E01               	movlw	1
  2541  00127A  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  2542  00127C  0E00               	movlw	0
  2543  00127E  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  2544  001280  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  2545  001284  0100               	movlb	0	; () banked
  2546  001286  6FC7               	movwf	_sentAT7& (0+255),b
  2547  001288                     l449:
  2548                           
  2549                           ; BSR set to: 0
  2550                           ;modem.c: 129: if (sentAT7 == 0x03 && !(sentAT8 == 0x03))
  2551                           
  2552                           ; BSR set to: 0
  2553  001288  0E03               	movlw	3
  2554  00128A  19C7               	xorwf	_sentAT7& (0+255),w,b
  2555  00128C  A4D8               	btfss	status,2,c
  2556  00128E  D012               	goto	l450
  2557                           
  2558                           ; BSR set to: 0
  2559  001290  0E03               	movlw	3
  2560  001292  19C6               	xorwf	_sentAT8& (0+255),w,b
  2561  001294  B4D8               	btfsc	status,2,c
  2562  001296  D00E               	goto	l450
  2563                           
  2564                           ; BSR set to: 0
  2565                           ;modem.c: 130: sentAT8 = md_uart_write_str_ok((uint8_t *)&cpin[0], sizeof(cpin), 1, 0);
  2566  001298  0E44               	movlw	low send_md_cfg_cmds_ok@cpin
  2567  00129A  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  2568  00129C  0E02               	movlw	high send_md_cfg_cmds_ok@cpin
  2569  00129E  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  2570  0012A0  0E0B               	movlw	11
  2571  0012A2  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  2572  0012A4  0E01               	movlw	1
  2573  0012A6  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  2574  0012A8  0E00               	movlw	0
  2575  0012AA  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  2576  0012AC  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  2577  0012B0  0100               	movlb	0	; () banked
  2578  0012B2  6FC6               	movwf	_sentAT8& (0+255),b
  2579  0012B4                     l450:
  2580                           
  2581                           ; BSR set to: 0
  2582                           ;modem.c: 131: if (sentAT8 == 0x03 && !(sentAT9 == 0x03))
  2583                           
  2584                           ; BSR set to: 0
  2585  0012B4  0E03               	movlw	3
  2586  0012B6  19C6               	xorwf	_sentAT8& (0+255),w,b
  2587  0012B8  A4D8               	btfss	status,2,c
  2588  0012BA  D012               	goto	l451
  2589                           
  2590                           ; BSR set to: 0
  2591  0012BC  0E03               	movlw	3
  2592  0012BE  19C5               	xorwf	_sentAT9& (0+255),w,b
  2593  0012C0  B4D8               	btfsc	status,2,c
  2594  0012C2  D00E               	goto	l451
  2595                           
  2596                           ; BSR set to: 0
  2597                           ;modem.c: 132: sentAT9 = md_uart_write_str_ok((uint8_t *)&creg[0], sizeof(creg), 1, 0);
  2598  0012C4  0E4F               	movlw	low send_md_cfg_cmds_ok@creg
  2599  0012C6  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  2600  0012C8  0E02               	movlw	high send_md_cfg_cmds_ok@creg
  2601  0012CA  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  2602  0012CC  0E0B               	movlw	11
  2603  0012CE  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  2604  0012D0  0E01               	movlw	1
  2605  0012D2  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  2606  0012D4  0E00               	movlw	0
  2607  0012D6  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  2608  0012D8  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  2609  0012DC  0100               	movlb	0	; () banked
  2610  0012DE  6FC5               	movwf	_sentAT9& (0+255),b
  2611  0012E0                     l451:
  2612                           
  2613                           ; BSR set to: 0
  2614                           ;modem.c: 133: if (sentAT9 == 0x03 && !(sentAT10 == 0x03))
  2615                           
  2616                           ; BSR set to: 0
  2617  0012E0  0E03               	movlw	3
  2618  0012E2  19C5               	xorwf	_sentAT9& (0+255),w,b
  2619  0012E4  A4D8               	btfss	status,2,c
  2620  0012E6  D012               	goto	l452
  2621                           
  2622                           ; BSR set to: 0
  2623  0012E8  0E03               	movlw	3
  2624  0012EA  19C4               	xorwf	_sentAT10& (0+255),w,b
  2625  0012EC  B4D8               	btfsc	status,2,c
  2626  0012EE  D00E               	goto	l452
  2627                           
  2628                           ; BSR set to: 0
  2629                           ;modem.c: 134: sentAT10 = md_uart_write_str_ok((uint8_t *)&cereg[0], sizeof(cereg), 1, 0
      +                          );
  2630  0012F0  0E38               	movlw	low send_md_cfg_cmds_ok@cereg
  2631  0012F2  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  2632  0012F4  0E02               	movlw	high send_md_cfg_cmds_ok@cereg
  2633  0012F6  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  2634  0012F8  0E0C               	movlw	12
  2635  0012FA  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  2636  0012FC  0E01               	movlw	1
  2637  0012FE  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  2638  001300  0E00               	movlw	0
  2639  001302  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  2640  001304  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  2641  001308  0100               	movlb	0	; () banked
  2642  00130A  6FC4               	movwf	_sentAT10& (0+255),b
  2643  00130C                     l452:
  2644                           
  2645                           ; BSR set to: 0
  2646                           ;modem.c: 135: if (sentAT10 == 0x03 && !(sentAT11 == 0x03))
  2647                           
  2648                           ; BSR set to: 0
  2649  00130C  0E03               	movlw	3
  2650  00130E  19C4               	xorwf	_sentAT10& (0+255),w,b
  2651  001310  A4D8               	btfss	status,2,c
  2652  001312  D012               	goto	l453
  2653                           
  2654                           ; BSR set to: 0
  2655  001314  0E03               	movlw	3
  2656  001316  19C3               	xorwf	_sentAT11& (0+255),w,b
  2657  001318  B4D8               	btfsc	status,2,c
  2658  00131A  D00E               	goto	l453
  2659                           
  2660                           ; BSR set to: 0
  2661                           ;modem.c: 136: sentAT11 = md_uart_write_str_ok((uint8_t *)&gprs[0], sizeof(gprs), 1, 0);
  2662  00131C  0E5A               	movlw	low send_md_cfg_cmds_ok@gprs
  2663  00131E  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  2664  001320  0E02               	movlw	high send_md_cfg_cmds_ok@gprs
  2665  001322  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  2666  001324  0E0B               	movlw	11
  2667  001326  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  2668  001328  0E01               	movlw	1
  2669  00132A  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  2670  00132C  0E00               	movlw	0
  2671  00132E  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  2672  001330  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  2673  001334  0100               	movlb	0	; () banked
  2674  001336  6FC3               	movwf	_sentAT11& (0+255),b
  2675  001338                     l453:
  2676                           
  2677                           ; BSR set to: 0
  2678                           ;modem.c: 137: if (sentAT11 == 0x03 && !(sentAT12 == 0x03))
  2679                           
  2680                           ; BSR set to: 0
  2681  001338  0E03               	movlw	3
  2682  00133A  19C3               	xorwf	_sentAT11& (0+255),w,b
  2683  00133C  A4D8               	btfss	status,2,c
  2684  00133E  D012               	goto	l454
  2685                           
  2686                           ; BSR set to: 0
  2687  001340  0E03               	movlw	3
  2688  001342  19C2               	xorwf	_sentAT12& (0+255),w,b
  2689  001344  B4D8               	btfsc	status,2,c
  2690  001346  D00E               	goto	l454
  2691                           
  2692                           ; BSR set to: 0
  2693                           ;modem.c: 138: sentAT12 = md_uart_write_str_ok((uint8_t *)&csq[0], sizeof(csq), 1, 0);
  2694  001348  0E6F               	movlw	low send_md_cfg_cmds_ok@csq
  2695  00134A  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  2696  00134C  0E02               	movlw	high send_md_cfg_cmds_ok@csq
  2697  00134E  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  2698  001350  0E09               	movlw	9
  2699  001352  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  2700  001354  0E01               	movlw	1
  2701  001356  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  2702  001358  0E00               	movlw	0
  2703  00135A  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  2704  00135C  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  2705  001360  0100               	movlb	0	; () banked
  2706  001362  6FC2               	movwf	_sentAT12& (0+255),b
  2707  001364                     l454:
  2708                           
  2709                           ; BSR set to: 0
  2710                           ;modem.c: 140: if ((sentAT1 == 0x04 || sentAT2 == 0x04 || sentAT3 == 0x04 || sentAT4 == 
      +                          0x04 || sentAT5 == 0x04 || sentAT6 == 0x04 || sentAT7 == 0x04 || sentAT8 == 0x04 || sent
      +                          AT9 == 0x04 || sentAT10 == 0x04 || sentAT11 == 0x04 || sentAT12 == 0x04) && !extendedTim
      +                          e
  2711                           
  2712                           ; BSR set to: 0
  2713  001364  0E04               	movlw	4
  2714  001366  19CD               	xorwf	_sentAT1& (0+255),w,b
  2715  001368  B4D8               	btfsc	status,2,c
  2716  00136A  D02C               	goto	u3810
  2717                           
  2718                           ; BSR set to: 0
  2719  00136C  0E04               	movlw	4
  2720  00136E  19CC               	xorwf	_sentAT2& (0+255),w,b
  2721  001370  B4D8               	btfsc	status,2,c
  2722  001372  D028               	goto	u3810
  2723                           
  2724                           ; BSR set to: 0
  2725  001374  0E04               	movlw	4
  2726  001376  19CB               	xorwf	_sentAT3& (0+255),w,b
  2727  001378  B4D8               	btfsc	status,2,c
  2728  00137A  D024               	goto	u3810
  2729                           
  2730                           ; BSR set to: 0
  2731  00137C  0E04               	movlw	4
  2732  00137E  19CA               	xorwf	_sentAT4& (0+255),w,b
  2733  001380  B4D8               	btfsc	status,2,c
  2734  001382  D020               	goto	u3810
  2735                           
  2736                           ; BSR set to: 0
  2737  001384  0E04               	movlw	4
  2738  001386  19C9               	xorwf	_sentAT5& (0+255),w,b
  2739  001388  B4D8               	btfsc	status,2,c
  2740  00138A  D01C               	goto	u3810
  2741                           
  2742                           ; BSR set to: 0
  2743  00138C  0E04               	movlw	4
  2744  00138E  19C8               	xorwf	_sentAT6& (0+255),w,b
  2745  001390  B4D8               	btfsc	status,2,c
  2746  001392  D018               	goto	u3810
  2747                           
  2748                           ; BSR set to: 0
  2749  001394  0E04               	movlw	4
  2750  001396  19C7               	xorwf	_sentAT7& (0+255),w,b
  2751  001398  B4D8               	btfsc	status,2,c
  2752  00139A  D014               	goto	u3810
  2753                           
  2754                           ; BSR set to: 0
  2755  00139C  0E04               	movlw	4
  2756  00139E  19C6               	xorwf	_sentAT8& (0+255),w,b
  2757  0013A0  B4D8               	btfsc	status,2,c
  2758  0013A2  D010               	goto	u3810
  2759                           
  2760                           ; BSR set to: 0
  2761  0013A4  0E04               	movlw	4
  2762  0013A6  19C5               	xorwf	_sentAT9& (0+255),w,b
  2763  0013A8  B4D8               	btfsc	status,2,c
  2764  0013AA  D00C               	goto	u3810
  2765                           
  2766                           ; BSR set to: 0
  2767  0013AC  0E04               	movlw	4
  2768  0013AE  19C4               	xorwf	_sentAT10& (0+255),w,b
  2769  0013B0  B4D8               	btfsc	status,2,c
  2770  0013B2  D008               	goto	u3810
  2771                           
  2772                           ; BSR set to: 0
  2773  0013B4  0E04               	movlw	4
  2774  0013B6  19C3               	xorwf	_sentAT11& (0+255),w,b
  2775  0013B8  B4D8               	btfsc	status,2,c
  2776  0013BA  D004               	goto	u3810
  2777                           
  2778                           ; BSR set to: 0
  2779  0013BC  0E04               	movlw	4
  2780  0013BE  19C2               	xorwf	_sentAT12& (0+255),w,b
  2781  0013C0  A4D8               	btfss	status,2,c
  2782  0013C2  D00F               	goto	l455
  2783  0013C4                     u3810:
  2784                           
  2785                           ; BSR set to: 0
  2786                           
  2787                           ; BSR set to: 0
  2788  0013C4  51C1               	movf	_extendedTimer& (0+255),w,b
  2789  0013C6  A4D8               	btfss	status,2,c
  2790  0013C8  D00C               	goto	l455
  2791                           
  2792                           ; BSR set to: 0
  2793                           ;modem.c: 147: {
  2794                           ;modem.c: 148: extendedTimer = 1;
  2795  0013CA  0E01               	movlw	1
  2796  0013CC  6FC1               	movwf	_extendedTimer& (0+255),b
  2797                           
  2798                           ;modem.c: 149: timedOut = 0;
  2799  0013CE  0E00               	movlw	0
  2800  0013D0  6E4B               	movwf	_timedOut,c
  2801                           
  2802                           ; BSR set to: 0
  2803                           ;modem.c: 150: reset_AT_marks();
  2804  0013D2  ECB8  F00E         	call	_reset_AT_marks	;wreg free
  2805                           
  2806                           ;modem.c: 151: start_md_boot_timer();
  2807  0013D6  EC59  F00F         	call	_start_md_boot_timer	;wreg free
  2808                           
  2809                           ;modem.c: 153: md_state = WAITING_FOR_BOOT;
  2810  0013DA  0E01               	movlw	1
  2811  0013DC  0100               	movlb	0	; () banked
  2812  0013DE  6FD0               	movwf	_md_state& (0+255),b
  2813                           
  2814                           ;modem.c: 154: }
  2815  0013E0  D03A               	goto	l459
  2816  0013E2                     l455:
  2817                           
  2818                           ; BSR set to: 0
  2819                           ;modem.c: 155: else if ((sentAT1 == 0x04 || sentAT2 == 0x04 || sentAT3 == 0x04 || sentAT
      +                          4 == 0x04 || sentAT5 == 0x04 || sentAT6 == 0x04 || sentAT7 == 0x04 || sentAT8 == 0x04 ||
      +                           sentAT9 == 0x04 || sentAT10 == 0x04 || sentAT11 == 0x04 || sentAT12 == 0x04) && extende
      +                          d
  2820                           
  2821                           ; BSR set to: 0
  2822  0013E2  0E04               	movlw	4
  2823  0013E4  19CD               	xorwf	_sentAT1& (0+255),w,b
  2824  0013E6  B4D8               	btfsc	status,2,c
  2825  0013E8  D02C               	goto	u3940
  2826                           
  2827                           ; BSR set to: 0
  2828  0013EA  0E04               	movlw	4
  2829  0013EC  19CC               	xorwf	_sentAT2& (0+255),w,b
  2830  0013EE  B4D8               	btfsc	status,2,c
  2831  0013F0  D028               	goto	u3940
  2832                           
  2833                           ; BSR set to: 0
  2834  0013F2  0E04               	movlw	4
  2835  0013F4  19CB               	xorwf	_sentAT3& (0+255),w,b
  2836  0013F6  B4D8               	btfsc	status,2,c
  2837  0013F8  D024               	goto	u3940
  2838                           
  2839                           ; BSR set to: 0
  2840  0013FA  0E04               	movlw	4
  2841  0013FC  19CA               	xorwf	_sentAT4& (0+255),w,b
  2842  0013FE  B4D8               	btfsc	status,2,c
  2843  001400  D020               	goto	u3940
  2844                           
  2845                           ; BSR set to: 0
  2846  001402  0E04               	movlw	4
  2847  001404  19C9               	xorwf	_sentAT5& (0+255),w,b
  2848  001406  B4D8               	btfsc	status,2,c
  2849  001408  D01C               	goto	u3940
  2850                           
  2851                           ; BSR set to: 0
  2852  00140A  0E04               	movlw	4
  2853  00140C  19C8               	xorwf	_sentAT6& (0+255),w,b
  2854  00140E  B4D8               	btfsc	status,2,c
  2855  001410  D018               	goto	u3940
  2856                           
  2857                           ; BSR set to: 0
  2858  001412  0E04               	movlw	4
  2859  001414  19C7               	xorwf	_sentAT7& (0+255),w,b
  2860  001416  B4D8               	btfsc	status,2,c
  2861  001418  D014               	goto	u3940
  2862                           
  2863                           ; BSR set to: 0
  2864  00141A  0E04               	movlw	4
  2865  00141C  19C6               	xorwf	_sentAT8& (0+255),w,b
  2866  00141E  B4D8               	btfsc	status,2,c
  2867  001420  D010               	goto	u3940
  2868                           
  2869                           ; BSR set to: 0
  2870  001422  0E04               	movlw	4
  2871  001424  19C5               	xorwf	_sentAT9& (0+255),w,b
  2872  001426  B4D8               	btfsc	status,2,c
  2873  001428  D00C               	goto	u3940
  2874                           
  2875                           ; BSR set to: 0
  2876  00142A  0E04               	movlw	4
  2877  00142C  19C4               	xorwf	_sentAT10& (0+255),w,b
  2878  00142E  B4D8               	btfsc	status,2,c
  2879  001430  D008               	goto	u3940
  2880                           
  2881                           ; BSR set to: 0
  2882  001432  0E04               	movlw	4
  2883  001434  19C3               	xorwf	_sentAT11& (0+255),w,b
  2884  001436  B4D8               	btfsc	status,2,c
  2885  001438  D004               	goto	u3940
  2886                           
  2887                           ; BSR set to: 0
  2888  00143A  0E04               	movlw	4
  2889  00143C  19C2               	xorwf	_sentAT12& (0+255),w,b
  2890  00143E  A4D8               	btfss	status,2,c
  2891  001440  D00A               	goto	l459
  2892  001442                     u3940:
  2893                           
  2894                           ; BSR set to: 0
  2895                           
  2896                           ; BSR set to: 0
  2897  001442  51C1               	movf	_extendedTimer& (0+255),w,b
  2898  001444  B4D8               	btfsc	status,2,c
  2899  001446  D007               	goto	l459
  2900                           
  2901                           ; BSR set to: 0
  2902                           ;modem.c: 162: {
  2903                           ;modem.c: 163: extendedTimer = 0;
  2904  001448  0E00               	movlw	0
  2905  00144A  6FC1               	movwf	_extendedTimer& (0+255),b
  2906                           
  2907                           ; BSR set to: 0
  2908                           ;modem.c: 164: reset_AT_marks();
  2909  00144C  ECB8  F00E         	call	_reset_AT_marks	;wreg free
  2910                           
  2911                           ;modem.c: 165: start_modem_send_process(0x00);
  2912  001450  0E00               	movlw	0
  2913  001452  EC64  F00E         	call	_start_modem_send_process
  2914  001456                     l459:
  2915                           
  2916                           ;modem.c: 166: }
  2917                           ;modem.c: 168: if (sentAT12 == 0x03)
  2918  001456  0E03               	movlw	3
  2919  001458  0100               	movlb	0	; () banked
  2920  00145A  19C2               	xorwf	_sentAT12& (0+255),w,b
  2921  00145C  A4D8               	btfss	status,2,c
  2922  00145E  D004               	goto	l462
  2923                           
  2924                           ; BSR set to: 0
  2925                           ;modem.c: 169: {
  2926                           ;modem.c: 170: reset_AT_marks();
  2927  001460  ECB8  F00E         	call	_reset_AT_marks	;wreg free
  2928                           
  2929                           ;modem.c: 171: awake = 1;
  2930  001464  0E01               	movlw	1
  2931  001466  D001               	goto	L1
  2932  001468                     l462:
  2933                           
  2934                           ;modem.c: 173: else
  2935                           ;modem.c: 174: awake = 0;
  2936  001468  0E00               	movlw	0
  2937  00146A                     L1:
  2938  00146A  6E4A               	movwf	_awake,c
  2939                           
  2940                           ;modem.c: 177: return awake;
  2941  00146C  504A               	movf	_awake,w,c
  2942  00146E  0012               	return	
  2943  001470                     __end_of_send_md_cfg_cmds_ok:
  2944                           	opt stack 0
  2945                           tblptru	equ	0xFF8
  2946                           tblptrh	equ	0xFF7
  2947                           tblptrl	equ	0xFF6
  2948                           tablat	equ	0xFF5
  2949                           intcon	equ	0xFF2
  2950                           postinc0	equ	0xFEE
  2951                           wreg	equ	0xFE8
  2952                           postdec1	equ	0xFE5
  2953                           plusw1	equ	0xFE3
  2954                           fsr1l	equ	0xFE1
  2955                           postinc2	equ	0xFDE
  2956                           plusw2	equ	0xFDB
  2957                           status	equ	0xFD8
  2958                           
  2959 ;; *************** function _start_modem_send_process *****************
  2960 ;; Defined at:
  2961 ;;		line 13 in file "modem.c"
  2962 ;; Parameters:    Size  Location     Type
  2963 ;;  newEvent        1    wreg     unsigned char 
  2964 ;; Auto vars:     Size  Location     Type
  2965 ;;  newEvent        1    2[BANK0 ] unsigned char 
  2966 ;;  i               1    3[BANK0 ] unsigned char 
  2967 ;; Return value:  Size  Location     Type
  2968 ;;                  1    wreg      void 
  2969 ;; Registers used:
  2970 ;;		wreg, status,2, status,0, cstack
  2971 ;; Tracked objects:
  2972 ;;		On entry : 0/0
  2973 ;;		On exit  : 0/0
  2974 ;;		Unchanged: 0/0
  2975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2977 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2978 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2979 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2980 ;;Total ram usage:        4 bytes
  2981 ;; Hardware stack levels used:    1
  2982 ;; Hardware stack levels required when called:    5
  2983 ;; This function calls:
  2984 ;;		_start_md_boot_timer
  2985 ;; This function is called by:
  2986 ;;		_main
  2987 ;;		_send_md_cfg_cmds_ok
  2988 ;; This function uses a non-reentrant model
  2989 ;;
  2990                           
  2991                           	psect	text6
  2992  001CC8                     __ptext6:
  2993                           	opt stack 0
  2994  001CC8                     _start_modem_send_process:
  2995                           	opt stack 25
  2996                           
  2997                           ;incstack = 0
  2998                           ;start_modem_send_process@newEvent stored from wreg
  2999  001CC8  0100               	movlb	0	; () banked
  3000  001CCA  6F62               	movwf	start_modem_send_process@newEvent& (0+255),b
  3001                           
  3002                           ;modem.c: 17: if (!awake && newEvent == 0x00)
  3003  001CCC  504A               	movf	_awake,w,c
  3004  001CCE  A4D8               	btfss	status,2,c
  3005  001CD0  D020               	goto	l394
  3006  001CD2  0100               	movlb	0	; () banked
  3007  001CD4  5162               	movf	start_modem_send_process@newEvent& (0+255),w,b
  3008  001CD6  A4D8               	btfss	status,2,c
  3009  001CD8  D01C               	goto	l394
  3010                           
  3011                           ; BSR set to: 0
  3012                           ;modem.c: 18: {
  3013                           ;modem.c: 19: start_md_boot_timer();
  3014  001CDA  EC59  F00F         	call	_start_md_boot_timer	;wreg free
  3015                           
  3016                           ;modem.c: 20: md_state = WAITING_FOR_BOOT;
  3017  001CDE  0E01               	movlw	1
  3018  001CE0  0100               	movlb	0	; () banked
  3019  001CE2  6FD0               	movwf	_md_state& (0+255),b
  3020                           
  3021                           ; BSR set to: 0
  3022                           ;modem.c: 21: PORTAbits.RA3 = 0;
  3023  001CE4  9680               	bcf	3968,3,c	;volatile
  3024                           
  3025                           ; BSR set to: 0
  3026                           ;modem.c: 22: for (uint8_t i = 0; i < 10; i++)
  3027  001CE6  0E00               	movlw	0
  3028  001CE8  6F63               	movwf	start_modem_send_process@i& (0+255),b
  3029  001CEA  D00F               	goto	L2
  3030  001CEC                     l395:
  3031                           
  3032                           ; BSR set to: 0
  3033  001CEC  0004               	clrwdt		;# 
  3034                           
  3035                           ;modem.c: 25: _delay((unsigned long)((200)*(8000000/4000.0)));
  3036  001CEE  0E03               	movlw	3
  3037  001CF0  0100               	movlb	0	; () banked
  3038  001CF2  6F61               	movwf	(??_start_modem_send_process+1)& (0+255),b
  3039  001CF4  0E08               	movlw	8
  3040  001CF6  6F60               	movwf	??_start_modem_send_process& (0+255),b
  3041  001CF8  0E77               	movlw	119
  3042  001CFA                     u4377:
  3043  001CFA  2EE8               	decfsz	wreg,f,c
  3044  001CFC  D7FE               	bra	u4377
  3045  001CFE  2F60               	decfsz	??_start_modem_send_process& (0+255),f,b
  3046  001D00  D7FC               	bra	u4377
  3047  001D02  2F61               	decfsz	(??_start_modem_send_process+1)& (0+255),f,b
  3048  001D04  D7FA               	bra	u4377
  3049  001D06  0100               	movlb	0	; () banked
  3050  001D08  2B63               	incf	start_modem_send_process@i& (0+255),f,b
  3051  001D0A                     L2:
  3052  001D0A  0E09               	movlw	9
  3053  001D0C  6563               	cpfsgt	start_modem_send_process@i& (0+255),b
  3054  001D0E  D7EE               	goto	l395
  3055                           
  3056                           ; BSR set to: 0
  3057  001D10  0004               	clrwdt		;# 
  3058  001D12                     l394:
  3059                           
  3060                           ;modem.c: 28: }
  3061                           ;modem.c: 33: PORTAbits.RA3 = 1;
  3062  001D12  8680               	bsf	3968,3,c	;volatile
  3063                           
  3064                           ;modem.c: 34: start_md_boot_timer();
  3065  001D14  EC59  F00F         	call	_start_md_boot_timer	;wreg free
  3066                           
  3067                           ;modem.c: 35: md_state = WAITING_FOR_BOOT;
  3068  001D18  0E01               	movlw	1
  3069  001D1A  0100               	movlb	0	; () banked
  3070  001D1C  6FD0               	movwf	_md_state& (0+255),b
  3071                           
  3072                           ; BSR set to: 0
  3073  001D1E  0012               	return		;funcret
  3074  001D20                     __end_of_start_modem_send_process:
  3075                           	opt stack 0
  3076                           tblptru	equ	0xFF8
  3077                           tblptrh	equ	0xFF7
  3078                           tblptrl	equ	0xFF6
  3079                           tablat	equ	0xFF5
  3080                           intcon	equ	0xFF2
  3081                           postinc0	equ	0xFEE
  3082                           wreg	equ	0xFE8
  3083                           postdec1	equ	0xFE5
  3084                           plusw1	equ	0xFE3
  3085                           fsr1l	equ	0xFE1
  3086                           postinc2	equ	0xFDE
  3087                           plusw2	equ	0xFDB
  3088                           status	equ	0xFD8
  3089                           
  3090 ;; *************** function _start_md_boot_timer *****************
  3091 ;; Defined at:
  3092 ;;		line 42 in file "modem.c"
  3093 ;; Parameters:    Size  Location     Type
  3094 ;;		None
  3095 ;; Auto vars:     Size  Location     Type
  3096 ;;		None
  3097 ;; Return value:  Size  Location     Type
  3098 ;;                  1    wreg      void 
  3099 ;; Registers used:
  3100 ;;		cstack
  3101 ;; Tracked objects:
  3102 ;;		On entry : 0/0
  3103 ;;		On exit  : 0/0
  3104 ;;		Unchanged: 0/0
  3105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3109 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3110 ;;Total ram usage:        0 bytes
  3111 ;; Hardware stack levels used:    1
  3112 ;; Hardware stack levels required when called:    4
  3113 ;; This function calls:
  3114 ;;		_reload_tmr3_1s
  3115 ;; This function is called by:
  3116 ;;		_start_modem_send_process
  3117 ;;		_send_md_cfg_cmds_ok
  3118 ;; This function uses a non-reentrant model
  3119 ;;
  3120                           
  3121                           	psect	text7
  3122  001EB2                     __ptext7:
  3123                           	opt stack 0
  3124  001EB2                     _start_md_boot_timer:
  3125                           	opt stack 25
  3126                           
  3127                           ;modem.c: 45: reload_tmr3_1s();
  3128                           
  3129                           ; BSR set to: 0
  3130                           ;incstack = 0
  3131  001EB2  EC5C  F00F         	call	_reload_tmr3_1s	;wreg free
  3132  001EB6  0012               	return		;funcret
  3133  001EB8                     __end_of_start_md_boot_timer:
  3134                           	opt stack 0
  3135                           tblptru	equ	0xFF8
  3136                           tblptrh	equ	0xFF7
  3137                           tblptrl	equ	0xFF6
  3138                           tablat	equ	0xFF5
  3139                           intcon	equ	0xFF2
  3140                           postinc0	equ	0xFEE
  3141                           wreg	equ	0xFE8
  3142                           postdec1	equ	0xFE5
  3143                           plusw1	equ	0xFE3
  3144                           fsr1l	equ	0xFE1
  3145                           postinc2	equ	0xFDE
  3146                           plusw2	equ	0xFDB
  3147                           status	equ	0xFD8
  3148                           
  3149 ;; *************** function _close_socket_ok *****************
  3150 ;; Defined at:
  3151 ;;		line 251 in file "modem.c"
  3152 ;; Parameters:    Size  Location     Type
  3153 ;;		None
  3154 ;; Auto vars:     Size  Location     Type
  3155 ;;  syshalt        17    9[BANK0 ] const unsigned char [17]
  3156 ;;  deactivatePD   15   26[BANK0 ] const unsigned char [15]
  3157 ;;  closeSocket    10   41[BANK0 ] const unsigned char [10]
  3158 ;; Return value:  Size  Location     Type
  3159 ;;                  1    wreg      unsigned char 
  3160 ;; Registers used:
  3161 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3162 ;; Tracked objects:
  3163 ;;		On entry : 0/0
  3164 ;;		On exit  : 0/0
  3165 ;;		Unchanged: 0/0
  3166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3168 ;;      Locals:         0      42       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3170 ;;      Totals:         0      42       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3171 ;;Total ram usage:       42 bytes
  3172 ;; Hardware stack levels used:    1
  3173 ;; Hardware stack levels required when called:    5
  3174 ;; This function calls:
  3175 ;;		_md_uart_write_str_ok
  3176 ;;		_reset_AT_marks
  3177 ;; This function is called by:
  3178 ;;		_check_modem_state
  3179 ;; This function uses a non-reentrant model
  3180 ;;
  3181                           
  3182                           	psect	text8
  3183  0018DE                     __ptext8:
  3184                           	opt stack 0
  3185  0018DE                     _close_socket_ok:
  3186                           	opt stack 24
  3187                           
  3188                           ;modem.c: 253: const uint8_t closeSocket[] = "AT#SH=1\r\n";
  3189                           
  3190                           ;incstack = 0
  3191  0018DE  0E6A               	movlw	low close_socket_ok@F6900
  3192  0018E0  6EF6               	movwf	tblptrl,c
  3193  0018E2                     	if	1	;There is more than 1 active tblptr byte
  3194  0018E2  0E10               	movlw	high close_socket_ok@F6900
  3195  0018E4  6EF7               	movwf	tblptrh,c
  3196  0018E6                     	endif
  3197  0018E6                     	if	0	;There are less than 3 active tblptr bytes
  3198  0018E6                     	endif
  3199  0018E6  EE20  F089         	lfsr	2,close_socket_ok@closeSocket
  3200  0018EA  0E09               	movlw	9
  3201  0018EC                     u4200:
  3202  0018EC  0009               	tblrd		*+
  3203  0018EE  CFF5 FFDE          	movff	tablat,postinc2
  3204  0018F2  06E8               	decf	wreg,f,c
  3205  0018F4  E2FB               	bc	u4200
  3206                           
  3207                           ;modem.c: 254: const uint8_t deactivatePDP[] = "AT#SGACT=3,0\r\n";
  3208  0018F6  0E4E               	movlw	low close_socket_ok@F6902
  3209  0018F8  6EF6               	movwf	tblptrl,c
  3210  0018FA                     	if	1	;There is more than 1 active tblptr byte
  3211  0018FA  0E10               	movlw	high close_socket_ok@F6902
  3212  0018FC  6EF7               	movwf	tblptrh,c
  3213  0018FE                     	endif
  3214  0018FE                     	if	0	;There are less than 3 active tblptr bytes
  3215  0018FE                     	endif
  3216  0018FE  EE20  F07A         	lfsr	2,close_socket_ok@deactivatePDP
  3217  001902  0E0E               	movlw	14
  3218  001904                     u4210:
  3219  001904  0009               	tblrd		*+
  3220  001906  CFF5 FFDE          	movff	tablat,postinc2
  3221  00190A  06E8               	decf	wreg,f,c
  3222  00190C  E2FB               	bc	u4210
  3223                           
  3224                           ;modem.c: 255: const uint8_t syshalt[] = "AT#FASTSYSHALT\r\n";
  3225  00190E  0E2D               	movlw	low close_socket_ok@F6904
  3226  001910  6EF6               	movwf	tblptrl,c
  3227  001912                     	if	1	;There is more than 1 active tblptr byte
  3228  001912  0E10               	movlw	high close_socket_ok@F6904
  3229  001914  6EF7               	movwf	tblptrh,c
  3230  001916                     	endif
  3231  001916                     	if	0	;There are less than 3 active tblptr bytes
  3232  001916                     	endif
  3233  001916  EE20  F069         	lfsr	2,close_socket_ok@syshalt
  3234  00191A  0E10               	movlw	16
  3235  00191C                     u4220:
  3236  00191C  0009               	tblrd		*+
  3237  00191E  CFF5 FFDE          	movff	tablat,postinc2
  3238  001922  06E8               	decf	wreg,f,c
  3239  001924  E2FB               	bc	u4220
  3240                           
  3241                           ;modem.c: 257: if (!(sentAT1 == 0x03))
  3242  001926  0E03               	movlw	3
  3243  001928  0100               	movlb	0	; () banked
  3244  00192A  19CD               	xorwf	_sentAT1& (0+255),w,b
  3245  00192C  B4D8               	btfsc	status,2,c
  3246  00192E  D00E               	goto	l509
  3247                           
  3248                           ; BSR set to: 0
  3249                           ;modem.c: 258: sentAT1 = md_uart_write_str_ok((uint8_t *)&closeSocket[0], sizeof(closeSo
      +                          cket), 1, 0);
  3250  001930  0E89               	movlw	low close_socket_ok@closeSocket
  3251  001932  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  3252  001934  0E00               	movlw	high close_socket_ok@closeSocket
  3253  001936  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  3254  001938  0E0A               	movlw	10
  3255  00193A  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  3256  00193C  0E01               	movlw	1
  3257  00193E  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  3258  001940  0E00               	movlw	0
  3259  001942  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  3260  001944  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  3261  001948  0100               	movlb	0	; () banked
  3262  00194A  6FCD               	movwf	_sentAT1& (0+255),b
  3263  00194C                     l509:
  3264                           
  3265                           ; BSR set to: 0
  3266                           ;modem.c: 259: if ((sentAT1 == 0x03) && !(sentAT2 == 0x03))
  3267                           
  3268                           ; BSR set to: 0
  3269  00194C  0E03               	movlw	3
  3270  00194E  19CD               	xorwf	_sentAT1& (0+255),w,b
  3271  001950  A4D8               	btfss	status,2,c
  3272  001952  D012               	goto	l510
  3273                           
  3274                           ; BSR set to: 0
  3275  001954  0E03               	movlw	3
  3276  001956  19CC               	xorwf	_sentAT2& (0+255),w,b
  3277  001958  B4D8               	btfsc	status,2,c
  3278  00195A  D00E               	goto	l510
  3279                           
  3280                           ; BSR set to: 0
  3281                           ;modem.c: 260: sentAT2 = md_uart_write_str_ok((uint8_t *)&deactivatePDP[0], sizeof(deact
      +                          ivatePDP), 1, 0);
  3282  00195C  0E7A               	movlw	low close_socket_ok@deactivatePDP
  3283  00195E  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  3284  001960  0E00               	movlw	high close_socket_ok@deactivatePDP
  3285  001962  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  3286  001964  0E0F               	movlw	15
  3287  001966  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  3288  001968  0E01               	movlw	1
  3289  00196A  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  3290  00196C  0E00               	movlw	0
  3291  00196E  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  3292  001970  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  3293  001974  0100               	movlb	0	; () banked
  3294  001976  6FCC               	movwf	_sentAT2& (0+255),b
  3295  001978                     l510:
  3296                           
  3297                           ; BSR set to: 0
  3298                           ;modem.c: 262: if ((sentAT2 == 0x03) && !(sentAT3 == 0x03))
  3299                           
  3300                           ; BSR set to: 0
  3301  001978  0E03               	movlw	3
  3302  00197A  19CC               	xorwf	_sentAT2& (0+255),w,b
  3303  00197C  A4D8               	btfss	status,2,c
  3304  00197E  D012               	goto	l511
  3305                           
  3306                           ; BSR set to: 0
  3307  001980  0E03               	movlw	3
  3308  001982  19CB               	xorwf	_sentAT3& (0+255),w,b
  3309  001984  B4D8               	btfsc	status,2,c
  3310  001986  D00E               	goto	l511
  3311                           
  3312                           ; BSR set to: 0
  3313                           ;modem.c: 263: sentAT3 = md_uart_write_str_ok((uint8_t *)&syshalt[0], sizeof(syshalt), 1
      +                          , 0);
  3314  001988  0E69               	movlw	low close_socket_ok@syshalt
  3315  00198A  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  3316  00198C  0E00               	movlw	high close_socket_ok@syshalt
  3317  00198E  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  3318  001990  0E11               	movlw	17
  3319  001992  6F63               	movwf	md_uart_write_str_ok@len& (0+255),b
  3320  001994  0E01               	movlw	1
  3321  001996  6F64               	movwf	md_uart_write_str_ok@wantOK& (0+255),b
  3322  001998  0E00               	movlw	0
  3323  00199A  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  3324  00199C  EC38  F00A         	call	_md_uart_write_str_ok	;wreg free
  3325  0019A0  0100               	movlb	0	; () banked
  3326  0019A2  6FCB               	movwf	_sentAT3& (0+255),b
  3327  0019A4                     l511:
  3328                           
  3329                           ; BSR set to: 0
  3330                           ;modem.c: 264: if (sentAT3 == 0x03)
  3331                           
  3332                           ; BSR set to: 0
  3333  0019A4  0E03               	movlw	3
  3334  0019A6  19CB               	xorwf	_sentAT3& (0+255),w,b
  3335  0019A8  A4D8               	btfss	status,2,c
  3336  0019AA  D006               	goto	l512
  3337                           
  3338                           ; BSR set to: 0
  3339                           ;modem.c: 265: {
  3340                           ;modem.c: 266: pdpIsActive = 0;
  3341  0019AC  0E00               	movlw	0
  3342  0019AE  6FCE               	movwf	_pdpIsActive& (0+255),b
  3343                           
  3344                           ; BSR set to: 0
  3345                           ;modem.c: 267: reset_AT_marks();
  3346  0019B0  ECB8  F00E         	call	_reset_AT_marks	;wreg free
  3347                           
  3348                           ;modem.c: 268: return 1;
  3349  0019B4  0E01               	movlw	1
  3350  0019B6  0012               	return	
  3351  0019B8                     l512:
  3352                           
  3353                           ;modem.c: 273: }
  3354                           ;modem.c: 274: return 0;
  3355                           
  3356                           ;modem.c: 271: {
  3357  0019B8  0E00               	movlw	0
  3358  0019BA  0012               	return	
  3359  0019BC                     __end_of_close_socket_ok:
  3360                           	opt stack 0
  3361                           tblptru	equ	0xFF8
  3362                           tblptrh	equ	0xFF7
  3363                           tblptrl	equ	0xFF6
  3364                           tablat	equ	0xFF5
  3365                           intcon	equ	0xFF2
  3366                           postinc0	equ	0xFEE
  3367                           wreg	equ	0xFE8
  3368                           postdec1	equ	0xFE5
  3369                           plusw1	equ	0xFE3
  3370                           fsr1l	equ	0xFE1
  3371                           postinc2	equ	0xFDE
  3372                           plusw2	equ	0xFDB
  3373                           status	equ	0xFD8
  3374                           
  3375 ;; *************** function _reset_AT_marks *****************
  3376 ;; Defined at:
  3377 ;;		line 277 in file "modem.c"
  3378 ;; Parameters:    Size  Location     Type
  3379 ;;		None
  3380 ;; Auto vars:     Size  Location     Type
  3381 ;;		None
  3382 ;; Return value:  Size  Location     Type
  3383 ;;                  1    wreg      void 
  3384 ;; Registers used:
  3385 ;;		wreg, status,2
  3386 ;; Tracked objects:
  3387 ;;		On entry : 0/0
  3388 ;;		On exit  : 0/0
  3389 ;;		Unchanged: 0/0
  3390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3394 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3395 ;;Total ram usage:        0 bytes
  3396 ;; Hardware stack levels used:    1
  3397 ;; Hardware stack levels required when called:    3
  3398 ;; This function calls:
  3399 ;;		Nothing
  3400 ;; This function is called by:
  3401 ;;		_send_md_cfg_cmds_ok
  3402 ;;		_setup_data_ok
  3403 ;;		_send_over_socket_ok
  3404 ;;		_close_socket_ok
  3405 ;; This function uses a non-reentrant model
  3406 ;;
  3407                           
  3408                           	psect	text9
  3409  001D70                     __ptext9:
  3410                           	opt stack 0
  3411  001D70                     _reset_AT_marks:
  3412                           	opt stack 25
  3413                           
  3414                           ;modem.c: 279: sentAT1 = 0;
  3415                           
  3416                           ;incstack = 0
  3417  001D70  0E00               	movlw	0
  3418  001D72  0100               	movlb	0	; () banked
  3419  001D74  6FCD               	movwf	_sentAT1& (0+255),b
  3420                           
  3421                           ;modem.c: 280: sentAT2 = 0;
  3422  001D76  0E00               	movlw	0
  3423  001D78  6FCC               	movwf	_sentAT2& (0+255),b
  3424                           
  3425                           ;modem.c: 281: sentAT3 = 0;
  3426  001D7A  0E00               	movlw	0
  3427  001D7C  6FCB               	movwf	_sentAT3& (0+255),b
  3428                           
  3429                           ;modem.c: 282: sentAT4 = 0;
  3430  001D7E  0E00               	movlw	0
  3431  001D80  6FCA               	movwf	_sentAT4& (0+255),b
  3432                           
  3433                           ;modem.c: 283: sentAT5 = 0;
  3434  001D82  0E00               	movlw	0
  3435  001D84  6FC9               	movwf	_sentAT5& (0+255),b
  3436                           
  3437                           ;modem.c: 284: sentAT6 = 0;
  3438  001D86  0E00               	movlw	0
  3439  001D88  6FC8               	movwf	_sentAT6& (0+255),b
  3440                           
  3441                           ;modem.c: 285: sentAT7 = 0;
  3442  001D8A  0E00               	movlw	0
  3443  001D8C  6FC7               	movwf	_sentAT7& (0+255),b
  3444                           
  3445                           ;modem.c: 286: sentAT8 = 0;
  3446  001D8E  0E00               	movlw	0
  3447  001D90  6FC6               	movwf	_sentAT8& (0+255),b
  3448                           
  3449                           ;modem.c: 287: sentAT9 = 0;
  3450  001D92  0E00               	movlw	0
  3451  001D94  6FC5               	movwf	_sentAT9& (0+255),b
  3452                           
  3453                           ;modem.c: 288: sentAT10 = 0;
  3454  001D96  0E00               	movlw	0
  3455  001D98  6FC4               	movwf	_sentAT10& (0+255),b
  3456                           
  3457                           ;modem.c: 289: sentAT11 = 0;
  3458  001D9A  0E00               	movlw	0
  3459  001D9C  6FC3               	movwf	_sentAT11& (0+255),b
  3460                           
  3461                           ;modem.c: 290: sentAT12 = 0;
  3462  001D9E  0E00               	movlw	0
  3463  001DA0  6FC2               	movwf	_sentAT12& (0+255),b
  3464                           
  3465                           ; BSR set to: 0
  3466  001DA2  0012               	return		;funcret
  3467  001DA4                     __end_of_reset_AT_marks:
  3468                           	opt stack 0
  3469                           tblptru	equ	0xFF8
  3470                           tblptrh	equ	0xFF7
  3471                           tblptrl	equ	0xFF6
  3472                           tablat	equ	0xFF5
  3473                           intcon	equ	0xFF2
  3474                           postinc0	equ	0xFEE
  3475                           wreg	equ	0xFE8
  3476                           postdec1	equ	0xFE5
  3477                           plusw1	equ	0xFE3
  3478                           fsr1l	equ	0xFE1
  3479                           postinc2	equ	0xFDE
  3480                           plusw2	equ	0xFDB
  3481                           status	equ	0xFD8
  3482                           
  3483 ;; *************** function _md_uart_write_str_ok *****************
  3484 ;; Defined at:
  3485 ;;		line 76 in file "uart.c"
  3486 ;; Parameters:    Size  Location     Type
  3487 ;;  data            2    1[BANK0 ] PTR unsigned char 
  3488 ;;		 -> close_socket_ok@syshalt(17), close_socket_ok@deactivatePDP(15), close_socket_ok@closeSocket(10), send_over_socke
      +t_ok@terminateData(1), 
  3489 ;;		 -> send_over_socket_ok@msg(8), send_over_socket_ok@srecv(16), send_over_socket_ok@ssend(13), send_over_socket_ok@op
      +enConnection(44), 
  3490 ;;		 -> setup_data_ok@activatePDP(15), setup_data_ok@cfgSocket(25), setup_data_ok@setApn(47), send_md_cfg_cmds_ok@csq(9)
      +, 
  3491 ;;		 -> send_md_cfg_cmds_ok@gprs(11), send_md_cfg_cmds_ok@cereg(12), send_md_cfg_cmds_ok@creg(11), send_md_cfg_cmds_ok@c
      +pin(11), 
  3492 ;;		 -> send_md_cfg_cmds_ok@queryVersion(10), send_md_cfg_cmds_ok@ledpattern(12), send_md_cfg_cmds_ok@ledCfg(16), send_m
      +d_cfg_cmds_ok@baud(16), 
  3493 ;;		 -> send_md_cfg_cmds_ok@cmee(12), send_md_cfg_cmds_ok@ate(7), send_md_cfg_cmds_ok@at(5), 
  3494 ;;  len             1    3[BANK0 ] unsigned char 
  3495 ;;  wantOK          1    4[BANK0 ] unsigned char 
  3496 ;;  waitToSendMo    1    5[BANK0 ] unsigned char 
  3497 ;; Auto vars:     Size  Location     Type
  3498 ;;  index           1    8[BANK0 ] unsigned char 
  3499 ;;  currentChar     1    7[BANK0 ] unsigned char 
  3500 ;;  temp            1    0        unsigned char 
  3501 ;; Return value:  Size  Location     Type
  3502 ;;                  1    wreg      unsigned char 
  3503 ;; Registers used:
  3504 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3505 ;; Tracked objects:
  3506 ;;		On entry : 0/0
  3507 ;;		On exit  : 0/0
  3508 ;;		Unchanged: 0/0
  3509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3510 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3511 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3512 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3513 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3514 ;;Total ram usage:        8 bytes
  3515 ;; Hardware stack levels used:    1
  3516 ;; Hardware stack levels required when called:    4
  3517 ;; This function calls:
  3518 ;;		_disable_tmr3
  3519 ;;		_enable_md_rxint
  3520 ;;		_init_md_uart
  3521 ;;		_md_uart_send
  3522 ;;		_reload_tmr3_1s
  3523 ;;		_reset_retry_count
  3524 ;;		_terminate_md_uart
  3525 ;; This function is called by:
  3526 ;;		_send_md_cfg_cmds_ok
  3527 ;;		_setup_data_ok
  3528 ;;		_send_over_socket_ok
  3529 ;;		_close_socket_ok
  3530 ;; This function uses a non-reentrant model
  3531 ;;
  3532                           
  3533                           	psect	text10
  3534  001470                     __ptext10:
  3535                           	opt stack 0
  3536  001470                     _md_uart_write_str_ok:
  3537                           	opt stack 24
  3538                           
  3539                           ;uart.c: 79: uint8_t currentChar, temp;
  3540                           ;uart.c: 80: switch (atCmdState)
  3541                           
  3542                           ; BSR set to: 0
  3543                           ;incstack = 0
  3544  001470  D0D8               	goto	l270
  3545  001472                     
  3546                           ;uart.c: 83: tmr3_cnt = 0;
  3547  001472  0E00               	movlw	0
  3548  001474  6E44               	movwf	_tmr3_cnt,c
  3549  001476  0E00               	movlw	0
  3550  001478  6E45               	movwf	_tmr3_cnt+1,c
  3551  00147A  0E00               	movlw	0
  3552  00147C  6E46               	movwf	_tmr3_cnt+2,c
  3553  00147E  0E00               	movlw	0
  3554  001480  6E47               	movwf	_tmr3_cnt+3,c
  3555                           
  3556                           ;uart.c: 84: endPtr = 0;
  3557  001482  0E00               	movlw	0
  3558  001484  6E50               	movwf	_endPtr,c
  3559                           
  3560                           ;uart.c: 85: receivedOK = 0;
  3561  001486  0E00               	movlw	0
  3562  001488  6E4F               	movwf	_receivedOK,c
  3563                           
  3564                           ;uart.c: 86: receivedERR = 0;
  3565  00148A  0E00               	movlw	0
  3566  00148C  6E4E               	movwf	_receivedERR,c
  3567                           
  3568                           ;uart.c: 87: if (numRetries -- > 0)
  3569  00148E  062B               	decf	_numRetries,f,c
  3570  001490  282B               	incf	_numRetries,w,c
  3571  001492  0A80               	xorlw	128
  3572  001494  0F7F               	addlw	-129
  3573  001496  A0D8               	btfss	status,0,c
  3574  001498  D044               	goto	l272
  3575                           
  3576                           ;uart.c: 88: {
  3577                           ;uart.c: 89: init_md_uart();
  3578  00149A  EC14  F00F         	call	_init_md_uart	;wreg free
  3579                           
  3580                           ;uart.c: 90: _delay((unsigned long)((10)*(8000000/4000.0)));
  3581  00149E  0E1A               	movlw	26
  3582  0014A0  0100               	movlb	0	; () banked
  3583  0014A2  6F66               	movwf	??_md_uart_write_str_ok& (0+255),b
  3584  0014A4  0EF8               	movlw	248
  3585  0014A6                     u4387:
  3586  0014A6  2EE8               	decfsz	wreg,f,c
  3587  0014A8  D7FE               	bra	u4387
  3588  0014AA  2F66               	decfsz	??_md_uart_write_str_ok& (0+255),f,b
  3589  0014AC  D7FC               	bra	u4387
  3590  0014AE  F000               	nop	
  3591                           
  3592                           ;uart.c: 91: timedOut = 0;
  3593  0014B0  0E00               	movlw	0
  3594  0014B2  6E4B               	movwf	_timedOut,c
  3595                           
  3596                           ;uart.c: 93: for (uint8_t index = 0; index < len; index++)
  3597  0014B4  0E00               	movlw	0
  3598  0014B6  0100               	movlb	0	; () banked
  3599  0014B8  6F68               	movwf	md_uart_write_str_ok@index& (0+255),b
  3600  0014BA  D00D               	goto	l273
  3601  0014BC                     
  3602                           ; BSR set to: 0
  3603                           ;uart.c: 94: {
  3604                           ;uart.c: 95: currentChar = *data;
  3605                           
  3606                           ; BSR set to: 0
  3607  0014BC  C061  FFD9         	movff	md_uart_write_str_ok@data,fsr2l
  3608  0014C0  C062  FFDA         	movff	md_uart_write_str_ok@data+1,fsr2h
  3609  0014C4  50DF               	movf	indf2,w,c
  3610  0014C6  6F67               	movwf	md_uart_write_str_ok@currentChar& (0+255),b
  3611                           
  3612                           ; BSR set to: 0
  3613                           ;uart.c: 96: md_uart_send(currentChar);
  3614  0014C8  5167               	movf	md_uart_write_str_ok@currentChar& (0+255),w,b
  3615  0014CA  EC42  F00F         	call	_md_uart_send
  3616                           
  3617                           ;uart.c: 97: data++;
  3618  0014CE  0100               	movlb	0	; () banked
  3619  0014D0  4B61               	infsnz	md_uart_write_str_ok@data& (0+255),f,b
  3620  0014D2  2B62               	incf	(md_uart_write_str_ok@data+1)& (0+255),f,b
  3621                           
  3622                           ; BSR set to: 0
  3623  0014D4  2B68               	incf	md_uart_write_str_ok@index& (0+255),f,b
  3624  0014D6                     l273:
  3625                           
  3626                           ; BSR set to: 0
  3627                           
  3628                           ; BSR set to: 0
  3629  0014D6  5163               	movf	md_uart_write_str_ok@len& (0+255),w,b
  3630  0014D8  5D68               	subwf	md_uart_write_str_ok@index& (0+255),w,b
  3631  0014DA  A0D8               	btfss	status,0,c
  3632  0014DC  D7EF               	goto	l274
  3633                           
  3634                           ; BSR set to: 0
  3635                           ;uart.c: 98: }
  3636                           ;uart.c: 99: if (wantOK && !waitToSendMoreData)
  3637                           
  3638                           ; BSR set to: 0
  3639  0014DE  5164               	movf	md_uart_write_str_ok@wantOK& (0+255),w,b
  3640  0014E0  B4D8               	btfsc	status,2,c
  3641  0014E2  D009               	goto	l276
  3642                           
  3643                           ; BSR set to: 0
  3644  0014E4  5165               	movf	md_uart_write_str_ok@waitToSendMoreData& (0+255),w,b
  3645  0014E6  A4D8               	btfss	status,2,c
  3646  0014E8  D006               	goto	l276
  3647                           
  3648                           ; BSR set to: 0
  3649                           ;uart.c: 100: {
  3650                           ;uart.c: 101: enable_md_rxint();
  3651  0014EA  EC39  F00F         	call	_enable_md_rxint	;wreg free
  3652                           
  3653                           ;uart.c: 102: reload_tmr3_1s();
  3654  0014EE  EC5C  F00F         	call	_reload_tmr3_1s	;wreg free
  3655                           
  3656                           ;uart.c: 103: atCmdState = AT_WAIT_OK;
  3657  0014F2  0E02               	movlw	2
  3658  0014F4  D014               	goto	L3
  3659  0014F6                     l276:
  3660                           
  3661                           ;uart.c: 105: else if (!wantOK && !waitToSendMoreData)
  3662  0014F6  0100               	movlb	0	; () banked
  3663  0014F8  5164               	movf	md_uart_write_str_ok@wantOK& (0+255),w,b
  3664  0014FA  A4D8               	btfss	status,2,c
  3665  0014FC  D007               	goto	l278
  3666                           
  3667                           ; BSR set to: 0
  3668  0014FE  5165               	movf	md_uart_write_str_ok@waitToSendMoreData& (0+255),w,b
  3669  001500  A4D8               	btfss	status,2,c
  3670  001502  D004               	goto	l278
  3671                           
  3672                           ; BSR set to: 0
  3673                           ;uart.c: 106: {
  3674                           ;uart.c: 107: terminate_md_uart();
  3675  001504  EC4F  F00F         	call	_terminate_md_uart	;wreg free
  3676                           
  3677                           ;uart.c: 108: return 1;
  3678  001508  0E01               	movlw	1
  3679  00150A  0012               	return	
  3680  00150C                     l278:
  3681                           
  3682                           ;uart.c: 168: else if (waitToSendMoreData)
  3683  00150C  0100               	movlb	0	; () banked
  3684  00150E  5165               	movf	md_uart_write_str_ok@waitToSendMoreData& (0+255),w,b
  3685  001510  B4D8               	btfsc	status,2,c
  3686  001512  D091               	goto	l283
  3687                           
  3688                           ; BSR set to: 0
  3689                           ;uart.c: 169: {
  3690                           ;uart.c: 170: enable_md_rxint();
  3691  001514  EC39  F00F         	call	_enable_md_rxint	;wreg free
  3692                           
  3693                           ;uart.c: 171: reload_tmr3_1s();
  3694  001518  EC5C  F00F         	call	_reload_tmr3_1s	;wreg free
  3695                           
  3696                           ;uart.c: 172: atCmdState = AT_WAIT_MORE;
  3697  00151C  0E01               	movlw	1
  3698  00151E                     L3:
  3699  00151E  6E51               	movwf	_atCmdState,c
  3700                           
  3701                           ;uart.c: 173: }
  3702                           ;uart.c: 174: }
  3703  001520  D08A               	goto	l283
  3704  001522                     l272:
  3705                           
  3706                           ;uart.c: 175: else
  3707                           ;uart.c: 176: {
  3708                           ;uart.c: 177: numRetries = 15;
  3709  001522  0E0F               	movlw	15
  3710  001524  6E2B               	movwf	_numRetries,c
  3711  001526                     l2836:
  3712                           
  3713                           ;uart.c: 178: return 0x04;
  3714  001526  0E04               	movlw	4
  3715  001528  0012               	return	
  3716  00152A                     
  3717                           ;uart.c: 182: if (receivedCarat)
  3718  00152A  504C               	movf	_receivedCarat,w,c
  3719  00152C  B4D8               	btfsc	status,2,c
  3720  00152E  D00A               	goto	l285
  3721                           
  3722                           ;uart.c: 183: {
  3723                           ;uart.c: 184: disable_tmr3();
  3724  001530  EC25  F00F         	call	_disable_tmr3	;wreg free
  3725                           
  3726                           ;uart.c: 185: terminate_md_uart();
  3727  001534  EC4F  F00F         	call	_terminate_md_uart	;wreg free
  3728                           
  3729                           ;uart.c: 186: receivedCarat = 0;
  3730  001538  0E00               	movlw	0
  3731  00153A  6E4C               	movwf	_receivedCarat,c
  3732                           
  3733                           ;uart.c: 187: atCmdState = AT_SEND;
  3734  00153C  0E00               	movlw	0
  3735  00153E  6E51               	movwf	_atCmdState,c
  3736                           
  3737                           ;uart.c: 188: return 0x03;
  3738  001540  0E03               	movlw	3
  3739  001542  0012               	return	
  3740  001544                     l285:
  3741                           
  3742                           ;uart.c: 190: else if (!receivedCarat && timedOut && numRetries > 0)
  3743  001544  504C               	movf	_receivedCarat,w,c
  3744  001546  A4D8               	btfss	status,2,c
  3745  001548  D012               	goto	l287
  3746  00154A  504B               	movf	_timedOut,w,c
  3747  00154C  B4D8               	btfsc	status,2,c
  3748  00154E  D00F               	goto	l287
  3749  001550  502B               	movf	_numRetries,w,c
  3750  001552  0A80               	xorlw	128
  3751  001554  0F7F               	addlw	-129
  3752  001556  A0D8               	btfss	status,0,c
  3753  001558  D00A               	goto	l287
  3754                           
  3755                           ;uart.c: 191: {
  3756                           ;uart.c: 192: disable_tmr3();
  3757  00155A  EC25  F00F         	call	_disable_tmr3	;wreg free
  3758                           
  3759                           ;uart.c: 193: terminate_md_uart();
  3760  00155E  EC4F  F00F         	call	_terminate_md_uart	;wreg free
  3761                           
  3762                           ;uart.c: 194: timedOut = 0;
  3763  001562  0E00               	movlw	0
  3764  001564  6E4B               	movwf	_timedOut,c
  3765                           
  3766                           ;uart.c: 195: atCmdState = AT_SEND;
  3767  001566  0E00               	movlw	0
  3768  001568  6E51               	movwf	_atCmdState,c
  3769                           
  3770                           ;uart.c: 196: return 0x01;
  3771  00156A  0E01               	movlw	1
  3772  00156C  0012               	return	
  3773  00156E                     l287:
  3774                           
  3775                           ;uart.c: 197: }
  3776                           ;uart.c: 198: if (numRetries == 0)
  3777  00156E  502B               	movf	_numRetries,w,c
  3778  001570  A4D8               	btfss	status,2,c
  3779  001572  D061               	goto	l283
  3780                           
  3781                           ;uart.c: 199: {
  3782                           ;uart.c: 200: disable_tmr3();
  3783  001574  EC25  F00F         	call	_disable_tmr3	;wreg free
  3784                           
  3785                           ;uart.c: 201: terminate_md_uart();
  3786  001578  EC4F  F00F         	call	_terminate_md_uart	;wreg free
  3787  00157C  D04F               	goto	L4
  3788  00157E                     
  3789                           ;uart.c: 207: if (receivedOK && !receivedERR)
  3790  00157E  504F               	movf	_receivedOK,w,c
  3791  001580  B4D8               	btfsc	status,2,c
  3792  001582  D017               	goto	l290
  3793  001584  504E               	movf	_receivedERR,w,c
  3794  001586  A4D8               	btfss	status,2,c
  3795  001588  D014               	goto	l290
  3796                           
  3797                           ;uart.c: 208: {
  3798                           ;uart.c: 209: reset_retry_count();
  3799  00158A  EC90  F00E         	call	_reset_retry_count	;wreg free
  3800                           
  3801                           ;uart.c: 210: tmr3_cnt = 0;
  3802  00158E  0E00               	movlw	0
  3803  001590  6E44               	movwf	_tmr3_cnt,c
  3804  001592  0E00               	movlw	0
  3805  001594  6E45               	movwf	_tmr3_cnt+1,c
  3806  001596  0E00               	movlw	0
  3807  001598  6E46               	movwf	_tmr3_cnt+2,c
  3808  00159A  0E00               	movlw	0
  3809  00159C  6E47               	movwf	_tmr3_cnt+3,c
  3810                           
  3811                           ;uart.c: 211: disable_tmr3();
  3812  00159E  EC25  F00F         	call	_disable_tmr3	;wreg free
  3813                           
  3814                           ;uart.c: 212: terminate_md_uart();
  3815  0015A2  EC4F  F00F         	call	_terminate_md_uart	;wreg free
  3816                           
  3817                           ;uart.c: 213: receivedOK = 0;
  3818  0015A6  0E00               	movlw	0
  3819  0015A8  6E4F               	movwf	_receivedOK,c
  3820                           
  3821                           ;uart.c: 214: atCmdState = AT_SEND;
  3822  0015AA  0E00               	movlw	0
  3823  0015AC  6E51               	movwf	_atCmdState,c
  3824                           
  3825                           ;uart.c: 215: return 0x03;
  3826  0015AE  0E03               	movlw	3
  3827  0015B0  0012               	return	
  3828  0015B2                     l290:
  3829                           
  3830                           ;uart.c: 217: else if (!receivedOK && receivedERR && timedOut)
  3831  0015B2  504F               	movf	_receivedOK,w,c
  3832  0015B4  A4D8               	btfss	status,2,c
  3833  0015B6  D012               	goto	l292
  3834  0015B8  504E               	movf	_receivedERR,w,c
  3835  0015BA  B4D8               	btfsc	status,2,c
  3836  0015BC  D00F               	goto	l292
  3837  0015BE  504B               	movf	_timedOut,w,c
  3838  0015C0  B4D8               	btfsc	status,2,c
  3839  0015C2  D00C               	goto	l292
  3840                           
  3841                           ;uart.c: 218: {
  3842                           ;uart.c: 219: receivedERR = 0;
  3843  0015C4  0E00               	movlw	0
  3844  0015C6  6E4E               	movwf	_receivedERR,c
  3845                           
  3846                           ;uart.c: 220: timedOut = 0;
  3847  0015C8  0E00               	movlw	0
  3848  0015CA  6E4B               	movwf	_timedOut,c
  3849                           
  3850                           ;uart.c: 221: disable_tmr3();
  3851  0015CC  EC25  F00F         	call	_disable_tmr3	;wreg free
  3852                           
  3853                           ;uart.c: 222: terminate_md_uart();
  3854  0015D0  EC4F  F00F         	call	_terminate_md_uart	;wreg free
  3855                           
  3856                           ;uart.c: 223: atCmdState = AT_SEND;
  3857  0015D4  0E00               	movlw	0
  3858  0015D6  6E51               	movwf	_atCmdState,c
  3859                           
  3860                           ;uart.c: 224: return 0x02;
  3861  0015D8  0E02               	movlw	2
  3862  0015DA  0012               	return	
  3863  0015DC                     l292:
  3864                           
  3865                           ;uart.c: 226: else if (!receivedOK && !receivedERR && timedOut)
  3866  0015DC  504F               	movf	_receivedOK,w,c
  3867  0015DE  A4D8               	btfss	status,2,c
  3868  0015E0  D016               	goto	l294
  3869  0015E2  504E               	movf	_receivedERR,w,c
  3870  0015E4  A4D8               	btfss	status,2,c
  3871  0015E6  D013               	goto	l294
  3872  0015E8  504B               	movf	_timedOut,w,c
  3873  0015EA  B4D8               	btfsc	status,2,c
  3874  0015EC  D010               	goto	l294
  3875                           
  3876                           ;uart.c: 227: {
  3877                           ;uart.c: 228: toggle = ~toggle;
  3878  0015EE  1E2A               	comf	_toggle,f,c
  3879                           
  3880                           ;uart.c: 229: PORTBbits.RB3 = toggle;
  3881  0015F0  B02A               	btfsc	_toggle,0,c
  3882  0015F2  D002               	bra	u3305
  3883  0015F4  9681               	bcf	3969,3,c	;volatile
  3884  0015F6  D001               	bra	u3306
  3885  0015F8                     u3305:
  3886  0015F8  8681               	bsf	3969,3,c	;volatile
  3887  0015FA                     u3306:
  3888                           
  3889                           ;uart.c: 230: timedOut = 0;
  3890  0015FA  0E00               	movlw	0
  3891  0015FC  6E4B               	movwf	_timedOut,c
  3892                           
  3893                           ;uart.c: 231: disable_tmr3();
  3894  0015FE  EC25  F00F         	call	_disable_tmr3	;wreg free
  3895                           
  3896                           ;uart.c: 232: terminate_md_uart();
  3897  001602  EC4F  F00F         	call	_terminate_md_uart	;wreg free
  3898                           
  3899                           ;uart.c: 233: atCmdState = AT_SEND;
  3900  001606  0E00               	movlw	0
  3901  001608  6E51               	movwf	_atCmdState,c
  3902                           
  3903                           ;uart.c: 234: return 0x01;
  3904  00160A  0E01               	movlw	1
  3905  00160C  0012               	return	
  3906  00160E                     l294:
  3907                           
  3908                           ;uart.c: 235: }
  3909                           ;uart.c: 236: if (numRetries == 0)
  3910  00160E  502B               	movf	_numRetries,w,c
  3911  001610  A4D8               	btfss	status,2,c
  3912  001612  D011               	goto	l283
  3913                           
  3914                           ;uart.c: 237: {
  3915                           ;uart.c: 239: disable_tmr3();
  3916  001614  EC25  F00F         	call	_disable_tmr3	;wreg free
  3917                           
  3918                           ;uart.c: 240: terminate_md_uart();
  3919  001618  EC4F  F00F         	call	_terminate_md_uart	;wreg free
  3920  00161C                     L4:
  3921                           
  3922                           ;uart.c: 241: atCmdState = AT_SEND;
  3923  00161C  0E00               	movlw	0
  3924  00161E  6E51               	movwf	_atCmdState,c
  3925  001620  D782               	goto	l2836
  3926  001622                     l270:
  3927  001622  5051               	movf	_atCmdState,w,c
  3928                           
  3929                           ; Switch size 1, requested type "space"
  3930                           ; Number of cases is 3, Range of values is 0 to 2
  3931                           ; switch strategies available:
  3932                           ; Name         Instructions Cycles
  3933                           ; simple_byte           10     6 (average)
  3934                           ;	Chosen strategy is simple_byte
  3935  001624  0A00               	xorlw	0	; case 0
  3936  001626  B4D8               	btfsc	status,2,c
  3937  001628  D724               	goto	l271
  3938  00162A  0A01               	xorlw	1	; case 1
  3939  00162C  B4D8               	btfsc	status,2,c
  3940  00162E  D77D               	goto	l284
  3941  001630  0A03               	xorlw	3	; case 2
  3942  001632  B4D8               	btfsc	status,2,c
  3943  001634  D7A4               	goto	l289
  3944  001636                     l283:
  3945                           
  3946                           ;uart.c: 246: if (receivedOK)
  3947  001636  504F               	movf	_receivedOK,w,c
  3948  001638  B4D8               	btfsc	status,2,c
  3949  00163A  D002               	goto	l296
  3950                           
  3951                           ;uart.c: 247: return 0x03;
  3952  00163C  0E03               	movlw	3
  3953  00163E  0012               	return	
  3954  001640                     l296:
  3955                           
  3956                           ;uart.c: 248: else if (receivedERR)
  3957  001640  504E               	movf	_receivedERR,w,c
  3958  001642  B4D8               	btfsc	status,2,c
  3959  001644  D002               	goto	l298
  3960                           
  3961                           ;uart.c: 249: return 0x02;
  3962  001646  0E02               	movlw	2
  3963  001648  0012               	return	
  3964  00164A                     l298:
  3965                           
  3966                           ;uart.c: 250: else if (timedOut)
  3967  00164A  504B               	movf	_timedOut,w,c
  3968  00164C  B4D8               	btfsc	status,2,c
  3969  00164E  D002               	goto	l300
  3970                           
  3971                           ;uart.c: 251: return 0x01;
  3972  001650  0E01               	movlw	1
  3973  001652  0012               	return	
  3974  001654                     l300:
  3975                           
  3976                           ;uart.c: 252: else
  3977                           ;uart.c: 253: return 0x05;
  3978  001654  0E05               	movlw	5
  3979  001656  0012               	return	
  3980  001658                     __end_of_md_uart_write_str_ok:
  3981                           	opt stack 0
  3982                           tblptru	equ	0xFF8
  3983                           tblptrh	equ	0xFF7
  3984                           tblptrl	equ	0xFF6
  3985                           tablat	equ	0xFF5
  3986                           intcon	equ	0xFF2
  3987                           postinc0	equ	0xFEE
  3988                           wreg	equ	0xFE8
  3989                           postdec1	equ	0xFE5
  3990                           plusw1	equ	0xFE3
  3991                           fsr1l	equ	0xFE1
  3992                           indf2	equ	0xFDF
  3993                           postinc2	equ	0xFDE
  3994                           plusw2	equ	0xFDB
  3995                           fsr2h	equ	0xFDA
  3996                           fsr2l	equ	0xFD9
  3997                           status	equ	0xFD8
  3998                           
  3999 ;; *************** function _terminate_md_uart *****************
  4000 ;; Defined at:
  4001 ;;		line 64 in file "uart.c"
  4002 ;; Parameters:    Size  Location     Type
  4003 ;;		None
  4004 ;; Auto vars:     Size  Location     Type
  4005 ;;		None
  4006 ;; Return value:  Size  Location     Type
  4007 ;;                  1    wreg      void 
  4008 ;; Registers used:
  4009 ;;		None
  4010 ;; Tracked objects:
  4011 ;;		On entry : 0/0
  4012 ;;		On exit  : 0/0
  4013 ;;		Unchanged: 0/0
  4014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4018 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4019 ;;Total ram usage:        0 bytes
  4020 ;; Hardware stack levels used:    1
  4021 ;; Hardware stack levels required when called:    3
  4022 ;; This function calls:
  4023 ;;		Nothing
  4024 ;; This function is called by:
  4025 ;;		_md_uart_write_str_ok
  4026 ;; This function uses a non-reentrant model
  4027 ;;
  4028                           
  4029                           	psect	text11
  4030  001E9E                     __ptext11:
  4031                           	opt stack 0
  4032  001E9E                     _terminate_md_uart:
  4033                           	opt stack 24
  4034                           
  4035                           ;uart.c: 66: RCSTA1bits.SPEN = 0;
  4036                           
  4037                           ;incstack = 0
  4038  001E9E  9EAB               	bcf	4011,7,c	;volatile
  4039                           
  4040                           ;uart.c: 69: TRISCbits.TRISC6 = 0;
  4041  001EA0  9C94               	bcf	3988,6,c	;volatile
  4042                           
  4043                           ;uart.c: 70: PORTCbits.RC6 = 0;
  4044  001EA2  9C82               	bcf	3970,6,c	;volatile
  4045                           
  4046                           ;uart.c: 71: RC1IE = 0;
  4047  001EA4  9A9D               	bcf	3997,5,c	;volatile
  4048  001EA6  0012               	return		;funcret
  4049  001EA8                     __end_of_terminate_md_uart:
  4050                           	opt stack 0
  4051                           tblptru	equ	0xFF8
  4052                           tblptrh	equ	0xFF7
  4053                           tblptrl	equ	0xFF6
  4054                           tablat	equ	0xFF5
  4055                           intcon	equ	0xFF2
  4056                           postinc0	equ	0xFEE
  4057                           wreg	equ	0xFE8
  4058                           postdec1	equ	0xFE5
  4059                           plusw1	equ	0xFE3
  4060                           fsr1l	equ	0xFE1
  4061                           indf2	equ	0xFDF
  4062                           postinc2	equ	0xFDE
  4063                           plusw2	equ	0xFDB
  4064                           fsr2h	equ	0xFDA
  4065                           fsr2l	equ	0xFD9
  4066                           status	equ	0xFD8
  4067                           
  4068 ;; *************** function _reset_retry_count *****************
  4069 ;; Defined at:
  4070 ;;		line 293 in file "modem.c"
  4071 ;; Parameters:    Size  Location     Type
  4072 ;;		None
  4073 ;; Auto vars:     Size  Location     Type
  4074 ;;		None
  4075 ;; Return value:  Size  Location     Type
  4076 ;;                  1    wreg      void 
  4077 ;; Registers used:
  4078 ;;		wreg, status,2, status,0
  4079 ;; Tracked objects:
  4080 ;;		On entry : 0/0
  4081 ;;		On exit  : 0/0
  4082 ;;		Unchanged: 0/0
  4083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4087 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4088 ;;Total ram usage:        0 bytes
  4089 ;; Hardware stack levels used:    1
  4090 ;; Hardware stack levels required when called:    3
  4091 ;; This function calls:
  4092 ;;		Nothing
  4093 ;; This function is called by:
  4094 ;;		_md_uart_write_str_ok
  4095 ;; This function uses a non-reentrant model
  4096 ;;
  4097                           
  4098                           	psect	text12
  4099  001D20                     __ptext12:
  4100                           	opt stack 0
  4101  001D20                     _reset_retry_count:
  4102                           	opt stack 24
  4103                           
  4104                           ;modem.c: 295: switch (md_state)
  4105                           
  4106                           ;incstack = 0
  4107  001D20  D012               	goto	l522
  4108  001D22                     
  4109                           ;modem.c: 299: numRetries = 15;
  4110  001D22  0E0F               	movlw	15
  4111  001D24  6E2B               	movwf	_numRetries,c
  4112                           
  4113                           ;modem.c: 300: break;
  4114  001D26  0012               	return	
  4115  001D28                     
  4116                           ;modem.c: 302: numRetries = 20;
  4117  001D28  0E14               	movlw	20
  4118  001D2A  6E2B               	movwf	_numRetries,c
  4119                           
  4120                           ;modem.c: 303: break;
  4121  001D2C  0012               	return	
  4122  001D2E                     
  4123                           ;modem.c: 305: numRetries = 20;
  4124  001D2E  0E14               	movlw	20
  4125  001D30  6E2B               	movwf	_numRetries,c
  4126                           
  4127                           ;modem.c: 306: break;
  4128  001D32  0012               	return	
  4129  001D34                     
  4130                           ;modem.c: 308: numRetries = 15;
  4131  001D34  0E0F               	movlw	15
  4132  001D36  6E2B               	movwf	_numRetries,c
  4133                           
  4134                           ;modem.c: 309: break;
  4135  001D38  0012               	return	
  4136  001D3A                     
  4137                           ;modem.c: 311: numRetries = 15;
  4138  001D3A  0E0F               	movlw	15
  4139  001D3C  6E2B               	movwf	_numRetries,c
  4140                           
  4141                           ;modem.c: 312: break;
  4142  001D3E  0012               	return	
  4143  001D40                     
  4144                           ;modem.c: 314: numRetries = 15;
  4145  001D40  0E0F               	movlw	15
  4146  001D42  6E2B               	movwf	_numRetries,c
  4147                           
  4148                           ;modem.c: 316: }
  4149                           
  4150                           ;modem.c: 315: break;
  4151  001D44  0012               	return	
  4152  001D46                     l522:
  4153  001D46  0100               	movlb	0	; () banked
  4154  001D48  51D0               	movf	_md_state& (0+255),w,b
  4155                           
  4156                           ; Switch size 1, requested type "space"
  4157                           ; Number of cases is 6, Range of values is 2 to 7
  4158                           ; switch strategies available:
  4159                           ; Name         Instructions Cycles
  4160                           ; simple_byte           19    10 (average)
  4161                           ;	Chosen strategy is simple_byte
  4162  001D4A  0A02               	xorlw	2	; case 2
  4163  001D4C  B4D8               	btfsc	status,2,c
  4164  001D4E  D7E9               	goto	l523
  4165  001D50  0A01               	xorlw	1	; case 3
  4166  001D52  B4D8               	btfsc	status,2,c
  4167  001D54  D7E9               	goto	l525
  4168  001D56  0A07               	xorlw	7	; case 4
  4169  001D58  B4D8               	btfsc	status,2,c
  4170  001D5A  D7E9               	goto	l526
  4171  001D5C  0A01               	xorlw	1	; case 5
  4172  001D5E  B4D8               	btfsc	status,2,c
  4173  001D60  D7E9               	goto	l527
  4174  001D62  0A03               	xorlw	3	; case 6
  4175  001D64  B4D8               	btfsc	status,2,c
  4176  001D66  D7E9               	goto	l528
  4177  001D68  0A01               	xorlw	1	; case 7
  4178  001D6A  A4D8               	btfss	status,2,c
  4179  001D6C  0012               	return	
  4180  001D6E  D7E8               	goto	l529
  4181  001D70                     __end_of_reset_retry_count:
  4182                           	opt stack 0
  4183                           tblptru	equ	0xFF8
  4184                           tblptrh	equ	0xFF7
  4185                           tblptrl	equ	0xFF6
  4186                           tablat	equ	0xFF5
  4187                           intcon	equ	0xFF2
  4188                           postinc0	equ	0xFEE
  4189                           wreg	equ	0xFE8
  4190                           postdec1	equ	0xFE5
  4191                           plusw1	equ	0xFE3
  4192                           fsr1l	equ	0xFE1
  4193                           indf2	equ	0xFDF
  4194                           postinc2	equ	0xFDE
  4195                           plusw2	equ	0xFDB
  4196                           fsr2h	equ	0xFDA
  4197                           fsr2l	equ	0xFD9
  4198                           status	equ	0xFD8
  4199                           
  4200 ;; *************** function _reload_tmr3_1s *****************
  4201 ;; Defined at:
  4202 ;;		line 194 in file "main.c"
  4203 ;; Parameters:    Size  Location     Type
  4204 ;;		None
  4205 ;; Auto vars:     Size  Location     Type
  4206 ;;		None
  4207 ;; Return value:  Size  Location     Type
  4208 ;;                  1    wreg      void 
  4209 ;; Registers used:
  4210 ;;		None
  4211 ;; Tracked objects:
  4212 ;;		On entry : 0/0
  4213 ;;		On exit  : 0/0
  4214 ;;		Unchanged: 0/0
  4215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4219 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4220 ;;Total ram usage:        0 bytes
  4221 ;; Hardware stack levels used:    1
  4222 ;; Hardware stack levels required when called:    3
  4223 ;; This function calls:
  4224 ;;		Nothing
  4225 ;; This function is called by:
  4226 ;;		_md_uart_write_str_ok
  4227 ;;		_start_md_boot_timer
  4228 ;; This function uses a non-reentrant model
  4229 ;;
  4230                           
  4231                           	psect	text13
  4232  001EB8                     __ptext13:
  4233                           	opt stack 0
  4234  001EB8                     _reload_tmr3_1s:
  4235                           	opt stack 25
  4236                           
  4237                           ;main.c: 196: T3CONbits.TMR3ON = 1;
  4238                           
  4239                           ;incstack = 0
  4240  001EB8  80B1               	bsf	4017,0,c	;volatile
  4241  001EBA  0012               	return		;funcret
  4242  001EBC                     __end_of_reload_tmr3_1s:
  4243                           	opt stack 0
  4244                           tblptru	equ	0xFF8
  4245                           tblptrh	equ	0xFF7
  4246                           tblptrl	equ	0xFF6
  4247                           tablat	equ	0xFF5
  4248                           intcon	equ	0xFF2
  4249                           postinc0	equ	0xFEE
  4250                           wreg	equ	0xFE8
  4251                           postdec1	equ	0xFE5
  4252                           plusw1	equ	0xFE3
  4253                           fsr1l	equ	0xFE1
  4254                           indf2	equ	0xFDF
  4255                           postinc2	equ	0xFDE
  4256                           plusw2	equ	0xFDB
  4257                           fsr2h	equ	0xFDA
  4258                           fsr2l	equ	0xFD9
  4259                           status	equ	0xFD8
  4260                           
  4261 ;; *************** function _md_uart_send *****************
  4262 ;; Defined at:
  4263 ;;		line 380 in file "uart.c"
  4264 ;; Parameters:    Size  Location     Type
  4265 ;;  data            1    wreg     unsigned char 
  4266 ;; Auto vars:     Size  Location     Type
  4267 ;;  data            1    0[BANK0 ] unsigned char 
  4268 ;; Return value:  Size  Location     Type
  4269 ;;                  1    wreg      void 
  4270 ;; Registers used:
  4271 ;;		wreg
  4272 ;; Tracked objects:
  4273 ;;		On entry : 0/0
  4274 ;;		On exit  : 0/0
  4275 ;;		Unchanged: 0/0
  4276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4278 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4280 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4281 ;;Total ram usage:        1 bytes
  4282 ;; Hardware stack levels used:    1
  4283 ;; Hardware stack levels required when called:    3
  4284 ;; This function calls:
  4285 ;;		Nothing
  4286 ;; This function is called by:
  4287 ;;		_md_uart_write_str_ok
  4288 ;; This function uses a non-reentrant model
  4289 ;;
  4290                           
  4291                           	psect	text14
  4292  001E84                     __ptext14:
  4293                           	opt stack 0
  4294  001E84                     _md_uart_send:
  4295                           	opt stack 24
  4296                           
  4297                           ;incstack = 0
  4298                           ;md_uart_send@data stored from wreg
  4299  001E84  0100               	movlb	0	; () banked
  4300  001E86  6F60               	movwf	md_uart_send@data& (0+255),b
  4301  001E88                     
  4302                           ;uart.c: 383: while (!TRMT1);
  4303  001E88  A2AC               	btfss	4012,1,c	;volatile
  4304  001E8A  D7FE               	goto	l2736
  4305                           
  4306                           ;uart.c: 384: TX1REG = data;
  4307  001E8C  C060  FFAD         	movff	md_uart_send@data,4013	;volatile
  4308  001E90  0012               	return		;funcret
  4309  001E92                     __end_of_md_uart_send:
  4310                           	opt stack 0
  4311                           tblptru	equ	0xFF8
  4312                           tblptrh	equ	0xFF7
  4313                           tblptrl	equ	0xFF6
  4314                           tablat	equ	0xFF5
  4315                           intcon	equ	0xFF2
  4316                           postinc0	equ	0xFEE
  4317                           wreg	equ	0xFE8
  4318                           postdec1	equ	0xFE5
  4319                           plusw1	equ	0xFE3
  4320                           fsr1l	equ	0xFE1
  4321                           indf2	equ	0xFDF
  4322                           postinc2	equ	0xFDE
  4323                           plusw2	equ	0xFDB
  4324                           fsr2h	equ	0xFDA
  4325                           fsr2l	equ	0xFD9
  4326                           status	equ	0xFD8
  4327                           
  4328 ;; *************** function _init_md_uart *****************
  4329 ;; Defined at:
  4330 ;;		line 12 in file "uart.c"
  4331 ;; Parameters:    Size  Location     Type
  4332 ;;		None
  4333 ;; Auto vars:     Size  Location     Type
  4334 ;;		None
  4335 ;; Return value:  Size  Location     Type
  4336 ;;                  1    wreg      void 
  4337 ;; Registers used:
  4338 ;;		wreg, status,2
  4339 ;; Tracked objects:
  4340 ;;		On entry : 0/0
  4341 ;;		On exit  : 0/0
  4342 ;;		Unchanged: 0/0
  4343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4347 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4348 ;;Total ram usage:        0 bytes
  4349 ;; Hardware stack levels used:    1
  4350 ;; Hardware stack levels required when called:    3
  4351 ;; This function calls:
  4352 ;;		Nothing
  4353 ;; This function is called by:
  4354 ;;		_md_uart_write_str_ok
  4355 ;; This function uses a non-reentrant model
  4356 ;;
  4357                           
  4358                           	psect	text15
  4359  001E28                     __ptext15:
  4360                           	opt stack 0
  4361  001E28                     _init_md_uart:
  4362                           	opt stack 24
  4363                           
  4364                           ;uart.c: 14: BAUDCON1bits.BRG16 = 1;
  4365                           
  4366                           ;incstack = 0
  4367  001E28  86B8               	bsf	4024,3,c	;volatile
  4368                           
  4369                           ;uart.c: 15: BAUDCON1bits.RCIDL = 1;
  4370  001E2A  8CB8               	bsf	4024,6,c	;volatile
  4371                           
  4372                           ;uart.c: 16: BAUDCONbits.CKTXP = 0;
  4373  001E2C  98B8               	bcf	4024,4,c	;volatile
  4374                           
  4375                           ;uart.c: 17: BAUDCONbits.WUE = 0;
  4376  001E2E  92B8               	bcf	4024,1,c	;volatile
  4377                           
  4378                           ;uart.c: 18: BAUDCONbits.ABDEN = 0;
  4379  001E30  90B8               	bcf	4024,0,c	;volatile
  4380                           
  4381                           ;uart.c: 19: TXSTA1bits.BRGH = 1;
  4382  001E32  84AC               	bsf	4012,2,c	;volatile
  4383                           
  4384                           ;uart.c: 20: TXSTA1bits.SYNC = 0;
  4385  001E34  98AC               	bcf	4012,4,c	;volatile
  4386                           
  4387                           ;uart.c: 21: SPBRGH1 = 0;
  4388  001E36  0E00               	movlw	0
  4389  001E38  6EB0               	movwf	4016,c	;volatile
  4390                           
  4391                           ;uart.c: 22: SPBRG1 = 16;
  4392  001E3A  0E10               	movlw	16
  4393  001E3C  6EAF               	movwf	4015,c	;volatile
  4394                           
  4395                           ;uart.c: 24: RC1STAbits.SPEN = 1;
  4396  001E3E  8EAB               	bsf	4011,7,c	;volatile
  4397                           
  4398                           ;uart.c: 25: TRISCbits.TRISC7 = 1;
  4399  001E40  8E94               	bsf	3988,7,c	;volatile
  4400                           
  4401                           ;uart.c: 26: TRISCbits.TRISC6 = 0;
  4402  001E42  9C94               	bcf	3988,6,c	;volatile
  4403                           
  4404                           ;uart.c: 29: RCSTA1bits.CREN = 0;
  4405  001E44  98AB               	bcf	4011,4,c	;volatile
  4406                           
  4407                           ;uart.c: 30: TXSTA1bits.TXEN = 1;
  4408  001E46  8AAC               	bsf	4012,5,c	;volatile
  4409  001E48  0012               	return		;funcret
  4410  001E4A                     __end_of_init_md_uart:
  4411                           	opt stack 0
  4412                           tblptru	equ	0xFF8
  4413                           tblptrh	equ	0xFF7
  4414                           tblptrl	equ	0xFF6
  4415                           tablat	equ	0xFF5
  4416                           intcon	equ	0xFF2
  4417                           postinc0	equ	0xFEE
  4418                           wreg	equ	0xFE8
  4419                           postdec1	equ	0xFE5
  4420                           plusw1	equ	0xFE3
  4421                           fsr1l	equ	0xFE1
  4422                           indf2	equ	0xFDF
  4423                           postinc2	equ	0xFDE
  4424                           plusw2	equ	0xFDB
  4425                           fsr2h	equ	0xFDA
  4426                           fsr2l	equ	0xFD9
  4427                           status	equ	0xFD8
  4428                           
  4429 ;; *************** function _enable_md_rxint *****************
  4430 ;; Defined at:
  4431 ;;		line 44 in file "uart.c"
  4432 ;; Parameters:    Size  Location     Type
  4433 ;;		None
  4434 ;; Auto vars:     Size  Location     Type
  4435 ;;		None
  4436 ;; Return value:  Size  Location     Type
  4437 ;;                  1    wreg      void 
  4438 ;; Registers used:
  4439 ;;		wreg, status,2
  4440 ;; Tracked objects:
  4441 ;;		On entry : 0/0
  4442 ;;		On exit  : 0/0
  4443 ;;		Unchanged: 0/0
  4444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4448 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4449 ;;Total ram usage:        0 bytes
  4450 ;; Hardware stack levels used:    1
  4451 ;; Hardware stack levels required when called:    3
  4452 ;; This function calls:
  4453 ;;		Nothing
  4454 ;; This function is called by:
  4455 ;;		_md_uart_write_str_ok
  4456 ;; This function uses a non-reentrant model
  4457 ;;
  4458                           
  4459                           	psect	text16
  4460  001E72                     __ptext16:
  4461                           	opt stack 0
  4462  001E72                     _enable_md_rxint:
  4463                           	opt stack 24
  4464                           
  4465                           ;uart.c: 46: GIE = 0;
  4466                           
  4467                           ;incstack = 0
  4468  001E72  9EF2               	bcf	intcon,7,c	;volatile
  4469                           
  4470                           ;uart.c: 47: PIE1bits.RC1IE = 1;
  4471  001E74  8A9D               	bsf	3997,5,c	;volatile
  4472                           
  4473                           ;uart.c: 48: PIR1bits.RC1IF = 0;
  4474  001E76  9A9E               	bcf	3998,5,c	;volatile
  4475                           
  4476                           ;uart.c: 49: INTCONbits.PEIE = 1;
  4477  001E78  8CF2               	bsf	intcon,6,c	;volatile
  4478                           
  4479                           ;uart.c: 50: CREN1 = 1;
  4480  001E7A  88AB               	bsf	4011,4,c	;volatile
  4481                           
  4482                           ;uart.c: 51: endPtr = 0;
  4483  001E7C  0E00               	movlw	0
  4484  001E7E  6E50               	movwf	_endPtr,c
  4485                           
  4486                           ;uart.c: 52: GIE = 1;
  4487  001E80  8EF2               	bsf	intcon,7,c	;volatile
  4488  001E82  0012               	return		;funcret
  4489  001E84                     __end_of_enable_md_rxint:
  4490                           	opt stack 0
  4491                           tblptru	equ	0xFF8
  4492                           tblptrh	equ	0xFF7
  4493                           tblptrl	equ	0xFF6
  4494                           tablat	equ	0xFF5
  4495                           intcon	equ	0xFF2
  4496                           postinc0	equ	0xFEE
  4497                           wreg	equ	0xFE8
  4498                           postdec1	equ	0xFE5
  4499                           plusw1	equ	0xFE3
  4500                           fsr1l	equ	0xFE1
  4501                           indf2	equ	0xFDF
  4502                           postinc2	equ	0xFDE
  4503                           plusw2	equ	0xFDB
  4504                           fsr2h	equ	0xFDA
  4505                           fsr2l	equ	0xFD9
  4506                           status	equ	0xFD8
  4507                           
  4508 ;; *************** function _disable_tmr3 *****************
  4509 ;; Defined at:
  4510 ;;		line 199 in file "main.c"
  4511 ;; Parameters:    Size  Location     Type
  4512 ;;		None
  4513 ;; Auto vars:     Size  Location     Type
  4514 ;;		None
  4515 ;; Return value:  Size  Location     Type
  4516 ;;                  1    wreg      void 
  4517 ;; Registers used:
  4518 ;;		wreg, status,2
  4519 ;; Tracked objects:
  4520 ;;		On entry : 0/0
  4521 ;;		On exit  : 0/0
  4522 ;;		Unchanged: 0/0
  4523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4525 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4527 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4528 ;;Total ram usage:        0 bytes
  4529 ;; Hardware stack levels used:    1
  4530 ;; Hardware stack levels required when called:    3
  4531 ;; This function calls:
  4532 ;;		Nothing
  4533 ;; This function is called by:
  4534 ;;		_md_uart_write_str_ok
  4535 ;; This function uses a non-reentrant model
  4536 ;;
  4537                           
  4538                           	psect	text17
  4539  001E4A                     __ptext17:
  4540                           	opt stack 0
  4541  001E4A                     _disable_tmr3:
  4542                           	opt stack 24
  4543                           
  4544                           ;main.c: 201: tmr3_cnt = 0;
  4545                           
  4546                           ;incstack = 0
  4547  001E4A  0E00               	movlw	0
  4548  001E4C  6E44               	movwf	_tmr3_cnt,c
  4549  001E4E  0E00               	movlw	0
  4550  001E50  6E45               	movwf	_tmr3_cnt+1,c
  4551  001E52  0E00               	movlw	0
  4552  001E54  6E46               	movwf	_tmr3_cnt+2,c
  4553  001E56  0E00               	movlw	0
  4554  001E58  6E47               	movwf	_tmr3_cnt+3,c
  4555                           
  4556                           ;main.c: 202: T3CONbits.TMR3ON = 0;
  4557  001E5A  90B1               	bcf	4017,0,c	;volatile
  4558  001E5C  0012               	return		;funcret
  4559  001E5E                     __end_of_disable_tmr3:
  4560                           	opt stack 0
  4561                           tblptru	equ	0xFF8
  4562                           tblptrh	equ	0xFF7
  4563                           tblptrl	equ	0xFF6
  4564                           tablat	equ	0xFF5
  4565                           intcon	equ	0xFF2
  4566                           postinc0	equ	0xFEE
  4567                           wreg	equ	0xFE8
  4568                           postdec1	equ	0xFE5
  4569                           plusw1	equ	0xFE3
  4570                           fsr1l	equ	0xFE1
  4571                           indf2	equ	0xFDF
  4572                           postinc2	equ	0xFDE
  4573                           plusw2	equ	0xFDB
  4574                           fsr2h	equ	0xFDA
  4575                           fsr2l	equ	0xFD9
  4576                           status	equ	0xFD8
  4577                           
  4578 ;; *************** function _isr *****************
  4579 ;; Defined at:
  4580 ;;		line 15 in file "main.c"
  4581 ;; Parameters:    Size  Location     Type
  4582 ;;		None
  4583 ;; Auto vars:     Size  Location     Type
  4584 ;;		None
  4585 ;; Return value:  Size  Location     Type
  4586 ;;                  1    wreg      void 
  4587 ;; Registers used:
  4588 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4589 ;; Tracked objects:
  4590 ;;		On entry : 0/0
  4591 ;;		On exit  : 0/0
  4592 ;;		Unchanged: 0/0
  4593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4596 ;;      Temps:         23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4597 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4598 ;;Total ram usage:       23 bytes
  4599 ;; Hardware stack levels used:    1
  4600 ;; Hardware stack levels required when called:    2
  4601 ;; This function calls:
  4602 ;;		_check_mdstate_tmr3
  4603 ;;		_disable_md_rxint
  4604 ;;		i2_disable_tmr3
  4605 ;; This function is called by:
  4606 ;;		Interrupt level 2
  4607 ;; This function uses a non-reentrant model
  4608 ;;
  4609                           
  4610                           	psect	intcode
  4611  000008                     __pintcode:
  4612                           	opt stack 0
  4613  000008                     _isr:
  4614                           	opt stack 23
  4615                           
  4616                           ;incstack = 0
  4617  000008  8255               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4618  00000A  CFFA F032          	movff	pclath,??_isr+5
  4619  00000E  CFFB F033          	movff	pclatu,??_isr+6
  4620  000012  CFE9 F034          	movff	fsr0l,??_isr+7
  4621  000016  CFEA F035          	movff	fsr0h,??_isr+8
  4622  00001A  CFE1 F036          	movff	fsr1l,??_isr+9
  4623  00001E  CFE2 F037          	movff	fsr1h,??_isr+10
  4624  000022  CFD9 F038          	movff	fsr2l,??_isr+11
  4625  000026  CFDA F039          	movff	fsr2h,??_isr+12
  4626  00002A  CFF3 F03A          	movff	prodl,??_isr+13
  4627  00002E  CFF4 F03B          	movff	prodh,??_isr+14
  4628  000032  CFF6 F03C          	movff	tblptrl,??_isr+15
  4629  000036  CFF7 F03D          	movff	tblptrh,??_isr+16
  4630  00003A  CFF8 F03E          	movff	tblptru,??_isr+17
  4631  00003E  CFF5 F03F          	movff	tablat,??_isr+18
  4632  000042  C055  F040         	movff	btemp,??_isr+19
  4633  000046  C056  F041         	movff	btemp+1,??_isr+20
  4634  00004A  C057  F042         	movff	btemp+2,??_isr+21
  4635  00004E  C058  F043         	movff	btemp+3,??_isr+22
  4636                           
  4637                           ;main.c: 17: if (RC1IF && PIE1bits.RCIE)
  4638  000052  BA9E               	btfsc	3998,5,c	;volatile
  4639  000054  AA9D               	btfss	3997,5,c	;volatile
  4640  000056  D0D5               	goto	i2l130
  4641                           
  4642                           ;main.c: 18: {
  4643                           ;main.c: 19: RC1IF = 0;
  4644  000058  9A9E               	bcf	3998,5,c	;volatile
  4645                           
  4646                           ;main.c: 20: currentChar = RC1REG;
  4647  00005A  CFAE F049          	movff	4014,_currentChar	;volatile
  4648                           
  4649                           ;main.c: 21: mdRxBuf[endPtr++] = currentChar;
  4650  00005E  5050               	movf	_endPtr,w,c
  4651  000060  0D01               	mullw	1
  4652  000062  0E77               	movlw	low _mdRxBuf
  4653  000064  24F3               	addwf	prodl,w,c
  4654  000066  6ED9               	movwf	fsr2l,c
  4655  000068  0E01               	movlw	high _mdRxBuf
  4656  00006A  20F4               	addwfc	prodh,w,c
  4657  00006C  6EDA               	movwf	fsr2h,c
  4658  00006E  C049  FFDF         	movff	_currentChar,indf2
  4659  000072  2A50               	incf	_endPtr,f,c
  4660                           
  4661                           ;main.c: 22: if (endPtr >= sizeof(mdRxBuf))
  4662  000074  0E63               	movlw	99
  4663  000076  6450               	cpfsgt	_endPtr,c
  4664  000078  D001               	goto	i2l122
  4665                           
  4666                           ;main.c: 23: endPtr--;
  4667  00007A  0650               	decf	_endPtr,f,c
  4668  00007C                     i2l122:
  4669                           
  4670                           ;main.c: 24: if (endPtr > 2)
  4671  00007C  0E02               	movlw	2
  4672  00007E  6450               	cpfsgt	_endPtr,c
  4673  000080  D0AA               	goto	i2l123
  4674                           
  4675                           ;main.c: 25: {
  4676                           ;main.c: 27: if (mdRxBuf[(uint8_t)(endPtr - 3)] == 'O' && mdRxBuf[(uint8_t)(endPtr - 2)]
      +                           == 'K' && (mdRxBuf[(uint8_t)(endPtr - 1)] == '\r' || mdRxBuf[(uint8_t)(endPtr - 1)] == 
      +                          '\n'))
  4677  000082  C050  F02D         	movff	_endPtr,??_isr
  4678  000086  0EFD               	movlw	253
  4679  000088  262D               	addwf	??_isr,f,c
  4680  00008A  502D               	movf	??_isr,w,c
  4681  00008C  0D01               	mullw	1
  4682  00008E  0E77               	movlw	low _mdRxBuf
  4683  000090  24F3               	addwf	prodl,w,c
  4684  000092  6ED9               	movwf	fsr2l,c
  4685  000094  0E01               	movlw	high _mdRxBuf
  4686  000096  20F4               	addwfc	prodh,w,c
  4687  000098  6EDA               	movwf	fsr2h,c
  4688  00009A  0E4F               	movlw	79
  4689  00009C  18DE               	xorwf	postinc2,w,c
  4690  00009E  A4D8               	btfss	status,2,c
  4691  0000A0  D039               	goto	i2l124
  4692  0000A2  C050  F02D         	movff	_endPtr,??_isr
  4693  0000A6  0EFE               	movlw	254
  4694  0000A8  262D               	addwf	??_isr,f,c
  4695  0000AA  502D               	movf	??_isr,w,c
  4696  0000AC  0D01               	mullw	1
  4697  0000AE  0E77               	movlw	low _mdRxBuf
  4698  0000B0  24F3               	addwf	prodl,w,c
  4699  0000B2  6ED9               	movwf	fsr2l,c
  4700  0000B4  0E01               	movlw	high _mdRxBuf
  4701  0000B6  20F4               	addwfc	prodh,w,c
  4702  0000B8  6EDA               	movwf	fsr2h,c
  4703  0000BA  0E4B               	movlw	75
  4704  0000BC  18DE               	xorwf	postinc2,w,c
  4705  0000BE  A4D8               	btfss	status,2,c
  4706  0000C0  D029               	goto	i2l124
  4707  0000C2  C050  F02D         	movff	_endPtr,??_isr
  4708  0000C6  0EFF               	movlw	255
  4709  0000C8  262D               	addwf	??_isr,f,c
  4710  0000CA  502D               	movf	??_isr,w,c
  4711  0000CC  0D01               	mullw	1
  4712  0000CE  0E77               	movlw	low _mdRxBuf
  4713  0000D0  24F3               	addwf	prodl,w,c
  4714  0000D2  6ED9               	movwf	fsr2l,c
  4715  0000D4  0E01               	movlw	high _mdRxBuf
  4716  0000D6  20F4               	addwfc	prodh,w,c
  4717  0000D8  6EDA               	movwf	fsr2h,c
  4718  0000DA  0E0D               	movlw	13
  4719  0000DC  18DE               	xorwf	postinc2,w,c
  4720  0000DE  B4D8               	btfsc	status,2,c
  4721  0000E0  D010               	goto	i2u294_40
  4722  0000E2  C050  F02D         	movff	_endPtr,??_isr
  4723  0000E6  0EFF               	movlw	255
  4724  0000E8  262D               	addwf	??_isr,f,c
  4725  0000EA  502D               	movf	??_isr,w,c
  4726  0000EC  0D01               	mullw	1
  4727  0000EE  0E77               	movlw	low _mdRxBuf
  4728  0000F0  24F3               	addwf	prodl,w,c
  4729  0000F2  6ED9               	movwf	fsr2l,c
  4730  0000F4  0E01               	movlw	high _mdRxBuf
  4731  0000F6  20F4               	addwfc	prodh,w,c
  4732  0000F8  6EDA               	movwf	fsr2h,c
  4733  0000FA  0E0A               	movlw	10
  4734  0000FC  18DE               	xorwf	postinc2,w,c
  4735  0000FE  A4D8               	btfss	status,2,c
  4736  000100  D009               	goto	i2l124
  4737  000102                     i2u294_40:
  4738                           
  4739                           ;main.c: 29: {
  4740                           ;main.c: 32: receivedOK = 1;
  4741  000102  0E01               	movlw	1
  4742  000104  6E4F               	movwf	_receivedOK,c
  4743                           
  4744                           ;main.c: 33: receivedERR = 0;
  4745  000106  0E00               	movlw	0
  4746  000108  6E4E               	movwf	_receivedERR,c
  4747                           
  4748                           ;main.c: 34: timedOut = 0;
  4749  00010A  0E00               	movlw	0
  4750  00010C  6E4B               	movwf	_timedOut,c
  4751                           
  4752                           ;main.c: 35: disable_md_rxint();
  4753  00010E  EC54  F00F         	call	_disable_md_rxint	;wreg free
  4754                           
  4755                           ;main.c: 36: }
  4756  000112  D077               	goto	i2l130
  4757  000114                     i2l124:
  4758                           
  4759                           ;main.c: 37: else if (endPtr >= 5 && mdRxBuf[(uint8_t)(endPtr - 5)] == 'E' && mdRxBuf[(u
      +                          int8_t)(endPtr - 4)] == 'R' && mdRxBuf[(uint8_t)(endPtr - 3)] == 'R' && mdRxBuf[(uint8_t
      +                          )(endPtr - 2)] == 'O' && mdRxBuf[endPtr - 1] == 'R')
  4760  000114  0E04               	movlw	4
  4761  000116  6450               	cpfsgt	_endPtr,c
  4762  000118  D074               	goto	i2l130
  4763  00011A  C050  F02D         	movff	_endPtr,??_isr
  4764  00011E  0EFB               	movlw	251
  4765  000120  262D               	addwf	??_isr,f,c
  4766  000122  502D               	movf	??_isr,w,c
  4767  000124  0D01               	mullw	1
  4768  000126  0E77               	movlw	low _mdRxBuf
  4769  000128  24F3               	addwf	prodl,w,c
  4770  00012A  6ED9               	movwf	fsr2l,c
  4771  00012C  0E01               	movlw	high _mdRxBuf
  4772  00012E  20F4               	addwfc	prodh,w,c
  4773  000130  6EDA               	movwf	fsr2h,c
  4774  000132  0E45               	movlw	69
  4775  000134  18DE               	xorwf	postinc2,w,c
  4776  000136  A4D8               	btfss	status,2,c
  4777  000138  D064               	goto	i2l130
  4778  00013A  C050  F02D         	movff	_endPtr,??_isr
  4779  00013E  0EFC               	movlw	252
  4780  000140  262D               	addwf	??_isr,f,c
  4781  000142  502D               	movf	??_isr,w,c
  4782  000144  0D01               	mullw	1
  4783  000146  0E77               	movlw	low _mdRxBuf
  4784  000148  24F3               	addwf	prodl,w,c
  4785  00014A  6ED9               	movwf	fsr2l,c
  4786  00014C  0E01               	movlw	high _mdRxBuf
  4787  00014E  20F4               	addwfc	prodh,w,c
  4788  000150  6EDA               	movwf	fsr2h,c
  4789  000152  0E52               	movlw	82
  4790  000154  18DE               	xorwf	postinc2,w,c
  4791  000156  A4D8               	btfss	status,2,c
  4792  000158  D054               	goto	i2l130
  4793  00015A  C050  F02D         	movff	_endPtr,??_isr
  4794  00015E  0EFD               	movlw	253
  4795  000160  262D               	addwf	??_isr,f,c
  4796  000162  502D               	movf	??_isr,w,c
  4797  000164  0D01               	mullw	1
  4798  000166  0E77               	movlw	low _mdRxBuf
  4799  000168  24F3               	addwf	prodl,w,c
  4800  00016A  6ED9               	movwf	fsr2l,c
  4801  00016C  0E01               	movlw	high _mdRxBuf
  4802  00016E  20F4               	addwfc	prodh,w,c
  4803  000170  6EDA               	movwf	fsr2h,c
  4804  000172  0E52               	movlw	82
  4805  000174  18DE               	xorwf	postinc2,w,c
  4806  000176  A4D8               	btfss	status,2,c
  4807  000178  D044               	goto	i2l130
  4808  00017A  C050  F02D         	movff	_endPtr,??_isr
  4809  00017E  0EFE               	movlw	254
  4810  000180  262D               	addwf	??_isr,f,c
  4811  000182  502D               	movf	??_isr,w,c
  4812  000184  0D01               	mullw	1
  4813  000186  0E77               	movlw	low _mdRxBuf
  4814  000188  24F3               	addwf	prodl,w,c
  4815  00018A  6ED9               	movwf	fsr2l,c
  4816  00018C  0E01               	movlw	high _mdRxBuf
  4817  00018E  20F4               	addwfc	prodh,w,c
  4818  000190  6EDA               	movwf	fsr2h,c
  4819  000192  0E4F               	movlw	79
  4820  000194  18DE               	xorwf	postinc2,w,c
  4821  000196  A4D8               	btfss	status,2,c
  4822  000198  D034               	goto	i2l130
  4823  00019A  0EFF               	movlw	255
  4824  00019C  6E2D               	movwf	??_isr& (0+255),c
  4825  00019E  0EFF               	movlw	255
  4826  0001A0  6E2E               	movwf	(??_isr+1)& (0+255),c
  4827  0001A2  5050               	movf	_endPtr,w,c
  4828  0001A4  6E2F               	movwf	(??_isr+2)& (0+255),c
  4829  0001A6  6A30               	clrf	(??_isr+3)& (0+255),c
  4830  0001A8  502D               	movf	??_isr,w,c
  4831  0001AA  262F               	addwf	??_isr+2,f,c
  4832  0001AC  502E               	movf	??_isr+1,w,c
  4833  0001AE  2230               	addwfc	??_isr+3,f,c
  4834  0001B0  0E77               	movlw	low _mdRxBuf
  4835  0001B2  242F               	addwf	??_isr+2,w,c
  4836  0001B4  6ED9               	movwf	fsr2l,c
  4837  0001B6  0E01               	movlw	high _mdRxBuf
  4838  0001B8  2030               	addwfc	??_isr+3,w,c
  4839  0001BA  6EDA               	movwf	fsr2h,c
  4840  0001BC  0E52               	movlw	82
  4841  0001BE  18DE               	xorwf	postinc2,w,c
  4842  0001C0  A4D8               	btfss	status,2,c
  4843  0001C2  D01F               	goto	i2l130
  4844                           
  4845                           ;main.c: 40: {
  4846                           ;main.c: 43: receivedOK = 0;
  4847  0001C4  0E00               	movlw	0
  4848  0001C6  6E4F               	movwf	_receivedOK,c
  4849                           
  4850                           ;main.c: 44: receivedERR = 1;
  4851  0001C8  0E01               	movlw	1
  4852  0001CA  6E4E               	movwf	_receivedERR,c
  4853                           
  4854                           ;main.c: 45: timedOut = 0;
  4855  0001CC  0E00               	movlw	0
  4856  0001CE  6E4B               	movwf	_timedOut,c
  4857                           
  4858                           ;main.c: 46: disable_md_rxint();
  4859  0001D0  EC54  F00F         	call	_disable_md_rxint	;wreg free
  4860                           
  4861                           ;main.c: 47: }
  4862                           ;main.c: 48: }
  4863  0001D4  D016               	goto	i2l130
  4864  0001D6                     i2l123:
  4865                           
  4866                           ;main.c: 49: else if (currentChar == '>')
  4867  0001D6  0E3E               	movlw	62
  4868  0001D8  1849               	xorwf	_currentChar,w,c
  4869  0001DA  A4D8               	btfss	status,2,c
  4870  0001DC  D012               	goto	i2l130
  4871                           
  4872                           ;main.c: 50: {
  4873                           ;main.c: 51: tmr3_cnt = 0;
  4874  0001DE  0E00               	movlw	0
  4875  0001E0  6E44               	movwf	_tmr3_cnt,c
  4876  0001E2  0E00               	movlw	0
  4877  0001E4  6E45               	movwf	_tmr3_cnt+1,c
  4878  0001E6  0E00               	movlw	0
  4879  0001E8  6E46               	movwf	_tmr3_cnt+2,c
  4880  0001EA  0E00               	movlw	0
  4881  0001EC  6E47               	movwf	_tmr3_cnt+3,c
  4882                           
  4883                           ;main.c: 52: disable_tmr3();
  4884  0001EE  EC2F  F00F         	call	i2_disable_tmr3	;wreg free
  4885                           
  4886                           ;main.c: 53: disable_md_rxint();
  4887  0001F2  EC54  F00F         	call	_disable_md_rxint	;wreg free
  4888                           
  4889                           ;main.c: 54: receivedOK = 0;
  4890  0001F6  0E00               	movlw	0
  4891  0001F8  6E4F               	movwf	_receivedOK,c
  4892                           
  4893                           ;main.c: 55: receivedERR = 0;
  4894  0001FA  0E00               	movlw	0
  4895  0001FC  6E4E               	movwf	_receivedERR,c
  4896                           
  4897                           ;main.c: 56: receivedCarat = 1;
  4898  0001FE  0E01               	movlw	1
  4899  000200  6E4C               	movwf	_receivedCarat,c
  4900  000202                     i2l130:
  4901                           
  4902                           ;main.c: 57: }
  4903                           ;main.c: 58: }
  4904                           ;main.c: 60: if (TMR3IF)
  4905  000202  A2A1               	btfss	4001,1,c	;volatile
  4906  000204  D009               	goto	i2l131
  4907                           
  4908                           ;main.c: 61: {
  4909                           ;main.c: 63: tmr3_cnt++;
  4910  000206  0E01               	movlw	1
  4911  000208  2644               	addwf	_tmr3_cnt,f,c
  4912  00020A  0E00               	movlw	0
  4913  00020C  2245               	addwfc	_tmr3_cnt+1,f,c
  4914  00020E  2246               	addwfc	_tmr3_cnt+2,f,c
  4915  000210  2247               	addwfc	_tmr3_cnt+3,f,c
  4916                           
  4917                           ;main.c: 64: TMR3IF = 0;
  4918  000212  92A1               	bcf	4001,1,c	;volatile
  4919                           
  4920                           ;main.c: 66: check_mdstate_tmr3();
  4921  000214  ECD3  F00B         	call	_check_mdstate_tmr3	;wreg free
  4922  000218                     i2l131:
  4923  000218  C043  F058         	movff	??_isr+22,btemp+3
  4924  00021C  C042  F057         	movff	??_isr+21,btemp+2
  4925  000220  C041  F056         	movff	??_isr+20,btemp+1
  4926  000224  C040  F055         	movff	??_isr+19,btemp
  4927  000228  C03F  FFF5         	movff	??_isr+18,tablat
  4928  00022C  C03E  FFF8         	movff	??_isr+17,tblptru
  4929  000230  C03D  FFF7         	movff	??_isr+16,tblptrh
  4930  000234  C03C  FFF6         	movff	??_isr+15,tblptrl
  4931  000238  C03B  FFF4         	movff	??_isr+14,prodh
  4932  00023C  C03A  FFF3         	movff	??_isr+13,prodl
  4933  000240  C039  FFDA         	movff	??_isr+12,fsr2h
  4934  000244  C038  FFD9         	movff	??_isr+11,fsr2l
  4935  000248  C037  FFE2         	movff	??_isr+10,fsr1h
  4936  00024C  C036  FFE1         	movff	??_isr+9,fsr1l
  4937  000250  C035  FFEA         	movff	??_isr+8,fsr0h
  4938  000254  C034  FFE9         	movff	??_isr+7,fsr0l
  4939  000258  C033  FFFB         	movff	??_isr+6,pclatu
  4940  00025C  C032  FFFA         	movff	??_isr+5,pclath
  4941  000260  9255               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4942  000262  0011               	retfie		f
  4943  000264                     __end_of_isr:
  4944                           	opt stack 0
  4945                           pclatu	equ	0xFFB
  4946                           pclath	equ	0xFFA
  4947                           tblptru	equ	0xFF8
  4948                           tblptrh	equ	0xFF7
  4949                           tblptrl	equ	0xFF6
  4950                           tablat	equ	0xFF5
  4951                           prodh	equ	0xFF4
  4952                           prodl	equ	0xFF3
  4953                           intcon	equ	0xFF2
  4954                           postinc0	equ	0xFEE
  4955                           fsr0h	equ	0xFEA
  4956                           fsr0l	equ	0xFE9
  4957                           wreg	equ	0xFE8
  4958                           postdec1	equ	0xFE5
  4959                           plusw1	equ	0xFE3
  4960                           fsr1h	equ	0xFE2
  4961                           fsr1l	equ	0xFE1
  4962                           indf2	equ	0xFDF
  4963                           postinc2	equ	0xFDE
  4964                           plusw2	equ	0xFDB
  4965                           fsr2h	equ	0xFDA
  4966                           fsr2l	equ	0xFD9
  4967                           status	equ	0xFD8
  4968                           
  4969 ;; *************** function _disable_md_rxint *****************
  4970 ;; Defined at:
  4971 ;;		line 55 in file "uart.c"
  4972 ;; Parameters:    Size  Location     Type
  4973 ;;		None
  4974 ;; Auto vars:     Size  Location     Type
  4975 ;;		None
  4976 ;; Return value:  Size  Location     Type
  4977 ;;                  1    wreg      void 
  4978 ;; Registers used:
  4979 ;;		None
  4980 ;; Tracked objects:
  4981 ;;		On entry : 0/0
  4982 ;;		On exit  : 0/0
  4983 ;;		Unchanged: 0/0
  4984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4988 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4989 ;;Total ram usage:        0 bytes
  4990 ;; Hardware stack levels used:    1
  4991 ;; This function calls:
  4992 ;;		Nothing
  4993 ;; This function is called by:
  4994 ;;		_isr
  4995 ;; This function uses a non-reentrant model
  4996 ;;
  4997                           
  4998                           	psect	text19
  4999  001EA8                     __ptext19:
  5000                           	opt stack 0
  5001  001EA8                     _disable_md_rxint:
  5002                           	opt stack 24
  5003                           
  5004                           ;uart.c: 57: CREN1 = 0;
  5005                           
  5006                           ;incstack = 0
  5007  001EA8  98AB               	bcf	4011,4,c	;volatile
  5008                           
  5009                           ;uart.c: 58: GIE = 0;
  5010  001EAA  9EF2               	bcf	intcon,7,c	;volatile
  5011                           
  5012                           ;uart.c: 59: PIE1bits.RC1IE = 0;
  5013  001EAC  9A9D               	bcf	3997,5,c	;volatile
  5014                           
  5015                           ;uart.c: 60: GIE = 1;
  5016  001EAE  8EF2               	bsf	intcon,7,c	;volatile
  5017  001EB0  0012               	return		;funcret
  5018  001EB2                     __end_of_disable_md_rxint:
  5019                           	opt stack 0
  5020                           pclatu	equ	0xFFB
  5021                           pclath	equ	0xFFA
  5022                           tblptru	equ	0xFF8
  5023                           tblptrh	equ	0xFF7
  5024                           tblptrl	equ	0xFF6
  5025                           tablat	equ	0xFF5
  5026                           prodh	equ	0xFF4
  5027                           prodl	equ	0xFF3
  5028                           intcon	equ	0xFF2
  5029                           postinc0	equ	0xFEE
  5030                           fsr0h	equ	0xFEA
  5031                           fsr0l	equ	0xFE9
  5032                           wreg	equ	0xFE8
  5033                           postdec1	equ	0xFE5
  5034                           plusw1	equ	0xFE3
  5035                           fsr1h	equ	0xFE2
  5036                           fsr1l	equ	0xFE1
  5037                           indf2	equ	0xFDF
  5038                           postinc2	equ	0xFDE
  5039                           plusw2	equ	0xFDB
  5040                           fsr2h	equ	0xFDA
  5041                           fsr2l	equ	0xFD9
  5042                           status	equ	0xFD8
  5043                           
  5044 ;; *************** function _check_mdstate_tmr3 *****************
  5045 ;; Defined at:
  5046 ;;		line 207 in file "main.c"
  5047 ;; Parameters:    Size  Location     Type
  5048 ;;		None
  5049 ;; Auto vars:     Size  Location     Type
  5050 ;;		None
  5051 ;; Return value:  Size  Location     Type
  5052 ;;                  1    wreg      void 
  5053 ;; Registers used:
  5054 ;;		wreg, status,2, status,0, cstack
  5055 ;; Tracked objects:
  5056 ;;		On entry : 0/0
  5057 ;;		On exit  : 0/0
  5058 ;;		Unchanged: 0/0
  5059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5062 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5063 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5064 ;;Total ram usage:        1 bytes
  5065 ;; Hardware stack levels used:    1
  5066 ;; Hardware stack levels required when called:    1
  5067 ;; This function calls:
  5068 ;;		i2_disable_tmr3
  5069 ;; This function is called by:
  5070 ;;		_isr
  5071 ;; This function uses a non-reentrant model
  5072 ;;
  5073                           
  5074                           	psect	text20
  5075  0017A6                     __ptext20:
  5076                           	opt stack 0
  5077  0017A6                     _check_mdstate_tmr3:
  5078                           	opt stack 23
  5079                           
  5080                           ;main.c: 209: switch (md_state)
  5081                           
  5082                           ;incstack = 0
  5083  0017A6  D089               	goto	i2l157
  5084  0017A8                     
  5085                           ;main.c: 213: PORTBbits.RB3 = (bool)(tmr3_cnt % 2);
  5086  0017A8  C044  F02C         	movff	_tmr3_cnt,??_check_mdstate_tmr3
  5087  0017AC  0E01               	movlw	1
  5088  0017AE  162C               	andwf	??_check_mdstate_tmr3,f,c
  5089  0017B0  462C               	rlncf	??_check_mdstate_tmr3,f,c
  5090  0017B2  462C               	rlncf	??_check_mdstate_tmr3,f,c
  5091  0017B4  462C               	rlncf	??_check_mdstate_tmr3,f,c
  5092  0017B6  5081               	movf	3969,w,c	;volatile
  5093  0017B8  182C               	xorwf	??_check_mdstate_tmr3,w,c
  5094  0017BA  0BF7               	andlw	-9
  5095  0017BC  182C               	xorwf	??_check_mdstate_tmr3,w,c
  5096  0017BE  6E81               	movwf	3969,c	;volatile
  5097                           
  5098                           ;main.c: 214: if (tmr3_cnt >= (15*1))
  5099  0017C0  5047               	movf	_tmr3_cnt+3,w,c
  5100  0017C2  1046               	iorwf	_tmr3_cnt+2,w,c
  5101  0017C4  1045               	iorwf	_tmr3_cnt+1,w,c
  5102  0017C6  E104               	bnz	i2u277_40
  5103  0017C8  0E0F               	movlw	15
  5104  0017CA  5C44               	subwf	_tmr3_cnt,w,c
  5105  0017CC  A0D8               	btfss	status,0,c
  5106  0017CE  0012               	return	
  5107  0017D0                     i2u277_40:
  5108                           
  5109                           ;main.c: 215: {
  5110                           ;main.c: 216: disable_tmr3();
  5111  0017D0  EC2F  F00F         	call	i2_disable_tmr3	;wreg free
  5112                           
  5113                           ;main.c: 217: tmr3_cnt = 0;
  5114  0017D4  0E00               	movlw	0
  5115  0017D6  6E44               	movwf	_tmr3_cnt,c
  5116  0017D8  0E00               	movlw	0
  5117  0017DA  6E45               	movwf	_tmr3_cnt+1,c
  5118  0017DC  0E00               	movlw	0
  5119  0017DE  6E46               	movwf	_tmr3_cnt+2,c
  5120  0017E0  0E00               	movlw	0
  5121  0017E2  6E47               	movwf	_tmr3_cnt+3,c
  5122                           
  5123                           ;main.c: 218: receivedOK = 0;
  5124  0017E4  0E00               	movlw	0
  5125  0017E6  6E4F               	movwf	_receivedOK,c
  5126                           
  5127                           ;main.c: 219: timedOut = 1;
  5128  0017E8  0E01               	movlw	1
  5129  0017EA  6E4B               	movwf	_timedOut,c
  5130                           
  5131                           ;main.c: 220: }
  5132                           ;main.c: 221: break;
  5133  0017EC  0012               	return	
  5134  0017EE                     
  5135                           ;main.c: 225: PORTCbits.RC4 = (bool)(tmr3_cnt % 2);
  5136  0017EE  C044  F02C         	movff	_tmr3_cnt,??_check_mdstate_tmr3
  5137  0017F2  0E01               	movlw	1
  5138  0017F4  162C               	andwf	??_check_mdstate_tmr3,f,c
  5139  0017F6  3A2C               	swapf	??_check_mdstate_tmr3,f,c
  5140  0017F8  5082               	movf	3970,w,c	;volatile
  5141  0017FA  182C               	xorwf	??_check_mdstate_tmr3,w,c
  5142  0017FC  0BEF               	andlw	-17
  5143  0017FE  182C               	xorwf	??_check_mdstate_tmr3,w,c
  5144  001800  6E82               	movwf	3970,c	;volatile
  5145                           
  5146                           ;main.c: 226: if (tmr3_cnt >= (15*45))
  5147  001802  5047               	movf	_tmr3_cnt+3,w,c
  5148  001804  1046               	iorwf	_tmr3_cnt+2,w,c
  5149  001806  E106               	bnz	i2u278_40
  5150  001808  0EA3               	movlw	163
  5151  00180A  5C44               	subwf	_tmr3_cnt,w,c
  5152  00180C  0E02               	movlw	2
  5153  00180E  5845               	subwfb	_tmr3_cnt+1,w,c
  5154  001810  A0D8               	btfss	status,0,c
  5155  001812  0012               	return	
  5156  001814                     i2u278_40:
  5157                           
  5158                           ;main.c: 227: {
  5159                           ;main.c: 228: disable_tmr3();
  5160  001814  EC2F  F00F         	call	i2_disable_tmr3	;wreg free
  5161                           
  5162                           ;main.c: 229: tmr3_cnt = 0;
  5163  001818  0E00               	movlw	0
  5164  00181A  6E44               	movwf	_tmr3_cnt,c
  5165  00181C  0E00               	movlw	0
  5166  00181E  6E45               	movwf	_tmr3_cnt+1,c
  5167  001820  0E00               	movlw	0
  5168  001822  6E46               	movwf	_tmr3_cnt+2,c
  5169  001824  0E00               	movlw	0
  5170  001826  6E47               	movwf	_tmr3_cnt+3,c
  5171                           
  5172                           ;main.c: 230: bootTimerIsDone = 1;
  5173  001828  0E01               	movlw	1
  5174  00182A  0100               	movlb	0	; () banked
  5175  00182C  6FCF               	movwf	_bootTimerIsDone& (0+255),b
  5176                           
  5177                           ; BSR set to: 0
  5178                           ;main.c: 231: }
  5179                           ;main.c: 232: break;
  5180  00182E  0012               	return	
  5181  001830                     
  5182                           ; BSR set to: 0
  5183                           ;main.c: 234: if (tmr3_cnt >= (15*1))
  5184                           
  5185                           ; BSR set to: 0
  5186  001830  5047               	movf	_tmr3_cnt+3,w,c
  5187  001832  1046               	iorwf	_tmr3_cnt+2,w,c
  5188  001834  1045               	iorwf	_tmr3_cnt+1,w,c
  5189  001836  E104               	bnz	i2u279_40
  5190  001838  0E0F               	movlw	15
  5191  00183A  5C44               	subwf	_tmr3_cnt,w,c
  5192  00183C  A0D8               	btfss	status,0,c
  5193  00183E  0012               	return	
  5194  001840                     i2u279_40:
  5195                           
  5196                           ; BSR set to: 0
  5197                           ;main.c: 235: {
  5198                           ;main.c: 236: disable_tmr3();
  5199  001840  EC2F  F00F         	call	i2_disable_tmr3	;wreg free
  5200                           
  5201                           ;main.c: 237: tmr3_cnt = 0;
  5202  001844  0E00               	movlw	0
  5203  001846  6E44               	movwf	_tmr3_cnt,c
  5204  001848  0E00               	movlw	0
  5205  00184A  6E45               	movwf	_tmr3_cnt+1,c
  5206  00184C  0E00               	movlw	0
  5207  00184E  6E46               	movwf	_tmr3_cnt+2,c
  5208  001850  0E00               	movlw	0
  5209  001852  6E47               	movwf	_tmr3_cnt+3,c
  5210                           
  5211                           ;main.c: 238: receivedOK = 0;
  5212  001854  0E00               	movlw	0
  5213  001856  6E4F               	movwf	_receivedOK,c
  5214                           
  5215                           ;main.c: 240: timedOut = 1;
  5216  001858  0E01               	movlw	1
  5217  00185A  6E4B               	movwf	_timedOut,c
  5218                           
  5219                           ;main.c: 241: }
  5220                           ;main.c: 242: break;
  5221  00185C  0012               	return	
  5222  00185E                     
  5223                           ;main.c: 244: if (tmr3_cnt >= (15*10))
  5224  00185E  5047               	movf	_tmr3_cnt+3,w,c
  5225  001860  1046               	iorwf	_tmr3_cnt+2,w,c
  5226  001862  1045               	iorwf	_tmr3_cnt+1,w,c
  5227  001864  E104               	bnz	i2u280_40
  5228  001866  0E96               	movlw	150
  5229  001868  5C44               	subwf	_tmr3_cnt,w,c
  5230  00186A  A0D8               	btfss	status,0,c
  5231  00186C  0012               	return	
  5232  00186E                     i2u280_40:
  5233                           
  5234                           ;main.c: 245: {
  5235                           ;main.c: 246: disable_tmr3();
  5236  00186E  EC2F  F00F         	call	i2_disable_tmr3	;wreg free
  5237                           
  5238                           ;main.c: 247: tmr3_cnt = 0;
  5239  001872  0E00               	movlw	0
  5240  001874  6E44               	movwf	_tmr3_cnt,c
  5241  001876  0E00               	movlw	0
  5242  001878  6E45               	movwf	_tmr3_cnt+1,c
  5243  00187A  0E00               	movlw	0
  5244  00187C  6E46               	movwf	_tmr3_cnt+2,c
  5245  00187E  0E00               	movlw	0
  5246  001880  6E47               	movwf	_tmr3_cnt+3,c
  5247                           
  5248                           ;main.c: 248: receivedOK = 0;
  5249  001882  0E00               	movlw	0
  5250  001884  6E4F               	movwf	_receivedOK,c
  5251                           
  5252                           ;main.c: 250: timedOut = 1;
  5253  001886  0E01               	movlw	1
  5254  001888  6E4B               	movwf	_timedOut,c
  5255                           
  5256                           ;main.c: 251: }
  5257                           ;main.c: 252: break;
  5258  00188A  0012               	return	
  5259  00188C                     
  5260                           ;main.c: 254: if (tmr3_cnt >= (15*10))
  5261  00188C  5047               	movf	_tmr3_cnt+3,w,c
  5262  00188E  1046               	iorwf	_tmr3_cnt+2,w,c
  5263  001890  1045               	iorwf	_tmr3_cnt+1,w,c
  5264  001892  E104               	bnz	i2u281_40
  5265  001894  0E96               	movlw	150
  5266  001896  5C44               	subwf	_tmr3_cnt,w,c
  5267  001898  A0D8               	btfss	status,0,c
  5268  00189A  0012               	return	
  5269  00189C                     i2u281_40:
  5270                           
  5271                           ;main.c: 255: {
  5272                           ;main.c: 256: disable_tmr3();
  5273  00189C  EC2F  F00F         	call	i2_disable_tmr3	;wreg free
  5274                           
  5275                           ;main.c: 257: tmr3_cnt = 0;
  5276  0018A0  0E00               	movlw	0
  5277  0018A2  6E44               	movwf	_tmr3_cnt,c
  5278  0018A4  0E00               	movlw	0
  5279  0018A6  6E45               	movwf	_tmr3_cnt+1,c
  5280  0018A8  0E00               	movlw	0
  5281  0018AA  6E46               	movwf	_tmr3_cnt+2,c
  5282  0018AC  0E00               	movlw	0
  5283  0018AE  6E47               	movwf	_tmr3_cnt+3,c
  5284                           
  5285                           ;main.c: 258: receivedOK = 0;
  5286  0018B0  0E00               	movlw	0
  5287  0018B2  6E4F               	movwf	_receivedOK,c
  5288                           
  5289                           ;main.c: 260: timedOut = 1;
  5290  0018B4  0E01               	movlw	1
  5291  0018B6  6E4B               	movwf	_timedOut,c
  5292                           
  5293                           ;main.c: 263: }
  5294                           
  5295                           ;main.c: 261: }
  5296                           ;main.c: 262: break;
  5297  0018B8  0012               	return	
  5298  0018BA                     i2l157:
  5299  0018BA  0100               	movlb	0	; () banked
  5300  0018BC  51D0               	movf	_md_state& (0+255),w,b
  5301                           
  5302                           ; Switch size 1, requested type "space"
  5303                           ; Number of cases is 5, Range of values is 0 to 4
  5304                           ; switch strategies available:
  5305                           ; Name         Instructions Cycles
  5306                           ; simple_byte           16     9 (average)
  5307                           ;	Chosen strategy is simple_byte
  5308  0018BE  0A00               	xorlw	0	; case 0
  5309  0018C0  B4D8               	btfsc	status,2,c
  5310  0018C2  D772               	goto	i2l158
  5311  0018C4  0A01               	xorlw	1	; case 1
  5312  0018C6  B4D8               	btfsc	status,2,c
  5313  0018C8  D792               	goto	i2l161
  5314  0018CA  0A03               	xorlw	3	; case 2
  5315  0018CC  B4D8               	btfsc	status,2,c
  5316  0018CE  D7B0               	goto	i2l163
  5317  0018D0  0A01               	xorlw	1	; case 3
  5318  0018D2  B4D8               	btfsc	status,2,c
  5319  0018D4  D7C4               	goto	i2l165
  5320  0018D6  0A07               	xorlw	7	; case 4
  5321  0018D8  A4D8               	btfss	status,2,c
  5322  0018DA  0012               	return	
  5323  0018DC  D7D7               	goto	i2l167
  5324  0018DE                     __end_of_check_mdstate_tmr3:
  5325                           	opt stack 0
  5326                           pclatu	equ	0xFFB
  5327                           pclath	equ	0xFFA
  5328                           tblptru	equ	0xFF8
  5329                           tblptrh	equ	0xFF7
  5330                           tblptrl	equ	0xFF6
  5331                           tablat	equ	0xFF5
  5332                           prodh	equ	0xFF4
  5333                           prodl	equ	0xFF3
  5334                           intcon	equ	0xFF2
  5335                           postinc0	equ	0xFEE
  5336                           fsr0h	equ	0xFEA
  5337                           fsr0l	equ	0xFE9
  5338                           wreg	equ	0xFE8
  5339                           postdec1	equ	0xFE5
  5340                           plusw1	equ	0xFE3
  5341                           fsr1h	equ	0xFE2
  5342                           fsr1l	equ	0xFE1
  5343                           indf2	equ	0xFDF
  5344                           postinc2	equ	0xFDE
  5345                           plusw2	equ	0xFDB
  5346                           fsr2h	equ	0xFDA
  5347                           fsr2l	equ	0xFD9
  5348                           status	equ	0xFD8
  5349                           
  5350 ;; *************** function i2_disable_tmr3 *****************
  5351 ;; Defined at:
  5352 ;;		line 199 in file "main.c"
  5353 ;; Parameters:    Size  Location     Type
  5354 ;;		None
  5355 ;; Auto vars:     Size  Location     Type
  5356 ;;		None
  5357 ;; Return value:  Size  Location     Type
  5358 ;;                  1    wreg      void 
  5359 ;; Registers used:
  5360 ;;		wreg, status,2
  5361 ;; Tracked objects:
  5362 ;;		On entry : 0/0
  5363 ;;		On exit  : 0/0
  5364 ;;		Unchanged: 0/0
  5365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5367 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5369 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5370 ;;Total ram usage:        0 bytes
  5371 ;; Hardware stack levels used:    1
  5372 ;; This function calls:
  5373 ;;		Nothing
  5374 ;; This function is called by:
  5375 ;;		_isr
  5376 ;;		_check_mdstate_tmr3
  5377 ;; This function uses a non-reentrant model
  5378 ;;
  5379                           
  5380                           	psect	text21
  5381  001E5E                     __ptext21:
  5382                           	opt stack 0
  5383  001E5E                     i2_disable_tmr3:
  5384                           	opt stack 24
  5385                           
  5386                           ;main.c: 201: tmr3_cnt = 0;
  5387                           
  5388                           ;incstack = 0
  5389  001E5E  0E00               	movlw	0
  5390  001E60  6E44               	movwf	_tmr3_cnt,c
  5391  001E62  0E00               	movlw	0
  5392  001E64  6E45               	movwf	_tmr3_cnt+1,c
  5393  001E66  0E00               	movlw	0
  5394  001E68  6E46               	movwf	_tmr3_cnt+2,c
  5395  001E6A  0E00               	movlw	0
  5396  001E6C  6E47               	movwf	_tmr3_cnt+3,c
  5397                           
  5398                           ;main.c: 202: T3CONbits.TMR3ON = 0;
  5399  001E6E  90B1               	bcf	4017,0,c	;volatile
  5400  001E70  0012               	return		;funcret
  5401  001E72                     __end_ofi2_disable_tmr3:
  5402                           	opt stack 0
  5403                           pclatu	equ	0xFFB
  5404                           pclath	equ	0xFFA
  5405                           tblptru	equ	0xFF8
  5406                           tblptrh	equ	0xFF7
  5407                           tblptrl	equ	0xFF6
  5408                           tablat	equ	0xFF5
  5409                           prodh	equ	0xFF4
  5410                           prodl	equ	0xFF3
  5411                           intcon	equ	0xFF2
  5412                           postinc0	equ	0xFEE
  5413                           fsr0h	equ	0xFEA
  5414                           fsr0l	equ	0xFE9
  5415                           wreg	equ	0xFE8
  5416                           postdec1	equ	0xFE5
  5417                           plusw1	equ	0xFE3
  5418                           fsr1h	equ	0xFE2
  5419                           fsr1l	equ	0xFE1
  5420                           indf2	equ	0xFDF
  5421                           postinc2	equ	0xFDE
  5422                           plusw2	equ	0xFDB
  5423                           fsr2h	equ	0xFDA
  5424                           fsr2l	equ	0xFD9
  5425                           status	equ	0xFD8
  5426                           pclatu	equ	0xFFB
  5427                           pclath	equ	0xFFA
  5428                           tblptru	equ	0xFF8
  5429                           tblptrh	equ	0xFF7
  5430                           tblptrl	equ	0xFF6
  5431                           tablat	equ	0xFF5
  5432                           prodh	equ	0xFF4
  5433                           prodl	equ	0xFF3
  5434                           intcon	equ	0xFF2
  5435                           postinc0	equ	0xFEE
  5436                           fsr0h	equ	0xFEA
  5437                           fsr0l	equ	0xFE9
  5438                           wreg	equ	0xFE8
  5439                           postdec1	equ	0xFE5
  5440                           plusw1	equ	0xFE3
  5441                           fsr1h	equ	0xFE2
  5442                           fsr1l	equ	0xFE1
  5443                           indf2	equ	0xFDF
  5444                           postinc2	equ	0xFDE
  5445                           plusw2	equ	0xFDB
  5446                           fsr2h	equ	0xFDA
  5447                           fsr2l	equ	0xFD9
  5448                           status	equ	0xFD8
  5449                           
  5450                           	psect	rparam
  5451  0000                     pclatu	equ	0xFFB
  5452                           pclath	equ	0xFFA
  5453                           tblptru	equ	0xFF8
  5454                           tblptrh	equ	0xFF7
  5455                           tblptrl	equ	0xFF6
  5456                           tablat	equ	0xFF5
  5457                           prodh	equ	0xFF4
  5458                           prodl	equ	0xFF3
  5459                           intcon	equ	0xFF2
  5460                           postinc0	equ	0xFEE
  5461                           fsr0h	equ	0xFEA
  5462                           fsr0l	equ	0xFE9
  5463                           wreg	equ	0xFE8
  5464                           postdec1	equ	0xFE5
  5465                           plusw1	equ	0xFE3
  5466                           fsr1h	equ	0xFE2
  5467                           fsr1l	equ	0xFE1
  5468                           indf2	equ	0xFDF
  5469                           postinc2	equ	0xFDE
  5470                           plusw2	equ	0xFDB
  5471                           fsr2h	equ	0xFDA
  5472                           fsr2l	equ	0xFD9
  5473                           status	equ	0xFD8
  5474                           
  5475                           	psect	temp
  5476  000055                     btemp:
  5477                           	opt stack 0
  5478  000055                     	ds	1
  5479  0000                     int$flags	set	btemp
  5480  0000                     wtemp6	set	btemp+1
  5481                           pclatu	equ	0xFFB
  5482                           pclath	equ	0xFFA
  5483                           tblptru	equ	0xFF8
  5484                           tblptrh	equ	0xFF7
  5485                           tblptrl	equ	0xFF6
  5486                           tablat	equ	0xFF5
  5487                           prodh	equ	0xFF4
  5488                           prodl	equ	0xFF3
  5489                           intcon	equ	0xFF2
  5490                           postinc0	equ	0xFEE
  5491                           fsr0h	equ	0xFEA
  5492                           fsr0l	equ	0xFE9
  5493                           wreg	equ	0xFE8
  5494                           postdec1	equ	0xFE5
  5495                           plusw1	equ	0xFE3
  5496                           fsr1h	equ	0xFE2
  5497                           fsr1l	equ	0xFE1
  5498                           indf2	equ	0xFDF
  5499                           postinc2	equ	0xFDE
  5500                           plusw2	equ	0xFDB
  5501                           fsr2h	equ	0xFDA
  5502                           fsr2l	equ	0xFD9
  5503                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    128
    Data        221
    BSS         193
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     24      84
    BANK0           160     97     125
    BANK1           256      0     219
    BANK2           256    132     239
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    md_uart_write_str_ok@data	PTR unsigned char  size(2) Largest target is 47
		 -> close_socket_ok@syshalt(BANK0[17]), close_socket_ok@deactivatePDP(BANK0[15]), close_socket_ok@closeSocket(BANK0[10]), send_over_socket_ok@terminateData(BANK0[1]), 
		 -> send_over_socket_ok@msg(BANK0[8]), send_over_socket_ok@srecv(BANK0[16]), send_over_socket_ok@ssend(BANK0[13]), send_over_socket_ok@openConnection(BANK0[44]), 
		 -> setup_data_ok@activatePDP(BANK0[15]), setup_data_ok@cfgSocket(BANK0[25]), setup_data_ok@setApn(BANK0[47]), send_md_cfg_cmds_ok@csq(BANK2[9]), 
		 -> send_md_cfg_cmds_ok@gprs(BANK2[11]), send_md_cfg_cmds_ok@cereg(BANK2[12]), send_md_cfg_cmds_ok@creg(BANK2[11]), send_md_cfg_cmds_ok@cpin(BANK2[11]), 
		 -> send_md_cfg_cmds_ok@queryVersion(BANK2[10]), send_md_cfg_cmds_ok@ledpattern(BANK2[12]), send_md_cfg_cmds_ok@ledCfg(BANK2[16]), send_md_cfg_cmds_ok@baud(BANK2[16]), 
		 -> send_md_cfg_cmds_ok@cmee(BANK2[12]), send_md_cfg_cmds_ok@ate(BANK2[7]), send_md_cfg_cmds_ok@at(BANK2[5]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_check_mdstate_tmr3

Critical Paths under _main in BANK0

    _check_modem_state->_setup_data_ok
    _setup_data_ok->_md_uart_write_str_ok
    _send_over_socket_ok->_md_uart_write_str_ok
    _send_md_cfg_cmds_ok->_md_uart_write_str_ok
    _close_socket_ok->_md_uart_write_str_ok
    _md_uart_write_str_ok->_md_uart_send

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _check_modem_state->_send_md_cfg_cmds_ok

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   35457
                                             96 BANK0      1     1      0
                  _check_modem_state
                           _init_pic
           _start_modem_send_process
 ---------------------------------------------------------------------------------
 (1) _init_pic                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _check_modem_state                                    0     0      0   35358
                    _close_socket_ok
                _send_md_cfg_cmds_ok
                _send_over_socket_ok
                      _setup_data_ok
 ---------------------------------------------------------------------------------
 (2) _setup_data_ok                                       87    87      0    8713
                                              9 BANK0     87    87      0
               _md_uart_write_str_ok
                     _reset_AT_marks
 ---------------------------------------------------------------------------------
 (2) _send_over_socket_ok                                 82    82      0    8787
                                              9 BANK0     82    82      0
               _md_uart_write_str_ok
                     _reset_AT_marks
 ---------------------------------------------------------------------------------
 (2) _send_md_cfg_cmds_ok                                132   132      0    9145
                                              0 BANK2    132   132      0
               _md_uart_write_str_ok
                     _reset_AT_marks
                _start_md_boot_timer
           _start_modem_send_process
 ---------------------------------------------------------------------------------
 (1) _start_modem_send_process                             4     4      0      99
                                              0 BANK0      4     4      0
                _start_md_boot_timer
 ---------------------------------------------------------------------------------
 (2) _start_md_boot_timer                                  0     0      0       0
                     _reload_tmr3_1s
 ---------------------------------------------------------------------------------
 (2) _close_socket_ok                                     42    42      0    8713
                                              9 BANK0     42    42      0
               _md_uart_write_str_ok
                     _reset_AT_marks
 ---------------------------------------------------------------------------------
 (3) _reset_AT_marks                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _md_uart_write_str_ok                                 9     4      5    8602
                                              1 BANK0      8     3      5
                       _disable_tmr3
                    _enable_md_rxint
                       _init_md_uart
                       _md_uart_send
                     _reload_tmr3_1s
                  _reset_retry_count
                  _terminate_md_uart
 ---------------------------------------------------------------------------------
 (4) _terminate_md_uart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _reset_retry_count                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _reload_tmr3_1s                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _md_uart_send                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _init_md_uart                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _enable_md_rxint                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _disable_tmr3                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _isr                                                 23    23      0       0
                                              1 COMRAM    23    23      0
                 _check_mdstate_tmr3
                   _disable_md_rxint
                     i2_disable_tmr3
 ---------------------------------------------------------------------------------
 (7) _disable_md_rxint                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _check_mdstate_tmr3                                   1     1      0       0
                                              0 COMRAM     1     1      0
                     i2_disable_tmr3
 ---------------------------------------------------------------------------------
 (7) i2_disable_tmr3                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _check_modem_state
     _close_socket_ok
       _md_uart_write_str_ok
         _disable_tmr3
         _enable_md_rxint
         _init_md_uart
         _md_uart_send
         _reload_tmr3_1s
         _reset_retry_count
         _terminate_md_uart
       _reset_AT_marks
     _send_md_cfg_cmds_ok
       _md_uart_write_str_ok
         _disable_tmr3
         _enable_md_rxint
         _init_md_uart
         _md_uart_send
         _reload_tmr3_1s
         _reset_retry_count
         _terminate_md_uart
       _reset_AT_marks
       _start_md_boot_timer
         _reload_tmr3_1s
       _start_modem_send_process
         _start_md_boot_timer
           _reload_tmr3_1s
     _send_over_socket_ok
       _md_uart_write_str_ok
         _disable_tmr3
         _enable_md_rxint
         _init_md_uart
         _md_uart_send
         _reload_tmr3_1s
         _reset_retry_count
         _terminate_md_uart
       _reset_AT_marks
     _setup_data_ok
       _md_uart_write_str_ok
         _disable_tmr3
         _enable_md_rxint
         _init_md_uart
         _md_uart_send
         _reload_tmr3_1s
         _reset_retry_count
         _terminate_md_uart
       _reset_AT_marks
   _init_pic
   _start_modem_send_process
     _start_md_boot_timer
       _reload_tmr3_1s

 _isr (ROOT)
   _check_mdstate_tmr3
     i2_disable_tmr3
   _disable_md_rxint
   i2_disable_tmr3

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     84      EF       9       93.4%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      DB       7       85.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     61      7D       5       78.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     18      54       1       89.4%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     29B      12        0.0%
DATA                 0      0     29B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Aug 01 15:12:36 2018

                        ??_disable_tmr3 0060                             __CFG_CP0$ON 000000  
                           __CFG_CP1$ON 000000                             __CFG_CP2$ON 000000  
                           __CFG_CP3$ON 000000                             __CFG_CPB$ON 000000  
                      ?_close_socket_ok 002C                             __CFG_CPD$ON 000000  
      __end_ofsend_over_socket_ok@F6890 104E        __end_ofsend_over_socket_ok@F6892 107C  
      __end_ofsend_over_socket_ok@F6886 102D        __end_ofsend_over_socket_ok@F6888 106A  
               __size_of_reload_tmr3_1s 0004                       ?_disable_md_rxint 002C  
                                   l300 1654                                     l137 1E02  
                                   l410 1B66                                     l403 1BA6  
                                   l139 1E22                                     l412 1B78  
                                   l270 1622                                     l510 1978  
                                   l414 1B8A                                     l406 1B42  
                                   l271 1472                                     l511 19A4  
                                   l272 1522                                     l512 19B8  
                                   l408 1B54                                     l273 14D6  
                                   l522 1D46                                     l290 15B2  
                                   l274 14BC                                     l450 12B4  
                                   l523 1D22                                     l283 1636  
                                   l451 12E0                                     l443 1180  
                                   l292 15DC                                     l284 152A  
                                   l276 14F6                                     l452 130C  
                                   l444 11AC                                     l525 1D28  
                                   l285 1544                                     l509 194C  
                                   l453 1338                                     l445 11D8  
                                   l526 1D2E                                     l294 160E  
                                   l278 150C                                     l462 1468  
                                   l454 1364                                     l446 1204  
                                   l527 1D34                                     l287 156E  
                                   l455 13E2                                     l447 1230  
                                   l528 1D3A                                     l296 1640  
                                   l448 125C                                     l529 1D40  
                                   l289 157E                                     l449 1288  
                                   l473 1A18                                     l298 164A  
                                   l394 1D12                                     l474 1A44  
                                   l395 1CEC                                     l459 1456  
                                   l491 16E2                                     l475 1A70  
                                   l492 170E                                     l493 173A  
                                   l494 1766                                     l495 1792  
                                   l496 17A2                                     _GIE 007F97  
                                   _isr 0008                      ??_disable_md_rxint 002C  
                                   prod 000FF3                                     wreg 000FE8  
                            _TXSTA1bits 000FAC                            __CFG_LVP$OFF 000000  
                                  l2736 1E88                                    l2836 1526  
                                  ?_isr 002C                                    u4200 18EC  
                                  u3305 15F8                                    u3401 10E6  
                                  u3306 15FA                                    u4210 1904  
                                  u3411 10F8                                    u4220 191C  
                                  u4060 1666                                    u3421 110A  
                                  u4070 167E                                    u3431 111C  
                                  u3351 108C                                    u4080 1696  
                                  u3441 112E                                    u3361 109E  
                                  u4090 16AE                                    u3451 1140  
                                  u3371 10B0                                    u3461 1152  
                                  u3381 10C2                                    u3391 10D4  
                                  u3810 13C4                                    u4367 1E0E  
                                  u4377 1CFA                                    u4387 14A6  
                                  u3940 1442                                    u3971 19C6  
                                  u3981 19D8                                    u3991 19EA  
                       __end_of_VERSION 1081                                    _main 1DFE  
                                  fsr0h 000FEA                                    fsr1h 000FE2  
                                  fsr2h 000FDA                                    fsr0l 000FE9  
                                  indf2 000FDF                                    fsr1l 000FE1  
                                  fsr2l 000FD9                                    btemp 0055  
                         __CFG_BORV$190 000000                                    prodh 000FF4  
                                  prodl 000FF3                                    start 0264  
                         __CFG_IESO$OFF 000000                            ___param_bank 000000  
          __size_of_start_md_boot_timer 0006                                   ??_isr 002D  
                          _BAUDCON1bits 000FB8                                   ?_main 002C  
                         ?_md_uart_send 002C                                   _CREN1 007D5C  
                                 _T0CON 000FD5                                   _T3CON 000FB1  
                                 _RC1IE 007CED                                   _RC1IF 007CF5  
                                 i2l130 0202                                   i2l122 007C  
                                 i2l131 0218                                   i2l123 01D6  
                                 i2l124 0114                                   i2l161 17EE  
                                 i2l163 1830                                   i2l157 18BA  
                                 i2l165 185E                                   i2l158 17A8  
                                 i2l167 188C                      setup_data_ok@F6881 0139  
                    setup_data_ok@F6877 02C0                      setup_data_ok@F6879 0100  
      start_modem_send_process@newEvent 0062                                   _TMR0H 000FD7  
                                 _TMR0L 000FD6                                   _TMR3H 000FB3  
                                 _TMR3L 000FB2                                   _TRISA 000F92  
                                 _TRISB 000F93                                   _TRMT1 007D61  
                                 _TRISC 000F94                           __CFG_WRT0$OFF 000000  
                         __CFG_WRT1$OFF 000000                           __CFG_WRT2$OFF 000000  
                         __CFG_WRT3$OFF 000000                          __CFG_EBTR0$OFF 000000  
                        __CFG_FCMEN$OFF 000000                          __CFG_EBTR1$OFF 000000  
                        __CFG_EBTR2$OFF 000000                          __CFG_EBTR3$OFF 000000  
                         __CFG_WRTB$OFF 000000                           __CFG_WRTC$OFF 000000  
                         __CFG_WRTD$OFF 000000                         ??_setup_data_ok 0069  
                        __CFG_EBTRB$OFF 000000                                   _awake 004A  
              setup_data_ok@activatePDP 00B1                      __CFG_MCLRE$INTMCLR 000000  
                                 pclath 000FFA                                   tablat 000FF5  
                                 plusw1 000FE3                                   plusw2 000FDB  
                                 status 000FD8              ??_start_modem_send_process 0060  
                                 wtemp6 0056                          __CFG_HFOFST$ON 000000  
                       _enable_md_rxint 1E72                 __size_of_reset_AT_marks 0034  
                       __initialization 1A82                            __end_of_main 1E28  
           __end_of_send_over_socket_ok 17A6                          ??_md_uart_send 0060  
                                ??_main 00C0                           __activetblptr 000002  
                  close_socket_ok@F6900 106A                    close_socket_ok@F6902 104E  
                  close_socket_ok@F6904 102D                       _terminate_md_uart 1E9E  
           __end_of_send_md_cfg_cmds_ok 1470        send_over_socket_ok@terminateData 00BA  
                    ?_terminate_md_uart 002C                    __end_of_disable_tmr3 1E5E  
                                _ANSELA 000F38                                  _ANSELB 000F39  
                                _ANSELC 000F3A                   send_md_cfg_cmds_ok@at 027F  
                                _RC1REG 000FAE                          __CFG_WDTEN$OFF 000000  
                         ?_init_md_uart 002C                                  _SPBRG1 000FAF  
                                _TMR0IF 007F92                                  _TMR3IF 007D09  
                                _TX1REG 000FAD                     ??_terminate_md_uart 0060  
                        __CFG_XINST$OFF 000000                          __CFG_STVREN$ON 000000  
                                _endPtr 0050                        __end_of_init_pic 1C50  
         __size_of_md_uart_write_str_ok 01E8                                  clear_0 1B08  
                                clear_1 1B14                                  clear_2 1B20  
                                clear_3 1B2C                          _reload_tmr3_1s 1EB8  
                                _toggle 002A               __end_of_terminate_md_uart 1EA8  
                          __pdataCOMRAM 0001                     setup_data_ok@setApn 0069  
                          __mediumconst 0000                                  tblptrh 000FF7  
                                tblptrl 000FF6                                  tblptru 000FF8  
               __end_of_enable_md_rxint 1E84                          ??_init_md_uart 0060  
                            __accesstop 0060                 __end_of__initialization 1B32  
                       __CFG_PBADEN$OFF 000000                           ___rparam_used 000001  
                        __pcstackCOMRAM 002C                            __pidataBANK0 1E92  
                          __pidataBANK1 1C50                            __pidataBANK2 1DA4  
                __end_of_reload_tmr3_1s 1EBC              close_socket_ok@closeSocket 0089  
                            _atCmdState 0051              __end_of_check_mdstate_tmr3 18DE  
                     _check_modem_state 1B40                      ?_check_modem_state 002C  
                   _start_md_boot_timer 1EB2                              __pbssBANK0 00C1  
                            __pbssBANK1 0177                              __pbssBANK2 0284  
                       __CFG_PLLCFG$OFF 000000        __end_of_start_modem_send_process 1D20  
             __size_of_disable_md_rxint 000A                    __end_of_md_uart_send 1E92  
                   ??_check_modem_state 00C0                          _reset_AT_marks 1D70  
                    __CFG_CCP2MX$PORTC1 000000               start_modem_send_process@i 0063  
                  ?_start_md_boot_timer 002C                      __CFG_CCP3MX$PORTB5 000000  
                       ?_reload_tmr3_1s 002C               __end_of_check_modem_state 1BD0  
                send_md_cfg_cmds_ok@ate 0278              __size_of_terminate_md_uart 000A  
                send_md_cfg_cmds_ok@csq 026F                              _ledPattern 0054  
                 __size_of_disable_tmr3 0014                __size_of_close_socket_ok 00DE  
                               _SPBRGH1 000FB0                                 _VERSION 107C  
                      ?_enable_md_rxint 002C                  __end_of_reset_AT_marks 1DA4  
                             ?_init_pic 002C                         __CFG_PWRTEN$OFF 000000  
            md_uart_write_str_ok@wantOK 0064                                 __Hparam 0000  
                               __Lparam 0000               md_uart_write_str_ok@index 0068  
                 ??_start_md_boot_timer 0060                send_md_cfg_cmds_ok@F6841 00D8  
              send_md_cfg_cmds_ok@F6851 0154                send_md_cfg_cmds_ok@F6843 00D1  
              send_md_cfg_cmds_ok@F6861 016C                send_md_cfg_cmds_ok@F6845 0160  
              send_md_cfg_cmds_ok@F6853 0017                send_md_cfg_cmds_ok@F6847 0129  
              send_md_cfg_cmds_ok@F6863 0021                send_md_cfg_cmds_ok@F6855 000C  
              send_md_cfg_cmds_ok@F6849 0119                send_md_cfg_cmds_ok@F6857 0001  
              send_md_cfg_cmds_ok@F6859 0148                            _disable_tmr3 1E4A  
                          __psmallconst 1000                                 __pcinit 1A82  
                               __ramtop 1000                    __end_of_init_md_uart 1E4A  
                               _mdRxBuf 0177                                 __ptext0 1DFE  
                               __ptext1 1BD0                                 __ptext2 1B40  
                               __ptext3 19BC                                 __ptext4 1658  
                               __ptext5 1082                                 __ptext6 1CC8  
                               __ptext7 1EB2                                 __ptext8 18DE  
                               __ptext9 1D70                 __size_ofi2_disable_tmr3 0014  
                       _ledPatternCount 0053                send_md_cfg_cmds_ok@cereg 0238  
                          __size_of_isr 025C                               _T3CONbits 000FB1  
                            _receivedOK 004F                                 _sentAT1 00CD  
                               _sentAT2 00CC                                 _sentAT3 00CB  
                               _sentAT4 00CA                                 _sentAT5 00C9  
                               _sentAT6 00C8                                 _sentAT7 00C7  
                               _sentAT8 00C6                                 _sentAT9 00C5  
                         _receivedCarat 004C               send_md_cfg_cmds_ok@ledCfg 0210  
                 __end_of_setup_data_ok 1A82                    end_of_initialization 1B32  
                       ?_reset_AT_marks 002C                 md_uart_write_str_ok@len 0063  
                         __Lmediumconst 0000                              ??_init_pic 0060  
                            _numRetries 002B                                 postdec1 000FE5  
                         _extendedTimer 00C1                                 postinc0 000FEE  
                               postinc2 000FDE       __size_of_start_modem_send_process 0058  
                             _PORTAbits 000F80                               _PORTBbits 000F81  
             ?_start_modem_send_process 002C                               _PORTCbits 000F82  
            __size_of_check_modem_state 0090            __size_of_send_over_socket_ok 014E  
                             _TRISAbits 000F92                               _TRISBbits 000F93  
                             _TRISCbits 000F94                   __size_of_md_uart_send 000E  
          __end_of_md_uart_write_str_ok 1658                       ??_close_socket_ok 0069  
                      _disable_md_rxint 1EA8            __size_of_send_md_cfg_cmds_ok 03EE  
                           _BAUDCONbits 000FB8  md_uart_write_str_ok@waitToSendMoreData 0065  
                         __pidataCOMRAM 1DD3                            _md_uart_send 1E84  
                   start_initialization 1A82                             __end_of_isr 0264  
              send_over_socket_ok@F6890 103E                send_over_socket_ok@F6892 1074  
              send_over_socket_ok@F6886 1001                send_over_socket_ok@F6888 105D  
                    _check_mdstate_tmr3 17A6                        ??_reload_tmr3_1s 0060  
                   ?_check_mdstate_tmr3 002C           send_md_cfg_cmds_ok@ledpattern 022C  
              send_over_socket_ok@srecv 0095                send_over_socket_ok@ssend 00A5  
                 __size_of_init_md_uart 0022                             __pdataBANK0 00D1  
                           __pdataBANK1 0100                             __pdataBANK2 02C0  
                        i2_disable_tmr3 1E5E                             __pbssCOMRAM 0044  
                  ??_check_mdstate_tmr3 002C                           __pcstackBANK0 0060  
                         __pcstackBANK2 0200                            _init_md_uart 1E28  
                     __size_of_init_pic 0080                               __pintcode 0008  
                       _bootTimerIsDone 00CF                  __end_ofi2_disable_tmr3 1E72  
                  _md_uart_write_str_ok 1470                        __CFG_PRICLKEN$ON 000000  
                           __smallconst 1000            close_socket_ok@deactivatePDP 007A  
                     _reset_retry_count 1D20       send_over_socket_ok@openConnection 0069  
                      ??_reset_AT_marks 0060                      ?_reset_retry_count 002C  
               send_md_cfg_cmds_ok@baud 0200                 send_md_cfg_cmds_ok@cmee 0220  
               send_md_cfg_cmds_ok@creg 024F                 send_md_cfg_cmds_ok@cpin 0244  
               send_md_cfg_cmds_ok@gprs 025A                            _receivedRESP 004D  
                              _LATBbits 000F8A             __end_of_start_md_boot_timer 1EB8  
                              _LATCbits 000F8B                     ??_reset_retry_count 0060  
                              _PIE1bits 000F9D                                _PIE2bits 000FA0  
                   _send_over_socket_ok 1658                                i2u280_40 186E  
                              i2u281_40 189C                                _PIR1bits 000F9E  
                              _PIR2bits 000FA1                                i2u277_40 17D0  
                              i2u278_40 1814                                i2u294_40 0102  
                              i2u279_40 1840                __size_of_enable_md_rxint 0012  
                      __CFG_WDTPS$32768 000000                  close_socket_ok@syshalt 0069  
                       ?i2_disable_tmr3 002C                   ?_md_uart_write_str_ok 0061  
                          _referenceBuf 0284                __end_of_disable_md_rxint 1EB2  
                   _send_md_cfg_cmds_ok 1082               __end_of_reset_retry_count 1D70  
                  ?_send_over_socket_ok 002C                         _close_socket_ok 18DE  
                setup_data_ok@cfgSocket 0098                               copy_data0 1A96  
                             copy_data1 1AB6                               copy_data2 1AD6  
                             copy_data3 1AF6                    ?_send_md_cfg_cmds_ok 002C  
                              __Hrparam 0000                             _pdpIsActive 00CE  
                              __Lrparam 0000                      __CFG_BOREN$SBORDIS 000000  
                     __CFG_P2BMX$PORTB5 000000                  __size_of_setup_data_ok 00C6  
                 ??_send_over_socket_ok 0069                             _currentChar 0049  
       md_uart_write_str_ok@currentChar 0067                                __ptext10 1470  
                              __ptext11 1E9E                                __ptext20 17A6  
                              __ptext12 1D20                                __ptext21 1E5E  
                              __ptext13 1EB8                                __ptext14 1E84  
                              __ptext15 1E28                                __ptext16 1E72  
                              __ptext17 1E4A                                __ptext19 1EA8  
                              _lastChar 0048                                _md_state 00D0  
                 ??_send_md_cfg_cmds_ok 0069                           __size_of_main 002A  
                              _init_pic 1BD0                             _receivedERR 004E  
                              _sentAT10 00C4                                _sentAT11 00C3  
                              _sentAT12 00C2                                _tmr3_cnt 0044  
                              _tmr5_cnt 0052                              _RC1STAbits 000FAB  
       send_md_cfg_cmds_ok@queryVersion 0265                                _timedOut 004B  
                ??_md_uart_write_str_ok 0066                                int$flags 0055  
              _start_modem_send_process 1CC8                 __end_of_close_socket_ok 19BC  
                     ??_enable_md_rxint 0060              __size_of_reset_retry_count 0050  
                            _INTCONbits 000FF2                  send_over_socket_ok@msg 00B2  
              md_uart_write_str_ok@data 0061                                intlevel2 0000  
                         _setup_data_ok 19BC                              _RCSTA1bits 000FAB  
                            _OSCCONbits 000FD3                        md_uart_send@data 0060  
                         ?_disable_tmr3 002C             __size_of_check_mdstate_tmr3 0138  
                     __CFG_T3CMX$PORTC0 000000                          ?_setup_data_ok 002C  
                     __CFG_FOSC$INTIO67 000000            __end_ofclose_socket_ok@F6900 1074  
          __end_ofclose_socket_ok@F6902 105D            __end_ofclose_socket_ok@F6904 103E  
                      ??i2_disable_tmr3 002C  
