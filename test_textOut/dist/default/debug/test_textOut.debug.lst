

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Apr 13 08:59:42 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F26K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    41                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    42  0000                     
    43                           ; Version 1.45
    44                           ; Generated 16/11/2017 GMT
    45                           ; 
    46                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC18F26K22 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     
    78                           	psect	idataBANK0
    79  00EDC1                     __pidataBANK0:
    80                           	opt stack 0
    81                           
    82                           ;initializer for wakeup_module_ok@F6760
    83  00EDC1  41                 	db	65
    84  00EDC2  54                 	db	84
    85  00EDC3  2B                 	db	43
    86  00EDC4  49                 	db	73
    87  00EDC5  50                 	db	80
    88  00EDC6  52                 	db	82
    89  00EDC7  3D                 	db	61
    90  00EDC8  31                 	db	49
    91  00EDC9  31                 	db	49
    92  00EDCA  35                 	db	53
    93  00EDCB  32                 	db	50
    94  00EDCC  30                 	db	48
    95  00EDCD  30                 	db	48
    96  00EDCE  0D                 	db	13
    97  00EDCF  0A                 	db	10
    98  00EDD0  00                 	db	0
    99                           
   100                           ;initializer for wakeup_module_ok@F6758
   101  00EDD1  41                 	db	65
   102  00EDD2  54                 	db	84
   103  00EDD3  0D                 	db	13
   104  00EDD4  0A                 	db	10
   105  00EDD5  00                 	db	0
   106                           
   107                           ;initializer for _delayBetweenBytes
   108  00EDD6  000A               	dw	10
   109                           
   110                           ;initializer for _HL_freq
   111  00EDD8  01                 	db	1
   112                           
   113                           ;initializer for _JENS_NUMBER
   114  00EDD9  38                 	db	56
   115  00EDDA  30                 	db	48
   116  00EDDB  35                 	db	53
   117  00EDDC  36                 	db	54
   118  00EDDD  34                 	db	52
   119  00EDDE  30                 	db	48
   120  00EDDF  35                 	db	53
   121  00EDE0  31                 	db	49
   122  00EDE1  32                 	db	50
   123  00EDE2  37                 	db	55
   124  00EDE3  00                 	db	0
   125                           
   126                           	psect	mediumconst
   127  00FE7C                     __pmediumconst:
   128                           	opt stack 0
   129  00FE7C  00                 	db	0
   130  00FE7D                     socket_configured@F6782:
   131                           	opt stack 0
   132  00FE7D  41                 	db	65
   133  00FE7E  54                 	db	84
   134  00FE7F  23                 	db	35
   135  00FE80  53                 	db	83
   136  00FE81  43                 	db	67
   137  00FE82  46                 	db	70
   138  00FE83  47                 	db	71
   139  00FE84  45                 	db	69
   140  00FE85  58                 	db	88
   141  00FE86  54                 	db	84
   142  00FE87  3D                 	db	61
   143  00FE88  31                 	db	49
   144  00FE89  2C                 	db	44
   145  00FE8A  31                 	db	49
   146  00FE8B  2C                 	db	44
   147  00FE8C  30                 	db	48
   148  00FE8D  2C                 	db	44
   149  00FE8E  30                 	db	48
   150  00FE8F  2C                 	db	44
   151  00FE90  30                 	db	48
   152  00FE91  2C                 	db	44
   153  00FE92  30                 	db	48
   154  00FE93  0D                 	db	13
   155  00FE94  0A                 	db	10
   156  00FE95  00                 	db	0
   157  00FE96                     __end_ofsocket_configured@F6782:
   158                           	opt stack 0
   159  00FE96                     init_modem_ok@F6780:
   160                           	opt stack 0
   161  00FE96  41                 	db	65
   162  00FE97  54                 	db	84
   163  00FE98  23                 	db	35
   164  00FE99  47                 	db	71
   165  00FE9A  50                 	db	80
   166  00FE9B  49                 	db	73
   167  00FE9C  4F                 	db	79
   168  00FE9D  3D                 	db	61
   169  00FE9E  37                 	db	55
   170  00FE9F  2C                 	db	44
   171  00FEA0  30                 	db	48
   172  00FEA1  2C                 	db	44
   173  00FEA2  32                 	db	50
   174  00FEA3  0D                 	db	13
   175  00FEA4  0A                 	db	10
   176  00FEA5  00                 	db	0
   177  00FEA6                     __end_ofinit_modem_ok@F6780:
   178                           	opt stack 0
   179  00FEA6                     sim_card_ok@F6793:
   180                           	opt stack 0
   181  00FEA6  2B                 	db	43
   182  00FEA7  43                 	db	67
   183  00FEA8  50                 	db	80
   184  00FEA9  49                 	db	73
   185  00FEAA  4E                 	db	78
   186  00FEAB  3A                 	db	58
   187  00FEAC  20                 	db	32
   188  00FEAD  52                 	db	82
   189  00FEAE  45                 	db	69
   190  00FEAF  41                 	db	65
   191  00FEB0  44                 	db	68
   192  00FEB1  59                 	db	89
   193  00FEB2  00                 	db	0
   194  00FEB3                     __end_ofsim_card_ok@F6793:
   195                           	opt stack 0
   196  00FEB3                     md_attached@F6786:
   197                           	opt stack 0
   198  00FEB3  41                 	db	65
   199  00FEB4  54                 	db	84
   200  00FEB5  2B                 	db	43
   201  00FEB6  43                 	db	67
   202  00FEB7  47                 	db	71
   203  00FEB8  41                 	db	65
   204  00FEB9  54                 	db	84
   205  00FEBA  54                 	db	84
   206  00FEBB  3F                 	db	63
   207  00FEBC  0D                 	db	13
   208  00FEBD  0A                 	db	10
   209  00FEBE  00                 	db	0
   210  00FEBF                     __end_ofmd_attached@F6786:
   211                           	opt stack 0
   212  00FEBF                     registration_ok@F6760:
   213                           	opt stack 0
   214  00FEBF  41                 	db	65
   215  00FEC0  54                 	db	84
   216  00FEC1  2B                 	db	43
   217  00FEC2  43                 	db	67
   218  00FEC3  45                 	db	69
   219  00FEC4  52                 	db	82
   220  00FEC5  45                 	db	69
   221  00FEC6  47                 	db	71
   222  00FEC7  3F                 	db	63
   223  00FEC8  0D                 	db	13
   224  00FEC9  0A                 	db	10
   225  00FECA  00                 	db	0
   226  00FECB                     __end_ofregistration_ok@F6760:
   227                           	opt stack 0
   228  00FECB                     init_modem_ok@F6784:
   229                           	opt stack 0
   230  00FECB  41                 	db	65
   231  00FECC  54                 	db	84
   232  00FECD  23                 	db	35
   233  00FECE  53                 	db	83
   234  00FECF  4C                 	db	76
   235  00FED0  45                 	db	69
   236  00FED1  44                 	db	68
   237  00FED2  3D                 	db	61
   238  00FED3  34                 	db	52
   239  00FED4  0D                 	db	13
   240  00FED5  0A                 	db	10
   241  00FED6  00                 	db	0
   242  00FED7                     __end_ofinit_modem_ok@F6784:
   243                           	opt stack 0
   244  00FED7                     open_connection@F6811:
   245                           	opt stack 0
   246  00FED7  41                 	db	65
   247  00FED8  54                 	db	84
   248  00FED9  23                 	db	35
   249  00FEDA  53                 	db	83
   250  00FEDB  44                 	db	68
   251  00FEDC  3D                 	db	61
   252  00FEDD  31                 	db	49
   253  00FEDE  2C                 	db	44
   254  00FEDF  30                 	db	48
   255  00FEE0  2C                 	db	44
   256  00FEE1  00                 	db	0
   257  00FEE2                     __end_ofopen_connection@F6811:
   258                           	opt stack 0
   259  00FEE2                     md_attached@F6790:
   260                           	opt stack 0
   261  00FEE2  41                 	db	65
   262  00FEE3  54                 	db	84
   263  00FEE4  2B                 	db	43
   264  00FEE5  43                 	db	67
   265  00FEE6  47                 	db	71
   266  00FEE7  41                 	db	65
   267  00FEE8  54                 	db	84
   268  00FEE9  54                 	db	84
   269  00FEEA  3D                 	db	61
   270  00FEEB  31                 	db	49
   271  00FEEC  00                 	db	0
   272  00FEED                     __end_ofmd_attached@F6790:
   273                           	opt stack 0
   274  00FEED                     registration_ok@F6756:
   275                           	opt stack 0
   276  00FEED  41                 	db	65
   277  00FEEE  54                 	db	84
   278  00FEEF  2B                 	db	43
   279  00FEF0  43                 	db	67
   280  00FEF1  52                 	db	82
   281  00FEF2  45                 	db	69
   282  00FEF3  47                 	db	71
   283  00FEF4  3F                 	db	63
   284  00FEF5  0D                 	db	13
   285  00FEF6  0A                 	db	10
   286  00FEF7  00                 	db	0
   287  00FEF8                     __end_ofregistration_ok@F6756:
   288                           	opt stack 0
   289  00FEF8                     sim_card_ok@F6791:
   290                           	opt stack 0
   291  00FEF8  41                 	db	65
   292  00FEF9  54                 	db	84
   293  00FEFA  2B                 	db	43
   294  00FEFB  43                 	db	67
   295  00FEFC  50                 	db	80
   296  00FEFD  49                 	db	73
   297  00FEFE  4E                 	db	78
   298  00FEFF  3F                 	db	63
   299  00FF00  0D                 	db	13
   300  00FF01  0A                 	db	10
   301  00FF02  00                 	db	0
   302  00FF03                     __end_ofsim_card_ok@F6791:
   303                           	opt stack 0
   304  00FF03                     open_connection@F6813:
   305                           	opt stack 0
   306  00FF03  22                 	db	34
   307  00FF04  2C                 	db	44
   308  00FF05  30                 	db	48
   309  00FF06  2C                 	db	44
   310  00FF07  30                 	db	48
   311  00FF08  2C                 	db	44
   312  00FF09  31                 	db	49
   313  00FF0A  0D                 	db	13
   314  00FF0B  0A                 	db	10
   315  00FF0C  00                 	db	0
   316  00FF0D                     __end_ofopen_connection@F6813:
   317                           	opt stack 0
   318  00FF0D                     init_modem_ok@F6782:
   319                           	opt stack 0
   320  00FF0D  41                 	db	65
   321  00FF0E  54                 	db	84
   322  00FF0F  23                 	db	35
   323  00FF10  43                 	db	67
   324  00FF11  47                 	db	71
   325  00FF12  4D                 	db	77
   326  00FF13  52                 	db	82
   327  00FF14  0D                 	db	13
   328  00FF15  0A                 	db	10
   329  00FF16  00                 	db	0
   330  00FF17                     __end_ofinit_modem_ok@F6782:
   331                           	opt stack 0
   332  00FF17                     md_attached@F6788:
   333                           	opt stack 0
   334  00FF17  2B                 	db	43
   335  00FF18  43                 	db	67
   336  00FF19  47                 	db	71
   337  00FF1A  41                 	db	65
   338  00FF1B  54                 	db	84
   339  00FF1C  54                 	db	84
   340  00FF1D  3A                 	db	58
   341  00FF1E  20                 	db	32
   342  00FF1F  00                 	db	0
   343  00FF20                     __end_ofmd_attached@F6788:
   344                           	opt stack 0
   345  00FF20                     registration_ok@F6762:
   346                           	opt stack 0
   347  00FF20  2B                 	db	43
   348  00FF21  43                 	db	67
   349  00FF22  45                 	db	69
   350  00FF23  52                 	db	82
   351  00FF24  45                 	db	69
   352  00FF25  47                 	db	71
   353  00FF26  3A                 	db	58
   354  00FF27  20                 	db	32
   355  00FF28  00                 	db	0
   356  00FF29                     __end_ofregistration_ok@F6762:
   357                           	opt stack 0
   358  00FF29                     registration_ok@F6758:
   359                           	opt stack 0
   360  00FF29  2B                 	db	43
   361  00FF2A  43                 	db	67
   362  00FF2B  52                 	db	82
   363  00FF2C  45                 	db	69
   364  00FF2D  47                 	db	71
   365  00FF2E  3A                 	db	58
   366  00FF2F  20                 	db	32
   367  00FF30  00                 	db	0
   368  00FF31                     __end_ofregistration_ok@F6758:
   369                           	opt stack 0
   370  00FF31                     _UNIT_ACCT:
   371                           	opt stack 0
   372  00FF31  30                 	db	48
   373  00FF32  30                 	db	48
   374  00FF33  30                 	db	48
   375  00FF34  30                 	db	48
   376  00FF35  23                 	db	35
   377  00FF36  00                 	db	0
   378  00FF37                     __end_of_UNIT_ACCT:
   379                           	opt stack 0
   380  00FF37                     _ACCESS_CODE:
   381                           	opt stack 0
   382  00FF37  31                 	db	49
   383  00FF38  31                 	db	49
   384  00FF39  31                 	db	49
   385  00FF3A  31                 	db	49
   386  00FF3B  23                 	db	35
   387  00FF3C  00                 	db	0
   388  00FF3D                     __end_of_ACCESS_CODE:
   389                           	opt stack 0
   390  00FF3D                     _VERSION:
   391                           	opt stack 0
   392  00FF3D  32                 	db	50
   393  00FF3E  30                 	db	48
   394  00FF3F  30                 	db	48
   395  00FF40  30                 	db	48
   396  00FF41  00                 	db	0
   397  00FF42                     __end_of_VERSION:
   398                           	opt stack 0
   399  00FF42                     _LINE_CARD:
   400                           	opt stack 0
   401  00FF42  31                 	db	49
   402  00FF43  23                 	db	35
   403  00FF44  00                 	db	0
   404  00FF45                     __end_of_LINE_CARD:
   405                           	opt stack 0
   406  00FF45                     _PORT4:
   407                           	opt stack 0
   408  00FF45  07E4               	dw	2020
   409  00FF47                     __end_of_PORT4:
   410                           	opt stack 0
   411  00FF47                     _PORT3:
   412                           	opt stack 0
   413  00FF47  07E4               	dw	2020
   414  00FF49                     __end_of_PORT3:
   415                           	opt stack 0
   416  00FF49                     _PORT2:
   417                           	opt stack 0
   418  00FF49  07E4               	dw	2020
   419  00FF4B                     __end_of_PORT2:
   420                           	opt stack 0
   421  00FF4B                     _PORT1:
   422                           	opt stack 0
   423  00FF4B  07E4               	dw	2020
   424  00FF4D                     __end_of_PORT1:
   425                           	opt stack 0
   426  00FF4D                     _IP4:
   427                           	opt stack 0
   428  00FF4D  23                 	db	35
   429  00FF4E  00                 	db	0
   430  00FF4F                     __end_of_IP4:
   431                           	opt stack 0
   432  00FF4F                     _IP3:
   433                           	opt stack 0
   434  00FF4F  23                 	db	35
   435  00FF50  00                 	db	0
   436  00FF51                     __end_of_IP3:
   437                           	opt stack 0
   438  00FF51                     _IP2:
   439                           	opt stack 0
   440  00FF51  23                 	db	35
   441  00FF52  00                 	db	0
   442  00FF53                     __end_of_IP2:
   443                           	opt stack 0
   444  00FF53                     _IP1:
   445                           	opt stack 0
   446  00FF53  23                 	db	35
   447  00FF54  00                 	db	0
   448  00FF55                     __end_of_IP1:
   449                           	opt stack 0
   450  00FF55                     _APN:
   451                           	opt stack 0
   452  00FF55  23                 	db	35
   453  00FF56  00                 	db	0
   454  00FF57                     __end_of_APN:
   455                           	opt stack 0
   456  00FF57                     _ENCRYPTION:
   457                           	opt stack 0
   458  00FF57  01                 	db	1
   459  00FF58                     __end_of_ENCRYPTION:
   460                           	opt stack 0
   461  00FF58                     _SMS_WAIT_TIME:
   462                           	opt stack 0
   463  00FF58  0A                 	db	10
   464  00FF59                     __end_of_SMS_WAIT_TIME:
   465                           	opt stack 0
   466  00FF59                     _RETRY:
   467                           	opt stack 0
   468  00FF59  0A                 	db	10
   469  00FF5A                     __end_of_RETRY:
   470                           	opt stack 0
   471  00FF5A                     _CYCLE:
   472                           	opt stack 0
   473  00FF5A  02                 	db	2
   474  00FF5B                     __end_of_CYCLE:
   475                           	opt stack 0
   476  00FF5B                     _TP_PIN:
   477                           	opt stack 0
   478  00FF5B  00                 	db	0
   479  00FF5C                     __end_of_TP_PIN:
   480                           	opt stack 0
   481  00FF5C                     _ZONE2:
   482                           	opt stack 0
   483  00FF5C  14                 	db	20
   484  00FF5D                     __end_of_ZONE2:
   485                           	opt stack 0
   486  00FF5D                     _ZONE1:
   487                           	opt stack 0
   488  00FF5D  01                 	db	1
   489  00FF5E                     __end_of_ZONE1:
   490                           	opt stack 0
   491  00FF5E                     _SERVER_ACK_TIME:
   492                           	opt stack 0
   493  00FF5E  2D                 	db	45
   494  00FF5F                     __end_of_SERVER_ACK_TIME:
   495                           	opt stack 0
   496  00FF5F                     _TEST_FREQ:
   497                           	opt stack 0
   498  00FF5F  0F                 	db	15
   499  00FF60                     __end_of_TEST_FREQ:
   500                           	opt stack 0
   501  00FF60                     _PROGRAM_ACK:
   502                           	opt stack 0
   503  00FF60  01                 	db	1
   504  00FF61                     __end_of_PROGRAM_ACK:
   505                           	opt stack 0
   506  00FF61                     _scfg:
   507                           	opt stack 0
   508  00FF61  41                 	db	65
   509  00FF62  54                 	db	84
   510  00FF63  23                 	db	35
   511  00FF64  53                 	db	83
   512  00FF65  43                 	db	67
   513  00FF66  46                 	db	70
   514  00FF67  47                 	db	71
   515  00FF68  3D                 	db	61
   516  00FF69  31                 	db	49
   517  00FF6A  2C                 	db	44
   518  00FF6B  33                 	db	51
   519  00FF6C  2C                 	db	44
   520  00FF6D  33                 	db	51
   521  00FF6E  30                 	db	48
   522  00FF6F  30                 	db	48
   523  00FF70  2C                 	db	44
   524  00FF71  39                 	db	57
   525  00FF72  30                 	db	48
   526  00FF73  2C                 	db	44
   527  00FF74  36                 	db	54
   528  00FF75  30                 	db	48
   529  00FF76  30                 	db	48
   530  00FF77  2C                 	db	44
   531  00FF78  35                 	db	53
   532  00FF79  30                 	db	48
   533  00FF7A  0D                 	db	13
   534  00FF7B  0A                 	db	10
   535  00FF7C  00                 	db	0
   536  00FF7D                     __end_of_scfg:
   537                           	opt stack 0
   538  00FF7D                     _cgdcont:
   539                           	opt stack 0
   540  00FF7D  41                 	db	65
   541  00FF7E  54                 	db	84
   542  00FF7F  2B                 	db	43
   543  00FF80  43                 	db	67
   544  00FF81  47                 	db	71
   545  00FF82  44                 	db	68
   546  00FF83  43                 	db	67
   547  00FF84  4F                 	db	79
   548  00FF85  4E                 	db	78
   549  00FF86  54                 	db	84
   550  00FF87  3D                 	db	61
   551  00FF88  33                 	db	51
   552  00FF89  2C                 	db	44
   553  00FF8A  22                 	db	34
   554  00FF8B  49                 	db	73
   555  00FF8C  50                 	db	80
   556  00FF8D  22                 	db	34
   557  00FF8E  2C                 	db	44
   558  00FF8F  22                 	db	34
   559  00FF90  00                 	db	0
   560  00FF91                     __end_of_cgdcont:
   561                           	opt stack 0
   562  00FF91                     _sgact:
   563                           	opt stack 0
   564  00FF91  41                 	db	65
   565  00FF92  54                 	db	84
   566  00FF93  23                 	db	35
   567  00FF94  53                 	db	83
   568  00FF95  47                 	db	71
   569  00FF96  41                 	db	65
   570  00FF97  43                 	db	67
   571  00FF98  54                 	db	84
   572  00FF99  3D                 	db	61
   573  00FF9A  33                 	db	51
   574  00FF9B  2C                 	db	44
   575  00FF9C  31                 	db	49
   576  00FF9D  0D                 	db	13
   577  00FF9E  0A                 	db	10
   578  00FF9F  00                 	db	0
   579  00FFA0                     __end_of_sgact:
   580                           	opt stack 0
   581  0000                     _ANSELB	set	3897
   582  0000                     _ANSELC	set	3898
   583  0000                     _ANSELA	set	3896
   584  0000                     _PIR2bits	set	4001
   585  0000                     _EECON2	set	4007
   586  0000                     _EEDATA	set	4008
   587  0000                     _EEADR	set	4009
   588  0000                     _EEADRH	set	4010
   589  0000                     _TMR3L	set	4018
   590  0000                     _TMR3H	set	4019
   591  0000                     _T3CON	set	4017
   592  0000                     _INTCONbits	set	4082
   593  0000                     _INTCON	set	4082
   594  0000                     _RC1REG	set	4014
   595  0000                     _TX1REG	set	4013
   596  0000                     _RCSTA2	set	3953
   597  0000                     _RCSTA1	set	4011
   598  0000                     _PIR1bits	set	3998
   599  0000                     _RCSTA1bits	set	4011
   600  0000                     _RC1STAbits	set	4011
   601  0000                     _SPBRG1	set	4015
   602  0000                     _SPBRGH1	set	4016
   603  0000                     _TXSTA1bits	set	4012
   604  0000                     _BAUDCONbits	set	4024
   605  0000                     _BAUDCON1bits	set	4024
   606  0000                     _PORTBbits	set	3969
   607  0000                     _LATCbits	set	3979
   608  0000                     _TRISCbits	set	3988
   609  0000                     _PORTCbits	set	3970
   610  0000                     _TRISBbits	set	3987
   611  0000                     _PORTAbits	set	3968
   612  0000                     _TRISAbits	set	3986
   613  0000                     _OSCCONbits	set	4051
   614  0000                     _LATBbits	set	3978
   615  0000                     _WR	set	32049
   616  0000                     _WREN	set	32050
   617  0000                     _RD	set	32048
   618  0000                     _EEPGD	set	32055
   619  0000                     _CFGS	set	32054
   620  0000                     _GIE	set	32663
   621  0000                     _RCIE	set	31981
   622  0000                     _TMR3ON	set	32136
   623  0000                     _TMR3IF	set	32009
   624  0000                     _RC1IF	set	31989
   625  0000                     _TRMT1	set	32097
   626  0000                     _CREN1	set	32092
   627  0000                     _RC2IE	set	32029
   628  0000                     _TXEN2	set	31637
   629  0000                     _RC1IE	set	31981
   630  0000                     _TXEN1	set	32101
   631  00FFA0                     STR_1:
   632                           
   633                           ; BSR set to: 15
   634  00FFA0  54                 	db	84	;'T'
   635  00FFA1  65                 	db	101	;'e'
   636  00FFA2  73                 	db	115	;'s'
   637  00FFA3  74                 	db	116	;'t'
   638  00FFA4  69                 	db	105	;'i'
   639  00FFA5  6E                 	db	110	;'n'
   640  00FFA6  67                 	db	103	;'g'
   641  00FFA7  20                 	db	32
   642  00FFA8  73                 	db	115	;'s'
   643  00FFA9  6D                 	db	109	;'m'
   644  00FFAA  6F                 	db	111	;'o'
   645  00FFAB  6B                 	db	107	;'k'
   646  00FFAC  65                 	db	101	;'e'
   647  00FFAD  20                 	db	32
   648  00FFAE  68                 	db	104	;'h'
   649  00FFAF  75                 	db	117	;'u'
   650  00FFB0  62                 	db	98	;'b'
   651  00FFB1  20                 	db	32
   652  00FFB2  2D                 	db	45
   653  00FFB3  20                 	db	32
   654  00FFB4  4A                 	db	74	;'J'
   655  00FFB5  65                 	db	101	;'e'
   656  00FFB6  6E                 	db	110	;'n'
   657  00FFB7  27                 	db	39
   658  00FFB8  73                 	db	115	;'s'
   659  00FFB9  20                 	db	32
   660  00FFBA  63                 	db	99	;'c'
   661  00FFBB  6F                 	db	111	;'o'
   662  00FFBC  64                 	db	100	;'d'
   663  00FFBD  65                 	db	101	;'e'
   664  00FFBE  2C                 	db	44
   665  00FFBF  20                 	db	32
   666  00FFC0  4B                 	db	75	;'K'
   667  00FFC1  6F                 	db	111	;'o'
   668  00FFC2  72                 	db	114	;'r'
   669  00FFC3  65                 	db	101	;'e'
   670  00FFC4  20                 	db	32
   671  00FFC5  53                 	db	83	;'S'
   672  00FFC6  49                 	db	73	;'I'
   673  00FFC7  4D                 	db	77	;'M'
   674  00FFC8  2E                 	db	46
   675  00FFC9  0D                 	db	13
   676  00FFCA  0A                 	db	10
   677  00FFCB  00                 	db	0
   678  00FFCC                     STR_5:
   679                           
   680                           ; BSR set to: 15
   681  00FFCC  41                 	db	65	;'A'
   682  00FFCD  54                 	db	84	;'T'
   683  00FFCE  2B                 	db	43
   684  00FFCF  43                 	db	67	;'C'
   685  00FFD0  4D                 	db	77	;'M'
   686  00FFD1  47                 	db	71	;'G'
   687  00FFD2  46                 	db	70	;'F'
   688  00FFD3  3D                 	db	61	;'='
   689  00FFD4  31                 	db	49	;'1'
   690  00FFD5  0D                 	db	13
   691  00FFD6  0A                 	db	10
   692  00FFD7  00                 	db	0
   693  00FFD8                     STR_3:
   694                           
   695                           ; BSR set to: 15
   696  00FFD8  41                 	db	65	;'A'
   697  00FFD9  54                 	db	84	;'T'
   698  00FFDA  2B                 	db	43
   699  00FFDB  43                 	db	67	;'C'
   700  00FFDC  4D                 	db	77	;'M'
   701  00FFDD  45                 	db	69	;'E'
   702  00FFDE  45                 	db	69	;'E'
   703  00FFDF  3D                 	db	61	;'='
   704  00FFE0  32                 	db	50	;'2'
   705  00FFE1  0D                 	db	13
   706  00FFE2  0A                 	db	10
   707  00FFE3  00                 	db	0
   708  00FFE4                     STR_4:
   709                           
   710                           ; BSR set to: 15
   711  00FFE4  41                 	db	65	;'A'
   712  00FFE5  54                 	db	84	;'T'
   713  00FFE6  2B                 	db	43
   714  00FFE7  43                 	db	67	;'C'
   715  00FFE8  52                 	db	82	;'R'
   716  00FFE9  45                 	db	69	;'E'
   717  00FFEA  47                 	db	71	;'G'
   718  00FFEB  3D                 	db	61	;'='
   719  00FFEC  31                 	db	49	;'1'
   720  00FFED  00                 	db	0
   721  00FFEE                     STR_6:
   722                           
   723                           ; BSR set to: 15
   724  00FFEE  41                 	db	65	;'A'
   725  00FFEF  54                 	db	84	;'T'
   726  00FFF0  2B                 	db	43
   727  00FFF1  43                 	db	67	;'C'
   728  00FFF2  4D                 	db	77	;'M'
   729  00FFF3  47                 	db	71	;'G'
   730  00FFF4  53                 	db	83	;'S'
   731  00FFF5  3D                 	db	61	;'='
   732  00FFF6  00                 	db	0
   733  00FFF7                     STR_2:
   734                           
   735                           ; BSR set to: 15
   736  00FFF7  41                 	db	65	;'A'
   737  00FFF8  54                 	db	84	;'T'
   738  00FFF9  45                 	db	69	;'E'
   739  00FFFA  31                 	db	49	;'1'
   740  00FFFB  0D                 	db	13
   741  00FFFC  0A                 	db	10
   742  00FFFD  00                 	db	0
   743  0000                     
   744                           ; #config settings
   745  00FFFE  00                 	db	0	; dummy byte at the end
   746  0000                     
   747                           	psect	cinit
   748  00EEC6                     __pcinit:
   749                           	opt stack 0
   750  00EEC6                     start_initialization:
   751                           	opt stack 0
   752  00EEC6                     __initialization:
   753                           	opt stack 0
   754                           
   755                           ; Initialize objects allocated to BANK0 (35 bytes)
   756                           ; load TBLPTR registers with __pidataBANK0
   757  00EEC6  0EC1               	movlw	low __pidataBANK0
   758  00EEC8  6EF6               	movwf	tblptrl,c
   759  00EECA  0EED               	movlw	high __pidataBANK0
   760  00EECC  6EF7               	movwf	tblptrh,c
   761  00EECE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   762  00EED0  6EF8               	movwf	tblptru,c
   763  00EED2  EE00  F0D7         	lfsr	0,__pdataBANK0
   764  00EED6  EE10 F023          	lfsr	1,35
   765  00EEDA                     copy_data0:
   766  00EEDA  0009               	tblrd		*+
   767  00EEDC  CFF5 FFEE          	movff	tablat,postinc0
   768  00EEE0  50E5               	movf	postdec1,w,c
   769  00EEE2  50E1               	movf	fsr1l,w,c
   770  00EEE4  E1FA               	bnz	copy_data0
   771                           
   772                           ; Clear objects allocated to BANK1 (30 bytes)
   773  00EEE6  EE01  F000         	lfsr	0,__pbssBANK1
   774  00EEEA  0E1E               	movlw	30
   775  00EEEC                     clear_0:
   776  00EEEC  6AEE               	clrf	postinc0,c
   777  00EEEE  06E8               	decf	wreg,f,c
   778  00EEF0  E1FD               	bnz	clear_0
   779                           
   780                           ; Clear objects allocated to BANK0 (1 bytes)
   781  00EEF2  0100               	movlb	0
   782  00EEF4  6BFA               	clrf	__pbssBANK0& (0+255),b
   783                           
   784                           ; Clear objects allocated to COMRAM (1 bytes)
   785  00EEF6  6A5F               	clrf	__pbssCOMRAM& (0+255),c
   786  00EEF8                     end_of_initialization:
   787                           	opt stack 0
   788  00EEF8                     __end_of__initialization:
   789                           	opt stack 0
   790  00EEF8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   791  00EEFA  6EF8               	movwf	tblptru,c
   792  00EEFC  0100               	movlb	0
   793  00EEFE  EF32  F077         	goto	_main	;jump to C main() function
   794                           tblptru	equ	0xFF8
   795                           tblptrh	equ	0xFF7
   796                           tblptrl	equ	0xFF6
   797                           tablat	equ	0xFF5
   798                           postinc0	equ	0xFEE
   799                           wreg	equ	0xFE8
   800                           postdec1	equ	0xFE5
   801                           fsr1l	equ	0xFE1
   802                           
   803                           	psect	bssCOMRAM
   804  00005F                     __pbssCOMRAM:
   805                           	opt stack 0
   806  00005F                     _q_index:
   807                           	opt stack 0
   808  00005F                     	ds	1
   809                           tblptru	equ	0xFF8
   810                           tblptrh	equ	0xFF7
   811                           tblptrl	equ	0xFF6
   812                           tablat	equ	0xFF5
   813                           postinc0	equ	0xFEE
   814                           wreg	equ	0xFE8
   815                           postdec1	equ	0xFE5
   816                           fsr1l	equ	0xFE1
   817                           
   818                           	psect	bssBANK0
   819  0000FA                     __pbssBANK0:
   820                           	opt stack 0
   821  0000FA                     _saveINTCONbits:
   822                           	opt stack 0
   823  0000FA                     	ds	1
   824                           tblptru	equ	0xFF8
   825                           tblptrh	equ	0xFF7
   826                           tblptrl	equ	0xFF6
   827                           tablat	equ	0xFF5
   828                           postinc0	equ	0xFEE
   829                           wreg	equ	0xFE8
   830                           postdec1	equ	0xFE5
   831                           fsr1l	equ	0xFE1
   832                           
   833                           	psect	dataBANK0
   834  0000D7                     __pdataBANK0:
   835                           	opt stack 0
   836  0000D7                     wakeup_module_ok@F6760:
   837                           	opt stack 0
   838  0000D7                     	ds	16
   839  0000E7                     wakeup_module_ok@F6758:
   840                           	opt stack 0
   841  0000E7                     	ds	5
   842  0000EC                     _delayBetweenBytes:
   843                           	opt stack 0
   844  0000EC                     	ds	2
   845  0000EE                     _HL_freq:
   846                           	opt stack 0
   847  0000EE                     	ds	1
   848  0000EF                     _JENS_NUMBER:
   849                           	opt stack 0
   850  0000EF                     	ds	11
   851                           tblptru	equ	0xFF8
   852                           tblptrh	equ	0xFF7
   853                           tblptrl	equ	0xFF6
   854                           tablat	equ	0xFF5
   855                           postinc0	equ	0xFEE
   856                           wreg	equ	0xFE8
   857                           postdec1	equ	0xFE5
   858                           fsr1l	equ	0xFE1
   859                           
   860                           	psect	bssBANK1
   861  000100                     __pbssBANK1:
   862                           	opt stack 0
   863  000100                     _event_queue:
   864                           	opt stack 0
   865  000100                     	ds	30
   866                           tblptru	equ	0xFF8
   867                           tblptrh	equ	0xFF7
   868                           tblptrl	equ	0xFF6
   869                           tablat	equ	0xFF5
   870                           postinc0	equ	0xFEE
   871                           wreg	equ	0xFE8
   872                           postdec1	equ	0xFE5
   873                           fsr1l	equ	0xFE1
   874                           
   875                           	psect	cstackBANK0
   876  000060                     __pcstackBANK0:
   877                           	opt stack 0
   878  000060                     registration_ok@cereg:
   879                           	opt stack 0
   880  000060                     sim_card_ok@buf:
   881                           	opt stack 0
   882  000060                     md_get_str_ok@buf:
   883                           	opt stack 0
   884  000060                     send_text@buf:
   885                           	opt stack 0
   886                           
   887                           ; 40 bytes @ 0x0
   888  000060                     	ds	12
   889  00006C                     registration_ok@creg:
   890                           	opt stack 0
   891                           
   892                           ; 11 bytes @ 0xC
   893  00006C                     	ds	11
   894  000077                     registration_ok@cereg_resp:
   895                           	opt stack 0
   896                           
   897                           ; 9 bytes @ 0x17
   898  000077                     	ds	9
   899  000080                     sim_card_ok@cpinResponse:
   900                           	opt stack 0
   901  000080                     registration_ok@buf:
   902                           	opt stack 0
   903                           
   904                           ; 32 bytes @ 0x20
   905  000080                     	ds	8
   906  000088                     md_get_str_ok@temp:
   907                           	opt stack 0
   908  000088                     send_text@temp:
   909                           	opt stack 0
   910                           
   911                           ; 1 bytes @ 0x28
   912  000088                     	ds	1
   913  000089                     md_get_str_ok@count:
   914                           	opt stack 0
   915  000089                     send_text@count:
   916                           	opt stack 0
   917                           
   918                           ; 1 bytes @ 0x29
   919  000089                     	ds	1
   920  00008A                     md_get_str_ok@k:
   921                           	opt stack 0
   922  00008A                     send_text@ctrlz:
   923                           	opt stack 0
   924                           
   925                           ; 1 bytes @ 0x2A
   926  00008A                     	ds	1
   927  00008B                     md_get_str_ok@i:
   928                           	opt stack 0
   929  00008B                     send_text@i:
   930                           	opt stack 0
   931                           
   932                           ; 1 bytes @ 0x2B
   933  00008B                     	ds	1
   934  00008C                     send_text@ready_to_write:
   935                           	opt stack 0
   936  00008C                     md_attached@buf:
   937                           	opt stack 0
   938                           
   939                           ; 40 bytes @ 0x2C
   940  00008C                     	ds	1
   941  00008D                     sim_card_ok@cpin:
   942                           	opt stack 0
   943                           
   944                           ; 11 bytes @ 0x2D
   945  00008D                     	ds	11
   946  000098                     sim_card_ok@count:
   947                           	opt stack 0
   948                           
   949                           ; 1 bytes @ 0x38
   950  000098                     	ds	1
   951  000099                     sim_card_ok@matches:
   952                           	opt stack 0
   953                           
   954                           ; 1 bytes @ 0x39
   955  000099                     	ds	1
   956  00009A                     sim_card_ok@temp:
   957                           	opt stack 0
   958                           
   959                           ; 1 bytes @ 0x3A
   960  00009A                     	ds	1
   961  00009B                     sim_card_ok@j:
   962                           	opt stack 0
   963                           
   964                           ; 1 bytes @ 0x3B
   965  00009B                     	ds	1
   966  00009C                     sim_card_ok@i:
   967                           	opt stack 0
   968                           
   969                           ; 1 bytes @ 0x3C
   970  00009C                     	ds	4
   971  0000A0                     registration_ok@creg_resp:
   972                           	opt stack 0
   973                           
   974                           ; 8 bytes @ 0x40
   975  0000A0                     	ds	8
   976  0000A8                     _registration_ok$2018:
   977                           	opt stack 0
   978                           
   979                           ; 1 bytes @ 0x48
   980  0000A8                     	ds	1
   981  0000A9                     registration_ok@temp:
   982                           	opt stack 0
   983                           
   984                           ; 1 bytes @ 0x49
   985  0000A9                     	ds	1
   986  0000AA                     registration_ok@matches:
   987                           	opt stack 0
   988                           
   989                           ; 1 bytes @ 0x4A
   990  0000AA                     	ds	1
   991  0000AB                     registration_ok@j:
   992                           	opt stack 0
   993                           
   994                           ; 1 bytes @ 0x4B
   995  0000AB                     	ds	1
   996  0000AC                     registration_ok@i:
   997                           	opt stack 0
   998                           
   999                           ; 1 bytes @ 0x4C
  1000  0000AC                     	ds	8
  1001  0000B4                     md_attached@gprs_check:
  1002                           	opt stack 0
  1003                           
  1004                           ; 12 bytes @ 0x54
  1005  0000B4                     	ds	12
  1006  0000C0                     md_attached@gprs_attach:
  1007                           	opt stack 0
  1008                           
  1009                           ; 11 bytes @ 0x60
  1010  0000C0                     	ds	11
  1011  0000CB                     md_attached@gprs_resp:
  1012                           	opt stack 0
  1013                           
  1014                           ; 9 bytes @ 0x6B
  1015  0000CB                     	ds	9
  1016  0000D4                     md_attached@cnt:
  1017                           	opt stack 0
  1018                           
  1019                           ; 1 bytes @ 0x74
  1020  0000D4                     	ds	1
  1021  0000D5                     md_attached@attached:
  1022                           	opt stack 0
  1023                           
  1024                           ; 1 bytes @ 0x75
  1025  0000D5                     	ds	1
  1026  0000D6                     md_attached@i:
  1027                           	opt stack 0
  1028                           
  1029                           ; 1 bytes @ 0x76
  1030  0000D6                     	ds	1
  1031                           tblptru	equ	0xFF8
  1032                           tblptrh	equ	0xFF7
  1033                           tblptrl	equ	0xFF6
  1034                           tablat	equ	0xFF5
  1035                           postinc0	equ	0xFEE
  1036                           wreg	equ	0xFE8
  1037                           postdec1	equ	0xFE5
  1038                           fsr1l	equ	0xFE1
  1039                           
  1040                           	psect	cstackCOMRAM
  1041  000001                     __pcstackCOMRAM:
  1042                           	opt stack 0
  1043  000001                     md_uart_send@data:
  1044                           	opt stack 0
  1045  000001                     ee_read@addr:
  1046                           	opt stack 0
  1047  000001                     ee_write@addr:
  1048                           	opt stack 0
  1049  000001                     str_matches@raw:
  1050                           	opt stack 0
  1051  000001                     delay5ms@cnt:
  1052                           	opt stack 0
  1053  000001                     wait_ok@buf:
  1054                           	opt stack 0
  1055                           
  1056                           ; 40 bytes @ 0x0
  1057  000001                     	ds	1
  1058  000002                     ee_read@page:
  1059                           	opt stack 0
  1060  000002                     ee_write@data:
  1061                           	opt stack 0
  1062                           
  1063                           ; 1 bytes @ 0x1
  1064  000002                     	ds	1
  1065  000003                     delay5ms@i:
  1066                           	opt stack 0
  1067  000003                     ee_read@data:
  1068                           	opt stack 0
  1069  000003                     ee_write@page:
  1070                           	opt stack 0
  1071  000003                     str_matches@expected:
  1072                           	opt stack 0
  1073                           
  1074                           ; 2 bytes @ 0x2
  1075  000003                     	ds	1
  1076  000004                     ??_write_defaults:
  1077  000004                     delay5ms@j:
  1078                           	opt stack 0
  1079                           
  1080                           ; 1 bytes @ 0x3
  1081  000004                     	ds	1
  1082  000005                     str_matches@len:
  1083                           	opt stack 0
  1084                           
  1085                           ; 1 bytes @ 0x4
  1086  000005                     	ds	1
  1087  000006                     write_defaults@addr:
  1088                           	opt stack 0
  1089                           
  1090                           ; 1 bytes @ 0x5
  1091  000006                     	ds	1
  1092  000007                     write_defaults@temp:
  1093                           	opt stack 0
  1094                           
  1095                           ; 1 bytes @ 0x6
  1096  000007                     	ds	1
  1097  000008                     str_matches@matches:
  1098                           	opt stack 0
  1099  000008                     write_defaults@page:
  1100                           	opt stack 0
  1101                           
  1102                           ; 1 bytes @ 0x7
  1103  000008                     	ds	1
  1104  000009                     str_matches@i:
  1105                           	opt stack 0
  1106  000009                     write_defaults@i:
  1107                           	opt stack 0
  1108                           
  1109                           ; 1 bytes @ 0x8
  1110  000009                     	ds	32
  1111  000029                     wait_ok@count:
  1112                           	opt stack 0
  1113                           
  1114                           ; 1 bytes @ 0x28
  1115  000029                     	ds	1
  1116  00002A                     wait_ok@temp:
  1117                           	opt stack 0
  1118                           
  1119                           ; 1 bytes @ 0x29
  1120  00002A                     	ds	1
  1121  00002B                     wait_ok@i:
  1122                           	opt stack 0
  1123                           
  1124                           ; 1 bytes @ 0x2A
  1125  00002B                     	ds	1
  1126  00002C                     md_uart_write_str_ok@data:
  1127                           	opt stack 0
  1128                           
  1129                           ; 2 bytes @ 0x2B
  1130  00002C                     	ds	2
  1131  00002E                     md_uart_write_str_ok@len:
  1132                           	opt stack 0
  1133                           
  1134                           ; 1 bytes @ 0x2D
  1135  00002E                     	ds	1
  1136  00002F                     md_uart_write_str_ok@want_ok:
  1137                           	opt stack 0
  1138                           
  1139                           ; 1 bytes @ 0x2E
  1140  00002F                     	ds	1
  1141  000030                     md_uart_write_str_ok@currentChar:
  1142                           	opt stack 0
  1143                           
  1144                           ; 1 bytes @ 0x2F
  1145  000030                     	ds	1
  1146  000031                     md_uart_write_str_ok@index:
  1147                           	opt stack 0
  1148                           
  1149                           ; 1 bytes @ 0x30
  1150  000031                     	ds	1
  1151  000032                     ??_sim_card_ok:
  1152  000032                     ??_registration_ok:
  1153  000032                     md_get_str_ok@toSend:
  1154                           	opt stack 0
  1155  000032                     send_text@msg:
  1156                           	opt stack 0
  1157  000032                     wakeup_module_ok@ipr:
  1158                           	opt stack 0
  1159  000032                     init_modem_ok@ledCfg:
  1160                           	opt stack 0
  1161                           
  1162                           ; 16 bytes @ 0x31
  1163  000032                     	ds	2
  1164  000034                     md_get_str_ok@lengthToSend:
  1165                           	opt stack 0
  1166  000034                     send_text@len:
  1167                           	opt stack 0
  1168                           
  1169                           ; 1 bytes @ 0x33
  1170  000034                     	ds	1
  1171  000035                     md_get_str_ok@rtnStr:
  1172                           	opt stack 0
  1173  000035                     send_text@number:
  1174                           	opt stack 0
  1175                           
  1176                           ; 2 bytes @ 0x34
  1177  000035                     	ds	2
  1178  000037                     ??_md_get_str_ok:
  1179                           
  1180                           ; 1 bytes @ 0x36
  1181  000037                     	ds	2
  1182  000039                     ??_md_attached:
  1183                           
  1184                           ; 1 bytes @ 0x38
  1185  000039                     	ds	2
  1186  00003B                     
  1187                           ; 1 bytes @ 0x3A
  1188  00003B                     	ds	7
  1189  000042                     wakeup_module_ok@initStr:
  1190                           	opt stack 0
  1191  000042                     init_modem_ok@ledPattern:
  1192                           	opt stack 0
  1193                           
  1194                           ; 12 bytes @ 0x41
  1195  000042                     	ds	5
  1196  000047                     _wakeup_module_ok$1747:
  1197                           	opt stack 0
  1198                           
  1199                           ; 1 bytes @ 0x46
  1200  000047                     	ds	1
  1201  000048                     wakeup_module_ok@rsp1_ok:
  1202                           	opt stack 0
  1203                           
  1204                           ; 1 bytes @ 0x47
  1205  000048                     	ds	1
  1206  000049                     wakeup_module_ok@rsp2_ok:
  1207                           	opt stack 0
  1208                           
  1209                           ; 1 bytes @ 0x48
  1210  000049                     	ds	1
  1211  00004A                     wakeup_module_ok@cnt:
  1212                           	opt stack 0
  1213                           
  1214                           ; 1 bytes @ 0x49
  1215  00004A                     	ds	1
  1216  00004B                     wakeup_module_ok@i:
  1217                           	opt stack 0
  1218                           
  1219                           ; 1 bytes @ 0x4A
  1220  00004B                     	ds	1
  1221  00004C                     
  1222                           ; 1 bytes @ 0x4B
  1223  00004C                     	ds	2
  1224  00004E                     init_modem_ok@queryVersion:
  1225                           	opt stack 0
  1226                           
  1227                           ; 10 bytes @ 0x4D
  1228  00004E                     	ds	10
  1229  000058                     init_modem_ok@index:
  1230                           	opt stack 0
  1231                           
  1232                           ; 1 bytes @ 0x57
  1233  000058                     	ds	1
  1234  000059                     init_modem_ok@c5:
  1235                           	opt stack 0
  1236                           
  1237                           ; 1 bytes @ 0x58
  1238  000059                     	ds	1
  1239  00005A                     init_modem_ok@c1:
  1240                           	opt stack 0
  1241                           
  1242                           ; 1 bytes @ 0x59
  1243  00005A                     	ds	1
  1244  00005B                     init_modem_ok@c2:
  1245                           	opt stack 0
  1246                           
  1247                           ; 1 bytes @ 0x5A
  1248  00005B                     	ds	1
  1249  00005C                     init_modem_ok@c3:
  1250                           	opt stack 0
  1251                           
  1252                           ; 1 bytes @ 0x5B
  1253  00005C                     	ds	1
  1254  00005D                     init_modem_ok@c4:
  1255                           	opt stack 0
  1256                           
  1257                           ; 1 bytes @ 0x5C
  1258  00005D                     	ds	1
  1259  00005E                     init_modem_ok@repeat:
  1260                           	opt stack 0
  1261                           
  1262                           ; 1 bytes @ 0x5D
  1263  00005E                     	ds	1
  1264  00005F                     tblptru	equ	0xFF8
  1265                           tblptrh	equ	0xFF7
  1266                           tblptrl	equ	0xFF6
  1267                           tablat	equ	0xFF5
  1268                           postinc0	equ	0xFEE
  1269                           wreg	equ	0xFE8
  1270                           postdec1	equ	0xFE5
  1271                           fsr1l	equ	0xFE1
  1272                           
  1273                           ; 1 bytes @ 0x5E
  1274 ;;
  1275 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1276 ;;
  1277 ;; *************** function _main *****************
  1278 ;; Defined at:
  1279 ;;		line 25 in file "main.c"
  1280 ;; Parameters:    Size  Location     Type
  1281 ;;		None
  1282 ;; Auto vars:     Size  Location     Type
  1283 ;;		None
  1284 ;; Return value:  Size  Location     Type
  1285 ;;                  1    wreg      void 
  1286 ;; Registers used:
  1287 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1288 ;; Tracked objects:
  1289 ;;		On entry : 0/0
  1290 ;;		On exit  : 0/0
  1291 ;;		Unchanged: 0/0
  1292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1296 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1297 ;;Total ram usage:        0 bytes
  1298 ;; Hardware stack levels required when called:    8
  1299 ;; This function calls:
  1300 ;;		_init_pic
  1301 ;;		_md_restart
  1302 ;;		_send_text
  1303 ;;		_startup_md_ok
  1304 ;; This function is called by:
  1305 ;;		Startup code after reset
  1306 ;; This function uses a non-reentrant model
  1307 ;;
  1308                           
  1309                           	psect	text0
  1310  00EE64                     __ptext0:
  1311                           	opt stack 0
  1312  00EE64                     _main:
  1313                           	opt stack 23
  1314                           
  1315                           ;main.c: 27: init_pic();
  1316                           
  1317                           ;incstack = 0
  1318  00EE64  ECC1  F077         	call	_init_pic	;wreg free
  1319                           
  1320                           ;main.c: 29: while (!startup_md_ok())
  1321  00EE68  D002               	goto	l97
  1322  00EE6A                     
  1323                           ;main.c: 30: md_restart();
  1324  00EE6A  ECBB  F076         	call	_md_restart	;wreg free
  1325  00EE6E                     l97:
  1326  00EE6E  ECA1  F077         	call	_startup_md_ok	;wreg free
  1327  00EE72  0900               	iorlw	0
  1328  00EE74  B4D8               	btfsc	status,2,c
  1329  00EE76  D7F9               	goto	l98
  1330                           
  1331                           ;main.c: 36: send_text((uint8_t *)"Testing smoke hub - Jen's code, Kore SIM.\r\n", 42, (
      +                          uint8_t *)&JENS_NUMBER[0]);
  1332  00EE78  0EA0               	movlw	low STR_1
  1333  00EE7A  6E32               	movwf	send_text@msg,c
  1334  00EE7C  0EFF               	movlw	high STR_1
  1335  00EE7E  6E33               	movwf	send_text@msg+1,c
  1336  00EE80  0E2A               	movlw	42
  1337  00EE82  6E34               	movwf	send_text@len,c
  1338  00EE84  0EEF               	movlw	low _JENS_NUMBER
  1339  00EE86  6E35               	movwf	send_text@number,c
  1340  00EE88  0E00               	movlw	high _JENS_NUMBER
  1341  00EE8A  6E36               	movwf	send_text@number+1,c
  1342  00EE8C  EC3D  F079         	call	_send_text	;wreg free
  1343  00EE90                     
  1344                           ;main.c: 38: {
  1345                           ;main.c: 40: LATBbits.LATB3 = 0;
  1346  00EE90  968A               	bcf	3978,3,c	;volatile
  1347  00EE92  D7FE               	goto	l100
  1348  00EE94                     __end_of_main:
  1349                           	opt stack 0
  1350                           tblptru	equ	0xFF8
  1351                           tblptrh	equ	0xFF7
  1352                           tblptrl	equ	0xFF6
  1353                           tablat	equ	0xFF5
  1354                           postinc0	equ	0xFEE
  1355                           wreg	equ	0xFE8
  1356                           postdec1	equ	0xFE5
  1357                           fsr1l	equ	0xFE1
  1358                           status	equ	0xFD8
  1359                           
  1360 ;; *************** function _startup_md_ok *****************
  1361 ;; Defined at:
  1362 ;;		line 180 in file "module.c"
  1363 ;; Parameters:    Size  Location     Type
  1364 ;;		None
  1365 ;; Auto vars:     Size  Location     Type
  1366 ;;		None
  1367 ;; Return value:  Size  Location     Type
  1368 ;;                  1    wreg      unsigned char 
  1369 ;; Registers used:
  1370 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1371 ;; Tracked objects:
  1372 ;;		On entry : 0/0
  1373 ;;		On exit  : 0/0
  1374 ;;		Unchanged: 0/0
  1375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1377 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1379 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1380 ;;Total ram usage:        0 bytes
  1381 ;; Hardware stack levels used:    1
  1382 ;; Hardware stack levels required when called:    7
  1383 ;; This function calls:
  1384 ;;		_init_uart_modem
  1385 ;;		_is_connected
  1386 ;;		_md_io_setup_ok
  1387 ;;		_registration_ok
  1388 ;;		_wakeup_module_ok
  1389 ;; This function is called by:
  1390 ;;		_main
  1391 ;; This function uses a non-reentrant model
  1392 ;;
  1393                           
  1394                           	psect	text1
  1395  00EF42                     __ptext1:
  1396                           	opt stack 0
  1397  00EF42                     _startup_md_ok:
  1398                           	opt stack 23
  1399                           
  1400                           ;module.c: 182: init_uart_modem();
  1401                           
  1402                           ;incstack = 0
  1403  00EF42  ECF2  F076         	call	_init_uart_modem	;wreg free
  1404                           
  1405                           ;module.c: 183: if (!wakeup_module_ok())
  1406  00EF46  EC63  F078         	call	_wakeup_module_ok	;wreg free
  1407  00EF4A  0900               	iorlw	0
  1408  00EF4C  A4D8               	btfss	status,2,c
  1409  00EF4E  D002               	goto	l499
  1410                           
  1411                           ;module.c: 184: return 0;
  1412  00EF50  0E00               	movlw	0
  1413  00EF52  0012               	return	
  1414  00EF54                     l499:
  1415                           
  1416                           ;module.c: 185: if (!md_io_setup_ok())
  1417  00EF54  EC4A  F077         	call	_md_io_setup_ok	;wreg free
  1418  00EF58  0900               	iorlw	0
  1419  00EF5A  A4D8               	btfss	status,2,c
  1420  00EF5C  D002               	goto	l501
  1421                           
  1422                           ;module.c: 186: return 0;
  1423  00EF5E  0E00               	movlw	0
  1424  00EF60  0012               	return	
  1425  00EF62                     l501:
  1426                           
  1427                           ;module.c: 187: if (!registration_ok())
  1428  00EF62  ECC3  F07B         	call	_registration_ok	;wreg free
  1429  00EF66  0900               	iorlw	0
  1430  00EF68  A4D8               	btfss	status,2,c
  1431  00EF6A  D002               	goto	l502
  1432                           
  1433                           ;module.c: 188: return 0;
  1434  00EF6C  0E00               	movlw	0
  1435  00EF6E  0012               	return	
  1436  00EF70                     l502:
  1437                           
  1438                           ;module.c: 189: if (!is_connected())
  1439  00EF70  ECA2  F076         	call	_is_connected	;wreg free
  1440  00EF74  0900               	iorlw	0
  1441  00EF76  A4D8               	btfss	status,2,c
  1442  00EF78  D002               	goto	l503
  1443                           
  1444                           ;module.c: 190: return 0;
  1445  00EF7A  0E00               	movlw	0
  1446  00EF7C  0012               	return	
  1447  00EF7E                     l503:
  1448                           
  1449                           ;module.c: 196: return 1;
  1450  00EF7E  0E01               	movlw	1
  1451  00EF80  0012               	return	
  1452  00EF82                     __end_of_startup_md_ok:
  1453                           	opt stack 0
  1454                           tblptru	equ	0xFF8
  1455                           tblptrh	equ	0xFF7
  1456                           tblptrl	equ	0xFF6
  1457                           tablat	equ	0xFF5
  1458                           postinc0	equ	0xFEE
  1459                           wreg	equ	0xFE8
  1460                           postdec1	equ	0xFE5
  1461                           fsr1l	equ	0xFE1
  1462                           status	equ	0xFD8
  1463                           
  1464 ;; *************** function _registration_ok *****************
  1465 ;; Defined at:
  1466 ;;		line 30 in file "network.c"
  1467 ;; Parameters:    Size  Location     Type
  1468 ;;		None
  1469 ;; Auto vars:     Size  Location     Type
  1470 ;;  j               1   75[BANK0 ] unsigned char 
  1471 ;;  buf            32   32[BANK0 ] unsigned char [32]
  1472 ;;  cereg          12    0[BANK0 ] const unsigned char [12]
  1473 ;;  creg           11   12[BANK0 ] const unsigned char [11]
  1474 ;;  cereg_resp      9   23[BANK0 ] const unsigned char [9]
  1475 ;;  creg_resp       8   64[BANK0 ] const unsigned char [8]
  1476 ;;  i               1   76[BANK0 ] unsigned char 
  1477 ;;  matches         1   74[BANK0 ] unsigned char 
  1478 ;;  temp            1   73[BANK0 ] unsigned char 
  1479 ;; Return value:  Size  Location     Type
  1480 ;;                  1    wreg      unsigned char 
  1481 ;; Registers used:
  1482 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1483 ;; Tracked objects:
  1484 ;;		On entry : 0/0
  1485 ;;		On exit  : 0/0
  1486 ;;		Unchanged: 0/0
  1487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1489 ;;      Locals:         0      77       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1490 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1491 ;;      Totals:         2      77       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1492 ;;Total ram usage:       79 bytes
  1493 ;; Hardware stack levels used:    1
  1494 ;; Hardware stack levels required when called:    4
  1495 ;; This function calls:
  1496 ;;		_delay5ms
  1497 ;;		_md_uart_write_str_ok
  1498 ;;		_setup_timer3
  1499 ;;		_str_matches
  1500 ;; This function is called by:
  1501 ;;		_startup_md_ok
  1502 ;; This function uses a non-reentrant model
  1503 ;;
  1504                           
  1505                           	psect	text2
  1506  00F786                     __ptext2:
  1507                           	opt stack 0
  1508  00F786                     _registration_ok:
  1509                           	opt stack 25
  1510                           
  1511                           ;network.c: 32: const uint8_t creg[] = "AT+CREG?\r\n";
  1512                           
  1513                           ;incstack = 0
  1514  00F786  0EED               	movlw	low registration_ok@F6756
  1515  00F788  6EF6               	movwf	tblptrl,c
  1516  00F78A                     	if	1	;There is more than 1 active tblptr byte
  1517  00F78A  0EFE               	movlw	high registration_ok@F6756
  1518  00F78C  6EF7               	movwf	tblptrh,c
  1519  00F78E                     	endif
  1520  00F78E                     	if	0	;There are less than 3 active tblptr bytes
  1521  00F78E                     	endif
  1522  00F78E  EE20  F06C         	lfsr	2,registration_ok@creg
  1523  00F792  0E0A               	movlw	10
  1524  00F794                     u2390:
  1525  00F794  0009               	tblrd		*+
  1526  00F796  CFF5 FFDE          	movff	tablat,postinc2
  1527  00F79A  06E8               	decf	wreg,f,c
  1528  00F79C  E2FB               	bc	u2390
  1529                           
  1530                           ;network.c: 33: const uint8_t creg_resp[] = "+CREG: ";
  1531  00F79E  0E29               	movlw	low registration_ok@F6758
  1532  00F7A0  6EF6               	movwf	tblptrl,c
  1533  00F7A2                     	if	1	;There is more than 1 active tblptr byte
  1534  00F7A2  0EFF               	movlw	high registration_ok@F6758
  1535  00F7A4  6EF7               	movwf	tblptrh,c
  1536  00F7A6                     	endif
  1537  00F7A6                     	if	0	;There are less than 3 active tblptr bytes
  1538  00F7A6                     	endif
  1539  00F7A6  EE20  F0A0         	lfsr	2,registration_ok@creg_resp
  1540  00F7AA  0E07               	movlw	7
  1541  00F7AC                     u2400:
  1542  00F7AC  0009               	tblrd		*+
  1543  00F7AE  CFF5 FFDE          	movff	tablat,postinc2
  1544  00F7B2  06E8               	decf	wreg,f,c
  1545  00F7B4  E2FB               	bc	u2400
  1546                           
  1547                           ;network.c: 34: const uint8_t cereg[] = "AT+CEREG?\r\n";
  1548  00F7B6  0EBF               	movlw	low registration_ok@F6760
  1549  00F7B8  6EF6               	movwf	tblptrl,c
  1550  00F7BA                     	if	1	;There is more than 1 active tblptr byte
  1551  00F7BA  0EFE               	movlw	high registration_ok@F6760
  1552  00F7BC  6EF7               	movwf	tblptrh,c
  1553  00F7BE                     	endif
  1554  00F7BE                     	if	0	;There are less than 3 active tblptr bytes
  1555  00F7BE                     	endif
  1556  00F7BE  EE20  F060         	lfsr	2,registration_ok@cereg
  1557  00F7C2  0E0B               	movlw	11
  1558  00F7C4                     u2410:
  1559  00F7C4  0009               	tblrd		*+
  1560  00F7C6  CFF5 FFDE          	movff	tablat,postinc2
  1561  00F7CA  06E8               	decf	wreg,f,c
  1562  00F7CC  E2FB               	bc	u2410
  1563                           
  1564                           ;network.c: 35: const uint8_t cereg_resp[] = "+CEREG: ";
  1565  00F7CE  0E20               	movlw	low registration_ok@F6762
  1566  00F7D0  6EF6               	movwf	tblptrl,c
  1567  00F7D2                     	if	1	;There is more than 1 active tblptr byte
  1568  00F7D2  0EFF               	movlw	high registration_ok@F6762
  1569  00F7D4  6EF7               	movwf	tblptrh,c
  1570  00F7D6                     	endif
  1571  00F7D6                     	if	0	;There are less than 3 active tblptr bytes
  1572  00F7D6                     	endif
  1573  00F7D6  EE20  F077         	lfsr	2,registration_ok@cereg_resp
  1574  00F7DA  0E08               	movlw	8
  1575  00F7DC                     u2420:
  1576  00F7DC  0009               	tblrd		*+
  1577  00F7DE  CFF5 FFDE          	movff	tablat,postinc2
  1578  00F7E2  06E8               	decf	wreg,f,c
  1579  00F7E4  E2FB               	bc	u2420
  1580                           
  1581                           ;network.c: 37: uint8_t buf[32], i = 0, temp;
  1582  00F7E6  0E00               	movlw	0
  1583  00F7E8  0100               	movlb	0	; () banked
  1584  00F7EA  6FAC               	movwf	registration_ok@i& (0+255),b
  1585                           
  1586                           ; BSR set to: 0
  1587                           ;network.c: 38: bool matches = 1;
  1588  00F7EC  0E01               	movlw	1
  1589  00F7EE  6FAA               	movwf	registration_ok@matches& (0+255),b
  1590                           
  1591                           ; BSR set to: 0
  1592                           ;network.c: 40: for (uint8_t j = 0; j < 4; j ++)
  1593  00F7F0  0E00               	movlw	0
  1594  00F7F2  6FAB               	movwf	registration_ok@j& (0+255),b
  1595  00F7F4                     l3116:
  1596                           
  1597                           ; BSR set to: 0
  1598  00F7F4  0E03               	movlw	3
  1599  00F7F6  65AB               	cpfsgt	registration_ok@j& (0+255),b
  1600  00F7F8  D001               	goto	l751
  1601  00F7FA  D0C6               	goto	u2590
  1602  00F7FC                     l751:
  1603                           
  1604                           ; BSR set to: 0
  1605                           ;network.c: 41: {
  1606                           ;network.c: 42: if (j % 2 == 0)
  1607  00F7FC  B1AB               	btfsc	registration_ok@j& (0+255),0,b
  1608  00F7FE  D00F               	goto	l753
  1609                           
  1610                           ; BSR set to: 0
  1611                           ;network.c: 43: {
  1612                           ;network.c: 44: if (!md_uart_write_str_ok((unsigned char *)&creg[0], sizeof(creg), 0))
  1613  00F800  0E6C               	movlw	low registration_ok@creg
  1614  00F802  6E2C               	movwf	md_uart_write_str_ok@data,c
  1615  00F804  0E00               	movlw	high registration_ok@creg
  1616  00F806  6E2D               	movwf	md_uart_write_str_ok@data+1,c
  1617  00F808  0E0B               	movlw	11
  1618  00F80A  6E2E               	movwf	md_uart_write_str_ok@len,c
  1619  00F80C  0E00               	movlw	0
  1620  00F80E  6E2F               	movwf	md_uart_write_str_ok@want_ok,c
  1621  00F810  ECEA  F077         	call	_md_uart_write_str_ok	;wreg free
  1622  00F814  0900               	iorlw	0
  1623  00F816  A4D8               	btfss	status,2,c
  1624  00F818  D013               	goto	l758
  1625                           
  1626                           ;network.c: 45: return 0;
  1627  00F81A  0E00               	movlw	0
  1628  00F81C  0012               	return	
  1629  00F81E                     l753:
  1630                           
  1631                           ; BSR set to: 0
  1632                           ;network.c: 47: else if (j % 2 == 1)
  1633  00F81E  A1AB               	btfss	registration_ok@j& (0+255),0,b
  1634  00F820  D00F               	goto	l758
  1635                           
  1636                           ; BSR set to: 0
  1637                           ;network.c: 48: {
  1638                           ;network.c: 49: if (!md_uart_write_str_ok((unsigned char *)&cereg[0], sizeof(cereg), 0))
  1639  00F822  0E60               	movlw	low registration_ok@cereg
  1640  00F824  6E2C               	movwf	md_uart_write_str_ok@data,c
  1641  00F826  0E00               	movlw	high registration_ok@cereg
  1642  00F828  6E2D               	movwf	md_uart_write_str_ok@data+1,c
  1643  00F82A  0E0C               	movlw	12
  1644  00F82C  6E2E               	movwf	md_uart_write_str_ok@len,c
  1645  00F82E  0E00               	movlw	0
  1646  00F830  6E2F               	movwf	md_uart_write_str_ok@want_ok,c
  1647  00F832  ECEA  F077         	call	_md_uart_write_str_ok	;wreg free
  1648  00F836  0900               	iorlw	0
  1649  00F838  A4D8               	btfss	status,2,c
  1650  00F83A  D002               	goto	l758
  1651                           
  1652                           ;network.c: 50: return 0;
  1653  00F83C  0E00               	movlw	0
  1654  00F83E  0012               	return	
  1655  00F840                     l758:
  1656                           
  1657                           ;network.c: 51: }
  1658                           ;network.c: 53: RCIE = 0;
  1659  00F840  9A9D               	bcf	3997,5,c	;volatile
  1660                           
  1661                           ;network.c: 54: CREN1 = 1;
  1662  00F842  88AB               	bsf	4011,4,c	;volatile
  1663                           
  1664                           ;network.c: 55: while (!TMR3IF && !matches)
  1665  00F844  D092               	goto	l763
  1666  00F846                     
  1667                           ;network.c: 56: {
  1668                           ;network.c: 57: setup_timer3();
  1669  00F846  ECAC  F076         	call	_setup_timer3	;wreg free
  1670                           
  1671                           ;network.c: 58: if (RC1IF)
  1672  00F84A  AA9E               	btfss	3998,5,c	;volatile
  1673  00F84C  D08E               	goto	l763
  1674                           
  1675                           ;network.c: 59: {
  1676                           ;network.c: 60: temp = RC1REG;
  1677  00F84E  CFAE F0A9          	movff	4014,registration_ok@temp	;volatile
  1678                           
  1679                           ;network.c: 61: buf[i++] = temp;
  1680  00F852  0100               	movlb	0	; () banked
  1681  00F854  51AC               	movf	registration_ok@i& (0+255),w,b
  1682  00F856  0D01               	mullw	1
  1683  00F858  0E80               	movlw	low registration_ok@buf
  1684  00F85A  24F3               	addwf	prodl,w,c
  1685  00F85C  6ED9               	movwf	fsr2l,c
  1686  00F85E  0E00               	movlw	high registration_ok@buf
  1687  00F860  20F4               	addwfc	prodh,w,c
  1688  00F862  6EDA               	movwf	fsr2h,c
  1689  00F864  C0A9  FFDF         	movff	registration_ok@temp,indf2
  1690                           
  1691                           ; BSR set to: 0
  1692  00F868  2BAC               	incf	registration_ok@i& (0+255),f,b
  1693                           
  1694                           ; BSR set to: 0
  1695                           ;network.c: 62: if (i >= 32)
  1696  00F86A  0E1F               	movlw	31
  1697  00F86C  65AC               	cpfsgt	registration_ok@i& (0+255),b
  1698  00F86E  D002               	goto	l762
  1699                           
  1700                           ; BSR set to: 0
  1701                           ;network.c: 63: i = 31;
  1702  00F870  0E1F               	movlw	31
  1703  00F872  6FAC               	movwf	registration_ok@i& (0+255),b
  1704  00F874                     l762:
  1705                           
  1706                           ; BSR set to: 0
  1707                           ;network.c: 64: if (temp == 'K')
  1708                           
  1709                           ; BSR set to: 0
  1710  00F874  0E4B               	movlw	75
  1711  00F876  19A9               	xorwf	registration_ok@temp& (0+255),w,b
  1712  00F878  A4D8               	btfss	status,2,c
  1713  00F87A  D077               	goto	l763
  1714                           
  1715                           ; BSR set to: 0
  1716                           ;network.c: 65: {
  1717                           ;network.c: 66: if (j == 0)
  1718  00F87C  51AB               	movf	registration_ok@j& (0+255),w,b
  1719  00F87E  A4D8               	btfss	status,2,c
  1720  00F880  D015               	goto	l764
  1721                           
  1722                           ; BSR set to: 0
  1723                           ;network.c: 67: matches &= str_matches((uint8_t *)&buf[(uint8_t)(i - 16)], (uint8_t *)&c
      +                          reg_resp[0], sizeof(creg_resp));
  1724  00F882  C0AC  F032         	movff	registration_ok@i,??_registration_ok
  1725  00F886  0EF0               	movlw	240
  1726  00F888  2632               	addwf	??_registration_ok,f,c
  1727  00F88A  5032               	movf	??_registration_ok,w,c
  1728  00F88C  0D01               	mullw	1
  1729  00F88E  0E80               	movlw	low registration_ok@buf
  1730  00F890  24F3               	addwf	prodl,w,c
  1731  00F892  6E01               	movwf	str_matches@raw,c
  1732  00F894  0E00               	movlw	high registration_ok@buf
  1733  00F896  20F4               	addwfc	prodh,w,c
  1734  00F898  6E02               	movwf	str_matches@raw+1,c
  1735  00F89A  0EA0               	movlw	low registration_ok@creg_resp
  1736  00F89C  6E03               	movwf	str_matches@expected,c
  1737  00F89E  0E00               	movlw	high registration_ok@creg_resp
  1738  00F8A0  6E04               	movwf	str_matches@expected+1,c
  1739  00F8A2  0E08               	movlw	8
  1740  00F8A4  6E05               	movwf	str_matches@len,c
  1741  00F8A6  EC81  F077         	call	_str_matches	;wreg free
  1742  00F8AA  D017               	goto	L1
  1743  00F8AC                     l764:
  1744                           
  1745                           ; BSR set to: 0
  1746                           ;network.c: 68: else if (j == 1)
  1747                           
  1748                           ; BSR set to: 0
  1749  00F8AC  05AB               	decf	registration_ok@j& (0+255),w,b
  1750  00F8AE  A4D8               	btfss	status,2,c
  1751  00F8B0  D016               	goto	l766
  1752                           
  1753                           ; BSR set to: 0
  1754                           ;network.c: 69: matches &= str_matches((uint8_t *)&buf[(uint8_t)(i - 17)], (uint8_t *)&c
      +                          ereg_resp[0], sizeof(cereg_resp));
  1755  00F8B2  C0AC  F032         	movff	registration_ok@i,??_registration_ok
  1756  00F8B6  0EEF               	movlw	239
  1757  00F8B8  2632               	addwf	??_registration_ok,f,c
  1758  00F8BA  5032               	movf	??_registration_ok,w,c
  1759  00F8BC  0D01               	mullw	1
  1760  00F8BE  0E80               	movlw	low registration_ok@buf
  1761  00F8C0  24F3               	addwf	prodl,w,c
  1762  00F8C2  6E01               	movwf	str_matches@raw,c
  1763  00F8C4  0E00               	movlw	high registration_ok@buf
  1764  00F8C6  20F4               	addwfc	prodh,w,c
  1765  00F8C8  6E02               	movwf	str_matches@raw+1,c
  1766  00F8CA  0E77               	movlw	low registration_ok@cereg_resp
  1767  00F8CC  6E03               	movwf	str_matches@expected,c
  1768  00F8CE  0E00               	movlw	high registration_ok@cereg_resp
  1769  00F8D0  6E04               	movwf	str_matches@expected+1,c
  1770  00F8D2  0E09               	movlw	9
  1771  00F8D4  6E05               	movwf	str_matches@len,c
  1772  00F8D6  EC81  F077         	call	_str_matches	;wreg free
  1773  00F8DA                     L1:
  1774  00F8DA  0100               	movlb	0	; () banked
  1775  00F8DC  17AA               	andwf	registration_ok@matches& (0+255),f,b
  1776  00F8DE                     l766:
  1777                           
  1778                           ; BSR set to: 0
  1779                           ;network.c: 71: if (j == 0 && buf[(uint8_t)(i - 9)] == '0')
  1780                           
  1781                           ; BSR set to: 0
  1782                           
  1783                           ; BSR set to: 0
  1784  00F8DE  51AB               	movf	registration_ok@j& (0+255),w,b
  1785  00F8E0  A4D8               	btfss	status,2,c
  1786  00F8E2  D01A               	goto	l768
  1787                           
  1788                           ; BSR set to: 0
  1789  00F8E4  C0AC  F032         	movff	registration_ok@i,??_registration_ok
  1790  00F8E8  0EF7               	movlw	247
  1791  00F8EA  2632               	addwf	??_registration_ok,f,c
  1792  00F8EC  5032               	movf	??_registration_ok,w,c
  1793  00F8EE  0D01               	mullw	1
  1794  00F8F0  0E80               	movlw	low registration_ok@buf
  1795  00F8F2  24F3               	addwf	prodl,w,c
  1796  00F8F4  6ED9               	movwf	fsr2l,c
  1797  00F8F6  0E00               	movlw	high registration_ok@buf
  1798  00F8F8  20F4               	addwfc	prodh,w,c
  1799  00F8FA  6EDA               	movwf	fsr2h,c
  1800  00F8FC  0E30               	movlw	48
  1801  00F8FE  18DE               	xorwf	postinc2,w,c
  1802  00F900  A4D8               	btfss	status,2,c
  1803  00F902  D00A               	goto	l768
  1804                           
  1805                           ; BSR set to: 0
  1806                           ;network.c: 72: if (!md_uart_write_str_ok((unsigned char *)"AT+CREG=1", sizeof(creg), 1)
      +                          ){}
  1807  00F904  0EE4               	movlw	low STR_4
  1808  00F906  6E2C               	movwf	md_uart_write_str_ok@data,c
  1809  00F908  0EFF               	movlw	high STR_4
  1810  00F90A  6E2D               	movwf	md_uart_write_str_ok@data+1,c
  1811  00F90C  0E0B               	movlw	11
  1812  00F90E  6E2E               	movwf	md_uart_write_str_ok@len,c
  1813  00F910  0E01               	movlw	1
  1814  00F912  6E2F               	movwf	md_uart_write_str_ok@want_ok,c
  1815  00F914  ECEA  F077         	call	_md_uart_write_str_ok	;wreg free
  1816  00F918                     l768:
  1817                           
  1818                           ;network.c: 74: matches &= (bool)((buf[(uint8_t)(i - 7)] == '1') || (buf[(uint8_t)(i - 7
      +                          )] == '5'));
  1819  00F918  0E01               	movlw	1
  1820  00F91A  0100               	movlb	0	; () banked
  1821  00F91C  6FA8               	movwf	_registration_ok$2018& (0+255),b
  1822                           
  1823                           ; BSR set to: 0
  1824  00F91E  C0AC  F032         	movff	registration_ok@i,??_registration_ok
  1825  00F922  0EF9               	movlw	249
  1826  00F924  2632               	addwf	??_registration_ok,f,c
  1827  00F926  5032               	movf	??_registration_ok,w,c
  1828  00F928  0D01               	mullw	1
  1829  00F92A  0E80               	movlw	low registration_ok@buf
  1830  00F92C  24F3               	addwf	prodl,w,c
  1831  00F92E  6ED9               	movwf	fsr2l,c
  1832  00F930  0E00               	movlw	high registration_ok@buf
  1833  00F932  20F4               	addwfc	prodh,w,c
  1834  00F934  6EDA               	movwf	fsr2h,c
  1835  00F936  0E31               	movlw	49
  1836  00F938  18DE               	xorwf	postinc2,w,c
  1837  00F93A  B4D8               	btfsc	status,2,c
  1838  00F93C  D012               	goto	l770
  1839                           
  1840                           ; BSR set to: 0
  1841  00F93E  C0AC  F032         	movff	registration_ok@i,??_registration_ok
  1842  00F942  0EF9               	movlw	249
  1843  00F944  2632               	addwf	??_registration_ok,f,c
  1844  00F946  5032               	movf	??_registration_ok,w,c
  1845  00F948  0D01               	mullw	1
  1846  00F94A  0E80               	movlw	low registration_ok@buf
  1847  00F94C  24F3               	addwf	prodl,w,c
  1848  00F94E  6ED9               	movwf	fsr2l,c
  1849  00F950  0E00               	movlw	high registration_ok@buf
  1850  00F952  20F4               	addwfc	prodh,w,c
  1851  00F954  6EDA               	movwf	fsr2h,c
  1852  00F956  0E35               	movlw	53
  1853  00F958  18DE               	xorwf	postinc2,w,c
  1854  00F95A  B4D8               	btfsc	status,2,c
  1855  00F95C  D002               	goto	l770
  1856                           
  1857                           ; BSR set to: 0
  1858  00F95E  0E00               	movlw	0
  1859  00F960  6FA8               	movwf	_registration_ok$2018& (0+255),b
  1860  00F962                     l770:
  1861                           
  1862                           ; BSR set to: 0
  1863                           
  1864                           ; BSR set to: 0
  1865  00F962  51A8               	movf	_registration_ok$2018& (0+255),w,b
  1866  00F964  17AA               	andwf	registration_ok@matches& (0+255),f,b
  1867                           
  1868                           ; BSR set to: 0
  1869                           ;network.c: 77: i = 0;
  1870  00F966  0E00               	movlw	0
  1871  00F968  6FAC               	movwf	registration_ok@i& (0+255),b
  1872  00F96A                     l763:
  1873                           
  1874                           ; BSR set to: 0
  1875                           
  1876                           ; BSR set to: 0
  1877                           
  1878                           ; BSR set to: 0
  1879  00F96A  B2A1               	btfsc	4001,1,c	;volatile
  1880  00F96C  D004               	goto	u2580
  1881  00F96E  0100               	movlb	0	; () banked
  1882  00F970  51AA               	movf	registration_ok@matches& (0+255),w,b
  1883  00F972  B4D8               	btfsc	status,2,c
  1884  00F974  D768               	goto	l760
  1885  00F976                     u2580:
  1886                           
  1887                           ;network.c: 78: }
  1888                           ;network.c: 80: }
  1889                           ;network.c: 81: }
  1890                           ;network.c: 82: delay5ms(200);
  1891                           
  1892                           ; BSR set to: 0
  1893                           
  1894                           ; BSR set to: 0
  1895  00F976  0E00               	movlw	0
  1896  00F978  6E02               	movwf	delay5ms@cnt+1,c
  1897  00F97A  0EC8               	movlw	200
  1898  00F97C  6E01               	movwf	delay5ms@cnt,c
  1899  00F97E  EC05  F077         	call	_delay5ms	;wreg free
  1900  00F982  0100               	movlb	0	; () banked
  1901  00F984  2BAB               	incf	registration_ok@j& (0+255),f,b
  1902  00F986  D736               	goto	l3116
  1903  00F988                     u2590:
  1904                           
  1905                           ; BSR set to: 0
  1906                           ;network.c: 83: }
  1907                           ;network.c: 84: return matches;
  1908                           
  1909                           ; BSR set to: 0
  1910  00F988  51AA               	movf	registration_ok@matches& (0+255),w,b
  1911  00F98A  0012               	return	
  1912  00F98C                     __end_of_registration_ok:
  1913                           	opt stack 0
  1914                           tblptru	equ	0xFF8
  1915                           tblptrh	equ	0xFF7
  1916                           tblptrl	equ	0xFF6
  1917                           tablat	equ	0xFF5
  1918                           prodh	equ	0xFF4
  1919                           prodl	equ	0xFF3
  1920                           postinc0	equ	0xFEE
  1921                           wreg	equ	0xFE8
  1922                           postdec1	equ	0xFE5
  1923                           fsr1l	equ	0xFE1
  1924                           indf2	equ	0xFDF
  1925                           postinc2	equ	0xFDE
  1926                           fsr2h	equ	0xFDA
  1927                           fsr2l	equ	0xFD9
  1928                           status	equ	0xFD8
  1929                           
  1930 ;; *************** function _md_io_setup_ok *****************
  1931 ;; Defined at:
  1932 ;;		line 119 in file "module.c"
  1933 ;; Parameters:    Size  Location     Type
  1934 ;;		None
  1935 ;; Auto vars:     Size  Location     Type
  1936 ;;		None
  1937 ;; Return value:  Size  Location     Type
  1938 ;;                  1    wreg      unsigned char 
  1939 ;; Registers used:
  1940 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1941 ;; Tracked objects:
  1942 ;;		On entry : 0/0
  1943 ;;		On exit  : 0/0
  1944 ;;		Unchanged: 0/0
  1945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1949 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1950 ;;Total ram usage:        0 bytes
  1951 ;; Hardware stack levels used:    1
  1952 ;; Hardware stack levels required when called:    5
  1953 ;; This function calls:
  1954 ;;		_init_modem_ok
  1955 ;;		_is_first_run
  1956 ;;		_save_first_run
  1957 ;;		_sim_card_ok
  1958 ;;		_write_defaults
  1959 ;; This function is called by:
  1960 ;;		_startup_md_ok
  1961 ;; This function uses a non-reentrant model
  1962 ;;
  1963                           
  1964                           	psect	text3
  1965  00EE94                     __ptext3:
  1966                           	opt stack 0
  1967  00EE94                     _md_io_setup_ok:
  1968                           	opt stack 24
  1969                           
  1970                           ;module.c: 121: if(is_first_run())
  1971                           
  1972                           ;incstack = 0
  1973  00EE94  ECC6  F076         	call	_is_first_run	;wreg free
  1974  00EE98  0900               	iorlw	0
  1975  00EE9A  B4D8               	btfsc	status,2,c
  1976  00EE9C  D00B               	goto	l473
  1977                           
  1978                           ;module.c: 122: {
  1979                           ;module.c: 123: write_defaults();
  1980  00EE9E  ECC6  F07C         	call	_write_defaults	;wreg free
  1981                           
  1982                           ;module.c: 124: if (!init_modem_ok())
  1983  00EEA2  ECFC  F07A         	call	_init_modem_ok	;wreg free
  1984  00EEA6  0900               	iorlw	0
  1985  00EEA8  A4D8               	btfss	status,2,c
  1986  00EEAA  D002               	goto	l474
  1987                           
  1988                           ;module.c: 125: return 0;
  1989  00EEAC  0E00               	movlw	0
  1990  00EEAE  0012               	return	
  1991  00EEB0                     l474:
  1992                           
  1993                           ;module.c: 126: save_first_run();
  1994  00EEB0  ECB3  F076         	call	_save_first_run	;wreg free
  1995  00EEB4                     l473:
  1996                           
  1997                           ;module.c: 127: }
  1998                           ;module.c: 128: if (sim_card_ok())
  1999  00EEB4  ECB9  F078         	call	_sim_card_ok	;wreg free
  2000  00EEB8  0900               	iorlw	0
  2001  00EEBA  B4D8               	btfsc	status,2,c
  2002  00EEBC  D002               	goto	l476
  2003                           
  2004                           ;module.c: 129: return 1;
  2005  00EEBE  0E01               	movlw	1
  2006  00EEC0  0012               	return	
  2007  00EEC2                     l476:
  2008                           
  2009                           ;module.c: 130: return 0;
  2010  00EEC2  0E00               	movlw	0
  2011  00EEC4  0012               	return	
  2012  00EEC6                     __end_of_md_io_setup_ok:
  2013                           	opt stack 0
  2014                           tblptru	equ	0xFF8
  2015                           tblptrh	equ	0xFF7
  2016                           tblptrl	equ	0xFF6
  2017                           tablat	equ	0xFF5
  2018                           prodh	equ	0xFF4
  2019                           prodl	equ	0xFF3
  2020                           postinc0	equ	0xFEE
  2021                           wreg	equ	0xFE8
  2022                           postdec1	equ	0xFE5
  2023                           fsr1l	equ	0xFE1
  2024                           indf2	equ	0xFDF
  2025                           postinc2	equ	0xFDE
  2026                           fsr2h	equ	0xFDA
  2027                           fsr2l	equ	0xFD9
  2028                           status	equ	0xFD8
  2029                           
  2030 ;; *************** function _write_defaults *****************
  2031 ;; Defined at:
  2032 ;;		line 18 in file "setup.c"
  2033 ;; Parameters:    Size  Location     Type
  2034 ;;		None
  2035 ;; Auto vars:     Size  Location     Type
  2036 ;;  i               1    8[COMRAM] unsigned char 
  2037 ;;  page            1    7[COMRAM] unsigned char 
  2038 ;;  temp            1    6[COMRAM] unsigned char 
  2039 ;;  addr            1    5[COMRAM] unsigned char 
  2040 ;; Return value:  Size  Location     Type
  2041 ;;                  1    wreg      void 
  2042 ;; Registers used:
  2043 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2044 ;; Tracked objects:
  2045 ;;		On entry : 0/0
  2046 ;;		On exit  : 0/0
  2047 ;;		Unchanged: 0/0
  2048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2050 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2051 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2052 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2053 ;;Total ram usage:        6 bytes
  2054 ;; Hardware stack levels used:    1
  2055 ;; Hardware stack levels required when called:    1
  2056 ;; This function calls:
  2057 ;;		_ee_read
  2058 ;;		_ee_write
  2059 ;; This function is called by:
  2060 ;;		_md_io_setup_ok
  2061 ;; This function uses a non-reentrant model
  2062 ;;
  2063                           
  2064                           	psect	text4
  2065  00F98C                     __ptext4:
  2066                           	opt stack 0
  2067  00F98C                     _write_defaults:
  2068                           	opt stack 27
  2069                           
  2070                           ;setup.c: 20: saveINTCONbits = INTCON;
  2071                           
  2072                           ;incstack = 0
  2073  00F98C  CFF2 F0FA          	movff	intcon,_saveINTCONbits	;volatile
  2074                           
  2075                           ;setup.c: 21: INTCONbits.GIE = 0;
  2076  00F990  9EF2               	bcf	intcon,7,c	;volatile
  2077                           
  2078                           ;setup.c: 22: INTCONbits.GIEH = 0;
  2079  00F992  9EF2               	bcf	intcon,7,c	;volatile
  2080                           
  2081                           ;setup.c: 23: INTCONbits.GIEL = 0;
  2082  00F994  9CF2               	bcf	intcon,6,c	;volatile
  2083                           
  2084                           ;setup.c: 25: uint8_t page, addr, i, temp;
  2085                           ;setup.c: 28: if( ee_read(0, 0x00)==VERSION[0] )
  2086  00F996  0E00               	movlw	0
  2087  00F998  6E01               	movwf	ee_read@addr,c
  2088  00F99A  0E00               	movlw	0
  2089  00F99C  ECD2  F076         	call	_ee_read
  2090  00F9A0  6E04               	movwf	??_write_defaults& (0+255),c
  2091  00F9A2  0E3D               	movlw	low _VERSION
  2092  00F9A4  6EF6               	movwf	tblptrl,c
  2093  00F9A6                     	if	1	;There is more than 1 active tblptr byte
  2094  00F9A6  0EFF               	movlw	high _VERSION
  2095  00F9A8  6EF7               	movwf	tblptrh,c
  2096  00F9AA                     	endif
  2097  00F9AA                     	if	0	;There are less than 3 active tblptr bytes
  2098  00F9AA                     	endif
  2099  00F9AA  0008               	tblrd		*
  2100  00F9AC  50F5               	movf	tablat,w,c
  2101  00F9AE  1804               	xorwf	??_write_defaults,w,c
  2102  00F9B0  A4D8               	btfss	status,2,c
  2103  00F9B2  D01E               	goto	l595
  2104                           
  2105                           ;setup.c: 29: {
  2106                           ;setup.c: 30: if( ee_read(0, 0x01)==VERSION[1] )
  2107  00F9B4  0E01               	movlw	1
  2108  00F9B6  6E01               	movwf	ee_read@addr,c
  2109  00F9B8  0E00               	movlw	0
  2110  00F9BA  ECD2  F076         	call	_ee_read
  2111  00F9BE  6E04               	movwf	??_write_defaults& (0+255),c
  2112  00F9C0  0E3E               	movlw	low (_VERSION+1)
  2113  00F9C2  6EF6               	movwf	tblptrl,c
  2114  00F9C4  0EFF               	movlw	high (_VERSION+1)
  2115  00F9C6  6EF7               	movwf	tblptrh,c
  2116  00F9C8                     	if	0	;tblptru may be non-zero
  2117  00F9C8                     	endif
  2118  00F9C8                     	if	0	;tblptru may be non-zero
  2119  00F9C8                     	endif
  2120  00F9C8  0008               	tblrd		*
  2121  00F9CA  50F5               	movf	tablat,w,c
  2122  00F9CC  1804               	xorwf	??_write_defaults,w,c
  2123  00F9CE  A4D8               	btfss	status,2,c
  2124  00F9D0  D00F               	goto	l595
  2125                           
  2126                           ;setup.c: 31: {
  2127                           ;setup.c: 32: if( ee_read(0, 0x02)==VERSION[2] )
  2128  00F9D2  0E02               	movlw	2
  2129  00F9D4  6E01               	movwf	ee_read@addr,c
  2130  00F9D6  0E00               	movlw	0
  2131  00F9D8  ECD2  F076         	call	_ee_read
  2132  00F9DC  6E04               	movwf	??_write_defaults& (0+255),c
  2133  00F9DE  0E3F               	movlw	low (_VERSION+2)
  2134  00F9E0  6EF6               	movwf	tblptrl,c
  2135  00F9E2  0EFF               	movlw	high (_VERSION+2)
  2136  00F9E4  6EF7               	movwf	tblptrh,c
  2137  00F9E6                     	if	0	;tblptru may be non-zero
  2138  00F9E6                     	endif
  2139  00F9E6                     	if	0	;tblptru may be non-zero
  2140  00F9E6                     	endif
  2141  00F9E6  0008               	tblrd		*
  2142  00F9E8  50F5               	movf	tablat,w,c
  2143  00F9EA  1804               	xorwf	??_write_defaults,w,c
  2144  00F9EC  B4D8               	btfsc	status,2,c
  2145  00F9EE  0012               	return	
  2146  00F9F0                     l595:
  2147                           
  2148                           ;setup.c: 34: }
  2149                           ;setup.c: 35: }
  2150                           ;setup.c: 38: page = 0x00;
  2151  00F9F0  0E00               	movlw	0
  2152  00F9F2  6E08               	movwf	write_defaults@page,c
  2153                           
  2154                           ;setup.c: 39: addr = 0x10;
  2155  00F9F4  0E10               	movlw	16
  2156  00F9F6  6E06               	movwf	write_defaults@addr,c
  2157                           
  2158                           ;setup.c: 40: i = 0;
  2159  00F9F8  0E00               	movlw	0
  2160  00F9FA  6E09               	movwf	write_defaults@i,c
  2161                           
  2162                           ;setup.c: 41: while (i++ < 0x20 && temp != '#')
  2163  00F9FC  D013               	goto	l597
  2164  00F9FE                     
  2165                           ;setup.c: 42: {
  2166                           ;setup.c: 43: temp = APN[i];
  2167  00F9FE  5009               	movf	write_defaults@i,w,c
  2168  00FA00  0D01               	mullw	1
  2169  00FA02  0E55               	movlw	low _APN
  2170  00FA04  24F3               	addwf	prodl,w,c
  2171  00FA06  6EF6               	movwf	tblptrl,c
  2172  00FA08  0EFF               	movlw	high _APN
  2173  00FA0A  20F4               	addwfc	prodh,w,c
  2174  00FA0C  6EF7               	movwf	tblptrh,c
  2175  00FA0E                     	if	0	;There are less than 3 active tblptr bytes
  2176  00FA0E                     	endif
  2177  00FA0E  0008               	tblrd		*
  2178  00FA10  CFF5 F007          	movff	tablat,write_defaults@temp
  2179                           
  2180                           ;setup.c: 44: ee_write(page, (uint8_t)(addr + i), temp);
  2181  00FA14  5006               	movf	write_defaults@addr,w,c
  2182  00FA16  2409               	addwf	write_defaults@i,w,c
  2183  00FA18  6E01               	movwf	ee_write@addr,c
  2184  00FA1A  C007  F002         	movff	write_defaults@temp,ee_write@data
  2185  00FA1E  5008               	movf	write_defaults@page,w,c
  2186  00FA20  EC1A  F077         	call	_ee_write
  2187  00FA24                     l597:
  2188  00FA24  2A09               	incf	write_defaults@i,f,c
  2189  00FA26  0409               	decf	write_defaults@i,w,c
  2190  00FA28  6E04               	movwf	??_write_defaults& (0+255),c
  2191  00FA2A  0E20               	movlw	32
  2192  00FA2C  6004               	cpfslt	??_write_defaults,c
  2193  00FA2E  D004               	goto	u1960
  2194  00FA30  0E23               	movlw	35
  2195  00FA32  1807               	xorwf	write_defaults@temp,w,c
  2196  00FA34  A4D8               	btfss	status,2,c
  2197  00FA36  D7E3               	goto	l598
  2198  00FA38                     u1960:
  2199                           
  2200                           ;setup.c: 45: }
  2201                           ;setup.c: 47: page = 0x00;
  2202  00FA38  0E00               	movlw	0
  2203  00FA3A  6E08               	movwf	write_defaults@page,c
  2204                           
  2205                           ;setup.c: 48: addr = 0x30;
  2206  00FA3C  0E30               	movlw	48
  2207  00FA3E  6E06               	movwf	write_defaults@addr,c
  2208                           
  2209                           ;setup.c: 49: temp = 0x00;
  2210  00FA40  0E00               	movlw	0
  2211  00FA42  6E07               	movwf	write_defaults@temp,c
  2212                           
  2213                           ;setup.c: 50: i = 0;
  2214  00FA44  0E00               	movlw	0
  2215  00FA46  6E09               	movwf	write_defaults@i,c
  2216                           
  2217                           ;setup.c: 51: while (temp != '#')
  2218  00FA48  D014               	goto	l602
  2219  00FA4A                     
  2220                           ;setup.c: 52: {
  2221                           ;setup.c: 53: temp = IP1[i];
  2222  00FA4A  5009               	movf	write_defaults@i,w,c
  2223  00FA4C  0D01               	mullw	1
  2224  00FA4E  0E53               	movlw	low _IP1
  2225  00FA50  24F3               	addwf	prodl,w,c
  2226  00FA52  6EF6               	movwf	tblptrl,c
  2227  00FA54  0EFF               	movlw	high _IP1
  2228  00FA56  20F4               	addwfc	prodh,w,c
  2229  00FA58  6EF7               	movwf	tblptrh,c
  2230  00FA5A                     	if	0	;There are less than 3 active tblptr bytes
  2231  00FA5A                     	endif
  2232  00FA5A  0008               	tblrd		*
  2233  00FA5C  CFF5 F007          	movff	tablat,write_defaults@temp
  2234                           
  2235                           ;setup.c: 54: ee_write(page, (uint8_t)(addr + i), temp);
  2236  00FA60  5006               	movf	write_defaults@addr,w,c
  2237  00FA62  2409               	addwf	write_defaults@i,w,c
  2238  00FA64  6E01               	movwf	ee_write@addr,c
  2239  00FA66  C007  F002         	movff	write_defaults@temp,ee_write@data
  2240  00FA6A  5008               	movf	write_defaults@page,w,c
  2241  00FA6C  EC1A  F077         	call	_ee_write
  2242                           
  2243                           ;setup.c: 55: i++;
  2244  00FA70  2A09               	incf	write_defaults@i,f,c
  2245  00FA72                     l602:
  2246  00FA72  0E23               	movlw	35
  2247  00FA74  1807               	xorwf	write_defaults@temp,w,c
  2248  00FA76  A4D8               	btfss	status,2,c
  2249  00FA78  D7E8               	goto	l603
  2250                           
  2251                           ;setup.c: 56: }
  2252                           ;setup.c: 58: page = 0x00;
  2253  00FA7A  0E00               	movlw	0
  2254  00FA7C  6E08               	movwf	write_defaults@page,c
  2255                           
  2256                           ;setup.c: 59: addr = 0x50;
  2257  00FA7E  0E50               	movlw	80
  2258  00FA80  6E06               	movwf	write_defaults@addr,c
  2259                           
  2260                           ;setup.c: 60: temp = 0x00;
  2261  00FA82  0E00               	movlw	0
  2262  00FA84  6E07               	movwf	write_defaults@temp,c
  2263                           
  2264                           ;setup.c: 61: i = 0;
  2265  00FA86  0E00               	movlw	0
  2266  00FA88  6E09               	movwf	write_defaults@i,c
  2267                           
  2268                           ;setup.c: 62: while (temp != '#')
  2269  00FA8A  D014               	goto	l605
  2270  00FA8C                     
  2271                           ;setup.c: 63: {
  2272                           ;setup.c: 64: temp = IP2[i];
  2273  00FA8C  5009               	movf	write_defaults@i,w,c
  2274  00FA8E  0D01               	mullw	1
  2275  00FA90  0E51               	movlw	low _IP2
  2276  00FA92  24F3               	addwf	prodl,w,c
  2277  00FA94  6EF6               	movwf	tblptrl,c
  2278  00FA96  0EFF               	movlw	high _IP2
  2279  00FA98  20F4               	addwfc	prodh,w,c
  2280  00FA9A  6EF7               	movwf	tblptrh,c
  2281  00FA9C                     	if	0	;There are less than 3 active tblptr bytes
  2282  00FA9C                     	endif
  2283  00FA9C  0008               	tblrd		*
  2284  00FA9E  CFF5 F007          	movff	tablat,write_defaults@temp
  2285                           
  2286                           ;setup.c: 65: ee_write(page, (uint8_t)(addr + i), temp);
  2287  00FAA2  5006               	movf	write_defaults@addr,w,c
  2288  00FAA4  2409               	addwf	write_defaults@i,w,c
  2289  00FAA6  6E01               	movwf	ee_write@addr,c
  2290  00FAA8  C007  F002         	movff	write_defaults@temp,ee_write@data
  2291  00FAAC  5008               	movf	write_defaults@page,w,c
  2292  00FAAE  EC1A  F077         	call	_ee_write
  2293                           
  2294                           ;setup.c: 66: i++;
  2295  00FAB2  2A09               	incf	write_defaults@i,f,c
  2296  00FAB4                     l605:
  2297  00FAB4  0E23               	movlw	35
  2298  00FAB6  1807               	xorwf	write_defaults@temp,w,c
  2299  00FAB8  A4D8               	btfss	status,2,c
  2300  00FABA  D7E8               	goto	l606
  2301                           
  2302                           ;setup.c: 67: }
  2303                           ;setup.c: 69: page = 0x00;
  2304  00FABC  0E00               	movlw	0
  2305  00FABE  6E08               	movwf	write_defaults@page,c
  2306                           
  2307                           ;setup.c: 70: addr = 0x70;
  2308  00FAC0  0E70               	movlw	112
  2309  00FAC2  6E06               	movwf	write_defaults@addr,c
  2310                           
  2311                           ;setup.c: 71: temp = 0x00;
  2312  00FAC4  0E00               	movlw	0
  2313  00FAC6  6E07               	movwf	write_defaults@temp,c
  2314                           
  2315                           ;setup.c: 72: i = 0;
  2316  00FAC8  0E00               	movlw	0
  2317  00FACA  6E09               	movwf	write_defaults@i,c
  2318                           
  2319                           ;setup.c: 73: while (temp != '#')
  2320  00FACC  D014               	goto	l608
  2321  00FACE                     
  2322                           ;setup.c: 74: {
  2323                           ;setup.c: 75: temp = IP3[i];
  2324  00FACE  5009               	movf	write_defaults@i,w,c
  2325  00FAD0  0D01               	mullw	1
  2326  00FAD2  0E4F               	movlw	low _IP3
  2327  00FAD4  24F3               	addwf	prodl,w,c
  2328  00FAD6  6EF6               	movwf	tblptrl,c
  2329  00FAD8  0EFF               	movlw	high _IP3
  2330  00FADA  20F4               	addwfc	prodh,w,c
  2331  00FADC  6EF7               	movwf	tblptrh,c
  2332  00FADE                     	if	0	;There are less than 3 active tblptr bytes
  2333  00FADE                     	endif
  2334  00FADE  0008               	tblrd		*
  2335  00FAE0  CFF5 F007          	movff	tablat,write_defaults@temp
  2336                           
  2337                           ;setup.c: 76: ee_write(page, (uint8_t)(addr + i), temp);
  2338  00FAE4  5006               	movf	write_defaults@addr,w,c
  2339  00FAE6  2409               	addwf	write_defaults@i,w,c
  2340  00FAE8  6E01               	movwf	ee_write@addr,c
  2341  00FAEA  C007  F002         	movff	write_defaults@temp,ee_write@data
  2342  00FAEE  5008               	movf	write_defaults@page,w,c
  2343  00FAF0  EC1A  F077         	call	_ee_write
  2344                           
  2345                           ;setup.c: 77: i++;
  2346  00FAF4  2A09               	incf	write_defaults@i,f,c
  2347  00FAF6                     l608:
  2348  00FAF6  0E23               	movlw	35
  2349  00FAF8  1807               	xorwf	write_defaults@temp,w,c
  2350  00FAFA  A4D8               	btfss	status,2,c
  2351  00FAFC  D7E8               	goto	l609
  2352                           
  2353                           ;setup.c: 78: }
  2354                           ;setup.c: 80: page = 0x00;
  2355  00FAFE  0E00               	movlw	0
  2356  00FB00  6E08               	movwf	write_defaults@page,c
  2357                           
  2358                           ;setup.c: 81: addr = 0x90;
  2359  00FB02  0E90               	movlw	144
  2360  00FB04  6E06               	movwf	write_defaults@addr,c
  2361                           
  2362                           ;setup.c: 82: temp = 0x00;
  2363  00FB06  0E00               	movlw	0
  2364  00FB08  6E07               	movwf	write_defaults@temp,c
  2365                           
  2366                           ;setup.c: 83: i = 0;
  2367  00FB0A  0E00               	movlw	0
  2368  00FB0C  6E09               	movwf	write_defaults@i,c
  2369                           
  2370                           ;setup.c: 84: while (temp != '#')
  2371  00FB0E  D014               	goto	l611
  2372  00FB10                     
  2373                           ;setup.c: 85: {
  2374                           ;setup.c: 86: temp = IP4[i];
  2375  00FB10  5009               	movf	write_defaults@i,w,c
  2376  00FB12  0D01               	mullw	1
  2377  00FB14  0E4D               	movlw	low _IP4
  2378  00FB16  24F3               	addwf	prodl,w,c
  2379  00FB18  6EF6               	movwf	tblptrl,c
  2380  00FB1A  0EFF               	movlw	high _IP4
  2381  00FB1C  20F4               	addwfc	prodh,w,c
  2382  00FB1E  6EF7               	movwf	tblptrh,c
  2383  00FB20                     	if	0	;There are less than 3 active tblptr bytes
  2384  00FB20                     	endif
  2385  00FB20  0008               	tblrd		*
  2386  00FB22  CFF5 F007          	movff	tablat,write_defaults@temp
  2387                           
  2388                           ;setup.c: 87: ee_write(page, (uint8_t)(addr + i), temp);
  2389  00FB26  5006               	movf	write_defaults@addr,w,c
  2390  00FB28  2409               	addwf	write_defaults@i,w,c
  2391  00FB2A  6E01               	movwf	ee_write@addr,c
  2392  00FB2C  C007  F002         	movff	write_defaults@temp,ee_write@data
  2393  00FB30  5008               	movf	write_defaults@page,w,c
  2394  00FB32  EC1A  F077         	call	_ee_write
  2395                           
  2396                           ;setup.c: 88: i++;
  2397  00FB36  2A09               	incf	write_defaults@i,f,c
  2398  00FB38                     l611:
  2399  00FB38  0E23               	movlw	35
  2400  00FB3A  1807               	xorwf	write_defaults@temp,w,c
  2401  00FB3C  A4D8               	btfss	status,2,c
  2402  00FB3E  D7E8               	goto	l612
  2403                           
  2404                           ;setup.c: 89: }
  2405                           ;setup.c: 92: page = 0x00;
  2406  00FB40  0E00               	movlw	0
  2407  00FB42  6E08               	movwf	write_defaults@page,c
  2408                           
  2409                           ;setup.c: 93: addr = 0xB0;
  2410  00FB44  0EB0               	movlw	176
  2411  00FB46  6E06               	movwf	write_defaults@addr,c
  2412                           
  2413                           ;setup.c: 94: ee_write(page, addr, (PORT1 >> 8));
  2414  00FB48  C006  F001         	movff	write_defaults@addr,ee_write@addr
  2415  00FB4C  0E4B               	movlw	low _PORT1
  2416  00FB4E  6EF6               	movwf	tblptrl,c
  2417  00FB50                     	if	1	;There is more than 1 active tblptr byte
  2418  00FB50  0EFF               	movlw	high _PORT1
  2419  00FB52  6EF7               	movwf	tblptrh,c
  2420  00FB54                     	endif
  2421  00FB54                     	if	0	;There are less than 3 active tblptr bytes
  2422  00FB54                     	endif
  2423  00FB54  0009               	tblrd		*+
  2424  00FB56  CFF5 F004          	movff	tablat,??_write_defaults
  2425  00FB5A  0009               	tblrd		*+
  2426  00FB5C  CFF5 F005          	movff	tablat,??_write_defaults+1
  2427  00FB60  C005  F004         	movff	??_write_defaults+1,??_write_defaults
  2428  00FB64  6A05               	clrf	??_write_defaults+1,c
  2429  00FB66  5004               	movf	??_write_defaults,w,c
  2430  00FB68  6E02               	movwf	ee_write@data,c
  2431  00FB6A  5008               	movf	write_defaults@page,w,c
  2432  00FB6C  EC1A  F077         	call	_ee_write
  2433                           
  2434                           ;setup.c: 95: ee_write(page, (uint8_t)(addr + 1), (PORT1 & 0x00FF));
  2435  00FB70  2806               	incf	write_defaults@addr,w,c
  2436  00FB72  6E01               	movwf	ee_write@addr,c
  2437  00FB74  0E4B               	movlw	low _PORT1
  2438  00FB76  6EF6               	movwf	tblptrl,c
  2439  00FB78                     	if	1	;There is more than 1 active tblptr byte
  2440  00FB78  0EFF               	movlw	high _PORT1
  2441  00FB7A  6EF7               	movwf	tblptrh,c
  2442  00FB7C                     	endif
  2443  00FB7C                     	if	0	;There are less than 3 active tblptr bytes
  2444  00FB7C                     	endif
  2445  00FB7C  0008               	tblrd		*
  2446  00FB7E  CFF5 F002          	movff	tablat,ee_write@data
  2447  00FB82  5008               	movf	write_defaults@page,w,c
  2448  00FB84  EC1A  F077         	call	_ee_write
  2449                           
  2450                           ;setup.c: 97: page = 0x00;
  2451  00FB88  0E00               	movlw	0
  2452  00FB8A  6E08               	movwf	write_defaults@page,c
  2453                           
  2454                           ;setup.c: 98: addr = 0xB2;
  2455  00FB8C  0EB2               	movlw	178
  2456  00FB8E  6E06               	movwf	write_defaults@addr,c
  2457                           
  2458                           ;setup.c: 99: ee_write(page, addr, (PORT2 >> 8));
  2459  00FB90  C006  F001         	movff	write_defaults@addr,ee_write@addr
  2460  00FB94  0E49               	movlw	low _PORT2
  2461  00FB96  6EF6               	movwf	tblptrl,c
  2462  00FB98                     	if	1	;There is more than 1 active tblptr byte
  2463  00FB98  0EFF               	movlw	high _PORT2
  2464  00FB9A  6EF7               	movwf	tblptrh,c
  2465  00FB9C                     	endif
  2466  00FB9C                     	if	0	;There are less than 3 active tblptr bytes
  2467  00FB9C                     	endif
  2468  00FB9C  0009               	tblrd		*+
  2469  00FB9E  CFF5 F004          	movff	tablat,??_write_defaults
  2470  00FBA2  0009               	tblrd		*+
  2471  00FBA4  CFF5 F005          	movff	tablat,??_write_defaults+1
  2472  00FBA8  C005  F004         	movff	??_write_defaults+1,??_write_defaults
  2473  00FBAC  6A05               	clrf	??_write_defaults+1,c
  2474  00FBAE  5004               	movf	??_write_defaults,w,c
  2475  00FBB0  6E02               	movwf	ee_write@data,c
  2476  00FBB2  5008               	movf	write_defaults@page,w,c
  2477  00FBB4  EC1A  F077         	call	_ee_write
  2478                           
  2479                           ;setup.c: 100: ee_write(page, (uint8_t)(addr + 1), (PORT2 & 0x00FF));
  2480  00FBB8  2806               	incf	write_defaults@addr,w,c
  2481  00FBBA  6E01               	movwf	ee_write@addr,c
  2482  00FBBC  0E49               	movlw	low _PORT2
  2483  00FBBE  6EF6               	movwf	tblptrl,c
  2484  00FBC0                     	if	1	;There is more than 1 active tblptr byte
  2485  00FBC0  0EFF               	movlw	high _PORT2
  2486  00FBC2  6EF7               	movwf	tblptrh,c
  2487  00FBC4                     	endif
  2488  00FBC4                     	if	0	;There are less than 3 active tblptr bytes
  2489  00FBC4                     	endif
  2490  00FBC4  0008               	tblrd		*
  2491  00FBC6  CFF5 F002          	movff	tablat,ee_write@data
  2492  00FBCA  5008               	movf	write_defaults@page,w,c
  2493  00FBCC  EC1A  F077         	call	_ee_write
  2494                           
  2495                           ;setup.c: 102: page = 0x00;
  2496  00FBD0  0E00               	movlw	0
  2497  00FBD2  6E08               	movwf	write_defaults@page,c
  2498                           
  2499                           ;setup.c: 103: addr = 0xB4;
  2500  00FBD4  0EB4               	movlw	180
  2501  00FBD6  6E06               	movwf	write_defaults@addr,c
  2502                           
  2503                           ;setup.c: 104: ee_write(page, addr, (PORT3 >> 8));
  2504  00FBD8  C006  F001         	movff	write_defaults@addr,ee_write@addr
  2505  00FBDC  0E47               	movlw	low _PORT3
  2506  00FBDE  6EF6               	movwf	tblptrl,c
  2507  00FBE0                     	if	1	;There is more than 1 active tblptr byte
  2508  00FBE0  0EFF               	movlw	high _PORT3
  2509  00FBE2  6EF7               	movwf	tblptrh,c
  2510  00FBE4                     	endif
  2511  00FBE4                     	if	0	;There are less than 3 active tblptr bytes
  2512  00FBE4                     	endif
  2513  00FBE4  0009               	tblrd		*+
  2514  00FBE6  CFF5 F004          	movff	tablat,??_write_defaults
  2515  00FBEA  0009               	tblrd		*+
  2516  00FBEC  CFF5 F005          	movff	tablat,??_write_defaults+1
  2517  00FBF0  C005  F004         	movff	??_write_defaults+1,??_write_defaults
  2518  00FBF4  6A05               	clrf	??_write_defaults+1,c
  2519  00FBF6  5004               	movf	??_write_defaults,w,c
  2520  00FBF8  6E02               	movwf	ee_write@data,c
  2521  00FBFA  5008               	movf	write_defaults@page,w,c
  2522  00FBFC  EC1A  F077         	call	_ee_write
  2523                           
  2524                           ;setup.c: 105: ee_write(page, (uint8_t)(addr + 1), (PORT3 & 0x00FF));
  2525  00FC00  2806               	incf	write_defaults@addr,w,c
  2526  00FC02  6E01               	movwf	ee_write@addr,c
  2527  00FC04  0E47               	movlw	low _PORT3
  2528  00FC06  6EF6               	movwf	tblptrl,c
  2529  00FC08                     	if	1	;There is more than 1 active tblptr byte
  2530  00FC08  0EFF               	movlw	high _PORT3
  2531  00FC0A  6EF7               	movwf	tblptrh,c
  2532  00FC0C                     	endif
  2533  00FC0C                     	if	0	;There are less than 3 active tblptr bytes
  2534  00FC0C                     	endif
  2535  00FC0C  0008               	tblrd		*
  2536  00FC0E  CFF5 F002          	movff	tablat,ee_write@data
  2537  00FC12  5008               	movf	write_defaults@page,w,c
  2538  00FC14  EC1A  F077         	call	_ee_write
  2539                           
  2540                           ;setup.c: 107: page = 0x00;
  2541  00FC18  0E00               	movlw	0
  2542  00FC1A  6E08               	movwf	write_defaults@page,c
  2543                           
  2544                           ;setup.c: 108: addr = 0xB6;
  2545  00FC1C  0EB6               	movlw	182
  2546  00FC1E  6E06               	movwf	write_defaults@addr,c
  2547                           
  2548                           ;setup.c: 109: ee_write(page, addr, (PORT4 >> 8));
  2549  00FC20  C006  F001         	movff	write_defaults@addr,ee_write@addr
  2550  00FC24  0E45               	movlw	low _PORT4
  2551  00FC26  6EF6               	movwf	tblptrl,c
  2552  00FC28                     	if	1	;There is more than 1 active tblptr byte
  2553  00FC28  0EFF               	movlw	high _PORT4
  2554  00FC2A  6EF7               	movwf	tblptrh,c
  2555  00FC2C                     	endif
  2556  00FC2C                     	if	0	;There are less than 3 active tblptr bytes
  2557  00FC2C                     	endif
  2558  00FC2C  0009               	tblrd		*+
  2559  00FC2E  CFF5 F004          	movff	tablat,??_write_defaults
  2560  00FC32  0009               	tblrd		*+
  2561  00FC34  CFF5 F005          	movff	tablat,??_write_defaults+1
  2562  00FC38  C005  F004         	movff	??_write_defaults+1,??_write_defaults
  2563  00FC3C  6A05               	clrf	??_write_defaults+1,c
  2564  00FC3E  5004               	movf	??_write_defaults,w,c
  2565  00FC40  6E02               	movwf	ee_write@data,c
  2566  00FC42  5008               	movf	write_defaults@page,w,c
  2567  00FC44  EC1A  F077         	call	_ee_write
  2568                           
  2569                           ;setup.c: 110: ee_write(page, (uint8_t)(addr + 1), (PORT4 & 0x00FF));
  2570  00FC48  2806               	incf	write_defaults@addr,w,c
  2571  00FC4A  6E01               	movwf	ee_write@addr,c
  2572  00FC4C  0E45               	movlw	low _PORT4
  2573  00FC4E  6EF6               	movwf	tblptrl,c
  2574  00FC50                     	if	1	;There is more than 1 active tblptr byte
  2575  00FC50  0EFF               	movlw	high _PORT4
  2576  00FC52  6EF7               	movwf	tblptrh,c
  2577  00FC54                     	endif
  2578  00FC54                     	if	0	;There are less than 3 active tblptr bytes
  2579  00FC54                     	endif
  2580  00FC54  0008               	tblrd		*
  2581  00FC56  CFF5 F002          	movff	tablat,ee_write@data
  2582  00FC5A  5008               	movf	write_defaults@page,w,c
  2583  00FC5C  EC1A  F077         	call	_ee_write
  2584                           
  2585                           ;setup.c: 113: page = 0x00;
  2586  00FC60  0E00               	movlw	0
  2587  00FC62  6E08               	movwf	write_defaults@page,c
  2588                           
  2589                           ;setup.c: 114: addr = 0xC0;
  2590  00FC64  0EC0               	movlw	192
  2591  00FC66  6E06               	movwf	write_defaults@addr,c
  2592                           
  2593                           ;setup.c: 115: temp = 0x00;
  2594  00FC68  0E00               	movlw	0
  2595  00FC6A  6E07               	movwf	write_defaults@temp,c
  2596                           
  2597                           ;setup.c: 116: i = 0;
  2598  00FC6C  0E00               	movlw	0
  2599  00FC6E  6E09               	movwf	write_defaults@i,c
  2600                           
  2601                           ;setup.c: 117: while (temp != '#')
  2602  00FC70  D014               	goto	l614
  2603  00FC72                     
  2604                           ;setup.c: 118: {
  2605                           ;setup.c: 119: temp = ACCESS_CODE[i];
  2606  00FC72  5009               	movf	write_defaults@i,w,c
  2607  00FC74  0D01               	mullw	1
  2608  00FC76  0E37               	movlw	low _ACCESS_CODE
  2609  00FC78  24F3               	addwf	prodl,w,c
  2610  00FC7A  6EF6               	movwf	tblptrl,c
  2611  00FC7C  0EFF               	movlw	high _ACCESS_CODE
  2612  00FC7E  20F4               	addwfc	prodh,w,c
  2613  00FC80  6EF7               	movwf	tblptrh,c
  2614  00FC82                     	if	0	;There are less than 3 active tblptr bytes
  2615  00FC82                     	endif
  2616  00FC82  0008               	tblrd		*
  2617  00FC84  CFF5 F007          	movff	tablat,write_defaults@temp
  2618                           
  2619                           ;setup.c: 120: ee_write(page, (uint8_t)(addr + i), temp);
  2620  00FC88  5006               	movf	write_defaults@addr,w,c
  2621  00FC8A  2409               	addwf	write_defaults@i,w,c
  2622  00FC8C  6E01               	movwf	ee_write@addr,c
  2623  00FC8E  C007  F002         	movff	write_defaults@temp,ee_write@data
  2624  00FC92  5008               	movf	write_defaults@page,w,c
  2625  00FC94  EC1A  F077         	call	_ee_write
  2626                           
  2627                           ;setup.c: 121: i ++;
  2628  00FC98  2A09               	incf	write_defaults@i,f,c
  2629  00FC9A                     l614:
  2630  00FC9A  0E23               	movlw	35
  2631  00FC9C  1807               	xorwf	write_defaults@temp,w,c
  2632  00FC9E  A4D8               	btfss	status,2,c
  2633  00FCA0  D7E8               	goto	l615
  2634                           
  2635                           ;setup.c: 122: }
  2636                           ;setup.c: 125: ee_write(0x00, 0xC7, PROGRAM_ACK);
  2637  00FCA2  0EC7               	movlw	199
  2638  00FCA4  6E01               	movwf	ee_write@addr,c
  2639  00FCA6  0E60               	movlw	low _PROGRAM_ACK
  2640  00FCA8  6EF6               	movwf	tblptrl,c
  2641  00FCAA                     	if	1	;There is more than 1 active tblptr byte
  2642  00FCAA  0EFF               	movlw	high _PROGRAM_ACK
  2643  00FCAC  6EF7               	movwf	tblptrh,c
  2644  00FCAE                     	endif
  2645  00FCAE                     	if	0	;There are less than 3 active tblptr bytes
  2646  00FCAE                     	endif
  2647  00FCAE  0008               	tblrd		*
  2648  00FCB0  CFF5 F002          	movff	tablat,ee_write@data
  2649  00FCB4  0E00               	movlw	0
  2650  00FCB6  EC1A  F077         	call	_ee_write
  2651                           
  2652                           ;setup.c: 127: ee_write(0x00, 0xC8, TEST_FREQ);
  2653  00FCBA  0EC8               	movlw	200
  2654  00FCBC  6E01               	movwf	ee_write@addr,c
  2655  00FCBE  0E5F               	movlw	low _TEST_FREQ
  2656  00FCC0  6EF6               	movwf	tblptrl,c
  2657  00FCC2                     	if	1	;There is more than 1 active tblptr byte
  2658  00FCC2  0EFF               	movlw	high _TEST_FREQ
  2659  00FCC4  6EF7               	movwf	tblptrh,c
  2660  00FCC6                     	endif
  2661  00FCC6                     	if	0	;There are less than 3 active tblptr bytes
  2662  00FCC6                     	endif
  2663  00FCC6  0008               	tblrd		*
  2664  00FCC8  CFF5 F002          	movff	tablat,ee_write@data
  2665  00FCCC  0E00               	movlw	0
  2666  00FCCE  EC1A  F077         	call	_ee_write
  2667                           
  2668                           ;setup.c: 129: ee_write(0x00, 0xC9, SERVER_ACK_TIME);
  2669  00FCD2  0EC9               	movlw	201
  2670  00FCD4  6E01               	movwf	ee_write@addr,c
  2671  00FCD6  0E5E               	movlw	low _SERVER_ACK_TIME
  2672  00FCD8  6EF6               	movwf	tblptrl,c
  2673  00FCDA                     	if	1	;There is more than 1 active tblptr byte
  2674  00FCDA  0EFF               	movlw	high _SERVER_ACK_TIME
  2675  00FCDC  6EF7               	movwf	tblptrh,c
  2676  00FCDE                     	endif
  2677  00FCDE                     	if	0	;There are less than 3 active tblptr bytes
  2678  00FCDE                     	endif
  2679  00FCDE  0008               	tblrd		*
  2680  00FCE0  CFF5 F002          	movff	tablat,ee_write@data
  2681  00FCE4  0E00               	movlw	0
  2682  00FCE6  EC1A  F077         	call	_ee_write
  2683                           
  2684                           ;setup.c: 131: ee_write(0x00, 0xB8, SMS_WAIT_TIME);
  2685  00FCEA  0EB8               	movlw	184
  2686  00FCEC  6E01               	movwf	ee_write@addr,c
  2687  00FCEE  0E58               	movlw	low _SMS_WAIT_TIME
  2688  00FCF0  6EF6               	movwf	tblptrl,c
  2689  00FCF2                     	if	1	;There is more than 1 active tblptr byte
  2690  00FCF2  0EFF               	movlw	high _SMS_WAIT_TIME
  2691  00FCF4  6EF7               	movwf	tblptrh,c
  2692  00FCF6                     	endif
  2693  00FCF6                     	if	0	;There are less than 3 active tblptr bytes
  2694  00FCF6                     	endif
  2695  00FCF6  0008               	tblrd		*
  2696  00FCF8  CFF5 F002          	movff	tablat,ee_write@data
  2697  00FCFC  0E00               	movlw	0
  2698  00FCFE  EC1A  F077         	call	_ee_write
  2699                           
  2700                           ;setup.c: 133: page = 0x00;
  2701  00FD02  0E00               	movlw	0
  2702  00FD04  6E08               	movwf	write_defaults@page,c
  2703                           
  2704                           ;setup.c: 134: addr = 0xCA;
  2705  00FD06  0ECA               	movlw	202
  2706  00FD08  6E06               	movwf	write_defaults@addr,c
  2707                           
  2708                           ;setup.c: 135: temp = 0x00;
  2709  00FD0A  0E00               	movlw	0
  2710  00FD0C  6E07               	movwf	write_defaults@temp,c
  2711                           
  2712                           ;setup.c: 136: i = 0;
  2713  00FD0E  0E00               	movlw	0
  2714  00FD10  6E09               	movwf	write_defaults@i,c
  2715                           
  2716                           ;setup.c: 137: while (temp != '#')
  2717  00FD12  D014               	goto	l617
  2718  00FD14                     
  2719                           ;setup.c: 138: {
  2720                           ;setup.c: 139: temp = UNIT_ACCT[i];
  2721  00FD14  5009               	movf	write_defaults@i,w,c
  2722  00FD16  0D01               	mullw	1
  2723  00FD18  0E31               	movlw	low _UNIT_ACCT
  2724  00FD1A  24F3               	addwf	prodl,w,c
  2725  00FD1C  6EF6               	movwf	tblptrl,c
  2726  00FD1E  0EFF               	movlw	high _UNIT_ACCT
  2727  00FD20  20F4               	addwfc	prodh,w,c
  2728  00FD22  6EF7               	movwf	tblptrh,c
  2729  00FD24                     	if	0	;There are less than 3 active tblptr bytes
  2730  00FD24                     	endif
  2731  00FD24  0008               	tblrd		*
  2732  00FD26  CFF5 F007          	movff	tablat,write_defaults@temp
  2733                           
  2734                           ;setup.c: 140: ee_write(page, (uint8_t)(addr + i), temp);
  2735  00FD2A  5006               	movf	write_defaults@addr,w,c
  2736  00FD2C  2409               	addwf	write_defaults@i,w,c
  2737  00FD2E  6E01               	movwf	ee_write@addr,c
  2738  00FD30  C007  F002         	movff	write_defaults@temp,ee_write@data
  2739  00FD34  5008               	movf	write_defaults@page,w,c
  2740  00FD36  EC1A  F077         	call	_ee_write
  2741                           
  2742                           ;setup.c: 141: i ++;
  2743  00FD3A  2A09               	incf	write_defaults@i,f,c
  2744  00FD3C                     l617:
  2745  00FD3C  0E23               	movlw	35
  2746  00FD3E  1807               	xorwf	write_defaults@temp,w,c
  2747  00FD40  A4D8               	btfss	status,2,c
  2748  00FD42  D7E8               	goto	l618
  2749                           
  2750                           ;setup.c: 142: }
  2751                           ;setup.c: 144: page = 0x00;
  2752  00FD44  0E00               	movlw	0
  2753  00FD46  6E08               	movwf	write_defaults@page,c
  2754                           
  2755                           ;setup.c: 145: addr = 0xD0;
  2756  00FD48  0ED0               	movlw	208
  2757  00FD4A  6E06               	movwf	write_defaults@addr,c
  2758                           
  2759                           ;setup.c: 146: temp = 0x00;
  2760  00FD4C  0E00               	movlw	0
  2761  00FD4E  6E07               	movwf	write_defaults@temp,c
  2762                           
  2763                           ;setup.c: 147: i = 0;
  2764  00FD50  0E00               	movlw	0
  2765  00FD52  6E09               	movwf	write_defaults@i,c
  2766                           
  2767                           ;setup.c: 148: while (temp != '#')
  2768  00FD54  D014               	goto	l620
  2769  00FD56                     
  2770                           ;setup.c: 149: {
  2771                           ;setup.c: 150: temp = LINE_CARD[i];
  2772  00FD56  5009               	movf	write_defaults@i,w,c
  2773  00FD58  0D01               	mullw	1
  2774  00FD5A  0E42               	movlw	low _LINE_CARD
  2775  00FD5C  24F3               	addwf	prodl,w,c
  2776  00FD5E  6EF6               	movwf	tblptrl,c
  2777  00FD60  0EFF               	movlw	high _LINE_CARD
  2778  00FD62  20F4               	addwfc	prodh,w,c
  2779  00FD64  6EF7               	movwf	tblptrh,c
  2780  00FD66                     	if	0	;There are less than 3 active tblptr bytes
  2781  00FD66                     	endif
  2782  00FD66  0008               	tblrd		*
  2783  00FD68  CFF5 F007          	movff	tablat,write_defaults@temp
  2784                           
  2785                           ;setup.c: 151: ee_write(page, (uint8_t)(addr + i), temp);
  2786  00FD6C  5006               	movf	write_defaults@addr,w,c
  2787  00FD6E  2409               	addwf	write_defaults@i,w,c
  2788  00FD70  6E01               	movwf	ee_write@addr,c
  2789  00FD72  C007  F002         	movff	write_defaults@temp,ee_write@data
  2790  00FD76  5008               	movf	write_defaults@page,w,c
  2791  00FD78  EC1A  F077         	call	_ee_write
  2792                           
  2793                           ;setup.c: 152: i ++;
  2794  00FD7C  2A09               	incf	write_defaults@i,f,c
  2795  00FD7E                     l620:
  2796  00FD7E  0E23               	movlw	35
  2797  00FD80  1807               	xorwf	write_defaults@temp,w,c
  2798  00FD82  A4D8               	btfss	status,2,c
  2799  00FD84  D7E8               	goto	l621
  2800                           
  2801                           ;setup.c: 153: }
  2802                           ;setup.c: 155: ee_write(0, 0xB9, ZONE1);
  2803  00FD86  0EB9               	movlw	185
  2804  00FD88  6E01               	movwf	ee_write@addr,c
  2805  00FD8A  0E5D               	movlw	low _ZONE1
  2806  00FD8C  6EF6               	movwf	tblptrl,c
  2807  00FD8E                     	if	1	;There is more than 1 active tblptr byte
  2808  00FD8E  0EFF               	movlw	high _ZONE1
  2809  00FD90  6EF7               	movwf	tblptrh,c
  2810  00FD92                     	endif
  2811  00FD92                     	if	0	;There are less than 3 active tblptr bytes
  2812  00FD92                     	endif
  2813  00FD92  0008               	tblrd		*
  2814  00FD94  CFF5 F002          	movff	tablat,ee_write@data
  2815  00FD98  0E00               	movlw	0
  2816  00FD9A  EC1A  F077         	call	_ee_write
  2817                           
  2818                           ;setup.c: 156: ee_write(0, 0xBA, ZONE2);
  2819  00FD9E  0EBA               	movlw	186
  2820  00FDA0  6E01               	movwf	ee_write@addr,c
  2821  00FDA2  0E5C               	movlw	low _ZONE2
  2822  00FDA4  6EF6               	movwf	tblptrl,c
  2823  00FDA6                     	if	1	;There is more than 1 active tblptr byte
  2824  00FDA6  0EFF               	movlw	high _ZONE2
  2825  00FDA8  6EF7               	movwf	tblptrh,c
  2826  00FDAA                     	endif
  2827  00FDAA                     	if	0	;There are less than 3 active tblptr bytes
  2828  00FDAA                     	endif
  2829  00FDAA  0008               	tblrd		*
  2830  00FDAC  CFF5 F002          	movff	tablat,ee_write@data
  2831  00FDB0  0E00               	movlw	0
  2832  00FDB2  EC1A  F077         	call	_ee_write
  2833                           
  2834                           ;setup.c: 157: ee_write(0, 0xBB, TP_PIN);
  2835  00FDB6  0EBB               	movlw	187
  2836  00FDB8  6E01               	movwf	ee_write@addr,c
  2837  00FDBA  0E5B               	movlw	low _TP_PIN
  2838  00FDBC  6EF6               	movwf	tblptrl,c
  2839  00FDBE                     	if	1	;There is more than 1 active tblptr byte
  2840  00FDBE  0EFF               	movlw	high _TP_PIN
  2841  00FDC0  6EF7               	movwf	tblptrh,c
  2842  00FDC2                     	endif
  2843  00FDC2                     	if	0	;There are less than 3 active tblptr bytes
  2844  00FDC2                     	endif
  2845  00FDC2  0008               	tblrd		*
  2846  00FDC4  CFF5 F002          	movff	tablat,ee_write@data
  2847  00FDC8  0E00               	movlw	0
  2848  00FDCA  EC1A  F077         	call	_ee_write
  2849                           
  2850                           ;setup.c: 158: ee_write(0, 0xBC, CYCLE);
  2851  00FDCE  0EBC               	movlw	188
  2852  00FDD0  6E01               	movwf	ee_write@addr,c
  2853  00FDD2  0E5A               	movlw	low _CYCLE
  2854  00FDD4  6EF6               	movwf	tblptrl,c
  2855  00FDD6                     	if	1	;There is more than 1 active tblptr byte
  2856  00FDD6  0EFF               	movlw	high _CYCLE
  2857  00FDD8  6EF7               	movwf	tblptrh,c
  2858  00FDDA                     	endif
  2859  00FDDA                     	if	0	;There are less than 3 active tblptr bytes
  2860  00FDDA                     	endif
  2861  00FDDA  0008               	tblrd		*
  2862  00FDDC  CFF5 F002          	movff	tablat,ee_write@data
  2863  00FDE0  0E00               	movlw	0
  2864  00FDE2  EC1A  F077         	call	_ee_write
  2865                           
  2866                           ;setup.c: 159: ee_write(0, 0xBD, RETRY);
  2867  00FDE6  0EBD               	movlw	189
  2868  00FDE8  6E01               	movwf	ee_write@addr,c
  2869  00FDEA  0E59               	movlw	low _RETRY
  2870  00FDEC  6EF6               	movwf	tblptrl,c
  2871  00FDEE                     	if	1	;There is more than 1 active tblptr byte
  2872  00FDEE  0EFF               	movlw	high _RETRY
  2873  00FDF0  6EF7               	movwf	tblptrh,c
  2874  00FDF2                     	endif
  2875  00FDF2                     	if	0	;There are less than 3 active tblptr bytes
  2876  00FDF2                     	endif
  2877  00FDF2  0008               	tblrd		*
  2878  00FDF4  CFF5 F002          	movff	tablat,ee_write@data
  2879  00FDF8  0E00               	movlw	0
  2880  00FDFA  EC1A  F077         	call	_ee_write
  2881                           
  2882                           ;setup.c: 161: ee_write(0, 0xE0,ENCRYPTION);
  2883  00FDFE  0EE0               	movlw	224
  2884  00FE00  6E01               	movwf	ee_write@addr,c
  2885  00FE02  0E57               	movlw	low _ENCRYPTION
  2886  00FE04  6EF6               	movwf	tblptrl,c
  2887  00FE06                     	if	1	;There is more than 1 active tblptr byte
  2888  00FE06  0EFF               	movlw	high _ENCRYPTION
  2889  00FE08  6EF7               	movwf	tblptrh,c
  2890  00FE0A                     	endif
  2891  00FE0A                     	if	0	;There are less than 3 active tblptr bytes
  2892  00FE0A                     	endif
  2893  00FE0A  0008               	tblrd		*
  2894  00FE0C  CFF5 F002          	movff	tablat,ee_write@data
  2895  00FE10  0E00               	movlw	0
  2896  00FE12  EC1A  F077         	call	_ee_write
  2897                           
  2898                           ;setup.c: 163: ee_write(0, 0x0F, 0x00);
  2899  00FE16  0E0F               	movlw	15
  2900  00FE18  6E01               	movwf	ee_write@addr,c
  2901  00FE1A  0E00               	movlw	0
  2902  00FE1C  6E02               	movwf	ee_write@data,c
  2903  00FE1E  0E00               	movlw	0
  2904  00FE20  EC1A  F077         	call	_ee_write
  2905                           
  2906                           ;setup.c: 165: ee_write(0, 0x00, VERSION[0]);
  2907  00FE24  0E00               	movlw	0
  2908  00FE26  6E01               	movwf	ee_write@addr,c
  2909  00FE28  0E3D               	movlw	low _VERSION
  2910  00FE2A  6EF6               	movwf	tblptrl,c
  2911  00FE2C                     	if	1	;There is more than 1 active tblptr byte
  2912  00FE2C  0EFF               	movlw	high _VERSION
  2913  00FE2E  6EF7               	movwf	tblptrh,c
  2914  00FE30                     	endif
  2915  00FE30                     	if	0	;There are less than 3 active tblptr bytes
  2916  00FE30                     	endif
  2917  00FE30  0008               	tblrd		*
  2918  00FE32  CFF5 F002          	movff	tablat,ee_write@data
  2919  00FE36  0E00               	movlw	0
  2920  00FE38  EC1A  F077         	call	_ee_write
  2921                           
  2922                           ;setup.c: 166: ee_write(0, 0x01, VERSION[1]);
  2923  00FE3C  0E01               	movlw	1
  2924  00FE3E  6E01               	movwf	ee_write@addr,c
  2925  00FE40  0E3E               	movlw	low (_VERSION+1)
  2926  00FE42  6EF6               	movwf	tblptrl,c
  2927  00FE44  0EFF               	movlw	high (_VERSION+1)
  2928  00FE46  6EF7               	movwf	tblptrh,c
  2929  00FE48                     	if	0	;tblptru may be non-zero
  2930  00FE48                     	endif
  2931  00FE48                     	if	0	;tblptru may be non-zero
  2932  00FE48                     	endif
  2933  00FE48  0008               	tblrd		*
  2934  00FE4A  CFF5 F002          	movff	tablat,ee_write@data
  2935  00FE4E  0E00               	movlw	0
  2936  00FE50  EC1A  F077         	call	_ee_write
  2937                           
  2938                           ;setup.c: 167: ee_write(0, 0x02, VERSION[2]);
  2939  00FE54  0E02               	movlw	2
  2940  00FE56  6E01               	movwf	ee_write@addr,c
  2941  00FE58  0E3F               	movlw	low (_VERSION+2)
  2942  00FE5A  6EF6               	movwf	tblptrl,c
  2943  00FE5C  0EFF               	movlw	high (_VERSION+2)
  2944  00FE5E  6EF7               	movwf	tblptrh,c
  2945  00FE60                     	if	0	;tblptru may be non-zero
  2946  00FE60                     	endif
  2947  00FE60                     	if	0	;tblptru may be non-zero
  2948  00FE60                     	endif
  2949  00FE60  0008               	tblrd		*
  2950  00FE62  CFF5 F002          	movff	tablat,ee_write@data
  2951  00FE66  0E00               	movlw	0
  2952  00FE68  EC1A  F077         	call	_ee_write
  2953                           
  2954                           ;setup.c: 169: ee_write(page, 0xF0, 0x57);
  2955  00FE6C  0EF0               	movlw	240
  2956  00FE6E  6E01               	movwf	ee_write@addr,c
  2957  00FE70  0E57               	movlw	87
  2958  00FE72  6E02               	movwf	ee_write@data,c
  2959  00FE74  5008               	movf	write_defaults@page,w,c
  2960  00FE76  EC1A  F077         	call	_ee_write
  2961  00FE7A  0012               	return		;funcret
  2962  00FE7C                     __end_of_write_defaults:
  2963                           	opt stack 0
  2964                           tblptru	equ	0xFF8
  2965                           tblptrh	equ	0xFF7
  2966                           tblptrl	equ	0xFF6
  2967                           tablat	equ	0xFF5
  2968                           prodh	equ	0xFF4
  2969                           prodl	equ	0xFF3
  2970                           intcon	equ	0xFF2
  2971                           postinc0	equ	0xFEE
  2972                           wreg	equ	0xFE8
  2973                           postdec1	equ	0xFE5
  2974                           fsr1l	equ	0xFE1
  2975                           indf2	equ	0xFDF
  2976                           postinc2	equ	0xFDE
  2977                           fsr2h	equ	0xFDA
  2978                           fsr2l	equ	0xFD9
  2979                           status	equ	0xFD8
  2980                           
  2981 ;; *************** function _sim_card_ok *****************
  2982 ;; Defined at:
  2983 ;;		line 134 in file "module.c"
  2984 ;; Parameters:    Size  Location     Type
  2985 ;;		None
  2986 ;; Auto vars:     Size  Location     Type
  2987 ;;  j               1   59[BANK0 ] unsigned char 
  2988 ;;  buf            32    0[BANK0 ] unsigned char [32]
  2989 ;;  cpinResponse   13   32[BANK0 ] const unsigned char [13]
  2990 ;;  cpin           11   45[BANK0 ] const unsigned char [11]
  2991 ;;  i               1   60[BANK0 ] unsigned char 
  2992 ;;  temp            1   58[BANK0 ] unsigned char 
  2993 ;;  matches         1   57[BANK0 ] unsigned char 
  2994 ;;  count           1   56[BANK0 ] unsigned char 
  2995 ;; Return value:  Size  Location     Type
  2996 ;;                  1    wreg      unsigned char 
  2997 ;; Registers used:
  2998 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2999 ;; Tracked objects:
  3000 ;;		On entry : 0/0
  3001 ;;		On exit  : 0/0
  3002 ;;		Unchanged: 0/0
  3003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3005 ;;      Locals:         0      61       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3006 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3007 ;;      Totals:         1      61       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3008 ;;Total ram usage:       62 bytes
  3009 ;; Hardware stack levels used:    1
  3010 ;; Hardware stack levels required when called:    4
  3011 ;; This function calls:
  3012 ;;		_delay5ms
  3013 ;;		_md_uart_write_str_ok
  3014 ;;		_setup_timer3
  3015 ;;		_str_matches
  3016 ;; This function is called by:
  3017 ;;		_md_io_setup_ok
  3018 ;; This function uses a non-reentrant model
  3019 ;;
  3020                           
  3021                           	psect	text5
  3022  00F172                     __ptext5:
  3023                           	opt stack 0
  3024  00F172                     _sim_card_ok:
  3025                           	opt stack 24
  3026                           
  3027                           ;module.c: 136: const unsigned char cpin[] = "AT+CPIN?\r\n";
  3028                           
  3029                           ;incstack = 0
  3030  00F172  0EF8               	movlw	low sim_card_ok@F6791
  3031  00F174  6EF6               	movwf	tblptrl,c
  3032  00F176                     	if	1	;There is more than 1 active tblptr byte
  3033  00F176  0EFE               	movlw	high sim_card_ok@F6791
  3034  00F178  6EF7               	movwf	tblptrh,c
  3035  00F17A                     	endif
  3036  00F17A                     	if	0	;There are less than 3 active tblptr bytes
  3037  00F17A                     	endif
  3038  00F17A  EE20  F08D         	lfsr	2,sim_card_ok@cpin
  3039  00F17E  0E0A               	movlw	10
  3040  00F180                     u2040:
  3041  00F180  0009               	tblrd		*+
  3042  00F182  CFF5 FFDE          	movff	tablat,postinc2
  3043  00F186  06E8               	decf	wreg,f,c
  3044  00F188  E2FB               	bc	u2040
  3045                           
  3046                           ;module.c: 137: const unsigned char cpinResponse[] = "+CPIN: READY";
  3047  00F18A  0EA6               	movlw	low sim_card_ok@F6793
  3048  00F18C  6EF6               	movwf	tblptrl,c
  3049  00F18E                     	if	1	;There is more than 1 active tblptr byte
  3050  00F18E  0EFE               	movlw	high sim_card_ok@F6793
  3051  00F190  6EF7               	movwf	tblptrh,c
  3052  00F192                     	endif
  3053  00F192                     	if	0	;There are less than 3 active tblptr bytes
  3054  00F192                     	endif
  3055  00F192  EE20  F080         	lfsr	2,sim_card_ok@cpinResponse
  3056  00F196  0E0C               	movlw	12
  3057  00F198                     u2050:
  3058  00F198  0009               	tblrd		*+
  3059  00F19A  CFF5 FFDE          	movff	tablat,postinc2
  3060  00F19E  06E8               	decf	wreg,f,c
  3061  00F1A0  E2FB               	bc	u2050
  3062                           
  3063                           ;module.c: 138: uint8_t buf[32], temp, i, count = 15;
  3064  00F1A2  0E0F               	movlw	15
  3065  00F1A4  0100               	movlb	0	; () banked
  3066  00F1A6  6F98               	movwf	sim_card_ok@count& (0+255),b
  3067                           
  3068                           ; BSR set to: 0
  3069                           ;module.c: 139: bool matches = 0;
  3070  00F1A8  0E00               	movlw	0
  3071  00F1AA  6F99               	movwf	sim_card_ok@matches& (0+255),b
  3072                           
  3073                           ;module.c: 143: while (count-- != 0)
  3074  00F1AC  D05F               	goto	l483
  3075  00F1AE                     
  3076                           ; BSR set to: 0
  3077                           ;module.c: 144: {
  3078                           ;module.c: 145: if (!md_uart_write_str_ok((unsigned char *)&cpin[0], sizeof(cpin), 0))
  3079                           
  3080                           ; BSR set to: 0
  3081  00F1AE  0E8D               	movlw	low sim_card_ok@cpin
  3082  00F1B0  6E2C               	movwf	md_uart_write_str_ok@data,c
  3083  00F1B2  0E00               	movlw	high sim_card_ok@cpin
  3084  00F1B4  6E2D               	movwf	md_uart_write_str_ok@data+1,c
  3085  00F1B6  0E0B               	movlw	11
  3086  00F1B8  6E2E               	movwf	md_uart_write_str_ok@len,c
  3087  00F1BA  0E00               	movlw	0
  3088  00F1BC  6E2F               	movwf	md_uart_write_str_ok@want_ok,c
  3089  00F1BE  ECEA  F077         	call	_md_uart_write_str_ok	;wreg free
  3090  00F1C2  0900               	iorlw	0
  3091  00F1C4  A4D8               	btfss	status,2,c
  3092  00F1C6  D002               	goto	l485
  3093                           
  3094                           ;module.c: 146: return 0;
  3095  00F1C8  0E00               	movlw	0
  3096  00F1CA  0012               	return	
  3097  00F1CC                     l485:
  3098                           
  3099                           ;module.c: 147: RCIE = 0;
  3100  00F1CC  9A9D               	bcf	3997,5,c	;volatile
  3101                           
  3102                           ;module.c: 148: CREN1 = 1;
  3103  00F1CE  88AB               	bsf	4011,4,c	;volatile
  3104                           
  3105                           ;module.c: 149: setup_timer3();
  3106  00F1D0  ECAC  F076         	call	_setup_timer3	;wreg free
  3107                           
  3108                           ;module.c: 151: while (!TMR3IF)
  3109  00F1D4  D043               	goto	l491
  3110  00F1D6                     l488:
  3111                           
  3112                           ;module.c: 152: {
  3113                           ;module.c: 153: if (RC1IF)
  3114  00F1D6  AA9E               	btfss	3998,5,c	;volatile
  3115  00F1D8  D041               	goto	l491
  3116                           
  3117                           ;module.c: 154: {
  3118                           ;module.c: 155: temp = RC1REG;
  3119  00F1DA  CFAE F09A          	movff	4014,sim_card_ok@temp	;volatile
  3120                           
  3121                           ;module.c: 156: buf[i++] = temp;
  3122  00F1DE  0100               	movlb	0	; () banked
  3123  00F1E0  519C               	movf	sim_card_ok@i& (0+255),w,b
  3124  00F1E2  0D01               	mullw	1
  3125  00F1E4  0E60               	movlw	low sim_card_ok@buf
  3126  00F1E6  24F3               	addwf	prodl,w,c
  3127  00F1E8  6ED9               	movwf	fsr2l,c
  3128  00F1EA  0E00               	movlw	high sim_card_ok@buf
  3129  00F1EC  20F4               	addwfc	prodh,w,c
  3130  00F1EE  6EDA               	movwf	fsr2h,c
  3131  00F1F0  C09A  FFDF         	movff	sim_card_ok@temp,indf2
  3132                           
  3133                           ; BSR set to: 0
  3134  00F1F4  2B9C               	incf	sim_card_ok@i& (0+255),f,b
  3135                           
  3136                           ; BSR set to: 0
  3137                           ;module.c: 157: if (i >= 32)
  3138  00F1F6  0E1F               	movlw	31
  3139  00F1F8  659C               	cpfsgt	sim_card_ok@i& (0+255),b
  3140  00F1FA  D002               	goto	l490
  3141                           
  3142                           ; BSR set to: 0
  3143                           ;module.c: 158: i = 31;
  3144  00F1FC  0E1F               	movlw	31
  3145  00F1FE  6F9C               	movwf	sim_card_ok@i& (0+255),b
  3146  00F200                     l490:
  3147                           
  3148                           ; BSR set to: 0
  3149                           ;module.c: 159: if (temp == 'Y')
  3150                           
  3151                           ; BSR set to: 0
  3152  00F200  0E59               	movlw	89
  3153  00F202  199A               	xorwf	sim_card_ok@temp& (0+255),w,b
  3154  00F204  A4D8               	btfss	status,2,c
  3155  00F206  D02A               	goto	l491
  3156                           
  3157                           ; BSR set to: 0
  3158                           ;module.c: 160: {
  3159                           ;module.c: 161: matches = str_matches((uint8_t *)&buf[(uint8_t)(i-12)], (uint8_t *)&cpin
      +                          Response[0], sizeof(cpinResponse));
  3160  00F208  C09C  F032         	movff	sim_card_ok@i,??_sim_card_ok
  3161  00F20C  0EF4               	movlw	244
  3162  00F20E  2632               	addwf	??_sim_card_ok,f,c
  3163  00F210  5032               	movf	??_sim_card_ok,w,c
  3164  00F212  0D01               	mullw	1
  3165  00F214  0E60               	movlw	low sim_card_ok@buf
  3166  00F216  24F3               	addwf	prodl,w,c
  3167  00F218  6E01               	movwf	str_matches@raw,c
  3168  00F21A  0E00               	movlw	high sim_card_ok@buf
  3169  00F21C  20F4               	addwfc	prodh,w,c
  3170  00F21E  6E02               	movwf	str_matches@raw+1,c
  3171  00F220  0E80               	movlw	low sim_card_ok@cpinResponse
  3172  00F222  6E03               	movwf	str_matches@expected,c
  3173  00F224  0E00               	movlw	high sim_card_ok@cpinResponse
  3174  00F226  6E04               	movwf	str_matches@expected+1,c
  3175  00F228  0E0D               	movlw	13
  3176  00F22A  6E05               	movwf	str_matches@len,c
  3177  00F22C  EC81  F077         	call	_str_matches	;wreg free
  3178  00F230  0100               	movlb	0	; () banked
  3179  00F232  6F99               	movwf	sim_card_ok@matches& (0+255),b
  3180                           
  3181                           ; BSR set to: 0
  3182                           ;module.c: 162: if (matches)
  3183  00F234  5199               	movf	sim_card_ok@matches& (0+255),w,b
  3184  00F236  B4D8               	btfsc	status,2,c
  3185  00F238  D00F               	goto	l492
  3186                           
  3187                           ; BSR set to: 0
  3188                           ;module.c: 163: {
  3189                           ;module.c: 164: for (uint8_t j = 0; j < 5; j ++)
  3190  00F23A  0E00               	movlw	0
  3191  00F23C  6F9B               	movwf	sim_card_ok@j& (0+255),b
  3192  00F23E                     l2960:
  3193                           
  3194                           ; BSR set to: 0
  3195  00F23E  0E04               	movlw	4
  3196  00F240  659B               	cpfsgt	sim_card_ok@j& (0+255),b
  3197  00F242  D001               	goto	l493
  3198  00F244  D004               	goto	u2120
  3199  00F246                     l493:
  3200                           
  3201                           ; BSR set to: 0
  3202                           ;module.c: 165: temp = RC1REG;
  3203  00F246  CFAE F09A          	movff	4014,sim_card_ok@temp	;volatile
  3204                           
  3205                           ; BSR set to: 0
  3206  00F24A  2B9B               	incf	sim_card_ok@j& (0+255),f,b
  3207  00F24C  D7F8               	goto	l2960
  3208  00F24E                     u2120:
  3209                           
  3210                           ; BSR set to: 0
  3211                           ;module.c: 166: RC1REG = 1;
  3212                           
  3213                           ; BSR set to: 0
  3214  00F24E  0E01               	movlw	1
  3215  00F250  6EAE               	movwf	4014,c	;volatile
  3216                           
  3217                           ; BSR set to: 0
  3218                           ;module.c: 167: TMR3ON = 0;
  3219  00F252  90B1               	bcf	4017,0,c	;volatile
  3220                           
  3221                           ; BSR set to: 0
  3222                           ;module.c: 168: return 1;
  3223  00F254  0E01               	movlw	1
  3224                           
  3225                           ; BSR set to: 0
  3226  00F256  0012               	return	
  3227  00F258                     l492:
  3228                           
  3229                           ; BSR set to: 0
  3230                           ;module.c: 169: }
  3231                           ;module.c: 170: i = 0;
  3232                           
  3233                           ; BSR set to: 0
  3234  00F258  0E00               	movlw	0
  3235  00F25A  6F9C               	movwf	sim_card_ok@i& (0+255),b
  3236  00F25C                     l491:
  3237                           
  3238                           ; BSR set to: 0
  3239                           
  3240                           ; BSR set to: 0
  3241                           
  3242                           ; BSR set to: 0
  3243  00F25C  A2A1               	btfss	4001,1,c	;volatile
  3244  00F25E  D7BB               	goto	l488
  3245                           
  3246                           ;module.c: 171: }
  3247                           ;module.c: 172: }
  3248                           ;module.c: 173: }
  3249                           ;module.c: 174: delay5ms(20);
  3250  00F260  0E00               	movlw	0
  3251  00F262  6E02               	movwf	delay5ms@cnt+1,c
  3252  00F264  0E14               	movlw	20
  3253  00F266  6E01               	movwf	delay5ms@cnt,c
  3254  00F268  EC05  F077         	call	_delay5ms	;wreg free
  3255  00F26C                     l483:
  3256  00F26C  0100               	movlb	0	; () banked
  3257  00F26E  0798               	decf	sim_card_ok@count& (0+255),f,b
  3258  00F270  2998               	incf	sim_card_ok@count& (0+255),w,b
  3259  00F272  A4D8               	btfss	status,2,c
  3260  00F274  D79C               	goto	l484
  3261                           
  3262                           ; BSR set to: 0
  3263                           ;module.c: 175: }
  3264                           ;module.c: 176: return 0;
  3265                           
  3266                           ; BSR set to: 0
  3267  00F276  0E00               	movlw	0
  3268  00F278  0012               	return	
  3269  00F27A                     __end_of_sim_card_ok:
  3270                           	opt stack 0
  3271                           tblptru	equ	0xFF8
  3272                           tblptrh	equ	0xFF7
  3273                           tblptrl	equ	0xFF6
  3274                           tablat	equ	0xFF5
  3275                           prodh	equ	0xFF4
  3276                           prodl	equ	0xFF3
  3277                           intcon	equ	0xFF2
  3278                           postinc0	equ	0xFEE
  3279                           wreg	equ	0xFE8
  3280                           postdec1	equ	0xFE5
  3281                           fsr1l	equ	0xFE1
  3282                           indf2	equ	0xFDF
  3283                           postinc2	equ	0xFDE
  3284                           fsr2h	equ	0xFDA
  3285                           fsr2l	equ	0xFD9
  3286                           status	equ	0xFD8
  3287                           
  3288 ;; *************** function _save_first_run *****************
  3289 ;; Defined at:
  3290 ;;		line 74 in file "module.c"
  3291 ;; Parameters:    Size  Location     Type
  3292 ;;		None
  3293 ;; Auto vars:     Size  Location     Type
  3294 ;;		None
  3295 ;; Return value:  Size  Location     Type
  3296 ;;                  1    wreg      void 
  3297 ;; Registers used:
  3298 ;;		wreg, status,2, cstack
  3299 ;; Tracked objects:
  3300 ;;		On entry : 0/0
  3301 ;;		On exit  : 0/0
  3302 ;;		Unchanged: 0/0
  3303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3307 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3308 ;;Total ram usage:        0 bytes
  3309 ;; Hardware stack levels used:    1
  3310 ;; Hardware stack levels required when called:    1
  3311 ;; This function calls:
  3312 ;;		_ee_write
  3313 ;; This function is called by:
  3314 ;;		_md_io_setup_ok
  3315 ;; This function uses a non-reentrant model
  3316 ;;
  3317                           
  3318                           	psect	text6
  3319  00ED66                     __ptext6:
  3320                           	opt stack 0
  3321  00ED66                     _save_first_run:
  3322                           	opt stack 27
  3323                           
  3324                           ;module.c: 76: ee_write(0, 0xF0, 0x57);
  3325                           
  3326                           ;incstack = 0
  3327  00ED66  0EF0               	movlw	240
  3328  00ED68  6E01               	movwf	ee_write@addr,c
  3329  00ED6A  0E57               	movlw	87
  3330  00ED6C  6E02               	movwf	ee_write@data,c
  3331  00ED6E  0E00               	movlw	0
  3332  00ED70  EC1A  F077         	call	_ee_write
  3333  00ED74  0012               	return		;funcret
  3334  00ED76                     __end_of_save_first_run:
  3335                           	opt stack 0
  3336                           tblptru	equ	0xFF8
  3337                           tblptrh	equ	0xFF7
  3338                           tblptrl	equ	0xFF6
  3339                           tablat	equ	0xFF5
  3340                           prodh	equ	0xFF4
  3341                           prodl	equ	0xFF3
  3342                           intcon	equ	0xFF2
  3343                           postinc0	equ	0xFEE
  3344                           wreg	equ	0xFE8
  3345                           postdec1	equ	0xFE5
  3346                           fsr1l	equ	0xFE1
  3347                           indf2	equ	0xFDF
  3348                           postinc2	equ	0xFDE
  3349                           fsr2h	equ	0xFDA
  3350                           fsr2l	equ	0xFD9
  3351                           status	equ	0xFD8
  3352                           
  3353 ;; *************** function _ee_write *****************
  3354 ;; Defined at:
  3355 ;;		line 26 in file "eeprom.c"
  3356 ;; Parameters:    Size  Location     Type
  3357 ;;  page            1    wreg     unsigned char 
  3358 ;;  addr            1    0[COMRAM] unsigned char 
  3359 ;;  data            1    1[COMRAM] unsigned char 
  3360 ;; Auto vars:     Size  Location     Type
  3361 ;;  page            1    2[COMRAM] unsigned char 
  3362 ;; Return value:  Size  Location     Type
  3363 ;;                  1    wreg      void 
  3364 ;; Registers used:
  3365 ;;		wreg, status,2
  3366 ;; Tracked objects:
  3367 ;;		On entry : 0/0
  3368 ;;		On exit  : 0/0
  3369 ;;		Unchanged: 0/0
  3370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3371 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3372 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3374 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3375 ;;Total ram usage:        3 bytes
  3376 ;; Hardware stack levels used:    1
  3377 ;; This function calls:
  3378 ;;		Nothing
  3379 ;; This function is called by:
  3380 ;;		_save_first_run
  3381 ;;		_write_defaults
  3382 ;; This function uses a non-reentrant model
  3383 ;;
  3384                           
  3385                           	psect	text7
  3386  00EE34                     __ptext7:
  3387                           	opt stack 0
  3388  00EE34                     _ee_write:
  3389                           	opt stack 27
  3390                           
  3391                           ;incstack = 0
  3392                           ;ee_write@page stored from wreg
  3393  00EE34  6E03               	movwf	ee_write@page,c
  3394                           
  3395                           ;eeprom.c: 28: GIE = 0;
  3396  00EE36  9EF2               	bcf	intcon,7,c	;volatile
  3397                           
  3398                           ;eeprom.c: 29: EEADRH = page;
  3399  00EE38  C003  FFAA         	movff	ee_write@page,4010	;volatile
  3400                           
  3401                           ;eeprom.c: 30: EEADR = addr;
  3402  00EE3C  C001  FFA9         	movff	ee_write@addr,4009	;volatile
  3403                           
  3404                           ;eeprom.c: 31: EEDATA = data;
  3405  00EE40  C002  FFA8         	movff	ee_write@data,4008	;volatile
  3406                           
  3407                           ;eeprom.c: 32: CFGS = 0;
  3408  00EE44  9CA6               	bcf	4006,6,c	;volsfr
  3409                           
  3410                           ;eeprom.c: 33: EEPGD = 0;
  3411  00EE46  9EA6               	bcf	4006,7,c	;volsfr
  3412                           
  3413                           ;eeprom.c: 34: WREN = 1;
  3414  00EE48  84A6               	bsf	4006,2,c	;volsfr
  3415                           
  3416                           ;eeprom.c: 35: GIE = 0;
  3417  00EE4A  9EF2               	bcf	intcon,7,c	;volatile
  3418                           
  3419                           ;eeprom.c: 36: EECON2 = 0x55;
  3420  00EE4C  0E55               	movlw	85
  3421  00EE4E  6EA7               	movwf	4007,c	;volsfr
  3422                           
  3423                           ;eeprom.c: 37: EECON2 = 0xAA;
  3424  00EE50  0EAA               	movlw	170
  3425  00EE52  6EA7               	movwf	4007,c	;volsfr
  3426                           
  3427                           ;eeprom.c: 38: WR = 1;
  3428  00EE54  82A6               	bsf	4006,1,c	;volsfr
  3429                           
  3430                           ;eeprom.c: 39: GIE = 1;
  3431  00EE56  8EF2               	bsf	intcon,7,c	;volatile
  3432                           
  3433                           ;eeprom.c: 40: WREN = 0;
  3434  00EE58  94A6               	bcf	4006,2,c	;volsfr
  3435  00EE5A  B2A6               	btfsc	4006,1,c	;volsfr
  3436  00EE5C  D7FE               	goto	l656
  3437                           
  3438                           ;eeprom.c: 42: PIR2bits.EEIF = 0;
  3439  00EE5E  98A1               	bcf	4001,4,c	;volatile
  3440                           
  3441                           ;eeprom.c: 43: GIE = 1;
  3442  00EE60  8EF2               	bsf	intcon,7,c	;volatile
  3443  00EE62  0012               	return		;funcret
  3444  00EE64                     __end_of_ee_write:
  3445                           	opt stack 0
  3446                           tblptru	equ	0xFF8
  3447                           tblptrh	equ	0xFF7
  3448                           tblptrl	equ	0xFF6
  3449                           tablat	equ	0xFF5
  3450                           prodh	equ	0xFF4
  3451                           prodl	equ	0xFF3
  3452                           intcon	equ	0xFF2
  3453                           postinc0	equ	0xFEE
  3454                           wreg	equ	0xFE8
  3455                           postdec1	equ	0xFE5
  3456                           fsr1l	equ	0xFE1
  3457                           indf2	equ	0xFDF
  3458                           postinc2	equ	0xFDE
  3459                           fsr2h	equ	0xFDA
  3460                           fsr2l	equ	0xFD9
  3461                           status	equ	0xFD8
  3462                           
  3463 ;; *************** function _is_first_run *****************
  3464 ;; Defined at:
  3465 ;;		line 69 in file "module.c"
  3466 ;; Parameters:    Size  Location     Type
  3467 ;;		None
  3468 ;; Auto vars:     Size  Location     Type
  3469 ;;		None
  3470 ;; Return value:  Size  Location     Type
  3471 ;;                  1    wreg      unsigned char 
  3472 ;; Registers used:
  3473 ;;		wreg, status,2, cstack
  3474 ;; Tracked objects:
  3475 ;;		On entry : 0/0
  3476 ;;		On exit  : 0/0
  3477 ;;		Unchanged: 0/0
  3478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3482 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3483 ;;Total ram usage:        0 bytes
  3484 ;; Hardware stack levels used:    1
  3485 ;; Hardware stack levels required when called:    1
  3486 ;; This function calls:
  3487 ;;		_ee_read
  3488 ;; This function is called by:
  3489 ;;		_md_io_setup_ok
  3490 ;; This function uses a non-reentrant model
  3491 ;;
  3492                           
  3493                           	psect	text8
  3494  00ED8C                     __ptext8:
  3495                           	opt stack 0
  3496  00ED8C                     _is_first_run:
  3497                           	opt stack 27
  3498                           
  3499                           ;module.c: 71: return (bool)(ee_read(0, 0xF0) != 0x57);
  3500                           
  3501                           ;incstack = 0
  3502  00ED8C  0EF0               	movlw	240
  3503  00ED8E  6E01               	movwf	ee_read@addr,c
  3504  00ED90  0E00               	movlw	0
  3505  00ED92  ECD2  F076         	call	_ee_read
  3506  00ED96  0A57               	xorlw	87
  3507  00ED98  B4D8               	btfsc	status,2,c
  3508  00ED9A  D002               	goto	u1730
  3509  00ED9C  0E01               	movlw	1
  3510  00ED9E  0012               	return	
  3511  00EDA0                     u1730:
  3512  00EDA0  0E00               	movlw	0
  3513  00EDA2  0012               	return	
  3514  00EDA4                     __end_of_is_first_run:
  3515                           	opt stack 0
  3516                           tblptru	equ	0xFF8
  3517                           tblptrh	equ	0xFF7
  3518                           tblptrl	equ	0xFF6
  3519                           tablat	equ	0xFF5
  3520                           prodh	equ	0xFF4
  3521                           prodl	equ	0xFF3
  3522                           intcon	equ	0xFF2
  3523                           postinc0	equ	0xFEE
  3524                           wreg	equ	0xFE8
  3525                           postdec1	equ	0xFE5
  3526                           fsr1l	equ	0xFE1
  3527                           indf2	equ	0xFDF
  3528                           postinc2	equ	0xFDE
  3529                           fsr2h	equ	0xFDA
  3530                           fsr2l	equ	0xFD9
  3531                           status	equ	0xFD8
  3532                           
  3533 ;; *************** function _ee_read *****************
  3534 ;; Defined at:
  3535 ;;		line 11 in file "eeprom.c"
  3536 ;; Parameters:    Size  Location     Type
  3537 ;;  page            1    wreg     unsigned char 
  3538 ;;  addr            1    0[COMRAM] unsigned char 
  3539 ;; Auto vars:     Size  Location     Type
  3540 ;;  page            1    1[COMRAM] unsigned char 
  3541 ;;  data            1    2[COMRAM] unsigned char 
  3542 ;; Return value:  Size  Location     Type
  3543 ;;                  1    wreg      unsigned char 
  3544 ;; Registers used:
  3545 ;;		wreg, status,2
  3546 ;; Tracked objects:
  3547 ;;		On entry : 0/0
  3548 ;;		On exit  : 0/0
  3549 ;;		Unchanged: 0/0
  3550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3551 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3552 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3554 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3555 ;;Total ram usage:        3 bytes
  3556 ;; Hardware stack levels used:    1
  3557 ;; This function calls:
  3558 ;;		Nothing
  3559 ;; This function is called by:
  3560 ;;		_is_first_run
  3561 ;;		_write_defaults
  3562 ;;		_set_pdp_ok
  3563 ;; This function uses a non-reentrant model
  3564 ;;
  3565                           
  3566                           	psect	text9
  3567  00EDA4                     __ptext9:
  3568                           	opt stack 0
  3569  00EDA4                     _ee_read:
  3570                           	opt stack 27
  3571                           
  3572                           ;incstack = 0
  3573                           ;ee_read@page stored from wreg
  3574  00EDA4  6E02               	movwf	ee_read@page,c
  3575                           
  3576                           ;eeprom.c: 13: unsigned char data;
  3577                           ;eeprom.c: 14: GIE = 0;
  3578  00EDA6  9EF2               	bcf	intcon,7,c	;volatile
  3579                           
  3580                           ;eeprom.c: 15: EEADRH = page;
  3581  00EDA8  C002  FFAA         	movff	ee_read@page,4010	;volatile
  3582                           
  3583                           ;eeprom.c: 16: EEADR = addr;
  3584  00EDAC  C001  FFA9         	movff	ee_read@addr,4009	;volatile
  3585                           
  3586                           ;eeprom.c: 17: CFGS = 0;
  3587  00EDB0  9CA6               	bcf	4006,6,c	;volsfr
  3588                           
  3589                           ;eeprom.c: 18: EEPGD = 0;
  3590  00EDB2  9EA6               	bcf	4006,7,c	;volsfr
  3591                           
  3592                           ;eeprom.c: 19: RD = 1;
  3593  00EDB4  80A6               	bsf	4006,0,c	;volsfr
  3594                           
  3595                           ;eeprom.c: 20: data = EEDATA;
  3596  00EDB6  CFA8 F003          	movff	4008,ee_read@data	;volatile
  3597                           
  3598                           ;eeprom.c: 21: GIE = 1;
  3599  00EDBA  8EF2               	bsf	intcon,7,c	;volatile
  3600                           
  3601                           ;eeprom.c: 22: return (data);
  3602  00EDBC  5003               	movf	ee_read@data,w,c
  3603  00EDBE  0012               	return	
  3604  00EDC0                     __end_of_ee_read:
  3605                           	opt stack 0
  3606                           tblptru	equ	0xFF8
  3607                           tblptrh	equ	0xFF7
  3608                           tblptrl	equ	0xFF6
  3609                           tablat	equ	0xFF5
  3610                           prodh	equ	0xFF4
  3611                           prodl	equ	0xFF3
  3612                           intcon	equ	0xFF2
  3613                           postinc0	equ	0xFEE
  3614                           wreg	equ	0xFE8
  3615                           postdec1	equ	0xFE5
  3616                           fsr1l	equ	0xFE1
  3617                           indf2	equ	0xFDF
  3618                           postinc2	equ	0xFDE
  3619                           fsr2h	equ	0xFDA
  3620                           fsr2l	equ	0xFD9
  3621                           status	equ	0xFD8
  3622                           
  3623 ;; *************** function _init_modem_ok *****************
  3624 ;; Defined at:
  3625 ;;		line 79 in file "module.c"
  3626 ;; Parameters:    Size  Location     Type
  3627 ;;		None
  3628 ;; Auto vars:     Size  Location     Type
  3629 ;;  ledCfg         16   49[COMRAM] const unsigned char [16]
  3630 ;;  ledPattern     12   65[COMRAM] const unsigned char [12]
  3631 ;;  queryVersion   10   77[COMRAM] const unsigned char [10]
  3632 ;;  repeat          1   93[COMRAM] unsigned char 
  3633 ;;  c4              1   92[COMRAM] unsigned char 
  3634 ;;  c3              1   91[COMRAM] unsigned char 
  3635 ;;  c2              1   90[COMRAM] unsigned char 
  3636 ;;  c1              1   89[COMRAM] unsigned char 
  3637 ;;  c5              1   88[COMRAM] unsigned char 
  3638 ;;  index           1   87[COMRAM] unsigned char 
  3639 ;; Return value:  Size  Location     Type
  3640 ;;                  1    wreg      unsigned char 
  3641 ;; Registers used:
  3642 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3643 ;; Tracked objects:
  3644 ;;		On entry : 0/0
  3645 ;;		On exit  : 0/0
  3646 ;;		Unchanged: 0/0
  3647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3649 ;;      Locals:        45       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3651 ;;      Totals:        45       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3652 ;;Total ram usage:       45 bytes
  3653 ;; Hardware stack levels used:    1
  3654 ;; Hardware stack levels required when called:    4
  3655 ;; This function calls:
  3656 ;;		_delay5ms
  3657 ;;		_md_uart_write_str_ok
  3658 ;; This function is called by:
  3659 ;;		_md_io_setup_ok
  3660 ;; This function uses a non-reentrant model
  3661 ;;
  3662                           
  3663                           	psect	text10
  3664  00F5F8                     __ptext10:
  3665                           	opt stack 0
  3666  00F5F8                     _init_modem_ok:
  3667                           	opt stack 24
  3668                           
  3669                           ;module.c: 81: bool c1 = 0, c2 = 0, c3 = 0, c4 = 0, c5 = 0;
  3670                           
  3671                           ;incstack = 0
  3672  00F5F8  0E00               	movlw	0
  3673  00F5FA  6E5A               	movwf	init_modem_ok@c1,c
  3674  00F5FC  0E00               	movlw	0
  3675  00F5FE  6E5B               	movwf	init_modem_ok@c2,c
  3676  00F600  0E00               	movlw	0
  3677  00F602  6E5C               	movwf	init_modem_ok@c3,c
  3678  00F604  0E00               	movlw	0
  3679  00F606  6E5D               	movwf	init_modem_ok@c4,c
  3680  00F608  0E00               	movlw	0
  3681  00F60A  6E59               	movwf	init_modem_ok@c5,c
  3682                           
  3683                           ;module.c: 82: uint8_t repeat = 20, index = 0;
  3684  00F60C  0E14               	movlw	20
  3685  00F60E  6E5E               	movwf	init_modem_ok@repeat,c
  3686  00F610  0E00               	movlw	0
  3687  00F612  6E58               	movwf	init_modem_ok@index,c
  3688                           
  3689                           ;module.c: 86: const uint8_t ledCfg[] = "AT#GPIO=7,0,2\r\n";
  3690  00F614  0E96               	movlw	low init_modem_ok@F6780
  3691  00F616  6EF6               	movwf	tblptrl,c
  3692  00F618                     	if	1	;There is more than 1 active tblptr byte
  3693  00F618  0EFE               	movlw	high init_modem_ok@F6780
  3694  00F61A  6EF7               	movwf	tblptrh,c
  3695  00F61C                     	endif
  3696  00F61C                     	if	0	;There are less than 3 active tblptr bytes
  3697  00F61C                     	endif
  3698  00F61C  EE20  F032         	lfsr	2,init_modem_ok@ledCfg
  3699  00F620  0E0F               	movlw	15
  3700  00F622                     u1750:
  3701  00F622  0009               	tblrd		*+
  3702  00F624  CFF5 FFDE          	movff	tablat,postinc2
  3703  00F628  06E8               	decf	wreg,f,c
  3704  00F62A  E2FB               	bc	u1750
  3705                           
  3706                           ;module.c: 88: const uint8_t queryVersion[] = "AT#CGMR\r\n";
  3707  00F62C  0E0D               	movlw	low init_modem_ok@F6782
  3708  00F62E  6EF6               	movwf	tblptrl,c
  3709  00F630                     	if	1	;There is more than 1 active tblptr byte
  3710  00F630  0EFF               	movlw	high init_modem_ok@F6782
  3711  00F632  6EF7               	movwf	tblptrh,c
  3712  00F634                     	endif
  3713  00F634                     	if	0	;There are less than 3 active tblptr bytes
  3714  00F634                     	endif
  3715  00F634  EE20  F04E         	lfsr	2,init_modem_ok@queryVersion
  3716  00F638  0E09               	movlw	9
  3717  00F63A                     u1760:
  3718  00F63A  0009               	tblrd		*+
  3719  00F63C  CFF5 FFDE          	movff	tablat,postinc2
  3720  00F640  06E8               	decf	wreg,f,c
  3721  00F642  E2FB               	bc	u1760
  3722                           
  3723                           ;module.c: 89: const uint8_t ledPattern[] = "AT#SLED=4\r\n";
  3724  00F644  0ECB               	movlw	low init_modem_ok@F6784
  3725  00F646  6EF6               	movwf	tblptrl,c
  3726  00F648                     	if	1	;There is more than 1 active tblptr byte
  3727  00F648  0EFE               	movlw	high init_modem_ok@F6784
  3728  00F64A  6EF7               	movwf	tblptrh,c
  3729  00F64C                     	endif
  3730  00F64C                     	if	0	;There are less than 3 active tblptr bytes
  3731  00F64C                     	endif
  3732  00F64C  EE20  F042         	lfsr	2,init_modem_ok@ledPattern
  3733  00F650  0E0B               	movlw	11
  3734  00F652                     u1770:
  3735  00F652  0009               	tblrd		*+
  3736  00F654  CFF5 FFDE          	movff	tablat,postinc2
  3737  00F658  06E8               	decf	wreg,f,c
  3738  00F65A  E2FB               	bc	u1770
  3739                           
  3740                           ;module.c: 91: while (repeat-- > 0 && !c1)
  3741  00F65C  D00B               	goto	l443
  3742  00F65E                     
  3743                           ;module.c: 92: c1 = md_uart_write_str_ok((unsigned char *)"ATE1\r\n", 6, 1);
  3744  00F65E  0EF7               	movlw	low STR_2
  3745  00F660  6E2C               	movwf	md_uart_write_str_ok@data,c
  3746  00F662  0EFF               	movlw	high STR_2
  3747  00F664  6E2D               	movwf	md_uart_write_str_ok@data+1,c
  3748  00F666  0E06               	movlw	6
  3749  00F668  6E2E               	movwf	md_uart_write_str_ok@len,c
  3750  00F66A  0E01               	movlw	1
  3751  00F66C  6E2F               	movwf	md_uart_write_str_ok@want_ok,c
  3752  00F66E  ECEA  F077         	call	_md_uart_write_str_ok	;wreg free
  3753  00F672  6E5A               	movwf	init_modem_ok@c1,c
  3754  00F674                     l443:
  3755  00F674  065E               	decf	init_modem_ok@repeat,f,c
  3756  00F676  285E               	incf	init_modem_ok@repeat,w,c
  3757  00F678  B4D8               	btfsc	status,2,c
  3758  00F67A  D003               	goto	u1790
  3759  00F67C  505A               	movf	init_modem_ok@c1,w,c
  3760  00F67E  B4D8               	btfsc	status,2,c
  3761  00F680  D7EE               	goto	l444
  3762  00F682                     u1790:
  3763                           
  3764                           ;module.c: 93: repeat = 20;
  3765  00F682  0E14               	movlw	20
  3766  00F684  6E5E               	movwf	init_modem_ok@repeat,c
  3767                           
  3768                           ;module.c: 94: delay5ms(1);
  3769  00F686  0E00               	movlw	0
  3770  00F688  6E02               	movwf	delay5ms@cnt+1,c
  3771  00F68A  0E01               	movlw	1
  3772  00F68C  6E01               	movwf	delay5ms@cnt,c
  3773  00F68E  EC05  F077         	call	_delay5ms	;wreg free
  3774                           
  3775                           ;module.c: 95: while (repeat-- > 0 && !c2)
  3776  00F692  D00B               	goto	l448
  3777  00F694                     
  3778                           ;module.c: 96: c2 = md_uart_write_str_ok((unsigned char *)"AT+CMEE=2\r\n", 11, 1);
  3779  00F694  0ED8               	movlw	low STR_3
  3780  00F696  6E2C               	movwf	md_uart_write_str_ok@data,c
  3781  00F698  0EFF               	movlw	high STR_3
  3782  00F69A  6E2D               	movwf	md_uart_write_str_ok@data+1,c
  3783  00F69C  0E0B               	movlw	11
  3784  00F69E  6E2E               	movwf	md_uart_write_str_ok@len,c
  3785  00F6A0  0E01               	movlw	1
  3786  00F6A2  6E2F               	movwf	md_uart_write_str_ok@want_ok,c
  3787  00F6A4  ECEA  F077         	call	_md_uart_write_str_ok	;wreg free
  3788  00F6A8  6E5B               	movwf	init_modem_ok@c2,c
  3789  00F6AA                     l448:
  3790  00F6AA  065E               	decf	init_modem_ok@repeat,f,c
  3791  00F6AC  285E               	incf	init_modem_ok@repeat,w,c
  3792  00F6AE  B4D8               	btfsc	status,2,c
  3793  00F6B0  D003               	goto	u1810
  3794  00F6B2  505B               	movf	init_modem_ok@c2,w,c
  3795  00F6B4  B4D8               	btfsc	status,2,c
  3796  00F6B6  D7EE               	goto	l449
  3797  00F6B8                     u1810:
  3798                           
  3799                           ;module.c: 97: repeat = 20;
  3800  00F6B8  0E14               	movlw	20
  3801  00F6BA  6E5E               	movwf	init_modem_ok@repeat,c
  3802                           
  3803                           ;module.c: 98: delay5ms(3);
  3804  00F6BC  0E00               	movlw	0
  3805  00F6BE  6E02               	movwf	delay5ms@cnt+1,c
  3806  00F6C0  0E03               	movlw	3
  3807  00F6C2  6E01               	movwf	delay5ms@cnt,c
  3808  00F6C4  EC05  F077         	call	_delay5ms	;wreg free
  3809                           
  3810                           ;module.c: 99: while (repeat-- > 0 && !c3)
  3811  00F6C8  D00B               	goto	l453
  3812  00F6CA                     
  3813                           ;module.c: 100: c3 = md_uart_write_str_ok((unsigned char *)&ledCfg[0], sizeof(ledCfg), 1
      +                          );
  3814  00F6CA  0E32               	movlw	low init_modem_ok@ledCfg
  3815  00F6CC  6E2C               	movwf	md_uart_write_str_ok@data,c
  3816  00F6CE  0E00               	movlw	high init_modem_ok@ledCfg
  3817  00F6D0  6E2D               	movwf	md_uart_write_str_ok@data+1,c
  3818  00F6D2  0E10               	movlw	16
  3819  00F6D4  6E2E               	movwf	md_uart_write_str_ok@len,c
  3820  00F6D6  0E01               	movlw	1
  3821  00F6D8  6E2F               	movwf	md_uart_write_str_ok@want_ok,c
  3822  00F6DA  ECEA  F077         	call	_md_uart_write_str_ok	;wreg free
  3823  00F6DE  6E5C               	movwf	init_modem_ok@c3,c
  3824  00F6E0                     l453:
  3825  00F6E0  065E               	decf	init_modem_ok@repeat,f,c
  3826  00F6E2  285E               	incf	init_modem_ok@repeat,w,c
  3827  00F6E4  B4D8               	btfsc	status,2,c
  3828  00F6E6  D003               	goto	u1830
  3829  00F6E8  505C               	movf	init_modem_ok@c3,w,c
  3830  00F6EA  B4D8               	btfsc	status,2,c
  3831  00F6EC  D7EE               	goto	l454
  3832  00F6EE                     u1830:
  3833                           
  3834                           ;module.c: 101: repeat = 20;
  3835  00F6EE  0E14               	movlw	20
  3836  00F6F0  6E5E               	movwf	init_modem_ok@repeat,c
  3837                           
  3838                           ;module.c: 102: delay5ms(3);
  3839  00F6F2  0E00               	movlw	0
  3840  00F6F4  6E02               	movwf	delay5ms@cnt+1,c
  3841  00F6F6  0E03               	movlw	3
  3842  00F6F8  6E01               	movwf	delay5ms@cnt,c
  3843  00F6FA  EC05  F077         	call	_delay5ms	;wreg free
  3844                           
  3845                           ;module.c: 103: while (repeat-- > 0 && !c4)
  3846  00F6FE  D00B               	goto	l458
  3847  00F700                     
  3848                           ;module.c: 104: c4 = md_uart_write_str_ok((unsigned char *)&ledPattern[0], sizeof(ledPat
      +                          tern), 1);
  3849  00F700  0E42               	movlw	low init_modem_ok@ledPattern
  3850  00F702  6E2C               	movwf	md_uart_write_str_ok@data,c
  3851  00F704  0E00               	movlw	high init_modem_ok@ledPattern
  3852  00F706  6E2D               	movwf	md_uart_write_str_ok@data+1,c
  3853  00F708  0E0C               	movlw	12
  3854  00F70A  6E2E               	movwf	md_uart_write_str_ok@len,c
  3855  00F70C  0E01               	movlw	1
  3856  00F70E  6E2F               	movwf	md_uart_write_str_ok@want_ok,c
  3857  00F710  ECEA  F077         	call	_md_uart_write_str_ok	;wreg free
  3858  00F714  6E5D               	movwf	init_modem_ok@c4,c
  3859  00F716                     l458:
  3860  00F716  065E               	decf	init_modem_ok@repeat,f,c
  3861  00F718  285E               	incf	init_modem_ok@repeat,w,c
  3862  00F71A  B4D8               	btfsc	status,2,c
  3863  00F71C  D003               	goto	u1850
  3864  00F71E  505D               	movf	init_modem_ok@c4,w,c
  3865  00F720  B4D8               	btfsc	status,2,c
  3866  00F722  D7EE               	goto	l459
  3867  00F724                     u1850:
  3868                           
  3869                           ;module.c: 105: repeat = 20;
  3870  00F724  0E14               	movlw	20
  3871  00F726  6E5E               	movwf	init_modem_ok@repeat,c
  3872                           
  3873                           ;module.c: 106: delay5ms(3);
  3874  00F728  0E00               	movlw	0
  3875  00F72A  6E02               	movwf	delay5ms@cnt+1,c
  3876  00F72C  0E03               	movlw	3
  3877  00F72E  6E01               	movwf	delay5ms@cnt,c
  3878  00F730  EC05  F077         	call	_delay5ms	;wreg free
  3879                           
  3880                           ;module.c: 107: while (repeat-- > 0 && !c5)
  3881  00F734  D00B               	goto	l463
  3882  00F736                     
  3883                           ;module.c: 108: c5 = md_uart_write_str_ok((unsigned char *)&queryVersion[0], sizeof(quer
      +                          yVersion), 1);
  3884  00F736  0E4E               	movlw	low init_modem_ok@queryVersion
  3885  00F738  6E2C               	movwf	md_uart_write_str_ok@data,c
  3886  00F73A  0E00               	movlw	high init_modem_ok@queryVersion
  3887  00F73C  6E2D               	movwf	md_uart_write_str_ok@data+1,c
  3888  00F73E  0E0A               	movlw	10
  3889  00F740  6E2E               	movwf	md_uart_write_str_ok@len,c
  3890  00F742  0E01               	movlw	1
  3891  00F744  6E2F               	movwf	md_uart_write_str_ok@want_ok,c
  3892  00F746  ECEA  F077         	call	_md_uart_write_str_ok	;wreg free
  3893  00F74A  6E59               	movwf	init_modem_ok@c5,c
  3894  00F74C                     l463:
  3895  00F74C  065E               	decf	init_modem_ok@repeat,f,c
  3896  00F74E  285E               	incf	init_modem_ok@repeat,w,c
  3897  00F750  B4D8               	btfsc	status,2,c
  3898  00F752  D003               	goto	u1870
  3899  00F754  5059               	movf	init_modem_ok@c5,w,c
  3900  00F756  B4D8               	btfsc	status,2,c
  3901  00F758  D7EE               	goto	l464
  3902  00F75A                     u1870:
  3903                           
  3904                           ;module.c: 109: delay5ms(3);
  3905  00F75A  0E00               	movlw	0
  3906  00F75C  6E02               	movwf	delay5ms@cnt+1,c
  3907  00F75E  0E03               	movlw	3
  3908  00F760  6E01               	movwf	delay5ms@cnt,c
  3909  00F762  EC05  F077         	call	_delay5ms	;wreg free
  3910                           
  3911                           ;module.c: 111: if(c1 && c2 && c3 && c4)
  3912  00F766  505A               	movf	init_modem_ok@c1,w,c
  3913  00F768  B4D8               	btfsc	status,2,c
  3914  00F76A  D00B               	goto	l468
  3915  00F76C  505B               	movf	init_modem_ok@c2,w,c
  3916  00F76E  B4D8               	btfsc	status,2,c
  3917  00F770  D008               	goto	l468
  3918  00F772  505C               	movf	init_modem_ok@c3,w,c
  3919  00F774  B4D8               	btfsc	status,2,c
  3920  00F776  D005               	goto	l468
  3921  00F778  505D               	movf	init_modem_ok@c4,w,c
  3922  00F77A  B4D8               	btfsc	status,2,c
  3923  00F77C  D002               	goto	l468
  3924                           
  3925                           ;module.c: 112: return 1;
  3926  00F77E  0E01               	movlw	1
  3927  00F780  0012               	return	
  3928  00F782                     l468:
  3929                           
  3930                           ;module.c: 113: else
  3931                           ;module.c: 114: return 0;
  3932  00F782  0E00               	movlw	0
  3933  00F784  0012               	return	
  3934  00F786                     __end_of_init_modem_ok:
  3935                           	opt stack 0
  3936                           tblptru	equ	0xFF8
  3937                           tblptrh	equ	0xFF7
  3938                           tblptrl	equ	0xFF6
  3939                           tablat	equ	0xFF5
  3940                           prodh	equ	0xFF4
  3941                           prodl	equ	0xFF3
  3942                           intcon	equ	0xFF2
  3943                           postinc0	equ	0xFEE
  3944                           wreg	equ	0xFE8
  3945                           postdec1	equ	0xFE5
  3946                           fsr1l	equ	0xFE1
  3947                           indf2	equ	0xFDF
  3948                           postinc2	equ	0xFDE
  3949                           fsr2h	equ	0xFDA
  3950                           fsr2l	equ	0xFD9
  3951                           status	equ	0xFD8
  3952                           
  3953 ;; *************** function _is_connected *****************
  3954 ;; Defined at:
  3955 ;;		line 16 in file "network.c"
  3956 ;; Parameters:    Size  Location     Type
  3957 ;;		None
  3958 ;; Auto vars:     Size  Location     Type
  3959 ;;		None
  3960 ;; Return value:  Size  Location     Type
  3961 ;;                  1    wreg      unsigned char 
  3962 ;; Registers used:
  3963 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3964 ;; Tracked objects:
  3965 ;;		On entry : 0/0
  3966 ;;		On exit  : 0/0
  3967 ;;		Unchanged: 0/0
  3968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3970 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3972 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3973 ;;Total ram usage:        0 bytes
  3974 ;; Hardware stack levels used:    1
  3975 ;; Hardware stack levels required when called:    6
  3976 ;; This function calls:
  3977 ;;		_md_attached
  3978 ;; This function is called by:
  3979 ;;		_startup_md_ok
  3980 ;; This function uses a non-reentrant model
  3981 ;;
  3982                           
  3983                           	psect	text11
  3984  00ED44                     __ptext11:
  3985                           	opt stack 0
  3986  00ED44                     _is_connected:
  3987                           	opt stack 23
  3988                           
  3989                           ;network.c: 20: if (!md_attached()){}
  3990                           
  3991                           ;incstack = 0
  3992  00ED44  ECC2  F079         	call	_md_attached	;wreg free
  3993                           
  3994                           ;network.c: 27: return 1;
  3995  00ED48  0E01               	movlw	1
  3996  00ED4A  0012               	return	
  3997  00ED4C                     __end_of_is_connected:
  3998                           	opt stack 0
  3999                           tblptru	equ	0xFF8
  4000                           tblptrh	equ	0xFF7
  4001                           tblptrl	equ	0xFF6
  4002                           tablat	equ	0xFF5
  4003                           prodh	equ	0xFF4
  4004                           prodl	equ	0xFF3
  4005                           intcon	equ	0xFF2
  4006                           postinc0	equ	0xFEE
  4007                           wreg	equ	0xFE8
  4008                           postdec1	equ	0xFE5
  4009                           fsr1l	equ	0xFE1
  4010                           indf2	equ	0xFDF
  4011                           postinc2	equ	0xFDE
  4012                           fsr2h	equ	0xFDA
  4013                           fsr2l	equ	0xFD9
  4014                           status	equ	0xFD8
  4015                           
  4016 ;; *************** function _md_attached *****************
  4017 ;; Defined at:
  4018 ;;		line 100 in file "network.c"
  4019 ;; Parameters:    Size  Location     Type
  4020 ;;		None
  4021 ;; Auto vars:     Size  Location     Type
  4022 ;;  buf            40   44[BANK0 ] unsigned char [40]
  4023 ;;  gprs_check     12   84[BANK0 ] const unsigned char [12]
  4024 ;;  gprs_attach    11   96[BANK0 ] const unsigned char [11]
  4025 ;;  gprs_resp       9  107[BANK0 ] const unsigned char [9]
  4026 ;;  i               1  118[BANK0 ] unsigned char 
  4027 ;;  attached        1  117[BANK0 ] unsigned char 
  4028 ;;  cnt             1  116[BANK0 ] unsigned char 
  4029 ;;  temp            1    0        unsigned char 
  4030 ;; Return value:  Size  Location     Type
  4031 ;;                  1    wreg      unsigned char 
  4032 ;; Registers used:
  4033 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4034 ;; Tracked objects:
  4035 ;;		On entry : 0/0
  4036 ;;		On exit  : 0/0
  4037 ;;		Unchanged: 0/0
  4038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4040 ;;      Locals:         0      75       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4041 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4042 ;;      Totals:         2      75       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4043 ;;Total ram usage:       77 bytes
  4044 ;; Hardware stack levels used:    1
  4045 ;; Hardware stack levels required when called:    5
  4046 ;; This function calls:
  4047 ;;		_delay5ms
  4048 ;;		_md_get_str_ok
  4049 ;;		_md_uart_write_str_ok
  4050 ;;		_str_matches
  4051 ;; This function is called by:
  4052 ;;		_is_connected
  4053 ;; This function uses a non-reentrant model
  4054 ;;
  4055                           
  4056                           	psect	text12
  4057  00F384                     __ptext12:
  4058                           	opt stack 0
  4059  00F384                     _md_attached:
  4060                           	opt stack 23
  4061                           
  4062                           ;network.c: 102: const uint8_t gprs_check[] = "AT+CGATT?\r\n";
  4063                           
  4064                           ;incstack = 0
  4065  00F384  0EB3               	movlw	low md_attached@F6786
  4066  00F386  6EF6               	movwf	tblptrl,c
  4067  00F388                     	if	1	;There is more than 1 active tblptr byte
  4068  00F388  0EFE               	movlw	high md_attached@F6786
  4069  00F38A  6EF7               	movwf	tblptrh,c
  4070  00F38C                     	endif
  4071  00F38C                     	if	0	;There are less than 3 active tblptr bytes
  4072  00F38C                     	endif
  4073  00F38C  EE20  F0B4         	lfsr	2,md_attached@gprs_check
  4074  00F390  0E0B               	movlw	11
  4075  00F392                     u2150:
  4076  00F392  0009               	tblrd		*+
  4077  00F394  CFF5 FFDE          	movff	tablat,postinc2
  4078  00F398  06E8               	decf	wreg,f,c
  4079  00F39A  E2FB               	bc	u2150
  4080                           
  4081                           ;network.c: 103: const uint8_t gprs_resp[] = "+CGATT: ";
  4082  00F39C  0E17               	movlw	low md_attached@F6788
  4083  00F39E  6EF6               	movwf	tblptrl,c
  4084  00F3A0                     	if	1	;There is more than 1 active tblptr byte
  4085  00F3A0  0EFF               	movlw	high md_attached@F6788
  4086  00F3A2  6EF7               	movwf	tblptrh,c
  4087  00F3A4                     	endif
  4088  00F3A4                     	if	0	;There are less than 3 active tblptr bytes
  4089  00F3A4                     	endif
  4090  00F3A4  EE20  F0CB         	lfsr	2,md_attached@gprs_resp
  4091  00F3A8  0E08               	movlw	8
  4092  00F3AA                     u2160:
  4093  00F3AA  0009               	tblrd		*+
  4094  00F3AC  CFF5 FFDE          	movff	tablat,postinc2
  4095  00F3B0  06E8               	decf	wreg,f,c
  4096  00F3B2  E2FB               	bc	u2160
  4097                           
  4098                           ;network.c: 104: const uint8_t gprs_attach[] = "AT+CGATT=1";
  4099  00F3B4  0EE2               	movlw	low md_attached@F6790
  4100  00F3B6  6EF6               	movwf	tblptrl,c
  4101  00F3B8                     	if	1	;There is more than 1 active tblptr byte
  4102  00F3B8  0EFE               	movlw	high md_attached@F6790
  4103  00F3BA  6EF7               	movwf	tblptrh,c
  4104  00F3BC                     	endif
  4105  00F3BC                     	if	0	;There are less than 3 active tblptr bytes
  4106  00F3BC                     	endif
  4107  00F3BC  EE20  F0C0         	lfsr	2,md_attached@gprs_attach
  4108  00F3C0  0E0A               	movlw	10
  4109  00F3C2                     u2170:
  4110  00F3C2  0009               	tblrd		*+
  4111  00F3C4  CFF5 FFDE          	movff	tablat,postinc2
  4112  00F3C8  06E8               	decf	wreg,f,c
  4113  00F3CA  E2FB               	bc	u2170
  4114                           
  4115                           ;network.c: 106: uint8_t temp, i, buf[40], cnt = 15;
  4116  00F3CC  0E0F               	movlw	15
  4117  00F3CE  0100               	movlb	0	; () banked
  4118  00F3D0  6FD4               	movwf	md_attached@cnt& (0+255),b
  4119                           
  4120                           ; BSR set to: 0
  4121                           ;network.c: 107: bool attached = 0;
  4122  00F3D2  0E00               	movlw	0
  4123  00F3D4  6FD5               	movwf	md_attached@attached& (0+255),b
  4124                           
  4125                           ;network.c: 109: while (cnt-- > 0)
  4126  00F3D6  D068               	goto	l789
  4127  00F3D8                     
  4128                           ; BSR set to: 0
  4129                           ;network.c: 110: {
  4130                           ;network.c: 111: if (md_get_str_ok((uint8_t *)&gprs_check[0], sizeof(gprs_check), (uint8
      +                          _t *)&buf[0]))
  4131                           
  4132                           ; BSR set to: 0
  4133  00F3D8  0EB4               	movlw	low md_attached@gprs_check
  4134  00F3DA  6E32               	movwf	md_get_str_ok@toSend,c
  4135  00F3DC  0E00               	movlw	high md_attached@gprs_check
  4136  00F3DE  6E33               	movwf	md_get_str_ok@toSend+1,c
  4137  00F3E0  0E0C               	movlw	12
  4138  00F3E2  6E34               	movwf	md_get_str_ok@lengthToSend,c
  4139  00F3E4  0E8C               	movlw	low md_attached@buf
  4140  00F3E6  6E35               	movwf	md_get_str_ok@rtnStr,c
  4141  00F3E8  0E00               	movlw	high md_attached@buf
  4142  00F3EA  6E36               	movwf	md_get_str_ok@rtnStr+1,c
  4143  00F3EC  EC5B  F07A         	call	_md_get_str_ok	;wreg free
  4144  00F3F0  0900               	iorlw	0
  4145  00F3F2  B4D8               	btfsc	status,2,c
  4146  00F3F4  D053               	goto	l791
  4147  00F3F6                     u2180:
  4148                           
  4149                           ;network.c: 112: {
  4150                           ;network.c: 113: while (buf[i++] != ':');
  4151  00F3F6  0100               	movlb	0	; () banked
  4152  00F3F8  2BD6               	incf	md_attached@i& (0+255),f,b
  4153  00F3FA  05D6               	decf	md_attached@i& (0+255),w,b
  4154  00F3FC  6E39               	movwf	??_md_attached& (0+255),c
  4155  00F3FE  5039               	movf	??_md_attached,w,c
  4156  00F400  0D01               	mullw	1
  4157  00F402  0E8C               	movlw	low md_attached@buf
  4158  00F404  24F3               	addwf	prodl,w,c
  4159  00F406  6ED9               	movwf	fsr2l,c
  4160  00F408  0E00               	movlw	high md_attached@buf
  4161  00F40A  20F4               	addwfc	prodh,w,c
  4162  00F40C  6EDA               	movwf	fsr2h,c
  4163  00F40E  0E3A               	movlw	58
  4164  00F410  18DE               	xorwf	postinc2,w,c
  4165  00F412  A4D8               	btfss	status,2,c
  4166  00F414  D7F0               	goto	u2180
  4167                           
  4168                           ; BSR set to: 0
  4169                           ;network.c: 114: if (str_matches((uint8_t *)&buf[(uint8_t)(i - 7)], (uint8_t *)&gprs_res
      +                          p[0], 7))
  4170                           
  4171                           ; BSR set to: 0
  4172  00F416  C0D6  F039         	movff	md_attached@i,??_md_attached
  4173  00F41A  0EF9               	movlw	249
  4174  00F41C  2639               	addwf	??_md_attached,f,c
  4175  00F41E  5039               	movf	??_md_attached,w,c
  4176  00F420  0D01               	mullw	1
  4177  00F422  0E8C               	movlw	low md_attached@buf
  4178  00F424  24F3               	addwf	prodl,w,c
  4179  00F426  6E01               	movwf	str_matches@raw,c
  4180  00F428  0E00               	movlw	high md_attached@buf
  4181  00F42A  20F4               	addwfc	prodh,w,c
  4182  00F42C  6E02               	movwf	str_matches@raw+1,c
  4183  00F42E  0ECB               	movlw	low md_attached@gprs_resp
  4184  00F430  6E03               	movwf	str_matches@expected,c
  4185  00F432  0E00               	movlw	high md_attached@gprs_resp
  4186  00F434  6E04               	movwf	str_matches@expected+1,c
  4187  00F436  0E07               	movlw	7
  4188  00F438  6E05               	movwf	str_matches@len,c
  4189  00F43A  EC81  F077         	call	_str_matches	;wreg free
  4190  00F43E  0900               	iorlw	0
  4191  00F440  B4D8               	btfsc	status,2,c
  4192  00F442  D029               	goto	l799
  4193                           
  4194                           ;network.c: 115: {
  4195                           ;network.c: 116: attached = (bool)(buf[(uint8_t)(i + 1)] == '1');
  4196  00F444  C0D6  F039         	movff	md_attached@i,??_md_attached
  4197  00F448  0E01               	movlw	1
  4198  00F44A  2639               	addwf	??_md_attached,f,c
  4199  00F44C  5039               	movf	??_md_attached,w,c
  4200  00F44E  0D01               	mullw	1
  4201  00F450  0E8C               	movlw	low md_attached@buf
  4202  00F452  24F3               	addwf	prodl,w,c
  4203  00F454  6ED9               	movwf	fsr2l,c
  4204  00F456  0E00               	movlw	high md_attached@buf
  4205  00F458  20F4               	addwfc	prodh,w,c
  4206  00F45A  6EDA               	movwf	fsr2h,c
  4207  00F45C  0E31               	movlw	49
  4208  00F45E  18DE               	xorwf	postinc2,w,c
  4209  00F460  A4D8               	btfss	status,2,c
  4210  00F462  D002               	goto	u2210
  4211  00F464  0E01               	movlw	1
  4212  00F466  D001               	goto	u2220
  4213  00F468                     u2210:
  4214  00F468  0E00               	movlw	0
  4215  00F46A                     u2220:
  4216  00F46A  0100               	movlb	0	; () banked
  4217  00F46C  6FD5               	movwf	md_attached@attached& (0+255),b
  4218                           
  4219                           ; BSR set to: 0
  4220                           ;network.c: 117: if (!attached)
  4221  00F46E  51D5               	movf	md_attached@attached& (0+255),w,b
  4222  00F470  A4D8               	btfss	status,2,c
  4223  00F472  D00F               	goto	l796
  4224                           
  4225                           ; BSR set to: 0
  4226                           ;network.c: 118: {
  4227                           ;network.c: 119: if (!md_uart_write_str_ok((uint8_t *)(&gprs_attach[0]), sizeof(gprs_att
      +                          ach), 1))
  4228  00F474  0EC0               	movlw	low md_attached@gprs_attach
  4229  00F476  6E2C               	movwf	md_uart_write_str_ok@data,c
  4230  00F478  0E00               	movlw	high md_attached@gprs_attach
  4231  00F47A  6E2D               	movwf	md_uart_write_str_ok@data+1,c
  4232  00F47C  0E0B               	movlw	11
  4233  00F47E  6E2E               	movwf	md_uart_write_str_ok@len,c
  4234  00F480  0E01               	movlw	1
  4235  00F482  6E2F               	movwf	md_uart_write_str_ok@want_ok,c
  4236  00F484  ECEA  F077         	call	_md_uart_write_str_ok	;wreg free
  4237  00F488  0900               	iorlw	0
  4238  00F48A  A4D8               	btfss	status,2,c
  4239  00F48C  D004               	goto	l799
  4240                           
  4241                           ;network.c: 120: return 0;
  4242  00F48E  0E00               	movlw	0
  4243  00F490  0012               	return	
  4244  00F492                     l796:
  4245                           
  4246                           ;network.c: 122: else
  4247                           ;network.c: 123: return 1;
  4248  00F492  0E01               	movlw	1
  4249  00F494  0012               	return	
  4250  00F496                     l799:
  4251                           
  4252                           ;network.c: 124: }
  4253                           ;network.c: 125: i = 0;
  4254  00F496  0E00               	movlw	0
  4255  00F498  0100               	movlb	0	; () banked
  4256  00F49A  6FD6               	movwf	md_attached@i& (0+255),b
  4257  00F49C                     l791:
  4258                           
  4259                           ;network.c: 126: }
  4260                           ;network.c: 127: delay5ms(100);
  4261                           
  4262                           ; BSR set to: 0
  4263  00F49C  0E00               	movlw	0
  4264  00F49E  6E02               	movwf	delay5ms@cnt+1,c
  4265  00F4A0  0E64               	movlw	100
  4266  00F4A2  6E01               	movwf	delay5ms@cnt,c
  4267  00F4A4  EC05  F077         	call	_delay5ms	;wreg free
  4268  00F4A8                     l789:
  4269  00F4A8  0100               	movlb	0	; () banked
  4270  00F4AA  07D4               	decf	md_attached@cnt& (0+255),f,b
  4271  00F4AC  29D4               	incf	md_attached@cnt& (0+255),w,b
  4272  00F4AE  A4D8               	btfss	status,2,c
  4273  00F4B0  D793               	goto	l790
  4274                           
  4275                           ; BSR set to: 0
  4276                           ;network.c: 128: }
  4277                           ;network.c: 129: return attached;
  4278                           
  4279                           ; BSR set to: 0
  4280  00F4B2  51D5               	movf	md_attached@attached& (0+255),w,b
  4281  00F4B4  0012               	return	
  4282  00F4B6                     __end_of_md_attached:
  4283                           	opt stack 0
  4284                           tblptru	equ	0xFF8
  4285                           tblptrh	equ	0xFF7
  4286                           tblptrl	equ	0xFF6
  4287                           tablat	equ	0xFF5
  4288                           prodh	equ	0xFF4
  4289                           prodl	equ	0xFF3
  4290                           intcon	equ	0xFF2
  4291                           postinc0	equ	0xFEE
  4292                           wreg	equ	0xFE8
  4293                           postdec1	equ	0xFE5
  4294                           fsr1l	equ	0xFE1
  4295                           indf2	equ	0xFDF
  4296                           postinc2	equ	0xFDE
  4297                           fsr2h	equ	0xFDA
  4298                           fsr2l	equ	0xFD9
  4299                           status	equ	0xFD8
  4300                           
  4301 ;; *************** function _str_matches *****************
  4302 ;; Defined at:
  4303 ;;		line 178 in file "uart.c"
  4304 ;; Parameters:    Size  Location     Type
  4305 ;;  raw             2    0[COMRAM] PTR unsigned char 
  4306 ;;		 -> md_attached@buf(40), registration_ok@buf(32), sim_card_ok@buf(32), 
  4307 ;;  expected        2    2[COMRAM] PTR unsigned char 
  4308 ;;		 -> md_attached@gprs_resp(9), registration_ok@cereg_resp(9), registration_ok@creg_resp(8), sim_card_ok@cpinResponse(
      +13), 
  4309 ;;  len             1    4[COMRAM] unsigned char 
  4310 ;; Auto vars:     Size  Location     Type
  4311 ;;  i               1    8[COMRAM] unsigned char 
  4312 ;;  matches         1    7[COMRAM] unsigned char 
  4313 ;; Return value:  Size  Location     Type
  4314 ;;                  1    wreg      unsigned char 
  4315 ;; Registers used:
  4316 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  4317 ;; Tracked objects:
  4318 ;;		On entry : 0/0
  4319 ;;		On exit  : 0/0
  4320 ;;		Unchanged: 0/0
  4321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4322 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4323 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4324 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4325 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4326 ;;Total ram usage:        9 bytes
  4327 ;; Hardware stack levels used:    1
  4328 ;; This function calls:
  4329 ;;		Nothing
  4330 ;; This function is called by:
  4331 ;;		_sim_card_ok
  4332 ;;		_registration_ok
  4333 ;;		_md_attached
  4334 ;; This function uses a non-reentrant model
  4335 ;;
  4336                           
  4337                           	psect	text13
  4338  00EF02                     __ptext13:
  4339                           	opt stack 0
  4340  00EF02                     _str_matches:
  4341                           	opt stack 28
  4342                           
  4343                           ;uart.c: 180: bool matches = 1;
  4344                           
  4345                           ;incstack = 0
  4346  00EF02  0E01               	movlw	1
  4347  00EF04  6E08               	movwf	str_matches@matches,c
  4348                           
  4349                           ;uart.c: 181: for (uint8_t i = 0; i < len; i ++)
  4350  00EF06  0E00               	movlw	0
  4351  00EF08  6E09               	movwf	str_matches@i,c
  4352  00EF0A  D015               	goto	l278
  4353  00EF0C                     
  4354                           ;uart.c: 182: {
  4355                           ;uart.c: 183: matches &= (bool)(*raw == *expected);
  4356  00EF0C  C003  FFD9         	movff	str_matches@expected,fsr2l
  4357  00EF10  C004  FFDA         	movff	str_matches@expected+1,fsr2h
  4358  00EF14  C001  FFE1         	movff	str_matches@raw,fsr1l
  4359  00EF18  C002  FFE2         	movff	str_matches@raw+1,fsr1h
  4360  00EF1C  50DE               	movf	postinc2,w,c
  4361  00EF1E  18E6               	xorwf	postinc1,w,c
  4362  00EF20  A4D8               	btfss	status,2,c
  4363  00EF22  D002               	goto	u1570
  4364  00EF24  0E01               	movlw	1
  4365  00EF26  D001               	goto	u1580
  4366  00EF28                     u1570:
  4367  00EF28  0E00               	movlw	0
  4368  00EF2A                     u1580:
  4369  00EF2A  1608               	andwf	str_matches@matches,f,c
  4370                           
  4371                           ;uart.c: 184: raw++;
  4372  00EF2C  4A01               	infsnz	str_matches@raw,f,c
  4373  00EF2E  2A02               	incf	str_matches@raw+1,f,c
  4374                           
  4375                           ;uart.c: 185: expected++;
  4376  00EF30  4A03               	infsnz	str_matches@expected,f,c
  4377  00EF32  2A04               	incf	str_matches@expected+1,f,c
  4378  00EF34  2A09               	incf	str_matches@i,f,c
  4379  00EF36                     l278:
  4380  00EF36  5005               	movf	str_matches@len,w,c
  4381  00EF38  5C09               	subwf	str_matches@i,w,c
  4382  00EF3A  A0D8               	btfss	status,0,c
  4383  00EF3C  D7E7               	goto	l279
  4384                           
  4385                           ;uart.c: 186: }
  4386                           ;uart.c: 188: return matches;
  4387  00EF3E  5008               	movf	str_matches@matches,w,c
  4388  00EF40  0012               	return	
  4389  00EF42                     __end_of_str_matches:
  4390                           	opt stack 0
  4391                           tblptru	equ	0xFF8
  4392                           tblptrh	equ	0xFF7
  4393                           tblptrl	equ	0xFF6
  4394                           tablat	equ	0xFF5
  4395                           prodh	equ	0xFF4
  4396                           prodl	equ	0xFF3
  4397                           intcon	equ	0xFF2
  4398                           postinc0	equ	0xFEE
  4399                           wreg	equ	0xFE8
  4400                           postinc1	equ	0xFE6
  4401                           postdec1	equ	0xFE5
  4402                           fsr1h	equ	0xFE2
  4403                           fsr1l	equ	0xFE1
  4404                           indf2	equ	0xFDF
  4405                           postinc2	equ	0xFDE
  4406                           fsr2h	equ	0xFDA
  4407                           fsr2l	equ	0xFD9
  4408                           status	equ	0xFD8
  4409                           
  4410 ;; *************** function _md_get_str_ok *****************
  4411 ;; Defined at:
  4412 ;;		line 193 in file "uart.c"
  4413 ;; Parameters:    Size  Location     Type
  4414 ;;  toSend          2   49[COMRAM] PTR unsigned char 
  4415 ;;		 -> md_attached@gprs_check(12), 
  4416 ;;  lengthToSend    1   51[COMRAM] unsigned char 
  4417 ;;  rtnStr          2   52[COMRAM] PTR unsigned char 
  4418 ;;		 -> md_attached@buf(40), 
  4419 ;; Auto vars:     Size  Location     Type
  4420 ;;  k               1   42[BANK0 ] unsigned char 
  4421 ;;  buf            40    0[BANK0 ] unsigned char [40]
  4422 ;;  i               1   43[BANK0 ] unsigned char 
  4423 ;;  count           1   41[BANK0 ] unsigned char 
  4424 ;;  temp            1   40[BANK0 ] unsigned char 
  4425 ;; Return value:  Size  Location     Type
  4426 ;;                  1    wreg      unsigned char 
  4427 ;; Registers used:
  4428 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4429 ;; Tracked objects:
  4430 ;;		On entry : 0/0
  4431 ;;		On exit  : 0/0
  4432 ;;		Unchanged: 0/0
  4433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4434 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4435 ;;      Locals:         0      44       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4436 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4437 ;;      Totals:         7      44       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4438 ;;Total ram usage:       51 bytes
  4439 ;; Hardware stack levels used:    1
  4440 ;; Hardware stack levels required when called:    4
  4441 ;; This function calls:
  4442 ;;		_md_uart_write_str_ok
  4443 ;;		_setup_timer3
  4444 ;; This function is called by:
  4445 ;;		_md_attached
  4446 ;; This function uses a non-reentrant model
  4447 ;;
  4448                           
  4449                           	psect	text14
  4450  00F4B6                     __ptext14:
  4451                           	opt stack 0
  4452  00F4B6                     _md_get_str_ok:
  4453                           	opt stack 23
  4454                           
  4455                           ;uart.c: 195: md_uart_write_str_ok(toSend, lengthToSend, 0);
  4456                           
  4457                           ;incstack = 0
  4458  00F4B6  C032  F02C         	movff	md_get_str_ok@toSend,md_uart_write_str_ok@data
  4459  00F4BA  C033  F02D         	movff	md_get_str_ok@toSend+1,md_uart_write_str_ok@data+1
  4460  00F4BE  C034  F02E         	movff	md_get_str_ok@lengthToSend,md_uart_write_str_ok@len
  4461  00F4C2  0E00               	movlw	0
  4462  00F4C4  6E2F               	movwf	md_uart_write_str_ok@want_ok,c
  4463  00F4C6  ECEA  F077         	call	_md_uart_write_str_ok	;wreg free
  4464                           
  4465                           ;uart.c: 196: uint8_t buf[40],temp, i = 0, count = 15;
  4466  00F4CA  0E00               	movlw	0
  4467  00F4CC  0100               	movlb	0	; () banked
  4468  00F4CE  6F8B               	movwf	md_get_str_ok@i& (0+255),b
  4469                           
  4470                           ; BSR set to: 0
  4471  00F4D0  0E0F               	movlw	15
  4472  00F4D2  6F89               	movwf	md_get_str_ok@count& (0+255),b
  4473                           
  4474                           ; BSR set to: 0
  4475                           ;uart.c: 198: RC1IE = 0;
  4476  00F4D4  9A9D               	bcf	3997,5,c	;volatile
  4477                           
  4478                           ; BSR set to: 0
  4479                           ;uart.c: 199: CREN1 = 1;
  4480  00F4D6  88AB               	bsf	4011,4,c	;volatile
  4481                           
  4482                           ;uart.c: 200: while (count-- != 0)
  4483  00F4D8  D085               	goto	l284
  4484  00F4DA                     
  4485                           ; BSR set to: 0
  4486                           ;uart.c: 201: {
  4487                           ;uart.c: 202: setup_timer3();
  4488                           
  4489                           ; BSR set to: 0
  4490  00F4DA  ECAC  F076         	call	_setup_timer3	;wreg free
  4491                           
  4492                           ;uart.c: 203: while(!TMR3IF)
  4493  00F4DE  D07F               	goto	l296
  4494  00F4E0                     l287:
  4495                           
  4496                           ;uart.c: 204: {
  4497                           ;uart.c: 205: if( RC1IF == 1 )
  4498  00F4E0  AA9E               	btfss	3998,5,c	;volatile
  4499  00F4E2  D07D               	goto	l296
  4500                           
  4501                           ;uart.c: 206: {
  4502                           ;uart.c: 207: temp = RC1REG;
  4503  00F4E4  CFAE F088          	movff	4014,md_get_str_ok@temp	;volatile
  4504                           
  4505                           ;uart.c: 208: buf[i++] = temp;
  4506  00F4E8  0100               	movlb	0	; () banked
  4507  00F4EA  518B               	movf	md_get_str_ok@i& (0+255),w,b
  4508  00F4EC  0D01               	mullw	1
  4509  00F4EE  0E60               	movlw	low md_get_str_ok@buf
  4510  00F4F0  24F3               	addwf	prodl,w,c
  4511  00F4F2  6ED9               	movwf	fsr2l,c
  4512  00F4F4  0E00               	movlw	high md_get_str_ok@buf
  4513  00F4F6  20F4               	addwfc	prodh,w,c
  4514  00F4F8  6EDA               	movwf	fsr2h,c
  4515  00F4FA  C088  FFDF         	movff	md_get_str_ok@temp,indf2
  4516                           
  4517                           ; BSR set to: 0
  4518  00F4FE  2B8B               	incf	md_get_str_ok@i& (0+255),f,b
  4519                           
  4520                           ; BSR set to: 0
  4521                           ;uart.c: 210: if (i >= sizeof(buf))
  4522  00F500  0E27               	movlw	39
  4523  00F502  658B               	cpfsgt	md_get_str_ok@i& (0+255),b
  4524  00F504  D002               	goto	l289
  4525                           
  4526                           ; BSR set to: 0
  4527                           ;uart.c: 211: i = sizeof(buf) - 1;
  4528  00F506  0E27               	movlw	39
  4529  00F508  6F8B               	movwf	md_get_str_ok@i& (0+255),b
  4530  00F50A                     l289:
  4531                           
  4532                           ; BSR set to: 0
  4533                           ;uart.c: 213: if (buf[(uint8_t)(i-1)] == 'O' && buf[i] == 'K')
  4534                           
  4535                           ; BSR set to: 0
  4536  00F50A  C08B  F037         	movff	md_get_str_ok@i,??_md_get_str_ok
  4537  00F50E  0EFF               	movlw	255
  4538  00F510  2637               	addwf	??_md_get_str_ok,f,c
  4539  00F512  5037               	movf	??_md_get_str_ok,w,c
  4540  00F514  0D01               	mullw	1
  4541  00F516  0E60               	movlw	low md_get_str_ok@buf
  4542  00F518  24F3               	addwf	prodl,w,c
  4543  00F51A  6ED9               	movwf	fsr2l,c
  4544  00F51C  0E00               	movlw	high md_get_str_ok@buf
  4545  00F51E  20F4               	addwfc	prodh,w,c
  4546  00F520  6EDA               	movwf	fsr2h,c
  4547  00F522  0E4F               	movlw	79
  4548  00F524  18DE               	xorwf	postinc2,w,c
  4549  00F526  A4D8               	btfss	status,2,c
  4550  00F528  D02A               	goto	l290
  4551                           
  4552                           ; BSR set to: 0
  4553  00F52A  518B               	movf	md_get_str_ok@i& (0+255),w,b
  4554  00F52C  0D01               	mullw	1
  4555  00F52E  0E60               	movlw	low md_get_str_ok@buf
  4556  00F530  24F3               	addwf	prodl,w,c
  4557  00F532  6ED9               	movwf	fsr2l,c
  4558  00F534  0E00               	movlw	high md_get_str_ok@buf
  4559  00F536  20F4               	addwfc	prodh,w,c
  4560  00F538  6EDA               	movwf	fsr2h,c
  4561  00F53A  0E4B               	movlw	75
  4562  00F53C  18DE               	xorwf	postinc2,w,c
  4563  00F53E  A4D8               	btfss	status,2,c
  4564  00F540  D01E               	goto	l290
  4565                           
  4566                           ; BSR set to: 0
  4567                           ;uart.c: 214: {
  4568                           ;uart.c: 215: RC1IE = 1;
  4569  00F542  8A9D               	bsf	3997,5,c	;volatile
  4570                           
  4571                           ;uart.c: 216: CREN1 = 0;
  4572  00F544  98AB               	bcf	4011,4,c	;volatile
  4573                           
  4574                           ; BSR set to: 0
  4575                           ;uart.c: 217: for (uint8_t k = 0; k <= i; k ++)
  4576  00F546  0E00               	movlw	0
  4577  00F548  6F8A               	movwf	md_get_str_ok@k& (0+255),b
  4578  00F54A  D013               	goto	l291
  4579  00F54C                     
  4580                           ; BSR set to: 0
  4581                           ;uart.c: 218: rtnStr[k] = buf[k];
  4582                           
  4583                           ; BSR set to: 0
  4584  00F54C  518A               	movf	md_get_str_ok@k& (0+255),w,b
  4585  00F54E  0D01               	mullw	1
  4586  00F550  0E60               	movlw	low md_get_str_ok@buf
  4587  00F552  24F3               	addwf	prodl,w,c
  4588  00F554  6ED9               	movwf	fsr2l,c
  4589  00F556  0E00               	movlw	high md_get_str_ok@buf
  4590  00F558  20F4               	addwfc	prodh,w,c
  4591  00F55A  6EDA               	movwf	fsr2h,c
  4592  00F55C  518A               	movf	md_get_str_ok@k& (0+255),w,b
  4593  00F55E  0D01               	mullw	1
  4594  00F560  50F3               	movf	prodl,w,c
  4595  00F562  2435               	addwf	md_get_str_ok@rtnStr,w,c
  4596  00F564  6EE1               	movwf	fsr1l,c
  4597  00F566  50F4               	movf	prodh,w,c
  4598  00F568  2036               	addwfc	md_get_str_ok@rtnStr+1,w,c
  4599  00F56A  6EE2               	movwf	fsr1h,c
  4600  00F56C  CFDF FFE7          	movff	indf2,indf1
  4601                           
  4602                           ; BSR set to: 0
  4603  00F570  2B8A               	incf	md_get_str_ok@k& (0+255),f,b
  4604  00F572                     l291:
  4605                           
  4606                           ; BSR set to: 0
  4607                           
  4608                           ; BSR set to: 0
  4609  00F572  518A               	movf	md_get_str_ok@k& (0+255),w,b
  4610  00F574  5D8B               	subwf	md_get_str_ok@i& (0+255),w,b
  4611  00F576  B0D8               	btfsc	status,0,c
  4612  00F578  D7E9               	goto	l292
  4613                           
  4614                           ; BSR set to: 0
  4615                           ;uart.c: 219: return 1;
  4616                           
  4617                           ; BSR set to: 0
  4618  00F57A  0E01               	movlw	1
  4619                           
  4620                           ; BSR set to: 0
  4621  00F57C  0012               	return	
  4622  00F57E                     l290:
  4623                           
  4624                           ; BSR set to: 0
  4625                           ;uart.c: 221: else if (buf[(uint8_t)(i-2)] == 'E' && buf[(uint8_t)(i-1)] == 'R' && buf[i
      +                          ] == 'R')
  4626                           
  4627                           ; BSR set to: 0
  4628  00F57E  C08B  F037         	movff	md_get_str_ok@i,??_md_get_str_ok
  4629  00F582  0EFE               	movlw	254
  4630  00F584  2637               	addwf	??_md_get_str_ok,f,c
  4631  00F586  5037               	movf	??_md_get_str_ok,w,c
  4632  00F588  0D01               	mullw	1
  4633  00F58A  0E60               	movlw	low md_get_str_ok@buf
  4634  00F58C  24F3               	addwf	prodl,w,c
  4635  00F58E  6ED9               	movwf	fsr2l,c
  4636  00F590  0E00               	movlw	high md_get_str_ok@buf
  4637  00F592  20F4               	addwfc	prodh,w,c
  4638  00F594  6EDA               	movwf	fsr2h,c
  4639  00F596  0E45               	movlw	69
  4640  00F598  18DE               	xorwf	postinc2,w,c
  4641  00F59A  A4D8               	btfss	status,2,c
  4642  00F59C  D020               	goto	l296
  4643                           
  4644                           ; BSR set to: 0
  4645  00F59E  C08B  F037         	movff	md_get_str_ok@i,??_md_get_str_ok
  4646  00F5A2  0EFF               	movlw	255
  4647  00F5A4  2637               	addwf	??_md_get_str_ok,f,c
  4648  00F5A6  5037               	movf	??_md_get_str_ok,w,c
  4649  00F5A8  0D01               	mullw	1
  4650  00F5AA  0E60               	movlw	low md_get_str_ok@buf
  4651  00F5AC  24F3               	addwf	prodl,w,c
  4652  00F5AE  6ED9               	movwf	fsr2l,c
  4653  00F5B0  0E00               	movlw	high md_get_str_ok@buf
  4654  00F5B2  20F4               	addwfc	prodh,w,c
  4655  00F5B4  6EDA               	movwf	fsr2h,c
  4656  00F5B6  0E52               	movlw	82
  4657  00F5B8  18DE               	xorwf	postinc2,w,c
  4658  00F5BA  A4D8               	btfss	status,2,c
  4659  00F5BC  D010               	goto	l296
  4660                           
  4661                           ; BSR set to: 0
  4662  00F5BE  518B               	movf	md_get_str_ok@i& (0+255),w,b
  4663  00F5C0  0D01               	mullw	1
  4664  00F5C2  0E60               	movlw	low md_get_str_ok@buf
  4665  00F5C4  24F3               	addwf	prodl,w,c
  4666  00F5C6  6ED9               	movwf	fsr2l,c
  4667  00F5C8  0E00               	movlw	high md_get_str_ok@buf
  4668  00F5CA  20F4               	addwfc	prodh,w,c
  4669  00F5CC  6EDA               	movwf	fsr2h,c
  4670  00F5CE  0E52               	movlw	82
  4671  00F5D0  18DE               	xorwf	postinc2,w,c
  4672  00F5D2  A4D8               	btfss	status,2,c
  4673  00F5D4  D004               	goto	l296
  4674                           
  4675                           ; BSR set to: 0
  4676                           ;uart.c: 222: {
  4677                           ;uart.c: 223: RC1IE = 1;
  4678  00F5D6  8A9D               	bsf	3997,5,c	;volatile
  4679                           
  4680                           ;uart.c: 224: CREN1 = 0;
  4681  00F5D8  98AB               	bcf	4011,4,c	;volatile
  4682                           
  4683                           ; BSR set to: 0
  4684                           ;uart.c: 225: return 0;
  4685  00F5DA  0E00               	movlw	0
  4686                           
  4687                           ; BSR set to: 0
  4688  00F5DC  0012               	return	
  4689  00F5DE                     l296:
  4690                           
  4691                           ; BSR set to: 0
  4692                           
  4693                           ; BSR set to: 0
  4694                           
  4695                           ; BSR set to: 0
  4696  00F5DE  A2A1               	btfss	4001,1,c	;volatile
  4697  00F5E0  D77F               	goto	l287
  4698                           
  4699                           ;uart.c: 226: }
  4700                           ;uart.c: 228: }
  4701                           ;uart.c: 229: }
  4702                           ;uart.c: 230: TMR3IF = 0;
  4703  00F5E2  92A1               	bcf	4001,1,c	;volatile
  4704  00F5E4                     l284:
  4705  00F5E4  0100               	movlb	0	; () banked
  4706  00F5E6  0789               	decf	md_get_str_ok@count& (0+255),f,b
  4707  00F5E8  2989               	incf	md_get_str_ok@count& (0+255),w,b
  4708  00F5EA  A4D8               	btfss	status,2,c
  4709  00F5EC  D776               	goto	l285
  4710                           
  4711                           ; BSR set to: 0
  4712                           ;uart.c: 231: }
  4713                           ;uart.c: 232: TMR3ON = 0;
  4714  00F5EE  90B1               	bcf	4017,0,c	;volatile
  4715                           
  4716                           ;uart.c: 233: RC1IE = 1;
  4717  00F5F0  8A9D               	bsf	3997,5,c	;volatile
  4718                           
  4719                           ;uart.c: 234: CREN1 = 0;
  4720  00F5F2  98AB               	bcf	4011,4,c	;volatile
  4721                           
  4722                           ; BSR set to: 0
  4723                           ;uart.c: 235: return 0;
  4724  00F5F4  0E00               	movlw	0
  4725  00F5F6  0012               	return	
  4726  00F5F8                     __end_of_md_get_str_ok:
  4727                           	opt stack 0
  4728                           tblptru	equ	0xFF8
  4729                           tblptrh	equ	0xFF7
  4730                           tblptrl	equ	0xFF6
  4731                           tablat	equ	0xFF5
  4732                           prodh	equ	0xFF4
  4733                           prodl	equ	0xFF3
  4734                           intcon	equ	0xFF2
  4735                           postinc0	equ	0xFEE
  4736                           wreg	equ	0xFE8
  4737                           indf1	equ	0xFE7
  4738                           postinc1	equ	0xFE6
  4739                           postdec1	equ	0xFE5
  4740                           fsr1h	equ	0xFE2
  4741                           fsr1l	equ	0xFE1
  4742                           indf2	equ	0xFDF
  4743                           postinc2	equ	0xFDE
  4744                           fsr2h	equ	0xFDA
  4745                           fsr2l	equ	0xFD9
  4746                           status	equ	0xFD8
  4747                           
  4748 ;; *************** function _init_uart_modem *****************
  4749 ;; Defined at:
  4750 ;;		line 21 in file "uart.c"
  4751 ;; Parameters:    Size  Location     Type
  4752 ;;		None
  4753 ;; Auto vars:     Size  Location     Type
  4754 ;;		None
  4755 ;; Return value:  Size  Location     Type
  4756 ;;                  1    wreg      unsigned char 
  4757 ;; Registers used:
  4758 ;;		wreg, status,2
  4759 ;; Tracked objects:
  4760 ;;		On entry : 0/0
  4761 ;;		On exit  : 0/0
  4762 ;;		Unchanged: 0/0
  4763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4767 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4768 ;;Total ram usage:        0 bytes
  4769 ;; Hardware stack levels used:    1
  4770 ;; This function calls:
  4771 ;;		Nothing
  4772 ;; This function is called by:
  4773 ;;		_startup_md_ok
  4774 ;;		_init_uart
  4775 ;; This function uses a non-reentrant model
  4776 ;;
  4777                           
  4778                           	psect	text15
  4779  00EDE4                     __ptext15:
  4780                           	opt stack 0
  4781  00EDE4                     _init_uart_modem:
  4782                           	opt stack 29
  4783                           
  4784                           ;uart.c: 23: BAUDCON1bits.BRG16 = 1;
  4785                           
  4786                           ; BSR set to: 0
  4787                           ;incstack = 0
  4788  00EDE4  86B8               	bsf	4024,3,c	;volatile
  4789                           
  4790                           ;uart.c: 24: BAUDCON1bits.RCIDL = 1;
  4791  00EDE6  8CB8               	bsf	4024,6,c	;volatile
  4792                           
  4793                           ;uart.c: 25: BAUDCONbits.CKTXP = 0;
  4794  00EDE8  98B8               	bcf	4024,4,c	;volatile
  4795                           
  4796                           ;uart.c: 26: BAUDCONbits.WUE = 0;
  4797  00EDEA  92B8               	bcf	4024,1,c	;volatile
  4798                           
  4799                           ;uart.c: 27: BAUDCONbits.ABDEN = 0;
  4800  00EDEC  90B8               	bcf	4024,0,c	;volatile
  4801                           
  4802                           ;uart.c: 28: TXSTA1bits.BRGH = 1;
  4803  00EDEE  84AC               	bsf	4012,2,c	;volatile
  4804                           
  4805                           ;uart.c: 29: TXSTA1bits.SYNC = 0;
  4806  00EDF0  98AC               	bcf	4012,4,c	;volatile
  4807                           
  4808                           ;uart.c: 30: SPBRGH1 = 0;
  4809  00EDF2  0E00               	movlw	0
  4810  00EDF4  6EB0               	movwf	4016,c	;volatile
  4811                           
  4812                           ;uart.c: 31: SPBRG1 = 16;
  4813  00EDF6  0E10               	movlw	16
  4814  00EDF8  6EAF               	movwf	4015,c	;volatile
  4815                           
  4816                           ;uart.c: 33: RC1STAbits.SPEN = 1;
  4817  00EDFA  8EAB               	bsf	4011,7,c	;volatile
  4818                           
  4819                           ;uart.c: 34: TRISCbits.TRISC7 = 1;
  4820  00EDFC  8E94               	bsf	3988,7,c	;volatile
  4821                           
  4822                           ;uart.c: 35: TRISCbits.TRISC6 = 0;
  4823  00EDFE  9C94               	bcf	3988,6,c	;volatile
  4824                           
  4825                           ;uart.c: 38: RCSTA1bits.CREN = 1;
  4826  00EE00  88AB               	bsf	4011,4,c	;volatile
  4827                           
  4828                           ;uart.c: 39: TXSTA1bits.TXEN = 1;
  4829  00EE02  8AAC               	bsf	4012,5,c	;volatile
  4830                           
  4831                           ;uart.c: 41: PORTAbits.RA3 = 1;
  4832  00EE04  8680               	bsf	3968,3,c	;volatile
  4833                           
  4834                           ;uart.c: 47: PIR1bits.RC1IF = 0;
  4835  00EE06  9A9E               	bcf	3998,5,c	;volatile
  4836  00EE08  0012               	return	
  4837  00EE0A                     __end_of_init_uart_modem:
  4838                           	opt stack 0
  4839                           tblptru	equ	0xFF8
  4840                           tblptrh	equ	0xFF7
  4841                           tblptrl	equ	0xFF6
  4842                           tablat	equ	0xFF5
  4843                           prodh	equ	0xFF4
  4844                           prodl	equ	0xFF3
  4845                           intcon	equ	0xFF2
  4846                           postinc0	equ	0xFEE
  4847                           wreg	equ	0xFE8
  4848                           indf1	equ	0xFE7
  4849                           postinc1	equ	0xFE6
  4850                           postdec1	equ	0xFE5
  4851                           fsr1h	equ	0xFE2
  4852                           fsr1l	equ	0xFE1
  4853                           indf2	equ	0xFDF
  4854                           postinc2	equ	0xFDE
  4855                           fsr2h	equ	0xFDA
  4856                           fsr2l	equ	0xFD9
  4857                           status	equ	0xFD8
  4858                           
  4859 ;; *************** function _send_text *****************
  4860 ;; Defined at:
  4861 ;;		line 11 in file "sms.c"
  4862 ;; Parameters:    Size  Location     Type
  4863 ;;  msg             2   49[COMRAM] PTR unsigned char 
  4864 ;;		 -> STR_1(44), 
  4865 ;;  len             1   51[COMRAM] unsigned char 
  4866 ;;  number          2   52[COMRAM] PTR unsigned char 
  4867 ;;		 -> JENS_NUMBER(11), 
  4868 ;; Auto vars:     Size  Location     Type
  4869 ;;  buf            40    0[BANK0 ] unsigned char [40]
  4870 ;;  ready_to_wri    1   44[BANK0 ] unsigned char 
  4871 ;;  i               1   43[BANK0 ] unsigned char 
  4872 ;;  ctrlz           1   42[BANK0 ] unsigned char 
  4873 ;;  count           1   41[BANK0 ] unsigned char 
  4874 ;;  temp            1   40[BANK0 ] unsigned char 
  4875 ;; Return value:  Size  Location     Type
  4876 ;;                  1    wreg      unsigned char 
  4877 ;; Registers used:
  4878 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4879 ;; Tracked objects:
  4880 ;;		On entry : 0/0
  4881 ;;		On exit  : 0/0
  4882 ;;		Unchanged: 0/0
  4883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4884 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4885 ;;      Locals:         0      45       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4887 ;;      Totals:         5      45       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4888 ;;Total ram usage:       50 bytes
  4889 ;; Hardware stack levels used:    1
  4890 ;; Hardware stack levels required when called:    4
  4891 ;; This function calls:
  4892 ;;		_delay5ms
  4893 ;;		_md_uart_write_str_ok
  4894 ;;		_setup_timer3
  4895 ;; This function is called by:
  4896 ;;		_main
  4897 ;; This function uses a non-reentrant model
  4898 ;;
  4899                           
  4900                           	psect	text16
  4901  00F27A                     __ptext16:
  4902                           	opt stack 0
  4903  00F27A                     _send_text:
  4904                           	opt stack 26
  4905                           
  4906                           ;sms.c: 13: md_uart_write_str_ok((uint8_t *)"AT+CMGF=1\r\n", 11, 1);
  4907                           
  4908                           ;incstack = 0
  4909  00F27A  0ECC               	movlw	low STR_5
  4910  00F27C  6E2C               	movwf	md_uart_write_str_ok@data,c
  4911  00F27E  0EFF               	movlw	high STR_5
  4912  00F280  6E2D               	movwf	md_uart_write_str_ok@data+1,c
  4913  00F282  0E0B               	movlw	11
  4914  00F284  6E2E               	movwf	md_uart_write_str_ok@len,c
  4915  00F286  0E01               	movlw	1
  4916  00F288  6E2F               	movwf	md_uart_write_str_ok@want_ok,c
  4917  00F28A  ECEA  F077         	call	_md_uart_write_str_ok	;wreg free
  4918                           
  4919                           ;sms.c: 15: delay5ms(2);
  4920  00F28E  0E00               	movlw	0
  4921  00F290  6E02               	movwf	delay5ms@cnt+1,c
  4922  00F292  0E02               	movlw	2
  4923  00F294  6E01               	movwf	delay5ms@cnt,c
  4924  00F296  EC05  F077         	call	_delay5ms	;wreg free
  4925                           
  4926                           ;sms.c: 16: md_uart_write_str_ok((uint8_t *)"AT+CMGS=", 8, 0);
  4927  00F29A  0EEE               	movlw	low STR_6
  4928  00F29C  6E2C               	movwf	md_uart_write_str_ok@data,c
  4929  00F29E  0EFF               	movlw	high STR_6
  4930  00F2A0  6E2D               	movwf	md_uart_write_str_ok@data+1,c
  4931  00F2A2  0E08               	movlw	8
  4932  00F2A4  6E2E               	movwf	md_uart_write_str_ok@len,c
  4933  00F2A6  0E00               	movlw	0
  4934  00F2A8  6E2F               	movwf	md_uart_write_str_ok@want_ok,c
  4935  00F2AA  ECEA  F077         	call	_md_uart_write_str_ok	;wreg free
  4936                           
  4937                           ;sms.c: 17: md_uart_write_str_ok(number, 10, 0);
  4938  00F2AE  C035  F02C         	movff	send_text@number,md_uart_write_str_ok@data
  4939  00F2B2  C036  F02D         	movff	send_text@number+1,md_uart_write_str_ok@data+1
  4940  00F2B6  0E0A               	movlw	10
  4941  00F2B8  6E2E               	movwf	md_uart_write_str_ok@len,c
  4942  00F2BA  0E00               	movlw	0
  4943  00F2BC  6E2F               	movwf	md_uart_write_str_ok@want_ok,c
  4944  00F2BE  ECEA  F077         	call	_md_uart_write_str_ok	;wreg free
  4945                           
  4946                           ;sms.c: 18: md_uart_write_str_ok((uint8_t *)"\r\n", 2, 0);
  4947  00F2C2  0EC9               	movlw	low (STR_1+41)
  4948  00F2C4  6E2C               	movwf	md_uart_write_str_ok@data,c
  4949  00F2C6  0EFF               	movlw	high (STR_1+41)
  4950  00F2C8  6E2D               	movwf	md_uart_write_str_ok@data+1,c
  4951  00F2CA  0E02               	movlw	2
  4952  00F2CC  6E2E               	movwf	md_uart_write_str_ok@len,c
  4953  00F2CE  0E00               	movlw	0
  4954  00F2D0  6E2F               	movwf	md_uart_write_str_ok@want_ok,c
  4955  00F2D2  ECEA  F077         	call	_md_uart_write_str_ok	;wreg free
  4956                           
  4957                           ;sms.c: 20: uint8_t buf[40],temp, i = 0, count = 15, ctrlz = 26;
  4958  00F2D6  0E00               	movlw	0
  4959  00F2D8  0100               	movlb	0	; () banked
  4960  00F2DA  6F8B               	movwf	send_text@i& (0+255),b
  4961                           
  4962                           ; BSR set to: 0
  4963  00F2DC  0E0F               	movlw	15
  4964  00F2DE  6F89               	movwf	send_text@count& (0+255),b
  4965                           
  4966                           ; BSR set to: 0
  4967  00F2E0  0E1A               	movlw	26
  4968  00F2E2  6F8A               	movwf	send_text@ctrlz& (0+255),b
  4969                           
  4970                           ; BSR set to: 0
  4971                           ;sms.c: 21: bool ready_to_write = 0;
  4972  00F2E4  0E00               	movlw	0
  4973  00F2E6  6F8C               	movwf	send_text@ready_to_write& (0+255),b
  4974                           
  4975                           ; BSR set to: 0
  4976                           ;sms.c: 23: RC1IE = 0;
  4977  00F2E8  9A9D               	bcf	3997,5,c	;volatile
  4978                           
  4979                           ; BSR set to: 0
  4980                           ;sms.c: 24: CREN1 = 1;
  4981  00F2EA  88AB               	bsf	4011,4,c	;volatile
  4982                           
  4983                           ;sms.c: 25: while (count-- != 0 && !ready_to_write)
  4984  00F2EC  D028               	goto	l891
  4985  00F2EE                     
  4986                           ; BSR set to: 0
  4987                           ;sms.c: 26: {
  4988                           ;sms.c: 27: setup_timer3();
  4989                           
  4990                           ; BSR set to: 0
  4991  00F2EE  ECAC  F076         	call	_setup_timer3	;wreg free
  4992                           
  4993                           ;sms.c: 28: while(!TMR3IF && !ready_to_write)
  4994  00F2F2  D01E               	goto	l895
  4995  00F2F4                     l894:
  4996                           
  4997                           ; BSR set to: 0
  4998                           ;sms.c: 29: {
  4999                           ;sms.c: 30: if( RC1IF == 1 )
  5000  00F2F4  AA9E               	btfss	3998,5,c	;volatile
  5001  00F2F6  D01C               	goto	l895
  5002                           
  5003                           ; BSR set to: 0
  5004                           ;sms.c: 31: {
  5005                           ;sms.c: 32: temp = RC1REG;
  5006  00F2F8  CFAE F088          	movff	4014,send_text@temp	;volatile
  5007                           
  5008                           ; BSR set to: 0
  5009                           ;sms.c: 33: buf[i++] = temp;
  5010  00F2FC  518B               	movf	send_text@i& (0+255),w,b
  5011  00F2FE  0D01               	mullw	1
  5012  00F300  0E60               	movlw	low send_text@buf
  5013  00F302  24F3               	addwf	prodl,w,c
  5014  00F304  6ED9               	movwf	fsr2l,c
  5015  00F306  0E00               	movlw	high send_text@buf
  5016  00F308  20F4               	addwfc	prodh,w,c
  5017  00F30A  6EDA               	movwf	fsr2h,c
  5018  00F30C  C088  FFDF         	movff	send_text@temp,indf2
  5019                           
  5020                           ; BSR set to: 0
  5021  00F310  2B8B               	incf	send_text@i& (0+255),f,b
  5022                           
  5023                           ; BSR set to: 0
  5024                           ;sms.c: 35: if (i >= 20)
  5025  00F312  0E13               	movlw	19
  5026  00F314  658B               	cpfsgt	send_text@i& (0+255),b
  5027  00F316  D002               	goto	l896
  5028                           
  5029                           ; BSR set to: 0
  5030                           ;sms.c: 36: i = 19;
  5031  00F318  0E13               	movlw	19
  5032  00F31A  6F8B               	movwf	send_text@i& (0+255),b
  5033  00F31C                     l896:
  5034                           
  5035                           ; BSR set to: 0
  5036                           ;sms.c: 38: if (buf[0] == '>')
  5037                           
  5038                           ; BSR set to: 0
  5039  00F31C  0E3E               	movlw	62
  5040  00F31E  1960               	xorwf	send_text@buf& (0+255),w,b
  5041  00F320  A4D8               	btfss	status,2,c
  5042  00F322  D004               	goto	l897
  5043                           
  5044                           ; BSR set to: 0
  5045                           ;sms.c: 39: {
  5046                           ;sms.c: 40: RC1IE = 1;
  5047  00F324  8A9D               	bsf	3997,5,c	;volatile
  5048                           
  5049                           ;sms.c: 41: CREN1 = 0;
  5050  00F326  98AB               	bcf	4011,4,c	;volatile
  5051                           
  5052                           ; BSR set to: 0
  5053                           ;sms.c: 42: ready_to_write = 1;
  5054  00F328  0E01               	movlw	1
  5055  00F32A  6F8C               	movwf	send_text@ready_to_write& (0+255),b
  5056  00F32C                     l897:
  5057                           
  5058                           ; BSR set to: 0
  5059                           ;sms.c: 43: }
  5060                           ;sms.c: 44: i = 0;
  5061  00F32C  0E00               	movlw	0
  5062  00F32E  6F8B               	movwf	send_text@i& (0+255),b
  5063  00F330                     l895:
  5064                           
  5065                           ; BSR set to: 0
  5066                           
  5067                           ; BSR set to: 0
  5068  00F330  B2A1               	btfsc	4001,1,c	;volatile
  5069  00F332  D004               	goto	u2680
  5070  00F334  0100               	movlb	0	; () banked
  5071  00F336  518C               	movf	send_text@ready_to_write& (0+255),w,b
  5072  00F338  B4D8               	btfsc	status,2,c
  5073  00F33A  D7DC               	goto	l894
  5074  00F33C                     u2680:
  5075                           
  5076                           ;sms.c: 46: }
  5077                           ;sms.c: 47: }
  5078                           ;sms.c: 48: TMR3IF = 0;
  5079                           
  5080                           ; BSR set to: 0
  5081  00F33C  92A1               	bcf	4001,1,c	;volatile
  5082  00F33E                     l891:
  5083  00F33E  0100               	movlb	0	; () banked
  5084  00F340  0789               	decf	send_text@count& (0+255),f,b
  5085  00F342  2989               	incf	send_text@count& (0+255),w,b
  5086  00F344  B4D8               	btfsc	status,2,c
  5087  00F346  D003               	goto	u2700
  5088                           
  5089                           ; BSR set to: 0
  5090  00F348  518C               	movf	send_text@ready_to_write& (0+255),w,b
  5091  00F34A  B4D8               	btfsc	status,2,c
  5092  00F34C  D7D0               	goto	l892
  5093  00F34E                     u2700:
  5094                           
  5095                           ; BSR set to: 0
  5096                           ;sms.c: 49: }
  5097                           ;sms.c: 50: TMR3ON = 0;
  5098                           
  5099                           ; BSR set to: 0
  5100  00F34E  90B1               	bcf	4017,0,c	;volatile
  5101                           
  5102                           ;sms.c: 51: RC1IE = 1;
  5103  00F350  8A9D               	bsf	3997,5,c	;volatile
  5104                           
  5105                           ;sms.c: 52: CREN1 = 0;
  5106  00F352  98AB               	bcf	4011,4,c	;volatile
  5107                           
  5108                           ; BSR set to: 0
  5109                           ;sms.c: 54: if (ready_to_write)
  5110  00F354  518C               	movf	send_text@ready_to_write& (0+255),w,b
  5111  00F356  B4D8               	btfsc	status,2,c
  5112  00F358  0012               	return	
  5113                           
  5114                           ; BSR set to: 0
  5115                           ;sms.c: 55: {
  5116                           ;sms.c: 56: md_uart_write_str_ok(msg, len, 0);
  5117  00F35A  C032  F02C         	movff	send_text@msg,md_uart_write_str_ok@data
  5118  00F35E  C033  F02D         	movff	send_text@msg+1,md_uart_write_str_ok@data+1
  5119  00F362  C034  F02E         	movff	send_text@len,md_uart_write_str_ok@len
  5120  00F366  0E00               	movlw	0
  5121  00F368  6E2F               	movwf	md_uart_write_str_ok@want_ok,c
  5122  00F36A  ECEA  F077         	call	_md_uart_write_str_ok	;wreg free
  5123                           
  5124                           ;sms.c: 57: if (md_uart_write_str_ok((uint8_t *)&ctrlz, 1, 1))
  5125  00F36E  0E8A               	movlw	low send_text@ctrlz
  5126  00F370  6E2C               	movwf	md_uart_write_str_ok@data,c
  5127  00F372  0E00               	movlw	high send_text@ctrlz
  5128  00F374  6E2D               	movwf	md_uart_write_str_ok@data+1,c
  5129  00F376  0E01               	movlw	1
  5130  00F378  6E2E               	movwf	md_uart_write_str_ok@len,c
  5131  00F37A  0E01               	movlw	1
  5132  00F37C  6E2F               	movwf	md_uart_write_str_ok@want_ok,c
  5133  00F37E  ECEA  F077         	call	_md_uart_write_str_ok	;wreg free
  5134                           
  5135                           ;sms.c: 62: else
  5136                           ;sms.c: 63: return 0;
  5137                           ;	Return value of _send_text is never used
  5138                           
  5139                           ;sms.c: 61: }
  5140                           
  5141                           ;sms.c: 59: else
  5142                           ;sms.c: 60: return 0;
  5143                           ;	Return value of _send_text is never used
  5144                           
  5145                           ;sms.c: 58: return 1;
  5146                           ;	Return value of _send_text is never used
  5147  00F382  0012               	return	
  5148  00F384                     __end_of_send_text:
  5149                           	opt stack 0
  5150                           tblptru	equ	0xFF8
  5151                           tblptrh	equ	0xFF7
  5152                           tblptrl	equ	0xFF6
  5153                           tablat	equ	0xFF5
  5154                           prodh	equ	0xFF4
  5155                           prodl	equ	0xFF3
  5156                           intcon	equ	0xFF2
  5157                           postinc0	equ	0xFEE
  5158                           wreg	equ	0xFE8
  5159                           indf1	equ	0xFE7
  5160                           postinc1	equ	0xFE6
  5161                           postdec1	equ	0xFE5
  5162                           fsr1h	equ	0xFE2
  5163                           fsr1l	equ	0xFE1
  5164                           indf2	equ	0xFDF
  5165                           postinc2	equ	0xFDE
  5166                           fsr2h	equ	0xFDA
  5167                           fsr2l	equ	0xFD9
  5168                           status	equ	0xFD8
  5169                           
  5170 ;; *************** function _md_restart *****************
  5171 ;; Defined at:
  5172 ;;		line 22 in file "module.c"
  5173 ;; Parameters:    Size  Location     Type
  5174 ;;		None
  5175 ;; Auto vars:     Size  Location     Type
  5176 ;;		None
  5177 ;; Return value:  Size  Location     Type
  5178 ;;                  1    wreg      void 
  5179 ;; Registers used:
  5180 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5181 ;; Tracked objects:
  5182 ;;		On entry : 0/0
  5183 ;;		On exit  : 0/0
  5184 ;;		Unchanged: 0/0
  5185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5187 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5189 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5190 ;;Total ram usage:        0 bytes
  5191 ;; Hardware stack levels used:    1
  5192 ;; Hardware stack levels required when called:    5
  5193 ;; This function calls:
  5194 ;;		_delay5ms
  5195 ;;		_wakeup_module_ok
  5196 ;; This function is called by:
  5197 ;;		_main
  5198 ;; This function uses a non-reentrant model
  5199 ;;
  5200                           
  5201                           	psect	text17
  5202  00ED76                     __ptext17:
  5203                           	opt stack 0
  5204  00ED76                     _md_restart:
  5205                           	opt stack 25
  5206                           
  5207                           ;module.c: 24: PORTAbits.RA3 = 0;
  5208                           
  5209                           ;incstack = 0
  5210  00ED76  9680               	bcf	3968,3,c	;volatile
  5211                           
  5212                           ;module.c: 25: delay5ms(1000);
  5213  00ED78  0E03               	movlw	3
  5214  00ED7A  6E02               	movwf	delay5ms@cnt+1,c
  5215  00ED7C  0EE8               	movlw	232
  5216  00ED7E  6E01               	movwf	delay5ms@cnt,c
  5217  00ED80  EC05  F077         	call	_delay5ms	;wreg free
  5218                           
  5219                           ;module.c: 26: PORTAbits.RA3 = 1;
  5220  00ED84  8680               	bsf	3968,3,c	;volatile
  5221                           
  5222                           ;module.c: 27: wakeup_module_ok();
  5223  00ED86  EC63  F078         	call	_wakeup_module_ok	;wreg free
  5224  00ED8A  0012               	return		;funcret
  5225  00ED8C                     __end_of_md_restart:
  5226                           	opt stack 0
  5227                           tblptru	equ	0xFF8
  5228                           tblptrh	equ	0xFF7
  5229                           tblptrl	equ	0xFF6
  5230                           tablat	equ	0xFF5
  5231                           prodh	equ	0xFF4
  5232                           prodl	equ	0xFF3
  5233                           intcon	equ	0xFF2
  5234                           postinc0	equ	0xFEE
  5235                           wreg	equ	0xFE8
  5236                           indf1	equ	0xFE7
  5237                           postinc1	equ	0xFE6
  5238                           postdec1	equ	0xFE5
  5239                           fsr1h	equ	0xFE2
  5240                           fsr1l	equ	0xFE1
  5241                           indf2	equ	0xFDF
  5242                           postinc2	equ	0xFDE
  5243                           fsr2h	equ	0xFDA
  5244                           fsr2l	equ	0xFD9
  5245                           status	equ	0xFD8
  5246                           
  5247 ;; *************** function _wakeup_module_ok *****************
  5248 ;; Defined at:
  5249 ;;		line 31 in file "module.c"
  5250 ;; Parameters:    Size  Location     Type
  5251 ;;		None
  5252 ;; Auto vars:     Size  Location     Type
  5253 ;;  i               1   74[COMRAM] unsigned char 
  5254 ;;  read_buf       20    0        unsigned char [20]
  5255 ;;  ipr            16   49[COMRAM] unsigned char [16]
  5256 ;;  initStr         5   65[COMRAM] unsigned char [5]
  5257 ;;  cnt             1   73[COMRAM] unsigned char 
  5258 ;;  rsp2_ok         1   72[COMRAM] unsigned char 
  5259 ;;  rsp1_ok         1   71[COMRAM] unsigned char 
  5260 ;; Return value:  Size  Location     Type
  5261 ;;                  1    wreg      unsigned char 
  5262 ;; Registers used:
  5263 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5264 ;; Tracked objects:
  5265 ;;		On entry : 0/0
  5266 ;;		On exit  : 0/0
  5267 ;;		Unchanged: 0/0
  5268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5270 ;;      Locals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5272 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5273 ;;Total ram usage:       26 bytes
  5274 ;; Hardware stack levels used:    1
  5275 ;; Hardware stack levels required when called:    4
  5276 ;; This function calls:
  5277 ;;		_delay5ms
  5278 ;;		_md_uart_write_str_ok
  5279 ;; This function is called by:
  5280 ;;		_md_restart
  5281 ;;		_startup_md_ok
  5282 ;; This function uses a non-reentrant model
  5283 ;;
  5284                           
  5285                           	psect	text18
  5286  00F0C6                     __ptext18:
  5287                           	opt stack 0
  5288  00F0C6                     _wakeup_module_ok:
  5289                           	opt stack 25
  5290                           
  5291                           ;module.c: 33: uint8_t read_buf[20];
  5292                           ;module.c: 34: PORTAbits.RA3 = 1;
  5293                           
  5294                           ;incstack = 0
  5295  00F0C6  8680               	bsf	3968,3,c	;volatile
  5296                           
  5297                           ;module.c: 35: uint8_t initStr[] = "AT\r\n";
  5298  00F0C8  EE20  F0E7         	lfsr	2,wakeup_module_ok@F6758
  5299  00F0CC  EE10  F042         	lfsr	1,wakeup_module_ok@initStr
  5300  00F0D0  0E04               	movlw	4
  5301  00F0D2                     u2261:
  5302  00F0D2  CFDB FFE3          	movff	plusw2,plusw1
  5303  00F0D6  06E8               	decf	wreg,f,c
  5304  00F0D8  E2FC               	bc	u2261
  5305                           
  5306                           ;module.c: 36: uint8_t ipr[] = "AT+IPR=115200\r\n";
  5307  00F0DA  EE20  F0D7         	lfsr	2,wakeup_module_ok@F6760
  5308  00F0DE  EE10  F032         	lfsr	1,wakeup_module_ok@ipr
  5309  00F0E2  0E0F               	movlw	15
  5310  00F0E4                     u2271:
  5311  00F0E4  CFDB FFE3          	movff	plusw2,plusw1
  5312  00F0E8  06E8               	decf	wreg,f,c
  5313  00F0EA  E2FC               	bc	u2271
  5314                           
  5315                           ;module.c: 37: uint8_t cnt = 15;
  5316  00F0EC  0E0F               	movlw	15
  5317  00F0EE  6E4A               	movwf	wakeup_module_ok@cnt,c
  5318                           
  5319                           ;module.c: 38: bool rsp1_ok, rsp2_ok;
  5320                           ;module.c: 41: for (uint8_t i = 0; i < 50; i ++)
  5321  00F0F0  0E00               	movlw	0
  5322  00F0F2  6E4B               	movwf	wakeup_module_ok@i,c
  5323  00F0F4                     l3054:
  5324  00F0F4  0E31               	movlw	49
  5325  00F0F6  644B               	cpfsgt	wakeup_module_ok@i,c
  5326  00F0F8  D001               	goto	l402
  5327  00F0FA  D013               	goto	l404
  5328  00F0FC                     l402:
  5329                           
  5330                           ;module.c: 42: delay5ms(200);
  5331  00F0FC  0E00               	movlw	0
  5332  00F0FE  6E02               	movwf	delay5ms@cnt+1,c
  5333  00F100  0EC8               	movlw	200
  5334  00F102  6E01               	movwf	delay5ms@cnt,c
  5335  00F104  EC05  F077         	call	_delay5ms	;wreg free
  5336  00F108  2A4B               	incf	wakeup_module_ok@i,f,c
  5337  00F10A  D7F4               	goto	l3054
  5338  00F10C                     
  5339                           ;module.c: 45: rsp1_ok = md_uart_write_str_ok((unsigned char *)&initStr[0], sizeof(initS
      +                          tr), 1);
  5340  00F10C  0E42               	movlw	low wakeup_module_ok@initStr
  5341  00F10E  6E2C               	movwf	md_uart_write_str_ok@data,c
  5342  00F110  0E00               	movlw	high wakeup_module_ok@initStr
  5343  00F112  6E2D               	movwf	md_uart_write_str_ok@data+1,c
  5344  00F114  0E05               	movlw	5
  5345  00F116  6E2E               	movwf	md_uart_write_str_ok@len,c
  5346  00F118  0E01               	movlw	1
  5347  00F11A  6E2F               	movwf	md_uart_write_str_ok@want_ok,c
  5348  00F11C  ECEA  F077         	call	_md_uart_write_str_ok	;wreg free
  5349  00F120  6E48               	movwf	wakeup_module_ok@rsp1_ok,c
  5350  00F122                     l404:
  5351  00F122  064A               	decf	wakeup_module_ok@cnt,f,c
  5352  00F124  284A               	incf	wakeup_module_ok@cnt,w,c
  5353  00F126  B4D8               	btfsc	status,2,c
  5354  00F128  D003               	goto	u2310
  5355  00F12A  5048               	movf	wakeup_module_ok@rsp1_ok,w,c
  5356  00F12C  B4D8               	btfsc	status,2,c
  5357  00F12E  D7EE               	goto	l405
  5358  00F130                     u2310:
  5359                           
  5360                           ;module.c: 47: cnt = 15;
  5361  00F130  0E0F               	movlw	15
  5362  00F132  6E4A               	movwf	wakeup_module_ok@cnt,c
  5363                           
  5364                           ;module.c: 48: while (cnt-- > 0 && !rsp2_ok)
  5365  00F134  D00B               	goto	l409
  5366  00F136                     
  5367                           ;module.c: 49: rsp2_ok = md_uart_write_str_ok((unsigned char *)&ipr[0], sizeof(ipr), 1);
  5368  00F136  0E32               	movlw	low wakeup_module_ok@ipr
  5369  00F138  6E2C               	movwf	md_uart_write_str_ok@data,c
  5370  00F13A  0E00               	movlw	high wakeup_module_ok@ipr
  5371  00F13C  6E2D               	movwf	md_uart_write_str_ok@data+1,c
  5372  00F13E  0E10               	movlw	16
  5373  00F140  6E2E               	movwf	md_uart_write_str_ok@len,c
  5374  00F142  0E01               	movlw	1
  5375  00F144  6E2F               	movwf	md_uart_write_str_ok@want_ok,c
  5376  00F146  ECEA  F077         	call	_md_uart_write_str_ok	;wreg free
  5377  00F14A  6E49               	movwf	wakeup_module_ok@rsp2_ok,c
  5378  00F14C                     l409:
  5379  00F14C  064A               	decf	wakeup_module_ok@cnt,f,c
  5380  00F14E  284A               	incf	wakeup_module_ok@cnt,w,c
  5381  00F150  B4D8               	btfsc	status,2,c
  5382  00F152  D003               	goto	u2330
  5383  00F154  5049               	movf	wakeup_module_ok@rsp2_ok,w,c
  5384  00F156  B4D8               	btfsc	status,2,c
  5385  00F158  D7EE               	goto	l410
  5386  00F15A                     u2330:
  5387                           
  5388                           ;module.c: 51: return (bool)(rsp1_ok && rsp2_ok);
  5389  00F15A  0E00               	movlw	0
  5390  00F15C  6E47               	movwf	_wakeup_module_ok$1747,c
  5391  00F15E  5048               	movf	wakeup_module_ok@rsp1_ok,w,c
  5392  00F160  B4D8               	btfsc	status,2,c
  5393  00F162  D005               	goto	l415
  5394  00F164  5049               	movf	wakeup_module_ok@rsp2_ok,w,c
  5395  00F166  B4D8               	btfsc	status,2,c
  5396  00F168  D002               	goto	l415
  5397  00F16A  0E01               	movlw	1
  5398  00F16C  6E47               	movwf	_wakeup_module_ok$1747,c
  5399  00F16E                     l415:
  5400  00F16E  5047               	movf	_wakeup_module_ok$1747,w,c
  5401  00F170  0012               	return	
  5402  00F172                     __end_of_wakeup_module_ok:
  5403                           	opt stack 0
  5404                           tblptru	equ	0xFF8
  5405                           tblptrh	equ	0xFF7
  5406                           tblptrl	equ	0xFF6
  5407                           tablat	equ	0xFF5
  5408                           prodh	equ	0xFF4
  5409                           prodl	equ	0xFF3
  5410                           intcon	equ	0xFF2
  5411                           postinc0	equ	0xFEE
  5412                           wreg	equ	0xFE8
  5413                           indf1	equ	0xFE7
  5414                           postinc1	equ	0xFE6
  5415                           postdec1	equ	0xFE5
  5416                           plusw1	equ	0xFE3
  5417                           fsr1h	equ	0xFE2
  5418                           fsr1l	equ	0xFE1
  5419                           indf2	equ	0xFDF
  5420                           postinc2	equ	0xFDE
  5421                           plusw2	equ	0xFDB
  5422                           fsr2h	equ	0xFDA
  5423                           fsr2l	equ	0xFD9
  5424                           status	equ	0xFD8
  5425                           
  5426 ;; *************** function _md_uart_write_str_ok *****************
  5427 ;; Defined at:
  5428 ;;		line 86 in file "uart.c"
  5429 ;; Parameters:    Size  Location     Type
  5430 ;;  data            2   43[COMRAM] PTR unsigned char 
  5431 ;;		 -> send_text@ctrlz(1), STR_7(3), STR_6(9), STR_5(12), 
  5432 ;;		 -> sgact(15), set_pdp_ok@apn_buf(0), cgdcont(20), md_attached@gprs_attach(11), 
  5433 ;;		 -> md_attached@gprs_check(12), scfg(28), socket_configured@scfgext(25), STR_4(10), 
  5434 ;;		 -> registration_ok@cereg(12), registration_ok@creg(11), sim_card_ok@cpin(11), STR_3(12), 
  5435 ;;		 -> STR_2(7), init_modem_ok@ledPattern(12), init_modem_ok@queryVersion(10), init_modem_ok@ledCfg(16), 
  5436 ;;		 -> wakeup_module_ok@ipr(16), wakeup_module_ok@initStr(5), STR_1(44), JENS_NUMBER(11), 
  5437 ;;  len             1   45[COMRAM] unsigned char 
  5438 ;;  want_ok         1   46[COMRAM] unsigned char 
  5439 ;; Auto vars:     Size  Location     Type
  5440 ;;  index           1   48[COMRAM] unsigned char 
  5441 ;;  currentChar     1   47[COMRAM] unsigned char 
  5442 ;; Return value:  Size  Location     Type
  5443 ;;                  1    wreg      unsigned char 
  5444 ;; Registers used:
  5445 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5446 ;; Tracked objects:
  5447 ;;		On entry : 0/0
  5448 ;;		On exit  : 0/0
  5449 ;;		Unchanged: 0/0
  5450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5451 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5452 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5454 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5455 ;;Total ram usage:        6 bytes
  5456 ;; Hardware stack levels used:    1
  5457 ;; Hardware stack levels required when called:    3
  5458 ;; This function calls:
  5459 ;;		_md_uart_read_str
  5460 ;;		_md_uart_send
  5461 ;; This function is called by:
  5462 ;;		_md_get_str_ok
  5463 ;;		_wakeup_module_ok
  5464 ;;		_init_modem_ok
  5465 ;;		_sim_card_ok
  5466 ;;		_registration_ok
  5467 ;;		_md_attached
  5468 ;;		_send_text
  5469 ;;		_socket_configured
  5470 ;;		_set_pdp_ok
  5471 ;;		_open_pdp_ok
  5472 ;; This function uses a non-reentrant model
  5473 ;;
  5474                           
  5475                           	psect	text19
  5476  00EFD4                     __ptext19:
  5477                           	opt stack 0
  5478  00EFD4                     _md_uart_write_str_ok:
  5479                           	opt stack 25
  5480                           
  5481                           ;uart.c: 88: uint8_t index, currentChar;
  5482                           ;uart.c: 89: index = 0;
  5483                           
  5484                           ;incstack = 0
  5485  00EFD4  0E00               	movlw	0
  5486  00EFD6  6E31               	movwf	md_uart_write_str_ok@index,c
  5487                           
  5488                           ;uart.c: 90: CREN1 = 0;
  5489  00EFD8  98AB               	bcf	4011,4,c	;volatile
  5490  00EFDA  D018               	goto	l237
  5491  00EFDC                     
  5492                           ;uart.c: 92: {
  5493                           ;uart.c: 93: currentChar = *data;
  5494  00EFDC  C02C  FFF6         	movff	md_uart_write_str_ok@data,tblptrl
  5495  00EFE0  C02D  FFF7         	movff	md_uart_write_str_ok@data+1,tblptrh
  5496  00EFE4  0E00               	movlw	low (__mediumconst shr (0+16))
  5497  00EFE6  6EF8               	movwf	tblptru,c
  5498  00EFE8  0E0F               	movlw	(high __ramtop+-1)
  5499  00EFEA  64F7               	cpfsgt	tblptrh,c
  5500  00EFEC  D003               	bra	u1527
  5501  00EFEE  0008               	tblrd		*
  5502  00EFF0  50F5               	movf	tablat,w,c
  5503  00EFF2  D005               	bra	u1520
  5504  00EFF4                     u1527:
  5505  00EFF4  CFF6 FFE1          	movff	tblptrl,fsr1l
  5506  00EFF8  CFF7 FFE2          	movff	tblptrh,fsr1h
  5507  00EFFC  50E7               	movf	indf1,w,c
  5508  00EFFE                     u1520:
  5509  00EFFE  6E30               	movwf	md_uart_write_str_ok@currentChar,c
  5510                           
  5511                           ;uart.c: 94: md_uart_send(currentChar);
  5512  00F000  5030               	movf	md_uart_write_str_ok@currentChar,w,c
  5513  00F002  ECA6  F076         	call	_md_uart_send
  5514                           
  5515                           ;uart.c: 95: data++;
  5516  00F006  4A2C               	infsnz	md_uart_write_str_ok@data,f,c
  5517  00F008  2A2D               	incf	md_uart_write_str_ok@data+1,f,c
  5518  00F00A  2A31               	incf	md_uart_write_str_ok@index,f,c
  5519  00F00C                     l237:
  5520  00F00C  502E               	movf	md_uart_write_str_ok@len,w,c
  5521  00F00E  5C31               	subwf	md_uart_write_str_ok@index,w,c
  5522  00F010  A0D8               	btfss	status,0,c
  5523  00F012  D7E4               	goto	l238
  5524                           
  5525                           ;uart.c: 96: }
  5526                           ;uart.c: 102: if (want_ok)
  5527  00F014  502F               	movf	md_uart_write_str_ok@want_ok,w,c
  5528  00F016  B4D8               	btfsc	status,2,c
  5529  00F018  D009               	goto	l240
  5530                           
  5531                           ;uart.c: 103: return (bool)(md_uart_read_str() == 'K');
  5532  00F01A  EC9E  F076         	call	_md_uart_read_str	;wreg free
  5533  00F01E  0A4B               	xorlw	75
  5534  00F020  A4D8               	btfss	status,2,c
  5535  00F022  D002               	goto	u1550
  5536  00F024  0E01               	movlw	1
  5537  00F026  0012               	return	
  5538  00F028                     u1550:
  5539  00F028  0E00               	movlw	0
  5540  00F02A  0012               	return	
  5541  00F02C                     l240:
  5542                           
  5543                           ;uart.c: 104: else
  5544                           ;uart.c: 105: return 1;
  5545  00F02C  0E01               	movlw	1
  5546  00F02E  0012               	return	
  5547  00F030                     __end_of_md_uart_write_str_ok:
  5548                           	opt stack 0
  5549                           tblptru	equ	0xFF8
  5550                           tblptrh	equ	0xFF7
  5551                           tblptrl	equ	0xFF6
  5552                           tablat	equ	0xFF5
  5553                           prodh	equ	0xFF4
  5554                           prodl	equ	0xFF3
  5555                           intcon	equ	0xFF2
  5556                           postinc0	equ	0xFEE
  5557                           wreg	equ	0xFE8
  5558                           indf1	equ	0xFE7
  5559                           postinc1	equ	0xFE6
  5560                           postdec1	equ	0xFE5
  5561                           plusw1	equ	0xFE3
  5562                           fsr1h	equ	0xFE2
  5563                           fsr1l	equ	0xFE1
  5564                           indf2	equ	0xFDF
  5565                           postinc2	equ	0xFDE
  5566                           plusw2	equ	0xFDB
  5567                           fsr2h	equ	0xFDA
  5568                           fsr2l	equ	0xFD9
  5569                           status	equ	0xFD8
  5570                           
  5571 ;; *************** function _md_uart_send *****************
  5572 ;; Defined at:
  5573 ;;		line 108 in file "uart.c"
  5574 ;; Parameters:    Size  Location     Type
  5575 ;;  data            1    wreg     unsigned char 
  5576 ;; Auto vars:     Size  Location     Type
  5577 ;;  data            1    0[COMRAM] unsigned char 
  5578 ;; Return value:  Size  Location     Type
  5579 ;;                  1    wreg      void 
  5580 ;; Registers used:
  5581 ;;		wreg
  5582 ;; Tracked objects:
  5583 ;;		On entry : 0/0
  5584 ;;		On exit  : 0/0
  5585 ;;		Unchanged: 0/0
  5586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5588 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5590 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5591 ;;Total ram usage:        1 bytes
  5592 ;; Hardware stack levels used:    1
  5593 ;; This function calls:
  5594 ;;		Nothing
  5595 ;; This function is called by:
  5596 ;;		_md_uart_write_str_ok
  5597 ;; This function uses a non-reentrant model
  5598 ;;
  5599                           
  5600                           	psect	text20
  5601  00ED4C                     __ptext20:
  5602                           	opt stack 0
  5603  00ED4C                     _md_uart_send:
  5604                           	opt stack 27
  5605                           
  5606                           ;incstack = 0
  5607                           ;md_uart_send@data stored from wreg
  5608  00ED4C  6E01               	movwf	md_uart_send@data,c
  5609  00ED4E                     
  5610                           ;uart.c: 110: while (!TRMT1);
  5611  00ED4E  A2AC               	btfss	4012,1,c	;volatile
  5612  00ED50  D7FE               	goto	l2550
  5613                           
  5614                           ;uart.c: 111: TX1REG = data;
  5615  00ED52  C001  FFAD         	movff	md_uart_send@data,4013	;volatile
  5616  00ED56  0012               	return		;funcret
  5617  00ED58                     __end_of_md_uart_send:
  5618                           	opt stack 0
  5619                           tblptru	equ	0xFF8
  5620                           tblptrh	equ	0xFF7
  5621                           tblptrl	equ	0xFF6
  5622                           tablat	equ	0xFF5
  5623                           prodh	equ	0xFF4
  5624                           prodl	equ	0xFF3
  5625                           intcon	equ	0xFF2
  5626                           postinc0	equ	0xFEE
  5627                           wreg	equ	0xFE8
  5628                           indf1	equ	0xFE7
  5629                           postinc1	equ	0xFE6
  5630                           postdec1	equ	0xFE5
  5631                           plusw1	equ	0xFE3
  5632                           fsr1h	equ	0xFE2
  5633                           fsr1l	equ	0xFE1
  5634                           indf2	equ	0xFDF
  5635                           postinc2	equ	0xFDE
  5636                           plusw2	equ	0xFDB
  5637                           fsr2h	equ	0xFDA
  5638                           fsr2l	equ	0xFD9
  5639                           status	equ	0xFD8
  5640                           
  5641 ;; *************** function _md_uart_read_str *****************
  5642 ;; Defined at:
  5643 ;;		line 120 in file "uart.c"
  5644 ;; Parameters:    Size  Location     Type
  5645 ;;		None
  5646 ;; Auto vars:     Size  Location     Type
  5647 ;;		None
  5648 ;; Return value:  Size  Location     Type
  5649 ;;                  1    wreg      unsigned char 
  5650 ;; Registers used:
  5651 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5652 ;; Tracked objects:
  5653 ;;		On entry : 0/0
  5654 ;;		On exit  : 0/0
  5655 ;;		Unchanged: 0/0
  5656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5660 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5661 ;;Total ram usage:        0 bytes
  5662 ;; Hardware stack levels used:    1
  5663 ;; Hardware stack levels required when called:    2
  5664 ;; This function calls:
  5665 ;;		_wait_ok
  5666 ;; This function is called by:
  5667 ;;		_md_uart_write_str_ok
  5668 ;; This function uses a non-reentrant model
  5669 ;;
  5670                           
  5671                           	psect	text21
  5672  00ED3C                     __ptext21:
  5673                           	opt stack 0
  5674  00ED3C                     _md_uart_read_str:
  5675                           	opt stack 25
  5676                           
  5677                           ;uart.c: 122: return wait_ok(20);
  5678                           
  5679                           ;incstack = 0
  5680  00ED3C  0E14               	movlw	20
  5681  00ED3E  EC18  F078         	call	_wait_ok
  5682  00ED42  0012               	return	
  5683  00ED44                     __end_of_md_uart_read_str:
  5684                           	opt stack 0
  5685                           tblptru	equ	0xFF8
  5686                           tblptrh	equ	0xFF7
  5687                           tblptrl	equ	0xFF6
  5688                           tablat	equ	0xFF5
  5689                           prodh	equ	0xFF4
  5690                           prodl	equ	0xFF3
  5691                           intcon	equ	0xFF2
  5692                           postinc0	equ	0xFEE
  5693                           wreg	equ	0xFE8
  5694                           indf1	equ	0xFE7
  5695                           postinc1	equ	0xFE6
  5696                           postdec1	equ	0xFE5
  5697                           plusw1	equ	0xFE3
  5698                           fsr1h	equ	0xFE2
  5699                           fsr1l	equ	0xFE1
  5700                           indf2	equ	0xFDF
  5701                           postinc2	equ	0xFDE
  5702                           plusw2	equ	0xFDB
  5703                           fsr2h	equ	0xFDA
  5704                           fsr2l	equ	0xFD9
  5705                           status	equ	0xFD8
  5706                           
  5707 ;; *************** function _wait_ok *****************
  5708 ;; Defined at:
  5709 ;;		line 132 in file "uart.c"
  5710 ;; Parameters:    Size  Location     Type
  5711 ;;  count           1    wreg     unsigned char 
  5712 ;; Auto vars:     Size  Location     Type
  5713 ;;  count           1   40[COMRAM] unsigned char 
  5714 ;;  buf            40    0[COMRAM] unsigned char [40]
  5715 ;;  i               1   42[COMRAM] unsigned char 
  5716 ;;  temp            1   41[COMRAM] unsigned char 
  5717 ;; Return value:  Size  Location     Type
  5718 ;;                  1    wreg      unsigned char 
  5719 ;; Registers used:
  5720 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5721 ;; Tracked objects:
  5722 ;;		On entry : 0/0
  5723 ;;		On exit  : 0/0
  5724 ;;		Unchanged: 0/0
  5725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5727 ;;      Locals:        43       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5729 ;;      Totals:        43       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5730 ;;Total ram usage:       43 bytes
  5731 ;; Hardware stack levels used:    1
  5732 ;; Hardware stack levels required when called:    1
  5733 ;; This function calls:
  5734 ;;		_setup_timer3
  5735 ;; This function is called by:
  5736 ;;		_md_uart_read_str
  5737 ;; This function uses a non-reentrant model
  5738 ;;
  5739                           
  5740                           	psect	text22
  5741  00F030                     __ptext22:
  5742                           	opt stack 0
  5743  00F030                     _wait_ok:
  5744                           	opt stack 25
  5745                           
  5746                           ;incstack = 0
  5747                           ;wait_ok@count stored from wreg
  5748  00F030  6E29               	movwf	wait_ok@count,c
  5749                           
  5750                           ;uart.c: 134: uint8_t buf[40],temp, i = 0;
  5751  00F032  0E00               	movlw	0
  5752  00F034  6E2B               	movwf	wait_ok@i,c
  5753                           
  5754                           ;uart.c: 136: RC1IE = 0;
  5755  00F036  9A9D               	bcf	3997,5,c	;volatile
  5756                           
  5757                           ;uart.c: 137: CREN1 = 1;
  5758  00F038  88AB               	bsf	4011,4,c	;volatile
  5759                           
  5760                           ;uart.c: 138: while (count-- != 0)
  5761  00F03A  D03C               	goto	l263
  5762  00F03C                     
  5763                           ;uart.c: 139: {
  5764                           ;uart.c: 140: setup_timer3();
  5765  00F03C  ECAC  F076         	call	_setup_timer3	;wreg free
  5766                           
  5767                           ;uart.c: 141: while(!TMR3IF)
  5768  00F040  D036               	goto	l269
  5769  00F042                     l266:
  5770                           
  5771                           ;uart.c: 142: {
  5772                           ;uart.c: 143: if( RC1IF == 1 )
  5773  00F042  AA9E               	btfss	3998,5,c	;volatile
  5774  00F044  D034               	goto	l269
  5775                           
  5776                           ;uart.c: 144: {
  5777                           ;uart.c: 145: temp = RC1REG;
  5778  00F046  CFAE F02A          	movff	4014,wait_ok@temp	;volatile
  5779                           
  5780                           ;uart.c: 146: buf[i++] = temp;
  5781  00F04A  502B               	movf	wait_ok@i,w,c
  5782  00F04C  0D01               	mullw	1
  5783  00F04E  0E01               	movlw	low wait_ok@buf
  5784  00F050  24F3               	addwf	prodl,w,c
  5785  00F052  6ED9               	movwf	fsr2l,c
  5786  00F054  0E00               	movlw	high wait_ok@buf
  5787  00F056  20F4               	addwfc	prodh,w,c
  5788  00F058  6EDA               	movwf	fsr2h,c
  5789  00F05A  C02A  FFDF         	movff	wait_ok@temp,indf2
  5790  00F05E  2A2B               	incf	wait_ok@i,f,c
  5791                           
  5792                           ;uart.c: 148: if (i >= 20)
  5793  00F060  0E13               	movlw	19
  5794  00F062  642B               	cpfsgt	wait_ok@i,c
  5795  00F064  D002               	goto	l268
  5796                           
  5797                           ;uart.c: 149: i = 19;
  5798  00F066  0E13               	movlw	19
  5799  00F068  6E2B               	movwf	wait_ok@i,c
  5800  00F06A                     l268:
  5801                           
  5802                           ;uart.c: 151: if (temp == 0x0A)
  5803  00F06A  0E0A               	movlw	10
  5804  00F06C  182A               	xorwf	wait_ok@temp,w,c
  5805  00F06E  A4D8               	btfss	status,2,c
  5806  00F070  D01E               	goto	l269
  5807                           
  5808                           ;uart.c: 152: {
  5809                           ;uart.c: 153: if (buf[0] == 'O' && buf[1] == 'K')
  5810  00F072  0E4F               	movlw	79
  5811  00F074  1801               	xorwf	wait_ok@buf,w,c
  5812  00F076  A4D8               	btfss	status,2,c
  5813  00F078  D008               	goto	l270
  5814  00F07A  0E4B               	movlw	75
  5815  00F07C  1802               	xorwf	wait_ok@buf+1,w,c
  5816  00F07E  A4D8               	btfss	status,2,c
  5817  00F080  D004               	goto	l270
  5818                           
  5819                           ;uart.c: 154: {
  5820                           ;uart.c: 155: RC1IE = 1;
  5821  00F082  8A9D               	bsf	3997,5,c	;volatile
  5822                           
  5823                           ;uart.c: 156: CREN1 = 0;
  5824  00F084  98AB               	bcf	4011,4,c	;volatile
  5825                           
  5826                           ;uart.c: 157: return ('K');
  5827  00F086  0E4B               	movlw	75
  5828  00F088  0012               	return	
  5829  00F08A                     l270:
  5830                           
  5831                           ;uart.c: 159: else if (buf[0] == 'E' && buf[1] == 'R' && buf[2] == 'R')
  5832  00F08A  0E45               	movlw	69
  5833  00F08C  1801               	xorwf	wait_ok@buf,w,c
  5834  00F08E  A4D8               	btfss	status,2,c
  5835  00F090  D00C               	goto	l273
  5836  00F092  0E52               	movlw	82
  5837  00F094  1802               	xorwf	wait_ok@buf+1,w,c
  5838  00F096  A4D8               	btfss	status,2,c
  5839  00F098  D008               	goto	l273
  5840  00F09A  0E52               	movlw	82
  5841  00F09C  1803               	xorwf	wait_ok@buf+2,w,c
  5842  00F09E  A4D8               	btfss	status,2,c
  5843  00F0A0  D004               	goto	l273
  5844                           
  5845                           ;uart.c: 160: {
  5846                           ;uart.c: 161: RC1IE = 1;
  5847  00F0A2  8A9D               	bsf	3997,5,c	;volatile
  5848                           
  5849                           ;uart.c: 162: CREN1 = 0;
  5850  00F0A4  98AB               	bcf	4011,4,c	;volatile
  5851                           
  5852                           ;uart.c: 163: return ('E');
  5853  00F0A6  0E45               	movlw	69
  5854  00F0A8  0012               	return	
  5855  00F0AA                     l273:
  5856                           
  5857                           ;uart.c: 164: }
  5858                           ;uart.c: 165: i = 0;
  5859  00F0AA  0E00               	movlw	0
  5860  00F0AC  6E2B               	movwf	wait_ok@i,c
  5861  00F0AE                     l269:
  5862  00F0AE  A2A1               	btfss	4001,1,c	;volatile
  5863  00F0B0  D7C8               	goto	l266
  5864                           
  5865                           ;uart.c: 166: }
  5866                           ;uart.c: 167: }
  5867                           ;uart.c: 168: }
  5868                           ;uart.c: 169: TMR3IF = 0;
  5869  00F0B2  92A1               	bcf	4001,1,c	;volatile
  5870  00F0B4                     l263:
  5871  00F0B4  0629               	decf	wait_ok@count,f,c
  5872  00F0B6  2829               	incf	wait_ok@count,w,c
  5873  00F0B8  A4D8               	btfss	status,2,c
  5874  00F0BA  D7C0               	goto	l264
  5875                           
  5876                           ;uart.c: 170: }
  5877                           ;uart.c: 171: TMR3ON = 0;
  5878  00F0BC  90B1               	bcf	4017,0,c	;volatile
  5879                           
  5880                           ;uart.c: 172: RC1IE = 1;
  5881  00F0BE  8A9D               	bsf	3997,5,c	;volatile
  5882                           
  5883                           ;uart.c: 173: CREN1 = 0;
  5884  00F0C0  98AB               	bcf	4011,4,c	;volatile
  5885                           
  5886                           ;uart.c: 174: return('N');
  5887  00F0C2  0E4E               	movlw	78
  5888  00F0C4  0012               	return	
  5889  00F0C6                     __end_of_wait_ok:
  5890                           	opt stack 0
  5891                           tblptru	equ	0xFF8
  5892                           tblptrh	equ	0xFF7
  5893                           tblptrl	equ	0xFF6
  5894                           tablat	equ	0xFF5
  5895                           prodh	equ	0xFF4
  5896                           prodl	equ	0xFF3
  5897                           intcon	equ	0xFF2
  5898                           postinc0	equ	0xFEE
  5899                           wreg	equ	0xFE8
  5900                           indf1	equ	0xFE7
  5901                           postinc1	equ	0xFE6
  5902                           postdec1	equ	0xFE5
  5903                           plusw1	equ	0xFE3
  5904                           fsr1h	equ	0xFE2
  5905                           fsr1l	equ	0xFE1
  5906                           indf2	equ	0xFDF
  5907                           postinc2	equ	0xFDE
  5908                           plusw2	equ	0xFDB
  5909                           fsr2h	equ	0xFDA
  5910                           fsr2l	equ	0xFD9
  5911                           status	equ	0xFD8
  5912                           
  5913 ;; *************** function _setup_timer3 *****************
  5914 ;; Defined at:
  5915 ;;		line 173 in file "setup.c"
  5916 ;; Parameters:    Size  Location     Type
  5917 ;;		None
  5918 ;; Auto vars:     Size  Location     Type
  5919 ;;		None
  5920 ;; Return value:  Size  Location     Type
  5921 ;;                  1    wreg      void 
  5922 ;; Registers used:
  5923 ;;		wreg, status,2
  5924 ;; Tracked objects:
  5925 ;;		On entry : 0/0
  5926 ;;		On exit  : 0/0
  5927 ;;		Unchanged: 0/0
  5928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5932 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5933 ;;Total ram usage:        0 bytes
  5934 ;; Hardware stack levels used:    1
  5935 ;; This function calls:
  5936 ;;		Nothing
  5937 ;; This function is called by:
  5938 ;;		_wait_ok
  5939 ;;		_md_get_str_ok
  5940 ;;		_sim_card_ok
  5941 ;;		_registration_ok
  5942 ;;		_send_text
  5943 ;; This function uses a non-reentrant model
  5944 ;;
  5945                           
  5946                           	psect	text23
  5947  00ED58                     __ptext23:
  5948                           	opt stack 0
  5949  00ED58                     _setup_timer3:
  5950                           	opt stack 25
  5951                           
  5952                           ;setup.c: 175: T3CON = 0x71;
  5953                           
  5954                           ;incstack = 0
  5955  00ED58  0E71               	movlw	113
  5956  00ED5A  6EB1               	movwf	4017,c	;volatile
  5957                           
  5958                           ;setup.c: 176: TMR3H = 0x30;
  5959  00ED5C  0E30               	movlw	48
  5960  00ED5E  6EB3               	movwf	4019,c	;volatile
  5961                           
  5962                           ;setup.c: 177: TMR3L = 0;
  5963  00ED60  0E00               	movlw	0
  5964  00ED62  6EB2               	movwf	4018,c	;volatile
  5965  00ED64  0012               	return		;funcret
  5966  00ED66                     __end_of_setup_timer3:
  5967                           	opt stack 0
  5968                           tblptru	equ	0xFF8
  5969                           tblptrh	equ	0xFF7
  5970                           tblptrl	equ	0xFF6
  5971                           tablat	equ	0xFF5
  5972                           prodh	equ	0xFF4
  5973                           prodl	equ	0xFF3
  5974                           intcon	equ	0xFF2
  5975                           postinc0	equ	0xFEE
  5976                           wreg	equ	0xFE8
  5977                           indf1	equ	0xFE7
  5978                           postinc1	equ	0xFE6
  5979                           postdec1	equ	0xFE5
  5980                           plusw1	equ	0xFE3
  5981                           fsr1h	equ	0xFE2
  5982                           fsr1l	equ	0xFE1
  5983                           indf2	equ	0xFDF
  5984                           postinc2	equ	0xFDE
  5985                           plusw2	equ	0xFDB
  5986                           fsr2h	equ	0xFDA
  5987                           fsr2l	equ	0xFD9
  5988                           status	equ	0xFD8
  5989                           
  5990 ;; *************** function _delay5ms *****************
  5991 ;; Defined at:
  5992 ;;		line 55 in file "module.c"
  5993 ;; Parameters:    Size  Location     Type
  5994 ;;  cnt             2    0[COMRAM] unsigned int 
  5995 ;; Auto vars:     Size  Location     Type
  5996 ;;  j               1    3[COMRAM] unsigned char 
  5997 ;;  i               1    2[COMRAM] unsigned char 
  5998 ;; Return value:  Size  Location     Type
  5999 ;;                  1    wreg      void 
  6000 ;; Registers used:
  6001 ;;		wreg, status,2, status,0
  6002 ;; Tracked objects:
  6003 ;;		On entry : 0/0
  6004 ;;		On exit  : 0/0
  6005 ;;		Unchanged: 0/0
  6006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6007 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6008 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6010 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6011 ;;Total ram usage:        4 bytes
  6012 ;; Hardware stack levels used:    1
  6013 ;; This function calls:
  6014 ;;		Nothing
  6015 ;; This function is called by:
  6016 ;;		_md_restart
  6017 ;;		_wakeup_module_ok
  6018 ;;		_init_modem_ok
  6019 ;;		_sim_card_ok
  6020 ;;		_registration_ok
  6021 ;;		_md_attached
  6022 ;;		_send_text
  6023 ;;		_open_pdp_ok
  6024 ;; This function uses a non-reentrant model
  6025 ;;
  6026                           
  6027                           	psect	text24
  6028  00EE0A                     __ptext24:
  6029                           	opt stack 0
  6030  00EE0A                     _delay5ms:
  6031                           	opt stack 28
  6032                           
  6033                           ;module.c: 57: uint8_t i, j;
  6034                           ;module.c: 58: while(cnt-- != 0)
  6035                           
  6036                           ;incstack = 0
  6037  00EE0A  D00B               	goto	u1700
  6038  00EE0C                     l2662:
  6039                           
  6040                           ;module.c: 59: {
  6041                           ;module.c: 60: j = 100;
  6042  00EE0C  0E64               	movlw	100
  6043  00EE0E  6E04               	movwf	delay5ms@j,c
  6044                           
  6045                           ;module.c: 61: while(j-- != 0)
  6046  00EE10  D004               	goto	l425
  6047  00EE12                     
  6048                           ;module.c: 62: {
  6049                           ;module.c: 63: i = 32;
  6050  00EE12  0E20               	movlw	32
  6051  00EE14  6E03               	movwf	delay5ms@i,c
  6052  00EE16  2E03               	decfsz	delay5ms@i,f,c
  6053  00EE18  D7FE               	goto	l424
  6054  00EE1A                     l425:
  6055  00EE1A  0604               	decf	delay5ms@j,f,c
  6056  00EE1C  2804               	incf	delay5ms@j,w,c
  6057  00EE1E  A4D8               	btfss	status,2,c
  6058  00EE20  D7F8               	goto	l422
  6059  00EE22                     u1700:
  6060  00EE22  0601               	decf	delay5ms@cnt,f,c
  6061  00EE24  A0D8               	btfss	status,0,c
  6062  00EE26  0602               	decf	delay5ms@cnt+1,f,c
  6063  00EE28  2801               	incf	delay5ms@cnt,w,c
  6064  00EE2A  E1F0               	bnz	l2662
  6065  00EE2C  2802               	incf	delay5ms@cnt+1,w,c
  6066  00EE2E  B4D8               	btfsc	status,2,c
  6067  00EE30  0012               	return	
  6068  00EE32  D7EC               	goto	l420
  6069  00EE34                     __end_of_delay5ms:
  6070                           	opt stack 0
  6071                           tblptru	equ	0xFF8
  6072                           tblptrh	equ	0xFF7
  6073                           tblptrl	equ	0xFF6
  6074                           tablat	equ	0xFF5
  6075                           prodh	equ	0xFF4
  6076                           prodl	equ	0xFF3
  6077                           intcon	equ	0xFF2
  6078                           postinc0	equ	0xFEE
  6079                           wreg	equ	0xFE8
  6080                           indf1	equ	0xFE7
  6081                           postinc1	equ	0xFE6
  6082                           postdec1	equ	0xFE5
  6083                           plusw1	equ	0xFE3
  6084                           fsr1h	equ	0xFE2
  6085                           fsr1l	equ	0xFE1
  6086                           indf2	equ	0xFDF
  6087                           postinc2	equ	0xFDE
  6088                           plusw2	equ	0xFDB
  6089                           fsr2h	equ	0xFDA
  6090                           fsr2l	equ	0xFD9
  6091                           status	equ	0xFD8
  6092                           
  6093 ;; *************** function _init_pic *****************
  6094 ;; Defined at:
  6095 ;;		line 46 in file "main.c"
  6096 ;; Parameters:    Size  Location     Type
  6097 ;;		None
  6098 ;; Auto vars:     Size  Location     Type
  6099 ;;		None
  6100 ;; Return value:  Size  Location     Type
  6101 ;;                  1    wreg      void 
  6102 ;; Registers used:
  6103 ;;		wreg, status,2
  6104 ;; Tracked objects:
  6105 ;;		On entry : 0/0
  6106 ;;		On exit  : 0/0
  6107 ;;		Unchanged: 0/0
  6108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6112 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6113 ;;Total ram usage:        0 bytes
  6114 ;; Hardware stack levels used:    1
  6115 ;; This function calls:
  6116 ;;		Nothing
  6117 ;; This function is called by:
  6118 ;;		_main
  6119 ;; This function uses a non-reentrant model
  6120 ;;
  6121                           
  6122                           	psect	text25
  6123  00EF82                     __ptext25:
  6124                           	opt stack 0
  6125  00EF82                     _init_pic:
  6126                           	opt stack 30
  6127                           
  6128                           ;main.c: 49: OSCCONbits.IDLEN = 0;
  6129                           
  6130                           ;incstack = 0
  6131  00EF82  9ED3               	bcf	4051,7,c	;volatile
  6132                           
  6133                           ;main.c: 50: OSCCONbits.IRCF = 0b110;
  6134  00EF84  50D3               	movf	4051,w,c	;volatile
  6135  00EF86  0B8F               	andlw	-113
  6136  00EF88  0960               	iorlw	96
  6137  00EF8A  6ED3               	movwf	4051,c	;volatile
  6138                           
  6139                           ;main.c: 51: OSCCONbits.OSTS = 1;
  6140  00EF8C  86D3               	bsf	4051,3,c	;volatile
  6141                           
  6142                           ;main.c: 55: ANSELA = 0x01;
  6143  00EF8E  0E01               	movlw	1
  6144  00EF90  010F               	movlb	15	; () banked
  6145  00EF92  6F38               	movwf	56,b	;volatile
  6146                           
  6147                           ; BSR set to: 15
  6148                           ;main.c: 57: TRISAbits.TRISA0 = 1;
  6149  00EF94  8092               	bsf	3986,0,c	;volatile
  6150                           
  6151                           ; BSR set to: 15
  6152                           ;main.c: 58: TRISAbits.TRISA3 = 0;
  6153  00EF96  9692               	bcf	3986,3,c	;volatile
  6154                           
  6155                           ; BSR set to: 15
  6156                           ;main.c: 59: PORTAbits.RA3 = 0;
  6157  00EF98  9680               	bcf	3968,3,c	;volatile
  6158                           
  6159                           ;main.c: 62: ANSELC = 0x00;
  6160  00EF9A  0E00               	movlw	0
  6161  00EF9C  6F3A               	movwf	58,b	;volatile
  6162                           
  6163                           ; BSR set to: 15
  6164                           ;main.c: 63: LATBbits.LATB3 = 1;
  6165  00EF9E  868A               	bsf	3978,3,c	;volatile
  6166                           
  6167                           ; BSR set to: 15
  6168                           ;main.c: 64: TRISBbits.TRISB3 = 0;
  6169  00EFA0  9693               	bcf	3987,3,c	;volatile
  6170                           
  6171                           ; BSR set to: 15
  6172                           ;main.c: 65: PORTCbits.RC6 = 1;
  6173  00EFA2  8C82               	bsf	3970,6,c	;volatile
  6174                           
  6175                           ; BSR set to: 15
  6176                           ;main.c: 66: TRISCbits.TRISC6 = 0;
  6177  00EFA4  9C94               	bcf	3988,6,c	;volatile
  6178                           
  6179                           ; BSR set to: 15
  6180                           ;main.c: 67: LATCbits.LATC7 = 1;
  6181  00EFA6  8E8B               	bsf	3979,7,c	;volatile
  6182                           
  6183                           ; BSR set to: 15
  6184                           ;main.c: 68: TRISCbits.TRISC7 = 1;
  6185  00EFA8  8E94               	bsf	3988,7,c	;volatile
  6186                           
  6187                           ;main.c: 71: ANSELB = 0x00;
  6188  00EFAA  0E00               	movlw	0
  6189  00EFAC  6F39               	movwf	57,b	;volatile
  6190                           
  6191                           ; BSR set to: 15
  6192                           ;main.c: 73: TRISBbits.TRISB0 = 1;
  6193  00EFAE  8093               	bsf	3987,0,c	;volatile
  6194                           
  6195                           ; BSR set to: 15
  6196                           ;main.c: 74: TRISCbits.TRISC1 = 1;
  6197  00EFB0  8294               	bsf	3988,1,c	;volatile
  6198                           
  6199                           ; BSR set to: 15
  6200                           ;main.c: 75: PORTBbits.RB1 = 1;
  6201  00EFB2  8281               	bsf	3969,1,c	;volatile
  6202                           
  6203                           ; BSR set to: 15
  6204                           ;main.c: 76: TRISBbits.TRISB1 = 1;
  6205  00EFB4  8293               	bsf	3987,1,c	;volatile
  6206                           
  6207                           ; BSR set to: 15
  6208                           ;main.c: 77: PORTBbits.RB2 = 1;
  6209  00EFB6  8481               	bsf	3969,2,c	;volatile
  6210                           
  6211                           ; BSR set to: 15
  6212                           ;main.c: 78: TRISBbits.TRISB2 = 1;
  6213  00EFB8  8493               	bsf	3987,2,c	;volatile
  6214                           
  6215                           ; BSR set to: 15
  6216                           ;main.c: 79: PORTCbits.RC4 = 1;
  6217  00EFBA  8882               	bsf	3970,4,c	;volatile
  6218                           
  6219                           ; BSR set to: 15
  6220                           ;main.c: 80: TRISCbits.TRISC4 = 0;
  6221  00EFBC  9894               	bcf	3988,4,c	;volatile
  6222                           
  6223                           ; BSR set to: 15
  6224                           ;main.c: 81: PORTBbits.RB4 = 1;
  6225  00EFBE  8881               	bsf	3969,4,c	;volatile
  6226                           
  6227                           ; BSR set to: 15
  6228                           ;main.c: 82: TRISBbits.TRISB4 = 1;
  6229  00EFC0  8893               	bsf	3987,4,c	;volatile
  6230                           
  6231                           ; BSR set to: 15
  6232                           ;main.c: 83: PORTBbits.RB5 = 1;
  6233  00EFC2  8A81               	bsf	3969,5,c	;volatile
  6234                           
  6235                           ; BSR set to: 15
  6236                           ;main.c: 84: TRISBbits.TRISB5 = 1;
  6237  00EFC4  8A93               	bsf	3987,5,c	;volatile
  6238                           
  6239                           ; BSR set to: 15
  6240                           ;main.c: 85: LATBbits.LATB6 = 1;
  6241  00EFC6  8C8A               	bsf	3978,6,c	;volatile
  6242                           
  6243                           ; BSR set to: 15
  6244                           ;main.c: 86: TRISBbits.TRISB6 = 0;
  6245  00EFC8  9C93               	bcf	3987,6,c	;volatile
  6246                           
  6247                           ; BSR set to: 15
  6248                           ;main.c: 87: PORTBbits.RB7 = 1;
  6249  00EFCA  8E81               	bsf	3969,7,c	;volatile
  6250                           
  6251                           ; BSR set to: 15
  6252                           ;main.c: 88: TRISBbits.TRISB7 = 1;
  6253  00EFCC  8E93               	bsf	3987,7,c	;volatile
  6254                           
  6255                           ; BSR set to: 15
  6256                           ;main.c: 90: PORTAbits.RA1 = 0;
  6257  00EFCE  9280               	bcf	3968,1,c	;volatile
  6258                           
  6259                           ; BSR set to: 15
  6260                           ;main.c: 91: TRISAbits.TRISA1 = 0;
  6261  00EFD0  9292               	bcf	3986,1,c	;volatile
  6262                           
  6263                           ; BSR set to: 15
  6264  00EFD2  0012               	return		;funcret
  6265  00EFD4                     __end_of_init_pic:
  6266                           	opt stack 0
  6267                           tblptru	equ	0xFF8
  6268                           tblptrh	equ	0xFF7
  6269                           tblptrl	equ	0xFF6
  6270                           tablat	equ	0xFF5
  6271                           prodh	equ	0xFF4
  6272                           prodl	equ	0xFF3
  6273                           intcon	equ	0xFF2
  6274                           postinc0	equ	0xFEE
  6275                           wreg	equ	0xFE8
  6276                           indf1	equ	0xFE7
  6277                           postinc1	equ	0xFE6
  6278                           postdec1	equ	0xFE5
  6279                           plusw1	equ	0xFE3
  6280                           fsr1h	equ	0xFE2
  6281                           fsr1l	equ	0xFE1
  6282                           indf2	equ	0xFDF
  6283                           postinc2	equ	0xFDE
  6284                           plusw2	equ	0xFDB
  6285                           fsr2h	equ	0xFDA
  6286                           fsr2l	equ	0xFD9
  6287                           status	equ	0xFD8
  6288                           tblptru	equ	0xFF8
  6289                           tblptrh	equ	0xFF7
  6290                           tblptrl	equ	0xFF6
  6291                           tablat	equ	0xFF5
  6292                           prodh	equ	0xFF4
  6293                           prodl	equ	0xFF3
  6294                           intcon	equ	0xFF2
  6295                           postinc0	equ	0xFEE
  6296                           wreg	equ	0xFE8
  6297                           indf1	equ	0xFE7
  6298                           postinc1	equ	0xFE6
  6299                           postdec1	equ	0xFE5
  6300                           plusw1	equ	0xFE3
  6301                           fsr1h	equ	0xFE2
  6302                           fsr1l	equ	0xFE1
  6303                           indf2	equ	0xFDF
  6304                           postinc2	equ	0xFDE
  6305                           plusw2	equ	0xFDB
  6306                           fsr2h	equ	0xFDA
  6307                           fsr2l	equ	0xFD9
  6308                           status	equ	0xFD8
  6309                           
  6310                           	psect	rparam
  6311  0000                     tblptru	equ	0xFF8
  6312                           tblptrh	equ	0xFF7
  6313                           tblptrl	equ	0xFF6
  6314                           tablat	equ	0xFF5
  6315                           prodh	equ	0xFF4
  6316                           prodl	equ	0xFF3
  6317                           intcon	equ	0xFF2
  6318                           postinc0	equ	0xFEE
  6319                           wreg	equ	0xFE8
  6320                           indf1	equ	0xFE7
  6321                           postinc1	equ	0xFE6
  6322                           postdec1	equ	0xFE5
  6323                           plusw1	equ	0xFE3
  6324                           fsr1h	equ	0xFE2
  6325                           fsr1l	equ	0xFE1
  6326                           indf2	equ	0xFDF
  6327                           postinc2	equ	0xFDE
  6328                           plusw2	equ	0xFDB
  6329                           fsr2h	equ	0xFDA
  6330                           fsr2l	equ	0xFD9
  6331                           status	equ	0xFD8


Data Sizes:
    Strings     94
    Constant    291
    Data        35
    BSS         32
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     94      95
    BANK0           160    119     155
    BANK1           256      0      30
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    send_text@msg	PTR unsigned char  size(2) Largest target is 44
		 -> STR_1(CODE[44]), 

    send_text@number	PTR unsigned char  size(2) Largest target is 11
		 -> JENS_NUMBER(BANK0[11]), 

    md_get_str_ok@rtnStr	PTR unsigned char  size(2) Largest target is 40
		 -> md_attached@buf(BANK0[40]), 

    md_get_str_ok@toSend	PTR unsigned char  size(2) Largest target is 12
		 -> md_attached@gprs_check(BANK0[12]), 

    str_matches@expected	PTR unsigned char  size(2) Largest target is 13
		 -> md_attached@gprs_resp(BANK0[9]), registration_ok@cereg_resp(BANK0[9]), registration_ok@creg_resp(BANK0[8]), sim_card_ok@cpinResponse(BANK0[13]), 

    str_matches@raw	PTR unsigned char  size(2) Largest target is 40
		 -> md_attached@buf(BANK0[40]), registration_ok@buf(BANK0[32]), sim_card_ok@buf(BANK0[32]), 

    md_uart_write_str_ok@data	PTR unsigned char  size(2) Largest target is 44
		 -> send_text@ctrlz(BANK0[1]), STR_7(CODE[3]), STR_6(CODE[9]), STR_5(CODE[12]), 
		 -> sgact(CODE[15]), set_pdp_ok@apn_buf(UNKNOWN), cgdcont(CODE[20]), md_attached@gprs_attach(BANK0[11]), 
		 -> md_attached@gprs_check(BANK0[12]), scfg(CODE[28]), socket_configured@scfgext(COMRAM[25]), STR_4(CODE[10]), 
		 -> registration_ok@cereg(BANK0[12]), registration_ok@creg(BANK0[11]), sim_card_ok@cpin(BANK0[11]), STR_3(CODE[12]), 
		 -> STR_2(CODE[7]), init_modem_ok@ledPattern(COMRAM[12]), init_modem_ok@queryVersion(COMRAM[10]), init_modem_ok@ledCfg(COMRAM[16]), 
		 -> wakeup_module_ok@ipr(COMRAM[16]), wakeup_module_ok@initStr(COMRAM[5]), STR_1(CODE[44]), JENS_NUMBER(BANK0[11]), 


Critical Paths under _main in COMRAM

    _registration_ok->_md_uart_write_str_ok
    _md_io_setup_ok->_init_modem_ok
    _write_defaults->_ee_read
    _write_defaults->_ee_write
    _sim_card_ok->_md_uart_write_str_ok
    _save_first_run->_ee_write
    _is_first_run->_ee_read
    _init_modem_ok->_md_uart_write_str_ok
    _is_connected->_md_attached
    _md_attached->_md_get_str_ok
    _md_get_str_ok->_md_uart_write_str_ok
    _send_text->_md_uart_write_str_ok
    _md_restart->_wakeup_module_ok
    _wakeup_module_ok->_md_uart_write_str_ok
    _md_uart_read_str->_wait_ok

Critical Paths under _main in BANK0

    _md_io_setup_ok->_sim_card_ok
    _is_connected->_md_attached
    _md_attached->_md_get_str_ok

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   73512
                           _init_pic
                         _md_restart
                          _send_text
                      _startup_md_ok
 ---------------------------------------------------------------------------------
 (1) _startup_md_ok                                        0     0      0   58072
                    _init_uart_modem
                       _is_connected
                     _md_io_setup_ok
                    _registration_ok
                   _wakeup_module_ok
 ---------------------------------------------------------------------------------
 (2) _registration_ok                                     79    79      0    8533
                                             49 COMRAM     2     2      0
                                              0 BANK0     77    77      0
                           _delay5ms
               _md_uart_write_str_ok
                       _setup_timer3
                        _str_matches
 ---------------------------------------------------------------------------------
 (2) _md_io_setup_ok                                       0     0      0   27667
                      _init_modem_ok
                       _is_first_run
                     _save_first_run
                        _sim_card_ok
                     _write_defaults
 ---------------------------------------------------------------------------------
 (3) _write_defaults                                       6     6      0    6883
                                              3 COMRAM     6     6      0
                            _ee_read
                           _ee_write
 ---------------------------------------------------------------------------------
 (3) _sim_card_ok                                         62    62      0    8171
                                             49 COMRAM     1     1      0
                                              0 BANK0     61    61      0
                           _delay5ms
               _md_uart_write_str_ok
                       _setup_timer3
                        _str_matches
 ---------------------------------------------------------------------------------
 (3) _save_first_run                                       0     0      0    4930
                           _ee_write
 ---------------------------------------------------------------------------------
 (4) _ee_write                                             3     1      2    4930
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _is_first_run                                         0     0      0     447
                            _ee_read
 ---------------------------------------------------------------------------------
 (4) _ee_read                                              3     2      1     447
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (3) _init_modem_ok                                       45    45      0    7236
                                             49 COMRAM    45    45      0
                           _delay5ms
               _md_uart_write_str_ok
 ---------------------------------------------------------------------------------
 (2) _is_connected                                         0     0      0   14778
                        _md_attached
 ---------------------------------------------------------------------------------
 (3) _md_attached                                         78    78      0   14778
                                             56 COMRAM     2     2      0
                                             44 BANK0     75    75      0
                           _delay5ms
                      _md_get_str_ok
               _md_uart_write_str_ok
                        _str_matches
 ---------------------------------------------------------------------------------
 (3) _str_matches                                          9     4      5    1028
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (4) _md_get_str_ok                                       51    46      5    6609
                                             49 COMRAM     7     2      5
                                              0 BANK0     44    44      0
               _md_uart_write_str_ok
                       _setup_timer3
 ---------------------------------------------------------------------------------
 (2) _init_uart_modem                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _send_text                                           50    45      5    7366
                                             49 COMRAM     5     0      5
                                              0 BANK0     45    45      0
                           _delay5ms
               _md_uart_write_str_ok
                       _setup_timer3
 ---------------------------------------------------------------------------------
 (1) _md_restart                                           0     0      0    8074
                           _delay5ms
                   _wakeup_module_ok
 ---------------------------------------------------------------------------------
 (2) _wakeup_module_ok                                    46    46      0    7094
                                             49 COMRAM    26    26      0
                           _delay5ms
               _md_uart_write_str_ok
 ---------------------------------------------------------------------------------
 (3) _md_uart_write_str_ok                                 6     2      4    5860
                                             43 COMRAM     6     2      4
                   _md_uart_read_str
                       _md_uart_send
 ---------------------------------------------------------------------------------
 (4) _md_uart_send                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _md_uart_read_str                                     0     0      0     252
                            _wait_ok
 ---------------------------------------------------------------------------------
 (5) _wait_ok                                             43    43      0     252
                                              0 COMRAM    43    43      0
                       _setup_timer3
 ---------------------------------------------------------------------------------
 (6) _setup_timer3                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _delay5ms                                             4     2      2     980
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _init_pic                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init_pic
   _md_restart
     _delay5ms
     _wakeup_module_ok
       _delay5ms
       _md_uart_write_str_ok
         _md_uart_read_str
           _wait_ok
             _setup_timer3
         _md_uart_send
   _send_text
     _delay5ms
     _md_uart_write_str_ok
       _md_uart_read_str
         _wait_ok
           _setup_timer3
       _md_uart_send
     _setup_timer3
   _startup_md_ok
     _init_uart_modem
     _is_connected
       _md_attached
         _delay5ms
         _md_get_str_ok
           _md_uart_write_str_ok
             _md_uart_read_str
               _wait_ok
                 _setup_timer3
             _md_uart_send
           _setup_timer3
         _md_uart_write_str_ok
           _md_uart_read_str
             _wait_ok
               _setup_timer3
           _md_uart_send
         _str_matches
     _md_io_setup_ok
       _init_modem_ok
         _delay5ms
         _md_uart_write_str_ok
           _md_uart_read_str
             _wait_ok
               _setup_timer3
           _md_uart_send
       _is_first_run
         _ee_read
       _save_first_run
         _ee_write
       _sim_card_ok
         _delay5ms
         _md_uart_write_str_ok
           _md_uart_read_str
             _wait_ok
               _setup_timer3
           _md_uart_send
         _setup_timer3
         _str_matches
       _write_defaults
         _ee_read
         _ee_write
     _registration_ok
       _delay5ms
       _md_uart_write_str_ok
         _md_uart_read_str
           _wait_ok
             _setup_timer3
         _md_uart_send
       _setup_timer3
       _str_matches
     _wakeup_module_ok
       _delay5ms
       _md_uart_write_str_ok
         _md_uart_read_str
           _wait_ok
             _setup_timer3
         _md_uart_send

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      1E       7       11.7%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     77      9B       5       96.9%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5E      5F       1      100.0%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     118      12        0.0%
DATA                 0      0     118       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Apr 13 08:59:42 2018

                  _md_get_str_ok F4B6                      __CFG_CP0$ON 000000  
                    __CFG_CP1$ON 000000                      __CFG_CP2$ON 000000  
                    __CFG_CP3$ON 000000                               l97 EE6E  
                             l98 EE6A                      __CFG_CPB$ON 000000  
                             _RD 007D30                      __CFG_CPD$ON 000000  
                             _WR 007D31                     ?_md_attached 0001  
                            l100 EE90                              l240 F02C  
                            l410 F136                              l402 F0FC  
                            l420 EE0C                              l404 F122  
                            l237 F00C                              l405 F10C  
                            l501 EF62                              l422 EE12  
                            l270 F08A                              l238 EFDC  
                            l502 EF70                              l263 F0B4  
                            l415 F16E                              l503 EF7E  
                            l424 EE16                              l264 F03C  
                            l425 EE1A                              l273 F0AA  
                            l409 F14C                              l266 F042  
                            l290 F57E                              l602 FA72  
                            l291 F572                              l443 F674  
                            l611 FB38                              l603 FA4A  
                            l268 F06A                              l284 F5E4  
                            l292 F54C                              l444 F65E  
                            l620 FD7E                              l612 FB10  
                            l269 F0AE                              l285 F4DA  
                            l453 F6E0                              l621 FD56  
                            l605 FAB4                              l278 EF36  
                            l454 F6CA                              l614 FC9A  
                            l606 FA8C                              l287 F4E0  
                            l279 EF0C                              l463 F74C  
                            l615 FC72                              l296 F5DE  
                            l464 F736                              l448 F6AA  
                            l608 FAF6                              l289 F50A  
                            l449 F694                              l617 FD3C  
                            l609 FACE                              l473 EEB4  
                            l458 F716                              l490 F200  
                            l618 FD14                              l474 EEB0  
                            l459 F700                              l483 F26C  
                            l491 F25C                              l468 F782  
                            l492 F258                              l484 F1AE  
                            l476 EEC2                              l493 F246  
                            l485 F1CC                              l751 F7FC  
                            l656 EE5A                              l488 F1D6  
                            l760 F846                              l753 F81E  
                            l770 F962                              l762 F874  
                            l595 F9F0                              l763 F96A  
                            l499 EF54                              l764 F8AC  
                            l597 FA24                              l790 F3D8  
                            l598 F9FE                              l766 F8DE  
                            l758 F840                              l791 F49C  
                            l768 F918                              l891 F33E  
                            l892 F2EE                              l796 F492  
                            l789 F4A8                              l894 F2F4  
                            l895 F330                              l799 F496  
                            l896 F31C                              l897 F32C  
                            _APN FF55                              _GIE 007F97  
                            _IP1 FF53                              _IP2 FF51  
                            _IP3 FF4F                              _IP4 FF4D  
                            prod 000FF3                              wreg 000FE8  
                     _TXSTA1bits 000FAC          send_text@ready_to_write 008C  
                   __CFG_LVP$OFF 000000                             l3116 F7F4  
                           l3054 F0F4                             l2550 ED4E  
                           l2662 EE0C                             l2960 F23E  
                           _CFGS 007D36                             STR_1 FFA0  
                           STR_2 FFF7                             STR_3 FFD8  
                           STR_4 FFE4                             STR_5 FFCC  
                           STR_6 FFEE                             STR_7 FFC9  
                           u2120 F24E                             u2040 F180  
                           u2210 F468                             u2050 F198  
                           u2220 F46A                             u2310 F130  
                           u2150 F392                             u1520 EFFE  
                           u2160 F3AA                             u2400 F7AC  
                           u2330 F15A                             u2170 F3C2  
                           u2410 F7C4                             u1700 EE22  
                           u2180 F3F6                             u2420 F7DC  
                           u2261 F0D2                             u1550 F028  
                           u1527 EFF4                             u2271 F0E4  
                           u1570 EF28                             u1810 F6B8  
                           u1730 EDA0                             u2700 F34E  
                           u1580 EF2A                             u1830 F6EE  
                           u1750 F622                             u2390 F794  
                           u1760 F63A                             u1850 F724  
                           u1770 F652                             u2580 F976  
                           u1870 F75A                             u1790 F682  
                           u2590 F988                             u2680 F33C  
                           u1960 FA38                             _RCIE 007CED  
                           _WREN 007D32           __size_of_startup_md_ok 0040  
         registration_ok@matches 00AA                  __end_of_VERSION FF42  
                    _str_matches EF02                             _main EE64  
                           _scfg FF61                             fsr1h 000FE2  
                           fsr2h 000FDA                             indf1 000FE7  
                           indf2 000FDF                             fsr1l 000FE1  
                           fsr2l 000FD9                    __CFG_BORV$190 000000  
                           prodh 000FF4                             prodl 000FF3  
                           start 0002                    __CFG_IESO$OFF 000000  
              ?_wakeup_module_ok 0001                   ?_md_get_str_ok 0032  
              ??_init_uart_modem 0001                   _md_io_setup_ok EE94  
                   ___param_bank 000000               ??_wakeup_module_ok 0032  
        __size_of_save_first_run 0010                     _BAUDCON1bits 000FB8  
                          ?_main 0001                            _EEADR 000FA9  
                  ?_md_uart_send 0001                            _EEPGD 007D37  
                          _CREN1 007D5C                            _T3CON 000FB1  
                          _RC1IE 007CED                            _RC1IF 007CF5  
                          _RC2IE 007D1D                            _CYCLE FF5A  
                          _RETRY FF59                            _PORT1 FF4B  
                          _PORT2 FF49                            _PORT3 FF47  
                          _PORT4 FF45                            _TMR3H 000FB3  
                          _TMR3L 000FB2                            _TRMT1 007D61  
                          _TXEN1 007D65                            _TXEN2 007B95  
                          _ZONE1 FF5D                            _ZONE2 FF5C  
                __end_of_cgdcont FF91                  __end_of_ee_read EDC0  
                  __CFG_WRT0$OFF 000000                    __CFG_WRT1$OFF 000000  
                  __CFG_WRT2$OFF 000000                    __CFG_WRT3$OFF 000000  
                 __CFG_EBTR0$OFF 000000                   __CFG_FCMEN$OFF 000000  
                 __CFG_EBTR1$OFF 000000                   __CFG_EBTR2$OFF 000000  
                 __CFG_EBTR3$OFF 000000                    __CFG_WRTB$OFF 000000  
                  __CFG_WRTC$OFF 000000                    __CFG_WRTD$OFF 000000  
                 __CFG_EBTRB$OFF 000000               __CFG_MCLRE$INTMCLR 000000  
                          _sgact FF91                            tablat 000FF5  
                __end_of_wait_ok F0C6                            plusw1 000FE3  
                          plusw2 000FDB         __end_of_md_uart_read_str ED44  
                          status 000FD8                   __CFG_HFOFST$ON 000000  
         __end_of_md_io_setup_ok EEC6                  __initialization EEC6  
                   __end_of_main EE94                     __end_of_scfg FF7D  
                   md_attached@i 00D6                   send_text@count 0089  
                 send_text@ctrlz 008A                 ??_write_defaults 0004  
                write_defaults@i 0009                    _startup_md_ok EF42  
              ??_registration_ok 0032                   ??_md_uart_send 0001  
                  ?_is_connected 0001                           ??_main 005F  
                  __activetblptr 000002                    ?_is_first_run 0001  
              __end_of_LINE_CARD FF45                           _EEADRH 000FAA  
                         _EEDATA 000FA8                           _EECON2 000FA7  
                         _ANSELA 000F38                           _ANSELB 000F39  
                         _ANSELC 000F3A                           _RC1REG 000FAE  
                 __CFG_WDTEN$OFF 000000                           _INTCON 000FF2  
                         _RCSTA1 000FAB                           _RCSTA2 000F71  
       registration_ok@creg_resp 00A0                           _SPBRG1 000FAF  
                         _TMR3IF 007D09                           _TMR3ON 007D88  
                         _TX1REG 000FAD               write_defaults@addr 0006  
             write_defaults@page 0008               write_defaults@temp 0007  
                         _TP_PIN FF5B                 __end_of_delay5ms EE34  
                   ?_sim_card_ok 0001                  ??_md_get_str_ok 0037  
                ?_md_io_setup_ok 0001                 __end_of_ee_write EE64  
                 __CFG_XINST$OFF 000000                __end_of_TEST_FREQ FF60  
                 __CFG_STVREN$ON 000000                 md_attached@F6790 FEE2  
               md_attached@F6786 FEB3                 md_attached@F6788 FF17  
                 ?_startup_md_ok 0001                 __end_of_init_pic EFD4  
  __size_of_md_uart_write_str_ok 005C                __end_of_UNIT_ACCT FF37  
                      ??_ee_read 0002                           clear_0 EEEC  
                 ??_is_connected 003B           __size_of_init_modem_ok 018E  
               md_get_str_ok@buf 0060                   ??_is_first_run 0004  
           __size_of_md_attached 0132                     __mediumconst FE7C  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8                        ??_wait_ok 0001  
            wakeup_module_ok@cnt 004A              wakeup_module_ok@ipr 0032  
      init_modem_ok@queryVersion 004E                       __accesstop 0060  
        __end_of__initialization EEF8                  __CFG_PBADEN$OFF 000000  
                  ___rparam_used 000001                    __end_of_CYCLE FF5B  
                  __end_of_RETRY FF5A                    __end_of_PORT1 FF4D  
                  __end_of_PORT2 FF4B                    __end_of_PORT3 FF49  
                  __end_of_PORT4 FF47                    __end_of_ZONE1 FF5E  
                  __end_of_ZONE2 FF5D                   __pcstackCOMRAM 0001  
                   __pidataBANK0 EDC1                   _save_first_run ED66  
                  __end_of_sgact FFA0               __end_of_ENCRYPTION FF58  
                send_text@number 0035                  _SERVER_ACK_TIME FF5E  
                _init_uart_modem EDE4                       __pbssBANK0 00FA  
                     __pbssBANK1 0100                    _init_modem_ok F5F8  
                __CFG_PLLCFG$OFF 000000                     ?_str_matches 0001  
           __end_of_md_uart_send ED58                _delayBetweenBytes 00EC  
         __end_of_save_first_run ED76               __CFG_CCP2MX$PORTC1 000000  
                ??_startup_md_ok 005F               __CFG_CCP3MX$PORTB5 000000  
                   str_matches@i 0009               __size_of_send_text 010A  
      __size_of_wakeup_module_ok 00AC                   sim_card_ok@buf 0060  
                      ?_delay5ms 0001                        ?_ee_write 0001  
                        _SPBRGH1 000FB0                          _HL_freq 00EE  
            __end_of_ACCESS_CODE FF3D                          _VERSION FF3D  
                 str_matches@len 0005                   str_matches@raw 0001  
                 ?_init_modem_ok 0001             __end_of_is_connected ED4C  
                      ?_init_pic 0001                       _md_restart ED76  
              ?_md_uart_read_str 0001                  _registration_ok F786  
                __CFG_PWRTEN$OFF 000000             __end_of_is_first_run EDA4  
                        __Hparam 0000               ??_md_uart_read_str 002C  
                        __Lparam 0000                  ?_save_first_run 0001  
      md_uart_write_str_ok@index 0031             __size_of_sim_card_ok 0108  
                        _cgdcont FF7D                          _ee_read EDA4  
                        __pcinit EEC6                          __ramtop 1000  
                        __ptext0 EE64                          __ptext1 EF42  
                        __ptext2 F786                          __ptext3 EE94  
                        __ptext4 F98C                          __ptext5 F172  
                        __ptext6 ED66                          __ptext7 EE34  
                        __ptext8 ED8C                          __ptext9 EDA4  
        __end_of_SERVER_ACK_TIME FF5F                          _q_index 005F  
        __end_of_init_uart_modem EE0A                       ??_delay5ms 0003  
               sim_card_ok@F6791 FEF8                 sim_card_ok@F6793 FEA6  
                     ??_ee_write 0003                          _wait_ok F030  
          md_attached@gprs_check 00B4                        _LINE_CARD FF42  
       __end_ofmd_attached@F6790 FEED         __end_ofmd_attached@F6786 FEBF  
       __end_ofmd_attached@F6788 FF20             end_of_initialization EEF8  
               ??_md_io_setup_ok 005F                md_get_str_ok@temp 0088  
              __end_of_send_text F384          md_uart_write_str_ok@len 002E  
                  __Lmediumconst FE7C                       ??_init_pic 0001  
               sim_card_ok@count 0098                      wait_ok@temp 002A  
                        postdec1 000FE5                          postinc0 000FEE  
                        postinc1 000FE6                          postinc2 000FDE  
                      _TEST_FREQ FF5F                        _PORTAbits 000F80  
                      _PORTBbits 000F81                        _PORTCbits 000F82  
                    _ACCESS_CODE FF37       __end_ofinit_modem_ok@F6780 FEA6  
     __end_ofinit_modem_ok@F6782 FF17       __end_ofinit_modem_ok@F6784 FED7  
                      _UNIT_ACCT FF31     __end_ofopen_connection@F6811 FEE2  
   __end_ofopen_connection@F6813 FF0D                 __CFG_FOSC$INTIO7 000000  
                  ?_setup_timer3 0001                        _TRISAbits 000F92  
                      _TRISBbits 000F93                        _TRISCbits 000F94  
          __end_of_SMS_WAIT_TIME FF59                  ??_init_modem_ok 0032  
          __size_of_md_uart_send 000C     __end_of_md_uart_write_str_ok F030  
        __end_of_registration_ok F98C                      ?_md_restart 0001  
           __size_of_str_matches 0040                   __end_of_TP_PIN FF5C  
          __end_of_md_get_str_ok F5F8                      _BAUDCONbits 000FB8  
                  ??_md_attached 0039                   md_get_str_ok@i 008B  
                 md_get_str_ok@k 008A                     _md_uart_send ED4C  
                 md_attached@buf 008C                   md_attached@cnt 00D4  
               _wakeup_module_ok F0C6                   ??_setup_timer3 0001  
              wakeup_module_ok@i 004B              start_initialization EEC6  
               ?_init_uart_modem 0001                      __end_of_APN FF57  
                    __end_of_IP1 FF55                      __end_of_IP2 FF53  
                    __end_of_IP3 FF51                      __end_of_IP4 FF4F  
   __end_ofregistration_ok@F6760 FECB     __end_ofregistration_ok@F6762 FF29  
   __end_ofregistration_ok@F6756 FEF8     __end_ofregistration_ok@F6758 FF31  
        __size_of_write_defaults 04F0            __size_of_is_connected 0008  
                  send_text@temp 0088             _registration_ok$2018 00A8  
          __size_of_is_first_run 0018                  init_modem_ok@c1 005A  
                init_modem_ok@c2 005B                  init_modem_ok@c3 005C  
                init_modem_ok@c4 005D                  init_modem_ok@c5 0059  
            init_modem_ok@ledCfg 0032                      __pdataBANK0 00D7  
            init_modem_ok@repeat 005E                     _is_connected ED44  
            __size_of_md_restart 0016                      __pbssCOMRAM 005F  
                   _is_first_run ED8C                    __pcstackBANK0 0060  
            __end_of_md_attached F4B6                __size_of_delay5ms 002A  
              __size_of_ee_write 0030                 ?_registration_ok 0001  
               ??_save_first_run 0004                __size_of_init_pic 0052  
           open_connection@F6811 FED7             open_connection@F6813 FF03  
       __end_ofsim_card_ok@F6791 FF03         __end_ofsim_card_ok@F6793 FEB3  
                  __pmediumconst FE7C        md_get_str_ok@lengthToSend 0034  
          __end_of_startup_md_ok EF82           socket_configured@F6782 FE7D  
           _md_uart_write_str_ok EFD4                         ?_ee_read 0001  
               __CFG_PRICLKEN$ON 000000        __size_of_md_uart_read_str 0008  
                     send_text@i 008B                         ?_wait_ok 0001  
                      delay5ms@i 0003                        delay5ms@j 0004  
           md_attached@gprs_resp 00CB                         _LATBbits 000F8A  
                       _LATCbits 000F8B                    ??_sim_card_ok 0032  
                sim_card_ok@cpin 008D                  sim_card_ok@temp 009A  
                      _send_text F27A             __end_of_setup_timer3 ED66  
                       _PIR1bits 000F9E                         _PIR2bits 000FA1  
                     wait_ok@buf 0001                 registration_ok@i 00AC  
               registration_ok@j 00AB                 __CFG_WDTPS$32768 000000  
           registration_ok@F6760 FEBF             registration_ok@F6762 FF20  
           registration_ok@F6756 FEED             registration_ok@F6758 FF29  
                    _JENS_NUMBER 00EF            ?_md_uart_write_str_ok 002C  
                    _md_attached F384             registration_ok@cereg 0060  
        init_modem_ok@ledPattern 0042                   _write_defaults F98C  
                      copy_data0 EEDA               init_modem_ok@F6780 FE96  
             init_modem_ok@F6782 FF0D               init_modem_ok@F6784 FECB  
                   send_text@buf 0060                     send_text@len 0034  
            md_get_str_ok@toSend 0032                     send_text@msg 0032  
                   ??_md_restart 004C              md_get_str_ok@rtnStr 0035  
    md_uart_write_str_ok@want_ok 002F         __end_of_wakeup_module_ok F172  
            __end_of_PROGRAM_ACK FF61                       ?_send_text 0032  
                       __Hrparam 0000                     ee_write@addr 0001  
                   ee_write@data 0002                     ee_write@page 0003  
                       __Lrparam 0000               __CFG_BOREN$SBORDIS 000000  
              __CFG_P2BMX$PORTB5 000000               init_modem_ok@index 0058  
            __end_of_sim_card_ok F27A               sim_card_ok@matches 0099  
                    _event_queue 0100                 __size_of_ee_read 001C  
         __end_of_write_defaults FE7C                      ee_read@addr 0001  
                    ee_read@data 0003               __end_of_md_restart ED8C  
                    ee_read@page 0002                         _delay5ms EE0A  
md_uart_write_str_ok@currentChar 0030                         _ee_write EE34  
                       __ptext10 F5F8                         __ptext11 ED44  
                       __ptext20 ED4C                         __ptext12 F384  
                       __ptext21 ED3C                         __ptext13 EF02  
                       __ptext22 F030                         __ptext14 F4B6  
                       __ptext23 ED58                         __ptext15 EDE4  
                       __ptext24 EE0A                         __ptext16 F27A  
                       __ptext25 EF82                         __ptext17 ED76  
                       __ptext18 F0C6                         __ptext19 EFD4  
               __size_of_wait_ok 0096                       _ENCRYPTION FF57  
                   sim_card_ok@i 009C                     sim_card_ok@j 009B  
                    delay5ms@cnt 0001            __end_of_init_modem_ok F786  
            md_attached@attached 00D5                    ??_str_matches 0006  
                  __size_of_main 0030                         _init_pic EF82  
                 _saveINTCONbits 00FA                       _RC1STAbits 000FAB  
        __size_of_md_io_setup_ok 0032           ??_md_uart_write_str_ok 0030  
         md_attached@gprs_attach 00C0              registration_ok@creg 006C  
            registration_ok@temp 00A9                 _md_uart_read_str ED3C  
             md_get_str_ok@count 0089                  ?_write_defaults 0001  
                     _INTCONbits 000FF2          sim_card_ok@cpinResponse 0080  
          _wakeup_module_ok$1747 0047         md_uart_write_str_ok@data 002C  
         __size_of_md_get_str_ok 0142                      _PROGRAM_ACK FF60  
       __size_of_init_uart_modem 0026            __size_of_setup_timer3 000E  
                     _RCSTA1bits 000FAB                      _sim_card_ok F172  
                    ??_send_text 0037        registration_ok@cereg_resp 0077  
                     _OSCCONbits 000FD3                         wait_ok@i 002B  
            __end_of_str_matches EF42                 md_uart_send@data 0001  
             registration_ok@buf 0080                     wait_ok@count 0029  
        wakeup_module_ok@initStr 0042              str_matches@expected 0003  
        wakeup_module_ok@rsp1_ok 0048          wakeup_module_ok@rsp2_ok 0049  
                   _setup_timer3 ED58            wakeup_module_ok@F6760 00D7  
              __CFG_T3CMX$PORTC0 000000            wakeup_module_ok@F6758 00E7  
                  _SMS_WAIT_TIME FF58               str_matches@matches 0008  
 __end_ofsocket_configured@F6782 FE96         __size_of_registration_ok 0206  
