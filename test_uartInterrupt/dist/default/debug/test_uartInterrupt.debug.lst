

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Feb 01 11:33:25 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F26K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    41                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    42                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    43  0000                     
    44                           ; Version 1.45
    45                           ; Generated 16/11/2017 GMT
    46                           ; 
    47                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    48                           ; All rights reserved.
    49                           ; 
    50                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    51                           ; 
    52                           ; Redistribution and use in source and binary forms, with or without modification, are
    53                           ; permitted provided that the following conditions are met:
    54                           ; 
    55                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    56                           ;        conditions and the following disclaimer.
    57                           ; 
    58                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    59                           ;        of conditions and the following disclaimer in the documentation and/or other
    60                           ;        materials provided with the distribution.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC18F26K22 Definitions
    76                           ; 
    77                           ; SFR Addresses
    78  0000                     
    79                           	psect	idataCOMRAM
    80  001956                     __pidataCOMRAM:
    81                           	opt stack 0
    82                           
    83                           ;initializer for send_md_cfg_cmds_ok@F6827
    84  001956  41                 	db	65
    85  001957  54                 	db	84
    86  001958  2B                 	db	43
    87  001959  43                 	db	67
    88  00195A  50                 	db	80
    89  00195B  49                 	db	73
    90  00195C  4E                 	db	78
    91  00195D  3F                 	db	63
    92  00195E  0D                 	db	13
    93  00195F  0A                 	db	10
    94  001960  00                 	db	0
    95                           
    96                           ;initializer for send_md_cfg_cmds_ok@F6825
    97  001961  41                 	db	65
    98  001962  54                 	db	84
    99  001963  23                 	db	35
   100  001964  43                 	db	67
   101  001965  47                 	db	71
   102  001966  4D                 	db	77
   103  001967  52                 	db	82
   104  001968  0D                 	db	13
   105  001969  0A                 	db	10
   106  00196A  00                 	db	0
   107                           
   108                           	psect	idataBANK0
   109  00196B                     __pidataBANK0:
   110                           	opt stack 0
   111                           
   112                           ;initializer for send_md_cfg_cmds_ok@F6835
   113  00196B  41                 	db	65
   114  00196C  54                 	db	84
   115  00196D  2B                 	db	43
   116  00196E  43                 	db	67
   117  00196F  53                 	db	83
   118  001970  51                 	db	81
   119  001971  0D                 	db	13
   120  001972  0A                 	db	10
   121  001973  00                 	db	0
   122                           
   123                           ;initializer for send_md_cfg_cmds_ok@F6815
   124  001974  41                 	db	65
   125  001975  54                 	db	84
   126  001976  45                 	db	69
   127  001977  31                 	db	49
   128  001978  0D                 	db	13
   129  001979  0A                 	db	10
   130  00197A  00                 	db	0
   131                           
   132                           ;initializer for send_md_cfg_cmds_ok@F6813
   133  00197B  41                 	db	65
   134  00197C  54                 	db	84
   135  00197D  0D                 	db	13
   136  00197E  0A                 	db	10
   137  00197F  00                 	db	0
   138                           
   139                           	psect	idataBANK1
   140  00156C                     __pidataBANK1:
   141                           	opt stack 0
   142                           
   143                           ;initializer for setup_data_ok@F6850
   144  00156C  41                 	db	65
   145  00156D  54                 	db	84
   146  00156E  2B                 	db	43
   147  00156F  43                 	db	67
   148  001570  47                 	db	71
   149  001571  44                 	db	68
   150  001572  43                 	db	67
   151  001573  4F                 	db	79
   152  001574  4E                 	db	78
   153  001575  54                 	db	84
   154  001576  3D                 	db	61
   155  001577  33                 	db	51
   156  001578  2C                 	db	44
   157  001579  22                 	db	34
   158  00157A  49                 	db	73
   159  00157B  50                 	db	80
   160  00157C  56                 	db	86
   161  00157D  34                 	db	52
   162  00157E  56                 	db	86
   163  00157F  36                 	db	54
   164  001580  22                 	db	34
   165  001581  2C                 	db	44
   166  001582  22                 	db	34
   167  001583  77                 	db	119
   168  001584  79                 	db	121
   169  001585  6C                 	db	108
   170  001586  65                 	db	101
   171  001587  73                 	db	115
   172  001588  6C                 	db	108
   173  001589  74                 	db	116
   174  00158A  65                 	db	101
   175  00158B  2E                 	db	46
   176  00158C  67                 	db	103
   177  00158D  77                 	db	119
   178  00158E  37                 	db	55
   179  00158F  2E                 	db	46
   180  001590  76                 	db	118
   181  001591  7A                 	db	122
   182  001592  77                 	db	119
   183  001593  65                 	db	101
   184  001594  6E                 	db	110
   185  001595  74                 	db	116
   186  001596  70                 	db	112
   187  001597  22                 	db	34
   188  001598  0D                 	db	13
   189  001599  0A                 	db	10
   190  00159A  00                 	db	0
   191                           
   192                           ;initializer for setup_data_ok@F6852
   193  00159B  41                 	db	65
   194  00159C  54                 	db	84
   195  00159D  23                 	db	35
   196  00159E  53                 	db	83
   197  00159F  43                 	db	67
   198  0015A0  46                 	db	70
   199  0015A1  47                 	db	71
   200  0015A2  45                 	db	69
   201  0015A3  58                 	db	88
   202  0015A4  54                 	db	84
   203  0015A5  3D                 	db	61
   204  0015A6  31                 	db	49
   205  0015A7  2C                 	db	44
   206  0015A8  31                 	db	49
   207  0015A9  2C                 	db	44
   208  0015AA  30                 	db	48
   209  0015AB  2C                 	db	44
   210  0015AC  30                 	db	48
   211  0015AD  2C                 	db	44
   212  0015AE  30                 	db	48
   213  0015AF  2C                 	db	44
   214  0015B0  30                 	db	48
   215  0015B1  0D                 	db	13
   216  0015B2  0A                 	db	10
   217  0015B3  00                 	db	0
   218                           
   219                           ;initializer for send_md_cfg_cmds_ok@F6821
   220  0015B4  41                 	db	65
   221  0015B5  54                 	db	84
   222  0015B6  23                 	db	35
   223  0015B7  47                 	db	71
   224  0015B8  50                 	db	80
   225  0015B9  49                 	db	73
   226  0015BA  4F                 	db	79
   227  0015BB  3D                 	db	61
   228  0015BC  37                 	db	55
   229  0015BD  2C                 	db	44
   230  0015BE  30                 	db	48
   231  0015BF  2C                 	db	44
   232  0015C0  32                 	db	50
   233  0015C1  0D                 	db	13
   234  0015C2  0A                 	db	10
   235  0015C3  00                 	db	0
   236                           
   237                           ;initializer for send_md_cfg_cmds_ok@F6819
   238  0015C4  41                 	db	65
   239  0015C5  54                 	db	84
   240  0015C6  2B                 	db	43
   241  0015C7  49                 	db	73
   242  0015C8  50                 	db	80
   243  0015C9  52                 	db	82
   244  0015CA  3D                 	db	61
   245  0015CB  31                 	db	49
   246  0015CC  31                 	db	49
   247  0015CD  35                 	db	53
   248  0015CE  32                 	db	50
   249  0015CF  30                 	db	48
   250  0015D0  30                 	db	48
   251  0015D1  0D                 	db	13
   252  0015D2  0A                 	db	10
   253  0015D3  00                 	db	0
   254                           
   255                           ;initializer for setup_data_ok@F6854
   256  0015D4  41                 	db	65
   257  0015D5  54                 	db	84
   258  0015D6  23                 	db	35
   259  0015D7  53                 	db	83
   260  0015D8  47                 	db	71
   261  0015D9  41                 	db	65
   262  0015DA  43                 	db	67
   263  0015DB  54                 	db	84
   264  0015DC  3D                 	db	61
   265  0015DD  33                 	db	51
   266  0015DE  2C                 	db	44
   267  0015DF  31                 	db	49
   268  0015E0  0D                 	db	13
   269  0015E1  0A                 	db	10
   270  0015E2  00                 	db	0
   271                           
   272                           ;initializer for send_md_cfg_cmds_ok@F6831
   273  0015E3  41                 	db	65
   274  0015E4  54                 	db	84
   275  0015E5  2B                 	db	43
   276  0015E6  43                 	db	67
   277  0015E7  45                 	db	69
   278  0015E8  52                 	db	82
   279  0015E9  45                 	db	69
   280  0015EA  47                 	db	71
   281  0015EB  3F                 	db	63
   282  0015EC  0D                 	db	13
   283  0015ED  0A                 	db	10
   284  0015EE  00                 	db	0
   285                           
   286                           ;initializer for send_md_cfg_cmds_ok@F6823
   287  0015EF  41                 	db	65
   288  0015F0  54                 	db	84
   289  0015F1  23                 	db	35
   290  0015F2  53                 	db	83
   291  0015F3  4C                 	db	76
   292  0015F4  45                 	db	69
   293  0015F5  44                 	db	68
   294  0015F6  3D                 	db	61
   295  0015F7  34                 	db	52
   296  0015F8  0D                 	db	13
   297  0015F9  0A                 	db	10
   298  0015FA  00                 	db	0
   299                           
   300                           ;initializer for send_md_cfg_cmds_ok@F6817
   301  0015FB  41                 	db	65
   302  0015FC  54                 	db	84
   303  0015FD  2B                 	db	43
   304  0015FE  43                 	db	67
   305  0015FF  4D                 	db	77
   306  001600  45                 	db	69
   307  001601  45                 	db	69
   308  001602  3D                 	db	61
   309  001603  32                 	db	50
   310  001604  0D                 	db	13
   311  001605  0A                 	db	10
   312  001606  00                 	db	0
   313                           
   314                           ;initializer for send_md_cfg_cmds_ok@F6833
   315  001607  41                 	db	65
   316  001608  54                 	db	84
   317  001609  23                 	db	35
   318  00160A  47                 	db	71
   319  00160B  50                 	db	80
   320  00160C  52                 	db	82
   321  00160D  53                 	db	83
   322  00160E  3F                 	db	63
   323  00160F  0D                 	db	13
   324  001610  0A                 	db	10
   325  001611  00                 	db	0
   326                           
   327                           ;initializer for send_md_cfg_cmds_ok@F6829
   328  001612  41                 	db	65
   329  001613  54                 	db	84
   330  001614  2B                 	db	43
   331  001615  43                 	db	67
   332  001616  52                 	db	82
   333  001617  45                 	db	69
   334  001618  47                 	db	71
   335  001619  3F                 	db	63
   336  00161A  0D                 	db	13
   337  00161B  0A                 	db	10
   338  00161C  00                 	db	0
   339                           
   340                           	psect	smallconst
   341  001000                     __psmallconst:
   342                           	opt stack 0
   343  001000  00                 	db	0
   344  001001                     send_over_socket_ok@F6859:
   345                           	opt stack 0
   346  001001  41                 	db	65
   347  001002  54                 	db	84
   348  001003  23                 	db	35
   349  001004  53                 	db	83
   350  001005  44                 	db	68
   351  001006  3D                 	db	61
   352  001007  31                 	db	49
   353  001008  2C                 	db	44
   354  001009  30                 	db	48
   355  00100A  2C                 	db	44
   356  00100B  31                 	db	49
   357  00100C  30                 	db	48
   358  00100D  35                 	db	53
   359  00100E  31                 	db	49
   360  00100F  30                 	db	48
   361  001010  2C                 	db	44
   362  001011  22                 	db	34
   363  001012  6D                 	db	109
   364  001013  6F                 	db	111
   365  001014  64                 	db	100
   366  001015  75                 	db	117
   367  001016  6C                 	db	108
   368  001017  65                 	db	101
   369  001018  73                 	db	115
   370  001019  2E                 	db	46
   371  00101A  74                 	db	116
   372  00101B  65                 	db	101
   373  00101C  6C                 	db	108
   374  00101D  69                 	db	105
   375  00101E  74                 	db	116
   376  00101F  2E                 	db	46
   377  001020  63                 	db	99
   378  001021  6F                 	db	111
   379  001022  6D                 	db	109
   380  001023  22                 	db	34
   381  001024  2C                 	db	44
   382  001025  30                 	db	48
   383  001026  2C                 	db	44
   384  001027  30                 	db	48
   385  001028  2C                 	db	44
   386  001029  31                 	db	49
   387  00102A  0D                 	db	13
   388  00102B  0A                 	db	10
   389  00102C  00                 	db	0
   390  00102D                     __end_ofsend_over_socket_ok@F6859:
   391                           	opt stack 0
   392  00102D                     send_over_socket_ok@F6863:
   393                           	opt stack 0
   394  00102D  41                 	db	65
   395  00102E  54                 	db	84
   396  00102F  23                 	db	35
   397  001030  53                 	db	83
   398  001031  52                 	db	82
   399  001032  45                 	db	69
   400  001033  43                 	db	67
   401  001034  56                 	db	86
   402  001035  3D                 	db	61
   403  001036  31                 	db	49
   404  001037  2C                 	db	44
   405  001038  38                 	db	56
   406  001039  39                 	db	57
   407  00103A  0D                 	db	13
   408  00103B  0A                 	db	10
   409  00103C  00                 	db	0
   410  00103D                     __end_ofsend_over_socket_ok@F6863:
   411                           	opt stack 0
   412  00103D                     close_socket_ok@F6876:
   413                           	opt stack 0
   414  00103D  41                 	db	65
   415  00103E  54                 	db	84
   416  00103F  23                 	db	35
   417  001040  53                 	db	83
   418  001041  47                 	db	71
   419  001042  41                 	db	65
   420  001043  43                 	db	67
   421  001044  54                 	db	84
   422  001045  3D                 	db	61
   423  001046  33                 	db	51
   424  001047  2C                 	db	44
   425  001048  30                 	db	48
   426  001049  0D                 	db	13
   427  00104A  0A                 	db	10
   428  00104B  00                 	db	0
   429  00104C                     __end_ofclose_socket_ok@F6876:
   430                           	opt stack 0
   431  00104C                     send_over_socket_ok@F6861:
   432                           	opt stack 0
   433  00104C  41                 	db	65
   434  00104D  54                 	db	84
   435  00104E  23                 	db	35
   436  00104F  53                 	db	83
   437  001050  53                 	db	83
   438  001051  45                 	db	69
   439  001052  4E                 	db	78
   440  001053  44                 	db	68
   441  001054  3D                 	db	61
   442  001055  31                 	db	49
   443  001056  0D                 	db	13
   444  001057  0A                 	db	10
   445  001058  00                 	db	0
   446  001059                     __end_ofsend_over_socket_ok@F6861:
   447                           	opt stack 0
   448  001059                     close_socket_ok@F6874:
   449                           	opt stack 0
   450  001059  41                 	db	65
   451  00105A  54                 	db	84
   452  00105B  23                 	db	35
   453  00105C  53                 	db	83
   454  00105D  48                 	db	72
   455  00105E  3D                 	db	61
   456  00105F  31                 	db	49
   457  001060  0D                 	db	13
   458  001061  0A                 	db	10
   459  001062  00                 	db	0
   460  001063                     __end_ofclose_socket_ok@F6874:
   461                           	opt stack 0
   462  001063                     send_over_socket_ok@F6865:
   463                           	opt stack 0
   464  001063  45                 	db	69
   465  001064  63                 	db	99
   466  001065  68                 	db	104
   467  001066  6F                 	db	111
   468  001067  2E                 	db	46
   469  001068  0D                 	db	13
   470  001069  0A                 	db	10
   471  00106A  00                 	db	0
   472  00106B                     __end_ofsend_over_socket_ok@F6865:
   473                           	opt stack 0
   474  00106B                     _VERSION:
   475                           	opt stack 0
   476  00106B  32                 	db	50
   477  00106C  30                 	db	48
   478  00106D  32                 	db	50
   479  00106E  30                 	db	48
   480  00106F  00                 	db	0
   481  001070                     __end_of_VERSION:
   482                           	opt stack 0
   483  0000                     _T5CONbits	set	3918
   484  0000                     _TMR5L	set	3919
   485  0000                     _TMR5H	set	3920
   486  0000                     _T5CON	set	3918
   487  0000                     _ANSELB	set	3897
   488  0000                     _ANSELC	set	3898
   489  0000                     _ANSELA	set	3896
   490  0000                     _TX1REG	set	4013
   491  0000                     _PIR1bits	set	3998
   492  0000                     _RCSTA1bits	set	4011
   493  0000                     _RC1STAbits	set	4011
   494  0000                     _SPBRG1	set	4015
   495  0000                     _SPBRGH1	set	4016
   496  0000                     _TXSTA1bits	set	4012
   497  0000                     _BAUDCONbits	set	4024
   498  0000                     _BAUDCON1bits	set	4024
   499  0000                     _PIR5bits	set	3966
   500  0000                     _PIE5bits	set	3965
   501  0000                     _INTCONbits	set	4082
   502  0000                     _TMR0L	set	4054
   503  0000                     _TMR0H	set	4055
   504  0000                     _T0CON	set	4053
   505  0000                     _LATBbits	set	3978
   506  0000                     _LATCbits	set	3979
   507  0000                     _TRISCbits	set	3988
   508  0000                     _PORTCbits	set	3970
   509  0000                     _TRISBbits	set	3987
   510  0000                     _PORTAbits	set	3968
   511  0000                     _TRISAbits	set	3986
   512  0000                     _OSCCONbits	set	4051
   513  0000                     _PORTBbits	set	3969
   514  0000                     _RC1REG	set	4014
   515  0000                     _PIE1bits	set	3997
   516  0000                     _TRMT1	set	32097
   517  0000                     _PEIE	set	32662
   518  0000                     _RC1IE	set	31981
   519  0000                     _CREN1	set	32092
   520  0000                     _GIE	set	32663
   521  0000                     _TMR0IF	set	32658
   522  0000                     _TMR5IF	set	31729
   523  0000                     _RC1IF	set	31989
   524                           
   525                           ; #config settings
   526  001070  00                 	db	0	; dummy byte at the end
   527  0000                     
   528                           	psect	cinit
   529  00161E                     __pcinit:
   530                           	opt stack 0
   531  00161E                     start_initialization:
   532                           	opt stack 0
   533  00161E                     __initialization:
   534                           	opt stack 0
   535                           
   536                           ; Initialize objects allocated to BANK1 (177 bytes)
   537                           ; load TBLPTR registers with __pidataBANK1
   538  00161E  0E6C               	movlw	low __pidataBANK1
   539  001620  6EF6               	movwf	tblptrl,c
   540  001622  0E15               	movlw	high __pidataBANK1
   541  001624  6EF7               	movwf	tblptrh,c
   542  001626  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   543  001628  6EF8               	movwf	tblptru,c
   544  00162A  EE01  F000         	lfsr	0,__pdataBANK1
   545  00162E  EE10 F0B1          	lfsr	1,177
   546  001632                     copy_data0:
   547  001632  0009               	tblrd		*+
   548  001634  CFF5 FFEE          	movff	tablat,postinc0
   549  001638  50E5               	movf	postdec1,w,c
   550  00163A  50E1               	movf	fsr1l,w,c
   551  00163C  E1FA               	bnz	copy_data0
   552                           
   553                           ; Initialize objects allocated to BANK0 (21 bytes)
   554                           ; load TBLPTR registers with __pidataBANK0
   555  00163E  0E6B               	movlw	low __pidataBANK0
   556  001640  6EF6               	movwf	tblptrl,c
   557  001642  0E19               	movlw	high __pidataBANK0
   558  001644  6EF7               	movwf	tblptrh,c
   559  001646  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   560  001648  6EF8               	movwf	tblptru,c
   561  00164A  EE00  F0E5         	lfsr	0,__pdataBANK0
   562  00164E  EE10 F015          	lfsr	1,21
   563  001652                     copy_data1:
   564  001652  0009               	tblrd		*+
   565  001654  CFF5 FFEE          	movff	tablat,postinc0
   566  001658  50E5               	movf	postdec1,w,c
   567  00165A  50E1               	movf	fsr1l,w,c
   568  00165C  E1FA               	bnz	copy_data1
   569                           
   570                           ; Initialize objects allocated to COMRAM (21 bytes)
   571                           ; load TBLPTR registers with __pidataCOMRAM
   572  00165E  0E56               	movlw	low __pidataCOMRAM
   573  001660  6EF6               	movwf	tblptrl,c
   574  001662  0E19               	movlw	high __pidataCOMRAM
   575  001664  6EF7               	movwf	tblptrh,c
   576  001666  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   577  001668  6EF8               	movwf	tblptru,c
   578  00166A  EE00  F023         	lfsr	0,__pdataCOMRAM
   579  00166E  EE10 F015          	lfsr	1,21
   580  001672                     copy_data2:
   581  001672  0009               	tblrd		*+
   582  001674  CFF5 FFEE          	movff	tablat,postinc0
   583  001678  50E5               	movf	postdec1,w,c
   584  00167A  50E1               	movf	fsr1l,w,c
   585  00167C  E1FA               	bnz	copy_data2
   586                           
   587                           ; Clear objects allocated to BANK2 (160 bytes)
   588  00167E  EE02  F000         	lfsr	0,__pbssBANK2
   589  001682  0EA0               	movlw	160
   590  001684                     clear_0:
   591  001684  6AEE               	clrf	postinc0,c
   592  001686  06E8               	decf	wreg,f,c
   593  001688  E1FD               	bnz	clear_0
   594                           
   595                           ; Clear objects allocated to BANK1 (60 bytes)
   596  00168A  EE01  F0B1         	lfsr	0,__pbssBANK1
   597  00168E  0E3C               	movlw	60
   598  001690                     clear_1:
   599  001690  6AEE               	clrf	postinc0,c
   600  001692  06E8               	decf	wreg,f,c
   601  001694  E1FD               	bnz	clear_1
   602                           
   603                           ; Clear objects allocated to BANK0 (3 bytes)
   604  001696  0100               	movlb	0
   605  001698  6BFC               	clrf	(__pbssBANK0+2)& (0+255),b
   606  00169A  6BFB               	clrf	(__pbssBANK0+1)& (0+255),b
   607  00169C  6BFA               	clrf	__pbssBANK0& (0+255),b
   608                           
   609                           ; Clear objects allocated to COMRAM (10 bytes)
   610  00169E  EE00  F038         	lfsr	0,__pbssCOMRAM
   611  0016A2  0E0A               	movlw	10
   612  0016A4                     clear_2:
   613  0016A4  6AEE               	clrf	postinc0,c
   614  0016A6  06E8               	decf	wreg,f,c
   615  0016A8  E1FD               	bnz	clear_2
   616  0016AA                     end_of_initialization:
   617                           	opt stack 0
   618  0016AA                     __end_of__initialization:
   619                           	opt stack 0
   620  0016AA  9042               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   621  0016AC  9242               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   622  0016AE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   623  0016B0  6EF8               	movwf	tblptru,c
   624  0016B2  0100               	movlb	0
   625  0016B4  EF50  F00C         	goto	_main	;jump to C main() function
   626                           tblptru	equ	0xFF8
   627                           tblptrh	equ	0xFF7
   628                           tblptrl	equ	0xFF6
   629                           tablat	equ	0xFF5
   630                           postinc0	equ	0xFEE
   631                           wreg	equ	0xFE8
   632                           postdec1	equ	0xFE5
   633                           fsr1l	equ	0xFE1
   634                           
   635                           	psect	bssCOMRAM
   636  000038                     __pbssCOMRAM:
   637                           	opt stack 0
   638  000038                     _lastChar:
   639                           	opt stack 0
   640  000038                     	ds	1
   641  000039                     _currentChar:
   642                           	opt stack 0
   643  000039                     	ds	1
   644  00003A                     _timedOut:
   645                           	opt stack 0
   646  00003A                     	ds	1
   647  00003B                     _receivedRESP:
   648                           	opt stack 0
   649  00003B                     	ds	1
   650  00003C                     _receivedERR:
   651                           	opt stack 0
   652  00003C                     	ds	1
   653  00003D                     _receivedOK:
   654                           	opt stack 0
   655  00003D                     	ds	1
   656  00003E                     _endPtr:
   657                           	opt stack 0
   658  00003E                     	ds	1
   659  00003F                     _tmr5_cnt:
   660                           	opt stack 0
   661  00003F                     	ds	1
   662  000040                     _ledPatternCount:
   663                           	opt stack 0
   664  000040                     	ds	1
   665  000041                     _ledPattern:
   666                           	opt stack 0
   667  000041                     	ds	1
   668                           tblptru	equ	0xFF8
   669                           tblptrh	equ	0xFF7
   670                           tblptrl	equ	0xFF6
   671                           tablat	equ	0xFF5
   672                           postinc0	equ	0xFEE
   673                           wreg	equ	0xFE8
   674                           postdec1	equ	0xFE5
   675                           fsr1l	equ	0xFE1
   676                           
   677                           	psect	dataCOMRAM
   678  000023                     __pdataCOMRAM:
   679                           	opt stack 0
   680  000023                     send_md_cfg_cmds_ok@F6827:
   681                           	opt stack 0
   682  000023                     	ds	11
   683  00002E                     send_md_cfg_cmds_ok@F6825:
   684                           	opt stack 0
   685  00002E                     	ds	10
   686                           tblptru	equ	0xFF8
   687                           tblptrh	equ	0xFF7
   688                           tblptrl	equ	0xFF6
   689                           tablat	equ	0xFF5
   690                           postinc0	equ	0xFEE
   691                           wreg	equ	0xFE8
   692                           postdec1	equ	0xFE5
   693                           fsr1l	equ	0xFE1
   694                           
   695                           	psect	bssBANK0
   696  0000FA                     __pbssBANK0:
   697                           	opt stack 0
   698  0000FA                     _pdpIsActive:
   699                           	opt stack 0
   700  0000FA                     	ds	1
   701  0000FB                     _bootTimerIsDone:
   702                           	opt stack 0
   703  0000FB                     	ds	1
   704  0000FC                     _md_state:
   705                           	opt stack 0
   706  0000FC                     	ds	1
   707                           tblptru	equ	0xFF8
   708                           tblptrh	equ	0xFF7
   709                           tblptrl	equ	0xFF6
   710                           tablat	equ	0xFF5
   711                           postinc0	equ	0xFEE
   712                           wreg	equ	0xFE8
   713                           postdec1	equ	0xFE5
   714                           fsr1l	equ	0xFE1
   715                           
   716                           	psect	dataBANK0
   717  0000E5                     __pdataBANK0:
   718                           	opt stack 0
   719  0000E5                     send_md_cfg_cmds_ok@F6835:
   720                           	opt stack 0
   721  0000E5                     	ds	9
   722  0000EE                     send_md_cfg_cmds_ok@F6815:
   723                           	opt stack 0
   724  0000EE                     	ds	7
   725  0000F5                     send_md_cfg_cmds_ok@F6813:
   726                           	opt stack 0
   727  0000F5                     	ds	5
   728                           tblptru	equ	0xFF8
   729                           tblptrh	equ	0xFF7
   730                           tblptrl	equ	0xFF6
   731                           tablat	equ	0xFF5
   732                           postinc0	equ	0xFEE
   733                           wreg	equ	0xFE8
   734                           postdec1	equ	0xFE5
   735                           fsr1l	equ	0xFE1
   736                           
   737                           	psect	bssBANK1
   738  0001B1                     __pbssBANK1:
   739                           	opt stack 0
   740  0001B1                     _referenceBuf:
   741                           	opt stack 0
   742  0001B1                     	ds	60
   743                           tblptru	equ	0xFF8
   744                           tblptrh	equ	0xFF7
   745                           tblptrl	equ	0xFF6
   746                           tablat	equ	0xFF5
   747                           postinc0	equ	0xFEE
   748                           wreg	equ	0xFE8
   749                           postdec1	equ	0xFE5
   750                           fsr1l	equ	0xFE1
   751                           
   752                           	psect	dataBANK1
   753  000100                     __pdataBANK1:
   754                           	opt stack 0
   755  000100                     setup_data_ok@F6850:
   756                           	opt stack 0
   757  000100                     	ds	47
   758  00012F                     setup_data_ok@F6852:
   759                           	opt stack 0
   760  00012F                     	ds	25
   761  000148                     send_md_cfg_cmds_ok@F6821:
   762                           	opt stack 0
   763  000148                     	ds	16
   764  000158                     send_md_cfg_cmds_ok@F6819:
   765                           	opt stack 0
   766  000158                     	ds	16
   767  000168                     setup_data_ok@F6854:
   768                           	opt stack 0
   769  000168                     	ds	15
   770  000177                     send_md_cfg_cmds_ok@F6831:
   771                           	opt stack 0
   772  000177                     	ds	12
   773  000183                     send_md_cfg_cmds_ok@F6823:
   774                           	opt stack 0
   775  000183                     	ds	12
   776  00018F                     send_md_cfg_cmds_ok@F6817:
   777                           	opt stack 0
   778  00018F                     	ds	12
   779  00019B                     send_md_cfg_cmds_ok@F6833:
   780                           	opt stack 0
   781  00019B                     	ds	11
   782  0001A6                     send_md_cfg_cmds_ok@F6829:
   783                           	opt stack 0
   784  0001A6                     	ds	11
   785                           tblptru	equ	0xFF8
   786                           tblptrh	equ	0xFF7
   787                           tblptrl	equ	0xFF6
   788                           tablat	equ	0xFF5
   789                           postinc0	equ	0xFEE
   790                           wreg	equ	0xFE8
   791                           postdec1	equ	0xFE5
   792                           fsr1l	equ	0xFE1
   793                           
   794                           	psect	bssBANK2
   795  000200                     __pbssBANK2:
   796                           	opt stack 0
   797  000200                     _mdRxBuf:
   798                           	opt stack 0
   799  000200                     	ds	160
   800                           tblptru	equ	0xFF8
   801                           tblptrh	equ	0xFF7
   802                           tblptrl	equ	0xFF6
   803                           tablat	equ	0xFF5
   804                           postinc0	equ	0xFEE
   805                           wreg	equ	0xFE8
   806                           postdec1	equ	0xFE5
   807                           fsr1l	equ	0xFE1
   808                           
   809                           	psect	cstackBANK0
   810  000060                     __pcstackBANK0:
   811                           	opt stack 0
   812  000060                     close_socket_ok@deactivatePDP:
   813                           	opt stack 0
   814  000060                     send_md_cfg_cmds_ok@baud:
   815                           	opt stack 0
   816  000060                     send_over_socket_ok@openConnection:
   817                           	opt stack 0
   818  000060                     setup_data_ok@setApn:
   819                           	opt stack 0
   820                           
   821                           ; 47 bytes @ 0x0
   822  000060                     	ds	15
   823  00006F                     close_socket_ok@closeSocket:
   824                           	opt stack 0
   825                           
   826                           ; 10 bytes @ 0xF
   827  00006F                     	ds	1
   828  000070                     send_md_cfg_cmds_ok@ledCfg:
   829                           	opt stack 0
   830                           
   831                           ; 16 bytes @ 0x10
   832  000070                     	ds	16
   833  000080                     send_md_cfg_cmds_ok@cmee:
   834                           	opt stack 0
   835                           
   836                           ; 12 bytes @ 0x20
   837  000080                     	ds	12
   838  00008C                     send_md_cfg_cmds_ok@ledpattern:
   839                           	opt stack 0
   840  00008C                     send_over_socket_ok@srecv:
   841                           	opt stack 0
   842                           
   843                           ; 16 bytes @ 0x2C
   844  00008C                     	ds	3
   845  00008F                     setup_data_ok@cfgSocket:
   846                           	opt stack 0
   847                           
   848                           ; 25 bytes @ 0x2F
   849  00008F                     	ds	9
   850  000098                     send_md_cfg_cmds_ok@cereg:
   851                           	opt stack 0
   852                           
   853                           ; 12 bytes @ 0x38
   854  000098                     	ds	4
   855  00009C                     send_over_socket_ok@ssend:
   856                           	opt stack 0
   857                           
   858                           ; 13 bytes @ 0x3C
   859  00009C                     	ds	8
   860  0000A4                     send_md_cfg_cmds_ok@cpin:
   861                           	opt stack 0
   862                           
   863                           ; 11 bytes @ 0x44
   864  0000A4                     	ds	4
   865  0000A8                     setup_data_ok@activatePDP:
   866                           	opt stack 0
   867                           
   868                           ; 15 bytes @ 0x48
   869  0000A8                     	ds	1
   870  0000A9                     send_over_socket_ok@msg:
   871                           	opt stack 0
   872                           
   873                           ; 8 bytes @ 0x49
   874  0000A9                     	ds	6
   875  0000AF                     send_md_cfg_cmds_ok@creg:
   876                           	opt stack 0
   877                           
   878                           ; 11 bytes @ 0x4F
   879  0000AF                     	ds	2
   880  0000B1                     send_over_socket_ok@terminateData:
   881                           	opt stack 0
   882                           
   883                           ; 1 bytes @ 0x51
   884  0000B1                     	ds	9
   885  0000BA                     send_md_cfg_cmds_ok@gprs:
   886                           	opt stack 0
   887                           
   888                           ; 11 bytes @ 0x5A
   889  0000BA                     	ds	11
   890  0000C5                     send_md_cfg_cmds_ok@queryVersion:
   891                           	opt stack 0
   892                           
   893                           ; 10 bytes @ 0x65
   894  0000C5                     	ds	10
   895  0000CF                     send_md_cfg_cmds_ok@csq:
   896                           	opt stack 0
   897                           
   898                           ; 9 bytes @ 0x6F
   899  0000CF                     	ds	9
   900  0000D8                     send_md_cfg_cmds_ok@ate:
   901                           	opt stack 0
   902                           
   903                           ; 7 bytes @ 0x78
   904  0000D8                     	ds	7
   905  0000DF                     send_md_cfg_cmds_ok@at:
   906                           	opt stack 0
   907                           
   908                           ; 5 bytes @ 0x7F
   909  0000DF                     	ds	5
   910  0000E4                     send_md_cfg_cmds_ok@gotOk:
   911                           	opt stack 0
   912                           
   913                           ; 1 bytes @ 0x84
   914  0000E4                     	ds	1
   915                           tblptru	equ	0xFF8
   916                           tblptrh	equ	0xFF7
   917                           tblptrl	equ	0xFF6
   918                           tablat	equ	0xFF5
   919                           postinc0	equ	0xFEE
   920                           wreg	equ	0xFE8
   921                           postdec1	equ	0xFE5
   922                           fsr1l	equ	0xFE1
   923                           
   924                           	psect	cstackCOMRAM
   925  000001                     __pcstackCOMRAM:
   926                           	opt stack 0
   927  000001                     ??_check_mdstate_tmr5:
   928  000001                     
   929                           ; 1 bytes @ 0x0
   930  000001                     	ds	1
   931  000002                     ??_isr:
   932                           
   933                           ; 1 bytes @ 0x1
   934  000002                     	ds	20
   935  000016                     ??_start_modem_send_process:
   936  000016                     md_uart_send@data:
   937                           	opt stack 0
   938                           
   939                           ; 1 bytes @ 0x15
   940  000016                     	ds	1
   941  000017                     md_uart_write_str_ok@data:
   942                           	opt stack 0
   943                           
   944                           ; 2 bytes @ 0x16
   945  000017                     	ds	2
   946  000019                     md_uart_write_str_ok@len1:
   947                           	opt stack 0
   948                           
   949                           ; 1 bytes @ 0x18
   950  000019                     	ds	1
   951  00001A                     md_uart_write_str_ok@wantOk:
   952                           	opt stack 0
   953                           
   954                           ; 1 bytes @ 0x19
   955  00001A                     	ds	1
   956  00001B                     md_uart_write_str_ok@waitToSendMoreData:
   957                           	opt stack 0
   958                           
   959                           ; 1 bytes @ 0x1A
   960  00001B                     	ds	1
   961  00001C                     md_uart_write_str_ok@pos:
   962                           	opt stack 0
   963                           
   964                           ; 1 bytes @ 0x1B
   965  00001C                     	ds	1
   966  00001D                     md_uart_write_str_ok@numRetries:
   967                           	opt stack 0
   968                           
   969                           ; 1 bytes @ 0x1C
   970  00001D                     	ds	1
   971  00001E                     md_uart_write_str_ok@currentChar:
   972                           	opt stack 0
   973                           
   974                           ; 1 bytes @ 0x1D
   975  00001E                     	ds	1
   976  00001F                     md_uart_write_str_ok@index:
   977                           	opt stack 0
   978                           
   979                           ; 1 bytes @ 0x1E
   980  00001F                     	ds	1
   981  000020                     ??_send_over_socket_ok:
   982  000020                     
   983                           ; 1 bytes @ 0x1F
   984  000020                     	ds	2
   985  000022                     ??_main:
   986                           
   987                           ; 1 bytes @ 0x21
   988  000022                     	ds	1
   989                           tblptru	equ	0xFF8
   990                           tblptrh	equ	0xFF7
   991                           tblptrl	equ	0xFF6
   992                           tablat	equ	0xFF5
   993                           postinc0	equ	0xFEE
   994                           wreg	equ	0xFE8
   995                           postdec1	equ	0xFE5
   996                           fsr1l	equ	0xFE1
   997                           
   998 ;;
   999 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1000 ;;
  1001 ;; *************** function _main *****************
  1002 ;; Defined at:
  1003 ;;		line 63 in file "main.c"
  1004 ;; Parameters:    Size  Location     Type
  1005 ;;		None
  1006 ;; Auto vars:     Size  Location     Type
  1007 ;;		None
  1008 ;; Return value:  Size  Location     Type
  1009 ;;                  1    wreg      void 
  1010 ;; Registers used:
  1011 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1012 ;; Tracked objects:
  1013 ;;		On entry : 0/0
  1014 ;;		On exit  : 0/0
  1015 ;;		Unchanged: 0/0
  1016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1018 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1019 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1020 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1021 ;;Total ram usage:        1 bytes
  1022 ;; Hardware stack levels required when called:    7
  1023 ;; This function calls:
  1024 ;;		_check_modem_state
  1025 ;;		_enable_md_rxint
  1026 ;;		_init_md_uart
  1027 ;;		_init_pic
  1028 ;;		_md_uart_send
  1029 ;;		_start_modem_send_process
  1030 ;; This function is called by:
  1031 ;;		Startup code after reset
  1032 ;; This function uses a non-reentrant model
  1033 ;;
  1034                           
  1035                           	psect	text0
  1036  0018A0                     __ptext0:
  1037                           	opt stack 0
  1038  0018A0                     _main:
  1039                           	opt stack 24
  1040                           
  1041                           ;main.c: 65: init_pic();
  1042                           
  1043                           ;incstack = 0
  1044  0018A0  EC1D  F00C         	call	_init_pic	;wreg free
  1045                           
  1046                           ;main.c: 66: init_md_uart();
  1047  0018A4  EC7F  F00C         	call	_init_md_uart	;wreg free
  1048                           
  1049                           ;main.c: 67: enable_md_rxint();
  1050  0018A8  ECC6  F00C         	call	_enable_md_rxint	;wreg free
  1051  0018AC                     
  1052                           ;main.c: 72: {
  1053                           ;main.c: 73: md_uart_send(0xAA);
  1054  0018AC  0EAA               	movlw	170
  1055  0018AE  ECC0  F00C         	call	_md_uart_send
  1056                           
  1057                           ;main.c: 74: if (PORTBbits.RB4)
  1058  0018B2  A881               	btfss	3969,4,c	;volatile
  1059  0018B4  D00A               	goto	l129
  1060                           
  1061                           ;main.c: 75: {
  1062                           ;main.c: 76: _delay((unsigned long)((50)*(8000000/4000.0)));
  1063  0018B6  0E82               	movlw	130
  1064  0018B8  6E22               	movwf	??_main& (0+255),c
  1065  0018BA  0EDE               	movlw	222
  1066  0018BC                     u1587:
  1067  0018BC  2EE8               	decfsz	wreg,f,c
  1068  0018BE  D7FE               	bra	u1587
  1069  0018C0  2E22               	decfsz	??_main& (0+255),f,c
  1070  0018C2  D7FC               	bra	u1587
  1071                           
  1072                           ;main.c: 77: if (PORTBbits.RB4)
  1073  0018C4  B881               	btfsc	3969,4,c	;volatile
  1074                           
  1075                           ;main.c: 78: {
  1076                           ;main.c: 79: start_modem_send_process();
  1077  0018C6  EC68  F00C         	call	_start_modem_send_process	;wreg free
  1078  0018CA                     l129:
  1079                           
  1080                           ;main.c: 80: }
  1081                           ;main.c: 81: }
  1082                           ;main.c: 82: check_modem_state();
  1083  0018CA  ECA5  F00B         	call	_check_modem_state	;wreg free
  1084  0018CE  D7EE               	goto	l127
  1085  0018D0                     __end_of_main:
  1086                           	opt stack 0
  1087                           tblptru	equ	0xFF8
  1088                           tblptrh	equ	0xFF7
  1089                           tblptrl	equ	0xFF6
  1090                           tablat	equ	0xFF5
  1091                           postinc0	equ	0xFEE
  1092                           wreg	equ	0xFE8
  1093                           postdec1	equ	0xFE5
  1094                           fsr1l	equ	0xFE1
  1095                           
  1096 ;; *************** function _init_pic *****************
  1097 ;; Defined at:
  1098 ;;		line 88 in file "main.c"
  1099 ;; Parameters:    Size  Location     Type
  1100 ;;		None
  1101 ;; Auto vars:     Size  Location     Type
  1102 ;;		None
  1103 ;; Return value:  Size  Location     Type
  1104 ;;                  1    wreg      void 
  1105 ;; Registers used:
  1106 ;;		wreg, status,2
  1107 ;; Tracked objects:
  1108 ;;		On entry : 0/0
  1109 ;;		On exit  : 0/0
  1110 ;;		Unchanged: 0/0
  1111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1115 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1116 ;;Total ram usage:        0 bytes
  1117 ;; Hardware stack levels used:    1
  1118 ;; Hardware stack levels required when called:    3
  1119 ;; This function calls:
  1120 ;;		Nothing
  1121 ;; This function is called by:
  1122 ;;		_main
  1123 ;; This function uses a non-reentrant model
  1124 ;;
  1125                           
  1126                           	psect	text1
  1127  00183A                     __ptext1:
  1128                           	opt stack 0
  1129  00183A                     _init_pic:
  1130                           	opt stack 27
  1131                           
  1132                           ;main.c: 91: OSCCONbits.IDLEN = 0;
  1133                           
  1134                           ;incstack = 0
  1135  00183A  9ED3               	bcf	4051,7,c	;volatile
  1136                           
  1137                           ;main.c: 92: OSCCONbits.IRCF = 0b110;
  1138  00183C  50D3               	movf	4051,w,c	;volatile
  1139  00183E  0B8F               	andlw	-113
  1140  001840  0960               	iorlw	96
  1141  001842  6ED3               	movwf	4051,c	;volatile
  1142                           
  1143                           ;main.c: 93: OSCCONbits.OSTS = 1;
  1144  001844  86D3               	bsf	4051,3,c	;volatile
  1145                           
  1146                           ;main.c: 97: ANSELA = 0x01;
  1147  001846  0E01               	movlw	1
  1148  001848  010F               	movlb	15	; () banked
  1149  00184A  6F38               	movwf	56,b	;volatile
  1150                           
  1151                           ; BSR set to: 15
  1152                           ;main.c: 99: TRISAbits.TRISA0 = 1;
  1153  00184C  8092               	bsf	3986,0,c	;volatile
  1154                           
  1155                           ; BSR set to: 15
  1156                           ;main.c: 100: TRISAbits.TRISA3 = 0;
  1157  00184E  9692               	bcf	3986,3,c	;volatile
  1158                           
  1159                           ; BSR set to: 15
  1160                           ;main.c: 101: PORTAbits.RA3 = 0;
  1161  001850  9680               	bcf	3968,3,c	;volatile
  1162                           
  1163                           ;main.c: 104: ANSELC = 0x00;
  1164  001852  0E00               	movlw	0
  1165  001854  6F3A               	movwf	58,b	;volatile
  1166                           
  1167                           ; BSR set to: 15
  1168                           ;main.c: 105: PORTBbits.RB3 = 1;
  1169  001856  8681               	bsf	3969,3,c	;volatile
  1170                           
  1171                           ; BSR set to: 15
  1172                           ;main.c: 106: TRISBbits.TRISB3 = 0;
  1173  001858  9693               	bcf	3987,3,c	;volatile
  1174                           
  1175                           ; BSR set to: 15
  1176                           ;main.c: 107: PORTCbits.RC6 = 1;
  1177  00185A  8C82               	bsf	3970,6,c	;volatile
  1178                           
  1179                           ; BSR set to: 15
  1180                           ;main.c: 108: TRISCbits.TRISC6 = 0;
  1181  00185C  9C94               	bcf	3988,6,c	;volatile
  1182                           
  1183                           ; BSR set to: 15
  1184                           ;main.c: 109: LATCbits.LATC7 = 1;
  1185  00185E  8E8B               	bsf	3979,7,c	;volatile
  1186                           
  1187                           ; BSR set to: 15
  1188                           ;main.c: 110: TRISCbits.TRISC7 = 1;
  1189  001860  8E94               	bsf	3988,7,c	;volatile
  1190                           
  1191                           ;main.c: 113: ANSELB = 0x00;
  1192  001862  0E00               	movlw	0
  1193  001864  6F39               	movwf	57,b	;volatile
  1194                           
  1195                           ; BSR set to: 15
  1196                           ;main.c: 115: TRISBbits.TRISB0 = 1;
  1197  001866  8093               	bsf	3987,0,c	;volatile
  1198                           
  1199                           ; BSR set to: 15
  1200                           ;main.c: 116: TRISCbits.TRISC1 = 1;
  1201  001868  8294               	bsf	3988,1,c	;volatile
  1202                           
  1203                           ; BSR set to: 15
  1204                           ;main.c: 117: PORTBbits.RB1 = 1;
  1205  00186A  8281               	bsf	3969,1,c	;volatile
  1206                           
  1207                           ; BSR set to: 15
  1208                           ;main.c: 118: TRISBbits.TRISB1 = 1;
  1209  00186C  8293               	bsf	3987,1,c	;volatile
  1210                           
  1211                           ; BSR set to: 15
  1212                           ;main.c: 119: PORTBbits.RB2 = 1;
  1213  00186E  8481               	bsf	3969,2,c	;volatile
  1214                           
  1215                           ; BSR set to: 15
  1216                           ;main.c: 120: TRISBbits.TRISB2 = 1;
  1217  001870  8493               	bsf	3987,2,c	;volatile
  1218                           
  1219                           ; BSR set to: 15
  1220                           ;main.c: 121: PORTCbits.RC4 = 1;
  1221  001872  8882               	bsf	3970,4,c	;volatile
  1222                           
  1223                           ; BSR set to: 15
  1224                           ;main.c: 122: TRISCbits.TRISC4 = 0;
  1225  001874  9894               	bcf	3988,4,c	;volatile
  1226                           
  1227                           ; BSR set to: 15
  1228                           ;main.c: 123: PORTBbits.RB4 = 1;
  1229  001876  8881               	bsf	3969,4,c	;volatile
  1230                           
  1231                           ; BSR set to: 15
  1232                           ;main.c: 124: TRISBbits.TRISB4 = 1;
  1233  001878  8893               	bsf	3987,4,c	;volatile
  1234                           
  1235                           ; BSR set to: 15
  1236                           ;main.c: 125: PORTBbits.RB5 = 1;
  1237  00187A  8A81               	bsf	3969,5,c	;volatile
  1238                           
  1239                           ; BSR set to: 15
  1240                           ;main.c: 126: TRISBbits.TRISB5 = 1;
  1241  00187C  8A93               	bsf	3987,5,c	;volatile
  1242                           
  1243                           ; BSR set to: 15
  1244                           ;main.c: 127: LATBbits.LATB6 = 1;
  1245  00187E  8C8A               	bsf	3978,6,c	;volatile
  1246                           
  1247                           ; BSR set to: 15
  1248                           ;main.c: 128: TRISBbits.TRISB6 = 0;
  1249  001880  9C93               	bcf	3987,6,c	;volatile
  1250                           
  1251                           ; BSR set to: 15
  1252                           ;main.c: 129: PORTBbits.RB7 = 1;
  1253  001882  8E81               	bsf	3969,7,c	;volatile
  1254                           
  1255                           ; BSR set to: 15
  1256                           ;main.c: 130: TRISBbits.TRISB7 = 1;
  1257  001884  8E93               	bsf	3987,7,c	;volatile
  1258                           
  1259                           ; BSR set to: 15
  1260                           ;main.c: 132: PORTAbits.RA1 = 0;
  1261  001886  9280               	bcf	3968,1,c	;volatile
  1262                           
  1263                           ; BSR set to: 15
  1264                           ;main.c: 133: TRISAbits.TRISA1 = 0;
  1265  001888  9292               	bcf	3986,1,c	;volatile
  1266                           
  1267                           ;main.c: 140: T0CON = 0x87;
  1268  00188A  0E87               	movlw	135
  1269  00188C  6ED5               	movwf	4053,c	;volatile
  1270                           
  1271                           ;main.c: 141: TMR0H = ((65535-780)/256);
  1272  00188E  0EFC               	movlw	252
  1273  001890  6ED7               	movwf	4055,c	;volatile
  1274                           
  1275                           ;main.c: 142: TMR0L = ((65535-780)%256);
  1276  001892  0EF3               	movlw	243
  1277  001894  6ED6               	movwf	4054,c	;volatile
  1278                           
  1279                           ; BSR set to: 15
  1280                           ;main.c: 143: TMR0IF = 0;
  1281  001896  94F2               	bcf	intcon,2,c	;volatile
  1282                           
  1283                           ;main.c: 164: md_state = IDLE;
  1284  001898  0E00               	movlw	0
  1285  00189A  0100               	movlb	0	; () banked
  1286  00189C  6FFC               	movwf	_md_state& (0+255),b
  1287                           
  1288                           ; BSR set to: 0
  1289  00189E  0012               	return		;funcret
  1290  0018A0                     __end_of_init_pic:
  1291                           	opt stack 0
  1292                           tblptru	equ	0xFF8
  1293                           tblptrh	equ	0xFF7
  1294                           tblptrl	equ	0xFF6
  1295                           tablat	equ	0xFF5
  1296                           intcon	equ	0xFF2
  1297                           postinc0	equ	0xFEE
  1298                           wreg	equ	0xFE8
  1299                           postdec1	equ	0xFE5
  1300                           fsr1l	equ	0xFE1
  1301                           
  1302 ;; *************** function _check_modem_state *****************
  1303 ;; Defined at:
  1304 ;;		line 25 in file "modem.c"
  1305 ;; Parameters:    Size  Location     Type
  1306 ;;		None
  1307 ;; Auto vars:     Size  Location     Type
  1308 ;;		None
  1309 ;; Return value:  Size  Location     Type
  1310 ;;                  1    wreg      void 
  1311 ;; Registers used:
  1312 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1313 ;; Tracked objects:
  1314 ;;		On entry : 0/0
  1315 ;;		On exit  : 0/0
  1316 ;;		Unchanged: 0/0
  1317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1321 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1322 ;;Total ram usage:        0 bytes
  1323 ;; Hardware stack levels used:    1
  1324 ;; Hardware stack levels required when called:    6
  1325 ;; This function calls:
  1326 ;;		_close_socket_ok
  1327 ;;		_send_md_cfg_cmds_ok
  1328 ;;		_send_over_socket_ok
  1329 ;;		_setup_data_ok
  1330 ;;		_start_modem_send_process
  1331 ;; This function is called by:
  1332 ;;		_main
  1333 ;; This function uses a non-reentrant model
  1334 ;;
  1335                           
  1336                           	psect	text2
  1337  00174A                     __ptext2:
  1338                           	opt stack 0
  1339  00174A                     _check_modem_state:
  1340                           	opt stack 24
  1341                           
  1342                           ;modem.c: 27: switch (md_state)
  1343                           
  1344                           ; BSR set to: 0
  1345                           ;incstack = 0
  1346  00174A  D02C               	goto	l332
  1347  00174C                     
  1348                           ;modem.c: 32: if (bootTimerIsDone)
  1349  00174C  0100               	movlb	0	; () banked
  1350  00174E  51FB               	movf	_bootTimerIsDone& (0+255),w,b
  1351  001750  B4D8               	btfsc	status,2,c
  1352  001752  0012               	return	
  1353                           
  1354                           ; BSR set to: 0
  1355                           ;modem.c: 33: md_state = CONFIG;
  1356  001754  0E02               	movlw	2
  1357  001756  6FFC               	movwf	_md_state& (0+255),b
  1358                           
  1359                           ; BSR set to: 0
  1360                           ;modem.c: 34: break;
  1361  001758  0012               	return	
  1362  00175A                     
  1363                           ; BSR set to: 0
  1364                           ;modem.c: 36: if (!send_md_cfg_cmds_ok())
  1365                           
  1366                           ; BSR set to: 0
  1367  00175A  EC39  F008         	call	_send_md_cfg_cmds_ok	;wreg free
  1368  00175E  0900               	iorlw	0
  1369  001760  A4D8               	btfss	status,2,c
  1370  001762  0012               	return	
  1371                           
  1372                           ;modem.c: 37: {
  1373                           ;modem.c: 38: start_modem_send_process();
  1374  001764  EC68  F00C         	call	_start_modem_send_process	;wreg free
  1375                           
  1376                           ;modem.c: 39: md_state = WAITING_FOR_BOOT;
  1377  001768  0E01               	movlw	1
  1378  00176A  0100               	movlb	0	; () banked
  1379  00176C  6FFC               	movwf	_md_state& (0+255),b
  1380                           
  1381                           ; BSR set to: 0
  1382                           ;modem.c: 40: }
  1383                           ;modem.c: 41: break;
  1384  00176E  0012               	return	
  1385  001770                     
  1386                           ; BSR set to: 0
  1387                           ;modem.c: 43: setup_data_ok();
  1388                           
  1389                           ; BSR set to: 0
  1390  001770  EC5C  F00B         	call	_setup_data_ok	;wreg free
  1391                           
  1392                           ;modem.c: 44: md_state = SENDING_DATA;
  1393  001774  0E05               	movlw	5
  1394  001776  0100               	movlb	0	; () banked
  1395  001778  6FFC               	movwf	_md_state& (0+255),b
  1396                           
  1397                           ;modem.c: 45: break;
  1398  00177A  0012               	return	
  1399  00177C                     
  1400                           ; BSR set to: 0
  1401                           ;modem.c: 47: if (pdpIsActive)
  1402                           
  1403                           ; BSR set to: 0
  1404  00177C  51FA               	movf	_pdpIsActive& (0+255),w,b
  1405  00177E  B4D8               	btfsc	status,2,c
  1406  001780  0012               	return	
  1407                           
  1408                           ; BSR set to: 0
  1409                           ;modem.c: 48: md_state = SENDING_DATA;
  1410  001782  0E05               	movlw	5
  1411  001784  6FFC               	movwf	_md_state& (0+255),b
  1412                           
  1413                           ; BSR set to: 0
  1414                           ;modem.c: 49: break;
  1415  001786  0012               	return	
  1416  001788                     
  1417                           ; BSR set to: 0
  1418                           ;modem.c: 58: send_over_socket_ok();
  1419                           
  1420                           ; BSR set to: 0
  1421  001788  EC59  F009         	call	_send_over_socket_ok	;wreg free
  1422  00178C  ECE7  F00B         	call	_close_socket_ok	;wreg free
  1423  001790  0900               	iorlw	0
  1424  001792  B4D8               	btfsc	status,2,c
  1425  001794  D7FB               	goto	l344
  1426                           
  1427                           ;modem.c: 60: pdpIsActive = 0;
  1428  001796  0E00               	movlw	0
  1429  001798  0100               	movlb	0	; () banked
  1430  00179A  6FFA               	movwf	_pdpIsActive& (0+255),b
  1431                           
  1432                           ;modem.c: 61: md_state = IDLE;
  1433  00179C  0E00               	movlw	0
  1434  00179E  6FFC               	movwf	_md_state& (0+255),b
  1435                           
  1436                           ; BSR set to: 0
  1437                           ;modem.c: 62: PORTAbits.RA3 = 0;
  1438  0017A0  9680               	bcf	3968,3,c	;volatile
  1439                           
  1440                           ; BSR set to: 0
  1441                           ;modem.c: 69: }
  1442                           
  1443                           ;modem.c: 63: break;
  1444  0017A2  0012               	return	
  1445  0017A4                     l332:
  1446                           
  1447                           ; BSR set to: 0
  1448  0017A4  0100               	movlb	0	; () banked
  1449  0017A6  51FC               	movf	_md_state& (0+255),w,b
  1450                           
  1451                           ; Switch size 1, requested type "space"
  1452                           ; Number of cases is 6, Range of values is 0 to 5
  1453                           ; switch strategies available:
  1454                           ; Name         Instructions Cycles
  1455                           ; simple_byte           19    10 (average)
  1456                           ;	Chosen strategy is simple_byte
  1457  0017A8  0A00               	xorlw	0	; case 0
  1458  0017AA  B4D8               	btfsc	status,2,c
  1459  0017AC  0012               	return	
  1460  0017AE  0A01               	xorlw	1	; case 1
  1461  0017B0  B4D8               	btfsc	status,2,c
  1462  0017B2  D7CC               	goto	l335
  1463  0017B4  0A03               	xorlw	3	; case 2
  1464  0017B6  B4D8               	btfsc	status,2,c
  1465  0017B8  D7D0               	goto	l337
  1466  0017BA  0A01               	xorlw	1	; case 3
  1467  0017BC  B4D8               	btfsc	status,2,c
  1468  0017BE  D7D8               	goto	l339
  1469  0017C0  0A07               	xorlw	7	; case 4
  1470  0017C2  B4D8               	btfsc	status,2,c
  1471  0017C4  D7DB               	goto	l340
  1472  0017C6  0A01               	xorlw	1	; case 5
  1473  0017C8  A4D8               	btfss	status,2,c
  1474  0017CA  0012               	return	
  1475  0017CC  D7DD               	goto	l342
  1476  0017CE                     __end_of_check_modem_state:
  1477                           	opt stack 0
  1478                           tblptru	equ	0xFF8
  1479                           tblptrh	equ	0xFF7
  1480                           tblptrl	equ	0xFF6
  1481                           tablat	equ	0xFF5
  1482                           intcon	equ	0xFF2
  1483                           postinc0	equ	0xFEE
  1484                           wreg	equ	0xFE8
  1485                           postdec1	equ	0xFE5
  1486                           fsr1l	equ	0xFE1
  1487                           status	equ	0xFD8
  1488                           
  1489 ;; *************** function _start_modem_send_process *****************
  1490 ;; Defined at:
  1491 ;;		line 8 in file "modem.c"
  1492 ;; Parameters:    Size  Location     Type
  1493 ;;		None
  1494 ;; Auto vars:     Size  Location     Type
  1495 ;;		None
  1496 ;; Return value:  Size  Location     Type
  1497 ;;                  1    wreg      void 
  1498 ;; Registers used:
  1499 ;;		wreg, status,2, cstack
  1500 ;; Tracked objects:
  1501 ;;		On entry : 0/0
  1502 ;;		On exit  : 0/0
  1503 ;;		Unchanged: 0/0
  1504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1507 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1508 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1509 ;;Total ram usage:        2 bytes
  1510 ;; Hardware stack levels used:    1
  1511 ;; Hardware stack levels required when called:    5
  1512 ;; This function calls:
  1513 ;;		_start_md_boot_timer
  1514 ;; This function is called by:
  1515 ;;		_main
  1516 ;;		_check_modem_state
  1517 ;; This function uses a non-reentrant model
  1518 ;;
  1519                           
  1520                           	psect	text3
  1521  0018D0                     __ptext3:
  1522                           	opt stack 0
  1523  0018D0                     _start_modem_send_process:
  1524                           	opt stack 25
  1525                           
  1526                           ;modem.c: 10: if (md_state != IDLE)
  1527                           
  1528                           ;incstack = 0
  1529  0018D0  0100               	movlb	0	; () banked
  1530  0018D2  51FC               	movf	_md_state& (0+255),w,b
  1531  0018D4  B4D8               	btfsc	status,2,c
  1532  0018D6  D00C               	goto	l325
  1533                           
  1534                           ; BSR set to: 0
  1535                           ;modem.c: 11: {
  1536                           ;modem.c: 12: PORTAbits.RA3 = 0;
  1537  0018D8  9680               	bcf	3968,3,c	;volatile
  1538                           
  1539                           ; BSR set to: 0
  1540                           ;modem.c: 13: _delay((unsigned long)((5000)*(8000000/4000.0)));
  1541  0018DA  0E33               	movlw	51
  1542  0018DC  6E17               	movwf	(??_start_modem_send_process+1)& (0+255),c
  1543  0018DE  0EBB               	movlw	187
  1544  0018E0  6E16               	movwf	??_start_modem_send_process& (0+255),c
  1545  0018E2  0EE0               	movlw	224
  1546  0018E4                     u1597:
  1547  0018E4  2EE8               	decfsz	wreg,f,c
  1548  0018E6  D7FE               	bra	u1597
  1549  0018E8  2E16               	decfsz	??_start_modem_send_process& (0+255),f,c
  1550  0018EA  D7FC               	bra	u1597
  1551  0018EC  2E17               	decfsz	(??_start_modem_send_process+1)& (0+255),f,c
  1552  0018EE  D7FA               	bra	u1597
  1553  0018F0                     l325:
  1554                           
  1555                           ;modem.c: 14: }
  1556                           ;modem.c: 15: PORTAbits.RA3 = 1;
  1557  0018F0  8680               	bsf	3968,3,c	;volatile
  1558                           
  1559                           ;modem.c: 16: start_md_boot_timer();
  1560  0018F2  ECE2  F00C         	call	_start_md_boot_timer	;wreg free
  1561                           
  1562                           ;modem.c: 17: md_state = WAITING_FOR_BOOT;
  1563  0018F6  0E01               	movlw	1
  1564  0018F8  0100               	movlb	0	; () banked
  1565  0018FA  6FFC               	movwf	_md_state& (0+255),b
  1566                           
  1567                           ; BSR set to: 0
  1568  0018FC  0012               	return		;funcret
  1569  0018FE                     __end_of_start_modem_send_process:
  1570                           	opt stack 0
  1571                           tblptru	equ	0xFF8
  1572                           tblptrh	equ	0xFF7
  1573                           tblptrl	equ	0xFF6
  1574                           tablat	equ	0xFF5
  1575                           intcon	equ	0xFF2
  1576                           postinc0	equ	0xFEE
  1577                           wreg	equ	0xFE8
  1578                           postdec1	equ	0xFE5
  1579                           fsr1l	equ	0xFE1
  1580                           status	equ	0xFD8
  1581                           
  1582 ;; *************** function _start_md_boot_timer *****************
  1583 ;; Defined at:
  1584 ;;		line 20 in file "modem.c"
  1585 ;; Parameters:    Size  Location     Type
  1586 ;;		None
  1587 ;; Auto vars:     Size  Location     Type
  1588 ;;		None
  1589 ;; Return value:  Size  Location     Type
  1590 ;;                  1    wreg      void 
  1591 ;; Registers used:
  1592 ;;		wreg, status,2, cstack
  1593 ;; Tracked objects:
  1594 ;;		On entry : 0/0
  1595 ;;		On exit  : 0/0
  1596 ;;		Unchanged: 0/0
  1597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1601 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1602 ;;Total ram usage:        0 bytes
  1603 ;; Hardware stack levels used:    1
  1604 ;; Hardware stack levels required when called:    4
  1605 ;; This function calls:
  1606 ;;		_reload_tmr5_pt25s
  1607 ;; This function is called by:
  1608 ;;		_start_modem_send_process
  1609 ;; This function uses a non-reentrant model
  1610 ;;
  1611                           
  1612                           	psect	text4
  1613  0019C4                     __ptext4:
  1614                           	opt stack 0
  1615  0019C4                     _start_md_boot_timer:
  1616                           	opt stack 25
  1617                           
  1618                           ;modem.c: 22: reload_tmr5_pt25s();
  1619                           
  1620                           ; BSR set to: 0
  1621                           ;incstack = 0
  1622  0019C4  EC91  F00C         	call	_reload_tmr5_pt25s	;wreg free
  1623  0019C8  0012               	return		;funcret
  1624  0019CA                     __end_of_start_md_boot_timer:
  1625                           	opt stack 0
  1626                           tblptru	equ	0xFF8
  1627                           tblptrh	equ	0xFF7
  1628                           tblptrl	equ	0xFF6
  1629                           tablat	equ	0xFF5
  1630                           intcon	equ	0xFF2
  1631                           postinc0	equ	0xFEE
  1632                           wreg	equ	0xFE8
  1633                           postdec1	equ	0xFE5
  1634                           fsr1l	equ	0xFE1
  1635                           status	equ	0xFD8
  1636                           
  1637 ;; *************** function _setup_data_ok *****************
  1638 ;; Defined at:
  1639 ;;		line 115 in file "modem.c"
  1640 ;; Parameters:    Size  Location     Type
  1641 ;;		None
  1642 ;; Auto vars:     Size  Location     Type
  1643 ;;  setApn         47    0[BANK0 ] unsigned char [47]
  1644 ;;  cfgSocket      25   47[BANK0 ] unsigned char [25]
  1645 ;;  activatePDP    15   72[BANK0 ] unsigned char [15]
  1646 ;; Return value:  Size  Location     Type
  1647 ;;                  1    wreg      unsigned char 
  1648 ;; Registers used:
  1649 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1650 ;; Tracked objects:
  1651 ;;		On entry : 0/0
  1652 ;;		On exit  : 0/0
  1653 ;;		Unchanged: 0/0
  1654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1656 ;;      Locals:         0      87       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1658 ;;      Totals:         0      87       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1659 ;;Total ram usage:       87 bytes
  1660 ;; Hardware stack levels used:    1
  1661 ;; Hardware stack levels required when called:    5
  1662 ;; This function calls:
  1663 ;;		_init_md_uart
  1664 ;;		_md_uart_write_str_ok
  1665 ;;		_terminate_md_uart
  1666 ;; This function is called by:
  1667 ;;		_check_modem_state
  1668 ;; This function uses a non-reentrant model
  1669 ;;
  1670                           
  1671                           	psect	text5
  1672  0016B8                     __ptext5:
  1673                           	opt stack 0
  1674  0016B8                     _setup_data_ok:
  1675                           	opt stack 24
  1676                           
  1677                           ;modem.c: 117: uint8_t setApn[] = "AT+CGDCONT=3,\"IPV4V6\",\"wyleslte.gw7.vzwentp\"\r\n"
      +                          ;
  1678                           
  1679                           ;incstack = 0
  1680  0016B8  EE21  F000         	lfsr	2,setup_data_ok@F6850
  1681  0016BC  EE10  F060         	lfsr	1,setup_data_ok@setApn
  1682  0016C0  0E2E               	movlw	46
  1683  0016C2                     u1431:
  1684  0016C2  CFDB FFE3          	movff	plusw2,plusw1
  1685  0016C6  06E8               	decf	wreg,f,c
  1686  0016C8  E2FC               	bc	u1431
  1687                           
  1688                           ;modem.c: 118: uint8_t cfgSocket[] = "AT#SCFGEXT=1,1,0,0,0,0\r\n";
  1689  0016CA  EE21  F02F         	lfsr	2,setup_data_ok@F6852
  1690  0016CE  EE10  F08F         	lfsr	1,setup_data_ok@cfgSocket
  1691  0016D2  0E18               	movlw	24
  1692  0016D4                     u1441:
  1693  0016D4  CFDB FFE3          	movff	plusw2,plusw1
  1694  0016D8  06E8               	decf	wreg,f,c
  1695  0016DA  E2FC               	bc	u1441
  1696                           
  1697                           ;modem.c: 119: uint8_t activatePDP[] = "AT#SGACT=3,1\r\n";
  1698  0016DC  EE21  F068         	lfsr	2,setup_data_ok@F6854
  1699  0016E0  EE10  F0A8         	lfsr	1,setup_data_ok@activatePDP
  1700  0016E4  0E0E               	movlw	14
  1701  0016E6                     u1451:
  1702  0016E6  CFDB FFE3          	movff	plusw2,plusw1
  1703  0016EA  06E8               	decf	wreg,f,c
  1704  0016EC  E2FC               	bc	u1451
  1705                           
  1706                           ;modem.c: 121: init_md_uart();
  1707  0016EE  EC7F  F00C         	call	_init_md_uart	;wreg free
  1708                           
  1709                           ;modem.c: 124: md_uart_write_str_ok((uint8_t *)&setApn[0], sizeof(setApn), 1, 0);
  1710  0016F2  0E60               	movlw	low setup_data_ok@setApn
  1711  0016F4  6E17               	movwf	md_uart_write_str_ok@data,c
  1712  0016F6  0E00               	movlw	high setup_data_ok@setApn
  1713  0016F8  6E18               	movwf	md_uart_write_str_ok@data+1,c
  1714  0016FA  0E2F               	movlw	47
  1715  0016FC  6E19               	movwf	md_uart_write_str_ok@len1,c
  1716  0016FE  0E01               	movlw	1
  1717  001700  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  1718  001702  0E00               	movlw	0
  1719  001704  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  1720  001706  EC49  F00A         	call	_md_uart_write_str_ok	;wreg free
  1721                           
  1722                           ;modem.c: 125: md_uart_write_str_ok((uint8_t *)&cfgSocket[0], sizeof(cfgSocket), 1, 0);
  1723  00170A  0E8F               	movlw	low setup_data_ok@cfgSocket
  1724  00170C  6E17               	movwf	md_uart_write_str_ok@data,c
  1725  00170E  0E00               	movlw	high setup_data_ok@cfgSocket
  1726  001710  6E18               	movwf	md_uart_write_str_ok@data+1,c
  1727  001712  0E19               	movlw	25
  1728  001714  6E19               	movwf	md_uart_write_str_ok@len1,c
  1729  001716  0E01               	movlw	1
  1730  001718  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  1731  00171A  0E00               	movlw	0
  1732  00171C  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  1733  00171E  EC49  F00A         	call	_md_uart_write_str_ok	;wreg free
  1734                           
  1735                           ;modem.c: 126: pdpIsActive = md_uart_write_str_ok((uint8_t *)&activatePDP[0], sizeof(act
      +                          ivatePDP), 1, 0);
  1736  001722  0EA8               	movlw	low setup_data_ok@activatePDP
  1737  001724  6E17               	movwf	md_uart_write_str_ok@data,c
  1738  001726  0E00               	movlw	high setup_data_ok@activatePDP
  1739  001728  6E18               	movwf	md_uart_write_str_ok@data+1,c
  1740  00172A  0E0F               	movlw	15
  1741  00172C  6E19               	movwf	md_uart_write_str_ok@len1,c
  1742  00172E  0E01               	movlw	1
  1743  001730  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  1744  001732  0E00               	movlw	0
  1745  001734  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  1746  001736  EC49  F00A         	call	_md_uart_write_str_ok	;wreg free
  1747  00173A  0100               	movlb	0	; () banked
  1748  00173C  6FFA               	movwf	_pdpIsActive& (0+255),b
  1749                           
  1750                           ; BSR set to: 0
  1751                           ;modem.c: 127: terminate_md_uart();
  1752  00173E  ECD8  F00C         	call	_terminate_md_uart	;wreg free
  1753                           
  1754                           ;modem.c: 128: pdpIsActive = 1;
  1755  001742  0E01               	movlw	1
  1756  001744  0100               	movlb	0	; () banked
  1757  001746  6FFA               	movwf	_pdpIsActive& (0+255),b
  1758  001748  0012               	return	
  1759  00174A                     __end_of_setup_data_ok:
  1760                           	opt stack 0
  1761                           tblptru	equ	0xFF8
  1762                           tblptrh	equ	0xFF7
  1763                           tblptrl	equ	0xFF6
  1764                           tablat	equ	0xFF5
  1765                           intcon	equ	0xFF2
  1766                           postinc0	equ	0xFEE
  1767                           wreg	equ	0xFE8
  1768                           postdec1	equ	0xFE5
  1769                           plusw1	equ	0xFE3
  1770                           fsr1l	equ	0xFE1
  1771                           plusw2	equ	0xFDB
  1772                           status	equ	0xFD8
  1773                           
  1774 ;; *************** function _send_over_socket_ok *****************
  1775 ;; Defined at:
  1776 ;;		line 134 in file "modem.c"
  1777 ;; Parameters:    Size  Location     Type
  1778 ;;		None
  1779 ;; Auto vars:     Size  Location     Type
  1780 ;;  openConnecti   44    0[BANK0 ] const unsigned char [44]
  1781 ;;  srecv          16   44[BANK0 ] const unsigned char [16]
  1782 ;;  ssend          13   60[BANK0 ] const unsigned char [13]
  1783 ;;  msg             8   73[BANK0 ] const unsigned char [8]
  1784 ;;  terminateDat    1   81[BANK0 ] unsigned char 
  1785 ;; Return value:  Size  Location     Type
  1786 ;;                  1    wreg      unsigned char 
  1787 ;; Registers used:
  1788 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1789 ;; Tracked objects:
  1790 ;;		On entry : 0/0
  1791 ;;		On exit  : 0/0
  1792 ;;		Unchanged: 0/0
  1793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1795 ;;      Locals:         0      82       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1796 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1797 ;;      Totals:         2      82       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1798 ;;Total ram usage:       84 bytes
  1799 ;; Hardware stack levels used:    1
  1800 ;; Hardware stack levels required when called:    5
  1801 ;; This function calls:
  1802 ;;		_init_md_uart
  1803 ;;		_md_uart_write_str_ok
  1804 ;;		_terminate_md_uart
  1805 ;; This function is called by:
  1806 ;;		_check_modem_state
  1807 ;; This function uses a non-reentrant model
  1808 ;;
  1809                           
  1810                           	psect	text6
  1811  0012B2                     __ptext6:
  1812                           	opt stack 0
  1813  0012B2                     _send_over_socket_ok:
  1814                           	opt stack 24
  1815                           
  1816                           ;modem.c: 136: const uint8_t openConnection[] = "AT#SD=1,0,10510,\"modules.telit.com\",0
      +                          ,0,1\r\n";
  1817                           
  1818                           ; BSR set to: 0
  1819                           ;incstack = 0
  1820  0012B2  0E01               	movlw	low send_over_socket_ok@F6859
  1821  0012B4  6EF6               	movwf	tblptrl,c
  1822  0012B6                     	if	1	;There is more than 1 active tblptr byte
  1823  0012B6  0E10               	movlw	high send_over_socket_ok@F6859
  1824  0012B8  6EF7               	movwf	tblptrh,c
  1825  0012BA                     	endif
  1826  0012BA                     	if	0	;There are less than 3 active tblptr bytes
  1827  0012BA                     	endif
  1828  0012BA  EE20  F060         	lfsr	2,send_over_socket_ok@openConnection
  1829  0012BE  0E2B               	movlw	43
  1830  0012C0                     u1460:
  1831  0012C0  0009               	tblrd		*+
  1832  0012C2  CFF5 FFDE          	movff	tablat,postinc2
  1833  0012C6  06E8               	decf	wreg,f,c
  1834  0012C8  E2FB               	bc	u1460
  1835                           
  1836                           ;modem.c: 137: const uint8_t ssend[] = "AT#SSEND=1\r\n";
  1837  0012CA  0E4C               	movlw	low send_over_socket_ok@F6861
  1838  0012CC  6EF6               	movwf	tblptrl,c
  1839  0012CE                     	if	1	;There is more than 1 active tblptr byte
  1840  0012CE  0E10               	movlw	high send_over_socket_ok@F6861
  1841  0012D0  6EF7               	movwf	tblptrh,c
  1842  0012D2                     	endif
  1843  0012D2                     	if	0	;There are less than 3 active tblptr bytes
  1844  0012D2                     	endif
  1845  0012D2  EE20  F09C         	lfsr	2,send_over_socket_ok@ssend
  1846  0012D6  0E0C               	movlw	12
  1847  0012D8                     u1470:
  1848  0012D8  0009               	tblrd		*+
  1849  0012DA  CFF5 FFDE          	movff	tablat,postinc2
  1850  0012DE  06E8               	decf	wreg,f,c
  1851  0012E0  E2FB               	bc	u1470
  1852                           
  1853                           ;modem.c: 138: const uint8_t srecv[]="AT#SRECV=1,89\r\n";
  1854  0012E2  0E2D               	movlw	low send_over_socket_ok@F6863
  1855  0012E4  6EF6               	movwf	tblptrl,c
  1856  0012E6                     	if	1	;There is more than 1 active tblptr byte
  1857  0012E6  0E10               	movlw	high send_over_socket_ok@F6863
  1858  0012E8  6EF7               	movwf	tblptrh,c
  1859  0012EA                     	endif
  1860  0012EA                     	if	0	;There are less than 3 active tblptr bytes
  1861  0012EA                     	endif
  1862  0012EA  EE20  F08C         	lfsr	2,send_over_socket_ok@srecv
  1863  0012EE  0E0F               	movlw	15
  1864  0012F0                     u1480:
  1865  0012F0  0009               	tblrd		*+
  1866  0012F2  CFF5 FFDE          	movff	tablat,postinc2
  1867  0012F6  06E8               	decf	wreg,f,c
  1868  0012F8  E2FB               	bc	u1480
  1869                           
  1870                           ;modem.c: 139: const uint8_t msg[] = "Echo.\r\n";
  1871  0012FA  0E63               	movlw	low send_over_socket_ok@F6865
  1872  0012FC  6EF6               	movwf	tblptrl,c
  1873  0012FE                     	if	1	;There is more than 1 active tblptr byte
  1874  0012FE  0E10               	movlw	high send_over_socket_ok@F6865
  1875  001300  6EF7               	movwf	tblptrh,c
  1876  001302                     	endif
  1877  001302                     	if	0	;There are less than 3 active tblptr bytes
  1878  001302                     	endif
  1879  001302  EE20  F0A9         	lfsr	2,send_over_socket_ok@msg
  1880  001306  0E07               	movlw	7
  1881  001308                     u1490:
  1882  001308  0009               	tblrd		*+
  1883  00130A  CFF5 FFDE          	movff	tablat,postinc2
  1884  00130E  06E8               	decf	wreg,f,c
  1885  001310  E2FB               	bc	u1490
  1886                           
  1887                           ;modem.c: 141: uint8_t terminateData = 26;
  1888  001312  0E1A               	movlw	26
  1889  001314  0100               	movlb	0	; () banked
  1890  001316  6FB1               	movwf	send_over_socket_ok@terminateData& (0+255),b
  1891                           
  1892                           ; BSR set to: 0
  1893                           ;modem.c: 142: init_md_uart();
  1894  001318  EC7F  F00C         	call	_init_md_uart	;wreg free
  1895                           
  1896                           ;modem.c: 144: md_uart_write_str_ok((uint8_t *)&openConnection[0], sizeof(openConnection
      +                          ), 1, 0);
  1897  00131C  0E60               	movlw	low send_over_socket_ok@openConnection
  1898  00131E  6E17               	movwf	md_uart_write_str_ok@data,c
  1899  001320  0E00               	movlw	high send_over_socket_ok@openConnection
  1900  001322  6E18               	movwf	md_uart_write_str_ok@data+1,c
  1901  001324  0E2C               	movlw	44
  1902  001326  6E19               	movwf	md_uart_write_str_ok@len1,c
  1903  001328  0E01               	movlw	1
  1904  00132A  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  1905  00132C  0E00               	movlw	0
  1906  00132E  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  1907  001330  EC49  F00A         	call	_md_uart_write_str_ok	;wreg free
  1908                           
  1909                           ;modem.c: 145: md_uart_write_str_ok((uint8_t *)&ssend[0], sizeof(ssend), 0, 1);
  1910  001334  0E9C               	movlw	low send_over_socket_ok@ssend
  1911  001336  6E17               	movwf	md_uart_write_str_ok@data,c
  1912  001338  0E00               	movlw	high send_over_socket_ok@ssend
  1913  00133A  6E18               	movwf	md_uart_write_str_ok@data+1,c
  1914  00133C  0E0D               	movlw	13
  1915  00133E  6E19               	movwf	md_uart_write_str_ok@len1,c
  1916  001340  0E00               	movlw	0
  1917  001342  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  1918  001344  0E01               	movlw	1
  1919  001346  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  1920  001348  EC49  F00A         	call	_md_uart_write_str_ok	;wreg free
  1921                           
  1922                           ;modem.c: 146: md_uart_write_str_ok((uint8_t *)&msg[0], sizeof(msg), 0, 0);
  1923  00134C  0EA9               	movlw	low send_over_socket_ok@msg
  1924  00134E  6E17               	movwf	md_uart_write_str_ok@data,c
  1925  001350  0E00               	movlw	high send_over_socket_ok@msg
  1926  001352  6E18               	movwf	md_uart_write_str_ok@data+1,c
  1927  001354  0E08               	movlw	8
  1928  001356  6E19               	movwf	md_uart_write_str_ok@len1,c
  1929  001358  0E00               	movlw	0
  1930  00135A  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  1931  00135C  0E00               	movlw	0
  1932  00135E  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  1933  001360  EC49  F00A         	call	_md_uart_write_str_ok	;wreg free
  1934                           
  1935                           ;modem.c: 148: md_uart_write_str_ok((uint8_t *)&terminateData, 1, 1, 0);
  1936  001364  0EB1               	movlw	low send_over_socket_ok@terminateData
  1937  001366  6E17               	movwf	md_uart_write_str_ok@data,c
  1938  001368  0E00               	movlw	high send_over_socket_ok@terminateData
  1939  00136A  6E18               	movwf	md_uart_write_str_ok@data+1,c
  1940  00136C  0E01               	movlw	1
  1941  00136E  6E19               	movwf	md_uart_write_str_ok@len1,c
  1942  001370  0E01               	movlw	1
  1943  001372  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  1944  001374  0E00               	movlw	0
  1945  001376  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  1946  001378  EC49  F00A         	call	_md_uart_write_str_ok	;wreg free
  1947                           
  1948                           ;modem.c: 149: CREN1 = 1;
  1949  00137C  88AB               	bsf	4011,4,c	;volatile
  1950                           
  1951                           ;modem.c: 150: _delay((unsigned long)((2000)*(8000000/4000.0)));
  1952  00137E  0E15               	movlw	21
  1953  001380  6E21               	movwf	(??_send_over_socket_ok+1)& (0+255),c
  1954  001382  0E4B               	movlw	75
  1955  001384  6E20               	movwf	??_send_over_socket_ok& (0+255),c
  1956  001386  0EBE               	movlw	190
  1957  001388                     u1607:
  1958  001388  2EE8               	decfsz	wreg,f,c
  1959  00138A  D7FE               	bra	u1607
  1960  00138C  2E20               	decfsz	??_send_over_socket_ok& (0+255),f,c
  1961  00138E  D7FC               	bra	u1607
  1962  001390  2E21               	decfsz	(??_send_over_socket_ok+1)& (0+255),f,c
  1963  001392  D7FA               	bra	u1607
  1964  001394  D000               	nop2	
  1965                           
  1966                           ;modem.c: 151: CREN1 = 0;
  1967  001396  98AB               	bcf	4011,4,c	;volatile
  1968                           
  1969                           ;modem.c: 152: md_uart_write_str_ok((uint8_t *)&srecv[0], sizeof(srecv), 1, 0);
  1970  001398  0E8C               	movlw	low send_over_socket_ok@srecv
  1971  00139A  6E17               	movwf	md_uart_write_str_ok@data,c
  1972  00139C  0E00               	movlw	high send_over_socket_ok@srecv
  1973  00139E  6E18               	movwf	md_uart_write_str_ok@data+1,c
  1974  0013A0  0E10               	movlw	16
  1975  0013A2  6E19               	movwf	md_uart_write_str_ok@len1,c
  1976  0013A4  0E01               	movlw	1
  1977  0013A6  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  1978  0013A8  0E00               	movlw	0
  1979  0013AA  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  1980  0013AC  EC49  F00A         	call	_md_uart_write_str_ok	;wreg free
  1981                           
  1982                           ;modem.c: 153: terminate_md_uart();
  1983  0013B0  ECD8  F00C         	call	_terminate_md_uart	;wreg free
  1984  0013B4  0012               	return	
  1985  0013B6                     __end_of_send_over_socket_ok:
  1986                           	opt stack 0
  1987                           tblptru	equ	0xFF8
  1988                           tblptrh	equ	0xFF7
  1989                           tblptrl	equ	0xFF6
  1990                           tablat	equ	0xFF5
  1991                           intcon	equ	0xFF2
  1992                           postinc0	equ	0xFEE
  1993                           wreg	equ	0xFE8
  1994                           postdec1	equ	0xFE5
  1995                           plusw1	equ	0xFE3
  1996                           fsr1l	equ	0xFE1
  1997                           postinc2	equ	0xFDE
  1998                           plusw2	equ	0xFDB
  1999                           status	equ	0xFD8
  2000                           
  2001 ;; *************** function _send_md_cfg_cmds_ok *****************
  2002 ;; Defined at:
  2003 ;;		line 73 in file "modem.c"
  2004 ;; Parameters:    Size  Location     Type
  2005 ;;		None
  2006 ;; Auto vars:     Size  Location     Type
  2007 ;;  ledCfg         16   16[BANK0 ] unsigned char [16]
  2008 ;;  baud           16    0[BANK0 ] unsigned char [16]
  2009 ;;  cereg          12   56[BANK0 ] unsigned char [12]
  2010 ;;  ledpattern     12   44[BANK0 ] unsigned char [12]
  2011 ;;  cmee           12   32[BANK0 ] unsigned char [12]
  2012 ;;  gprs           11   90[BANK0 ] unsigned char [11]
  2013 ;;  creg           11   79[BANK0 ] unsigned char [11]
  2014 ;;  cpin           11   68[BANK0 ] unsigned char [11]
  2015 ;;  queryVersion   10  101[BANK0 ] unsigned char [10]
  2016 ;;  csq             9  111[BANK0 ] unsigned char [9]
  2017 ;;  ate             7  120[BANK0 ] unsigned char [7]
  2018 ;;  at              5  127[BANK0 ] unsigned char [5]
  2019 ;;  gotOk           1  132[BANK0 ] unsigned char 
  2020 ;; Return value:  Size  Location     Type
  2021 ;;                  1    wreg      unsigned char 
  2022 ;; Registers used:
  2023 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2024 ;; Tracked objects:
  2025 ;;		On entry : 0/0
  2026 ;;		On exit  : 0/0
  2027 ;;		Unchanged: 0/0
  2028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2030 ;;      Locals:         0     133       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2032 ;;      Totals:         0     133       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2033 ;;Total ram usage:      133 bytes
  2034 ;; Hardware stack levels used:    1
  2035 ;; Hardware stack levels required when called:    5
  2036 ;; This function calls:
  2037 ;;		_init_md_uart
  2038 ;;		_md_uart_write_str_ok
  2039 ;;		_terminate_md_uart
  2040 ;; This function is called by:
  2041 ;;		_check_modem_state
  2042 ;; This function uses a non-reentrant model
  2043 ;;
  2044                           
  2045                           	psect	text7
  2046  001072                     __ptext7:
  2047                           	opt stack 0
  2048  001072                     _send_md_cfg_cmds_ok:
  2049                           	opt stack 24
  2050                           
  2051                           ;modem.c: 75: uint8_t at[] = "AT\r\n";
  2052                           
  2053                           ;incstack = 0
  2054  001072  EE20  F0F5         	lfsr	2,send_md_cfg_cmds_ok@F6813
  2055  001076  EE10  F0DF         	lfsr	1,send_md_cfg_cmds_ok@at
  2056  00107A  0E04               	movlw	4
  2057  00107C                     u1311:
  2058  00107C  CFDB FFE3          	movff	plusw2,plusw1
  2059  001080  06E8               	decf	wreg,f,c
  2060  001082  E2FC               	bc	u1311
  2061                           
  2062                           ;modem.c: 76: uint8_t ate[] = "ATE1\r\n";
  2063  001084  EE20  F0EE         	lfsr	2,send_md_cfg_cmds_ok@F6815
  2064  001088  EE10  F0D8         	lfsr	1,send_md_cfg_cmds_ok@ate
  2065  00108C  0E06               	movlw	6
  2066  00108E                     u1321:
  2067  00108E  CFDB FFE3          	movff	plusw2,plusw1
  2068  001092  06E8               	decf	wreg,f,c
  2069  001094  E2FC               	bc	u1321
  2070                           
  2071                           ;modem.c: 77: uint8_t cmee[] = "AT+CMEE=2\r\n";
  2072  001096  EE21  F08F         	lfsr	2,send_md_cfg_cmds_ok@F6817
  2073  00109A  EE10  F080         	lfsr	1,send_md_cfg_cmds_ok@cmee
  2074  00109E  0E0B               	movlw	11
  2075  0010A0                     u1331:
  2076  0010A0  CFDB FFE3          	movff	plusw2,plusw1
  2077  0010A4  06E8               	decf	wreg,f,c
  2078  0010A6  E2FC               	bc	u1331
  2079                           
  2080                           ;modem.c: 78: uint8_t baud[] = "AT+IPR=115200\r\n";
  2081  0010A8  EE21  F058         	lfsr	2,send_md_cfg_cmds_ok@F6819
  2082  0010AC  EE10  F060         	lfsr	1,send_md_cfg_cmds_ok@baud
  2083  0010B0  0E0F               	movlw	15
  2084  0010B2                     u1341:
  2085  0010B2  CFDB FFE3          	movff	plusw2,plusw1
  2086  0010B6  06E8               	decf	wreg,f,c
  2087  0010B8  E2FC               	bc	u1341
  2088                           
  2089                           ;modem.c: 79: uint8_t ledCfg[] = "AT#GPIO=7,0,2\r\n";
  2090  0010BA  EE21  F048         	lfsr	2,send_md_cfg_cmds_ok@F6821
  2091  0010BE  EE10  F070         	lfsr	1,send_md_cfg_cmds_ok@ledCfg
  2092  0010C2  0E0F               	movlw	15
  2093  0010C4                     u1351:
  2094  0010C4  CFDB FFE3          	movff	plusw2,plusw1
  2095  0010C8  06E8               	decf	wreg,f,c
  2096  0010CA  E2FC               	bc	u1351
  2097                           
  2098                           ;modem.c: 80: uint8_t ledpattern[] = "AT#SLED=4\r\n";
  2099  0010CC  EE21  F083         	lfsr	2,send_md_cfg_cmds_ok@F6823
  2100  0010D0  EE10  F08C         	lfsr	1,send_md_cfg_cmds_ok@ledpattern
  2101  0010D4  0E0B               	movlw	11
  2102  0010D6                     u1361:
  2103  0010D6  CFDB FFE3          	movff	plusw2,plusw1
  2104  0010DA  06E8               	decf	wreg,f,c
  2105  0010DC  E2FC               	bc	u1361
  2106                           
  2107                           ;modem.c: 81: uint8_t queryVersion[] = "AT#CGMR\r\n";
  2108  0010DE  EE20  F02E         	lfsr	2,send_md_cfg_cmds_ok@F6825
  2109  0010E2  EE10  F0C5         	lfsr	1,send_md_cfg_cmds_ok@queryVersion
  2110  0010E6  0E09               	movlw	9
  2111  0010E8                     u1371:
  2112  0010E8  CFDB FFE3          	movff	plusw2,plusw1
  2113  0010EC  06E8               	decf	wreg,f,c
  2114  0010EE  E2FC               	bc	u1371
  2115                           
  2116                           ;modem.c: 82: uint8_t cpin[] = "AT+CPIN?\r\n";
  2117  0010F0  EE20  F023         	lfsr	2,send_md_cfg_cmds_ok@F6827
  2118  0010F4  EE10  F0A4         	lfsr	1,send_md_cfg_cmds_ok@cpin
  2119  0010F8  0E0A               	movlw	10
  2120  0010FA                     u1381:
  2121  0010FA  CFDB FFE3          	movff	plusw2,plusw1
  2122  0010FE  06E8               	decf	wreg,f,c
  2123  001100  E2FC               	bc	u1381
  2124                           
  2125                           ;modem.c: 83: uint8_t creg[] = "AT+CREG?\r\n";
  2126  001102  EE21  F0A6         	lfsr	2,send_md_cfg_cmds_ok@F6829
  2127  001106  EE10  F0AF         	lfsr	1,send_md_cfg_cmds_ok@creg
  2128  00110A  0E0A               	movlw	10
  2129  00110C                     u1391:
  2130  00110C  CFDB FFE3          	movff	plusw2,plusw1
  2131  001110  06E8               	decf	wreg,f,c
  2132  001112  E2FC               	bc	u1391
  2133                           
  2134                           ;modem.c: 84: uint8_t cereg[] = "AT+CEREG?\r\n";
  2135  001114  EE21  F077         	lfsr	2,send_md_cfg_cmds_ok@F6831
  2136  001118  EE10  F098         	lfsr	1,send_md_cfg_cmds_ok@cereg
  2137  00111C  0E0B               	movlw	11
  2138  00111E                     u1401:
  2139  00111E  CFDB FFE3          	movff	plusw2,plusw1
  2140  001122  06E8               	decf	wreg,f,c
  2141  001124  E2FC               	bc	u1401
  2142                           
  2143                           ;modem.c: 85: uint8_t gprs[] = "AT#GPRS?\r\n";
  2144  001126  EE21  F09B         	lfsr	2,send_md_cfg_cmds_ok@F6833
  2145  00112A  EE10  F0BA         	lfsr	1,send_md_cfg_cmds_ok@gprs
  2146  00112E  0E0A               	movlw	10
  2147  001130                     u1411:
  2148  001130  CFDB FFE3          	movff	plusw2,plusw1
  2149  001134  06E8               	decf	wreg,f,c
  2150  001136  E2FC               	bc	u1411
  2151                           
  2152                           ;modem.c: 86: uint8_t csq[] = "AT+CSQ\r\n";
  2153  001138  EE20  F0E5         	lfsr	2,send_md_cfg_cmds_ok@F6835
  2154  00113C  EE10  F0CF         	lfsr	1,send_md_cfg_cmds_ok@csq
  2155  001140  0E08               	movlw	8
  2156  001142                     u1421:
  2157  001142  CFDB FFE3          	movff	plusw2,plusw1
  2158  001146  06E8               	decf	wreg,f,c
  2159  001148  E2FC               	bc	u1421
  2160                           
  2161                           ;modem.c: 89: bool gotOk = 1;
  2162  00114A  0E01               	movlw	1
  2163  00114C  0100               	movlb	0	; () banked
  2164  00114E  6FE4               	movwf	send_md_cfg_cmds_ok@gotOk& (0+255),b
  2165                           
  2166                           ; BSR set to: 0
  2167                           ;modem.c: 90: init_md_uart();
  2168  001150  EC7F  F00C         	call	_init_md_uart	;wreg free
  2169                           
  2170                           ;modem.c: 93: gotOk &= md_uart_write_str_ok((uint8_t *)&at[0], sizeof(at), 1, 0);
  2171  001154  0EDF               	movlw	low send_md_cfg_cmds_ok@at
  2172  001156  6E17               	movwf	md_uart_write_str_ok@data,c
  2173  001158  0E00               	movlw	high send_md_cfg_cmds_ok@at
  2174  00115A  6E18               	movwf	md_uart_write_str_ok@data+1,c
  2175  00115C  0E05               	movlw	5
  2176  00115E  6E19               	movwf	md_uart_write_str_ok@len1,c
  2177  001160  0E01               	movlw	1
  2178  001162  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  2179  001164  0E00               	movlw	0
  2180  001166  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  2181  001168  EC49  F00A         	call	_md_uart_write_str_ok	;wreg free
  2182  00116C  0100               	movlb	0	; () banked
  2183  00116E  17E4               	andwf	send_md_cfg_cmds_ok@gotOk& (0+255),f,b
  2184                           
  2185                           ; BSR set to: 0
  2186                           ;modem.c: 94: gotOk &= md_uart_write_str_ok((uint8_t *)&ate[0], sizeof(ate), 1, 0);
  2187  001170  0ED8               	movlw	low send_md_cfg_cmds_ok@ate
  2188  001172  6E17               	movwf	md_uart_write_str_ok@data,c
  2189  001174  0E00               	movlw	high send_md_cfg_cmds_ok@ate
  2190  001176  6E18               	movwf	md_uart_write_str_ok@data+1,c
  2191  001178  0E07               	movlw	7
  2192  00117A  6E19               	movwf	md_uart_write_str_ok@len1,c
  2193  00117C  0E01               	movlw	1
  2194  00117E  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  2195  001180  0E00               	movlw	0
  2196  001182  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  2197  001184  EC49  F00A         	call	_md_uart_write_str_ok	;wreg free
  2198  001188  0100               	movlb	0	; () banked
  2199  00118A  17E4               	andwf	send_md_cfg_cmds_ok@gotOk& (0+255),f,b
  2200                           
  2201                           ; BSR set to: 0
  2202                           ;modem.c: 95: gotOk &= md_uart_write_str_ok((uint8_t *)&cmee[0], sizeof(cmee), 1, 0);
  2203  00118C  0E80               	movlw	low send_md_cfg_cmds_ok@cmee
  2204  00118E  6E17               	movwf	md_uart_write_str_ok@data,c
  2205  001190  0E00               	movlw	high send_md_cfg_cmds_ok@cmee
  2206  001192  6E18               	movwf	md_uart_write_str_ok@data+1,c
  2207  001194  0E0C               	movlw	12
  2208  001196  6E19               	movwf	md_uart_write_str_ok@len1,c
  2209  001198  0E01               	movlw	1
  2210  00119A  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  2211  00119C  0E00               	movlw	0
  2212  00119E  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  2213  0011A0  EC49  F00A         	call	_md_uart_write_str_ok	;wreg free
  2214  0011A4  0100               	movlb	0	; () banked
  2215  0011A6  17E4               	andwf	send_md_cfg_cmds_ok@gotOk& (0+255),f,b
  2216                           
  2217                           ; BSR set to: 0
  2218                           ;modem.c: 96: gotOk &= md_uart_write_str_ok((uint8_t *)&baud[0], sizeof(baud), 1, 0);
  2219  0011A8  0E60               	movlw	low send_md_cfg_cmds_ok@baud
  2220  0011AA  6E17               	movwf	md_uart_write_str_ok@data,c
  2221  0011AC  0E00               	movlw	high send_md_cfg_cmds_ok@baud
  2222  0011AE  6E18               	movwf	md_uart_write_str_ok@data+1,c
  2223  0011B0  0E10               	movlw	16
  2224  0011B2  6E19               	movwf	md_uart_write_str_ok@len1,c
  2225  0011B4  0E01               	movlw	1
  2226  0011B6  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  2227  0011B8  0E00               	movlw	0
  2228  0011BA  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  2229  0011BC  EC49  F00A         	call	_md_uart_write_str_ok	;wreg free
  2230  0011C0  0100               	movlb	0	; () banked
  2231  0011C2  17E4               	andwf	send_md_cfg_cmds_ok@gotOk& (0+255),f,b
  2232                           
  2233                           ; BSR set to: 0
  2234                           ;modem.c: 97: gotOk &= md_uart_write_str_ok((uint8_t *)&ledCfg[0], sizeof(ledCfg), 1, 0)
      +                          ;
  2235  0011C4  0E70               	movlw	low send_md_cfg_cmds_ok@ledCfg
  2236  0011C6  6E17               	movwf	md_uart_write_str_ok@data,c
  2237  0011C8  0E00               	movlw	high send_md_cfg_cmds_ok@ledCfg
  2238  0011CA  6E18               	movwf	md_uart_write_str_ok@data+1,c
  2239  0011CC  0E10               	movlw	16
  2240  0011CE  6E19               	movwf	md_uart_write_str_ok@len1,c
  2241  0011D0  0E01               	movlw	1
  2242  0011D2  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  2243  0011D4  0E00               	movlw	0
  2244  0011D6  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  2245  0011D8  EC49  F00A         	call	_md_uart_write_str_ok	;wreg free
  2246  0011DC  0100               	movlb	0	; () banked
  2247  0011DE  17E4               	andwf	send_md_cfg_cmds_ok@gotOk& (0+255),f,b
  2248                           
  2249                           ; BSR set to: 0
  2250                           ;modem.c: 98: gotOk &= md_uart_write_str_ok((uint8_t *)&ledpattern[0], sizeof(ledpattern
      +                          ), 1, 0);
  2251  0011E0  0E8C               	movlw	low send_md_cfg_cmds_ok@ledpattern
  2252  0011E2  6E17               	movwf	md_uart_write_str_ok@data,c
  2253  0011E4  0E00               	movlw	high send_md_cfg_cmds_ok@ledpattern
  2254  0011E6  6E18               	movwf	md_uart_write_str_ok@data+1,c
  2255  0011E8  0E0C               	movlw	12
  2256  0011EA  6E19               	movwf	md_uart_write_str_ok@len1,c
  2257  0011EC  0E01               	movlw	1
  2258  0011EE  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  2259  0011F0  0E00               	movlw	0
  2260  0011F2  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  2261  0011F4  EC49  F00A         	call	_md_uart_write_str_ok	;wreg free
  2262  0011F8  0100               	movlb	0	; () banked
  2263  0011FA  17E4               	andwf	send_md_cfg_cmds_ok@gotOk& (0+255),f,b
  2264                           
  2265                           ; BSR set to: 0
  2266                           ;modem.c: 99: gotOk &= md_uart_write_str_ok((uint8_t *)&queryVersion[0], sizeof(queryVer
      +                          sion), 1, 0);
  2267  0011FC  0EC5               	movlw	low send_md_cfg_cmds_ok@queryVersion
  2268  0011FE  6E17               	movwf	md_uart_write_str_ok@data,c
  2269  001200  0E00               	movlw	high send_md_cfg_cmds_ok@queryVersion
  2270  001202  6E18               	movwf	md_uart_write_str_ok@data+1,c
  2271  001204  0E0A               	movlw	10
  2272  001206  6E19               	movwf	md_uart_write_str_ok@len1,c
  2273  001208  0E01               	movlw	1
  2274  00120A  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  2275  00120C  0E00               	movlw	0
  2276  00120E  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  2277  001210  EC49  F00A         	call	_md_uart_write_str_ok	;wreg free
  2278  001214  0100               	movlb	0	; () banked
  2279  001216  17E4               	andwf	send_md_cfg_cmds_ok@gotOk& (0+255),f,b
  2280                           
  2281                           ; BSR set to: 0
  2282                           ;modem.c: 100: gotOk &= md_uart_write_str_ok((uint8_t *)&cpin[0], sizeof(cpin), 1, 0);
  2283  001218  0EA4               	movlw	low send_md_cfg_cmds_ok@cpin
  2284  00121A  6E17               	movwf	md_uart_write_str_ok@data,c
  2285  00121C  0E00               	movlw	high send_md_cfg_cmds_ok@cpin
  2286  00121E  6E18               	movwf	md_uart_write_str_ok@data+1,c
  2287  001220  0E0B               	movlw	11
  2288  001222  6E19               	movwf	md_uart_write_str_ok@len1,c
  2289  001224  0E01               	movlw	1
  2290  001226  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  2291  001228  0E00               	movlw	0
  2292  00122A  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  2293  00122C  EC49  F00A         	call	_md_uart_write_str_ok	;wreg free
  2294  001230  0100               	movlb	0	; () banked
  2295  001232  17E4               	andwf	send_md_cfg_cmds_ok@gotOk& (0+255),f,b
  2296                           
  2297                           ; BSR set to: 0
  2298                           ;modem.c: 101: gotOk &= md_uart_write_str_ok((uint8_t *)&creg[0], sizeof(creg), 1, 0);
  2299  001234  0EAF               	movlw	low send_md_cfg_cmds_ok@creg
  2300  001236  6E17               	movwf	md_uart_write_str_ok@data,c
  2301  001238  0E00               	movlw	high send_md_cfg_cmds_ok@creg
  2302  00123A  6E18               	movwf	md_uart_write_str_ok@data+1,c
  2303  00123C  0E0B               	movlw	11
  2304  00123E  6E19               	movwf	md_uart_write_str_ok@len1,c
  2305  001240  0E01               	movlw	1
  2306  001242  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  2307  001244  0E00               	movlw	0
  2308  001246  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  2309  001248  EC49  F00A         	call	_md_uart_write_str_ok	;wreg free
  2310  00124C  0100               	movlb	0	; () banked
  2311  00124E  17E4               	andwf	send_md_cfg_cmds_ok@gotOk& (0+255),f,b
  2312                           
  2313                           ; BSR set to: 0
  2314                           ;modem.c: 102: gotOk &= md_uart_write_str_ok((uint8_t *)&cereg[0], sizeof(cereg), 1, 0);
  2315  001250  0E98               	movlw	low send_md_cfg_cmds_ok@cereg
  2316  001252  6E17               	movwf	md_uart_write_str_ok@data,c
  2317  001254  0E00               	movlw	high send_md_cfg_cmds_ok@cereg
  2318  001256  6E18               	movwf	md_uart_write_str_ok@data+1,c
  2319  001258  0E0C               	movlw	12
  2320  00125A  6E19               	movwf	md_uart_write_str_ok@len1,c
  2321  00125C  0E01               	movlw	1
  2322  00125E  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  2323  001260  0E00               	movlw	0
  2324  001262  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  2325  001264  EC49  F00A         	call	_md_uart_write_str_ok	;wreg free
  2326  001268  0100               	movlb	0	; () banked
  2327  00126A  17E4               	andwf	send_md_cfg_cmds_ok@gotOk& (0+255),f,b
  2328                           
  2329                           ; BSR set to: 0
  2330                           ;modem.c: 103: gotOk &= md_uart_write_str_ok((uint8_t *)&gprs[0], sizeof(gprs), 1, 0);
  2331  00126C  0EBA               	movlw	low send_md_cfg_cmds_ok@gprs
  2332  00126E  6E17               	movwf	md_uart_write_str_ok@data,c
  2333  001270  0E00               	movlw	high send_md_cfg_cmds_ok@gprs
  2334  001272  6E18               	movwf	md_uart_write_str_ok@data+1,c
  2335  001274  0E0B               	movlw	11
  2336  001276  6E19               	movwf	md_uart_write_str_ok@len1,c
  2337  001278  0E01               	movlw	1
  2338  00127A  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  2339  00127C  0E00               	movlw	0
  2340  00127E  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  2341  001280  EC49  F00A         	call	_md_uart_write_str_ok	;wreg free
  2342  001284  0100               	movlb	0	; () banked
  2343  001286  17E4               	andwf	send_md_cfg_cmds_ok@gotOk& (0+255),f,b
  2344                           
  2345                           ; BSR set to: 0
  2346                           ;modem.c: 104: gotOk &= md_uart_write_str_ok((uint8_t *)&csq[0], sizeof(csq), 1, 0);
  2347  001288  0ECF               	movlw	low send_md_cfg_cmds_ok@csq
  2348  00128A  6E17               	movwf	md_uart_write_str_ok@data,c
  2349  00128C  0E00               	movlw	high send_md_cfg_cmds_ok@csq
  2350  00128E  6E18               	movwf	md_uart_write_str_ok@data+1,c
  2351  001290  0E09               	movlw	9
  2352  001292  6E19               	movwf	md_uart_write_str_ok@len1,c
  2353  001294  0E01               	movlw	1
  2354  001296  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  2355  001298  0E00               	movlw	0
  2356  00129A  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  2357  00129C  EC49  F00A         	call	_md_uart_write_str_ok	;wreg free
  2358  0012A0  0100               	movlb	0	; () banked
  2359  0012A2  17E4               	andwf	send_md_cfg_cmds_ok@gotOk& (0+255),f,b
  2360                           
  2361                           ; BSR set to: 0
  2362                           ;modem.c: 105: terminate_md_uart();
  2363  0012A4  ECD8  F00C         	call	_terminate_md_uart	;wreg free
  2364                           
  2365                           ;modem.c: 108: md_state = SET_UP_DATA;
  2366  0012A8  0E03               	movlw	3
  2367  0012AA  0100               	movlb	0	; () banked
  2368  0012AC  6FFC               	movwf	_md_state& (0+255),b
  2369                           
  2370                           ; BSR set to: 0
  2371                           ;modem.c: 111: return 1;
  2372  0012AE  0E01               	movlw	1
  2373  0012B0  0012               	return	
  2374  0012B2                     __end_of_send_md_cfg_cmds_ok:
  2375                           	opt stack 0
  2376                           tblptru	equ	0xFF8
  2377                           tblptrh	equ	0xFF7
  2378                           tblptrl	equ	0xFF6
  2379                           tablat	equ	0xFF5
  2380                           intcon	equ	0xFF2
  2381                           postinc0	equ	0xFEE
  2382                           wreg	equ	0xFE8
  2383                           postdec1	equ	0xFE5
  2384                           plusw1	equ	0xFE3
  2385                           fsr1l	equ	0xFE1
  2386                           postinc2	equ	0xFDE
  2387                           plusw2	equ	0xFDB
  2388                           status	equ	0xFD8
  2389                           
  2390 ;; *************** function _close_socket_ok *****************
  2391 ;; Defined at:
  2392 ;;		line 160 in file "modem.c"
  2393 ;; Parameters:    Size  Location     Type
  2394 ;;		None
  2395 ;; Auto vars:     Size  Location     Type
  2396 ;;  deactivatePD   15    0[BANK0 ] const unsigned char [15]
  2397 ;;  closeSocket    10   15[BANK0 ] const unsigned char [10]
  2398 ;; Return value:  Size  Location     Type
  2399 ;;                  1    wreg      unsigned char 
  2400 ;; Registers used:
  2401 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2402 ;; Tracked objects:
  2403 ;;		On entry : 0/0
  2404 ;;		On exit  : 0/0
  2405 ;;		Unchanged: 0/0
  2406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2408 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2410 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2411 ;;Total ram usage:       25 bytes
  2412 ;; Hardware stack levels used:    1
  2413 ;; Hardware stack levels required when called:    5
  2414 ;; This function calls:
  2415 ;;		_init_md_uart
  2416 ;;		_md_uart_write_str_ok
  2417 ;;		_terminate_md_uart
  2418 ;; This function is called by:
  2419 ;;		_check_modem_state
  2420 ;; This function uses a non-reentrant model
  2421 ;;
  2422                           
  2423                           	psect	text8
  2424  0017CE                     __ptext8:
  2425                           	opt stack 0
  2426  0017CE                     _close_socket_ok:
  2427                           	opt stack 24
  2428                           
  2429                           ;modem.c: 162: const uint8_t closeSocket[] = "AT#SH=1\r\n";
  2430                           
  2431                           ; BSR set to: 0
  2432                           ;incstack = 0
  2433  0017CE  0E59               	movlw	low close_socket_ok@F6874
  2434  0017D0  6EF6               	movwf	tblptrl,c
  2435  0017D2                     	if	1	;There is more than 1 active tblptr byte
  2436  0017D2  0E10               	movlw	high close_socket_ok@F6874
  2437  0017D4  6EF7               	movwf	tblptrh,c
  2438  0017D6                     	endif
  2439  0017D6                     	if	0	;There are less than 3 active tblptr bytes
  2440  0017D6                     	endif
  2441  0017D6  EE20  F06F         	lfsr	2,close_socket_ok@closeSocket
  2442  0017DA  0E09               	movlw	9
  2443  0017DC                     u1500:
  2444  0017DC  0009               	tblrd		*+
  2445  0017DE  CFF5 FFDE          	movff	tablat,postinc2
  2446  0017E2  06E8               	decf	wreg,f,c
  2447  0017E4  E2FB               	bc	u1500
  2448                           
  2449                           ;modem.c: 163: const uint8_t deactivatePDP[] = "AT#SGACT=3,0\r\n";
  2450  0017E6  0E3D               	movlw	low close_socket_ok@F6876
  2451  0017E8  6EF6               	movwf	tblptrl,c
  2452  0017EA                     	if	1	;There is more than 1 active tblptr byte
  2453  0017EA  0E10               	movlw	high close_socket_ok@F6876
  2454  0017EC  6EF7               	movwf	tblptrh,c
  2455  0017EE                     	endif
  2456  0017EE                     	if	0	;There are less than 3 active tblptr bytes
  2457  0017EE                     	endif
  2458  0017EE  EE20  F060         	lfsr	2,close_socket_ok@deactivatePDP
  2459  0017F2  0E0E               	movlw	14
  2460  0017F4                     u1510:
  2461  0017F4  0009               	tblrd		*+
  2462  0017F6  CFF5 FFDE          	movff	tablat,postinc2
  2463  0017FA  06E8               	decf	wreg,f,c
  2464  0017FC  E2FB               	bc	u1510
  2465                           
  2466                           ;modem.c: 165: init_md_uart();
  2467  0017FE  EC7F  F00C         	call	_init_md_uart	;wreg free
  2468                           
  2469                           ;modem.c: 167: md_uart_write_str_ok((uint8_t *)&closeSocket[0], sizeof(closeSocket), 1, 
      +                          0);
  2470  001802  0E6F               	movlw	low close_socket_ok@closeSocket
  2471  001804  6E17               	movwf	md_uart_write_str_ok@data,c
  2472  001806  0E00               	movlw	high close_socket_ok@closeSocket
  2473  001808  6E18               	movwf	md_uart_write_str_ok@data+1,c
  2474  00180A  0E0A               	movlw	10
  2475  00180C  6E19               	movwf	md_uart_write_str_ok@len1,c
  2476  00180E  0E01               	movlw	1
  2477  001810  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  2478  001812  0E00               	movlw	0
  2479  001814  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  2480  001816  EC49  F00A         	call	_md_uart_write_str_ok	;wreg free
  2481                           
  2482                           ;modem.c: 168: md_uart_write_str_ok((uint8_t *)&deactivatePDP[0], sizeof(deactivatePDP),
      +                           1, 0);
  2483  00181A  0E60               	movlw	low close_socket_ok@deactivatePDP
  2484  00181C  6E17               	movwf	md_uart_write_str_ok@data,c
  2485  00181E  0E00               	movlw	high close_socket_ok@deactivatePDP
  2486  001820  6E18               	movwf	md_uart_write_str_ok@data+1,c
  2487  001822  0E0F               	movlw	15
  2488  001824  6E19               	movwf	md_uart_write_str_ok@len1,c
  2489  001826  0E01               	movlw	1
  2490  001828  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  2491  00182A  0E00               	movlw	0
  2492  00182C  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  2493  00182E  EC49  F00A         	call	_md_uart_write_str_ok	;wreg free
  2494                           
  2495                           ;modem.c: 169: terminate_md_uart();
  2496  001832  ECD8  F00C         	call	_terminate_md_uart	;wreg free
  2497                           
  2498                           ;modem.c: 170: return 1;
  2499  001836  0E01               	movlw	1
  2500  001838  0012               	return	
  2501  00183A                     __end_of_close_socket_ok:
  2502                           	opt stack 0
  2503                           tblptru	equ	0xFF8
  2504                           tblptrh	equ	0xFF7
  2505                           tblptrl	equ	0xFF6
  2506                           tablat	equ	0xFF5
  2507                           intcon	equ	0xFF2
  2508                           postinc0	equ	0xFEE
  2509                           wreg	equ	0xFE8
  2510                           postdec1	equ	0xFE5
  2511                           plusw1	equ	0xFE3
  2512                           fsr1l	equ	0xFE1
  2513                           postinc2	equ	0xFDE
  2514                           plusw2	equ	0xFDB
  2515                           status	equ	0xFD8
  2516                           
  2517 ;; *************** function _terminate_md_uart *****************
  2518 ;; Defined at:
  2519 ;;		line 57 in file "uart.c"
  2520 ;; Parameters:    Size  Location     Type
  2521 ;;		None
  2522 ;; Auto vars:     Size  Location     Type
  2523 ;;		None
  2524 ;; Return value:  Size  Location     Type
  2525 ;;                  1    wreg      void 
  2526 ;; Registers used:
  2527 ;;		None
  2528 ;; Tracked objects:
  2529 ;;		On entry : 0/0
  2530 ;;		On exit  : 0/0
  2531 ;;		Unchanged: 0/0
  2532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2534 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2536 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2537 ;;Total ram usage:        0 bytes
  2538 ;; Hardware stack levels used:    1
  2539 ;; Hardware stack levels required when called:    3
  2540 ;; This function calls:
  2541 ;;		Nothing
  2542 ;; This function is called by:
  2543 ;;		_send_md_cfg_cmds_ok
  2544 ;;		_setup_data_ok
  2545 ;;		_send_over_socket_ok
  2546 ;;		_close_socket_ok
  2547 ;; This function uses a non-reentrant model
  2548 ;;
  2549                           
  2550                           	psect	text9
  2551  0019B0                     __ptext9:
  2552                           	opt stack 0
  2553  0019B0                     _terminate_md_uart:
  2554                           	opt stack 25
  2555                           
  2556                           ;uart.c: 59: RCSTA1bits.SPEN = 0;
  2557                           
  2558                           ;incstack = 0
  2559  0019B0  9EAB               	bcf	4011,7,c	;volatile
  2560                           
  2561                           ;uart.c: 62: TRISCbits.TRISC6 = 0;
  2562  0019B2  9C94               	bcf	3988,6,c	;volatile
  2563                           
  2564                           ;uart.c: 63: PORTCbits.RC6 = 0;
  2565  0019B4  9C82               	bcf	3970,6,c	;volatile
  2566                           
  2567                           ;uart.c: 64: RC1IE = 0;
  2568  0019B6  9A9D               	bcf	3997,5,c	;volatile
  2569  0019B8  0012               	return		;funcret
  2570  0019BA                     __end_of_terminate_md_uart:
  2571                           	opt stack 0
  2572                           tblptru	equ	0xFF8
  2573                           tblptrh	equ	0xFF7
  2574                           tblptrl	equ	0xFF6
  2575                           tablat	equ	0xFF5
  2576                           intcon	equ	0xFF2
  2577                           postinc0	equ	0xFEE
  2578                           wreg	equ	0xFE8
  2579                           postdec1	equ	0xFE5
  2580                           plusw1	equ	0xFE3
  2581                           fsr1l	equ	0xFE1
  2582                           postinc2	equ	0xFDE
  2583                           plusw2	equ	0xFDB
  2584                           status	equ	0xFD8
  2585                           
  2586 ;; *************** function _md_uart_write_str_ok *****************
  2587 ;; Defined at:
  2588 ;;		line 69 in file "uart.c"
  2589 ;; Parameters:    Size  Location     Type
  2590 ;;  data            2   22[COMRAM] PTR unsigned char 
  2591 ;;		 -> close_socket_ok@deactivatePDP(15), close_socket_ok@closeSocket(10), send_over_socket_ok@terminateData(1), send_o
      +ver_socket_ok@msg(8), 
  2592 ;;		 -> send_over_socket_ok@srecv(16), send_over_socket_ok@ssend(13), send_over_socket_ok@openConnection(44), setup_data
      +_ok@activatePDP(15), 
  2593 ;;		 -> setup_data_ok@cfgSocket(25), setup_data_ok@setApn(47), send_md_cfg_cmds_ok@csq(9), send_md_cfg_cmds_ok@gprs(11),
      + 
  2594 ;;		 -> send_md_cfg_cmds_ok@cereg(12), send_md_cfg_cmds_ok@creg(11), send_md_cfg_cmds_ok@cpin(11), send_md_cfg_cmds_ok@q
      +ueryVersion(10), 
  2595 ;;		 -> send_md_cfg_cmds_ok@ledpattern(12), send_md_cfg_cmds_ok@ledCfg(16), send_md_cfg_cmds_ok@baud(16), send_md_cfg_cm
      +ds_ok@cmee(12), 
  2596 ;;		 -> send_md_cfg_cmds_ok@ate(7), send_md_cfg_cmds_ok@at(5), 
  2597 ;;  len1            1   24[COMRAM] unsigned char 
  2598 ;;  wantOk          1   25[COMRAM] unsigned char 
  2599 ;;  waitToSendMo    1   26[COMRAM] unsigned char 
  2600 ;; Auto vars:     Size  Location     Type
  2601 ;;  index           1   30[COMRAM] unsigned char 
  2602 ;;  currentChar     1   29[COMRAM] unsigned char 
  2603 ;;  numRetries      1   28[COMRAM] unsigned char 
  2604 ;;  pos             1   27[COMRAM] unsigned char 
  2605 ;; Return value:  Size  Location     Type
  2606 ;;                  1    wreg      unsigned char 
  2607 ;; Registers used:
  2608 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2609 ;; Tracked objects:
  2610 ;;		On entry : 0/0
  2611 ;;		On exit  : 0/0
  2612 ;;		Unchanged: 0/0
  2613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2614 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2615 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2617 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2618 ;;Total ram usage:        9 bytes
  2619 ;; Hardware stack levels used:    1
  2620 ;; Hardware stack levels required when called:    4
  2621 ;; This function calls:
  2622 ;;		_disable_tmr5
  2623 ;;		_enable_md_rxint
  2624 ;;		_md_uart_send
  2625 ;;		_reload_tmr5_pt25s
  2626 ;; This function is called by:
  2627 ;;		_send_md_cfg_cmds_ok
  2628 ;;		_setup_data_ok
  2629 ;;		_send_over_socket_ok
  2630 ;;		_close_socket_ok
  2631 ;; This function uses a non-reentrant model
  2632 ;;
  2633                           
  2634                           	psect	text10
  2635  001492                     __ptext10:
  2636                           	opt stack 0
  2637  001492                     _md_uart_write_str_ok:
  2638                           	opt stack 24
  2639                           
  2640                           ;uart.c: 72: uint8_t index = 0, pos = 0, currentChar, numRetries = 15;
  2641                           
  2642                           ;incstack = 0
  2643  001492  0E00               	movlw	0
  2644  001494  6E1F               	movwf	md_uart_write_str_ok@index,c
  2645  001496  0E00               	movlw	0
  2646  001498  6E1C               	movwf	md_uart_write_str_ok@pos,c
  2647  00149A  0E0F               	movlw	15
  2648  00149C  6E1D               	movwf	md_uart_write_str_ok@numRetries,c
  2649                           
  2650                           ;uart.c: 73: CREN1 = 0;
  2651  00149E  98AB               	bcf	4011,4,c	;volatile
  2652                           
  2653                           ;uart.c: 74: tmr5_cnt = 0;
  2654  0014A0  0E00               	movlw	0
  2655  0014A2  6E3F               	movwf	_tmr5_cnt,c
  2656                           
  2657                           ;uart.c: 75: receivedOK = 0;
  2658  0014A4  0E00               	movlw	0
  2659  0014A6  6E3D               	movwf	_receivedOK,c
  2660                           
  2661                           ;uart.c: 76: receivedERR = 0;
  2662  0014A8  0E00               	movlw	0
  2663  0014AA  6E3C               	movwf	_receivedERR,c
  2664                           
  2665                           ;uart.c: 77: timedOut = 0;
  2666  0014AC  0E00               	movlw	0
  2667  0014AE  6E3A               	movwf	_timedOut,c
  2668                           
  2669                           ;uart.c: 78: while (numRetries-- > 0 && !receivedOK)
  2670  0014B0  D044               	goto	l260
  2671  0014B2                     
  2672                           ;uart.c: 79: {
  2673                           ;uart.c: 80: timedOut = 0;
  2674  0014B2  0E00               	movlw	0
  2675  0014B4  6E3A               	movwf	_timedOut,c
  2676                           
  2677                           ;uart.c: 81: for (index = 0; index < len1; index++)
  2678  0014B6  0E00               	movlw	0
  2679  0014B8  6E1F               	movwf	md_uart_write_str_ok@index,c
  2680  0014BA  D01A               	goto	l248
  2681  0014BC                     
  2682                           ;uart.c: 82: {
  2683                           ;uart.c: 83: referenceBuf[index] = *data;
  2684  0014BC  C017  FFD9         	movff	md_uart_write_str_ok@data,fsr2l
  2685  0014C0  C018  FFDA         	movff	md_uart_write_str_ok@data+1,fsr2h
  2686  0014C4  501F               	movf	md_uart_write_str_ok@index,w,c
  2687  0014C6  0D01               	mullw	1
  2688  0014C8  0EB1               	movlw	low _referenceBuf
  2689  0014CA  24F3               	addwf	prodl,w,c
  2690  0014CC  6EE1               	movwf	fsr1l,c
  2691  0014CE  0E01               	movlw	high _referenceBuf
  2692  0014D0  20F4               	addwfc	prodh,w,c
  2693  0014D2  6EE2               	movwf	fsr1h,c
  2694  0014D4  CFDF FFE7          	movff	indf2,indf1
  2695                           
  2696                           ;uart.c: 84: currentChar = *data;
  2697  0014D8  C017  FFD9         	movff	md_uart_write_str_ok@data,fsr2l
  2698  0014DC  C018  FFDA         	movff	md_uart_write_str_ok@data+1,fsr2h
  2699  0014E0  50DF               	movf	indf2,w,c
  2700  0014E2  6E1E               	movwf	md_uart_write_str_ok@currentChar,c
  2701                           
  2702                           ;uart.c: 85: md_uart_send(currentChar);
  2703  0014E4  501E               	movf	md_uart_write_str_ok@currentChar,w,c
  2704  0014E6  ECC0  F00C         	call	_md_uart_send
  2705                           
  2706                           ;uart.c: 86: data++;
  2707  0014EA  4A17               	infsnz	md_uart_write_str_ok@data,f,c
  2708  0014EC  2A18               	incf	md_uart_write_str_ok@data+1,f,c
  2709  0014EE  2A1F               	incf	md_uart_write_str_ok@index,f,c
  2710  0014F0                     l248:
  2711  0014F0  5019               	movf	md_uart_write_str_ok@len1,w,c
  2712  0014F2  5C1F               	subwf	md_uart_write_str_ok@index,w,c
  2713  0014F4  A0D8               	btfss	status,0,c
  2714  0014F6  D7E2               	goto	l249
  2715                           
  2716                           ;uart.c: 87: }
  2717                           ;uart.c: 90: if (waitToSendMoreData)
  2718  0014F8  501B               	movf	md_uart_write_str_ok@waitToSendMoreData,w,c
  2719  0014FA  B4D8               	btfsc	status,2,c
  2720  0014FC  D00D               	goto	l257
  2721                           
  2722                           ;uart.c: 91: {
  2723                           ;uart.c: 92: CREN1 = 1;
  2724  0014FE  88AB               	bsf	4011,4,c	;volatile
  2725  001500  AA9E               	btfss	3998,5,c	;volatile
  2726  001502  D7FE               	goto	l253
  2727                           
  2728                           ;uart.c: 94: currentChar = RC1REG;
  2729  001504  CFAE F01E          	movff	4014,md_uart_write_str_ok@currentChar	;volatile
  2730                           
  2731                           ;uart.c: 95: if (currentChar == '<')
  2732  001508  0E3C               	movlw	60
  2733  00150A  181E               	xorwf	md_uart_write_str_ok@currentChar,w,c
  2734  00150C  A4D8               	btfss	status,2,c
  2735  00150E  D002               	goto	l255
  2736                           
  2737                           ;uart.c: 96: {
  2738                           ;uart.c: 97: return 1;
  2739  001510  0E01               	movlw	1
  2740  001512  0012               	return	
  2741  001514                     l255:
  2742                           
  2743                           ;uart.c: 99: else
  2744                           ;uart.c: 100: return 0;
  2745  001514  0E00               	movlw	0
  2746  001516  0012               	return	
  2747  001518                     l257:
  2748                           
  2749                           ;uart.c: 101: }
  2750                           ;uart.c: 102: if (wantOk)
  2751  001518  501A               	movf	md_uart_write_str_ok@wantOk,w,c
  2752  00151A  B4D8               	btfsc	status,2,c
  2753  00151C  D009               	goto	l258
  2754                           
  2755                           ;uart.c: 103: {
  2756                           ;uart.c: 104: CREN1 = 1;
  2757  00151E  88AB               	bsf	4011,4,c	;volatile
  2758                           
  2759                           ;uart.c: 105: enable_md_rxint();
  2760  001520  ECC6  F00C         	call	_enable_md_rxint	;wreg free
  2761                           
  2762                           ;uart.c: 106: reload_tmr5_pt25s();
  2763  001524  EC91  F00C         	call	_reload_tmr5_pt25s	;wreg free
  2764                           
  2765                           ;uart.c: 136: disable_tmr5();
  2766  001528  ECCC  F00C         	call	_disable_tmr5	;wreg free
  2767                           
  2768                           ;uart.c: 137: CREN1 = 0;
  2769  00152C  98AB               	bcf	4011,4,c	;volatile
  2770                           
  2771                           ;uart.c: 144: }
  2772  00152E  D005               	goto	l260
  2773  001530                     l258:
  2774                           
  2775                           ;uart.c: 145: else if (!wantOk)
  2776  001530  501A               	movf	md_uart_write_str_ok@wantOk,w,c
  2777  001532  A4D8               	btfss	status,2,c
  2778  001534  D002               	goto	l260
  2779                           
  2780                           ;uart.c: 146: receivedOK = 1;
  2781  001536  0E01               	movlw	1
  2782  001538  6E3D               	movwf	_receivedOK,c
  2783  00153A                     l260:
  2784  00153A  061D               	decf	md_uart_write_str_ok@numRetries,f,c
  2785  00153C  281D               	incf	md_uart_write_str_ok@numRetries,w,c
  2786  00153E  B4D8               	btfsc	status,2,c
  2787  001540  D003               	goto	u1270
  2788  001542  503D               	movf	_receivedOK,w,c
  2789  001544  B4D8               	btfsc	status,2,c
  2790  001546  D7B5               	goto	l247
  2791  001548                     u1270:
  2792                           
  2793                           ;uart.c: 148: }
  2794                           ;uart.c: 151: if (!wantOk && !waitToSendMoreData)
  2795  001548  501A               	movf	md_uart_write_str_ok@wantOk,w,c
  2796  00154A  A4D8               	btfss	status,2,c
  2797  00154C  D00D               	goto	l264
  2798  00154E  501B               	movf	md_uart_write_str_ok@waitToSendMoreData,w,c
  2799  001550  A4D8               	btfss	status,2,c
  2800  001552  D00A               	goto	l264
  2801                           
  2802                           ;uart.c: 152: {
  2803                           ;uart.c: 153: receivedOK = 0;
  2804  001554  0E00               	movlw	0
  2805  001556  6E3D               	movwf	_receivedOK,c
  2806                           
  2807                           ;uart.c: 154: GIE = 0;
  2808  001558  9EF2               	bcf	intcon,7,c	;volatile
  2809                           
  2810                           ;uart.c: 155: CREN1 = 1;
  2811  00155A  88AB               	bsf	4011,4,c	;volatile
  2812                           
  2813                           ;uart.c: 156: RC1IE = 1;
  2814  00155C  8A9D               	bsf	3997,5,c	;volatile
  2815                           
  2816                           ;uart.c: 157: PEIE = 1;
  2817  00155E  8CF2               	bsf	intcon,6,c	;volatile
  2818                           
  2819                           ;uart.c: 158: RC1IF = 0;
  2820  001560  9A9E               	bcf	3998,5,c	;volatile
  2821                           
  2822                           ;uart.c: 159: GIE = 1;
  2823  001562  8EF2               	bsf	intcon,7,c	;volatile
  2824                           
  2825                           ;uart.c: 160: return 1;
  2826  001564  0E01               	movlw	1
  2827  001566  0012               	return	
  2828  001568                     l264:
  2829                           
  2830                           ;uart.c: 161: }
  2831                           ;uart.c: 162: return receivedOK;
  2832  001568  503D               	movf	_receivedOK,w,c
  2833  00156A  0012               	return	
  2834  00156C                     __end_of_md_uart_write_str_ok:
  2835                           	opt stack 0
  2836                           tblptru	equ	0xFF8
  2837                           tblptrh	equ	0xFF7
  2838                           tblptrl	equ	0xFF6
  2839                           tablat	equ	0xFF5
  2840                           prodh	equ	0xFF4
  2841                           prodl	equ	0xFF3
  2842                           intcon	equ	0xFF2
  2843                           postinc0	equ	0xFEE
  2844                           wreg	equ	0xFE8
  2845                           indf1	equ	0xFE7
  2846                           postdec1	equ	0xFE5
  2847                           plusw1	equ	0xFE3
  2848                           fsr1h	equ	0xFE2
  2849                           fsr1l	equ	0xFE1
  2850                           indf2	equ	0xFDF
  2851                           postinc2	equ	0xFDE
  2852                           plusw2	equ	0xFDB
  2853                           fsr2h	equ	0xFDA
  2854                           fsr2l	equ	0xFD9
  2855                           status	equ	0xFD8
  2856                           
  2857 ;; *************** function _reload_tmr5_pt25s *****************
  2858 ;; Defined at:
  2859 ;;		line 170 in file "main.c"
  2860 ;; Parameters:    Size  Location     Type
  2861 ;;		None
  2862 ;; Auto vars:     Size  Location     Type
  2863 ;;		None
  2864 ;; Return value:  Size  Location     Type
  2865 ;;                  1    wreg      void 
  2866 ;; Registers used:
  2867 ;;		wreg, status,2
  2868 ;; Tracked objects:
  2869 ;;		On entry : 0/0
  2870 ;;		On exit  : 0/0
  2871 ;;		Unchanged: 0/0
  2872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2876 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2877 ;;Total ram usage:        0 bytes
  2878 ;; Hardware stack levels used:    1
  2879 ;; Hardware stack levels required when called:    3
  2880 ;; This function calls:
  2881 ;;		Nothing
  2882 ;; This function is called by:
  2883 ;;		_md_uart_write_str_ok
  2884 ;;		_start_md_boot_timer
  2885 ;; This function uses a non-reentrant model
  2886 ;;
  2887                           
  2888                           	psect	text11
  2889  001922                     __ptext11:
  2890                           	opt stack 0
  2891  001922                     _reload_tmr5_pt25s:
  2892                           	opt stack 25
  2893                           
  2894                           ;main.c: 172: INTCONbits.GIE = 0;
  2895                           
  2896                           ;incstack = 0
  2897  001922  9EF2               	bcf	intcon,7,c	;volatile
  2898                           
  2899                           ;main.c: 173: T5CON = 0b00110101;
  2900  001924  0E35               	movlw	53
  2901  001926  010F               	movlb	15	; () banked
  2902  001928  6F4E               	movwf	78,b	;volatile
  2903                           
  2904                           ; BSR set to: 15
  2905                           ;main.c: 175: PIE5bits.TMR5IE = 1;
  2906  00192A  827D               	bsf	3965,1,c	;volatile
  2907                           
  2908                           ; BSR set to: 15
  2909                           ;main.c: 176: INTCONbits.PEIE = 1;
  2910  00192C  8CF2               	bsf	intcon,6,c	;volatile
  2911                           
  2912                           ; BSR set to: 15
  2913                           ;main.c: 177: PIR5bits.TMR5IF = 0;
  2914  00192E  927E               	bcf	3966,1,c	;volatile
  2915                           
  2916                           ;main.c: 178: TMR5H = 0x0B;
  2917  001930  0E0B               	movlw	11
  2918  001932  6F50               	movwf	80,b	;volatile
  2919                           
  2920                           ;main.c: 179: TMR5L = 0x45;
  2921  001934  0E45               	movlw	69
  2922  001936  6F4F               	movwf	79,b	;volatile
  2923                           
  2924                           ; BSR set to: 15
  2925                           ;main.c: 180: INTCONbits.GIE = 1;
  2926  001938  8EF2               	bsf	intcon,7,c	;volatile
  2927                           
  2928                           ; BSR set to: 15
  2929  00193A  0012               	return		;funcret
  2930  00193C                     __end_of_reload_tmr5_pt25s:
  2931                           	opt stack 0
  2932                           tblptru	equ	0xFF8
  2933                           tblptrh	equ	0xFF7
  2934                           tblptrl	equ	0xFF6
  2935                           tablat	equ	0xFF5
  2936                           prodh	equ	0xFF4
  2937                           prodl	equ	0xFF3
  2938                           intcon	equ	0xFF2
  2939                           postinc0	equ	0xFEE
  2940                           wreg	equ	0xFE8
  2941                           indf1	equ	0xFE7
  2942                           postdec1	equ	0xFE5
  2943                           plusw1	equ	0xFE3
  2944                           fsr1h	equ	0xFE2
  2945                           fsr1l	equ	0xFE1
  2946                           indf2	equ	0xFDF
  2947                           postinc2	equ	0xFDE
  2948                           plusw2	equ	0xFDB
  2949                           fsr2h	equ	0xFDA
  2950                           fsr2l	equ	0xFD9
  2951                           status	equ	0xFD8
  2952                           
  2953 ;; *************** function _md_uart_send *****************
  2954 ;; Defined at:
  2955 ;;		line 165 in file "uart.c"
  2956 ;; Parameters:    Size  Location     Type
  2957 ;;  data            1    wreg     unsigned char 
  2958 ;; Auto vars:     Size  Location     Type
  2959 ;;  data            1   21[COMRAM] unsigned char 
  2960 ;; Return value:  Size  Location     Type
  2961 ;;                  1    wreg      void 
  2962 ;; Registers used:
  2963 ;;		wreg
  2964 ;; Tracked objects:
  2965 ;;		On entry : 0/0
  2966 ;;		On exit  : 0/0
  2967 ;;		Unchanged: 0/0
  2968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2970 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2972 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2973 ;;Total ram usage:        1 bytes
  2974 ;; Hardware stack levels used:    1
  2975 ;; Hardware stack levels required when called:    3
  2976 ;; This function calls:
  2977 ;;		Nothing
  2978 ;; This function is called by:
  2979 ;;		_main
  2980 ;;		_md_uart_write_str_ok
  2981 ;; This function uses a non-reentrant model
  2982 ;;
  2983                           
  2984                           	psect	text12
  2985  001980                     __ptext12:
  2986                           	opt stack 0
  2987  001980                     _md_uart_send:
  2988                           	opt stack 27
  2989                           
  2990                           ; BSR set to: 15
  2991                           ;incstack = 0
  2992                           ;md_uart_send@data stored from wreg
  2993  001980  6E16               	movwf	md_uart_send@data,c
  2994  001982                     
  2995                           ;uart.c: 167: while (!TRMT1);
  2996  001982  A2AC               	btfss	4012,1,c	;volatile
  2997  001984  D7FE               	goto	l2054
  2998                           
  2999                           ;uart.c: 168: TX1REG = data;
  3000  001986  C016  FFAD         	movff	md_uart_send@data,4013	;volatile
  3001  00198A  0012               	return		;funcret
  3002  00198C                     __end_of_md_uart_send:
  3003                           	opt stack 0
  3004                           tblptru	equ	0xFF8
  3005                           tblptrh	equ	0xFF7
  3006                           tblptrl	equ	0xFF6
  3007                           tablat	equ	0xFF5
  3008                           prodh	equ	0xFF4
  3009                           prodl	equ	0xFF3
  3010                           intcon	equ	0xFF2
  3011                           postinc0	equ	0xFEE
  3012                           wreg	equ	0xFE8
  3013                           indf1	equ	0xFE7
  3014                           postdec1	equ	0xFE5
  3015                           plusw1	equ	0xFE3
  3016                           fsr1h	equ	0xFE2
  3017                           fsr1l	equ	0xFE1
  3018                           indf2	equ	0xFDF
  3019                           postinc2	equ	0xFDE
  3020                           plusw2	equ	0xFDB
  3021                           fsr2h	equ	0xFDA
  3022                           fsr2l	equ	0xFD9
  3023                           status	equ	0xFD8
  3024                           
  3025 ;; *************** function _enable_md_rxint *****************
  3026 ;; Defined at:
  3027 ;;		line 39 in file "uart.c"
  3028 ;; Parameters:    Size  Location     Type
  3029 ;;		None
  3030 ;; Auto vars:     Size  Location     Type
  3031 ;;		None
  3032 ;; Return value:  Size  Location     Type
  3033 ;;                  1    wreg      void 
  3034 ;; Registers used:
  3035 ;;		None
  3036 ;; Tracked objects:
  3037 ;;		On entry : 0/0
  3038 ;;		On exit  : 0/0
  3039 ;;		Unchanged: 0/0
  3040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3044 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3045 ;;Total ram usage:        0 bytes
  3046 ;; Hardware stack levels used:    1
  3047 ;; Hardware stack levels required when called:    3
  3048 ;; This function calls:
  3049 ;;		Nothing
  3050 ;; This function is called by:
  3051 ;;		_main
  3052 ;;		_md_uart_write_str_ok
  3053 ;; This function uses a non-reentrant model
  3054 ;;
  3055                           
  3056                           	psect	text13
  3057  00198C                     __ptext13:
  3058                           	opt stack 0
  3059  00198C                     _enable_md_rxint:
  3060                           	opt stack 27
  3061                           
  3062                           ;uart.c: 41: GIE = 0;
  3063                           
  3064                           ;incstack = 0
  3065  00198C  9EF2               	bcf	intcon,7,c	;volatile
  3066                           
  3067                           ;uart.c: 42: PIE1bits.RC1IE = 1;
  3068  00198E  8A9D               	bsf	3997,5,c	;volatile
  3069                           
  3070                           ;uart.c: 43: PIR1bits.RC1IF = 0;
  3071  001990  9A9E               	bcf	3998,5,c	;volatile
  3072                           
  3073                           ;uart.c: 44: INTCONbits.PEIE = 1;
  3074  001992  8CF2               	bsf	intcon,6,c	;volatile
  3075                           
  3076                           ;uart.c: 45: GIE = 1;
  3077  001994  8EF2               	bsf	intcon,7,c	;volatile
  3078  001996  0012               	return		;funcret
  3079  001998                     __end_of_enable_md_rxint:
  3080                           	opt stack 0
  3081                           tblptru	equ	0xFF8
  3082                           tblptrh	equ	0xFF7
  3083                           tblptrl	equ	0xFF6
  3084                           tablat	equ	0xFF5
  3085                           prodh	equ	0xFF4
  3086                           prodl	equ	0xFF3
  3087                           intcon	equ	0xFF2
  3088                           postinc0	equ	0xFEE
  3089                           wreg	equ	0xFE8
  3090                           indf1	equ	0xFE7
  3091                           postdec1	equ	0xFE5
  3092                           plusw1	equ	0xFE3
  3093                           fsr1h	equ	0xFE2
  3094                           fsr1l	equ	0xFE1
  3095                           indf2	equ	0xFDF
  3096                           postinc2	equ	0xFDE
  3097                           plusw2	equ	0xFDB
  3098                           fsr2h	equ	0xFDA
  3099                           fsr2l	equ	0xFD9
  3100                           status	equ	0xFD8
  3101                           
  3102 ;; *************** function _disable_tmr5 *****************
  3103 ;; Defined at:
  3104 ;;		line 183 in file "main.c"
  3105 ;; Parameters:    Size  Location     Type
  3106 ;;		None
  3107 ;; Auto vars:     Size  Location     Type
  3108 ;;		None
  3109 ;; Return value:  Size  Location     Type
  3110 ;;                  1    wreg      void 
  3111 ;; Registers used:
  3112 ;;		wreg, status,2
  3113 ;; Tracked objects:
  3114 ;;		On entry : 0/0
  3115 ;;		On exit  : 0/0
  3116 ;;		Unchanged: 0/0
  3117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3121 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3122 ;;Total ram usage:        0 bytes
  3123 ;; Hardware stack levels used:    1
  3124 ;; Hardware stack levels required when called:    3
  3125 ;; This function calls:
  3126 ;;		Nothing
  3127 ;; This function is called by:
  3128 ;;		_md_uart_write_str_ok
  3129 ;; This function uses a non-reentrant model
  3130 ;;
  3131                           
  3132                           	psect	text14
  3133  001998                     __ptext14:
  3134                           	opt stack 0
  3135  001998                     _disable_tmr5:
  3136                           	opt stack 24
  3137                           
  3138                           ;main.c: 185: tmr5_cnt = 0;
  3139                           
  3140                           ;incstack = 0
  3141  001998  0E00               	movlw	0
  3142  00199A  6E3F               	movwf	_tmr5_cnt,c
  3143                           
  3144                           ;main.c: 186: T5CONbits.TMR5ON = 0;
  3145  00199C  010F               	movlb	15	; () banked
  3146  00199E  914E               	bcf	78,0,b	;volatile
  3147                           
  3148                           ; BSR set to: 15
  3149                           ;main.c: 187: PIE5bits.TMR5IE = 0;
  3150  0019A0  927D               	bcf	3965,1,c	;volatile
  3151                           
  3152                           ; BSR set to: 15
  3153  0019A2  0012               	return		;funcret
  3154  0019A4                     __end_of_disable_tmr5:
  3155                           	opt stack 0
  3156                           tblptru	equ	0xFF8
  3157                           tblptrh	equ	0xFF7
  3158                           tblptrl	equ	0xFF6
  3159                           tablat	equ	0xFF5
  3160                           prodh	equ	0xFF4
  3161                           prodl	equ	0xFF3
  3162                           intcon	equ	0xFF2
  3163                           postinc0	equ	0xFEE
  3164                           wreg	equ	0xFE8
  3165                           indf1	equ	0xFE7
  3166                           postdec1	equ	0xFE5
  3167                           plusw1	equ	0xFE3
  3168                           fsr1h	equ	0xFE2
  3169                           fsr1l	equ	0xFE1
  3170                           indf2	equ	0xFDF
  3171                           postinc2	equ	0xFDE
  3172                           plusw2	equ	0xFDB
  3173                           fsr2h	equ	0xFDA
  3174                           fsr2l	equ	0xFD9
  3175                           status	equ	0xFD8
  3176                           
  3177 ;; *************** function _init_md_uart *****************
  3178 ;; Defined at:
  3179 ;;		line 7 in file "uart.c"
  3180 ;; Parameters:    Size  Location     Type
  3181 ;;		None
  3182 ;; Auto vars:     Size  Location     Type
  3183 ;;		None
  3184 ;; Return value:  Size  Location     Type
  3185 ;;                  1    wreg      void 
  3186 ;; Registers used:
  3187 ;;		wreg, status,2
  3188 ;; Tracked objects:
  3189 ;;		On entry : 0/0
  3190 ;;		On exit  : 0/0
  3191 ;;		Unchanged: 0/0
  3192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3196 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3197 ;;Total ram usage:        0 bytes
  3198 ;; Hardware stack levels used:    1
  3199 ;; Hardware stack levels required when called:    3
  3200 ;; This function calls:
  3201 ;;		Nothing
  3202 ;; This function is called by:
  3203 ;;		_main
  3204 ;;		_send_md_cfg_cmds_ok
  3205 ;;		_setup_data_ok
  3206 ;;		_send_over_socket_ok
  3207 ;;		_close_socket_ok
  3208 ;; This function uses a non-reentrant model
  3209 ;;
  3210                           
  3211                           	psect	text15
  3212  0018FE                     __ptext15:
  3213                           	opt stack 0
  3214  0018FE                     _init_md_uart:
  3215                           	opt stack 27
  3216                           
  3217                           ;uart.c: 9: BAUDCON1bits.BRG16 = 1;
  3218                           
  3219                           ; BSR set to: 15
  3220                           ;incstack = 0
  3221  0018FE  86B8               	bsf	4024,3,c	;volatile
  3222                           
  3223                           ;uart.c: 10: BAUDCON1bits.RCIDL = 1;
  3224  001900  8CB8               	bsf	4024,6,c	;volatile
  3225                           
  3226                           ;uart.c: 11: BAUDCONbits.CKTXP = 0;
  3227  001902  98B8               	bcf	4024,4,c	;volatile
  3228                           
  3229                           ;uart.c: 12: BAUDCONbits.WUE = 0;
  3230  001904  92B8               	bcf	4024,1,c	;volatile
  3231                           
  3232                           ;uart.c: 13: BAUDCONbits.ABDEN = 0;
  3233  001906  90B8               	bcf	4024,0,c	;volatile
  3234                           
  3235                           ;uart.c: 14: TXSTA1bits.BRGH = 1;
  3236  001908  84AC               	bsf	4012,2,c	;volatile
  3237                           
  3238                           ;uart.c: 15: TXSTA1bits.SYNC = 0;
  3239  00190A  98AC               	bcf	4012,4,c	;volatile
  3240                           
  3241                           ;uart.c: 16: SPBRGH1 = 0;
  3242  00190C  0E00               	movlw	0
  3243  00190E  6EB0               	movwf	4016,c	;volatile
  3244                           
  3245                           ;uart.c: 17: SPBRG1 = 103;
  3246  001910  0E67               	movlw	103
  3247  001912  6EAF               	movwf	4015,c	;volatile
  3248                           
  3249                           ;uart.c: 19: RC1STAbits.SPEN = 1;
  3250  001914  8EAB               	bsf	4011,7,c	;volatile
  3251                           
  3252                           ;uart.c: 20: TRISCbits.TRISC7 = 1;
  3253  001916  8E94               	bsf	3988,7,c	;volatile
  3254                           
  3255                           ;uart.c: 21: TRISCbits.TRISC6 = 0;
  3256  001918  9C94               	bcf	3988,6,c	;volatile
  3257                           
  3258                           ;uart.c: 24: RCSTA1bits.CREN = 1;
  3259  00191A  88AB               	bsf	4011,4,c	;volatile
  3260                           
  3261                           ;uart.c: 25: TXSTA1bits.TXEN = 1;
  3262  00191C  8AAC               	bsf	4012,5,c	;volatile
  3263                           
  3264                           ;uart.c: 33: PIR1bits.RC1IF = 0;
  3265  00191E  9A9E               	bcf	3998,5,c	;volatile
  3266  001920  0012               	return		;funcret
  3267  001922                     __end_of_init_md_uart:
  3268                           	opt stack 0
  3269                           tblptru	equ	0xFF8
  3270                           tblptrh	equ	0xFF7
  3271                           tblptrl	equ	0xFF6
  3272                           tablat	equ	0xFF5
  3273                           prodh	equ	0xFF4
  3274                           prodl	equ	0xFF3
  3275                           intcon	equ	0xFF2
  3276                           postinc0	equ	0xFEE
  3277                           wreg	equ	0xFE8
  3278                           indf1	equ	0xFE7
  3279                           postdec1	equ	0xFE5
  3280                           plusw1	equ	0xFE3
  3281                           fsr1h	equ	0xFE2
  3282                           fsr1l	equ	0xFE1
  3283                           indf2	equ	0xFDF
  3284                           postinc2	equ	0xFDE
  3285                           plusw2	equ	0xFDB
  3286                           fsr2h	equ	0xFDA
  3287                           fsr2l	equ	0xFD9
  3288                           status	equ	0xFD8
  3289                           
  3290 ;; *************** function _isr *****************
  3291 ;; Defined at:
  3292 ;;		line 14 in file "main.c"
  3293 ;; Parameters:    Size  Location     Type
  3294 ;;		None
  3295 ;; Auto vars:     Size  Location     Type
  3296 ;;		None
  3297 ;; Return value:  Size  Location     Type
  3298 ;;                  1    wreg      void 
  3299 ;; Registers used:
  3300 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3301 ;; Tracked objects:
  3302 ;;		On entry : 0/0
  3303 ;;		On exit  : 0/0
  3304 ;;		Unchanged: 0/0
  3305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3308 ;;      Temps:         20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3309 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3310 ;;Total ram usage:       20 bytes
  3311 ;; Hardware stack levels used:    1
  3312 ;; Hardware stack levels required when called:    2
  3313 ;; This function calls:
  3314 ;;		_check_mdstate_tmr5
  3315 ;;		_disable_md_rxint
  3316 ;;		i2_disable_tmr5
  3317 ;;		i2_reload_tmr5_pt25s
  3318 ;; This function is called by:
  3319 ;;		Interrupt level 2
  3320 ;; This function uses a non-reentrant model
  3321 ;;
  3322                           
  3323                           	psect	intcode
  3324  000008                     __pintcode:
  3325                           	opt stack 0
  3326  000008                     _isr:
  3327                           	opt stack 24
  3328                           
  3329                           ;incstack = 0
  3330  000008  8242               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3331  00000A  CFFA F004          	movff	pclath,??_isr+2
  3332  00000E  CFFB F005          	movff	pclatu,??_isr+3
  3333  000012  CFE9 F006          	movff	fsr0l,??_isr+4
  3334  000016  CFEA F007          	movff	fsr0h,??_isr+5
  3335  00001A  CFE1 F008          	movff	fsr1l,??_isr+6
  3336  00001E  CFE2 F009          	movff	fsr1h,??_isr+7
  3337  000022  CFD9 F00A          	movff	fsr2l,??_isr+8
  3338  000026  CFDA F00B          	movff	fsr2h,??_isr+9
  3339  00002A  CFF3 F00C          	movff	prodl,??_isr+10
  3340  00002E  CFF4 F00D          	movff	prodh,??_isr+11
  3341  000032  CFF6 F00E          	movff	tblptrl,??_isr+12
  3342  000036  CFF7 F00F          	movff	tblptrh,??_isr+13
  3343  00003A  CFF8 F010          	movff	tblptru,??_isr+14
  3344  00003E  CFF5 F011          	movff	tablat,??_isr+15
  3345  000042  C042  F012         	movff	btemp,??_isr+16
  3346  000046  C043  F013         	movff	btemp+1,??_isr+17
  3347  00004A  C044  F014         	movff	btemp+2,??_isr+18
  3348  00004E  C045  F015         	movff	btemp+3,??_isr+19
  3349                           
  3350                           ;main.c: 16: if (RC1IF && PIE1bits.RCIE)
  3351  000052  BA9E               	btfsc	3998,5,c	;volatile
  3352  000054  AA9D               	btfss	3997,5,c	;volatile
  3353  000056  D0B7               	goto	i2l120
  3354                           
  3355                           ;main.c: 17: {
  3356                           ;main.c: 18: RC1IF = 0;
  3357  000058  9A9E               	bcf	3998,5,c	;volatile
  3358                           
  3359                           ;main.c: 19: currentChar = RC1REG;
  3360  00005A  CFAE F039          	movff	4014,_currentChar	;volatile
  3361                           
  3362                           ;main.c: 20: mdRxBuf[endPtr++] = currentChar;
  3363  00005E  503E               	movf	_endPtr,w,c
  3364  000060  0D01               	mullw	1
  3365  000062  0E00               	movlw	low _mdRxBuf
  3366  000064  24F3               	addwf	prodl,w,c
  3367  000066  6ED9               	movwf	fsr2l,c
  3368  000068  0E02               	movlw	high _mdRxBuf
  3369  00006A  20F4               	addwfc	prodh,w,c
  3370  00006C  6EDA               	movwf	fsr2h,c
  3371  00006E  C039  FFDF         	movff	_currentChar,indf2
  3372  000072  2A3E               	incf	_endPtr,f,c
  3373                           
  3374                           ;main.c: 21: if (endPtr >= sizeof(mdRxBuf))
  3375  000074  0E9F               	movlw	159
  3376  000076  643E               	cpfsgt	_endPtr,c
  3377  000078  D001               	goto	i2l114
  3378                           
  3379                           ;main.c: 22: endPtr--;
  3380  00007A  063E               	decf	_endPtr,f,c
  3381  00007C                     i2l114:
  3382                           
  3383                           ;main.c: 23: if (endPtr > 2)
  3384  00007C  0E02               	movlw	2
  3385  00007E  643E               	cpfsgt	_endPtr,c
  3386  000080  D0A2               	goto	i2l120
  3387                           
  3388                           ;main.c: 24: {
  3389                           ;main.c: 26: if (mdRxBuf[(uint8_t)(endPtr - 2)] == 'O' && mdRxBuf[(uint8_t)(endPtr - 1)]
      +                           == 'K' && (mdRxBuf[endPtr] == '\r' || mdRxBuf[endPtr] == '\n'))
  3390  000082  C03E  F002         	movff	_endPtr,??_isr
  3391  000086  0EFE               	movlw	254
  3392  000088  2602               	addwf	??_isr,f,c
  3393  00008A  5002               	movf	??_isr,w,c
  3394  00008C  0D01               	mullw	1
  3395  00008E  0E00               	movlw	low _mdRxBuf
  3396  000090  24F3               	addwf	prodl,w,c
  3397  000092  6ED9               	movwf	fsr2l,c
  3398  000094  0E02               	movlw	high _mdRxBuf
  3399  000096  20F4               	addwfc	prodh,w,c
  3400  000098  6EDA               	movwf	fsr2h,c
  3401  00009A  0E4F               	movlw	79
  3402  00009C  18DE               	xorwf	postinc2,w,c
  3403  00009E  A4D8               	btfss	status,2,c
  3404  0000A0  D036               	goto	i2l116
  3405  0000A2  C03E  F002         	movff	_endPtr,??_isr
  3406  0000A6  0EFF               	movlw	255
  3407  0000A8  2602               	addwf	??_isr,f,c
  3408  0000AA  5002               	movf	??_isr,w,c
  3409  0000AC  0D01               	mullw	1
  3410  0000AE  0E00               	movlw	low _mdRxBuf
  3411  0000B0  24F3               	addwf	prodl,w,c
  3412  0000B2  6ED9               	movwf	fsr2l,c
  3413  0000B4  0E02               	movlw	high _mdRxBuf
  3414  0000B6  20F4               	addwfc	prodh,w,c
  3415  0000B8  6EDA               	movwf	fsr2h,c
  3416  0000BA  0E4B               	movlw	75
  3417  0000BC  18DE               	xorwf	postinc2,w,c
  3418  0000BE  A4D8               	btfss	status,2,c
  3419  0000C0  D026               	goto	i2l116
  3420  0000C2  503E               	movf	_endPtr,w,c
  3421  0000C4  0D01               	mullw	1
  3422  0000C6  0E00               	movlw	low _mdRxBuf
  3423  0000C8  24F3               	addwf	prodl,w,c
  3424  0000CA  6ED9               	movwf	fsr2l,c
  3425  0000CC  0E02               	movlw	high _mdRxBuf
  3426  0000CE  20F4               	addwfc	prodh,w,c
  3427  0000D0  6EDA               	movwf	fsr2h,c
  3428  0000D2  0E0D               	movlw	13
  3429  0000D4  18DE               	xorwf	postinc2,w,c
  3430  0000D6  B4D8               	btfsc	status,2,c
  3431  0000D8  D00C               	goto	i2u109_40
  3432  0000DA  503E               	movf	_endPtr,w,c
  3433  0000DC  0D01               	mullw	1
  3434  0000DE  0E00               	movlw	low _mdRxBuf
  3435  0000E0  24F3               	addwf	prodl,w,c
  3436  0000E2  6ED9               	movwf	fsr2l,c
  3437  0000E4  0E02               	movlw	high _mdRxBuf
  3438  0000E6  20F4               	addwfc	prodh,w,c
  3439  0000E8  6EDA               	movwf	fsr2h,c
  3440  0000EA  0E0A               	movlw	10
  3441  0000EC  18DE               	xorwf	postinc2,w,c
  3442  0000EE  A4D8               	btfss	status,2,c
  3443  0000F0  D00E               	goto	i2l116
  3444  0000F2                     i2u109_40:
  3445                           
  3446                           ;main.c: 28: {
  3447                           ;main.c: 29: tmr5_cnt = 0;
  3448  0000F2  0E00               	movlw	0
  3449  0000F4  6E3F               	movwf	_tmr5_cnt,c
  3450                           
  3451                           ;main.c: 30: disable_tmr5();
  3452  0000F6  ECD2  F00C         	call	i2_disable_tmr5	;wreg free
  3453                           
  3454                           ;main.c: 31: TMR5IF = 0;
  3455  0000FA  927E               	bcf	3966,1,c	;volatile
  3456                           
  3457                           ;main.c: 32: receivedOK = 1;
  3458  0000FC  0E01               	movlw	1
  3459  0000FE  6E3D               	movwf	_receivedOK,c
  3460                           
  3461                           ;main.c: 33: receivedERR = 0;
  3462  000100  0E00               	movlw	0
  3463  000102  6E3C               	movwf	_receivedERR,c
  3464                           
  3465                           ;main.c: 34: timedOut = 0;
  3466  000104  0E00               	movlw	0
  3467  000106  6E3A               	movwf	_timedOut,c
  3468                           
  3469                           ;main.c: 35: disable_md_rxint();
  3470  000108  ECDD  F00C         	call	_disable_md_rxint	;wreg free
  3471                           
  3472                           ;main.c: 36: }
  3473  00010C  D05C               	goto	i2l120
  3474  00010E                     i2l116:
  3475                           
  3476                           ;main.c: 37: else if (endPtr >= 5 && mdRxBuf[(uint8_t)(endPtr - 4)] == 'E' && mdRxBuf[(u
      +                          int8_t)(endPtr - 3)] == 'R' && mdRxBuf[(uint8_t)(endPtr - 2)] == 'R' && mdRxBuf[(uint8_t
      +                          )(endPtr - 1)] == 'O' && mdRxBuf[endPtr] == 'R')
  3477  00010E  0E04               	movlw	4
  3478  000110  643E               	cpfsgt	_endPtr,c
  3479  000112  D059               	goto	i2l120
  3480  000114  C03E  F002         	movff	_endPtr,??_isr
  3481  000118  0EFC               	movlw	252
  3482  00011A  2602               	addwf	??_isr,f,c
  3483  00011C  5002               	movf	??_isr,w,c
  3484  00011E  0D01               	mullw	1
  3485  000120  0E00               	movlw	low _mdRxBuf
  3486  000122  24F3               	addwf	prodl,w,c
  3487  000124  6ED9               	movwf	fsr2l,c
  3488  000126  0E02               	movlw	high _mdRxBuf
  3489  000128  20F4               	addwfc	prodh,w,c
  3490  00012A  6EDA               	movwf	fsr2h,c
  3491  00012C  0E45               	movlw	69
  3492  00012E  18DE               	xorwf	postinc2,w,c
  3493  000130  A4D8               	btfss	status,2,c
  3494  000132  D049               	goto	i2l120
  3495  000134  C03E  F002         	movff	_endPtr,??_isr
  3496  000138  0EFD               	movlw	253
  3497  00013A  2602               	addwf	??_isr,f,c
  3498  00013C  5002               	movf	??_isr,w,c
  3499  00013E  0D01               	mullw	1
  3500  000140  0E00               	movlw	low _mdRxBuf
  3501  000142  24F3               	addwf	prodl,w,c
  3502  000144  6ED9               	movwf	fsr2l,c
  3503  000146  0E02               	movlw	high _mdRxBuf
  3504  000148  20F4               	addwfc	prodh,w,c
  3505  00014A  6EDA               	movwf	fsr2h,c
  3506  00014C  0E52               	movlw	82
  3507  00014E  18DE               	xorwf	postinc2,w,c
  3508  000150  A4D8               	btfss	status,2,c
  3509  000152  D039               	goto	i2l120
  3510  000154  C03E  F002         	movff	_endPtr,??_isr
  3511  000158  0EFE               	movlw	254
  3512  00015A  2602               	addwf	??_isr,f,c
  3513  00015C  5002               	movf	??_isr,w,c
  3514  00015E  0D01               	mullw	1
  3515  000160  0E00               	movlw	low _mdRxBuf
  3516  000162  24F3               	addwf	prodl,w,c
  3517  000164  6ED9               	movwf	fsr2l,c
  3518  000166  0E02               	movlw	high _mdRxBuf
  3519  000168  20F4               	addwfc	prodh,w,c
  3520  00016A  6EDA               	movwf	fsr2h,c
  3521  00016C  0E52               	movlw	82
  3522  00016E  18DE               	xorwf	postinc2,w,c
  3523  000170  A4D8               	btfss	status,2,c
  3524  000172  D029               	goto	i2l120
  3525  000174  C03E  F002         	movff	_endPtr,??_isr
  3526  000178  0EFF               	movlw	255
  3527  00017A  2602               	addwf	??_isr,f,c
  3528  00017C  5002               	movf	??_isr,w,c
  3529  00017E  0D01               	mullw	1
  3530  000180  0E00               	movlw	low _mdRxBuf
  3531  000182  24F3               	addwf	prodl,w,c
  3532  000184  6ED9               	movwf	fsr2l,c
  3533  000186  0E02               	movlw	high _mdRxBuf
  3534  000188  20F4               	addwfc	prodh,w,c
  3535  00018A  6EDA               	movwf	fsr2h,c
  3536  00018C  0E4F               	movlw	79
  3537  00018E  18DE               	xorwf	postinc2,w,c
  3538  000190  A4D8               	btfss	status,2,c
  3539  000192  D019               	goto	i2l120
  3540  000194  503E               	movf	_endPtr,w,c
  3541  000196  0D01               	mullw	1
  3542  000198  0E00               	movlw	low _mdRxBuf
  3543  00019A  24F3               	addwf	prodl,w,c
  3544  00019C  6ED9               	movwf	fsr2l,c
  3545  00019E  0E02               	movlw	high _mdRxBuf
  3546  0001A0  20F4               	addwfc	prodh,w,c
  3547  0001A2  6EDA               	movwf	fsr2h,c
  3548  0001A4  0E52               	movlw	82
  3549  0001A6  18DE               	xorwf	postinc2,w,c
  3550  0001A8  A4D8               	btfss	status,2,c
  3551  0001AA  D00D               	goto	i2l120
  3552                           
  3553                           ;main.c: 40: {
  3554                           ;main.c: 41: tmr5_cnt = 0;
  3555  0001AC  0E00               	movlw	0
  3556  0001AE  6E3F               	movwf	_tmr5_cnt,c
  3557                           
  3558                           ;main.c: 42: disable_tmr5();
  3559  0001B0  ECD2  F00C         	call	i2_disable_tmr5	;wreg free
  3560                           
  3561                           ;main.c: 43: TMR5IF = 0;
  3562  0001B4  927E               	bcf	3966,1,c	;volatile
  3563                           
  3564                           ;main.c: 44: receivedOK = 0;
  3565  0001B6  0E00               	movlw	0
  3566  0001B8  6E3D               	movwf	_receivedOK,c
  3567                           
  3568                           ;main.c: 45: receivedERR = 1;
  3569  0001BA  0E01               	movlw	1
  3570  0001BC  6E3C               	movwf	_receivedERR,c
  3571                           
  3572                           ;main.c: 46: timedOut = 0;
  3573  0001BE  0E00               	movlw	0
  3574  0001C0  6E3A               	movwf	_timedOut,c
  3575                           
  3576                           ;main.c: 47: disable_md_rxint();
  3577  0001C2  ECDD  F00C         	call	_disable_md_rxint	;wreg free
  3578  0001C6                     i2l120:
  3579                           
  3580                           ;main.c: 48: }
  3581                           ;main.c: 49: }
  3582                           ;main.c: 50: }
  3583                           ;main.c: 52: if (TMR5IF)
  3584  0001C6  A27E               	btfss	3966,1,c	;volatile
  3585  0001C8  D006               	goto	i2l121
  3586                           
  3587                           ;main.c: 53: {
  3588                           ;main.c: 55: tmr5_cnt++;
  3589  0001CA  2A3F               	incf	_tmr5_cnt,f,c
  3590                           
  3591                           ;main.c: 56: TMR5IF = 0;
  3592  0001CC  927E               	bcf	3966,1,c	;volatile
  3593                           
  3594                           ;main.c: 57: reload_tmr5_pt25s();
  3595  0001CE  EC9E  F00C         	call	i2_reload_tmr5_pt25s	;wreg free
  3596                           
  3597                           ;main.c: 59: check_mdstate_tmr5();
  3598  0001D2  ECDB  F009         	call	_check_mdstate_tmr5	;wreg free
  3599  0001D6                     i2l121:
  3600  0001D6  C015  F045         	movff	??_isr+19,btemp+3
  3601  0001DA  C014  F044         	movff	??_isr+18,btemp+2
  3602  0001DE  C013  F043         	movff	??_isr+17,btemp+1
  3603  0001E2  C012  F042         	movff	??_isr+16,btemp
  3604  0001E6  C011  FFF5         	movff	??_isr+15,tablat
  3605  0001EA  C010  FFF8         	movff	??_isr+14,tblptru
  3606  0001EE  C00F  FFF7         	movff	??_isr+13,tblptrh
  3607  0001F2  C00E  FFF6         	movff	??_isr+12,tblptrl
  3608  0001F6  C00D  FFF4         	movff	??_isr+11,prodh
  3609  0001FA  C00C  FFF3         	movff	??_isr+10,prodl
  3610  0001FE  C00B  FFDA         	movff	??_isr+9,fsr2h
  3611  000202  C00A  FFD9         	movff	??_isr+8,fsr2l
  3612  000206  C009  FFE2         	movff	??_isr+7,fsr1h
  3613  00020A  C008  FFE1         	movff	??_isr+6,fsr1l
  3614  00020E  C007  FFEA         	movff	??_isr+5,fsr0h
  3615  000212  C006  FFE9         	movff	??_isr+4,fsr0l
  3616  000216  C005  FFFB         	movff	??_isr+3,pclatu
  3617  00021A  C004  FFFA         	movff	??_isr+2,pclath
  3618  00021E  9242               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3619  000220  0011               	retfie		f
  3620  000222                     __end_of_isr:
  3621                           	opt stack 0
  3622                           pclatu	equ	0xFFB
  3623                           pclath	equ	0xFFA
  3624                           tblptru	equ	0xFF8
  3625                           tblptrh	equ	0xFF7
  3626                           tblptrl	equ	0xFF6
  3627                           tablat	equ	0xFF5
  3628                           prodh	equ	0xFF4
  3629                           prodl	equ	0xFF3
  3630                           intcon	equ	0xFF2
  3631                           postinc0	equ	0xFEE
  3632                           fsr0h	equ	0xFEA
  3633                           fsr0l	equ	0xFE9
  3634                           wreg	equ	0xFE8
  3635                           indf1	equ	0xFE7
  3636                           postdec1	equ	0xFE5
  3637                           plusw1	equ	0xFE3
  3638                           fsr1h	equ	0xFE2
  3639                           fsr1l	equ	0xFE1
  3640                           indf2	equ	0xFDF
  3641                           postinc2	equ	0xFDE
  3642                           plusw2	equ	0xFDB
  3643                           fsr2h	equ	0xFDA
  3644                           fsr2l	equ	0xFD9
  3645                           status	equ	0xFD8
  3646                           
  3647 ;; *************** function i2_reload_tmr5_pt25s *****************
  3648 ;; Defined at:
  3649 ;;		line 170 in file "main.c"
  3650 ;; Parameters:    Size  Location     Type
  3651 ;;		None
  3652 ;; Auto vars:     Size  Location     Type
  3653 ;;		None
  3654 ;; Return value:  Size  Location     Type
  3655 ;;                  1    wreg      void 
  3656 ;; Registers used:
  3657 ;;		wreg, status,2
  3658 ;; Tracked objects:
  3659 ;;		On entry : 0/0
  3660 ;;		On exit  : 0/0
  3661 ;;		Unchanged: 0/0
  3662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3666 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3667 ;;Total ram usage:        0 bytes
  3668 ;; Hardware stack levels used:    1
  3669 ;; This function calls:
  3670 ;;		Nothing
  3671 ;; This function is called by:
  3672 ;;		_isr
  3673 ;; This function uses a non-reentrant model
  3674 ;;
  3675                           
  3676                           	psect	text17
  3677  00193C                     __ptext17:
  3678                           	opt stack 0
  3679  00193C                     i2_reload_tmr5_pt25s:
  3680                           	opt stack 25
  3681                           
  3682                           ;main.c: 172: INTCONbits.GIE = 0;
  3683                           
  3684                           ;incstack = 0
  3685  00193C  9EF2               	bcf	intcon,7,c	;volatile
  3686                           
  3687                           ;main.c: 173: T5CON = 0b00110101;
  3688  00193E  0E35               	movlw	53
  3689  001940  010F               	movlb	15	; () banked
  3690  001942  6F4E               	movwf	78,b	;volatile
  3691                           
  3692                           ; BSR set to: 15
  3693                           ;main.c: 175: PIE5bits.TMR5IE = 1;
  3694  001944  827D               	bsf	3965,1,c	;volatile
  3695                           
  3696                           ; BSR set to: 15
  3697                           ;main.c: 176: INTCONbits.PEIE = 1;
  3698  001946  8CF2               	bsf	intcon,6,c	;volatile
  3699                           
  3700                           ; BSR set to: 15
  3701                           ;main.c: 177: PIR5bits.TMR5IF = 0;
  3702  001948  927E               	bcf	3966,1,c	;volatile
  3703                           
  3704                           ;main.c: 178: TMR5H = 0x0B;
  3705  00194A  0E0B               	movlw	11
  3706  00194C  6F50               	movwf	80,b	;volatile
  3707                           
  3708                           ;main.c: 179: TMR5L = 0x45;
  3709  00194E  0E45               	movlw	69
  3710  001950  6F4F               	movwf	79,b	;volatile
  3711                           
  3712                           ; BSR set to: 15
  3713                           ;main.c: 180: INTCONbits.GIE = 1;
  3714  001952  8EF2               	bsf	intcon,7,c	;volatile
  3715                           
  3716                           ; BSR set to: 15
  3717  001954  0012               	return		;funcret
  3718  001956                     __end_ofi2_reload_tmr5_pt25s:
  3719                           	opt stack 0
  3720                           pclatu	equ	0xFFB
  3721                           pclath	equ	0xFFA
  3722                           tblptru	equ	0xFF8
  3723                           tblptrh	equ	0xFF7
  3724                           tblptrl	equ	0xFF6
  3725                           tablat	equ	0xFF5
  3726                           prodh	equ	0xFF4
  3727                           prodl	equ	0xFF3
  3728                           intcon	equ	0xFF2
  3729                           postinc0	equ	0xFEE
  3730                           fsr0h	equ	0xFEA
  3731                           fsr0l	equ	0xFE9
  3732                           wreg	equ	0xFE8
  3733                           indf1	equ	0xFE7
  3734                           postdec1	equ	0xFE5
  3735                           plusw1	equ	0xFE3
  3736                           fsr1h	equ	0xFE2
  3737                           fsr1l	equ	0xFE1
  3738                           indf2	equ	0xFDF
  3739                           postinc2	equ	0xFDE
  3740                           plusw2	equ	0xFDB
  3741                           fsr2h	equ	0xFDA
  3742                           fsr2l	equ	0xFD9
  3743                           status	equ	0xFD8
  3744                           
  3745 ;; *************** function _disable_md_rxint *****************
  3746 ;; Defined at:
  3747 ;;		line 48 in file "uart.c"
  3748 ;; Parameters:    Size  Location     Type
  3749 ;;		None
  3750 ;; Auto vars:     Size  Location     Type
  3751 ;;		None
  3752 ;; Return value:  Size  Location     Type
  3753 ;;                  1    wreg      void 
  3754 ;; Registers used:
  3755 ;;		None
  3756 ;; Tracked objects:
  3757 ;;		On entry : 0/0
  3758 ;;		On exit  : 0/0
  3759 ;;		Unchanged: 0/0
  3760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3762 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3764 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3765 ;;Total ram usage:        0 bytes
  3766 ;; Hardware stack levels used:    1
  3767 ;; This function calls:
  3768 ;;		Nothing
  3769 ;; This function is called by:
  3770 ;;		_isr
  3771 ;; This function uses a non-reentrant model
  3772 ;;
  3773                           
  3774                           	psect	text18
  3775  0019BA                     __ptext18:
  3776                           	opt stack 0
  3777  0019BA                     _disable_md_rxint:
  3778                           	opt stack 25
  3779                           
  3780                           ;uart.c: 50: CREN1 = 0;
  3781                           
  3782                           ; BSR set to: 15
  3783                           ;incstack = 0
  3784  0019BA  98AB               	bcf	4011,4,c	;volatile
  3785                           
  3786                           ;uart.c: 51: GIE = 0;
  3787  0019BC  9EF2               	bcf	intcon,7,c	;volatile
  3788                           
  3789                           ;uart.c: 52: PIE1bits.RC1IE = 0;
  3790  0019BE  9A9D               	bcf	3997,5,c	;volatile
  3791                           
  3792                           ;uart.c: 53: GIE = 1;
  3793  0019C0  8EF2               	bsf	intcon,7,c	;volatile
  3794  0019C2  0012               	return		;funcret
  3795  0019C4                     __end_of_disable_md_rxint:
  3796                           	opt stack 0
  3797                           pclatu	equ	0xFFB
  3798                           pclath	equ	0xFFA
  3799                           tblptru	equ	0xFF8
  3800                           tblptrh	equ	0xFF7
  3801                           tblptrl	equ	0xFF6
  3802                           tablat	equ	0xFF5
  3803                           prodh	equ	0xFF4
  3804                           prodl	equ	0xFF3
  3805                           intcon	equ	0xFF2
  3806                           postinc0	equ	0xFEE
  3807                           fsr0h	equ	0xFEA
  3808                           fsr0l	equ	0xFE9
  3809                           wreg	equ	0xFE8
  3810                           indf1	equ	0xFE7
  3811                           postdec1	equ	0xFE5
  3812                           plusw1	equ	0xFE3
  3813                           fsr1h	equ	0xFE2
  3814                           fsr1l	equ	0xFE1
  3815                           indf2	equ	0xFDF
  3816                           postinc2	equ	0xFDE
  3817                           plusw2	equ	0xFDB
  3818                           fsr2h	equ	0xFDA
  3819                           fsr2l	equ	0xFD9
  3820                           status	equ	0xFD8
  3821                           
  3822 ;; *************** function _check_mdstate_tmr5 *****************
  3823 ;; Defined at:
  3824 ;;		line 191 in file "main.c"
  3825 ;; Parameters:    Size  Location     Type
  3826 ;;		None
  3827 ;; Auto vars:     Size  Location     Type
  3828 ;;		None
  3829 ;; Return value:  Size  Location     Type
  3830 ;;                  1    wreg      void 
  3831 ;; Registers used:
  3832 ;;		wreg, status,2, status,0, cstack
  3833 ;; Tracked objects:
  3834 ;;		On entry : 0/0
  3835 ;;		On exit  : 0/0
  3836 ;;		Unchanged: 0/0
  3837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3839 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3840 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3841 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3842 ;;Total ram usage:        1 bytes
  3843 ;; Hardware stack levels used:    1
  3844 ;; Hardware stack levels required when called:    1
  3845 ;; This function calls:
  3846 ;;		i2_disable_tmr5
  3847 ;; This function is called by:
  3848 ;;		_isr
  3849 ;; This function uses a non-reentrant model
  3850 ;;
  3851                           
  3852                           	psect	text19
  3853  0013B6                     __ptext19:
  3854                           	opt stack 0
  3855  0013B6                     _check_mdstate_tmr5:
  3856                           	opt stack 24
  3857                           
  3858                           ;main.c: 193: switch (md_state)
  3859                           
  3860                           ;incstack = 0
  3861  0013B6  D058               	goto	i2l144
  3862  0013B8                     
  3863                           ;main.c: 196: PORTCbits.RC4 = (bool)(tmr5_cnt % 2);
  3864  0013B8  C03F  F001         	movff	_tmr5_cnt,??_check_mdstate_tmr5
  3865  0013BC  0E01               	movlw	1
  3866  0013BE  1601               	andwf	??_check_mdstate_tmr5,f,c
  3867  0013C0  3A01               	swapf	??_check_mdstate_tmr5,f,c
  3868  0013C2  5082               	movf	3970,w,c	;volatile
  3869  0013C4  1801               	xorwf	??_check_mdstate_tmr5,w,c
  3870  0013C6  0BEF               	andlw	-17
  3871  0013C8  1801               	xorwf	??_check_mdstate_tmr5,w,c
  3872  0013CA  6E82               	movwf	3970,c	;volatile
  3873                           
  3874                           ;main.c: 197: if (tmr5_cnt >= (4*45))
  3875  0013CC  0EB3               	movlw	179
  3876  0013CE  643F               	cpfsgt	_tmr5_cnt,c
  3877  0013D0  0012               	return	
  3878                           
  3879                           ;main.c: 198: {
  3880                           ;main.c: 199: disable_tmr5();
  3881  0013D2  ECD2  F00C         	call	i2_disable_tmr5	;wreg free
  3882                           
  3883                           ;main.c: 200: tmr5_cnt = 0;
  3884  0013D6  0E00               	movlw	0
  3885  0013D8  6E3F               	movwf	_tmr5_cnt,c
  3886                           
  3887                           ;main.c: 201: bootTimerIsDone = 1;
  3888  0013DA  0E01               	movlw	1
  3889  0013DC  0100               	movlb	0	; () banked
  3890  0013DE  6FFB               	movwf	_bootTimerIsDone& (0+255),b
  3891                           
  3892                           ; BSR set to: 0
  3893                           ;main.c: 202: }
  3894                           ;main.c: 203: break;
  3895  0013E0  0012               	return	
  3896  0013E2                     
  3897                           ; BSR set to: 0
  3898                           ;main.c: 207: disable_tmr5();
  3899                           
  3900                           ; BSR set to: 0
  3901  0013E2  ECD2  F00C         	call	i2_disable_tmr5	;wreg free
  3902                           
  3903                           ;main.c: 208: tmr5_cnt = 0;
  3904  0013E6  0E00               	movlw	0
  3905  0013E8  6E3F               	movwf	_tmr5_cnt,c
  3906                           
  3907                           ;main.c: 209: receivedOK = 0;
  3908  0013EA  0E00               	movlw	0
  3909  0013EC  6E3D               	movwf	_receivedOK,c
  3910                           
  3911                           ;main.c: 210: receivedERR = 0;
  3912  0013EE  0E00               	movlw	0
  3913  0013F0  6E3C               	movwf	_receivedERR,c
  3914                           
  3915                           ;main.c: 211: timedOut = 1;
  3916  0013F2  0E01               	movlw	1
  3917  0013F4  6E3A               	movwf	_timedOut,c
  3918                           
  3919                           ;main.c: 213: break;
  3920  0013F6  0012               	return	
  3921  0013F8                     
  3922                           ;main.c: 215: if (tmr5_cnt >= (4*10))
  3923  0013F8  0E27               	movlw	39
  3924  0013FA  643F               	cpfsgt	_tmr5_cnt,c
  3925  0013FC  0012               	return	
  3926                           
  3927                           ;main.c: 216: {
  3928                           ;main.c: 217: disable_tmr5();
  3929  0013FE  ECD2  F00C         	call	i2_disable_tmr5	;wreg free
  3930                           
  3931                           ;main.c: 218: tmr5_cnt = 0;
  3932  001402  0E00               	movlw	0
  3933  001404  6E3F               	movwf	_tmr5_cnt,c
  3934                           
  3935                           ;main.c: 219: receivedOK = 0;
  3936  001406  0E00               	movlw	0
  3937  001408  6E3D               	movwf	_receivedOK,c
  3938                           
  3939                           ;main.c: 220: receivedERR = 0;
  3940  00140A  0E00               	movlw	0
  3941  00140C  6E3C               	movwf	_receivedERR,c
  3942                           
  3943                           ;main.c: 221: timedOut = 1;
  3944  00140E  0E01               	movlw	1
  3945  001410  6E3A               	movwf	_timedOut,c
  3946                           
  3947                           ;main.c: 222: }
  3948                           ;main.c: 223: break;
  3949  001412  0012               	return	
  3950  001414                     
  3951                           ;main.c: 225: if (tmr5_cnt >= (4*10))
  3952  001414  0E27               	movlw	39
  3953  001416  643F               	cpfsgt	_tmr5_cnt,c
  3954  001418  0012               	return	
  3955                           
  3956                           ;main.c: 226: {
  3957                           ;main.c: 227: disable_tmr5();
  3958  00141A  ECD2  F00C         	call	i2_disable_tmr5	;wreg free
  3959                           
  3960                           ;main.c: 228: tmr5_cnt = 0;
  3961  00141E  0E00               	movlw	0
  3962  001420  6E3F               	movwf	_tmr5_cnt,c
  3963                           
  3964                           ;main.c: 229: receivedOK = 0;
  3965  001422  0E00               	movlw	0
  3966  001424  6E3D               	movwf	_receivedOK,c
  3967                           
  3968                           ;main.c: 230: receivedERR = 0;
  3969  001426  0E00               	movlw	0
  3970  001428  6E3C               	movwf	_receivedERR,c
  3971                           
  3972                           ;main.c: 231: timedOut = 1;
  3973  00142A  0E01               	movlw	1
  3974  00142C  6E3A               	movwf	_timedOut,c
  3975                           
  3976                           ;main.c: 232: }
  3977                           ;main.c: 233: break;
  3978  00142E  0012               	return	
  3979  001430                     
  3980                           ;main.c: 235: if (tmr5_cnt >= (4*10))
  3981  001430  0E27               	movlw	39
  3982  001432  643F               	cpfsgt	_tmr5_cnt,c
  3983  001434  0012               	return	
  3984                           
  3985                           ;main.c: 236: {
  3986                           ;main.c: 237: disable_tmr5();
  3987  001436  ECD2  F00C         	call	i2_disable_tmr5	;wreg free
  3988                           
  3989                           ;main.c: 238: tmr5_cnt = 0;
  3990  00143A  0E00               	movlw	0
  3991  00143C  6E3F               	movwf	_tmr5_cnt,c
  3992                           
  3993                           ;main.c: 239: receivedOK = 0;
  3994  00143E  0E00               	movlw	0
  3995  001440  6E3D               	movwf	_receivedOK,c
  3996                           
  3997                           ;main.c: 240: receivedERR = 0;
  3998  001442  0E00               	movlw	0
  3999  001444  6E3C               	movwf	_receivedERR,c
  4000                           
  4001                           ;main.c: 241: timedOut = 1;
  4002  001446  0E01               	movlw	1
  4003  001448  6E3A               	movwf	_timedOut,c
  4004                           
  4005                           ;main.c: 242: }
  4006                           ;main.c: 243: break;
  4007  00144A  0012               	return	
  4008  00144C                     
  4009                           ;main.c: 245: if (tmr5_cnt >= (4*10))
  4010  00144C  0E27               	movlw	39
  4011  00144E  643F               	cpfsgt	_tmr5_cnt,c
  4012  001450  0012               	return	
  4013                           
  4014                           ;main.c: 246: {
  4015                           ;main.c: 247: disable_tmr5();
  4016  001452  ECD2  F00C         	call	i2_disable_tmr5	;wreg free
  4017                           
  4018                           ;main.c: 248: tmr5_cnt = 0;
  4019  001456  0E00               	movlw	0
  4020  001458  6E3F               	movwf	_tmr5_cnt,c
  4021                           
  4022                           ;main.c: 249: receivedOK = 0;
  4023  00145A  0E00               	movlw	0
  4024  00145C  6E3D               	movwf	_receivedOK,c
  4025                           
  4026                           ;main.c: 250: receivedERR = 0;
  4027  00145E  0E00               	movlw	0
  4028  001460  6E3C               	movwf	_receivedERR,c
  4029                           
  4030                           ;main.c: 251: timedOut = 1;
  4031  001462  0E01               	movlw	1
  4032  001464  6E3A               	movwf	_timedOut,c
  4033                           
  4034                           ;main.c: 254: }
  4035                           
  4036                           ;main.c: 252: }
  4037                           ;main.c: 253: break;
  4038  001466  0012               	return	
  4039  001468                     i2l144:
  4040  001468  0100               	movlb	0	; () banked
  4041  00146A  51FC               	movf	_md_state& (0+255),w,b
  4042                           
  4043                           ; Switch size 1, requested type "space"
  4044                           ; Number of cases is 6, Range of values is 1 to 6
  4045                           ; switch strategies available:
  4046                           ; Name         Instructions Cycles
  4047                           ; simple_byte           19    10 (average)
  4048                           ;	Chosen strategy is simple_byte
  4049  00146C  0A01               	xorlw	1	; case 1
  4050  00146E  B4D8               	btfsc	status,2,c
  4051  001470  D7A3               	goto	i2l145
  4052  001472  0A03               	xorlw	3	; case 2
  4053  001474  B4D8               	btfsc	status,2,c
  4054  001476  D7B5               	goto	i2l148
  4055  001478  0A01               	xorlw	1	; case 3
  4056  00147A  B4D8               	btfsc	status,2,c
  4057  00147C  D7BD               	goto	i2l149
  4058  00147E  0A07               	xorlw	7	; case 4
  4059  001480  B4D8               	btfsc	status,2,c
  4060  001482  D7C8               	goto	i2l151
  4061  001484  0A01               	xorlw	1	; case 5
  4062  001486  B4D8               	btfsc	status,2,c
  4063  001488  D7D3               	goto	i2l153
  4064  00148A  0A03               	xorlw	3	; case 6
  4065  00148C  A4D8               	btfss	status,2,c
  4066  00148E  0012               	return	
  4067  001490  D7DD               	goto	i2l155
  4068  001492                     __end_of_check_mdstate_tmr5:
  4069                           	opt stack 0
  4070                           pclatu	equ	0xFFB
  4071                           pclath	equ	0xFFA
  4072                           tblptru	equ	0xFF8
  4073                           tblptrh	equ	0xFF7
  4074                           tblptrl	equ	0xFF6
  4075                           tablat	equ	0xFF5
  4076                           prodh	equ	0xFF4
  4077                           prodl	equ	0xFF3
  4078                           intcon	equ	0xFF2
  4079                           postinc0	equ	0xFEE
  4080                           fsr0h	equ	0xFEA
  4081                           fsr0l	equ	0xFE9
  4082                           wreg	equ	0xFE8
  4083                           indf1	equ	0xFE7
  4084                           postdec1	equ	0xFE5
  4085                           plusw1	equ	0xFE3
  4086                           fsr1h	equ	0xFE2
  4087                           fsr1l	equ	0xFE1
  4088                           indf2	equ	0xFDF
  4089                           postinc2	equ	0xFDE
  4090                           plusw2	equ	0xFDB
  4091                           fsr2h	equ	0xFDA
  4092                           fsr2l	equ	0xFD9
  4093                           status	equ	0xFD8
  4094                           
  4095 ;; *************** function i2_disable_tmr5 *****************
  4096 ;; Defined at:
  4097 ;;		line 183 in file "main.c"
  4098 ;; Parameters:    Size  Location     Type
  4099 ;;		None
  4100 ;; Auto vars:     Size  Location     Type
  4101 ;;		None
  4102 ;; Return value:  Size  Location     Type
  4103 ;;                  1    wreg      void 
  4104 ;; Registers used:
  4105 ;;		wreg, status,2
  4106 ;; Tracked objects:
  4107 ;;		On entry : 0/0
  4108 ;;		On exit  : 0/0
  4109 ;;		Unchanged: 0/0
  4110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4114 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4115 ;;Total ram usage:        0 bytes
  4116 ;; Hardware stack levels used:    1
  4117 ;; This function calls:
  4118 ;;		Nothing
  4119 ;; This function is called by:
  4120 ;;		_isr
  4121 ;;		_check_mdstate_tmr5
  4122 ;; This function uses a non-reentrant model
  4123 ;;
  4124                           
  4125                           	psect	text20
  4126  0019A4                     __ptext20:
  4127                           	opt stack 0
  4128  0019A4                     i2_disable_tmr5:
  4129                           	opt stack 25
  4130                           
  4131                           ;main.c: 185: tmr5_cnt = 0;
  4132                           
  4133                           ;incstack = 0
  4134  0019A4  0E00               	movlw	0
  4135  0019A6  6E3F               	movwf	_tmr5_cnt,c
  4136                           
  4137                           ;main.c: 186: T5CONbits.TMR5ON = 0;
  4138  0019A8  010F               	movlb	15	; () banked
  4139  0019AA  914E               	bcf	78,0,b	;volatile
  4140                           
  4141                           ; BSR set to: 15
  4142                           ;main.c: 187: PIE5bits.TMR5IE = 0;
  4143  0019AC  927D               	bcf	3965,1,c	;volatile
  4144                           
  4145                           ; BSR set to: 15
  4146  0019AE  0012               	return		;funcret
  4147  0019B0                     __end_ofi2_disable_tmr5:
  4148                           	opt stack 0
  4149                           pclatu	equ	0xFFB
  4150                           pclath	equ	0xFFA
  4151                           tblptru	equ	0xFF8
  4152                           tblptrh	equ	0xFF7
  4153                           tblptrl	equ	0xFF6
  4154                           tablat	equ	0xFF5
  4155                           prodh	equ	0xFF4
  4156                           prodl	equ	0xFF3
  4157                           intcon	equ	0xFF2
  4158                           postinc0	equ	0xFEE
  4159                           fsr0h	equ	0xFEA
  4160                           fsr0l	equ	0xFE9
  4161                           wreg	equ	0xFE8
  4162                           indf1	equ	0xFE7
  4163                           postdec1	equ	0xFE5
  4164                           plusw1	equ	0xFE3
  4165                           fsr1h	equ	0xFE2
  4166                           fsr1l	equ	0xFE1
  4167                           indf2	equ	0xFDF
  4168                           postinc2	equ	0xFDE
  4169                           plusw2	equ	0xFDB
  4170                           fsr2h	equ	0xFDA
  4171                           fsr2l	equ	0xFD9
  4172                           status	equ	0xFD8
  4173                           pclatu	equ	0xFFB
  4174                           pclath	equ	0xFFA
  4175                           tblptru	equ	0xFF8
  4176                           tblptrh	equ	0xFF7
  4177                           tblptrl	equ	0xFF6
  4178                           tablat	equ	0xFF5
  4179                           prodh	equ	0xFF4
  4180                           prodl	equ	0xFF3
  4181                           intcon	equ	0xFF2
  4182                           postinc0	equ	0xFEE
  4183                           fsr0h	equ	0xFEA
  4184                           fsr0l	equ	0xFE9
  4185                           wreg	equ	0xFE8
  4186                           indf1	equ	0xFE7
  4187                           postdec1	equ	0xFE5
  4188                           plusw1	equ	0xFE3
  4189                           fsr1h	equ	0xFE2
  4190                           fsr1l	equ	0xFE1
  4191                           indf2	equ	0xFDF
  4192                           postinc2	equ	0xFDE
  4193                           plusw2	equ	0xFDB
  4194                           fsr2h	equ	0xFDA
  4195                           fsr2l	equ	0xFD9
  4196                           status	equ	0xFD8
  4197                           
  4198                           	psect	rparam
  4199  0000                     pclatu	equ	0xFFB
  4200                           pclath	equ	0xFFA
  4201                           tblptru	equ	0xFF8
  4202                           tblptrh	equ	0xFF7
  4203                           tblptrl	equ	0xFF6
  4204                           tablat	equ	0xFF5
  4205                           prodh	equ	0xFF4
  4206                           prodl	equ	0xFF3
  4207                           intcon	equ	0xFF2
  4208                           postinc0	equ	0xFEE
  4209                           fsr0h	equ	0xFEA
  4210                           fsr0l	equ	0xFE9
  4211                           wreg	equ	0xFE8
  4212                           indf1	equ	0xFE7
  4213                           postdec1	equ	0xFE5
  4214                           plusw1	equ	0xFE3
  4215                           fsr1h	equ	0xFE2
  4216                           fsr1l	equ	0xFE1
  4217                           indf2	equ	0xFDF
  4218                           postinc2	equ	0xFDE
  4219                           plusw2	equ	0xFDB
  4220                           fsr2h	equ	0xFDA
  4221                           fsr2l	equ	0xFD9
  4222                           status	equ	0xFD8
  4223                           
  4224                           	psect	temp
  4225  000042                     btemp:
  4226                           	opt stack 0
  4227  000042                     	ds	1
  4228  0000                     int$flags	set	btemp
  4229  0000                     wtemp6	set	btemp+1
  4230                           pclatu	equ	0xFFB
  4231                           pclath	equ	0xFFA
  4232                           tblptru	equ	0xFF8
  4233                           tblptrh	equ	0xFF7
  4234                           tblptrl	equ	0xFF6
  4235                           tablat	equ	0xFF5
  4236                           prodh	equ	0xFF4
  4237                           prodl	equ	0xFF3
  4238                           intcon	equ	0xFF2
  4239                           postinc0	equ	0xFEE
  4240                           fsr0h	equ	0xFEA
  4241                           fsr0l	equ	0xFE9
  4242                           wreg	equ	0xFE8
  4243                           indf1	equ	0xFE7
  4244                           postdec1	equ	0xFE5
  4245                           plusw1	equ	0xFE3
  4246                           fsr1h	equ	0xFE2
  4247                           fsr1l	equ	0xFE1
  4248                           indf2	equ	0xFDF
  4249                           postinc2	equ	0xFDE
  4250                           plusw2	equ	0xFDB
  4251                           fsr2h	equ	0xFDA
  4252                           fsr2l	equ	0xFD9
  4253                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    111
    Data        219
    BSS         233
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     34      65
    BANK0           160    133     157
    BANK1           256      0     237
    BANK2           256      0     160
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    md_uart_write_str_ok@data	PTR unsigned char  size(2) Largest target is 47
		 -> close_socket_ok@deactivatePDP(BANK0[15]), close_socket_ok@closeSocket(BANK0[10]), send_over_socket_ok@terminateData(BANK0[1]), send_over_socket_ok@msg(BANK0[8]), 
		 -> send_over_socket_ok@srecv(BANK0[16]), send_over_socket_ok@ssend(BANK0[13]), send_over_socket_ok@openConnection(BANK0[44]), setup_data_ok@activatePDP(BANK0[15]), 
		 -> setup_data_ok@cfgSocket(BANK0[25]), setup_data_ok@setApn(BANK0[47]), send_md_cfg_cmds_ok@csq(BANK0[9]), send_md_cfg_cmds_ok@gprs(BANK0[11]), 
		 -> send_md_cfg_cmds_ok@cereg(BANK0[12]), send_md_cfg_cmds_ok@creg(BANK0[11]), send_md_cfg_cmds_ok@cpin(BANK0[11]), send_md_cfg_cmds_ok@queryVersion(BANK0[10]), 
		 -> send_md_cfg_cmds_ok@ledpattern(BANK0[12]), send_md_cfg_cmds_ok@ledCfg(BANK0[16]), send_md_cfg_cmds_ok@baud(BANK0[16]), send_md_cfg_cmds_ok@cmee(BANK0[12]), 
		 -> send_md_cfg_cmds_ok@ate(BANK0[7]), send_md_cfg_cmds_ok@at(BANK0[5]), 


Critical Paths under _main in COMRAM

    _check_modem_state->_send_over_socket_ok
    _setup_data_ok->_md_uart_write_str_ok
    _send_over_socket_ok->_md_uart_write_str_ok
    _send_md_cfg_cmds_ok->_md_uart_write_str_ok
    _close_socket_ok->_md_uart_write_str_ok
    _md_uart_write_str_ok->_md_uart_send

Critical Paths under _isr in COMRAM

    _isr->_check_mdstate_tmr5

Critical Paths under _main in BANK0

    _check_modem_state->_send_md_cfg_cmds_ok

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   34462
                                             33 COMRAM     1     1      0
                  _check_modem_state
                    _enable_md_rxint
                       _init_md_uart
                           _init_pic
                       _md_uart_send
           _start_modem_send_process
 ---------------------------------------------------------------------------------
 (1) _init_pic                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _check_modem_state                                    0     0      0   34431
                    _close_socket_ok
                _send_md_cfg_cmds_ok
                _send_over_socket_ok
                      _setup_data_ok
           _start_modem_send_process
 ---------------------------------------------------------------------------------
 (1) _start_modem_send_process                             2     2      0       0
                                             21 COMRAM     2     2      0
                _start_md_boot_timer
 ---------------------------------------------------------------------------------
 (2) _start_md_boot_timer                                  0     0      0       0
                  _reload_tmr5_pt25s
 ---------------------------------------------------------------------------------
 (2) _setup_data_ok                                       87    87      0    8498
                                              0 BANK0     87    87      0
                       _init_md_uart
               _md_uart_write_str_ok
                  _terminate_md_uart
 ---------------------------------------------------------------------------------
 (2) _send_over_socket_ok                                 84    84      0    8578
                                             31 COMRAM     2     2      0
                                              0 BANK0     82    82      0
                       _init_md_uart
               _md_uart_write_str_ok
                  _terminate_md_uart
 ---------------------------------------------------------------------------------
 (2) _send_md_cfg_cmds_ok                                133   133      0    8897
                                              0 BANK0    133   133      0
                       _init_md_uart
               _md_uart_write_str_ok
                  _terminate_md_uart
 ---------------------------------------------------------------------------------
 (2) _close_socket_ok                                     25    25      0    8458
                                              0 BANK0     25    25      0
                       _init_md_uart
               _md_uart_write_str_ok
                  _terminate_md_uart
 ---------------------------------------------------------------------------------
 (3) _terminate_md_uart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _md_uart_write_str_ok                                 9     4      5    8378
                                             22 COMRAM     9     4      5
                       _disable_tmr5
                    _enable_md_rxint
                       _md_uart_send
                  _reload_tmr5_pt25s
 ---------------------------------------------------------------------------------
 (3) _reload_tmr5_pt25s                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _md_uart_send                                         1     1      0      31
                                             21 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _enable_md_rxint                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _disable_tmr5                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_md_uart                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 20    20      0       0
                                              1 COMRAM    20    20      0
                 _check_mdstate_tmr5
                   _disable_md_rxint
                     i2_disable_tmr5
                i2_reload_tmr5_pt25s
 ---------------------------------------------------------------------------------
 (6) i2_reload_tmr5_pt25s                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _disable_md_rxint                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _check_mdstate_tmr5                                   1     1      0       0
                                              0 COMRAM     1     1      0
                     i2_disable_tmr5
 ---------------------------------------------------------------------------------
 (6) i2_disable_tmr5                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _check_modem_state
     _close_socket_ok
       _init_md_uart
       _md_uart_write_str_ok
         _disable_tmr5
         _enable_md_rxint
         _md_uart_send
         _reload_tmr5_pt25s
       _terminate_md_uart
     _send_md_cfg_cmds_ok
       _init_md_uart
       _md_uart_write_str_ok
         _disable_tmr5
         _enable_md_rxint
         _md_uart_send
         _reload_tmr5_pt25s
       _terminate_md_uart
     _send_over_socket_ok
       _init_md_uart
       _md_uart_write_str_ok
         _disable_tmr5
         _enable_md_rxint
         _md_uart_send
         _reload_tmr5_pt25s
       _terminate_md_uart
     _setup_data_ok
       _init_md_uart
       _md_uart_write_str_ok
         _disable_tmr5
         _enable_md_rxint
         _md_uart_send
         _reload_tmr5_pt25s
       _terminate_md_uart
     _start_modem_send_process
       _start_md_boot_timer
         _reload_tmr5_pt25s
   _enable_md_rxint
   _init_md_uart
   _init_pic
   _md_uart_send
   _start_modem_send_process
     _start_md_boot_timer
       _reload_tmr5_pt25s

 _isr (ROOT)
   _check_mdstate_tmr5
     i2_disable_tmr5
   _disable_md_rxint
   i2_disable_tmr5
   i2_reload_tmr5_pt25s

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      A0       9       62.5%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      ED       7       92.6%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     85      9D       5       98.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     22      41       1       69.1%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     26B      12        0.0%
DATA                 0      0     26B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Feb 01 11:33:25 2019

                        ??_disable_tmr5 0016                             __CFG_CP0$ON 000000  
                           __CFG_CP1$ON 000000                             __CFG_CP2$ON 000000  
                           __CFG_CP3$ON 000000                             __CFG_CPB$ON 000000  
                      ?_close_socket_ok 0001                             __CFG_CPD$ON 000000  
      __end_ofsend_over_socket_ok@F6861 1059        __end_ofsend_over_socket_ok@F6863 103D  
      __end_ofsend_over_socket_ok@F6865 106B        __end_ofsend_over_socket_ok@F6859 102D  
                     ?_disable_md_rxint 0001                                     l127 18AC  
                                   l129 18CA                                     l260 153A  
                                   l332 17A4                                     l340 177C  
                                   l253 1500                                     l325 18F0  
                                   l342 1788                                     l255 1514  
                                   l247 14B2                                     l335 174C  
                                   l264 1568                                     l248 14F0  
                                   l344 178C                                     l257 1518  
                                   l249 14BC                                     l337 175A  
                                   l258 1530                                     l339 1770  
                                   _GIE 007F97                                     _isr 0008  
                    ??_disable_md_rxint 0001                                     prod 000FF3  
                                   wreg 000FE8                              _TXSTA1bits 000FAC  
                          __CFG_LVP$OFF 000000                                    l2054 1982  
                                  ?_isr 0001                                    u1311 107C  
                                  u1401 111E                                    u1321 108E  
                                  u1411 1130                                    u1331 10A0  
                                  u1500 17DC                                    u1421 1142  
                                  u1341 10B2                                    u1270 1548  
                                  u1510 17F4                                    u1351 10C4  
                                  u1431 16C2                                    u1361 10D6  
                                  u1441 16D4                                    u1371 10E8  
                                  u1451 16E6                                    u1460 12C0  
                                  u1381 10FA                                    u1470 12D8  
                                  u1391 110C                                    u1607 1388  
                                  u1480 12F0                                    u1490 1308  
                                  u1587 18BC                                    u1597 18E4  
                                  _PEIE 007F96                         __end_of_VERSION 1070  
                                  _main 18A0                                    fsr0h 000FEA  
                                  fsr1h 000FE2                                    fsr2h 000FDA  
                                  fsr0l 000FE9                                    indf1 000FE7  
                                  indf2 000FDF                                    fsr1l 000FE1  
                                  fsr2l 000FD9                                    btemp 0042  
                         __CFG_BORV$190 000000                                    prodh 000FF4  
                                  prodl 000FF3                                    start 0222  
                         __CFG_IESO$OFF 000000                            ___param_bank 000000  
          __size_of_start_md_boot_timer 0006                                   ??_isr 0002  
                          _BAUDCON1bits 000FB8                                   ?_main 0001  
                         ?_md_uart_send 0001                                   _CREN1 007D5C  
                                 _T0CON 000FD5                                   _RC1IE 007CED  
                                 _RC1IF 007CF5                                   _T5CON 000F4E  
                                 i2l120 01C6                                   i2l121 01D6  
                                 i2l114 007C                                   i2l116 010E  
                                 i2l151 1414                                   i2l144 1468  
                                 i2l153 1430                                   i2l145 13B8  
                                 i2l155 144C                                   i2l148 13E2  
                                 i2l149 13F8                      setup_data_ok@F6850 0100  
                    setup_data_ok@F6852 012F                      setup_data_ok@F6854 0168  
                                 _TMR0H 000FD7                                   _TMR0L 000FD6  
                                 _TMR5H 000F50                                   _TMR5L 000F4F  
                                 _TRMT1 007D61                           __CFG_WRT0$OFF 000000  
                         __CFG_WRT1$OFF 000000                           __CFG_WRT2$OFF 000000  
                         __CFG_WRT3$OFF 000000                          __CFG_EBTR0$OFF 000000  
                        __CFG_FCMEN$OFF 000000                          __CFG_EBTR1$OFF 000000  
                        __CFG_EBTR2$OFF 000000                          __CFG_EBTR3$OFF 000000  
                         __CFG_WRTB$OFF 000000                           __CFG_WRTC$OFF 000000  
                         __CFG_WRTD$OFF 000000                         ??_setup_data_ok 0020  
                        __CFG_EBTRB$OFF 000000                setup_data_ok@activatePDP 00A8  
                    __CFG_MCLRE$INTMCLR 000000                                   pclath 000FFA  
                                 tablat 000FF5                                   plusw1 000FE3  
                                 plusw2 000FDB                                   status 000FD8  
            ??_start_modem_send_process 0016                                   wtemp6 0043  
                        __CFG_HFOFST$ON 000000                         _enable_md_rxint 198C  
                       __initialization 161E                            __end_of_main 18D0  
           __end_of_send_over_socket_ok 13B6                          ??_md_uart_send 0016  
                                ??_main 0022                           __activetblptr 000002  
                  close_socket_ok@F6874 1059                    close_socket_ok@F6876 103D  
                     _terminate_md_uart 19B0             __end_of_send_md_cfg_cmds_ok 12B2  
      send_over_socket_ok@terminateData 00B1                      ?_terminate_md_uart 0001  
                  __end_of_disable_tmr5 19A4                                  _ANSELA 000F38  
                                _ANSELB 000F39                                  _ANSELC 000F3A  
                 send_md_cfg_cmds_ok@at 00DF                                  _RC1REG 000FAE  
                        __CFG_WDTEN$OFF 000000                           ?_init_md_uart 0001  
                                _SPBRG1 000FAF                                  _TMR0IF 007F92  
                                _TMR5IF 007BF1                                  _TX1REG 000FAD  
                   ??_terminate_md_uart 0016                          __CFG_XINST$OFF 000000  
                        __CFG_STVREN$ON 000000            __size_ofi2_reload_tmr5_pt25s 001A  
                                _endPtr 003E                        __end_of_init_pic 18A0  
         __size_of_md_uart_write_str_ok 00DA                                  clear_0 1684  
                                clear_1 1690                                  clear_2 16A4  
             __end_of_terminate_md_uart 19BA                            __pdataCOMRAM 0023  
                   setup_data_ok@setApn 0060                            __mediumconst 0000  
                                tblptrh 000FF7                                  tblptrl 000FF6  
                                tblptru 000FF8                 __end_of_enable_md_rxint 1998  
                        ??_init_md_uart 0016                              __accesstop 0060  
               __end_of__initialization 16AA                         __CFG_PBADEN$OFF 000000  
                         ___rparam_used 000001                          __pcstackCOMRAM 0001  
                          __pidataBANK0 196B                            __pidataBANK1 156C  
            close_socket_ok@closeSocket 006F              __end_of_check_mdstate_tmr5 1492  
                     _check_modem_state 174A                      ?_check_modem_state 0001  
                   _start_md_boot_timer 19C4                              __pbssBANK0 00FA  
                            __pbssBANK1 01B1                              __pbssBANK2 0200  
                       __CFG_PLLCFG$OFF 000000        __end_of_start_modem_send_process 18FE  
             __size_of_disable_md_rxint 000A                    __end_of_md_uart_send 198C  
                   ??_check_modem_state 0022                      __CFG_CCP2MX$PORTC1 000000  
                  ?_start_md_boot_timer 0001                      __CFG_CCP3MX$PORTB5 000000  
             __end_of_check_modem_state 17CE                  send_md_cfg_cmds_ok@ate 00D8  
            __size_of_terminate_md_uart 000A                  send_md_cfg_cmds_ok@csq 00CF  
                            _ledPattern 0041                   __size_of_disable_tmr5 000C  
              __size_of_close_socket_ok 006C                                 _SPBRGH1 000FB0  
                               _VERSION 106B                        ?_enable_md_rxint 0001  
                             ?_init_pic 0001                         __CFG_PWRTEN$OFF 000000  
            md_uart_write_str_ok@wantOk 001A                                 __Hparam 0000  
                               __Lparam 0000               md_uart_write_str_ok@index 001F  
                 ??_start_md_boot_timer 0016                send_md_cfg_cmds_ok@F6821 0148  
              send_md_cfg_cmds_ok@F6813 00F5                send_md_cfg_cmds_ok@F6823 0183  
              send_md_cfg_cmds_ok@F6831 0177                send_md_cfg_cmds_ok@F6815 00EE  
              send_md_cfg_cmds_ok@F6833 019B                send_md_cfg_cmds_ok@F6817 018F  
              send_md_cfg_cmds_ok@F6825 002E                send_md_cfg_cmds_ok@F6819 0158  
              send_md_cfg_cmds_ok@F6835 00E5                send_md_cfg_cmds_ok@F6827 0023  
              send_md_cfg_cmds_ok@F6829 01A6                            _disable_tmr5 1998  
                          __psmallconst 1000                                 __pcinit 161E  
                               __ramtop 1000                    __end_of_init_md_uart 1922  
                               _mdRxBuf 0200                                 __ptext0 18A0  
                               __ptext1 183A                                 __ptext2 174A  
                               __ptext3 18D0                                 __ptext4 19C4  
                               __ptext5 16B8                                 __ptext6 12B2  
                               __ptext7 1072                                 __ptext8 17CE  
                               __ptext9 19B0                 __size_ofi2_disable_tmr5 000C  
                       _ledPatternCount 0040                send_md_cfg_cmds_ok@cereg 0098  
              send_md_cfg_cmds_ok@gotOk 00E4                            __size_of_isr 021A  
                            _receivedOK 003D                               _T5CONbits 000F4E  
                   i2_reload_tmr5_pt25s 193C               send_md_cfg_cmds_ok@ledCfg 0070  
                 __end_of_setup_data_ok 174A                    end_of_initialization 16AA  
                         __Lmediumconst 0000                 md_uart_write_str_ok@pos 001C  
                            ??_init_pic 0016                                 postdec1 000FE5  
                  ?i2_reload_tmr5_pt25s 0001                                 postinc0 000FEE  
                               postinc2 000FDE       __size_of_start_modem_send_process 002E  
                             _PORTAbits 000F80                               _PORTBbits 000F81  
             ?_start_modem_send_process 0001                               _PORTCbits 000F82  
            __size_of_check_modem_state 0084            __size_of_send_over_socket_ok 0104  
                             _TRISAbits 000F92                               _TRISBbits 000F93  
                             _TRISCbits 000F94                   __size_of_md_uart_send 000C  
          __end_of_md_uart_write_str_ok 156C                       ??_close_socket_ok 0020  
                      _disable_md_rxint 19BA            __size_of_send_md_cfg_cmds_ok 0240  
                 ??i2_reload_tmr5_pt25s 0001                             _BAUDCONbits 000FB8  
md_uart_write_str_ok@waitToSendMoreData 001B                           __pidataCOMRAM 1956  
                          _md_uart_send 1980                     start_initialization 161E  
                           __end_of_isr 0222                send_over_socket_ok@F6861 104C  
              send_over_socket_ok@F6863 102D                send_over_socket_ok@F6865 1063  
              send_over_socket_ok@F6859 1001                      _check_mdstate_tmr5 13B6  
                   ?_check_mdstate_tmr5 0001           send_md_cfg_cmds_ok@ledpattern 008C  
              send_over_socket_ok@srecv 008C                send_over_socket_ok@ssend 009C  
                 __size_of_init_md_uart 0024                             __pdataBANK0 00E5  
                           __pdataBANK1 0100                          i2_disable_tmr5 19A4  
                           __pbssCOMRAM 0038                    ??_check_mdstate_tmr5 0001  
                         __pcstackBANK0 0060                            _init_md_uart 18FE  
                     __size_of_init_pic 0066                               __pintcode 0008  
        md_uart_write_str_ok@numRetries 001D                         _bootTimerIsDone 00FB  
                __end_ofi2_disable_tmr5 19B0                    _md_uart_write_str_ok 1492  
                      __CFG_PRICLKEN$ON 000000                             __smallconst 1000  
          close_socket_ok@deactivatePDP 0060       send_over_socket_ok@openConnection 0060  
               send_md_cfg_cmds_ok@baud 0060                 send_md_cfg_cmds_ok@cmee 0080  
               send_md_cfg_cmds_ok@creg 00AF                 send_md_cfg_cmds_ok@cpin 00A4  
               send_md_cfg_cmds_ok@gprs 00BA                            _receivedRESP 003B  
                              _LATBbits 000F8A             __end_of_start_md_boot_timer 19CA  
                              _LATCbits 000F8B                                _PIE1bits 000F9D  
                              _PIE5bits 000F7D                     _send_over_socket_ok 12B2  
                              i2u109_40 00F2                                _PIR1bits 000F9E  
                              _PIR5bits 000F7E                __size_of_enable_md_rxint 000C  
                      __CFG_WDTPS$32768 000000                       _reload_tmr5_pt25s 1922  
                       ?i2_disable_tmr5 0001                   ?_md_uart_write_str_ok 0017  
                    ?_reload_tmr5_pt25s 0001                            _referenceBuf 01B1  
              __end_of_disable_md_rxint 19C4                     _send_md_cfg_cmds_ok 1072  
                  ?_send_over_socket_ok 0001                         _close_socket_ok 17CE  
                setup_data_ok@cfgSocket 008F                     ??_reload_tmr5_pt25s 0016  
                             copy_data0 1632                               copy_data1 1652  
                             copy_data2 1672                    ?_send_md_cfg_cmds_ok 0001  
                              __Hrparam 0000                             _pdpIsActive 00FA  
             __end_of_reload_tmr5_pt25s 193C                                __Lrparam 0000  
                    __CFG_BOREN$SBORDIS 000000                       __CFG_P2BMX$PORTB5 000000  
                __size_of_setup_data_ok 0092                   ??_send_over_socket_ok 0020  
                           _currentChar 0039         md_uart_write_str_ok@currentChar 001E  
                              __ptext10 1492                                __ptext11 1922  
                              __ptext20 19A4                                __ptext12 1980  
                              __ptext13 198C                                __ptext14 1998  
                              __ptext15 18FE                                __ptext17 193C  
                              __ptext18 19BA                                __ptext19 13B6  
                              _lastChar 0038                                _md_state 00FC  
                 ??_send_md_cfg_cmds_ok 0020                           __size_of_main 0030  
                              _init_pic 183A             __end_ofi2_reload_tmr5_pt25s 1956  
                           _receivedERR 003C                                _tmr5_cnt 003F  
                            _RC1STAbits 000FAB         send_md_cfg_cmds_ok@queryVersion 00C5  
                              _timedOut 003A                  ??_md_uart_write_str_ok 001C  
                              int$flags 0042                _start_modem_send_process 18D0  
               __end_of_close_socket_ok 183A                       ??_enable_md_rxint 0016  
                            _INTCONbits 000FF2                  send_over_socket_ok@msg 00A9  
              md_uart_write_str_ok@data 0017                md_uart_write_str_ok@len1 0019  
                              intlevel2 0000                           _setup_data_ok 16B8  
                            _RCSTA1bits 000FAB                              _OSCCONbits 000FD3  
            __size_of_reload_tmr5_pt25s 001A                        md_uart_send@data 0016  
                         ?_disable_tmr5 0001             __size_of_check_mdstate_tmr5 00DC  
                     __CFG_T3CMX$PORTC0 000000                          ?_setup_data_ok 0001  
                     __CFG_FOSC$INTIO67 000000            __end_ofclose_socket_ok@F6874 1063  
          __end_ofclose_socket_ok@F6876 104C                        ??i2_disable_tmr5 0001  
