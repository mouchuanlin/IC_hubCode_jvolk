

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Sep 17 16:33:59 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F26K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     8                           	psect	idataBANK3,global,class=CODE,delta=1,noexec
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    18                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    19                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    20                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1,noexec
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    22                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	text0,global,reloc=2,class=CODE,delta=1
    24                           	psect	text1,global,reloc=2,class=CODE,delta=1
    25                           	psect	text2,global,reloc=2,class=CODE,delta=1
    26                           	psect	text3,global,reloc=2,class=CODE,delta=1
    27                           	psect	text4,global,reloc=2,class=CODE,delta=1
    28                           	psect	text5,global,reloc=2,class=CODE,delta=1
    29                           	psect	text6,global,reloc=2,class=CODE,delta=1
    30                           	psect	text7,global,reloc=2,class=CODE,delta=1
    31                           	psect	text8,global,reloc=2,class=CODE,delta=1
    32                           	psect	text9,global,reloc=2,class=CODE,delta=1
    33                           	psect	text10,global,reloc=2,class=CODE,delta=1
    34                           	psect	text11,global,reloc=2,class=CODE,delta=1
    35                           	psect	text12,global,reloc=2,class=CODE,delta=1
    36                           	psect	text13,global,reloc=2,class=CODE,delta=1
    37                           	psect	text14,global,reloc=2,class=CODE,delta=1
    38                           	psect	text15,global,reloc=2,class=CODE,delta=1
    39                           	psect	text16,global,reloc=2,class=CODE,delta=1
    40                           	psect	text17,global,reloc=2,class=CODE,delta=1
    41                           	psect	text18,global,reloc=2,class=CODE,delta=1
    42                           	psect	text19,global,reloc=2,class=CODE,delta=1
    43                           	psect	text20,global,reloc=2,class=CODE,delta=1
    44                           	psect	text21,global,reloc=2,class=CODE,delta=1
    45                           	psect	text22,global,reloc=2,class=CODE,delta=1
    46                           	psect	text23,global,reloc=2,class=CODE,delta=1
    47                           	psect	text24,global,reloc=2,class=CODE,delta=1
    48                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text27,global,reloc=2,class=CODE,delta=1
    51                           	psect	text28,global,reloc=2,class=CODE,delta=1
    52                           	psect	text29,global,reloc=2,class=CODE,delta=1
    53                           	psect	text30,global,reloc=2,class=CODE,delta=1
    54                           	psect	text31,global,reloc=2,class=CODE,delta=1
    55                           	psect	text32,global,reloc=2,class=CODE,delta=1
    56                           	psect	text33,global,reloc=2,class=CODE,delta=1
    57                           	psect	text34,global,reloc=2,class=CODE,delta=1
    58                           	psect	text35,global,reloc=2,class=CODE,delta=1
    59                           	psect	text36,global,reloc=2,class=CODE,delta=1
    60                           	psect	text37,global,reloc=2,class=CODE,delta=1
    61                           	psect	text38,global,reloc=2,class=CODE,delta=1
    62                           	psect	text39,global,reloc=2,class=CODE,delta=1
    63                           	psect	text40,global,reloc=2,class=CODE,delta=1
    64                           	psect	text41,global,reloc=2,class=CODE,delta=1
    65                           	psect	text42,global,reloc=2,class=CODE,delta=1
    66                           	psect	text43,global,reloc=2,class=CODE,delta=1
    67                           	psect	text44,global,reloc=2,class=CODE,delta=1
    68                           	psect	text45,global,reloc=2,class=CODE,delta=1
    69                           	psect	text46,global,reloc=2,class=CODE,delta=1
    70                           	psect	text47,global,reloc=2,class=CODE,delta=1
    71                           	psect	text48,global,reloc=2,class=CODE,delta=1
    72                           	psect	text49,global,reloc=2,class=CODE,delta=1
    73                           	psect	text50,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    75                           	psect	text52,global,reloc=2,class=CODE,delta=1
    76                           	psect	text53,global,reloc=2,class=CODE,delta=1
    77                           	psect	text54,global,reloc=2,class=CODE,delta=1
    78                           	psect	text55,global,reloc=2,class=CODE,delta=1
    79                           	psect	text56,global,reloc=2,class=CODE,delta=1
    80                           	psect	text57,global,reloc=2,class=CODE,delta=1
    81                           	psect	text58,global,reloc=2,class=CODE,delta=1
    82                           	psect	text59,global,reloc=2,class=CODE,delta=1
    83                           	psect	text60,global,reloc=2,class=CODE,delta=1
    84                           	psect	text61,global,reloc=2,class=CODE,delta=1
    85                           	psect	text62,global,reloc=2,class=CODE,delta=1
    86                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    87                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    88                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    89  0000                     
    90                           ; Version 1.45
    91                           ; Generated 16/11/2017 GMT
    92                           ; 
    93                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    94                           ; All rights reserved.
    95                           ; 
    96                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    97                           ; 
    98                           ; Redistribution and use in source and binary forms, with or without modification, are
    99                           ; permitted provided that the following conditions are met:
   100                           ; 
   101                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   102                           ;        conditions and the following disclaimer.
   103                           ; 
   104                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   105                           ;        of conditions and the following disclaimer in the documentation and/or other
   106                           ;        materials provided with the distribution.
   107                           ; 
   108                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   109                           ;        software without specific prior written permission.
   110                           ; 
   111                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   112                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   113                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   114                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   115                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   116                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   117                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   118                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   119                           ; 
   120                           ; 
   121                           ; Code-generator required, PIC18F26K22 Definitions
   122                           ; 
   123                           ; SFR Addresses
   124  0000                     
   125                           	psect	idataCOMRAM
   126  002472                     __pidataCOMRAM:
   127                           	opt stack 0
   128                           
   129                           ;initializer for read_sms@F6845
   130  002472  0D                 	db	13
   131  002473  0A                 	db	10
   132  002474  00                 	db	0
   133                           
   134                           ;initializer for _waiting
   135  002475  01                 	db	1
   136                           
   137                           ;initializer for _numUartRetries
   138  002476  0F                 	db	15
   139                           
   140                           	psect	idataBANK1
   141  0019C6                     __pidataBANK1:
   142                           	opt stack 0
   143                           
   144                           ;initializer for start_sms_ok@F6836
   145  0019C6  41                 	db	65
   146  0019C7  54                 	db	84
   147  0019C8  2B                 	db	43
   148  0019C9  43                 	db	67
   149  0019CA  4E                 	db	78
   150  0019CB  4D                 	db	77
   151  0019CC  49                 	db	73
   152  0019CD  3D                 	db	61
   153  0019CE  31                 	db	49
   154  0019CF  2C                 	db	44
   155  0019D0  31                 	db	49
   156  0019D1  0D                 	db	13
   157  0019D2  0A                 	db	10
   158  0019D3  00                 	db	0
   159                           
   160                           ;initializer for startup_ok@F6848
   161  0019D4  41                 	db	65
   162  0019D5  54                 	db	84
   163  0019D6  2B                 	db	43
   164  0019D7  43                 	db	67
   165  0019D8  45                 	db	69
   166  0019D9  52                 	db	82
   167  0019DA  45                 	db	69
   168  0019DB  47                 	db	71
   169  0019DC  3F                 	db	63
   170  0019DD  0D                 	db	13
   171  0019DE  0A                 	db	10
   172  0019DF  00                 	db	0
   173                           
   174                           ;initializer for startup_ok@F6840
   175  0019E0  41                 	db	65
   176  0019E1  54                 	db	84
   177  0019E2  23                 	db	35
   178  0019E3  53                 	db	83
   179  0019E4  4C                 	db	76
   180  0019E5  45                 	db	69
   181  0019E6  44                 	db	68
   182  0019E7  3D                 	db	61
   183  0019E8  34                 	db	52
   184  0019E9  0D                 	db	13
   185  0019EA  0A                 	db	10
   186  0019EB  00                 	db	0
   187                           
   188                           ;initializer for startup_ok@F6834
   189  0019EC  41                 	db	65
   190  0019ED  54                 	db	84
   191  0019EE  2B                 	db	43
   192  0019EF  43                 	db	67
   193  0019F0  4D                 	db	77
   194  0019F1  45                 	db	69
   195  0019F2  45                 	db	69
   196  0019F3  3D                 	db	61
   197  0019F4  32                 	db	50
   198  0019F5  0D                 	db	13
   199  0019F6  0A                 	db	10
   200  0019F7  00                 	db	0
   201                           
   202                           ;initializer for start_sms_ok@F6832
   203  0019F8  41                 	db	65
   204  0019F9  54                 	db	84
   205  0019FA  2B                 	db	43
   206  0019FB  43                 	db	67
   207  0019FC  4D                 	db	77
   208  0019FD  47                 	db	71
   209  0019FE  46                 	db	70
   210  0019FF  3D                 	db	61
   211  001A00  31                 	db	49
   212  001A01  0D                 	db	13
   213  001A02  0A                 	db	10
   214  001A03  00                 	db	0
   215                           
   216                           ;initializer for startup_ok@F6850
   217  001A04  41                 	db	65
   218  001A05  54                 	db	84
   219  001A06  23                 	db	35
   220  001A07  47                 	db	71
   221  001A08  50                 	db	80
   222  001A09  52                 	db	82
   223  001A0A  53                 	db	83
   224  001A0B  3F                 	db	63
   225  001A0C  0D                 	db	13
   226  001A0D  0A                 	db	10
   227  001A0E  00                 	db	0
   228                           
   229                           ;initializer for startup_ok@F6846
   230  001A0F  41                 	db	65
   231  001A10  54                 	db	84
   232  001A11  2B                 	db	43
   233  001A12  43                 	db	67
   234  001A13  52                 	db	82
   235  001A14  45                 	db	69
   236  001A15  47                 	db	71
   237  001A16  3F                 	db	63
   238  001A17  0D                 	db	13
   239  001A18  0A                 	db	10
   240  001A19  00                 	db	0
   241                           
   242                           ;initializer for startup_ok@F6844
   243  001A1A  41                 	db	65
   244  001A1B  54                 	db	84
   245  001A1C  2B                 	db	43
   246  001A1D  43                 	db	67
   247  001A1E  50                 	db	80
   248  001A1F  49                 	db	73
   249  001A20  4E                 	db	78
   250  001A21  3F                 	db	63
   251  001A22  0D                 	db	13
   252  001A23  0A                 	db	10
   253  001A24  00                 	db	0
   254                           
   255                           ;initializer for startup_ok@F6842
   256  001A25  41                 	db	65
   257  001A26  54                 	db	84
   258  001A27  23                 	db	35
   259  001A28  43                 	db	67
   260  001A29  47                 	db	71
   261  001A2A  4D                 	db	77
   262  001A2B  52                 	db	82
   263  001A2C  0D                 	db	13
   264  001A2D  0A                 	db	10
   265  001A2E  00                 	db	0
   266                           
   267                           ;initializer for parse_cereg_ok@F6846
   268  001A2F  2B                 	db	43
   269  001A30  43                 	db	67
   270  001A31  45                 	db	69
   271  001A32  52                 	db	82
   272  001A33  45                 	db	69
   273  001A34  47                 	db	71
   274  001A35  3A                 	db	58
   275  001A36  20                 	db	32
   276  001A37  00                 	db	0
   277                           
   278                           ;initializer for startup_ok@F6852
   279  001A38  41                 	db	65
   280  001A39  54                 	db	84
   281  001A3A  2B                 	db	43
   282  001A3B  43                 	db	67
   283  001A3C  53                 	db	83
   284  001A3D  51                 	db	81
   285  001A3E  0D                 	db	13
   286  001A3F  0A                 	db	10
   287  001A40  00                 	db	0
   288                           
   289                           ;initializer for send_sms_ok@F6905
   290  001A41  41                 	db	65
   291  001A42  54                 	db	84
   292  001A43  2B                 	db	43
   293  001A44  43                 	db	67
   294  001A45  4D                 	db	77
   295  001A46  47                 	db	71
   296  001A47  53                 	db	83
   297  001A48  3D                 	db	61
   298  001A49  00                 	db	0
   299                           
   300                           ;initializer for read_sms@F6847
   301  001A4A  41                 	db	65
   302  001A4B  54                 	db	84
   303  001A4C  2B                 	db	43
   304  001A4D  43                 	db	67
   305  001A4E  4D                 	db	77
   306  001A4F  47                 	db	71
   307  001A50  44                 	db	68
   308  001A51  3D                 	db	61
   309  001A52  00                 	db	0
   310                           
   311                           ;initializer for read_sms@F6843
   312  001A53  41                 	db	65
   313  001A54  54                 	db	84
   314  001A55  2B                 	db	43
   315  001A56  43                 	db	67
   316  001A57  4D                 	db	77
   317  001A58  47                 	db	71
   318  001A59  52                 	db	82
   319  001A5A  3D                 	db	61
   320  001A5B  00                 	db	0
   321                           
   322                           ;initializer for parse_creg_ok@F6836
   323  001A5C  2B                 	db	43
   324  001A5D  43                 	db	67
   325  001A5E  52                 	db	82
   326  001A5F  45                 	db	69
   327  001A60  47                 	db	71
   328  001A61  3A                 	db	58
   329  001A62  20                 	db	32
   330  001A63  00                 	db	0
   331                           
   332                           ;initializer for parse_cmgr@F6863
   333  001A64  2B                 	db	43
   334  001A65  43                 	db	67
   335  001A66  4D                 	db	77
   336  001A67  47                 	db	71
   337  001A68  52                 	db	82
   338  001A69  3A                 	db	58
   339  001A6A  20                 	db	32
   340  001A6B  00                 	db	0
   341                           
   342                           ;initializer for parse_csq_ok@F6857
   343  001A6C  2B                 	db	43
   344  001A6D  43                 	db	67
   345  001A6E  53                 	db	83
   346  001A6F  51                 	db	81
   347  001A70  3A                 	db	58
   348  001A71  20                 	db	32
   349  001A72  00                 	db	0
   350                           
   351                           ;initializer for startup_ok@F6832
   352  001A73  41                 	db	65
   353  001A74  54                 	db	84
   354  001A75  45                 	db	69
   355  001A76  31                 	db	49
   356  001A77  0D                 	db	13
   357  001A78  0A                 	db	10
   358  001A79  00                 	db	0
   359                           
   360                           ;initializer for startup_ok@F6830
   361  001A7A  41                 	db	65
   362  001A7B  54                 	db	84
   363  001A7C  0D                 	db	13
   364  001A7D  0A                 	db	10
   365  001A7E  00                 	db	0
   366                           
   367                           ;initializer for parse_cmgl@F6856
   368  001A7F  52                 	db	82
   369  001A80  45                 	db	69
   370  001A81  43                 	db	67
   371  001A82  20                 	db	32
   372  001A83  00                 	db	0
   373                           
   374                           ;initializer for send_sms_ok@F6907
   375  001A84  0D                 	db	13
   376  001A85  0A                 	db	10
   377  001A86  00                 	db	0
   378                           
   379                           	psect	idataBANK2
   380  002186                     __pidataBANK2:
   381                           	opt stack 0
   382                           
   383                           ;initializer for startup_ok@F6838
   384  002186  41                 	db	65
   385  002187  54                 	db	84
   386  002188  23                 	db	35
   387  002189  47                 	db	71
   388  00218A  50                 	db	80
   389  00218B  49                 	db	73
   390  00218C  4F                 	db	79
   391  00218D  3D                 	db	61
   392  00218E  37                 	db	55
   393  00218F  2C                 	db	44
   394  002190  30                 	db	48
   395  002191  2C                 	db	44
   396  002192  32                 	db	50
   397  002193  0D                 	db	13
   398  002194  0A                 	db	10
   399  002195  00                 	db	0
   400                           
   401                           ;initializer for startup_ok@F6836
   402  002196  41                 	db	65
   403  002197  54                 	db	84
   404  002198  2B                 	db	43
   405  002199  49                 	db	73
   406  00219A  50                 	db	80
   407  00219B  52                 	db	82
   408  00219C  3D                 	db	61
   409  00219D  31                 	db	49
   410  00219E  31                 	db	49
   411  00219F  35                 	db	53
   412  0021A0  32                 	db	50
   413  0021A1  30                 	db	48
   414  0021A2  30                 	db	48
   415  0021A3  0D                 	db	13
   416  0021A4  0A                 	db	10
   417  0021A5  00                 	db	0
   418                           
   419                           ;initializer for read_sms@F6841
   420  0021A6  41                 	db	65
   421  0021A7  54                 	db	84
   422  0021A8  2B                 	db	43
   423  0021A9  43                 	db	67
   424  0021AA  4D                 	db	77
   425  0021AB  47                 	db	71
   426  0021AC  4C                 	db	76
   427  0021AD  3D                 	db	61
   428  0021AE  22                 	db	34
   429  0021AF  41                 	db	65
   430  0021B0  4C                 	db	76
   431  0021B1  4C                 	db	76
   432  0021B2  22                 	db	34
   433  0021B3  0D                 	db	13
   434  0021B4  0A                 	db	10
   435  0021B5  00                 	db	0
   436                           
   437                           	psect	idataBANK3
   438  002394                     __pidataBANK3:
   439                           	opt stack 0
   440                           
   441                           ;initializer for start_sms_ok@F6834
   442  002394  41                 	db	65
   443  002395  54                 	db	84
   444  002396  2B                 	db	43
   445  002397  43                 	db	67
   446  002398  50                 	db	80
   447  002399  4D                 	db	77
   448  00239A  53                 	db	83
   449  00239B  3D                 	db	61
   450  00239C  22                 	db	34
   451  00239D  4D                 	db	77
   452  00239E  45                 	db	69
   453  00239F  22                 	db	34
   454  0023A0  2C                 	db	44
   455  0023A1  22                 	db	34
   456  0023A2  4D                 	db	77
   457  0023A3  45                 	db	69
   458  0023A4  22                 	db	34
   459  0023A5  2C                 	db	44
   460  0023A6  22                 	db	34
   461  0023A7  4D                 	db	77
   462  0023A8  45                 	db	69
   463  0023A9  22                 	db	34
   464  0023AA  0D                 	db	13
   465  0023AB  0A                 	db	10
   466  0023AC  00                 	db	0
   467                           
   468                           	psect	nvBANK0
   469  0000CA                     __pnvBANK0:
   470                           	opt stack 0
   471  0000CA                     _idEndPtr:
   472                           	opt stack 0
   473  0000CA                     	ds	1
   474  0000                     _T4CONbits	set	3921
   475  0000                     _T5CONbits	set	3918
   476  0000                     _TMR5L	set	3919
   477  0000                     _TMR5H	set	3920
   478  0000                     _T5CON	set	3918
   479  0000                     _ANSELC	set	3898
   480  0000                     _ANSELB	set	3897
   481  0000                     _ANSELA	set	3896
   482  0000                     _TX2REG	set	3955
   483  0000                     _TX1REG	set	4013
   484  0000                     _TXSTA2bits	set	3954
   485  0000                     _RCSTA2bits	set	3953
   486  0000                     _PIR1bits	set	3998
   487  0000                     _RCSTA1bits	set	4011
   488  0000                     _TRISCbits	set	3988
   489  0000                     _RC1STAbits	set	4011
   490  0000                     _SPBRG1	set	4015
   491  0000                     _SPBRGH1	set	4016
   492  0000                     _TXSTA1bits	set	4012
   493  0000                     _BAUDCONbits	set	4024
   494  0000                     _BAUDCON1bits	set	4024
   495  0000                     _SPBRGH2	set	3958
   496  0000                     _SPBRG2	set	3957
   497  0000                     _BAUDCON2	set	3952
   498  0000                     _RC2STA	set	3953
   499  0000                     _TX2STA	set	3954
   500  0000                     _TRISBbits	set	3987
   501  0000                     _EECON2	set	4007
   502  0000                     _EEDATA	set	4008
   503  0000                     _EEADR	set	4009
   504  0000                     _EEADRH	set	4010
   505  0000                     _T2CONbits	set	4026
   506  0000                     _TMR3L	set	4018
   507  0000                     _TMR3H	set	4019
   508  0000                     _PIR2bits	set	4001
   509  0000                     _PIE2bits	set	4000
   510  0000                     _T3CONbits	set	4017
   511  0000                     _PIR5bits	set	3966
   512  0000                     _PIE5bits	set	3965
   513  0000                     _PORTBbits	set	3969
   514  0000                     _LATAbits	set	3977
   515  0000                     _TMR0L	set	4054
   516  0000                     _TMR0H	set	4055
   517  0000                     _T0CON	set	4053
   518  0000                     _TRISC	set	3988
   519  0000                     _TRISB	set	3987
   520  0000                     _TRISA	set	3986
   521  0000                     _OSCCONbits	set	4051
   522  0000                     _RC1REG	set	4014
   523  0000                     _PIE1bits	set	3997
   524  0000                     _RC2REG	set	3956
   525  0000                     _PIE3bits	set	4003
   526  0000                     _PIR3bits	set	4004
   527  0000                     _INTCONbits	set	4082
   528  0000                     _IOCBbits	set	3938
   529  0000                     _TRMT2	set	31633
   530  0000                     _TRMT1	set	32097
   531  0000                     _RC1IE	set	31981
   532  0000                     _LATC7	set	31839
   533  0000                     _CREN1	set	32092
   534  0000                     _RC2IE	set	32029
   535  0000                     _WPUB5	set	31501
   536  0000                     _WR	set	32049
   537  0000                     _WREN	set	32050
   538  0000                     _RD	set	32048
   539  0000                     _EEPGD	set	32055
   540  0000                     _CFGS	set	32054
   541  0000                     _GIE	set	32663
   542  0000                     _TMR0IE	set	32661
   543  0000                     _LATB3	set	31827
   544  0000                     _LATC4	set	31836
   545  0000                     _TMR3IF	set	32009
   546  0000                     _TMR0IF	set	32658
   547  0000                     _TMR5IF	set	31729
   548  0000                     _RC1IF	set	31989
   549                           
   550                           ; #config settings
   551  0000                     
   552                           	psect	cinit
   553  001836                     __pcinit:
   554                           	opt stack 0
   555  001836                     start_initialization:
   556                           	opt stack 0
   557  001836                     __initialization:
   558                           	opt stack 0
   559                           
   560                           ; Initialize objects allocated to BANK3 (25 bytes)
   561                           ; load TBLPTR registers with __pidataBANK3
   562  001836  0E94               	movlw	low __pidataBANK3
   563  001838  6EF6               	movwf	tblptrl,c
   564  00183A  0E23               	movlw	high __pidataBANK3
   565  00183C  6EF7               	movwf	tblptrh,c
   566  00183E  0E00               	movlw	low (__pidataBANK3 shr (0+16))
   567  001840  6EF8               	movwf	tblptru,c
   568  001842  EE03  F07C         	lfsr	0,__pdataBANK3
   569  001846  EE10 F019          	lfsr	1,25
   570  00184A                     copy_data0:
   571  00184A  0009               	tblrd		*+
   572  00184C  CFF5 FFEE          	movff	tablat,postinc0
   573  001850  50E5               	movf	postdec1,w,c
   574  001852  50E1               	movf	fsr1l,w,c
   575  001854  E1FA               	bnz	copy_data0
   576                           
   577                           ; Initialize objects allocated to BANK2 (48 bytes)
   578                           ; load TBLPTR registers with __pidataBANK2
   579  001856  0E86               	movlw	low __pidataBANK2
   580  001858  6EF6               	movwf	tblptrl,c
   581  00185A  0E21               	movlw	high __pidataBANK2
   582  00185C  6EF7               	movwf	tblptrh,c
   583  00185E  0E00               	movlw	low (__pidataBANK2 shr (0+16))
   584  001860  6EF8               	movwf	tblptru,c
   585  001862  EE02  F0C8         	lfsr	0,__pdataBANK2
   586  001866  EE10 F030          	lfsr	1,48
   587  00186A                     copy_data1:
   588  00186A  0009               	tblrd		*+
   589  00186C  CFF5 FFEE          	movff	tablat,postinc0
   590  001870  50E5               	movf	postdec1,w,c
   591  001872  50E1               	movf	fsr1l,w,c
   592  001874  E1FA               	bnz	copy_data1
   593                           
   594                           ; Initialize objects allocated to BANK1 (193 bytes)
   595                           ; load TBLPTR registers with __pidataBANK1
   596  001876  0EC6               	movlw	low __pidataBANK1
   597  001878  6EF6               	movwf	tblptrl,c
   598  00187A  0E19               	movlw	high __pidataBANK1
   599  00187C  6EF7               	movwf	tblptrh,c
   600  00187E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   601  001880  6EF8               	movwf	tblptru,c
   602  001882  EE01  F000         	lfsr	0,__pdataBANK1
   603  001886  EE10 F0C1          	lfsr	1,193
   604  00188A                     copy_data2:
   605  00188A  0009               	tblrd		*+
   606  00188C  CFF5 FFEE          	movff	tablat,postinc0
   607  001890  50E5               	movf	postdec1,w,c
   608  001892  50E1               	movf	fsr1l,w,c
   609  001894  E1FA               	bnz	copy_data2
   610                           
   611                           ; Initialize objects allocated to COMRAM (5 bytes)
   612                           ; load TBLPTR registers with __pidataCOMRAM
   613  001896  0E72               	movlw	low __pidataCOMRAM
   614  001898  6EF6               	movwf	tblptrl,c
   615  00189A  0E24               	movlw	high __pidataCOMRAM
   616  00189C  6EF7               	movwf	tblptrh,c
   617  00189E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   618  0018A0  6EF8               	movwf	tblptru,c
   619  0018A2  EE00  F040         	lfsr	0,__pdataCOMRAM
   620  0018A6  EE10 F005          	lfsr	1,5
   621  0018AA                     copy_data3:
   622  0018AA  0009               	tblrd		*+
   623  0018AC  CFF5 FFEE          	movff	tablat,postinc0
   624  0018B0  50E5               	movf	postdec1,w,c
   625  0018B2  50E1               	movf	fsr1l,w,c
   626  0018B4  E1FA               	bnz	copy_data3
   627                           
   628                           ; Clear objects allocated to BANK3 (124 bytes)
   629  0018B6  EE03  F000         	lfsr	0,__pbssBANK3
   630  0018BA  0E7C               	movlw	124
   631  0018BC                     clear_0:
   632  0018BC  6AEE               	clrf	postinc0,c
   633  0018BE  06E8               	decf	wreg,f,c
   634  0018C0  E1FD               	bnz	clear_0
   635                           
   636                           ; Clear objects allocated to BANK2 (200 bytes)
   637  0018C2  EE02  F000         	lfsr	0,__pbssBANK2
   638  0018C6  0EC8               	movlw	200
   639  0018C8                     clear_1:
   640  0018C8  6AEE               	clrf	postinc0,c
   641  0018CA  06E8               	decf	wreg,f,c
   642  0018CC  E1FD               	bnz	clear_1
   643                           
   644                           ; Clear objects allocated to BANK1 (49 bytes)
   645  0018CE  EE01  F0C1         	lfsr	0,__pbssBANK1
   646  0018D2  0E31               	movlw	49
   647  0018D4                     clear_2:
   648  0018D4  6AEE               	clrf	postinc0,c
   649  0018D6  06E8               	decf	wreg,f,c
   650  0018D8  E1FD               	bnz	clear_2
   651                           
   652                           ; Clear objects allocated to BANK0 (25 bytes)
   653  0018DA  EE00  F0B1         	lfsr	0,__pbssBANK0
   654  0018DE  0E19               	movlw	25
   655  0018E0                     clear_3:
   656  0018E0  6AEE               	clrf	postinc0,c
   657  0018E2  06E8               	decf	wreg,f,c
   658  0018E4  E1FD               	bnz	clear_3
   659                           
   660                           ; Clear objects allocated to COMRAM (35 bytes)
   661  0018E6  EE00  F001         	lfsr	0,__pbssCOMRAM
   662  0018EA  0E23               	movlw	35
   663  0018EC                     clear_4:
   664  0018EC  6AEE               	clrf	postinc0,c
   665  0018EE  06E8               	decf	wreg,f,c
   666  0018F0  E1FD               	bnz	clear_4
   667  0018F2                     end_of_initialization:
   668                           	opt stack 0
   669  0018F2                     __end_of__initialization:
   670                           	opt stack 0
   671  0018F2  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   672  0018F4  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   673  0018F6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   674  0018F8  6EF8               	movwf	tblptru,c
   675  0018FA  0100               	movlb	0
   676  0018FC  EF86  F010         	goto	_main	;jump to C main() function
   677                           tblptru	equ	0xFF8
   678                           tblptrh	equ	0xFF7
   679                           tblptrl	equ	0xFF6
   680                           tablat	equ	0xFF5
   681                           postinc0	equ	0xFEE
   682                           wreg	equ	0xFE8
   683                           postdec1	equ	0xFE5
   684                           fsr1l	equ	0xFE1
   685                           
   686                           	psect	bssCOMRAM
   687  000001                     __pbssCOMRAM:
   688                           	opt stack 0
   689  000001                     _buttonStillPressed:
   690                           	opt stack 0
   691  000001                     	ds	1
   692  000002                     _queue_end_ptr:
   693                           	opt stack 0
   694  000002                     	ds	1
   695  000003                     _endPtr:
   696                           	opt stack 0
   697  000003                     	ds	1
   698  000004                     _md_timeout_cnt:
   699                           	opt stack 0
   700  000004                     	ds	1
   701  000005                     _waiting_carrot:
   702                           	opt stack 0
   703  000005                     	ds	1
   704  000006                     _waiting_uart:
   705                           	opt stack 0
   706  000006                     	ds	1
   707  000007                     _timedOut:
   708                           	opt stack 0
   709  000007                     	ds	1
   710  000008                     _receivedRESP:
   711                           	opt stack 0
   712  000008                     	ds	1
   713  000009                     _receivedERR:
   714                           	opt stack 0
   715  000009                     	ds	1
   716  00000A                     _receivedOK:
   717                           	opt stack 0
   718  00000A                     	ds	1
   719  00000B                     _modem_retrying:
   720                           	opt stack 0
   721  00000B                     	ds	1
   722  00000C                     _modem_network_err:
   723                           	opt stack 0
   724  00000C                     	ds	1
   725  00000D                     _modem_ready_data:
   726                           	opt stack 0
   727  00000D                     	ds	1
   728  00000E                     _md_timer_up:
   729                           	opt stack 0
   730  00000E                     	ds	1
   731  00000F                     _MD_STATE:
   732                           	opt stack 0
   733  00000F                     	ds	1
   734  000010                     _SMS_TMR_STATE:
   735                           	opt stack 0
   736  000010                     	ds	1
   737  000011                     _tmr3_cnt:
   738                           	opt stack 0
   739  000011                     	ds	1
   740  000012                     _bled_tmr0_tick:
   741                           	opt stack 0
   742  000012                     	ds	1
   743  000013                     _gled_tmr0_tick:
   744                           	opt stack 0
   745  000013                     	ds	1
   746  000014                     _buttonPressCount:
   747                           	opt stack 0
   748  000014                     	ds	1
   749  000015                     _inButtonMenu:
   750                           	opt stack 0
   751  000015                     	ds	1
   752  000016                     _currentChar:
   753                           	opt stack 0
   754  000016                     	ds	1
   755  000017                     _t2_tick:
   756                           	opt stack 0
   757  000017                     	ds	1
   758  000018                     _sms_tmr_tick:
   759                           	opt stack 0
   760  000018                     	ds	1
   761  000019                     _test_count:
   762                           	opt stack 0
   763  000019                     	ds	1
   764  00001A                     _rx2pos:
   765                           	opt stack 0
   766  00001A                     	ds	1
   767  00001B                     _tmr5_cnt:
   768                           	opt stack 0
   769  00001B                     	ds	1
   770  00001C                     _ledPatternCount:
   771                           	opt stack 0
   772  00001C                     	ds	1
   773  00001D                     _ledPattern:
   774                           	opt stack 0
   775  00001D                     	ds	1
   776  00001E                     _STATE:
   777                           	opt stack 0
   778  00001E                     	ds	1
   779  00001F                     _rx2_buf:
   780                           	opt stack 0
   781  00001F                     	ds	5
   782                           tblptru	equ	0xFF8
   783                           tblptrh	equ	0xFF7
   784                           tblptrl	equ	0xFF6
   785                           tablat	equ	0xFF5
   786                           postinc0	equ	0xFEE
   787                           wreg	equ	0xFE8
   788                           postdec1	equ	0xFE5
   789                           fsr1l	equ	0xFE1
   790                           
   791                           	psect	dataCOMRAM
   792  000040                     __pdataCOMRAM:
   793                           	opt stack 0
   794  000040                     read_sms@F6845:
   795                           	opt stack 0
   796  000040                     	ds	3
   797  000043                     _waiting:
   798                           	opt stack 0
   799  000043                     	ds	1
   800  000044                     _numUartRetries:
   801                           	opt stack 0
   802  000044                     	ds	1
   803                           tblptru	equ	0xFF8
   804                           tblptrh	equ	0xFF7
   805                           tblptrl	equ	0xFF6
   806                           tablat	equ	0xFF5
   807                           postinc0	equ	0xFEE
   808                           wreg	equ	0xFE8
   809                           postdec1	equ	0xFE5
   810                           fsr1l	equ	0xFE1
   811                           
   812                           	psect	bssBANK0
   813  0000B1                     __pbssBANK0:
   814                           	opt stack 0
   815  0000B1                     _t4_tick:
   816                           	opt stack 0
   817  0000B1                     	ds	2
   818  0000B3                     _ph_num_index:
   819                           	opt stack 0
   820  0000B3                     	ds	1
   821  0000B4                     _retryCnt:
   822                           	opt stack 0
   823  0000B4                     	ds	1
   824  0000B5                     _at12:
   825                           	opt stack 0
   826  0000B5                     	ds	1
   827  0000B6                     _at11:
   828                           	opt stack 0
   829  0000B6                     	ds	1
   830  0000B7                     _at10:
   831                           	opt stack 0
   832  0000B7                     	ds	1
   833  0000B8                     _at9:
   834                           	opt stack 0
   835  0000B8                     	ds	1
   836  0000B9                     _at8:
   837                           	opt stack 0
   838  0000B9                     	ds	1
   839  0000BA                     _at7:
   840                           	opt stack 0
   841  0000BA                     	ds	1
   842  0000BB                     _at6:
   843                           	opt stack 0
   844  0000BB                     	ds	1
   845  0000BC                     _at5:
   846                           	opt stack 0
   847  0000BC                     	ds	1
   848  0000BD                     _at4:
   849                           	opt stack 0
   850  0000BD                     	ds	1
   851  0000BE                     _at3:
   852                           	opt stack 0
   853  0000BE                     	ds	1
   854  0000BF                     _at2:
   855                           	opt stack 0
   856  0000BF                     	ds	1
   857  0000C0                     _at1:
   858                           	opt stack 0
   859  0000C0                     	ds	1
   860  0000C1                     _modem_ready_sms:
   861                           	opt stack 0
   862  0000C1                     	ds	1
   863  0000C2                     _modem_awake:
   864                           	opt stack 0
   865  0000C2                     	ds	1
   866  0000C3                     _smsMsgIndex:
   867                           	opt stack 0
   868  0000C3                     	ds	1
   869  0000C4                     _ready_to_read_text:
   870                           	opt stack 0
   871  0000C4                     	ds	1
   872  0000C5                     _sms_err_ready:
   873                           	opt stack 0
   874  0000C5                     	ds	1
   875  0000C6                     _sms_echo_ready:
   876                           	opt stack 0
   877  0000C6                     	ds	1
   878  0000C7                     _receivedSensor:
   879                           	opt stack 0
   880  0000C7                     	ds	1
   881  0000C8                     _sms_timer_ready:
   882                           	opt stack 0
   883  0000C8                     	ds	1
   884  0000C9                     _PREV_STATE:
   885                           	opt stack 0
   886  0000C9                     	ds	1
   887                           tblptru	equ	0xFF8
   888                           tblptrh	equ	0xFF7
   889                           tblptrl	equ	0xFF6
   890                           tablat	equ	0xFF5
   891                           postinc0	equ	0xFEE
   892                           wreg	equ	0xFE8
   893                           postdec1	equ	0xFE5
   894                           fsr1l	equ	0xFE1
   895                           
   896                           	psect	bssBANK1
   897  0001C1                     __pbssBANK1:
   898                           	opt stack 0
   899  0001C1                     _event_queue:
   900                           	opt stack 0
   901  0001C1                     	ds	40
   902  0001E9                     _ph_num:
   903                           	opt stack 0
   904  0001E9                     	ds	9
   905                           tblptru	equ	0xFF8
   906                           tblptrh	equ	0xFF7
   907                           tblptrl	equ	0xFF6
   908                           tablat	equ	0xFF5
   909                           postinc0	equ	0xFEE
   910                           wreg	equ	0xFE8
   911                           postdec1	equ	0xFE5
   912                           fsr1l	equ	0xFE1
   913                           
   914                           	psect	dataBANK1
   915  000100                     __pdataBANK1:
   916                           	opt stack 0
   917  000100                     start_sms_ok@F6836:
   918                           	opt stack 0
   919  000100                     	ds	14
   920  00010E                     startup_ok@F6848:
   921                           	opt stack 0
   922  00010E                     	ds	12
   923  00011A                     startup_ok@F6840:
   924                           	opt stack 0
   925  00011A                     	ds	12
   926  000126                     startup_ok@F6834:
   927                           	opt stack 0
   928  000126                     	ds	12
   929  000132                     start_sms_ok@F6832:
   930                           	opt stack 0
   931  000132                     	ds	12
   932  00013E                     startup_ok@F6850:
   933                           	opt stack 0
   934  00013E                     	ds	11
   935  000149                     startup_ok@F6846:
   936                           	opt stack 0
   937  000149                     	ds	11
   938  000154                     startup_ok@F6844:
   939                           	opt stack 0
   940  000154                     	ds	11
   941  00015F                     startup_ok@F6842:
   942                           	opt stack 0
   943  00015F                     	ds	10
   944  000169                     parse_cereg_ok@F6846:
   945                           	opt stack 0
   946  000169                     	ds	9
   947  000172                     startup_ok@F6852:
   948                           	opt stack 0
   949  000172                     	ds	9
   950  00017B                     send_sms_ok@F6905:
   951                           	opt stack 0
   952  00017B                     	ds	9
   953  000184                     read_sms@F6847:
   954                           	opt stack 0
   955  000184                     	ds	9
   956  00018D                     read_sms@F6843:
   957                           	opt stack 0
   958  00018D                     	ds	9
   959  000196                     parse_creg_ok@F6836:
   960                           	opt stack 0
   961  000196                     	ds	8
   962  00019E                     parse_cmgr@F6863:
   963                           	opt stack 0
   964  00019E                     	ds	8
   965  0001A6                     parse_csq_ok@F6857:
   966                           	opt stack 0
   967  0001A6                     	ds	7
   968  0001AD                     startup_ok@F6832:
   969                           	opt stack 0
   970  0001AD                     	ds	7
   971  0001B4                     startup_ok@F6830:
   972                           	opt stack 0
   973  0001B4                     	ds	5
   974  0001B9                     parse_cmgl@F6856:
   975                           	opt stack 0
   976  0001B9                     	ds	5
   977  0001BE                     send_sms_ok@F6907:
   978                           	opt stack 0
   979  0001BE                     	ds	3
   980                           tblptru	equ	0xFF8
   981                           tblptrh	equ	0xFF7
   982                           tblptrl	equ	0xFF6
   983                           tablat	equ	0xFF5
   984                           postinc0	equ	0xFEE
   985                           wreg	equ	0xFE8
   986                           postdec1	equ	0xFE5
   987                           fsr1l	equ	0xFE1
   988                           
   989                           	psect	bssBANK2
   990  000200                     __pbssBANK2:
   991                           	opt stack 0
   992  000200                     _mdRxBuf:
   993                           	opt stack 0
   994  000200                     	ds	160
   995  0002A0                     _sms_buf:
   996                           	opt stack 0
   997  0002A0                     	ds	40
   998                           tblptru	equ	0xFF8
   999                           tblptrh	equ	0xFF7
  1000                           tblptrl	equ	0xFF6
  1001                           tablat	equ	0xFF5
  1002                           postinc0	equ	0xFEE
  1003                           wreg	equ	0xFE8
  1004                           postdec1	equ	0xFE5
  1005                           fsr1l	equ	0xFE1
  1006                           
  1007                           	psect	dataBANK2
  1008  0002C8                     __pdataBANK2:
  1009                           	opt stack 0
  1010  0002C8                     startup_ok@F6838:
  1011                           	opt stack 0
  1012  0002C8                     	ds	16
  1013  0002D8                     startup_ok@F6836:
  1014                           	opt stack 0
  1015  0002D8                     	ds	16
  1016  0002E8                     read_sms@F6841:
  1017                           	opt stack 0
  1018  0002E8                     	ds	16
  1019                           tblptru	equ	0xFF8
  1020                           tblptrh	equ	0xFF7
  1021                           tblptrl	equ	0xFF6
  1022                           tablat	equ	0xFF5
  1023                           postinc0	equ	0xFEE
  1024                           wreg	equ	0xFE8
  1025                           postdec1	equ	0xFE5
  1026                           fsr1l	equ	0xFE1
  1027                           
  1028                           	psect	bssBANK3
  1029  000300                     __pbssBANK3:
  1030                           	opt stack 0
  1031  000300                     _ID:
  1032                           	opt stack 0
  1033  000300                     	ds	64
  1034  000340                     _referenceBuf:
  1035                           	opt stack 0
  1036  000340                     	ds	60
  1037                           tblptru	equ	0xFF8
  1038                           tblptrh	equ	0xFF7
  1039                           tblptrl	equ	0xFF6
  1040                           tablat	equ	0xFF5
  1041                           postinc0	equ	0xFEE
  1042                           wreg	equ	0xFE8
  1043                           postdec1	equ	0xFE5
  1044                           fsr1l	equ	0xFE1
  1045                           
  1046                           	psect	dataBANK3
  1047  00037C                     __pdataBANK3:
  1048                           	opt stack 0
  1049  00037C                     start_sms_ok@F6834:
  1050                           	opt stack 0
  1051  00037C                     	ds	25
  1052                           tblptru	equ	0xFF8
  1053                           tblptrh	equ	0xFF7
  1054                           tblptrl	equ	0xFF6
  1055                           tablat	equ	0xFF5
  1056                           postinc0	equ	0xFEE
  1057                           wreg	equ	0xFE8
  1058                           postdec1	equ	0xFE5
  1059                           fsr1l	equ	0xFE1
  1060                           
  1061                           	psect	cstackBANK4
  1062  000400                     __pcstackBANK4:
  1063                           	opt stack 0
  1064  000400                     startup_ok@gprs:
  1065                           	opt stack 0
  1066                           
  1067                           ; 11 bytes @ 0x0
  1068  000400                     	ds	11
  1069  00040B                     startup_ok@baud:
  1070                           	opt stack 0
  1071                           
  1072                           ; 16 bytes @ 0xB
  1073  00040B                     	ds	16
  1074  00041B                     startup_ok@ledCfg:
  1075                           	opt stack 0
  1076                           
  1077                           ; 16 bytes @ 0x1B
  1078  00041B                     	ds	16
  1079  00042B                     startup_ok@cmee:
  1080                           	opt stack 0
  1081                           
  1082                           ; 12 bytes @ 0x2B
  1083  00042B                     	ds	12
  1084  000437                     startup_ok@ledpattern:
  1085                           	opt stack 0
  1086                           
  1087                           ; 12 bytes @ 0x37
  1088  000437                     	ds	12
  1089  000443                     startup_ok@cereg:
  1090                           	opt stack 0
  1091                           
  1092                           ; 12 bytes @ 0x43
  1093  000443                     	ds	12
  1094  00044F                     startup_ok@cpin:
  1095                           	opt stack 0
  1096                           
  1097                           ; 11 bytes @ 0x4F
  1098  00044F                     	ds	11
  1099  00045A                     startup_ok@creg:
  1100                           	opt stack 0
  1101                           
  1102                           ; 11 bytes @ 0x5A
  1103  00045A                     	ds	11
  1104  000465                     startup_ok@queryVersion:
  1105                           	opt stack 0
  1106                           
  1107                           ; 10 bytes @ 0x65
  1108  000465                     	ds	10
  1109  00046F                     startup_ok@csq:
  1110                           	opt stack 0
  1111                           
  1112                           ; 9 bytes @ 0x6F
  1113  00046F                     	ds	9
  1114  000478                     startup_ok@ate:
  1115                           	opt stack 0
  1116                           
  1117                           ; 7 bytes @ 0x78
  1118  000478                     	ds	7
  1119  00047F                     startup_ok@at:
  1120                           	opt stack 0
  1121                           
  1122                           ; 5 bytes @ 0x7F
  1123  00047F                     	ds	5
  1124                           tblptru	equ	0xFF8
  1125                           tblptrh	equ	0xFF7
  1126                           tblptrl	equ	0xFF6
  1127                           tablat	equ	0xFF5
  1128                           postinc0	equ	0xFEE
  1129                           wreg	equ	0xFE8
  1130                           postdec1	equ	0xFE5
  1131                           fsr1l	equ	0xFE1
  1132                           
  1133                           	psect	cstackBANK0
  1134  000060                     __pcstackBANK0:
  1135                           	opt stack 0
  1136  000060                     ??_check_test:
  1137  000060                     ??_parse_cmgl:
  1138  000060                     ??_parse_creg_ok:
  1139  000060                     ??_parse_cereg_ok:
  1140  000060                     ??_parse_csq_ok:
  1141  000060                     ?___awdiv:
  1142                           	opt stack 0
  1143  000060                     ?___awmod:
  1144                           	opt stack 0
  1145  000060                     ee_read@addr:
  1146                           	opt stack 0
  1147  000060                     md_uart_send@data:
  1148                           	opt stack 0
  1149  000060                     rf_uart_send@data:
  1150                           	opt stack 0
  1151  000060                     ___awdiv@dividend:
  1152                           	opt stack 0
  1153  000060                     ___awmod@dividend:
  1154                           	opt stack 0
  1155                           
  1156                           ; 2 bytes @ 0x0
  1157  000060                     	ds	1
  1158  000061                     ee_read@page:
  1159                           	opt stack 0
  1160  000061                     getIndexOfLearnedSensor@sensorID:
  1161                           	opt stack 0
  1162  000061                     md_uart_write_str_ok@data:
  1163                           	opt stack 0
  1164                           
  1165                           ; 2 bytes @ 0x1
  1166  000061                     	ds	1
  1167  000062                     ee_read@data:
  1168                           	opt stack 0
  1169  000062                     ___awdiv@divisor:
  1170                           	opt stack 0
  1171  000062                     ___awmod@divisor:
  1172                           	opt stack 0
  1173  000062                     parse_cmgl@rec_msg:
  1174                           	opt stack 0
  1175  000062                     parse_creg_ok@creg_rsp:
  1176                           	opt stack 0
  1177  000062                     parse_cereg_ok@cereg_rsp:
  1178                           	opt stack 0
  1179                           
  1180                           ; 9 bytes @ 0x2
  1181  000062                     	ds	1
  1182  000063                     ??_load_ID:
  1183  000063                     ??_getIndexOfLearnedSensor:
  1184  000063                     ee_write@addr:
  1185                           	opt stack 0
  1186  000063                     ee_read_ascii_to_value@addr:
  1187                           	opt stack 0
  1188  000063                     md_uart_write_str_ok@len1:
  1189                           	opt stack 0
  1190                           
  1191                           ; 1 bytes @ 0x3
  1192  000063                     	ds	1
  1193  000064                     ee_write@data:
  1194                           	opt stack 0
  1195  000064                     ee_read_ascii_to_value@page:
  1196                           	opt stack 0
  1197  000064                     md_uart_write_str_ok@wantOk:
  1198                           	opt stack 0
  1199  000064                     ___awdiv@counter:
  1200                           	opt stack 0
  1201  000064                     ___awmod@counter:
  1202                           	opt stack 0
  1203  000064                     parse_csq_ok@csq_rsp:
  1204                           	opt stack 0
  1205                           
  1206                           ; 7 bytes @ 0x4
  1207  000064                     	ds	1
  1208  000065                     load_ID@i:
  1209                           	opt stack 0
  1210  000065                     ee_write@page:
  1211                           	opt stack 0
  1212  000065                     ee_read_ascii_to_value@data:
  1213                           	opt stack 0
  1214  000065                     md_uart_write_str_ok@waitToSendMoreData:
  1215                           	opt stack 0
  1216  000065                     ___awdiv@sign:
  1217                           	opt stack 0
  1218  000065                     ___awmod@sign:
  1219                           	opt stack 0
  1220                           
  1221                           ; 1 bytes @ 0x5
  1222  000065                     	ds	1
  1223  000066                     load_ID@j:
  1224                           	opt stack 0
  1225  000066                     check_sms_timer@sms_duration:
  1226                           	opt stack 0
  1227  000066                     md_uart_write_str_ok@pos:
  1228                           	opt stack 0
  1229  000066                     add_sensor@sensorID:
  1230                           	opt stack 0
  1231  000066                     ___awdiv@quotient:
  1232                           	opt stack 0
  1233                           
  1234                           ; 2 bytes @ 0x6
  1235  000066                     	ds	1
  1236  000067                     getIndexOfLearnedSensor@sensorIndex:
  1237                           	opt stack 0
  1238  000067                     parse_cmgl@i:
  1239                           	opt stack 0
  1240  000067                     md_uart_write_str_ok@index:
  1241                           	opt stack 0
  1242                           
  1243                           ; 1 bytes @ 0x7
  1244  000067                     	ds	1
  1245  000068                     ??_add_sensor:
  1246  000068                     getIndexOfLearnedSensor@isLearnedIn:
  1247                           	opt stack 0
  1248  000068                     program_field@data_buf:
  1249                           	opt stack 0
  1250  000068                     start_sms_ok@cpms:
  1251                           	opt stack 0
  1252                           
  1253                           ; 25 bytes @ 0x8
  1254  000068                     	ds	1
  1255  000069                     getIndexOfLearnedSensor@i:
  1256                           	opt stack 0
  1257  000069                     send_sms_ok@cmgs:
  1258                           	opt stack 0
  1259                           
  1260                           ; 9 bytes @ 0x9
  1261  000069                     	ds	1
  1262  00006A                     add_sensor@dev_type_new:
  1263                           	opt stack 0
  1264  00006A                     getIndexOfLearnedSensor@j:
  1265                           	opt stack 0
  1266  00006A                     parse_creg_ok@registration_num:
  1267                           	opt stack 0
  1268  00006A                     program_field@size:
  1269                           	opt stack 0
  1270                           
  1271                           ; 1 bytes @ 0xA
  1272  00006A                     	ds	1
  1273  00006B                     ??_program_field:
  1274  00006B                     add_sensor@dev_type_existing:
  1275                           	opt stack 0
  1276  00006B                     parse_creg_ok@i:
  1277                           	opt stack 0
  1278  00006B                     parse_cereg_ok@registration_num:
  1279                           	opt stack 0
  1280  00006B                     parse_csq_ok@ones_digit:
  1281                           	opt stack 0
  1282  00006B                     del_sensor@sensorID:
  1283                           	opt stack 0
  1284                           
  1285                           ; 2 bytes @ 0xB
  1286  00006B                     	ds	1
  1287  00006C                     add_sensor@isUnique:
  1288                           	opt stack 0
  1289  00006C                     parse_cereg_ok@i:
  1290                           	opt stack 0
  1291  00006C                     parse_csq_ok@comma_index:
  1292                           	opt stack 0
  1293  00006C                     program_field@page:
  1294                           	opt stack 0
  1295                           
  1296                           ; 1 bytes @ 0xC
  1297  00006C                     	ds	1
  1298  00006D                     add_sensor@zone:
  1299                           	opt stack 0
  1300  00006D                     del_sensor@j:
  1301                           	opt stack 0
  1302  00006D                     parse_csq_ok@colon_index:
  1303                           	opt stack 0
  1304  00006D                     program_field@max_size:
  1305                           	opt stack 0
  1306                           
  1307                           ; 1 bytes @ 0xD
  1308  00006D                     	ds	1
  1309  00006E                     _add_sensor$1158:
  1310                           	opt stack 0
  1311  00006E                     del_sensor@sensorIndex:
  1312                           	opt stack 0
  1313  00006E                     parse_csq_ok@i:
  1314                           	opt stack 0
  1315  00006E                     program_field@i:
  1316                           	opt stack 0
  1317                           
  1318                           ; 1 bytes @ 0xE
  1319  00006E                     	ds	1
  1320  00006F                     add_sensor@i:
  1321                           	opt stack 0
  1322  00006F                     del_sensor@i:
  1323                           	opt stack 0
  1324  00006F                     parse_csq_ok@tens_digit:
  1325                           	opt stack 0
  1326  00006F                     program_field@start_addr:
  1327                           	opt stack 0
  1328                           
  1329                           ; 1 bytes @ 0xF
  1330  00006F                     	ds	1
  1331  000070                     add_sensor@i_1159:
  1332                           	opt stack 0
  1333  000070                     check_md_state@tempStatus:
  1334                           	opt stack 0
  1335  000070                     program_field@field_number:
  1336                           	opt stack 0
  1337                           
  1338                           ; 1 bytes @ 0x10
  1339  000070                     	ds	1
  1340  000071                     ??_start_modem:
  1341  000071                     ??_parse_cmgr:
  1342                           
  1343                           ; 1 bytes @ 0x11
  1344  000071                     	ds	1
  1345  000072                     send_sms_ok@msgIndex:
  1346                           	opt stack 0
  1347                           
  1348                           ; 3 bytes @ 0x12
  1349  000072                     	ds	1
  1350  000073                     parse_cmgr@cmgr_rsp:
  1351                           	opt stack 0
  1352                           
  1353                           ; 8 bytes @ 0x13
  1354  000073                     	ds	2
  1355  000075                     send_sms_ok@isValidCmd:
  1356                           	opt stack 0
  1357                           
  1358                           ; 1 bytes @ 0x15
  1359  000075                     	ds	1
  1360  000076                     send_sms_ok@smsEndIndex:
  1361                           	opt stack 0
  1362                           
  1363                           ; 1 bytes @ 0x16
  1364  000076                     	ds	1
  1365  000077                     send_sms_ok@poundCount:
  1366                           	opt stack 0
  1367                           
  1368                           ; 1 bytes @ 0x17
  1369  000077                     	ds	1
  1370  000078                     send_sms_ok@i:
  1371                           	opt stack 0
  1372                           
  1373                           ; 1 bytes @ 0x18
  1374  000078                     	ds	3
  1375  00007B                     parse_cmgr@colon_index:
  1376                           	opt stack 0
  1377                           
  1378                           ; 1 bytes @ 0x1B
  1379  00007B                     	ds	1
  1380  00007C                     parse_cmgr@newline_index:
  1381                           	opt stack 0
  1382                           
  1383                           ; 1 bytes @ 0x1C
  1384  00007C                     	ds	1
  1385  00007D                     parse_cmgr@k:
  1386                           	opt stack 0
  1387                           
  1388                           ; 1 bytes @ 0x1D
  1389  00007D                     	ds	1
  1390  00007E                     parse_cmgr@access_code:
  1391                           	opt stack 0
  1392                           
  1393                           ; 4 bytes @ 0x1E
  1394  00007E                     	ds	3
  1395  000081                     start_sms_ok@cnmi:
  1396                           	opt stack 0
  1397                           
  1398                           ; 14 bytes @ 0x21
  1399  000081                     	ds	1
  1400  000082                     parse_cmgr@field_num_tens:
  1401                           	opt stack 0
  1402                           
  1403                           ; 1 bytes @ 0x22
  1404  000082                     	ds	1
  1405  000083                     parse_cmgr@field_num_ones:
  1406                           	opt stack 0
  1407                           
  1408                           ; 1 bytes @ 0x23
  1409  000083                     	ds	1
  1410  000084                     parse_cmgr@final_field_term:
  1411                           	opt stack 0
  1412                           
  1413                           ; 1 bytes @ 0x24
  1414  000084                     	ds	1
  1415  000085                     parse_cmgr@final_field_index:
  1416                           	opt stack 0
  1417                           
  1418                           ; 1 bytes @ 0x25
  1419  000085                     	ds	1
  1420  000086                     parse_cmgr@l:
  1421                           	opt stack 0
  1422                           
  1423                           ; 1 bytes @ 0x26
  1424  000086                     	ds	1
  1425  000087                     parse_cmgr@j:
  1426                           	opt stack 0
  1427                           
  1428                           ; 1 bytes @ 0x27
  1429  000087                     	ds	1
  1430  000088                     parse_cmgr@i:
  1431                           	opt stack 0
  1432                           
  1433                           ; 1 bytes @ 0x28
  1434  000088                     	ds	1
  1435  000089                     ??_read_sms:
  1436                           
  1437                           ; 1 bytes @ 0x29
  1438  000089                     	ds	2
  1439  00008B                     read_sms@cmgl:
  1440                           	opt stack 0
  1441                           
  1442                           ; 16 bytes @ 0x2B
  1443  00008B                     	ds	4
  1444  00008F                     start_sms_ok@cmgf:
  1445                           	opt stack 0
  1446                           
  1447                           ; 12 bytes @ 0x2F
  1448  00008F                     	ds	12
  1449  00009B                     read_sms@cmgr:
  1450                           	opt stack 0
  1451                           
  1452                           ; 9 bytes @ 0x3B
  1453  00009B                     	ds	9
  1454  0000A4                     read_sms@cmgd:
  1455                           	opt stack 0
  1456                           
  1457                           ; 9 bytes @ 0x44
  1458  0000A4                     	ds	9
  1459  0000AD                     read_sms@msgIndex:
  1460                           	opt stack 0
  1461                           
  1462                           ; 3 bytes @ 0x4D
  1463  0000AD                     	ds	3
  1464  0000B0                     ??_listen_sms:
  1465                           
  1466                           ; 1 bytes @ 0x50
  1467  0000B0                     	ds	1
  1468  0000B1                     tblptru	equ	0xFF8
  1469                           tblptrh	equ	0xFF7
  1470                           tblptrl	equ	0xFF6
  1471                           tablat	equ	0xFF5
  1472                           postinc0	equ	0xFEE
  1473                           wreg	equ	0xFE8
  1474                           postdec1	equ	0xFE5
  1475                           fsr1l	equ	0xFE1
  1476                           
  1477                           ; 1 bytes @ 0x51
  1478                           
  1479                           	psect	cstackCOMRAM
  1480  000024                     __pcstackCOMRAM:
  1481                           	opt stack 0
  1482  000024                     i2ee_read@addr:
  1483                           	opt stack 0
  1484                           
  1485                           ; 1 bytes @ 0x0
  1486  000024                     	ds	1
  1487  000025                     i2ee_read@page:
  1488                           	opt stack 0
  1489                           
  1490                           ; 1 bytes @ 0x1
  1491  000025                     	ds	1
  1492  000026                     i2ee_read@data:
  1493                           	opt stack 0
  1494                           
  1495                           ; 1 bytes @ 0x2
  1496  000026                     	ds	1
  1497  000027                     add_event@zone:
  1498                           	opt stack 0
  1499                           
  1500                           ; 1 bytes @ 0x3
  1501  000027                     	ds	1
  1502  000028                     ??_add_event:
  1503                           
  1504                           ; 1 bytes @ 0x4
  1505  000028                     	ds	1
  1506  000029                     add_event@event:
  1507                           	opt stack 0
  1508                           
  1509                           ; 1 bytes @ 0x5
  1510  000029                     	ds	1
  1511  00002A                     add_event@i:
  1512                           	opt stack 0
  1513                           
  1514                           ; 1 bytes @ 0x6
  1515  00002A                     	ds	1
  1516  00002B                     ??_isr:
  1517                           
  1518                           ; 1 bytes @ 0x7
  1519  00002B                     	ds	20
  1520  00003F                     isr@temp:
  1521                           	opt stack 0
  1522                           
  1523                           ; 1 bytes @ 0x1B
  1524  00003F                     	ds	1
  1525                           tblptru	equ	0xFF8
  1526                           tblptrh	equ	0xFF7
  1527                           tblptrl	equ	0xFF6
  1528                           tablat	equ	0xFF5
  1529                           postinc0	equ	0xFEE
  1530                           wreg	equ	0xFE8
  1531                           postdec1	equ	0xFE5
  1532                           fsr1l	equ	0xFE1
  1533                           
  1534 ;;
  1535 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1536 ;;
  1537 ;; *************** function _main *****************
  1538 ;; Defined at:
  1539 ;;		line 16 in file "main.c"
  1540 ;; Parameters:    Size  Location     Type
  1541 ;;		None
  1542 ;; Auto vars:     Size  Location     Type
  1543 ;;		None
  1544 ;; Return value:  Size  Location     Type
  1545 ;;                  1    wreg      void 
  1546 ;; Registers used:
  1547 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1548 ;; Tracked objects:
  1549 ;;		On entry : 0/0
  1550 ;;		On exit  : 0/0
  1551 ;;		Unchanged: 0/0
  1552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1556 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1557 ;;Total ram usage:        0 bytes
  1558 ;; Hardware stack levels required when called:   10
  1559 ;; This function calls:
  1560 ;;		_check_state
  1561 ;;		_disable_md_rxint
  1562 ;;		_event_queue_is_empty
  1563 ;;		_init_pic
  1564 ;;		_load_ID
  1565 ;;		_terminate_md_uart
  1566 ;;		_terminate_rf_uart
  1567 ;; This function is called by:
  1568 ;;		Startup code after reset
  1569 ;; This function uses a non-reentrant model
  1570 ;;
  1571                           
  1572                           	psect	text0
  1573  00210C                     __ptext0:
  1574                           	opt stack 0
  1575  00210C                     _main:
  1576                           	opt stack 21
  1577                           
  1578                           ;main.c: 18: init_pic();
  1579                           
  1580                           ;incstack = 0
  1581  00210C  EC5B  F010         	call	_init_pic	;wreg free
  1582                           
  1583                           ;main.c: 20: load_ID();
  1584  002110  ECC5  F00F         	call	_load_ID	;wreg free
  1585  002114                     l197:
  1586  002114  0004               	clrwdt		;# 
  1587                           
  1588                           ;main.c: 24: check_state();
  1589  002116  ECA4  F00D         	call	_check_state	;wreg free
  1590                           
  1591                           ;main.c: 26: if (event_queue_is_empty() && STATE == IDLE && test_count == 0 && MD_STATE 
      +                          == MD_OFF)
  1592  00211A  ECE9  F011         	call	_event_queue_is_empty	;wreg free
  1593  00211E  0900               	iorlw	0
  1594  002120  B4D8               	btfsc	status,2,c
  1595  002122  D012               	goto	l198
  1596  002124  501E               	movf	_STATE,w,c
  1597  002126  A4D8               	btfss	status,2,c
  1598  002128  D00F               	goto	l198
  1599  00212A  5019               	movf	_test_count,w,c
  1600  00212C  A4D8               	btfss	status,2,c
  1601  00212E  D00C               	goto	l198
  1602  002130  500F               	movf	_MD_STATE,w,c
  1603  002132  A4D8               	btfss	status,2,c
  1604  002134  D009               	goto	l198
  1605                           
  1606                           ;main.c: 27: {
  1607                           ;main.c: 28: disable_md_rxint();
  1608  002136  EC1C  F012         	call	_disable_md_rxint	;wreg free
  1609                           
  1610                           ;main.c: 29: terminate_md_uart();
  1611  00213A  EC17  F012         	call	_terminate_md_uart	;wreg free
  1612                           
  1613                           ;main.c: 30: terminate_rf_uart();
  1614  00213E  EC2B  F012         	call	_terminate_rf_uart	;wreg free
  1615  002142  0003               	sleep		;# 
  1616                           
  1617                           ;main.c: 32: __nop();
  1618  002144  F000               	nop	
  1619                           
  1620                           ;main.c: 33: }
  1621  002146  D002               	goto	l200
  1622  002148                     l198:
  1623                           
  1624                           ;main.c: 34: else if (!event_queue_is_empty())
  1625  002148  ECE9  F011         	call	_event_queue_is_empty	;wreg free
  1626  00214C                     l200:
  1627  00214C  0003               	sleep		;# 
  1628                           
  1629                           ;main.c: 39: __nop();
  1630  00214E  F000               	nop	
  1631  002150  D7E1               	goto	l197
  1632  002152                     __end_of_main:
  1633                           	opt stack 0
  1634                           tblptru	equ	0xFF8
  1635                           tblptrh	equ	0xFF7
  1636                           tblptrl	equ	0xFF6
  1637                           tablat	equ	0xFF5
  1638                           postinc0	equ	0xFEE
  1639                           wreg	equ	0xFE8
  1640                           postdec1	equ	0xFE5
  1641                           fsr1l	equ	0xFE1
  1642                           status	equ	0xFD8
  1643                           
  1644 ;; *************** function _terminate_rf_uart *****************
  1645 ;; Defined at:
  1646 ;;		line 57 in file "uart.c"
  1647 ;; Parameters:    Size  Location     Type
  1648 ;;		None
  1649 ;; Auto vars:     Size  Location     Type
  1650 ;;		None
  1651 ;; Return value:  Size  Location     Type
  1652 ;;                  1    wreg      void 
  1653 ;; Registers used:
  1654 ;;		None
  1655 ;; Tracked objects:
  1656 ;;		On entry : 0/0
  1657 ;;		On exit  : 0/0
  1658 ;;		Unchanged: 0/0
  1659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1663 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1664 ;;Total ram usage:        0 bytes
  1665 ;; Hardware stack levels used:    1
  1666 ;; Hardware stack levels required when called:    3
  1667 ;; This function calls:
  1668 ;;		Nothing
  1669 ;; This function is called by:
  1670 ;;		_main
  1671 ;; This function uses a non-reentrant model
  1672 ;;
  1673                           
  1674                           	psect	text1
  1675  002456                     __ptext1:
  1676                           	opt stack 0
  1677  002456                     _terminate_rf_uart:
  1678                           	opt stack 27
  1679                           
  1680                           ;uart.c: 59: RCSTA2bits.SPEN = 0;
  1681                           
  1682                           ;incstack = 0
  1683  002456  9E71               	bcf	3953,7,c	;volatile
  1684                           
  1685                           ;uart.c: 60: RCSTA2bits.CREN = 0;
  1686  002458  9871               	bcf	3953,4,c	;volatile
  1687                           
  1688                           ;uart.c: 61: TXSTA2bits.TXEN = 0;
  1689  00245A  9A72               	bcf	3954,5,c	;volatile
  1690  00245C  0012               	return		;funcret
  1691  00245E                     __end_of_terminate_rf_uart:
  1692                           	opt stack 0
  1693                           tblptru	equ	0xFF8
  1694                           tblptrh	equ	0xFF7
  1695                           tblptrl	equ	0xFF6
  1696                           tablat	equ	0xFF5
  1697                           postinc0	equ	0xFEE
  1698                           wreg	equ	0xFE8
  1699                           postdec1	equ	0xFE5
  1700                           fsr1l	equ	0xFE1
  1701                           status	equ	0xFD8
  1702                           
  1703 ;; *************** function _terminate_md_uart *****************
  1704 ;; Defined at:
  1705 ;;		line 83 in file "uart.c"
  1706 ;; Parameters:    Size  Location     Type
  1707 ;;		None
  1708 ;; Auto vars:     Size  Location     Type
  1709 ;;		None
  1710 ;; Return value:  Size  Location     Type
  1711 ;;                  1    wreg      void 
  1712 ;; Registers used:
  1713 ;;		None
  1714 ;; Tracked objects:
  1715 ;;		On entry : 0/0
  1716 ;;		On exit  : 0/0
  1717 ;;		Unchanged: 0/0
  1718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1722 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1723 ;;Total ram usage:        0 bytes
  1724 ;; Hardware stack levels used:    1
  1725 ;; Hardware stack levels required when called:    3
  1726 ;; This function calls:
  1727 ;;		Nothing
  1728 ;; This function is called by:
  1729 ;;		_main
  1730 ;; This function uses a non-reentrant model
  1731 ;;
  1732                           
  1733                           	psect	text2
  1734  00242E                     __ptext2:
  1735                           	opt stack 0
  1736  00242E                     _terminate_md_uart:
  1737                           	opt stack 27
  1738                           
  1739                           ;uart.c: 85: RCSTA1bits.SPEN = 0;
  1740                           
  1741                           ;incstack = 0
  1742  00242E  9EAB               	bcf	4011,7,c	;volatile
  1743                           
  1744                           ;uart.c: 88: TRISCbits.TRISC7 = 0;
  1745  002430  9E94               	bcf	3988,7,c	;volatile
  1746                           
  1747                           ;uart.c: 89: LATC7 = 0;
  1748  002432  9E8B               	bcf	3979,7,c	;volatile
  1749                           
  1750                           ;uart.c: 90: RC1IE = 0;
  1751  002434  9A9D               	bcf	3997,5,c	;volatile
  1752  002436  0012               	return		;funcret
  1753  002438                     __end_of_terminate_md_uart:
  1754                           	opt stack 0
  1755                           tblptru	equ	0xFF8
  1756                           tblptrh	equ	0xFF7
  1757                           tblptrl	equ	0xFF6
  1758                           tablat	equ	0xFF5
  1759                           postinc0	equ	0xFEE
  1760                           wreg	equ	0xFE8
  1761                           postdec1	equ	0xFE5
  1762                           fsr1l	equ	0xFE1
  1763                           status	equ	0xFD8
  1764                           
  1765 ;; *************** function _load_ID *****************
  1766 ;; Defined at:
  1767 ;;		line 206 in file "io.c"
  1768 ;; Parameters:    Size  Location     Type
  1769 ;;		None
  1770 ;; Auto vars:     Size  Location     Type
  1771 ;;  j               1    6[BANK0 ] unsigned char 
  1772 ;;  i               1    5[BANK0 ] unsigned char 
  1773 ;; Return value:  Size  Location     Type
  1774 ;;                  1    wreg      void 
  1775 ;; Registers used:
  1776 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1777 ;; Tracked objects:
  1778 ;;		On entry : 0/0
  1779 ;;		On exit  : 0/0
  1780 ;;		Unchanged: 0/0
  1781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1783 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1784 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1785 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1786 ;;Total ram usage:        4 bytes
  1787 ;; Hardware stack levels used:    1
  1788 ;; Hardware stack levels required when called:    4
  1789 ;; This function calls:
  1790 ;;		_ee_read
  1791 ;; This function is called by:
  1792 ;;		_main
  1793 ;; This function uses a non-reentrant model
  1794 ;;
  1795                           
  1796                           	psect	text3
  1797  001F8A                     __ptext3:
  1798                           	opt stack 0
  1799  001F8A                     _load_ID:
  1800                           	opt stack 26
  1801                           
  1802                           ;io.c: 208: idEndPtr = ee_read(0x00, 0x02);
  1803                           
  1804                           ;incstack = 0
  1805  001F8A  0E02               	movlw	2
  1806  001F8C  0100               	movlb	0	; () banked
  1807  001F8E  6F60               	movwf	ee_read@addr& (0+255),b
  1808  001F90  0E00               	movlw	0
  1809  001F92  EC76  F011         	call	_ee_read
  1810  001F96  0100               	movlb	0	; () banked
  1811  001F98  6FCA               	movwf	_idEndPtr& (0+255),b
  1812                           
  1813                           ; BSR set to: 0
  1814                           ;io.c: 209: for (uint8_t i = 0; i < idEndPtr; i++)
  1815  001F9A  0E00               	movlw	0
  1816  001F9C  6F65               	movwf	load_ID@i& (0+255),b
  1817  001F9E  D024               	goto	l500
  1818  001FA0                     
  1819                           ; BSR set to: 0
  1820                           ;io.c: 210: {
  1821                           ;io.c: 211: for (uint8_t j = 0; j < 4; j++)
  1822                           
  1823                           ; BSR set to: 0
  1824  001FA0  0E00               	movlw	0
  1825  001FA2  6F66               	movwf	load_ID@j& (0+255),b
  1826  001FA4                     l7946:
  1827                           
  1828                           ; BSR set to: 0
  1829  001FA4  0E03               	movlw	3
  1830  001FA6  6566               	cpfsgt	load_ID@j& (0+255),b
  1831  001FA8  D001               	goto	l502
  1832  001FAA  D01D               	goto	u10360
  1833  001FAC                     l502:
  1834                           
  1835                           ; BSR set to: 0
  1836                           ;io.c: 212: ID[i][j] = ee_read(0x01, (uint8_t)(0x80 + j + i));
  1837                           
  1838                           ; BSR set to: 0
  1839  001FAC  5165               	movf	load_ID@i& (0+255),w,b
  1840  001FAE  0D04               	mullw	4
  1841  001FB0  0E00               	movlw	low _ID
  1842  001FB2  6F63               	movwf	??_load_ID& (0+255),b
  1843  001FB4  0E03               	movlw	high _ID
  1844  001FB6  6F64               	movwf	(??_load_ID+1)& (0+255),b
  1845  001FB8  50F3               	movf	prodl,w,c
  1846  001FBA  2763               	addwf	??_load_ID& (0+255),f,b
  1847  001FBC  50F4               	movf	prodh,w,c
  1848  001FBE  2364               	addwfc	(??_load_ID+1)& (0+255),f,b
  1849  001FC0  5166               	movf	load_ID@j& (0+255),w,b
  1850  001FC2  0D01               	mullw	1
  1851  001FC4  50F3               	movf	prodl,w,c
  1852  001FC6  2563               	addwf	??_load_ID& (0+255),w,b
  1853  001FC8  6ED9               	movwf	fsr2l,c
  1854  001FCA  50F4               	movf	prodh,w,c
  1855  001FCC  2164               	addwfc	(??_load_ID+1)& (0+255),w,b
  1856  001FCE  6EDA               	movwf	fsr2h,c
  1857  001FD0  5166               	movf	load_ID@j& (0+255),w,b
  1858  001FD2  2565               	addwf	load_ID@i& (0+255),w,b
  1859  001FD4  0F80               	addlw	128
  1860  001FD6  6F60               	movwf	ee_read@addr& (0+255),b
  1861  001FD8  0E01               	movlw	1
  1862  001FDA  EC76  F011         	call	_ee_read
  1863  001FDE  6EDF               	movwf	indf2,c
  1864  001FE0  0100               	movlb	0	; () banked
  1865  001FE2  2B66               	incf	load_ID@j& (0+255),f,b
  1866  001FE4  D7DF               	goto	l7946
  1867  001FE6                     u10360:
  1868                           
  1869                           ; BSR set to: 0
  1870                           
  1871                           ; BSR set to: 0
  1872  001FE6  2B65               	incf	load_ID@i& (0+255),f,b
  1873  001FE8                     l500:
  1874                           
  1875                           ; BSR set to: 0
  1876                           
  1877                           ; BSR set to: 0
  1878  001FE8  51CA               	movf	_idEndPtr& (0+255),w,b
  1879  001FEA  5D65               	subwf	load_ID@i& (0+255),w,b
  1880  001FEC  B0D8               	btfsc	status,0,c
  1881  001FEE  0012               	return	
  1882  001FF0  D7D7               	goto	l501
  1883  001FF2                     __end_of_load_ID:
  1884                           	opt stack 0
  1885                           tblptru	equ	0xFF8
  1886                           tblptrh	equ	0xFF7
  1887                           tblptrl	equ	0xFF6
  1888                           tablat	equ	0xFF5
  1889                           prodh	equ	0xFF4
  1890                           prodl	equ	0xFF3
  1891                           postinc0	equ	0xFEE
  1892                           wreg	equ	0xFE8
  1893                           postdec1	equ	0xFE5
  1894                           fsr1l	equ	0xFE1
  1895                           indf2	equ	0xFDF
  1896                           fsr2h	equ	0xFDA
  1897                           fsr2l	equ	0xFD9
  1898                           status	equ	0xFD8
  1899                           
  1900 ;; *************** function _init_pic *****************
  1901 ;; Defined at:
  1902 ;;		line 10 in file "io.c"
  1903 ;; Parameters:    Size  Location     Type
  1904 ;;		None
  1905 ;; Auto vars:     Size  Location     Type
  1906 ;;		None
  1907 ;; Return value:  Size  Location     Type
  1908 ;;                  1    wreg      void 
  1909 ;; Registers used:
  1910 ;;		wreg, status,2, cstack
  1911 ;; Tracked objects:
  1912 ;;		On entry : 0/0
  1913 ;;		On exit  : 0/0
  1914 ;;		Unchanged: 0/0
  1915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1919 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1920 ;;Total ram usage:        0 bytes
  1921 ;; Hardware stack levels used:    1
  1922 ;; Hardware stack levels required when called:    5
  1923 ;; This function calls:
  1924 ;;		_clear_at_ok
  1925 ;;		_enable_ints
  1926 ;;		_init_uart
  1927 ;; This function is called by:
  1928 ;;		_main
  1929 ;; This function uses a non-reentrant model
  1930 ;;
  1931                           
  1932                           	psect	text4
  1933  0020B6                     __ptext4:
  1934                           	opt stack 0
  1935  0020B6                     _init_pic:
  1936                           	opt stack 25
  1937                           
  1938                           ;io.c: 13: OSCCONbits.IDLEN = 0;
  1939                           
  1940                           ; BSR set to: 0
  1941                           ;incstack = 0
  1942  0020B6  9ED3               	bcf	4051,7,c	;volatile
  1943                           
  1944                           ;io.c: 14: OSCCONbits.IRCF = 0b110;
  1945  0020B8  50D3               	movf	4051,w,c	;volatile
  1946  0020BA  0B8F               	andlw	-113
  1947  0020BC  0960               	iorlw	96
  1948  0020BE  6ED3               	movwf	4051,c	;volatile
  1949                           
  1950                           ;io.c: 15: OSCCONbits.OSTS = 1;
  1951  0020C0  86D3               	bsf	4051,3,c	;volatile
  1952                           
  1953                           ;io.c: 18: ANSELA = 0x01;
  1954  0020C2  0E01               	movlw	1
  1955  0020C4  010F               	movlb	15	; () banked
  1956  0020C6  6F38               	movwf	56,b	;volatile
  1957                           
  1958                           ;io.c: 19: ANSELB = 0x00;
  1959  0020C8  0E00               	movlw	0
  1960  0020CA  6F39               	movwf	57,b	;volatile
  1961                           
  1962                           ;io.c: 20: ANSELC = 0x00;
  1963  0020CC  0E00               	movlw	0
  1964  0020CE  6F3A               	movwf	58,b	;volatile
  1965                           
  1966                           ;io.c: 22: TRISA = 0b00000001;
  1967  0020D0  0E01               	movlw	1
  1968  0020D2  6E92               	movwf	3986,c	;volatile
  1969                           
  1970                           ;io.c: 23: TRISB = 0b10110110;
  1971  0020D4  0EB6               	movlw	182
  1972  0020D6  6E93               	movwf	3987,c	;volatile
  1973                           
  1974                           ;io.c: 24: TRISC = 0b10000100;
  1975  0020D8  0E84               	movlw	132
  1976  0020DA  6E94               	movwf	3988,c	;volatile
  1977                           
  1978                           ; BSR set to: 15
  1979                           ;io.c: 26: LATC4=1;
  1980  0020DC  888B               	bsf	3979,4,c	;volatile
  1981                           
  1982                           ; BSR set to: 15
  1983                           ;io.c: 27: LATB3=1;
  1984  0020DE  868A               	bsf	3978,3,c	;volatile
  1985                           
  1986                           ;io.c: 35: T0CON = 0x87;
  1987  0020E0  0E87               	movlw	135
  1988  0020E2  6ED5               	movwf	4053,c	;volatile
  1989                           
  1990                           ;io.c: 36: TMR0H = ((65535-780)/256);
  1991  0020E4  0EFC               	movlw	252
  1992  0020E6  6ED7               	movwf	4055,c	;volatile
  1993                           
  1994                           ;io.c: 37: TMR0L = ((65535-780)%256);
  1995  0020E8  0EF3               	movlw	243
  1996  0020EA  6ED6               	movwf	4054,c	;volatile
  1997                           
  1998                           ; BSR set to: 15
  1999                           ;io.c: 38: TMR0IF = 0;
  2000  0020EC  94F2               	bcf	intcon,2,c	;volatile
  2001                           
  2002                           ; BSR set to: 15
  2003                           ;io.c: 60: LATAbits.LATA4 = 0;
  2004  0020EE  9889               	bcf	3977,4,c	;volatile
  2005                           
  2006                           ; BSR set to: 15
  2007                           ;io.c: 61: IOCBbits.IOCB4 = 1;
  2008  0020F0  8862               	bsf	3938,4,c	;volatile
  2009                           
  2010                           ; BSR set to: 15
  2011                           ;io.c: 63: INTCONbits.RBIE = 1;
  2012  0020F2  86F2               	bsf	intcon,3,c	;volatile
  2013                           
  2014                           ; BSR set to: 15
  2015                           ;io.c: 64: INTCONbits.GIE = 1;
  2016  0020F4  8EF2               	bsf	intcon,7,c	;volatile
  2017                           
  2018                           ;io.c: 66: STATE = IDLE;
  2019  0020F6  0E00               	movlw	0
  2020  0020F8  6E1E               	movwf	_STATE,c
  2021                           
  2022                           ;io.c: 67: MD_STATE = MD_OFF;
  2023  0020FA  0E00               	movlw	0
  2024  0020FC  6E0F               	movwf	_MD_STATE,c
  2025                           
  2026                           ; BSR set to: 15
  2027                           ;io.c: 70: init_uart();
  2028  0020FE  EC2E  F011         	call	_init_uart	;wreg free
  2029                           
  2030                           ;io.c: 72: clear_at_ok();
  2031  002102  ECA9  F010         	call	_clear_at_ok	;wreg free
  2032                           
  2033                           ;io.c: 74: enable_ints();
  2034  002106  EC08  F011         	call	_enable_ints	;wreg free
  2035  00210A  0012               	return		;funcret
  2036  00210C                     __end_of_init_pic:
  2037                           	opt stack 0
  2038                           tblptru	equ	0xFF8
  2039                           tblptrh	equ	0xFF7
  2040                           tblptrl	equ	0xFF6
  2041                           tablat	equ	0xFF5
  2042                           prodh	equ	0xFF4
  2043                           prodl	equ	0xFF3
  2044                           intcon	equ	0xFF2
  2045                           postinc0	equ	0xFEE
  2046                           wreg	equ	0xFE8
  2047                           postdec1	equ	0xFE5
  2048                           fsr1l	equ	0xFE1
  2049                           indf2	equ	0xFDF
  2050                           fsr2h	equ	0xFDA
  2051                           fsr2l	equ	0xFD9
  2052                           status	equ	0xFD8
  2053                           
  2054 ;; *************** function _enable_ints *****************
  2055 ;; Defined at:
  2056 ;;		line 313 in file "io.c"
  2057 ;; Parameters:    Size  Location     Type
  2058 ;;		None
  2059 ;; Auto vars:     Size  Location     Type
  2060 ;;		None
  2061 ;; Return value:  Size  Location     Type
  2062 ;;                  1    wreg      void 
  2063 ;; Registers used:
  2064 ;;		wreg, status,2, cstack
  2065 ;; Tracked objects:
  2066 ;;		On entry : 0/0
  2067 ;;		On exit  : 0/0
  2068 ;;		Unchanged: 0/0
  2069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2073 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2074 ;;Total ram usage:        0 bytes
  2075 ;; Hardware stack levels used:    1
  2076 ;; Hardware stack levels required when called:    4
  2077 ;; This function calls:
  2078 ;;		_start_timer0
  2079 ;; This function is called by:
  2080 ;;		_init_pic
  2081 ;; This function uses a non-reentrant model
  2082 ;;
  2083                           
  2084                           	psect	text5
  2085  002210                     __ptext5:
  2086                           	opt stack 0
  2087  002210                     _enable_ints:
  2088                           	opt stack 25
  2089                           
  2090                           ;io.c: 315: INTCONbits.GIE = 0;
  2091                           
  2092                           ;incstack = 0
  2093  002210  9EF2               	bcf	intcon,7,c	;volatile
  2094                           
  2095                           ;io.c: 322: start_timer0();
  2096  002212  ECD7  F011         	call	_start_timer0	;wreg free
  2097                           
  2098                           ;io.c: 325: T3CONbits.T3CKPS = 0b11;
  2099  002216  0E30               	movlw	48
  2100  002218  12B1               	iorwf	4017,f,c	;volatile
  2101                           
  2102                           ;io.c: 326: T3CONbits.TMR3CS = 0b00;
  2103  00221A  0E3F               	movlw	-193
  2104  00221C  16B1               	andwf	4017,f,c	;volatile
  2105                           
  2106                           ;io.c: 327: T3CONbits.nT3SYNC = 1;
  2107  00221E  84B1               	bsf	4017,2,c	;volatile
  2108                           
  2109                           ;io.c: 329: T3CONbits.TMR3ON = 1;
  2110  002220  80B1               	bsf	4017,0,c	;volatile
  2111                           
  2112                           ;io.c: 330: PIE2bits.TMR3IE = 1;
  2113  002222  82A0               	bsf	4000,1,c	;volatile
  2114                           
  2115                           ;io.c: 331: PIR2bits.TMR3IF = 0;
  2116  002224  92A1               	bcf	4001,1,c	;volatile
  2117                           
  2118                           ;io.c: 332: TMR3H = 0x60;
  2119  002226  0E60               	movlw	96
  2120  002228  6EB3               	movwf	4019,c	;volatile
  2121                           
  2122                           ;io.c: 333: TMR3L = 0;
  2123  00222A  0E00               	movlw	0
  2124  00222C  6EB2               	movwf	4018,c	;volatile
  2125                           
  2126                           ;io.c: 335: INTCONbits.GIE = 0;
  2127  00222E  9EF2               	bcf	intcon,7,c	;volatile
  2128                           
  2129                           ;io.c: 336: INTCONbits.PEIE = 1;
  2130  002230  8CF2               	bsf	intcon,6,c	;volatile
  2131                           
  2132                           ;io.c: 338: INTCONbits.GIE = 1;
  2133  002232  8EF2               	bsf	intcon,7,c	;volatile
  2134  002234  0012               	return		;funcret
  2135  002236                     __end_of_enable_ints:
  2136                           	opt stack 0
  2137                           tblptru	equ	0xFF8
  2138                           tblptrh	equ	0xFF7
  2139                           tblptrl	equ	0xFF6
  2140                           tablat	equ	0xFF5
  2141                           prodh	equ	0xFF4
  2142                           prodl	equ	0xFF3
  2143                           intcon	equ	0xFF2
  2144                           postinc0	equ	0xFEE
  2145                           wreg	equ	0xFE8
  2146                           postdec1	equ	0xFE5
  2147                           fsr1l	equ	0xFE1
  2148                           indf2	equ	0xFDF
  2149                           fsr2h	equ	0xFDA
  2150                           fsr2l	equ	0xFD9
  2151                           status	equ	0xFD8
  2152                           
  2153 ;; *************** function _start_timer0 *****************
  2154 ;; Defined at:
  2155 ;;		line 367 in file "io.c"
  2156 ;; Parameters:    Size  Location     Type
  2157 ;;		None
  2158 ;; Auto vars:     Size  Location     Type
  2159 ;;		None
  2160 ;; Return value:  Size  Location     Type
  2161 ;;                  1    wreg      void 
  2162 ;; Registers used:
  2163 ;;		wreg, status,2
  2164 ;; Tracked objects:
  2165 ;;		On entry : 0/0
  2166 ;;		On exit  : 0/0
  2167 ;;		Unchanged: 0/0
  2168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2172 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2173 ;;Total ram usage:        0 bytes
  2174 ;; Hardware stack levels used:    1
  2175 ;; Hardware stack levels required when called:    3
  2176 ;; This function calls:
  2177 ;;		Nothing
  2178 ;; This function is called by:
  2179 ;;		_enable_ints
  2180 ;; This function uses a non-reentrant model
  2181 ;;
  2182                           
  2183                           	psect	text6
  2184  0023AE                     __ptext6:
  2185                           	opt stack 0
  2186  0023AE                     _start_timer0:
  2187                           	opt stack 25
  2188                           
  2189                           ;io.c: 369: T0CON = 0x87;
  2190                           
  2191                           ;incstack = 0
  2192  0023AE  0E87               	movlw	135
  2193  0023B0  6ED5               	movwf	4053,c	;volatile
  2194                           
  2195                           ;io.c: 370: TMR0L = ((65535-781)%256);
  2196  0023B2  0EF2               	movlw	242
  2197  0023B4  6ED6               	movwf	4054,c	;volatile
  2198                           
  2199                           ;io.c: 371: TMR0H = ((65535-781)/256);
  2200  0023B6  0EFC               	movlw	252
  2201  0023B8  6ED7               	movwf	4055,c	;volatile
  2202                           
  2203                           ;io.c: 372: TMR0IF = 0;
  2204  0023BA  94F2               	bcf	intcon,2,c	;volatile
  2205                           
  2206                           ;io.c: 373: TMR0IE = 1;
  2207  0023BC  8AF2               	bsf	intcon,5,c	;volatile
  2208                           
  2209                           ;io.c: 374: INTCONbits.GIE = 1;
  2210  0023BE  8EF2               	bsf	intcon,7,c	;volatile
  2211  0023C0  0012               	return		;funcret
  2212  0023C2                     __end_of_start_timer0:
  2213                           	opt stack 0
  2214                           tblptru	equ	0xFF8
  2215                           tblptrh	equ	0xFF7
  2216                           tblptrl	equ	0xFF6
  2217                           tablat	equ	0xFF5
  2218                           prodh	equ	0xFF4
  2219                           prodl	equ	0xFF3
  2220                           intcon	equ	0xFF2
  2221                           postinc0	equ	0xFEE
  2222                           wreg	equ	0xFE8
  2223                           postdec1	equ	0xFE5
  2224                           fsr1l	equ	0xFE1
  2225                           indf2	equ	0xFDF
  2226                           fsr2h	equ	0xFDA
  2227                           fsr2l	equ	0xFD9
  2228                           status	equ	0xFD8
  2229                           
  2230 ;; *************** function _event_queue_is_empty *****************
  2231 ;; Defined at:
  2232 ;;		line 13 in file "queue.c"
  2233 ;; Parameters:    Size  Location     Type
  2234 ;;		None
  2235 ;; Auto vars:     Size  Location     Type
  2236 ;;		None
  2237 ;; Return value:  Size  Location     Type
  2238 ;;                  1    wreg      unsigned char 
  2239 ;; Registers used:
  2240 ;;		wreg, status,2
  2241 ;; Tracked objects:
  2242 ;;		On entry : 0/0
  2243 ;;		On exit  : 0/0
  2244 ;;		Unchanged: 0/0
  2245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2249 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2250 ;;Total ram usage:        0 bytes
  2251 ;; Hardware stack levels used:    1
  2252 ;; Hardware stack levels required when called:    3
  2253 ;; This function calls:
  2254 ;;		Nothing
  2255 ;; This function is called by:
  2256 ;;		_main
  2257 ;; This function uses a non-reentrant model
  2258 ;;
  2259                           
  2260                           	psect	text7
  2261  0023D2                     __ptext7:
  2262                           	opt stack 0
  2263  0023D2                     _event_queue_is_empty:
  2264                           	opt stack 27
  2265                           
  2266                           ;queue.c: 15: return (bool)(queue_end_ptr > 0);
  2267                           
  2268                           ;incstack = 0
  2269  0023D2  5002               	movf	_queue_end_ptr,w,c
  2270  0023D4  B4D8               	btfsc	status,2,c
  2271  0023D6  D002               	goto	u10420
  2272  0023D8  0E01               	movlw	1
  2273  0023DA  0012               	return	
  2274  0023DC                     u10420:
  2275  0023DC  0E00               	movlw	0
  2276  0023DE  0012               	return	
  2277  0023E0                     __end_of_event_queue_is_empty:
  2278                           	opt stack 0
  2279                           tblptru	equ	0xFF8
  2280                           tblptrh	equ	0xFF7
  2281                           tblptrl	equ	0xFF6
  2282                           tablat	equ	0xFF5
  2283                           prodh	equ	0xFF4
  2284                           prodl	equ	0xFF3
  2285                           intcon	equ	0xFF2
  2286                           postinc0	equ	0xFEE
  2287                           wreg	equ	0xFE8
  2288                           postdec1	equ	0xFE5
  2289                           fsr1l	equ	0xFE1
  2290                           indf2	equ	0xFDF
  2291                           fsr2h	equ	0xFDA
  2292                           fsr2l	equ	0xFD9
  2293                           status	equ	0xFD8
  2294                           
  2295 ;; *************** function _disable_md_rxint *****************
  2296 ;; Defined at:
  2297 ;;		line 74 in file "uart.c"
  2298 ;; Parameters:    Size  Location     Type
  2299 ;;		None
  2300 ;; Auto vars:     Size  Location     Type
  2301 ;;		None
  2302 ;; Return value:  Size  Location     Type
  2303 ;;                  1    wreg      void 
  2304 ;; Registers used:
  2305 ;;		None
  2306 ;; Tracked objects:
  2307 ;;		On entry : 0/0
  2308 ;;		On exit  : 0/0
  2309 ;;		Unchanged: 0/0
  2310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2314 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2315 ;;Total ram usage:        0 bytes
  2316 ;; Hardware stack levels used:    1
  2317 ;; Hardware stack levels required when called:    3
  2318 ;; This function calls:
  2319 ;;		Nothing
  2320 ;; This function is called by:
  2321 ;;		_main
  2322 ;; This function uses a non-reentrant model
  2323 ;;
  2324                           
  2325                           	psect	text8
  2326  002438                     __ptext8:
  2327                           	opt stack 0
  2328  002438                     _disable_md_rxint:
  2329                           	opt stack 27
  2330                           
  2331                           ;uart.c: 76: CREN1 = 0;
  2332                           
  2333                           ;incstack = 0
  2334  002438  98AB               	bcf	4011,4,c	;volatile
  2335                           
  2336                           ;uart.c: 77: GIE = 0;
  2337  00243A  9EF2               	bcf	intcon,7,c	;volatile
  2338                           
  2339                           ;uart.c: 78: PIE1bits.RC1IE = 0;
  2340  00243C  9A9D               	bcf	3997,5,c	;volatile
  2341                           
  2342                           ;uart.c: 79: GIE = 1;
  2343  00243E  8EF2               	bsf	intcon,7,c	;volatile
  2344  002440  0012               	return		;funcret
  2345  002442                     __end_of_disable_md_rxint:
  2346                           	opt stack 0
  2347                           tblptru	equ	0xFF8
  2348                           tblptrh	equ	0xFF7
  2349                           tblptrl	equ	0xFF6
  2350                           tablat	equ	0xFF5
  2351                           prodh	equ	0xFF4
  2352                           prodl	equ	0xFF3
  2353                           intcon	equ	0xFF2
  2354                           postinc0	equ	0xFEE
  2355                           wreg	equ	0xFE8
  2356                           postdec1	equ	0xFE5
  2357                           fsr1l	equ	0xFE1
  2358                           indf2	equ	0xFDF
  2359                           fsr2h	equ	0xFDA
  2360                           fsr2l	equ	0xFD9
  2361                           status	equ	0xFD8
  2362                           
  2363 ;; *************** function _check_state *****************
  2364 ;; Defined at:
  2365 ;;		line 45 in file "main.c"
  2366 ;; Parameters:    Size  Location     Type
  2367 ;;		None
  2368 ;; Auto vars:     Size  Location     Type
  2369 ;;		None
  2370 ;; Return value:  Size  Location     Type
  2371 ;;                  1    wreg      void 
  2372 ;; Registers used:
  2373 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2374 ;; Tracked objects:
  2375 ;;		On entry : 0/0
  2376 ;;		On exit  : 0/0
  2377 ;;		Unchanged: 0/0
  2378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2382 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2383 ;;Total ram usage:        0 bytes
  2384 ;; Hardware stack levels used:    1
  2385 ;; Hardware stack levels required when called:    9
  2386 ;; This function calls:
  2387 ;;		_add_sensor
  2388 ;;		_check_alarm
  2389 ;;		_check_super
  2390 ;;		_check_tamper
  2391 ;;		_check_test
  2392 ;;		_del_sensor
  2393 ;;		_listen_sms
  2394 ;;		_stop_sensor_tmr
  2395 ;; This function is called by:
  2396 ;;		_main
  2397 ;; This function uses a non-reentrant model
  2398 ;;
  2399                           
  2400                           	psect	text9
  2401  001B48                     __ptext9:
  2402                           	opt stack 0
  2403  001B48                     _check_state:
  2404                           	opt stack 21
  2405                           
  2406                           ;main.c: 47: switch(STATE)
  2407                           
  2408                           ;incstack = 0
  2409  001B48  D045               	goto	l206
  2410  001B4A                     
  2411                           ;main.c: 50: check_super();
  2412  001B4A  EC3D  F012         	call	_check_super	;wreg free
  2413                           
  2414                           ;main.c: 51: check_tamper();
  2415  001B4E  EC3C  F012         	call	_check_tamper	;wreg free
  2416                           
  2417                           ;main.c: 53: check_alarm();
  2418  001B52  EC3E  F012         	call	_check_alarm	;wreg free
  2419                           
  2420                           ;main.c: 54: check_test();
  2421  001B56  ECF9  F00F         	call	_check_test	;wreg free
  2422                           
  2423                           ;main.c: 57: break;
  2424  001B5A  0012               	return	
  2425  001B5C                     l209:
  2426  001B5C  0004               	clrwdt		;# 
  2427                           
  2428                           ;main.c: 60: listen_sms();
  2429  001B5E  ECB1  F00B         	call	_listen_sms	;wreg free
  2430                           
  2431                           ;main.c: 61: check_tamper();
  2432  001B62  EC3C  F012         	call	_check_tamper	;wreg free
  2433                           
  2434                           ;main.c: 63: check_alarm();
  2435  001B66  EC3E  F012         	call	_check_alarm	;wreg free
  2436                           
  2437                           ;main.c: 64: check_test();
  2438  001B6A  ECF9  F00F         	call	_check_test	;wreg free
  2439                           
  2440                           ;main.c: 66: break;
  2441  001B6E  0012               	return	
  2442  001B70                     l210:
  2443  001B70  0004               	clrwdt		;# 
  2444                           
  2445                           ;main.c: 69: IOCBbits.IOCB5 = 1;
  2446  001B72  8A62               	bsf	3938,5,c	;volatile
  2447                           
  2448                           ;main.c: 70: INTCONbits.RBIE = 1;
  2449  001B74  86F2               	bsf	intcon,3,c	;volatile
  2450                           
  2451                           ;main.c: 71: if (receivedSensor && idEndPtr < (sizeof(ID) - 1))
  2452  001B76  0100               	movlb	0	; () banked
  2453  001B78  51C7               	movf	_receivedSensor& (0+255),w,b
  2454  001B7A  B4D8               	btfsc	status,2,c
  2455  001B7C  D00C               	goto	l211
  2456                           
  2457                           ; BSR set to: 0
  2458  001B7E  0E3F               	movlw	63
  2459  001B80  61CA               	cpfslt	_idEndPtr& (0+255),b
  2460  001B82  D009               	goto	l211
  2461                           
  2462                           ; BSR set to: 0
  2463                           ;main.c: 72: {
  2464                           ;main.c: 73: add_sensor(rx2_buf);
  2465  001B84  0E1F               	movlw	low _rx2_buf
  2466  001B86  6F66               	movwf	add_sensor@sensorID& (0+255),b
  2467  001B88  0E00               	movlw	high _rx2_buf
  2468  001B8A  6F67               	movwf	(add_sensor@sensorID+1)& (0+255),b
  2469  001B8C  EC2E  F007         	call	_add_sensor	;wreg free
  2470                           
  2471                           ;main.c: 74: receivedSensor = 0;
  2472  001B90  0E00               	movlw	0
  2473  001B92  0100               	movlb	0	; () banked
  2474  001B94  6FC7               	movwf	_receivedSensor& (0+255),b
  2475  001B96                     l211:
  2476                           
  2477                           ; BSR set to: 0
  2478                           ;main.c: 75: }
  2479                           ;main.c: 76: if (t4_tick >= 611)
  2480                           
  2481                           ; BSR set to: 0
  2482  001B96  0E63               	movlw	99
  2483  001B98  5DB1               	subwf	_t4_tick& (0+255),w,b
  2484  001B9A  0E02               	movlw	2
  2485  001B9C  59B2               	subwfb	(_t4_tick+1)& (0+255),w,b
  2486  001B9E  A0D8               	btfss	status,0,c
  2487  001BA0  0012               	return	
  2488                           
  2489                           ; BSR set to: 0
  2490                           ;main.c: 77: {
  2491                           ;main.c: 78: stop_sensor_tmr();
  2492  001BA2  EC2F  F012         	call	_stop_sensor_tmr	;wreg free
  2493                           
  2494                           ;main.c: 79: STATE = PREV_STATE;
  2495  001BA6  C0C9  F01E         	movff	_PREV_STATE,_STATE
  2496                           
  2497                           ;main.c: 80: }
  2498                           ;main.c: 81: break;
  2499  001BAA  0012               	return	
  2500  001BAC                     l213:
  2501  001BAC  0004               	clrwdt		;# 
  2502                           
  2503                           ;main.c: 84: del_sensor(rx2_buf);
  2504  001BAE  0E1F               	movlw	low _rx2_buf
  2505  001BB0  0100               	movlb	0	; () banked
  2506  001BB2  6F6B               	movwf	del_sensor@sensorID& (0+255),b
  2507  001BB4  0E00               	movlw	high _rx2_buf
  2508  001BB6  6F6C               	movwf	(del_sensor@sensorID+1)& (0+255),b
  2509  001BB8  EC8F  F00E         	call	_del_sensor	;wreg free
  2510                           
  2511                           ;main.c: 85: if (t4_tick >= 611)
  2512  001BBC  0E63               	movlw	99
  2513  001BBE  0100               	movlb	0	; () banked
  2514  001BC0  5DB1               	subwf	_t4_tick& (0+255),w,b
  2515  001BC2  0E02               	movlw	2
  2516  001BC4  59B2               	subwfb	(_t4_tick+1)& (0+255),w,b
  2517  001BC6  A0D8               	btfss	status,0,c
  2518  001BC8  0012               	return	
  2519                           
  2520                           ; BSR set to: 0
  2521                           ;main.c: 86: {
  2522                           ;main.c: 87: stop_sensor_tmr();
  2523  001BCA  EC2F  F012         	call	_stop_sensor_tmr	;wreg free
  2524                           
  2525                           ;main.c: 88: STATE = PREV_STATE;
  2526  001BCE  C0C9  F01E         	movff	_PREV_STATE,_STATE
  2527                           
  2528                           ;main.c: 91: }
  2529                           
  2530                           ;main.c: 89: }
  2531                           ;main.c: 90: break;
  2532  001BD2  0012               	return	
  2533  001BD4                     l206:
  2534  001BD4  501E               	movf	_STATE,w,c
  2535                           
  2536                           ; Switch size 1, requested type "space"
  2537                           ; Number of cases is 4, Range of values is 0 to 4
  2538                           ; switch strategies available:
  2539                           ; Name         Instructions Cycles
  2540                           ; simple_byte           13     7 (average)
  2541                           ;	Chosen strategy is simple_byte
  2542  001BD6  0A00               	xorlw	0	; case 0
  2543  001BD8  B4D8               	btfsc	status,2,c
  2544  001BDA  D7B7               	goto	l207
  2545  001BDC  0A02               	xorlw	2	; case 2
  2546  001BDE  B4D8               	btfsc	status,2,c
  2547  001BE0  D7BD               	goto	l209
  2548  001BE2  0A01               	xorlw	1	; case 3
  2549  001BE4  B4D8               	btfsc	status,2,c
  2550  001BE6  D7C4               	goto	l210
  2551  001BE8  0A07               	xorlw	7	; case 4
  2552  001BEA  A4D8               	btfss	status,2,c
  2553  001BEC  0012               	return	
  2554  001BEE  D7DE               	goto	l213
  2555  001BF0                     __end_of_check_state:
  2556                           	opt stack 0
  2557                           tblptru	equ	0xFF8
  2558                           tblptrh	equ	0xFF7
  2559                           tblptrl	equ	0xFF6
  2560                           tablat	equ	0xFF5
  2561                           prodh	equ	0xFF4
  2562                           prodl	equ	0xFF3
  2563                           intcon	equ	0xFF2
  2564                           postinc0	equ	0xFEE
  2565                           wreg	equ	0xFE8
  2566                           postdec1	equ	0xFE5
  2567                           fsr1l	equ	0xFE1
  2568                           indf2	equ	0xFDF
  2569                           fsr2h	equ	0xFDA
  2570                           fsr2l	equ	0xFD9
  2571                           status	equ	0xFD8
  2572                           
  2573 ;; *************** function _stop_sensor_tmr *****************
  2574 ;; Defined at:
  2575 ;;		line 291 in file "io.c"
  2576 ;; Parameters:    Size  Location     Type
  2577 ;;		None
  2578 ;; Auto vars:     Size  Location     Type
  2579 ;;		None
  2580 ;; Return value:  Size  Location     Type
  2581 ;;                  1    wreg      void 
  2582 ;; Registers used:
  2583 ;;		None
  2584 ;; Tracked objects:
  2585 ;;		On entry : 0/0
  2586 ;;		On exit  : 0/0
  2587 ;;		Unchanged: 0/0
  2588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2592 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2593 ;;Total ram usage:        0 bytes
  2594 ;; Hardware stack levels used:    1
  2595 ;; Hardware stack levels required when called:    3
  2596 ;; This function calls:
  2597 ;;		Nothing
  2598 ;; This function is called by:
  2599 ;;		_check_state
  2600 ;; This function uses a non-reentrant model
  2601 ;;
  2602                           
  2603                           	psect	text10
  2604  00245E                     __ptext10:
  2605                           	opt stack 0
  2606  00245E                     _stop_sensor_tmr:
  2607                           	opt stack 26
  2608                           
  2609                           ;io.c: 293: T4CONbits.TMR4ON = 0;
  2610                           
  2611                           ;incstack = 0
  2612  00245E  010F               	movlb	15	; () banked
  2613  002460  9551               	bcf	81,2,b	;volatile
  2614                           
  2615                           ;io.c: 294: PIE5bits.TMR4IE = 0;
  2616  002462  907D               	bcf	3965,0,c	;volatile
  2617                           
  2618                           ; BSR set to: 15
  2619  002464  0012               	return		;funcret
  2620  002466                     __end_of_stop_sensor_tmr:
  2621                           	opt stack 0
  2622                           tblptru	equ	0xFF8
  2623                           tblptrh	equ	0xFF7
  2624                           tblptrl	equ	0xFF6
  2625                           tablat	equ	0xFF5
  2626                           prodh	equ	0xFF4
  2627                           prodl	equ	0xFF3
  2628                           intcon	equ	0xFF2
  2629                           postinc0	equ	0xFEE
  2630                           wreg	equ	0xFE8
  2631                           postdec1	equ	0xFE5
  2632                           fsr1l	equ	0xFE1
  2633                           indf2	equ	0xFDF
  2634                           fsr2h	equ	0xFDA
  2635                           fsr2l	equ	0xFD9
  2636                           status	equ	0xFD8
  2637                           
  2638 ;; *************** function _listen_sms *****************
  2639 ;; Defined at:
  2640 ;;		line 9 in file "sms.c"
  2641 ;; Parameters:    Size  Location     Type
  2642 ;;		None
  2643 ;; Auto vars:     Size  Location     Type
  2644 ;;		None
  2645 ;; Return value:  Size  Location     Type
  2646 ;;                  1    wreg      void 
  2647 ;; Registers used:
  2648 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2649 ;; Tracked objects:
  2650 ;;		On entry : 0/0
  2651 ;;		On exit  : 0/0
  2652 ;;		Unchanged: 0/0
  2653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2656 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2657 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2658 ;;Total ram usage:        1 bytes
  2659 ;; Hardware stack levels used:    1
  2660 ;; Hardware stack levels required when called:    8
  2661 ;; This function calls:
  2662 ;;		_check_sms_timer
  2663 ;;		_read_sms
  2664 ;;		_send_sms_ok
  2665 ;;		_start_modem
  2666 ;;		_start_sms_ok
  2667 ;;		_start_sms_timer
  2668 ;; This function is called by:
  2669 ;;		_check_state
  2670 ;; This function uses a non-reentrant model
  2671 ;;
  2672                           
  2673                           	psect	text11
  2674  001762                     __ptext11:
  2675                           	opt stack 0
  2676  001762                     _listen_sms:
  2677                           	opt stack 21
  2678                           
  2679                           ;sms.c: 11: if (!modem_awake)
  2680                           
  2681                           ; BSR set to: 15
  2682                           ;incstack = 0
  2683  001762  0100               	movlb	0	; () banked
  2684  001764  51C2               	movf	_modem_awake& (0+255),w,b
  2685  001766  A4D8               	btfss	status,2,c
  2686  001768  D003               	goto	l744
  2687                           
  2688                           ; BSR set to: 0
  2689                           ;sms.c: 12: start_modem();
  2690  00176A  EC2B  F010         	call	_start_modem	;wreg free
  2691  00176E  0012               	return	
  2692  001770                     l744:
  2693                           
  2694                           ;sms.c: 13: else if (modem_awake && !modem_ready_sms)
  2695  001770  0100               	movlb	0	; () banked
  2696  001772  51C2               	movf	_modem_awake& (0+255),w,b
  2697  001774  B4D8               	btfsc	status,2,c
  2698  001776  D016               	goto	l746
  2699                           
  2700                           ; BSR set to: 0
  2701  001778  51C1               	movf	_modem_ready_sms& (0+255),w,b
  2702  00177A  A4D8               	btfss	status,2,c
  2703  00177C  D013               	goto	l746
  2704                           
  2705                           ; BSR set to: 0
  2706                           ;sms.c: 14: {
  2707                           ;sms.c: 15: if (start_sms_ok() == 1)
  2708  00177E  EC2B  F00B         	call	_start_sms_ok	;wreg free
  2709  001782  06E8               	decf	wreg,f,c
  2710  001784  A4D8               	btfss	status,2,c
  2711  001786  D006               	goto	l747
  2712                           
  2713                           ;sms.c: 16: {
  2714                           ;sms.c: 17: start_sms_timer();
  2715  001788  ECA3  F011         	call	_start_sms_timer	;wreg free
  2716                           
  2717                           ;sms.c: 18: modem_ready_sms = 1;
  2718  00178C  0E01               	movlw	1
  2719  00178E  0100               	movlb	0	; () banked
  2720  001790  6FC1               	movwf	_modem_ready_sms& (0+255),b
  2721                           
  2722                           ;sms.c: 19: }
  2723  001792  0012               	return	
  2724  001794                     l747:
  2725                           
  2726                           ;sms.c: 20: else if (start_sms_ok() == 5)
  2727                           
  2728                           ; BSR set to: 0
  2729  001794  EC2B  F00B         	call	_start_sms_ok	;wreg free
  2730  001798  0A05               	xorlw	5
  2731  00179A  A4D8               	btfss	status,2,c
  2732  00179C  0012               	return	
  2733                           
  2734                           ;sms.c: 21: start_modem();
  2735  00179E  EC2B  F010         	call	_start_modem	;wreg free
  2736                           
  2737                           ;sms.c: 22: }
  2738  0017A2  0012               	return	
  2739  0017A4                     l746:
  2740                           
  2741                           ;sms.c: 24: else if (modem_ready_sms)
  2742  0017A4  0100               	movlb	0	; () banked
  2743  0017A6  51C1               	movf	_modem_ready_sms& (0+255),w,b
  2744  0017A8  B4D8               	btfsc	status,2,c
  2745  0017AA  0012               	return	
  2746                           
  2747                           ; BSR set to: 0
  2748                           ;sms.c: 25: {
  2749                           ;sms.c: 26: if (sms_timer_ready && !sms_echo_ready)
  2750  0017AC  51C8               	movf	_sms_timer_ready& (0+255),w,b
  2751  0017AE  B4D8               	btfsc	status,2,c
  2752  0017B0  D009               	goto	l752
  2753                           
  2754                           ; BSR set to: 0
  2755  0017B2  51C6               	movf	_sms_echo_ready& (0+255),w,b
  2756  0017B4  A4D8               	btfss	status,2,c
  2757  0017B6  D006               	goto	l752
  2758                           
  2759                           ; BSR set to: 0
  2760                           ;sms.c: 27: {
  2761                           ;sms.c: 28: retryCnt = 0;
  2762  0017B8  0E00               	movlw	0
  2763  0017BA  6FB4               	movwf	_retryCnt& (0+255),b
  2764                           
  2765                           ;sms.c: 29: sms_timer_ready = 0;
  2766  0017BC  0E00               	movlw	0
  2767  0017BE  6FC8               	movwf	_sms_timer_ready& (0+255),b
  2768                           
  2769                           ; BSR set to: 0
  2770                           ;sms.c: 30: read_sms();
  2771  0017C0  EC5E  F006         	call	_read_sms	;wreg free
  2772  0017C4                     l752:
  2773                           
  2774                           ;sms.c: 31: }
  2775                           ;sms.c: 32: if (sms_echo_ready)
  2776  0017C4  0100               	movlb	0	; () banked
  2777  0017C6  51C6               	movf	_sms_echo_ready& (0+255),w,b
  2778  0017C8  B4D8               	btfsc	status,2,c
  2779  0017CA  D018               	goto	l753
  2780                           
  2781                           ; BSR set to: 0
  2782                           ;sms.c: 33: {
  2783                           ;sms.c: 34: if (send_sms_ok(1) == 1 && retryCnt++ < 5)
  2784  0017CC  0E01               	movlw	1
  2785  0017CE  ECC3  F008         	call	_send_sms_ok
  2786  0017D2  06E8               	decf	wreg,f,c
  2787  0017D4  A4D8               	btfss	status,2,c
  2788  0017D6  D00B               	goto	l754
  2789  0017D8  0100               	movlb	0	; () banked
  2790  0017DA  2BB4               	incf	_retryCnt& (0+255),f,b
  2791  0017DC  05B4               	decf	_retryCnt& (0+255),w,b
  2792  0017DE  6FB0               	movwf	??_listen_sms& (0+255),b
  2793  0017E0  0E05               	movlw	5
  2794  0017E2  61B0               	cpfslt	??_listen_sms& (0+255),b
  2795  0017E4  D004               	goto	l754
  2796                           
  2797                           ; BSR set to: 0
  2798                           ;sms.c: 35: {
  2799                           ;sms.c: 36: retryCnt = 0;
  2800  0017E6  0E00               	movlw	0
  2801  0017E8  6FB4               	movwf	_retryCnt& (0+255),b
  2802                           
  2803                           ;sms.c: 37: sms_echo_ready = 0;
  2804  0017EA  0E00               	movlw	0
  2805  0017EC  6FC6               	movwf	_sms_echo_ready& (0+255),b
  2806  0017EE                     l754:
  2807                           
  2808                           ;sms.c: 38: }
  2809                           ;sms.c: 39: if (retryCnt >= 5)
  2810                           
  2811                           ; BSR set to: 0
  2812  0017EE  0E04               	movlw	4
  2813  0017F0  0100               	movlb	0	; () banked
  2814  0017F2  65B4               	cpfsgt	_retryCnt& (0+255),b
  2815  0017F4  D01D               	goto	l759
  2816                           
  2817                           ; BSR set to: 0
  2818                           ;sms.c: 40: sms_echo_ready = 0;
  2819  0017F6  0E00               	movlw	0
  2820  0017F8  6FC6               	movwf	_sms_echo_ready& (0+255),b
  2821                           
  2822                           ; BSR set to: 0
  2823                           ;sms.c: 41: }
  2824  0017FA  D01A               	goto	l759
  2825  0017FC                     l753:
  2826                           
  2827                           ; BSR set to: 0
  2828                           ;sms.c: 42: else if (sms_err_ready)
  2829                           
  2830                           ; BSR set to: 0
  2831  0017FC  51C5               	movf	_sms_err_ready& (0+255),w,b
  2832  0017FE  B4D8               	btfsc	status,2,c
  2833  001800  D017               	goto	l759
  2834                           
  2835                           ; BSR set to: 0
  2836                           ;sms.c: 43: {
  2837                           ;sms.c: 44: if (send_sms_ok(0) == 1 && retryCnt++ < 5)
  2838  001802  0E00               	movlw	0
  2839  001804  ECC3  F008         	call	_send_sms_ok
  2840  001808  06E8               	decf	wreg,f,c
  2841  00180A  A4D8               	btfss	status,2,c
  2842  00180C  D00B               	goto	l758
  2843  00180E  0100               	movlb	0	; () banked
  2844  001810  2BB4               	incf	_retryCnt& (0+255),f,b
  2845  001812  05B4               	decf	_retryCnt& (0+255),w,b
  2846  001814  6FB0               	movwf	??_listen_sms& (0+255),b
  2847  001816  0E05               	movlw	5
  2848  001818  61B0               	cpfslt	??_listen_sms& (0+255),b
  2849  00181A  D004               	goto	l758
  2850                           
  2851                           ; BSR set to: 0
  2852                           ;sms.c: 45: {
  2853                           ;sms.c: 46: retryCnt = 0;
  2854  00181C  0E00               	movlw	0
  2855  00181E  6FB4               	movwf	_retryCnt& (0+255),b
  2856                           
  2857                           ;sms.c: 47: sms_err_ready = 0;
  2858  001820  0E00               	movlw	0
  2859  001822  6FC5               	movwf	_sms_err_ready& (0+255),b
  2860  001824                     l758:
  2861                           
  2862                           ;sms.c: 48: }
  2863                           ;sms.c: 49: if (retryCnt >= 5)
  2864                           
  2865                           ; BSR set to: 0
  2866  001824  0E04               	movlw	4
  2867  001826  0100               	movlb	0	; () banked
  2868  001828  65B4               	cpfsgt	_retryCnt& (0+255),b
  2869  00182A  D002               	goto	l759
  2870                           
  2871                           ; BSR set to: 0
  2872                           ;sms.c: 50: sms_err_ready = 0;
  2873  00182C  0E00               	movlw	0
  2874  00182E  6FC5               	movwf	_sms_err_ready& (0+255),b
  2875  001830                     l759:
  2876                           
  2877                           ; BSR set to: 0
  2878                           ;sms.c: 51: }
  2879                           ;sms.c: 52: check_sms_timer();
  2880                           
  2881                           ; BSR set to: 0
  2882                           
  2883                           ; BSR set to: 0
  2884                           
  2885                           ; BSR set to: 0
  2886  001830  EC1A  F00F         	call	_check_sms_timer	;wreg free
  2887  001834  0012               	return	
  2888  001836                     __end_of_listen_sms:
  2889                           	opt stack 0
  2890                           tblptru	equ	0xFF8
  2891                           tblptrh	equ	0xFF7
  2892                           tblptrl	equ	0xFF6
  2893                           tablat	equ	0xFF5
  2894                           prodh	equ	0xFF4
  2895                           prodl	equ	0xFF3
  2896                           intcon	equ	0xFF2
  2897                           postinc0	equ	0xFEE
  2898                           wreg	equ	0xFE8
  2899                           postdec1	equ	0xFE5
  2900                           fsr1l	equ	0xFE1
  2901                           indf2	equ	0xFDF
  2902                           fsr2h	equ	0xFDA
  2903                           fsr2l	equ	0xFD9
  2904                           status	equ	0xFD8
  2905                           
  2906 ;; *************** function _start_sms_timer *****************
  2907 ;; Defined at:
  2908 ;;		line 91 in file "sms.c"
  2909 ;; Parameters:    Size  Location     Type
  2910 ;;		None
  2911 ;; Auto vars:     Size  Location     Type
  2912 ;;		None
  2913 ;; Return value:  Size  Location     Type
  2914 ;;                  1    wreg      void 
  2915 ;; Registers used:
  2916 ;;		wreg, status,2
  2917 ;; Tracked objects:
  2918 ;;		On entry : 0/0
  2919 ;;		On exit  : 0/0
  2920 ;;		Unchanged: 0/0
  2921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2925 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2926 ;;Total ram usage:        0 bytes
  2927 ;; Hardware stack levels used:    1
  2928 ;; Hardware stack levels required when called:    3
  2929 ;; This function calls:
  2930 ;;		Nothing
  2931 ;; This function is called by:
  2932 ;;		_listen_sms
  2933 ;; This function uses a non-reentrant model
  2934 ;;
  2935                           
  2936                           	psect	text12
  2937  002346                     __ptext12:
  2938                           	opt stack 0
  2939  002346                     _start_sms_timer:
  2940                           	opt stack 25
  2941                           
  2942                           ;sms.c: 93: T2CONbits.T2CKPS = 0b10;
  2943                           
  2944                           ;incstack = 0
  2945  002346  50BA               	movf	4026,w,c	;volatile
  2946  002348  0BFC               	andlw	-4
  2947  00234A  0902               	iorlw	2
  2948  00234C  6EBA               	movwf	4026,c	;volatile
  2949                           
  2950                           ;sms.c: 94: T2CONbits.T2OUTPS = 0b1111;
  2951  00234E  86BA               	bsf	4026,3,c	;volatile
  2952  002350  88BA               	bsf	4026,4,c	;volatile
  2953  002352  8ABA               	bsf	4026,5,c	;volatile
  2954  002354  8CBA               	bsf	4026,6,c	;volatile
  2955                           
  2956                           ;sms.c: 95: T2CONbits.TMR2ON = 1;
  2957  002356  84BA               	bsf	4026,2,c	;volatile
  2958                           
  2959                           ;sms.c: 96: PIE1bits.TMR2IE = 1;
  2960  002358  829D               	bsf	3997,1,c	;volatile
  2961                           
  2962                           ;sms.c: 97: INTCONbits.PEIE = 1;
  2963  00235A  8CF2               	bsf	intcon,6,c	;volatile
  2964                           
  2965                           ;sms.c: 98: INTCONbits.GIE = 1;
  2966  00235C  8EF2               	bsf	intcon,7,c	;volatile
  2967  00235E  0012               	return		;funcret
  2968  002360                     __end_of_start_sms_timer:
  2969                           	opt stack 0
  2970                           tblptru	equ	0xFF8
  2971                           tblptrh	equ	0xFF7
  2972                           tblptrl	equ	0xFF6
  2973                           tablat	equ	0xFF5
  2974                           prodh	equ	0xFF4
  2975                           prodl	equ	0xFF3
  2976                           intcon	equ	0xFF2
  2977                           postinc0	equ	0xFEE
  2978                           wreg	equ	0xFE8
  2979                           postdec1	equ	0xFE5
  2980                           fsr1l	equ	0xFE1
  2981                           indf2	equ	0xFDF
  2982                           fsr2h	equ	0xFDA
  2983                           fsr2l	equ	0xFD9
  2984                           status	equ	0xFD8
  2985                           
  2986 ;; *************** function _start_sms_ok *****************
  2987 ;; Defined at:
  2988 ;;		line 109 in file "sms.c"
  2989 ;; Parameters:    Size  Location     Type
  2990 ;;		None
  2991 ;; Auto vars:     Size  Location     Type
  2992 ;;  cpms           25    8[BANK0 ] unsigned char [25]
  2993 ;;  cnmi           14   33[BANK0 ] unsigned char [14]
  2994 ;;  cmgf           12   47[BANK0 ] unsigned char [12]
  2995 ;; Return value:  Size  Location     Type
  2996 ;;                  1    wreg      unsigned char 
  2997 ;; Registers used:
  2998 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2999 ;; Tracked objects:
  3000 ;;		On entry : 0/0
  3001 ;;		On exit  : 0/0
  3002 ;;		Unchanged: 0/0
  3003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3005 ;;      Locals:         0      51       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3007 ;;      Totals:         0      51       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3008 ;;Total ram usage:       51 bytes
  3009 ;; Hardware stack levels used:    1
  3010 ;; Hardware stack levels required when called:    5
  3011 ;; This function calls:
  3012 ;;		_clear_at_ok
  3013 ;;		_init_md_uart
  3014 ;;		_md_uart_write_str_ok
  3015 ;; This function is called by:
  3016 ;;		_listen_sms
  3017 ;; This function uses a non-reentrant model
  3018 ;;
  3019                           
  3020                           	psect	text13
  3021  001656                     __ptext13:
  3022                           	opt stack 0
  3023  001656                     _start_sms_ok:
  3024                           	opt stack 23
  3025                           
  3026                           ;sms.c: 111: uint8_t cmgf[] = "AT+CMGF=1\r\n";
  3027                           
  3028                           ;incstack = 0
  3029  001656  EE21  F032         	lfsr	2,start_sms_ok@F6832
  3030  00165A  EE10  F08F         	lfsr	1,start_sms_ok@cmgf
  3031  00165E  0E0B               	movlw	11
  3032  001660                     u9481:
  3033  001660  CFDB FFE3          	movff	plusw2,plusw1
  3034  001664  06E8               	decf	wreg,f,c
  3035  001666  E2FC               	bc	u9481
  3036                           
  3037                           ;sms.c: 112: uint8_t cpms[]="AT+CPMS=\"ME\",\"ME\",\"ME\"\r\n";
  3038  001668  EE23  F07C         	lfsr	2,start_sms_ok@F6834
  3039  00166C  EE10  F068         	lfsr	1,start_sms_ok@cpms
  3040  001670  0E18               	movlw	24
  3041  001672                     u9491:
  3042  001672  CFDB FFE3          	movff	plusw2,plusw1
  3043  001676  06E8               	decf	wreg,f,c
  3044  001678  E2FC               	bc	u9491
  3045                           
  3046                           ;sms.c: 113: uint8_t cnmi[]="AT+CNMI=1,1\r\n";
  3047  00167A  EE21  F000         	lfsr	2,start_sms_ok@F6836
  3048  00167E  EE10  F081         	lfsr	1,start_sms_ok@cnmi
  3049  001682  0E0D               	movlw	13
  3050  001684                     u9501:
  3051  001684  CFDB FFE3          	movff	plusw2,plusw1
  3052  001688  06E8               	decf	wreg,f,c
  3053  00168A  E2FC               	bc	u9501
  3054                           
  3055                           ;sms.c: 115: init_md_uart();
  3056  00168C  EC40  F011         	call	_init_md_uart	;wreg free
  3057                           
  3058                           ;sms.c: 117: if (at1 != 1)
  3059  001690  0100               	movlb	0	; () banked
  3060  001692  05C0               	decf	_at1& (0+255),w,b
  3061  001694  B4D8               	btfsc	status,2,c
  3062  001696  D013               	goto	l787
  3063                           
  3064                           ; BSR set to: 0
  3065                           ;sms.c: 118: {
  3066                           ;sms.c: 119: at1 = md_uart_write_str_ok((uint8_t *)&cmgf[0], sizeof(cmgf), 1, 0);
  3067  001698  0E8F               	movlw	low start_sms_ok@cmgf
  3068  00169A  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  3069  00169C  0E00               	movlw	high start_sms_ok@cmgf
  3070  00169E  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  3071  0016A0  0E0C               	movlw	12
  3072  0016A2  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  3073  0016A4  0E01               	movlw	1
  3074  0016A6  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  3075  0016A8  0E00               	movlw	0
  3076  0016AA  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  3077  0016AC  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  3078  0016B0  0100               	movlb	0	; () banked
  3079  0016B2  6FC0               	movwf	_at1& (0+255),b
  3080                           
  3081                           ; BSR set to: 0
  3082                           ;sms.c: 120: if (at1 == 1)
  3083  0016B4  05C0               	decf	_at1& (0+255),w,b
  3084  0016B6  A4D8               	btfss	status,2,c
  3085  0016B8  D002               	goto	l787
  3086                           
  3087                           ; BSR set to: 0
  3088                           ;sms.c: 121: numUartRetries = 15;
  3089  0016BA  0E0F               	movlw	15
  3090  0016BC  6E44               	movwf	_numUartRetries,c
  3091  0016BE                     l787:
  3092                           
  3093                           ; BSR set to: 0
  3094                           ;sms.c: 122: }
  3095                           ;sms.c: 123: if (at1 == 1 && at2 != 1)
  3096                           
  3097                           ; BSR set to: 0
  3098                           
  3099                           ; BSR set to: 0
  3100  0016BE  05C0               	decf	_at1& (0+255),w,b
  3101  0016C0  A4D8               	btfss	status,2,c
  3102  0016C2  D016               	goto	l789
  3103                           
  3104                           ; BSR set to: 0
  3105  0016C4  05BF               	decf	_at2& (0+255),w,b
  3106  0016C6  B4D8               	btfsc	status,2,c
  3107  0016C8  D013               	goto	l789
  3108                           
  3109                           ; BSR set to: 0
  3110                           ;sms.c: 124: {
  3111                           ;sms.c: 125: at2 = md_uart_write_str_ok((uint8_t *)&cpms[0], sizeof(cpms), 1, 0);
  3112  0016CA  0E68               	movlw	low start_sms_ok@cpms
  3113  0016CC  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  3114  0016CE  0E00               	movlw	high start_sms_ok@cpms
  3115  0016D0  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  3116  0016D2  0E19               	movlw	25
  3117  0016D4  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  3118  0016D6  0E01               	movlw	1
  3119  0016D8  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  3120  0016DA  0E00               	movlw	0
  3121  0016DC  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  3122  0016DE  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  3123  0016E2  0100               	movlb	0	; () banked
  3124  0016E4  6FBF               	movwf	_at2& (0+255),b
  3125                           
  3126                           ; BSR set to: 0
  3127                           ;sms.c: 126: if (at2 == 1)
  3128  0016E6  05BF               	decf	_at2& (0+255),w,b
  3129  0016E8  A4D8               	btfss	status,2,c
  3130  0016EA  D002               	goto	l789
  3131                           
  3132                           ; BSR set to: 0
  3133                           ;sms.c: 127: numUartRetries = 15;
  3134  0016EC  0E0F               	movlw	15
  3135  0016EE  6E44               	movwf	_numUartRetries,c
  3136  0016F0                     l789:
  3137                           
  3138                           ; BSR set to: 0
  3139                           ;sms.c: 128: }
  3140                           ;sms.c: 129: if (at2 == 1 && at3 != 1)
  3141                           
  3142                           ; BSR set to: 0
  3143                           
  3144                           ; BSR set to: 0
  3145  0016F0  05BF               	decf	_at2& (0+255),w,b
  3146  0016F2  A4D8               	btfss	status,2,c
  3147  0016F4  D016               	goto	l791
  3148                           
  3149                           ; BSR set to: 0
  3150  0016F6  05BE               	decf	_at3& (0+255),w,b
  3151  0016F8  B4D8               	btfsc	status,2,c
  3152  0016FA  D013               	goto	l791
  3153                           
  3154                           ; BSR set to: 0
  3155                           ;sms.c: 130: {
  3156                           ;sms.c: 131: at3 = md_uart_write_str_ok((uint8_t *)&cnmi[0], sizeof(cnmi), 1, 0);
  3157  0016FC  0E81               	movlw	low start_sms_ok@cnmi
  3158  0016FE  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  3159  001700  0E00               	movlw	high start_sms_ok@cnmi
  3160  001702  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  3161  001704  0E0E               	movlw	14
  3162  001706  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  3163  001708  0E01               	movlw	1
  3164  00170A  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  3165  00170C  0E00               	movlw	0
  3166  00170E  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  3167  001710  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  3168  001714  0100               	movlb	0	; () banked
  3169  001716  6FBE               	movwf	_at3& (0+255),b
  3170                           
  3171                           ; BSR set to: 0
  3172                           ;sms.c: 132: if (at3 == 1)
  3173  001718  05BE               	decf	_at3& (0+255),w,b
  3174  00171A  A4D8               	btfss	status,2,c
  3175  00171C  D002               	goto	l791
  3176                           
  3177                           ; BSR set to: 0
  3178                           ;sms.c: 133: numUartRetries = 15;
  3179  00171E  0E0F               	movlw	15
  3180  001720  6E44               	movwf	_numUartRetries,c
  3181  001722                     l791:
  3182                           
  3183                           ; BSR set to: 0
  3184                           ;sms.c: 134: }
  3185                           ;sms.c: 135: if (at1 == 5 || at2 == 5 || at3 == 5)
  3186                           
  3187                           ; BSR set to: 0
  3188                           
  3189                           ; BSR set to: 0
  3190  001722  0E05               	movlw	5
  3191  001724  19C0               	xorwf	_at1& (0+255),w,b
  3192  001726  B4D8               	btfsc	status,2,c
  3193  001728  D008               	goto	u9610
  3194                           
  3195                           ; BSR set to: 0
  3196  00172A  0E05               	movlw	5
  3197  00172C  19BF               	xorwf	_at2& (0+255),w,b
  3198  00172E  B4D8               	btfsc	status,2,c
  3199  001730  D004               	goto	u9610
  3200                           
  3201                           ; BSR set to: 0
  3202  001732  0E05               	movlw	5
  3203  001734  19BE               	xorwf	_at3& (0+255),w,b
  3204  001736  A4D8               	btfss	status,2,c
  3205  001738  D004               	goto	l792
  3206  00173A                     u9610:
  3207                           
  3208                           ; BSR set to: 0
  3209                           ;sms.c: 136: {
  3210                           ;sms.c: 137: clear_at_ok();
  3211                           
  3212                           ; BSR set to: 0
  3213  00173A  ECA9  F010         	call	_clear_at_ok	;wreg free
  3214                           
  3215                           ;sms.c: 138: return 5;
  3216  00173E  0E05               	movlw	5
  3217                           
  3218                           ;sms.c: 139: }
  3219  001740  0012               	return	
  3220  001742                     l792:
  3221                           
  3222                           ;sms.c: 140: else if (at1 == 1 && at2 == 1 && at3 == 1)
  3223  001742  0100               	movlb	0	; () banked
  3224  001744  05C0               	decf	_at1& (0+255),w,b
  3225  001746  A4D8               	btfss	status,2,c
  3226  001748  D00A               	goto	l797
  3227                           
  3228                           ; BSR set to: 0
  3229  00174A  05BF               	decf	_at2& (0+255),w,b
  3230  00174C  A4D8               	btfss	status,2,c
  3231  00174E  D007               	goto	l797
  3232                           
  3233                           ; BSR set to: 0
  3234  001750  05BE               	decf	_at3& (0+255),w,b
  3235  001752  A4D8               	btfss	status,2,c
  3236  001754  D004               	goto	l797
  3237                           
  3238                           ; BSR set to: 0
  3239                           ;sms.c: 141: {
  3240                           ;sms.c: 142: clear_at_ok();
  3241  001756  ECA9  F010         	call	_clear_at_ok	;wreg free
  3242                           
  3243                           ;sms.c: 143: return 1;
  3244  00175A  0E01               	movlw	1
  3245                           
  3246                           ;sms.c: 144: }
  3247  00175C  0012               	return	
  3248  00175E                     l797:
  3249                           
  3250                           ;sms.c: 145: else
  3251                           ;sms.c: 146: return 2;
  3252  00175E  0E02               	movlw	2
  3253  001760  0012               	return	
  3254  001762                     __end_of_start_sms_ok:
  3255                           	opt stack 0
  3256                           tblptru	equ	0xFF8
  3257                           tblptrh	equ	0xFF7
  3258                           tblptrl	equ	0xFF6
  3259                           tablat	equ	0xFF5
  3260                           prodh	equ	0xFF4
  3261                           prodl	equ	0xFF3
  3262                           intcon	equ	0xFF2
  3263                           postinc0	equ	0xFEE
  3264                           wreg	equ	0xFE8
  3265                           postdec1	equ	0xFE5
  3266                           plusw1	equ	0xFE3
  3267                           fsr1l	equ	0xFE1
  3268                           indf2	equ	0xFDF
  3269                           plusw2	equ	0xFDB
  3270                           fsr2h	equ	0xFDA
  3271                           fsr2l	equ	0xFD9
  3272                           status	equ	0xFD8
  3273                           
  3274 ;; *************** function _start_modem *****************
  3275 ;; Defined at:
  3276 ;;		line 61 in file "general_modem.c"
  3277 ;; Parameters:    Size  Location     Type
  3278 ;;		None
  3279 ;; Auto vars:     Size  Location     Type
  3280 ;;		None
  3281 ;; Return value:  Size  Location     Type
  3282 ;;                  1    wreg      void 
  3283 ;; Registers used:
  3284 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3285 ;; Tracked objects:
  3286 ;;		On entry : 0/0
  3287 ;;		On exit  : 0/0
  3288 ;;		Unchanged: 0/0
  3289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3292 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3293 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3294 ;;Total ram usage:        2 bytes
  3295 ;; Hardware stack levels used:    1
  3296 ;; Hardware stack levels required when called:    7
  3297 ;; This function calls:
  3298 ;;		_check_md_state
  3299 ;;		_start_md_boot_timer
  3300 ;; This function is called by:
  3301 ;;		_listen_sms
  3302 ;; This function uses a non-reentrant model
  3303 ;;
  3304                           
  3305                           	psect	text14
  3306  002056                     __ptext14:
  3307                           	opt stack 0
  3308  002056                     _start_modem:
  3309                           	opt stack 21
  3310                           
  3311                           ;general_modem.c: 63: check_md_state();
  3312                           
  3313                           ;incstack = 0
  3314  002056  EC8D  F00F         	call	_check_md_state	;wreg free
  3315                           
  3316                           ;general_modem.c: 64: if (MD_STATE != WAITING || (MD_STATE == WAITING && md_timeout_cnt 
      +                          >= 2))
  3317  00205A  040F               	decf	_MD_STATE,w,c
  3318  00205C  A4D8               	btfss	status,2,c
  3319  00205E  D006               	goto	u9450
  3320  002060  040F               	decf	_MD_STATE,w,c
  3321  002062  A4D8               	btfss	status,2,c
  3322  002064  D01B               	goto	l1058
  3323  002066  0E01               	movlw	1
  3324  002068  6404               	cpfsgt	_md_timeout_cnt,c
  3325  00206A  D018               	goto	l1058
  3326  00206C                     u9450:
  3327                           
  3328                           ;general_modem.c: 65: {
  3329                           ;general_modem.c: 66: LATAbits.LATA3 = 0;
  3330  00206C  9689               	bcf	3977,3,c	;volatile
  3331                           
  3332                           ;general_modem.c: 69: _delay((unsigned long)((200)*(8000000/4000.0)));
  3333  00206E  0E03               	movlw	3
  3334  002070  0100               	movlb	0	; () banked
  3335  002072  6F72               	movwf	(??_start_modem+1)& (0+255),b
  3336  002074  0E08               	movlw	8
  3337  002076  6F71               	movwf	??_start_modem& (0+255),b
  3338  002078  0E77               	movlw	119
  3339  00207A                     u10507:
  3340  00207A  2EE8               	decfsz	wreg,f,c
  3341  00207C  D7FE               	bra	u10507
  3342  00207E  2F71               	decfsz	??_start_modem& (0+255),f,b
  3343  002080  D7FC               	bra	u10507
  3344  002082  2F72               	decfsz	(??_start_modem+1)& (0+255),f,b
  3345  002084  D7FA               	bra	u10507
  3346                           
  3347                           ;general_modem.c: 70: LATAbits.LATA3 = 1;
  3348  002086  8689               	bsf	3977,3,c	;volatile
  3349                           
  3350                           ;general_modem.c: 71: MD_STATE = WAITING;
  3351  002088  0E01               	movlw	1
  3352  00208A  6E0F               	movwf	_MD_STATE,c
  3353                           
  3354                           ;general_modem.c: 72: modem_awake = 0;
  3355  00208C  0E00               	movlw	0
  3356  00208E  0100               	movlb	0	; () banked
  3357  002090  6FC2               	movwf	_modem_awake& (0+255),b
  3358                           
  3359                           ; BSR set to: 0
  3360                           ;general_modem.c: 73: md_timeout_cnt = 0;
  3361  002092  0E00               	movlw	0
  3362  002094  6E04               	movwf	_md_timeout_cnt,c
  3363                           
  3364                           ; BSR set to: 0
  3365                           ;general_modem.c: 76: numUartRetries = 15;
  3366  002096  0E0F               	movlw	15
  3367  002098  6E44               	movwf	_numUartRetries,c
  3368                           
  3369                           ;general_modem.c: 77: }
  3370  00209A  0012               	return	
  3371  00209C                     l1058:
  3372                           
  3373                           ;general_modem.c: 78: else if (MD_STATE == WAITING && (md_timeout_cnt == 1))
  3374                           
  3375                           ; BSR set to: 0
  3376  00209C  040F               	decf	_MD_STATE,w,c
  3377  00209E  A4D8               	btfss	status,2,c
  3378  0020A0  0012               	return	
  3379  0020A2  0404               	decf	_md_timeout_cnt,w,c
  3380  0020A4  A4D8               	btfss	status,2,c
  3381  0020A6  0012               	return	
  3382                           
  3383                           ;general_modem.c: 79: {
  3384                           ;general_modem.c: 80: MD_STATE = WAITING;
  3385  0020A8  0E01               	movlw	1
  3386  0020AA  6E0F               	movwf	_MD_STATE,c
  3387                           
  3388                           ;general_modem.c: 81: start_md_boot_timer();
  3389  0020AC  EC33  F012         	call	_start_md_boot_timer	;wreg free
  3390                           
  3391                           ;general_modem.c: 82: numUartRetries = 15;
  3392  0020B0  0E0F               	movlw	15
  3393  0020B2  6E44               	movwf	_numUartRetries,c
  3394  0020B4  0012               	return	
  3395  0020B6                     __end_of_start_modem:
  3396                           	opt stack 0
  3397                           tblptru	equ	0xFF8
  3398                           tblptrh	equ	0xFF7
  3399                           tblptrl	equ	0xFF6
  3400                           tablat	equ	0xFF5
  3401                           prodh	equ	0xFF4
  3402                           prodl	equ	0xFF3
  3403                           intcon	equ	0xFF2
  3404                           postinc0	equ	0xFEE
  3405                           wreg	equ	0xFE8
  3406                           postdec1	equ	0xFE5
  3407                           plusw1	equ	0xFE3
  3408                           fsr1l	equ	0xFE1
  3409                           indf2	equ	0xFDF
  3410                           plusw2	equ	0xFDB
  3411                           fsr2h	equ	0xFDA
  3412                           fsr2l	equ	0xFD9
  3413                           status	equ	0xFD8
  3414                           
  3415 ;; *************** function _start_md_boot_timer *****************
  3416 ;; Defined at:
  3417 ;;		line 201 in file "general_modem.c"
  3418 ;; Parameters:    Size  Location     Type
  3419 ;;		None
  3420 ;; Auto vars:     Size  Location     Type
  3421 ;;		None
  3422 ;; Return value:  Size  Location     Type
  3423 ;;                  1    wreg      void 
  3424 ;; Registers used:
  3425 ;;		wreg, status,2, cstack
  3426 ;; Tracked objects:
  3427 ;;		On entry : 0/0
  3428 ;;		On exit  : 0/0
  3429 ;;		Unchanged: 0/0
  3430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3434 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3435 ;;Total ram usage:        0 bytes
  3436 ;; Hardware stack levels used:    1
  3437 ;; Hardware stack levels required when called:    4
  3438 ;; This function calls:
  3439 ;;		_reload_tmr5_pt25s
  3440 ;; This function is called by:
  3441 ;;		_start_modem
  3442 ;; This function uses a non-reentrant model
  3443 ;;
  3444                           
  3445                           	psect	text15
  3446  002466                     __ptext15:
  3447                           	opt stack 0
  3448  002466                     _start_md_boot_timer:
  3449                           	opt stack 23
  3450                           
  3451                           ;general_modem.c: 203: reload_tmr5_pt25s();
  3452                           
  3453                           ;incstack = 0
  3454  002466  ECB0  F011         	call	_reload_tmr5_pt25s	;wreg free
  3455  00246A  0012               	return		;funcret
  3456  00246C                     __end_of_start_md_boot_timer:
  3457                           	opt stack 0
  3458                           tblptru	equ	0xFF8
  3459                           tblptrh	equ	0xFF7
  3460                           tblptrl	equ	0xFF6
  3461                           tablat	equ	0xFF5
  3462                           prodh	equ	0xFF4
  3463                           prodl	equ	0xFF3
  3464                           intcon	equ	0xFF2
  3465                           postinc0	equ	0xFEE
  3466                           wreg	equ	0xFE8
  3467                           postdec1	equ	0xFE5
  3468                           plusw1	equ	0xFE3
  3469                           fsr1l	equ	0xFE1
  3470                           indf2	equ	0xFDF
  3471                           plusw2	equ	0xFDB
  3472                           fsr2h	equ	0xFDA
  3473                           fsr2l	equ	0xFD9
  3474                           status	equ	0xFD8
  3475                           
  3476 ;; *************** function _check_md_state *****************
  3477 ;; Defined at:
  3478 ;;		line 14 in file "general_modem.c"
  3479 ;; Parameters:    Size  Location     Type
  3480 ;;		None
  3481 ;; Auto vars:     Size  Location     Type
  3482 ;;  tempStatus      1   16[BANK0 ] unsigned char 
  3483 ;; Return value:  Size  Location     Type
  3484 ;;                  1    wreg      void 
  3485 ;; Registers used:
  3486 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3487 ;; Tracked objects:
  3488 ;;		On entry : 0/0
  3489 ;;		On exit  : 0/0
  3490 ;;		Unchanged: 0/0
  3491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3493 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3495 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3496 ;;Total ram usage:        1 bytes
  3497 ;; Hardware stack levels used:    1
  3498 ;; Hardware stack levels required when called:    6
  3499 ;; This function calls:
  3500 ;;		_disable_tmr5
  3501 ;;		_startup_ok
  3502 ;; This function is called by:
  3503 ;;		_start_modem
  3504 ;;		_send_data
  3505 ;; This function uses a non-reentrant model
  3506 ;;
  3507                           
  3508                           	psect	text16
  3509  001F1A                     __ptext16:
  3510                           	opt stack 0
  3511  001F1A                     _check_md_state:
  3512                           	opt stack 21
  3513                           
  3514                           ;general_modem.c: 16: uint8_t tempStatus = 0;
  3515                           
  3516                           ;incstack = 0
  3517  001F1A  0E00               	movlw	0
  3518  001F1C  0100               	movlb	0	; () banked
  3519  001F1E  6F70               	movwf	check_md_state@tempStatus& (0+255),b
  3520                           
  3521                           ;general_modem.c: 17: switch (MD_STATE)
  3522  001F20  D025               	goto	l1040
  3523  001F22                     l1041:
  3524                           
  3525                           ; BSR set to: 0
  3526                           ;general_modem.c: 20: LATAbits.LATA3 = 0;
  3527  001F22  9689               	bcf	3977,3,c	;volatile
  3528                           
  3529                           ;general_modem.c: 21: break;
  3530  001F24  0012               	return	
  3531  001F26                     
  3532                           ; BSR set to: 0
  3533                           ;general_modem.c: 23: if (tmr5_cnt >= (4*45) && !modem_awake)
  3534                           
  3535                           ; BSR set to: 0
  3536  001F26  0EB3               	movlw	179
  3537  001F28  641B               	cpfsgt	_tmr5_cnt,c
  3538  001F2A  0012               	return	
  3539                           
  3540                           ; BSR set to: 0
  3541  001F2C  51C2               	movf	_modem_awake& (0+255),w,b
  3542  001F2E  A4D8               	btfss	status,2,c
  3543  001F30  0012               	return	
  3544                           
  3545                           ; BSR set to: 0
  3546                           ;general_modem.c: 24: {
  3547                           ;general_modem.c: 25: disable_tmr5();
  3548  001F32  EC0B  F012         	call	_disable_tmr5	;wreg free
  3549                           
  3550                           ;general_modem.c: 26: tempStatus = startup_ok();
  3551  001F36  ECB2  F001         	call	_startup_ok	;wreg free
  3552  001F3A  0100               	movlb	0	; () banked
  3553  001F3C  6F70               	movwf	check_md_state@tempStatus& (0+255),b
  3554                           
  3555                           ; BSR set to: 0
  3556                           ;general_modem.c: 27: if (tempStatus == 1)
  3557  001F3E  0570               	decf	check_md_state@tempStatus& (0+255),w,b
  3558  001F40  A4D8               	btfss	status,2,c
  3559  001F42  D007               	goto	l1045
  3560                           
  3561                           ; BSR set to: 0
  3562                           ;general_modem.c: 28: {
  3563                           ;general_modem.c: 30: md_timeout_cnt = 0;
  3564  001F44  0E00               	movlw	0
  3565  001F46  6E04               	movwf	_md_timeout_cnt,c
  3566                           
  3567                           ;general_modem.c: 31: modem_awake = 1;
  3568  001F48  0E01               	movlw	1
  3569  001F4A  6FC2               	movwf	_modem_awake& (0+255),b
  3570                           
  3571                           ;general_modem.c: 32: MD_STATE = AWAKE_IDLE;
  3572  001F4C  0E02               	movlw	2
  3573  001F4E  6E0F               	movwf	_MD_STATE,c
  3574                           
  3575                           ;general_modem.c: 33: }
  3576  001F50  0012               	return	
  3577  001F52                     l1045:
  3578                           
  3579                           ; BSR set to: 0
  3580                           ;general_modem.c: 34: else if (tempStatus == 2)
  3581                           
  3582                           ; BSR set to: 0
  3583  001F52  0E02               	movlw	2
  3584  001F54  1970               	xorwf	check_md_state@tempStatus& (0+255),w,b
  3585  001F56  A4D8               	btfss	status,2,c
  3586  001F58  D002               	goto	l1047
  3587                           
  3588                           ; BSR set to: 0
  3589                           ;general_modem.c: 35: __nop();
  3590  001F5A  F000               	nop	
  3591  001F5C  0012               	return	
  3592  001F5E                     l1047:
  3593                           
  3594                           ;general_modem.c: 36: else if (tempStatus == 3)
  3595  001F5E  0E03               	movlw	3
  3596  001F60  0100               	movlb	0	; () banked
  3597  001F62  1970               	xorwf	check_md_state@tempStatus& (0+255),w,b
  3598  001F64  A4D8               	btfss	status,2,c
  3599  001F66  0012               	return	
  3600                           
  3601                           ; BSR set to: 0
  3602                           ;general_modem.c: 37: md_timeout_cnt++;
  3603  001F68  2A04               	incf	_md_timeout_cnt,f,c
  3604                           
  3605                           ; BSR set to: 0
  3606                           ;general_modem.c: 57: }
  3607                           
  3608                           ; BSR set to: 0
  3609                           ;general_modem.c: 56: break;
  3610                           
  3611                           ;general_modem.c: 48: case RETRY_IP:
  3612                           
  3613                           ; BSR set to: 0
  3614                           ;general_modem.c: 47: break;
  3615                           
  3616                           ;general_modem.c: 46: case CONNECTED:
  3617                           
  3618                           ; BSR set to: 0
  3619                           ;general_modem.c: 45: break;
  3620                           
  3621                           ;general_modem.c: 44: case AWAKE_IDLE:
  3622                           
  3623                           ; BSR set to: 0
  3624                           ;general_modem.c: 42: }
  3625                           ;general_modem.c: 43: break;
  3626                           
  3627                           ; BSR set to: 0
  3628                           
  3629                           ;general_modem.c: 40: {
  3630                           
  3631                           ; BSR set to: 0
  3632                           
  3633                           ; BSR set to: 0
  3634                           
  3635                           ; BSR set to: 0
  3636                           ;general_modem.c: 38: }
  3637                           
  3638                           ; BSR set to: 0
  3639                           
  3640                           ; BSR set to: 0
  3641  001F6A  0012               	return	
  3642  001F6C                     l1040:
  3643                           
  3644                           ; BSR set to: 0
  3645                           
  3646                           ; BSR set to: 0
  3647  001F6C  500F               	movf	_MD_STATE,w,c
  3648                           
  3649                           ; Switch size 1, requested type "space"
  3650                           ; Number of cases is 5, Range of values is 0 to 4
  3651                           ; switch strategies available:
  3652                           ; Name         Instructions Cycles
  3653                           ; simple_byte           16     9 (average)
  3654                           ;	Chosen strategy is simple_byte
  3655  001F6E  0A00               	xorlw	0	; case 0
  3656  001F70  B4D8               	btfsc	status,2,c
  3657  001F72  D7D7               	goto	l1041
  3658  001F74  0A01               	xorlw	1	; case 1
  3659  001F76  B4D8               	btfsc	status,2,c
  3660  001F78  D7D6               	goto	l1043
  3661  001F7A  0A03               	xorlw	3	; case 2
  3662  001F7C  B4D8               	btfsc	status,2,c
  3663  001F7E  0012               	return	
  3664  001F80  0A01               	xorlw	1	; case 3
  3665  001F82  B4D8               	btfsc	status,2,c
  3666  001F84  0012               	return	
  3667  001F86  0A07               	xorlw	7	; case 4
  3668  001F88  0012               	return	
  3669  001F8A                     __end_of_check_md_state:
  3670                           	opt stack 0
  3671                           tblptru	equ	0xFF8
  3672                           tblptrh	equ	0xFF7
  3673                           tblptrl	equ	0xFF6
  3674                           tablat	equ	0xFF5
  3675                           prodh	equ	0xFF4
  3676                           prodl	equ	0xFF3
  3677                           intcon	equ	0xFF2
  3678                           postinc0	equ	0xFEE
  3679                           wreg	equ	0xFE8
  3680                           postdec1	equ	0xFE5
  3681                           plusw1	equ	0xFE3
  3682                           fsr1l	equ	0xFE1
  3683                           indf2	equ	0xFDF
  3684                           plusw2	equ	0xFDB
  3685                           fsr2h	equ	0xFDA
  3686                           fsr2l	equ	0xFD9
  3687                           status	equ	0xFD8
  3688                           
  3689 ;; *************** function _startup_ok *****************
  3690 ;; Defined at:
  3691 ;;		line 87 in file "general_modem.c"
  3692 ;; Parameters:    Size  Location     Type
  3693 ;;		None
  3694 ;; Auto vars:     Size  Location     Type
  3695 ;;  ledCfg         16   27[BANK4 ] unsigned char [16]
  3696 ;;  baud           16   11[BANK4 ] unsigned char [16]
  3697 ;;  cereg          12   67[BANK4 ] unsigned char [12]
  3698 ;;  ledpattern     12   55[BANK4 ] unsigned char [12]
  3699 ;;  cmee           12   43[BANK4 ] unsigned char [12]
  3700 ;;  creg           11   90[BANK4 ] unsigned char [11]
  3701 ;;  cpin           11   79[BANK4 ] unsigned char [11]
  3702 ;;  gprs           11    0[BANK4 ] unsigned char [11]
  3703 ;;  queryVersion   10  101[BANK4 ] unsigned char [10]
  3704 ;;  csq             9  111[BANK4 ] unsigned char [9]
  3705 ;;  ate             7  120[BANK4 ] unsigned char [7]
  3706 ;;  at              5  127[BANK4 ] unsigned char [5]
  3707 ;; Return value:  Size  Location     Type
  3708 ;;                  1    wreg      unsigned char 
  3709 ;; Registers used:
  3710 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3711 ;; Tracked objects:
  3712 ;;		On entry : 0/0
  3713 ;;		On exit  : 0/0
  3714 ;;		Unchanged: 0/0
  3715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3717 ;;      Locals:         0       0       0       0       0     132       0       0       0       0       0       0       
      +0       0       0       0       0
  3718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3719 ;;      Totals:         0       0       0       0       0     132       0       0       0       0       0       0       
      +0       0       0       0       0
  3720 ;;Total ram usage:      132 bytes
  3721 ;; Hardware stack levels used:    1
  3722 ;; Hardware stack levels required when called:    5
  3723 ;; This function calls:
  3724 ;;		_clear_at_ok
  3725 ;;		_init_md_uart
  3726 ;;		_md_uart_write_str_ok
  3727 ;;		_parse_cereg_ok
  3728 ;;		_parse_creg_ok
  3729 ;;		_parse_csq_ok
  3730 ;; This function is called by:
  3731 ;;		_check_md_state
  3732 ;; This function uses a non-reentrant model
  3733 ;;
  3734                           
  3735                           	psect	text17
  3736  000364                     __ptext17:
  3737                           	opt stack 0
  3738  000364                     _startup_ok:
  3739                           	opt stack 21
  3740                           
  3741                           ;general_modem.c: 89: uint8_t at[] = "AT\r\n";
  3742                           
  3743                           ;incstack = 0
  3744  000364  EE21  F0B4         	lfsr	2,startup_ok@F6830
  3745  000368  EE14  F07F         	lfsr	1,startup_ok@at
  3746  00036C  0E04               	movlw	4
  3747  00036E                     u8251:
  3748  00036E  CFDB FFE3          	movff	plusw2,plusw1
  3749  000372  06E8               	decf	wreg,f,c
  3750  000374  E2FC               	bc	u8251
  3751                           
  3752                           ;general_modem.c: 90: uint8_t ate[] = "ATE1\r\n";
  3753  000376  EE21  F0AD         	lfsr	2,startup_ok@F6832
  3754  00037A  EE14  F078         	lfsr	1,startup_ok@ate
  3755  00037E  0E06               	movlw	6
  3756  000380                     u8261:
  3757  000380  CFDB FFE3          	movff	plusw2,plusw1
  3758  000384  06E8               	decf	wreg,f,c
  3759  000386  E2FC               	bc	u8261
  3760                           
  3761                           ;general_modem.c: 91: uint8_t cmee[] = "AT+CMEE=2\r\n";
  3762  000388  EE21  F026         	lfsr	2,startup_ok@F6834
  3763  00038C  EE14  F02B         	lfsr	1,startup_ok@cmee
  3764  000390  0E0B               	movlw	11
  3765  000392                     u8271:
  3766  000392  CFDB FFE3          	movff	plusw2,plusw1
  3767  000396  06E8               	decf	wreg,f,c
  3768  000398  E2FC               	bc	u8271
  3769                           
  3770                           ;general_modem.c: 92: uint8_t baud[] = "AT+IPR=115200\r\n";
  3771  00039A  EE22  F0D8         	lfsr	2,startup_ok@F6836
  3772  00039E  EE14  F00B         	lfsr	1,startup_ok@baud
  3773  0003A2  0E0F               	movlw	15
  3774  0003A4                     u8281:
  3775  0003A4  CFDB FFE3          	movff	plusw2,plusw1
  3776  0003A8  06E8               	decf	wreg,f,c
  3777  0003AA  E2FC               	bc	u8281
  3778                           
  3779                           ;general_modem.c: 93: uint8_t ledCfg[] = "AT#GPIO=7,0,2\r\n";
  3780  0003AC  EE22  F0C8         	lfsr	2,startup_ok@F6838
  3781  0003B0  EE14  F01B         	lfsr	1,startup_ok@ledCfg
  3782  0003B4  0E0F               	movlw	15
  3783  0003B6                     u8291:
  3784  0003B6  CFDB FFE3          	movff	plusw2,plusw1
  3785  0003BA  06E8               	decf	wreg,f,c
  3786  0003BC  E2FC               	bc	u8291
  3787                           
  3788                           ;general_modem.c: 94: uint8_t ledpattern[] = "AT#SLED=4\r\n";
  3789  0003BE  EE21  F01A         	lfsr	2,startup_ok@F6840
  3790  0003C2  EE14  F037         	lfsr	1,startup_ok@ledpattern
  3791  0003C6  0E0B               	movlw	11
  3792  0003C8                     u8301:
  3793  0003C8  CFDB FFE3          	movff	plusw2,plusw1
  3794  0003CC  06E8               	decf	wreg,f,c
  3795  0003CE  E2FC               	bc	u8301
  3796                           
  3797                           ;general_modem.c: 95: uint8_t queryVersion[] = "AT#CGMR\r\n";
  3798  0003D0  EE21  F05F         	lfsr	2,startup_ok@F6842
  3799  0003D4  EE14  F065         	lfsr	1,startup_ok@queryVersion
  3800  0003D8  0E09               	movlw	9
  3801  0003DA                     u8311:
  3802  0003DA  CFDB FFE3          	movff	plusw2,plusw1
  3803  0003DE  06E8               	decf	wreg,f,c
  3804  0003E0  E2FC               	bc	u8311
  3805                           
  3806                           ;general_modem.c: 96: uint8_t cpin[] = "AT+CPIN?\r\n";
  3807  0003E2  EE21  F054         	lfsr	2,startup_ok@F6844
  3808  0003E6  EE14  F04F         	lfsr	1,startup_ok@cpin
  3809  0003EA  0E0A               	movlw	10
  3810  0003EC                     u8321:
  3811  0003EC  CFDB FFE3          	movff	plusw2,plusw1
  3812  0003F0  06E8               	decf	wreg,f,c
  3813  0003F2  E2FC               	bc	u8321
  3814                           
  3815                           ;general_modem.c: 97: uint8_t creg[] = "AT+CREG?\r\n";
  3816  0003F4  EE21  F049         	lfsr	2,startup_ok@F6846
  3817  0003F8  EE14  F05A         	lfsr	1,startup_ok@creg
  3818  0003FC  0E0A               	movlw	10
  3819  0003FE                     u8331:
  3820  0003FE  CFDB FFE3          	movff	plusw2,plusw1
  3821  000402  06E8               	decf	wreg,f,c
  3822  000404  E2FC               	bc	u8331
  3823                           
  3824                           ;general_modem.c: 98: uint8_t cereg[] = "AT+CEREG?\r\n";
  3825  000406  EE21  F00E         	lfsr	2,startup_ok@F6848
  3826  00040A  EE14  F043         	lfsr	1,startup_ok@cereg
  3827  00040E  0E0B               	movlw	11
  3828  000410                     u8341:
  3829  000410  CFDB FFE3          	movff	plusw2,plusw1
  3830  000414  06E8               	decf	wreg,f,c
  3831  000416  E2FC               	bc	u8341
  3832                           
  3833                           ;general_modem.c: 99: uint8_t gprs[] = "AT#GPRS?\r\n";
  3834  000418  EE21  F03E         	lfsr	2,startup_ok@F6850
  3835  00041C  EE14  F000         	lfsr	1,startup_ok@gprs
  3836  000420  0E0A               	movlw	10
  3837  000422                     u8351:
  3838  000422  CFDB FFE3          	movff	plusw2,plusw1
  3839  000426  06E8               	decf	wreg,f,c
  3840  000428  E2FC               	bc	u8351
  3841                           
  3842                           ;general_modem.c: 100: uint8_t csq[] = "AT+CSQ\r\n";
  3843  00042A  EE21  F072         	lfsr	2,startup_ok@F6852
  3844  00042E  EE14  F06F         	lfsr	1,startup_ok@csq
  3845  000432  0E08               	movlw	8
  3846  000434                     u8361:
  3847  000434  CFDB FFE3          	movff	plusw2,plusw1
  3848  000438  06E8               	decf	wreg,f,c
  3849  00043A  E2FC               	bc	u8361
  3850                           
  3851                           ;general_modem.c: 103: init_md_uart();
  3852  00043C  EC40  F011         	call	_init_md_uart	;wreg free
  3853                           
  3854                           ;general_modem.c: 106: if (at1 != 1)
  3855  000440  0100               	movlb	0	; () banked
  3856  000442  05C0               	decf	_at1& (0+255),w,b
  3857  000444  B4D8               	btfsc	status,2,c
  3858  000446  D013               	goto	l1091
  3859                           
  3860                           ; BSR set to: 0
  3861                           ;general_modem.c: 107: {
  3862                           ;general_modem.c: 108: at1 = md_uart_write_str_ok((uint8_t *)&at[0], sizeof(at), 1, 0);
  3863  000448  0E7F               	movlw	low startup_ok@at
  3864  00044A  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  3865  00044C  0E04               	movlw	high startup_ok@at
  3866  00044E  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  3867  000450  0E05               	movlw	5
  3868  000452  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  3869  000454  0E01               	movlw	1
  3870  000456  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  3871  000458  0E00               	movlw	0
  3872  00045A  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  3873  00045C  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  3874  000460  0100               	movlb	0	; () banked
  3875  000462  6FC0               	movwf	_at1& (0+255),b
  3876                           
  3877                           ; BSR set to: 0
  3878                           ;general_modem.c: 109: if (at1 == 1)
  3879  000464  05C0               	decf	_at1& (0+255),w,b
  3880  000466  A4D8               	btfss	status,2,c
  3881  000468  D002               	goto	l1091
  3882                           
  3883                           ; BSR set to: 0
  3884                           ;general_modem.c: 110: numUartRetries = 15;
  3885  00046A  0E0F               	movlw	15
  3886  00046C  6E44               	movwf	_numUartRetries,c
  3887  00046E                     l1091:
  3888                           
  3889                           ; BSR set to: 0
  3890                           ;general_modem.c: 111: }
  3891                           ;general_modem.c: 112: if (at1 == 1 && at2 != 1)
  3892                           
  3893                           ; BSR set to: 0
  3894                           
  3895                           ; BSR set to: 0
  3896  00046E  05C0               	decf	_at1& (0+255),w,b
  3897  000470  A4D8               	btfss	status,2,c
  3898  000472  D016               	goto	l1093
  3899                           
  3900                           ; BSR set to: 0
  3901  000474  05BF               	decf	_at2& (0+255),w,b
  3902  000476  B4D8               	btfsc	status,2,c
  3903  000478  D013               	goto	l1093
  3904                           
  3905                           ; BSR set to: 0
  3906                           ;general_modem.c: 113: {
  3907                           ;general_modem.c: 114: at2 = md_uart_write_str_ok((uint8_t *)&ate[0], sizeof(ate), 1, 0)
      +                          ;
  3908  00047A  0E78               	movlw	low startup_ok@ate
  3909  00047C  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  3910  00047E  0E04               	movlw	high startup_ok@ate
  3911  000480  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  3912  000482  0E07               	movlw	7
  3913  000484  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  3914  000486  0E01               	movlw	1
  3915  000488  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  3916  00048A  0E00               	movlw	0
  3917  00048C  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  3918  00048E  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  3919  000492  0100               	movlb	0	; () banked
  3920  000494  6FBF               	movwf	_at2& (0+255),b
  3921                           
  3922                           ; BSR set to: 0
  3923                           ;general_modem.c: 115: if (at2 == 1)
  3924  000496  05BF               	decf	_at2& (0+255),w,b
  3925  000498  A4D8               	btfss	status,2,c
  3926  00049A  D002               	goto	l1093
  3927                           
  3928                           ; BSR set to: 0
  3929                           ;general_modem.c: 116: numUartRetries = 15;
  3930  00049C  0E0F               	movlw	15
  3931  00049E  6E44               	movwf	_numUartRetries,c
  3932  0004A0                     l1093:
  3933                           
  3934                           ; BSR set to: 0
  3935                           ;general_modem.c: 117: }
  3936                           ;general_modem.c: 118: if (at2 == 1 && at3 != 1)
  3937                           
  3938                           ; BSR set to: 0
  3939                           
  3940                           ; BSR set to: 0
  3941  0004A0  05BF               	decf	_at2& (0+255),w,b
  3942  0004A2  A4D8               	btfss	status,2,c
  3943  0004A4  D016               	goto	l1095
  3944                           
  3945                           ; BSR set to: 0
  3946  0004A6  05BE               	decf	_at3& (0+255),w,b
  3947  0004A8  B4D8               	btfsc	status,2,c
  3948  0004AA  D013               	goto	l1095
  3949                           
  3950                           ; BSR set to: 0
  3951                           ;general_modem.c: 119: {
  3952                           ;general_modem.c: 120: at3 = md_uart_write_str_ok((uint8_t *)&cmee[0], sizeof(cmee), 1, 
      +                          0);
  3953  0004AC  0E2B               	movlw	low startup_ok@cmee
  3954  0004AE  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  3955  0004B0  0E04               	movlw	high startup_ok@cmee
  3956  0004B2  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  3957  0004B4  0E0C               	movlw	12
  3958  0004B6  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  3959  0004B8  0E01               	movlw	1
  3960  0004BA  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  3961  0004BC  0E00               	movlw	0
  3962  0004BE  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  3963  0004C0  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  3964  0004C4  0100               	movlb	0	; () banked
  3965  0004C6  6FBE               	movwf	_at3& (0+255),b
  3966                           
  3967                           ; BSR set to: 0
  3968                           ;general_modem.c: 121: if (at3 == 1)
  3969  0004C8  05BE               	decf	_at3& (0+255),w,b
  3970  0004CA  A4D8               	btfss	status,2,c
  3971  0004CC  D002               	goto	l1095
  3972                           
  3973                           ; BSR set to: 0
  3974                           ;general_modem.c: 122: numUartRetries = 15;
  3975  0004CE  0E0F               	movlw	15
  3976  0004D0  6E44               	movwf	_numUartRetries,c
  3977  0004D2                     l1095:
  3978                           
  3979                           ; BSR set to: 0
  3980                           ;general_modem.c: 123: }
  3981                           ;general_modem.c: 124: if (at3 == 1 && at4 != 1)
  3982                           
  3983                           ; BSR set to: 0
  3984                           
  3985                           ; BSR set to: 0
  3986  0004D2  05BE               	decf	_at3& (0+255),w,b
  3987  0004D4  A4D8               	btfss	status,2,c
  3988  0004D6  D016               	goto	l1097
  3989                           
  3990                           ; BSR set to: 0
  3991  0004D8  05BD               	decf	_at4& (0+255),w,b
  3992  0004DA  B4D8               	btfsc	status,2,c
  3993  0004DC  D013               	goto	l1097
  3994                           
  3995                           ; BSR set to: 0
  3996                           ;general_modem.c: 125: {
  3997                           ;general_modem.c: 126: at4 = md_uart_write_str_ok((uint8_t *)&baud[0], sizeof(baud), 1, 
      +                          0);
  3998  0004DE  0E0B               	movlw	low startup_ok@baud
  3999  0004E0  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  4000  0004E2  0E04               	movlw	high startup_ok@baud
  4001  0004E4  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  4002  0004E6  0E10               	movlw	16
  4003  0004E8  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  4004  0004EA  0E01               	movlw	1
  4005  0004EC  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  4006  0004EE  0E00               	movlw	0
  4007  0004F0  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  4008  0004F2  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  4009  0004F6  0100               	movlb	0	; () banked
  4010  0004F8  6FBD               	movwf	_at4& (0+255),b
  4011                           
  4012                           ; BSR set to: 0
  4013                           ;general_modem.c: 127: if (at4 == 1)
  4014  0004FA  05BD               	decf	_at4& (0+255),w,b
  4015  0004FC  A4D8               	btfss	status,2,c
  4016  0004FE  D002               	goto	l1097
  4017                           
  4018                           ; BSR set to: 0
  4019                           ;general_modem.c: 128: numUartRetries = 15;
  4020  000500  0E0F               	movlw	15
  4021  000502  6E44               	movwf	_numUartRetries,c
  4022  000504                     l1097:
  4023                           
  4024                           ; BSR set to: 0
  4025                           ;general_modem.c: 129: }
  4026                           ;general_modem.c: 130: if (at4 == 1 && at5 != 1)
  4027                           
  4028                           ; BSR set to: 0
  4029                           
  4030                           ; BSR set to: 0
  4031  000504  05BD               	decf	_at4& (0+255),w,b
  4032  000506  A4D8               	btfss	status,2,c
  4033  000508  D016               	goto	l1099
  4034                           
  4035                           ; BSR set to: 0
  4036  00050A  05BC               	decf	_at5& (0+255),w,b
  4037  00050C  B4D8               	btfsc	status,2,c
  4038  00050E  D013               	goto	l1099
  4039                           
  4040                           ; BSR set to: 0
  4041                           ;general_modem.c: 131: {
  4042                           ;general_modem.c: 132: at5 = md_uart_write_str_ok((uint8_t *)&ledCfg[0], sizeof(ledCfg),
      +                           1, 0);
  4043  000510  0E1B               	movlw	low startup_ok@ledCfg
  4044  000512  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  4045  000514  0E04               	movlw	high startup_ok@ledCfg
  4046  000516  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  4047  000518  0E10               	movlw	16
  4048  00051A  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  4049  00051C  0E01               	movlw	1
  4050  00051E  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  4051  000520  0E00               	movlw	0
  4052  000522  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  4053  000524  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  4054  000528  0100               	movlb	0	; () banked
  4055  00052A  6FBC               	movwf	_at5& (0+255),b
  4056                           
  4057                           ; BSR set to: 0
  4058                           ;general_modem.c: 133: if (at5 == 1)
  4059  00052C  05BC               	decf	_at5& (0+255),w,b
  4060  00052E  A4D8               	btfss	status,2,c
  4061  000530  D002               	goto	l1099
  4062                           
  4063                           ; BSR set to: 0
  4064                           ;general_modem.c: 134: numUartRetries = 15;
  4065  000532  0E0F               	movlw	15
  4066  000534  6E44               	movwf	_numUartRetries,c
  4067  000536                     l1099:
  4068                           
  4069                           ; BSR set to: 0
  4070                           ;general_modem.c: 135: }
  4071                           ;general_modem.c: 136: if (at5 == 1 && at6 != 1)
  4072                           
  4073                           ; BSR set to: 0
  4074                           
  4075                           ; BSR set to: 0
  4076  000536  05BC               	decf	_at5& (0+255),w,b
  4077  000538  A4D8               	btfss	status,2,c
  4078  00053A  D016               	goto	l1101
  4079                           
  4080                           ; BSR set to: 0
  4081  00053C  05BB               	decf	_at6& (0+255),w,b
  4082  00053E  B4D8               	btfsc	status,2,c
  4083  000540  D013               	goto	l1101
  4084                           
  4085                           ; BSR set to: 0
  4086                           ;general_modem.c: 137: {
  4087                           ;general_modem.c: 138: at6 = md_uart_write_str_ok((uint8_t *)&ledpattern[0], sizeof(ledp
      +                          attern), 1, 0);
  4088  000542  0E37               	movlw	low startup_ok@ledpattern
  4089  000544  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  4090  000546  0E04               	movlw	high startup_ok@ledpattern
  4091  000548  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  4092  00054A  0E0C               	movlw	12
  4093  00054C  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  4094  00054E  0E01               	movlw	1
  4095  000550  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  4096  000552  0E00               	movlw	0
  4097  000554  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  4098  000556  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  4099  00055A  0100               	movlb	0	; () banked
  4100  00055C  6FBB               	movwf	_at6& (0+255),b
  4101                           
  4102                           ; BSR set to: 0
  4103                           ;general_modem.c: 139: if (at6 == 1)
  4104  00055E  05BB               	decf	_at6& (0+255),w,b
  4105  000560  A4D8               	btfss	status,2,c
  4106  000562  D002               	goto	l1101
  4107                           
  4108                           ; BSR set to: 0
  4109                           ;general_modem.c: 140: numUartRetries = 15;
  4110  000564  0E0F               	movlw	15
  4111  000566  6E44               	movwf	_numUartRetries,c
  4112  000568                     l1101:
  4113                           
  4114                           ; BSR set to: 0
  4115                           ;general_modem.c: 141: }
  4116                           ;general_modem.c: 142: if (at6 == 1 && at7 != 1)
  4117                           
  4118                           ; BSR set to: 0
  4119                           
  4120                           ; BSR set to: 0
  4121  000568  05BB               	decf	_at6& (0+255),w,b
  4122  00056A  A4D8               	btfss	status,2,c
  4123  00056C  D016               	goto	l1103
  4124                           
  4125                           ; BSR set to: 0
  4126  00056E  05BA               	decf	_at7& (0+255),w,b
  4127  000570  B4D8               	btfsc	status,2,c
  4128  000572  D013               	goto	l1103
  4129                           
  4130                           ; BSR set to: 0
  4131                           ;general_modem.c: 143: {
  4132                           ;general_modem.c: 144: at7 = md_uart_write_str_ok((uint8_t *)&queryVersion[0], sizeof(qu
      +                          eryVersion), 1, 0);
  4133  000574  0E65               	movlw	low startup_ok@queryVersion
  4134  000576  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  4135  000578  0E04               	movlw	high startup_ok@queryVersion
  4136  00057A  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  4137  00057C  0E0A               	movlw	10
  4138  00057E  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  4139  000580  0E01               	movlw	1
  4140  000582  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  4141  000584  0E00               	movlw	0
  4142  000586  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  4143  000588  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  4144  00058C  0100               	movlb	0	; () banked
  4145  00058E  6FBA               	movwf	_at7& (0+255),b
  4146                           
  4147                           ; BSR set to: 0
  4148                           ;general_modem.c: 145: if (at7 == 1)
  4149  000590  05BA               	decf	_at7& (0+255),w,b
  4150  000592  A4D8               	btfss	status,2,c
  4151  000594  D002               	goto	l1103
  4152                           
  4153                           ; BSR set to: 0
  4154                           ;general_modem.c: 146: numUartRetries = 15;
  4155  000596  0E0F               	movlw	15
  4156  000598  6E44               	movwf	_numUartRetries,c
  4157  00059A                     l1103:
  4158                           
  4159                           ; BSR set to: 0
  4160                           ;general_modem.c: 147: }
  4161                           ;general_modem.c: 148: if (at7 == 1 && at8 != 1)
  4162                           
  4163                           ; BSR set to: 0
  4164                           
  4165                           ; BSR set to: 0
  4166  00059A  05BA               	decf	_at7& (0+255),w,b
  4167  00059C  A4D8               	btfss	status,2,c
  4168  00059E  D016               	goto	l1105
  4169                           
  4170                           ; BSR set to: 0
  4171  0005A0  05B9               	decf	_at8& (0+255),w,b
  4172  0005A2  B4D8               	btfsc	status,2,c
  4173  0005A4  D013               	goto	l1105
  4174                           
  4175                           ; BSR set to: 0
  4176                           ;general_modem.c: 149: {
  4177                           ;general_modem.c: 150: at8 = md_uart_write_str_ok((uint8_t *)&cpin[0], sizeof(cpin), 1, 
      +                          0);
  4178  0005A6  0E4F               	movlw	low startup_ok@cpin
  4179  0005A8  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  4180  0005AA  0E04               	movlw	high startup_ok@cpin
  4181  0005AC  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  4182  0005AE  0E0B               	movlw	11
  4183  0005B0  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  4184  0005B2  0E01               	movlw	1
  4185  0005B4  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  4186  0005B6  0E00               	movlw	0
  4187  0005B8  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  4188  0005BA  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  4189  0005BE  0100               	movlb	0	; () banked
  4190  0005C0  6FB9               	movwf	_at8& (0+255),b
  4191                           
  4192                           ; BSR set to: 0
  4193                           ;general_modem.c: 151: if (at8 == 1)
  4194  0005C2  05B9               	decf	_at8& (0+255),w,b
  4195  0005C4  A4D8               	btfss	status,2,c
  4196  0005C6  D002               	goto	l1105
  4197                           
  4198                           ; BSR set to: 0
  4199                           ;general_modem.c: 152: numUartRetries = 30;
  4200  0005C8  0E1E               	movlw	30
  4201  0005CA  6E44               	movwf	_numUartRetries,c
  4202  0005CC                     l1105:
  4203                           
  4204                           ; BSR set to: 0
  4205                           ;general_modem.c: 153: }
  4206                           ;general_modem.c: 156: if (at8 == 1 && (at9 != 1 || at10 != 1 || at11 != 1))
  4207                           
  4208                           ; BSR set to: 0
  4209                           
  4210                           ; BSR set to: 0
  4211  0005CC  05B9               	decf	_at8& (0+255),w,b
  4212  0005CE  A4D8               	btfss	status,2,c
  4213  0005D0  D05C               	goto	l1115
  4214                           
  4215                           ; BSR set to: 0
  4216  0005D2  05B8               	decf	_at9& (0+255),w,b
  4217  0005D4  A4D8               	btfss	status,2,c
  4218  0005D6  D006               	goto	u8630
  4219                           
  4220                           ; BSR set to: 0
  4221  0005D8  05B7               	decf	_at10& (0+255),w,b
  4222  0005DA  A4D8               	btfss	status,2,c
  4223  0005DC  D003               	goto	u8630
  4224                           
  4225                           ; BSR set to: 0
  4226  0005DE  05B6               	decf	_at11& (0+255),w,b
  4227  0005E0  B4D8               	btfsc	status,2,c
  4228  0005E2  D053               	goto	l1115
  4229  0005E4                     u8630:
  4230                           
  4231                           ; BSR set to: 0
  4232                           ;general_modem.c: 157: {
  4233                           ;general_modem.c: 158: if (at9 != 1)
  4234                           
  4235                           ; BSR set to: 0
  4236  0005E4  05B8               	decf	_at9& (0+255),w,b
  4237  0005E6  B4D8               	btfsc	status,2,c
  4238  0005E8  D015               	goto	l1110
  4239                           
  4240                           ; BSR set to: 0
  4241                           ;general_modem.c: 159: {
  4242                           ;general_modem.c: 160: at9 = md_uart_write_str_ok((uint8_t *)&creg[0], sizeof(creg), 1, 
      +                          0);
  4243  0005EA  0E5A               	movlw	low startup_ok@creg
  4244  0005EC  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  4245  0005EE  0E04               	movlw	high startup_ok@creg
  4246  0005F0  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  4247  0005F2  0E0B               	movlw	11
  4248  0005F4  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  4249  0005F6  0E01               	movlw	1
  4250  0005F8  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  4251  0005FA  0E00               	movlw	0
  4252  0005FC  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  4253  0005FE  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  4254  000602  0100               	movlb	0	; () banked
  4255  000604  6FB8               	movwf	_at9& (0+255),b
  4256                           
  4257                           ; BSR set to: 0
  4258                           ;general_modem.c: 161: if (at9 == 1)
  4259  000606  05B8               	decf	_at9& (0+255),w,b
  4260  000608  A4D8               	btfss	status,2,c
  4261  00060A  D004               	goto	l1110
  4262                           
  4263                           ; BSR set to: 0
  4264                           ;general_modem.c: 162: at9 = parse_creg_ok();
  4265  00060C  ECA3  F00A         	call	_parse_creg_ok	;wreg free
  4266  000610  0100               	movlb	0	; () banked
  4267  000612  6FB8               	movwf	_at9& (0+255),b
  4268  000614                     l1110:
  4269                           
  4270                           ; BSR set to: 0
  4271                           ;general_modem.c: 163: }
  4272                           ;general_modem.c: 164: if (at10 != 1)
  4273                           
  4274                           ; BSR set to: 0
  4275                           
  4276                           ; BSR set to: 0
  4277  000614  05B7               	decf	_at10& (0+255),w,b
  4278  000616  B4D8               	btfsc	status,2,c
  4279  000618  D015               	goto	l1112
  4280                           
  4281                           ; BSR set to: 0
  4282                           ;general_modem.c: 165: {
  4283                           ;general_modem.c: 166: at10 = md_uart_write_str_ok((uint8_t *)&cereg[0], sizeof(cereg), 
      +                          1, 0);
  4284  00061A  0E43               	movlw	low startup_ok@cereg
  4285  00061C  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  4286  00061E  0E04               	movlw	high startup_ok@cereg
  4287  000620  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  4288  000622  0E0C               	movlw	12
  4289  000624  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  4290  000626  0E01               	movlw	1
  4291  000628  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  4292  00062A  0E00               	movlw	0
  4293  00062C  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  4294  00062E  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  4295  000632  0100               	movlb	0	; () banked
  4296  000634  6FB7               	movwf	_at10& (0+255),b
  4297                           
  4298                           ; BSR set to: 0
  4299                           ;general_modem.c: 167: if (at10 == 1)
  4300  000636  05B7               	decf	_at10& (0+255),w,b
  4301  000638  A4D8               	btfss	status,2,c
  4302  00063A  D004               	goto	l1112
  4303                           
  4304                           ; BSR set to: 0
  4305                           ;general_modem.c: 168: at10 = parse_cereg_ok();
  4306  00063C  EC0B  F00A         	call	_parse_cereg_ok	;wreg free
  4307  000640  0100               	movlb	0	; () banked
  4308  000642  6FB7               	movwf	_at10& (0+255),b
  4309  000644                     l1112:
  4310                           
  4311                           ; BSR set to: 0
  4312                           ;general_modem.c: 169: }
  4313                           ;general_modem.c: 170: if (at11 != 1)
  4314                           
  4315                           ; BSR set to: 0
  4316                           
  4317                           ; BSR set to: 0
  4318  000644  05B6               	decf	_at11& (0+255),w,b
  4319  000646  B4D8               	btfsc	status,2,c
  4320  000648  D015               	goto	l1114
  4321                           
  4322                           ; BSR set to: 0
  4323                           ;general_modem.c: 171: {
  4324                           ;general_modem.c: 172: at11 = md_uart_write_str_ok((uint8_t *)&csq[0], sizeof(csq), 1, 0
      +                          );
  4325  00064A  0E6F               	movlw	low startup_ok@csq
  4326  00064C  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  4327  00064E  0E04               	movlw	high startup_ok@csq
  4328  000650  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  4329  000652  0E09               	movlw	9
  4330  000654  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  4331  000656  0E01               	movlw	1
  4332  000658  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  4333  00065A  0E00               	movlw	0
  4334  00065C  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  4335  00065E  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  4336  000662  0100               	movlb	0	; () banked
  4337  000664  6FB6               	movwf	_at11& (0+255),b
  4338                           
  4339                           ; BSR set to: 0
  4340                           ;general_modem.c: 173: if (at11 == 1)
  4341  000666  05B6               	decf	_at11& (0+255),w,b
  4342  000668  A4D8               	btfss	status,2,c
  4343  00066A  D004               	goto	l1114
  4344                           
  4345                           ; BSR set to: 0
  4346                           ;general_modem.c: 174: at11 = parse_csq_ok();
  4347  00066C  ECFA  F007         	call	_parse_csq_ok	;wreg free
  4348  000670  0100               	movlb	0	; () banked
  4349  000672  6FB6               	movwf	_at11& (0+255),b
  4350  000674                     l1114:
  4351                           
  4352                           ; BSR set to: 0
  4353                           ;general_modem.c: 175: }
  4354                           ;general_modem.c: 177: if (at9 == 1 && at10 == 1 && at11 == 1)
  4355                           
  4356                           ; BSR set to: 0
  4357                           
  4358                           ; BSR set to: 0
  4359  000674  05B8               	decf	_at9& (0+255),w,b
  4360  000676  A4D8               	btfss	status,2,c
  4361  000678  D008               	goto	l1115
  4362                           
  4363                           ; BSR set to: 0
  4364  00067A  05B7               	decf	_at10& (0+255),w,b
  4365  00067C  A4D8               	btfss	status,2,c
  4366  00067E  D005               	goto	l1115
  4367                           
  4368                           ; BSR set to: 0
  4369  000680  05B6               	decf	_at11& (0+255),w,b
  4370  000682  A4D8               	btfss	status,2,c
  4371  000684  D002               	goto	l1115
  4372                           
  4373                           ; BSR set to: 0
  4374                           ;general_modem.c: 178: numUartRetries = 15;
  4375  000686  0E0F               	movlw	15
  4376  000688  6E44               	movwf	_numUartRetries,c
  4377  00068A                     l1115:
  4378                           
  4379                           ; BSR set to: 0
  4380                           ;general_modem.c: 179: }
  4381                           ;general_modem.c: 185: if (at1 == 5 || at2 == 5 || at3 == 5 || at4 == 5 || at5 == 5 || a
      +                          t6 == 5 || at7 == 5 || at8 == 5 || at9 == 5 || at10 == 5 || at11 == 5)
  4382                           
  4383                           ; BSR set to: 0
  4384                           
  4385                           ; BSR set to: 0
  4386  00068A  0E05               	movlw	5
  4387  00068C  19C0               	xorwf	_at1& (0+255),w,b
  4388  00068E  B4D8               	btfsc	status,2,c
  4389  000690  D028               	goto	u8830
  4390                           
  4391                           ; BSR set to: 0
  4392  000692  0E05               	movlw	5
  4393  000694  19BF               	xorwf	_at2& (0+255),w,b
  4394  000696  B4D8               	btfsc	status,2,c
  4395  000698  D024               	goto	u8830
  4396                           
  4397                           ; BSR set to: 0
  4398  00069A  0E05               	movlw	5
  4399  00069C  19BE               	xorwf	_at3& (0+255),w,b
  4400  00069E  B4D8               	btfsc	status,2,c
  4401  0006A0  D020               	goto	u8830
  4402                           
  4403                           ; BSR set to: 0
  4404  0006A2  0E05               	movlw	5
  4405  0006A4  19BD               	xorwf	_at4& (0+255),w,b
  4406  0006A6  B4D8               	btfsc	status,2,c
  4407  0006A8  D01C               	goto	u8830
  4408                           
  4409                           ; BSR set to: 0
  4410  0006AA  0E05               	movlw	5
  4411  0006AC  19BC               	xorwf	_at5& (0+255),w,b
  4412  0006AE  B4D8               	btfsc	status,2,c
  4413  0006B0  D018               	goto	u8830
  4414                           
  4415                           ; BSR set to: 0
  4416  0006B2  0E05               	movlw	5
  4417  0006B4  19BB               	xorwf	_at6& (0+255),w,b
  4418  0006B6  B4D8               	btfsc	status,2,c
  4419  0006B8  D014               	goto	u8830
  4420                           
  4421                           ; BSR set to: 0
  4422  0006BA  0E05               	movlw	5
  4423  0006BC  19BA               	xorwf	_at7& (0+255),w,b
  4424  0006BE  B4D8               	btfsc	status,2,c
  4425  0006C0  D010               	goto	u8830
  4426                           
  4427                           ; BSR set to: 0
  4428  0006C2  0E05               	movlw	5
  4429  0006C4  19B9               	xorwf	_at8& (0+255),w,b
  4430  0006C6  B4D8               	btfsc	status,2,c
  4431  0006C8  D00C               	goto	u8830
  4432                           
  4433                           ; BSR set to: 0
  4434  0006CA  0E05               	movlw	5
  4435  0006CC  19B8               	xorwf	_at9& (0+255),w,b
  4436  0006CE  B4D8               	btfsc	status,2,c
  4437  0006D0  D008               	goto	u8830
  4438                           
  4439                           ; BSR set to: 0
  4440  0006D2  0E05               	movlw	5
  4441  0006D4  19B7               	xorwf	_at10& (0+255),w,b
  4442  0006D6  B4D8               	btfsc	status,2,c
  4443  0006D8  D004               	goto	u8830
  4444                           
  4445                           ; BSR set to: 0
  4446  0006DA  0E05               	movlw	5
  4447  0006DC  19B6               	xorwf	_at11& (0+255),w,b
  4448  0006DE  A4D8               	btfss	status,2,c
  4449  0006E0  D004               	goto	l1116
  4450  0006E2                     u8830:
  4451                           
  4452                           ; BSR set to: 0
  4453                           ;general_modem.c: 187: {
  4454                           ;general_modem.c: 188: clear_at_ok();
  4455                           
  4456                           ; BSR set to: 0
  4457  0006E2  ECA9  F010         	call	_clear_at_ok	;wreg free
  4458                           
  4459                           ;general_modem.c: 189: return 5;
  4460  0006E6  0E05               	movlw	5
  4461  0006E8  0012               	return	
  4462  0006EA                     l1116:
  4463                           
  4464                           ;general_modem.c: 191: else if (at1 == 1 && at2 == 1 && at3 == 1 && at4 == 1 && at5 == 1
      +                           && at6 == 1 && at7 == 1 && at8 == 1 && at9 == 1 && at10 == 1 && at11 == 1 && at12 == 1)
  4465  0006EA  0100               	movlb	0	; () banked
  4466  0006EC  05C0               	decf	_at1& (0+255),w,b
  4467  0006EE  A4D8               	btfss	status,2,c
  4468  0006F0  D025               	goto	l1121
  4469                           
  4470                           ; BSR set to: 0
  4471  0006F2  05BF               	decf	_at2& (0+255),w,b
  4472  0006F4  A4D8               	btfss	status,2,c
  4473  0006F6  D022               	goto	l1121
  4474                           
  4475                           ; BSR set to: 0
  4476  0006F8  05BE               	decf	_at3& (0+255),w,b
  4477  0006FA  A4D8               	btfss	status,2,c
  4478  0006FC  D01F               	goto	l1121
  4479                           
  4480                           ; BSR set to: 0
  4481  0006FE  05BD               	decf	_at4& (0+255),w,b
  4482  000700  A4D8               	btfss	status,2,c
  4483  000702  D01C               	goto	l1121
  4484                           
  4485                           ; BSR set to: 0
  4486  000704  05BC               	decf	_at5& (0+255),w,b
  4487  000706  A4D8               	btfss	status,2,c
  4488  000708  D019               	goto	l1121
  4489                           
  4490                           ; BSR set to: 0
  4491  00070A  05BB               	decf	_at6& (0+255),w,b
  4492  00070C  A4D8               	btfss	status,2,c
  4493  00070E  D016               	goto	l1121
  4494                           
  4495                           ; BSR set to: 0
  4496  000710  05BA               	decf	_at7& (0+255),w,b
  4497  000712  A4D8               	btfss	status,2,c
  4498  000714  D013               	goto	l1121
  4499                           
  4500                           ; BSR set to: 0
  4501  000716  05B9               	decf	_at8& (0+255),w,b
  4502  000718  A4D8               	btfss	status,2,c
  4503  00071A  D010               	goto	l1121
  4504                           
  4505                           ; BSR set to: 0
  4506  00071C  05B8               	decf	_at9& (0+255),w,b
  4507  00071E  A4D8               	btfss	status,2,c
  4508  000720  D00D               	goto	l1121
  4509                           
  4510                           ; BSR set to: 0
  4511  000722  05B7               	decf	_at10& (0+255),w,b
  4512  000724  A4D8               	btfss	status,2,c
  4513  000726  D00A               	goto	l1121
  4514                           
  4515                           ; BSR set to: 0
  4516  000728  05B6               	decf	_at11& (0+255),w,b
  4517  00072A  A4D8               	btfss	status,2,c
  4518  00072C  D007               	goto	l1121
  4519                           
  4520                           ; BSR set to: 0
  4521  00072E  05B5               	decf	_at12& (0+255),w,b
  4522  000730  A4D8               	btfss	status,2,c
  4523  000732  D004               	goto	l1121
  4524                           
  4525                           ; BSR set to: 0
  4526                           ;general_modem.c: 193: {
  4527                           ;general_modem.c: 194: clear_at_ok();
  4528  000734  ECA9  F010         	call	_clear_at_ok	;wreg free
  4529                           
  4530                           ;general_modem.c: 195: return 1;
  4531  000738  0E01               	movlw	1
  4532  00073A  0012               	return	
  4533  00073C                     l1121:
  4534                           
  4535                           ;general_modem.c: 196: }
  4536                           ;general_modem.c: 197: return 2;
  4537  00073C  0E02               	movlw	2
  4538  00073E  0012               	return	
  4539  000740                     __end_of_startup_ok:
  4540                           	opt stack 0
  4541                           tblptru	equ	0xFF8
  4542                           tblptrh	equ	0xFF7
  4543                           tblptrl	equ	0xFF6
  4544                           tablat	equ	0xFF5
  4545                           prodh	equ	0xFF4
  4546                           prodl	equ	0xFF3
  4547                           intcon	equ	0xFF2
  4548                           postinc0	equ	0xFEE
  4549                           wreg	equ	0xFE8
  4550                           postdec1	equ	0xFE5
  4551                           plusw1	equ	0xFE3
  4552                           fsr1l	equ	0xFE1
  4553                           indf2	equ	0xFDF
  4554                           plusw2	equ	0xFDB
  4555                           fsr2h	equ	0xFDA
  4556                           fsr2l	equ	0xFD9
  4557                           status	equ	0xFD8
  4558                           
  4559 ;; *************** function _parse_csq_ok *****************
  4560 ;; Defined at:
  4561 ;;		line 247 in file "uart.c"
  4562 ;; Parameters:    Size  Location     Type
  4563 ;;		None
  4564 ;; Auto vars:     Size  Location     Type
  4565 ;;  i               1   14[BANK0 ] unsigned char 
  4566 ;;  csq_rsp         7    4[BANK0 ] unsigned char [7]
  4567 ;;  tens_digit      1   15[BANK0 ] unsigned char 
  4568 ;;  colon_index     1   13[BANK0 ] unsigned char 
  4569 ;;  comma_index     1   12[BANK0 ] unsigned char 
  4570 ;;  ones_digit      1   11[BANK0 ] unsigned char 
  4571 ;; Return value:  Size  Location     Type
  4572 ;;                  1    wreg      unsigned char 
  4573 ;; Registers used:
  4574 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4575 ;; Tracked objects:
  4576 ;;		On entry : 0/0
  4577 ;;		On exit  : 0/0
  4578 ;;		Unchanged: 0/0
  4579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4581 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4582 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4583 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4584 ;;Total ram usage:       16 bytes
  4585 ;; Hardware stack levels used:    1
  4586 ;; Hardware stack levels required when called:    3
  4587 ;; This function calls:
  4588 ;;		Nothing
  4589 ;; This function is called by:
  4590 ;;		_startup_ok
  4591 ;; This function uses a non-reentrant model
  4592 ;;
  4593                           
  4594                           	psect	text18
  4595  000FF4                     __ptext18:
  4596                           	opt stack 0
  4597  000FF4                     _parse_csq_ok:
  4598                           	opt stack 22
  4599                           
  4600                           ;uart.c: 249: uint8_t csq_rsp[] = "+CSQ: ";
  4601                           
  4602                           ;incstack = 0
  4603  000FF4  EE21  F0A6         	lfsr	2,parse_csq_ok@F6857
  4604  000FF8  EE10  F064         	lfsr	1,parse_csq_ok@csq_rsp
  4605  000FFC  0E06               	movlw	6
  4606  000FFE                     u7741:
  4607  000FFE  CFDB FFE3          	movff	plusw2,plusw1
  4608  001002  06E8               	decf	wreg,f,c
  4609  001004  E2FC               	bc	u7741
  4610                           
  4611                           ;uart.c: 250: uint8_t colon_index = 0, comma_index = 0;
  4612  001006  0E00               	movlw	0
  4613  001008  0100               	movlb	0	; () banked
  4614  00100A  6F6D               	movwf	parse_csq_ok@colon_index& (0+255),b
  4615                           
  4616                           ; BSR set to: 0
  4617  00100C  0E00               	movlw	0
  4618  00100E  6F6C               	movwf	parse_csq_ok@comma_index& (0+255),b
  4619                           
  4620                           ; BSR set to: 0
  4621                           ;uart.c: 251: uint8_t tens_digit, ones_digit;
  4622                           ;uart.c: 252: for (uint8_t i = 0; i < sizeof(mdRxBuf); i++)
  4623  001010  0E00               	movlw	0
  4624  001012  6F6E               	movwf	parse_csq_ok@i& (0+255),b
  4625  001014                     l6664:
  4626                           
  4627                           ; BSR set to: 0
  4628  001014  0E9F               	movlw	159
  4629  001016  656E               	cpfsgt	parse_csq_ok@i& (0+255),b
  4630  001018  D001               	goto	l1548
  4631  00101A  D00F               	goto	u7770
  4632  00101C                     l1548:
  4633                           
  4634                           ; BSR set to: 0
  4635                           ;uart.c: 253: {
  4636                           ;uart.c: 254: if (mdRxBuf[i] == csq_rsp[4])
  4637                           
  4638                           ; BSR set to: 0
  4639  00101C  516E               	movf	parse_csq_ok@i& (0+255),w,b
  4640  00101E  0D01               	mullw	1
  4641  001020  0E00               	movlw	low _mdRxBuf
  4642  001022  24F3               	addwf	prodl,w,c
  4643  001024  6ED9               	movwf	fsr2l,c
  4644  001026  0E02               	movlw	high _mdRxBuf
  4645  001028  20F4               	addwfc	prodh,w,c
  4646  00102A  6EDA               	movwf	fsr2h,c
  4647  00102C  5168               	movf	(parse_csq_ok@csq_rsp+4)& (0+255),w,b
  4648  00102E  18DE               	xorwf	postinc2,w,c
  4649  001030  B4D8               	btfsc	status,2,c
  4650                           
  4651                           ; BSR set to: 0
  4652                           ;uart.c: 255: colon_index = i;
  4653  001032  C06E  F06D         	movff	parse_csq_ok@i,parse_csq_ok@colon_index
  4654                           
  4655                           ; BSR set to: 0
  4656                           
  4657                           ; BSR set to: 0
  4658                           
  4659                           ; BSR set to: 0
  4660                           
  4661                           ; BSR set to: 0
  4662  001036  2B6E               	incf	parse_csq_ok@i& (0+255),f,b
  4663  001038  D7ED               	goto	l6664
  4664  00103A                     u7770:
  4665                           
  4666                           ; BSR set to: 0
  4667                           ;uart.c: 258: }
  4668                           ;uart.c: 259: if (mdRxBuf[(uint8_t)(colon_index - 4)] == csq_rsp[0] && mdRxBuf[(uint8_t)
      +                          (colon_index - 3)] == csq_rsp[1] && mdRxBuf[(uint8_t)(colon_index - 2)] == csq_rsp[2] &&
      +                           mdRxBuf[(uint8_t)(colon_index - 1)] == csq_rsp[3])
  4669                           
  4670                           ; BSR set to: 0
  4671  00103A  C06D  F060         	movff	parse_csq_ok@colon_index,??_parse_csq_ok
  4672  00103E  0EFC               	movlw	252
  4673  001040  2760               	addwf	??_parse_csq_ok& (0+255),f,b
  4674  001042  5160               	movf	??_parse_csq_ok& (0+255),w,b
  4675  001044  0D01               	mullw	1
  4676  001046  0E00               	movlw	low _mdRxBuf
  4677  001048  24F3               	addwf	prodl,w,c
  4678  00104A  6ED9               	movwf	fsr2l,c
  4679  00104C  0E02               	movlw	high _mdRxBuf
  4680  00104E  20F4               	addwfc	prodh,w,c
  4681  001050  6EDA               	movwf	fsr2h,c
  4682  001052  5164               	movf	parse_csq_ok@csq_rsp& (0+255),w,b
  4683  001054  18DE               	xorwf	postinc2,w,c
  4684  001056  A4D8               	btfss	status,2,c
  4685  001058  D094               	goto	l1563
  4686                           
  4687                           ; BSR set to: 0
  4688  00105A  C06D  F060         	movff	parse_csq_ok@colon_index,??_parse_csq_ok
  4689  00105E  0EFD               	movlw	253
  4690  001060  2760               	addwf	??_parse_csq_ok& (0+255),f,b
  4691  001062  5160               	movf	??_parse_csq_ok& (0+255),w,b
  4692  001064  0D01               	mullw	1
  4693  001066  0E00               	movlw	low _mdRxBuf
  4694  001068  24F3               	addwf	prodl,w,c
  4695  00106A  6ED9               	movwf	fsr2l,c
  4696  00106C  0E02               	movlw	high _mdRxBuf
  4697  00106E  20F4               	addwfc	prodh,w,c
  4698  001070  6EDA               	movwf	fsr2h,c
  4699  001072  5165               	movf	(parse_csq_ok@csq_rsp+1)& (0+255),w,b
  4700  001074  18DE               	xorwf	postinc2,w,c
  4701  001076  A4D8               	btfss	status,2,c
  4702  001078  D084               	goto	l1563
  4703                           
  4704                           ; BSR set to: 0
  4705  00107A  C06D  F060         	movff	parse_csq_ok@colon_index,??_parse_csq_ok
  4706  00107E  0EFE               	movlw	254
  4707  001080  2760               	addwf	??_parse_csq_ok& (0+255),f,b
  4708  001082  5160               	movf	??_parse_csq_ok& (0+255),w,b
  4709  001084  0D01               	mullw	1
  4710  001086  0E00               	movlw	low _mdRxBuf
  4711  001088  24F3               	addwf	prodl,w,c
  4712  00108A  6ED9               	movwf	fsr2l,c
  4713  00108C  0E02               	movlw	high _mdRxBuf
  4714  00108E  20F4               	addwfc	prodh,w,c
  4715  001090  6EDA               	movwf	fsr2h,c
  4716  001092  5166               	movf	(parse_csq_ok@csq_rsp+2)& (0+255),w,b
  4717  001094  18DE               	xorwf	postinc2,w,c
  4718  001096  A4D8               	btfss	status,2,c
  4719  001098  D074               	goto	l1563
  4720                           
  4721                           ; BSR set to: 0
  4722  00109A  C06D  F060         	movff	parse_csq_ok@colon_index,??_parse_csq_ok
  4723  00109E  0EFF               	movlw	255
  4724  0010A0  2760               	addwf	??_parse_csq_ok& (0+255),f,b
  4725  0010A2  5160               	movf	??_parse_csq_ok& (0+255),w,b
  4726  0010A4  0D01               	mullw	1
  4727  0010A6  0E00               	movlw	low _mdRxBuf
  4728  0010A8  24F3               	addwf	prodl,w,c
  4729  0010AA  6ED9               	movwf	fsr2l,c
  4730  0010AC  0E02               	movlw	high _mdRxBuf
  4731  0010AE  20F4               	addwfc	prodh,w,c
  4732  0010B0  6EDA               	movwf	fsr2h,c
  4733  0010B2  5167               	movf	(parse_csq_ok@csq_rsp+3)& (0+255),w,b
  4734  0010B4  18DE               	xorwf	postinc2,w,c
  4735  0010B6  A4D8               	btfss	status,2,c
  4736  0010B8  D064               	goto	l1563
  4737                           
  4738                           ; BSR set to: 0
  4739                           ;uart.c: 261: {
  4740                           ;uart.c: 262: if (comma_index - colon_index > 3)
  4741  0010BA  516D               	movf	parse_csq_ok@colon_index& (0+255),w,b
  4742  0010BC  6F60               	movwf	??_parse_csq_ok& (0+255),b
  4743  0010BE  6B61               	clrf	(??_parse_csq_ok+1)& (0+255),b
  4744  0010C0  1F60               	comf	??_parse_csq_ok& (0+255),f,b
  4745  0010C2  1F61               	comf	(??_parse_csq_ok+1)& (0+255),f,b
  4746  0010C4  4B60               	infsnz	??_parse_csq_ok& (0+255),f,b
  4747  0010C6  2B61               	incf	(??_parse_csq_ok+1)& (0+255),f,b
  4748  0010C8  516C               	movf	parse_csq_ok@comma_index& (0+255),w,b
  4749  0010CA  6F62               	movwf	(??_parse_csq_ok+2)& (0+255),b
  4750  0010CC  6B63               	clrf	(??_parse_csq_ok+3)& (0+255),b
  4751  0010CE  5160               	movf	??_parse_csq_ok& (0+255),w,b
  4752  0010D0  2762               	addwf	(??_parse_csq_ok+2)& (0+255),f,b
  4753  0010D2  5161               	movf	(??_parse_csq_ok+1)& (0+255),w,b
  4754  0010D4  2363               	addwfc	(??_parse_csq_ok+3)& (0+255),f,b
  4755  0010D6  BF63               	btfsc	(??_parse_csq_ok+3)& (0+255),7,b
  4756  0010D8  D040               	goto	l1553
  4757  0010DA  5163               	movf	(??_parse_csq_ok+3)& (0+255),w,b
  4758  0010DC  E104               	bnz	u7820
  4759  0010DE  0E04               	movlw	4
  4760  0010E0  5D62               	subwf	(??_parse_csq_ok+2)& (0+255),w,b
  4761  0010E2  A0D8               	btfss	status,0,c
  4762  0010E4  D03A               	goto	l1553
  4763  0010E6                     u7820:
  4764                           
  4765                           ; BSR set to: 0
  4766                           ;uart.c: 263: {
  4767                           ;uart.c: 264: tens_digit = (mdRxBuf[(uint8_t)(comma_index - 2)]);
  4768  0010E6  C06C  F060         	movff	parse_csq_ok@comma_index,??_parse_csq_ok
  4769  0010EA  0EFE               	movlw	254
  4770  0010EC  2760               	addwf	??_parse_csq_ok& (0+255),f,b
  4771  0010EE  5160               	movf	??_parse_csq_ok& (0+255),w,b
  4772  0010F0  0D01               	mullw	1
  4773  0010F2  0E00               	movlw	low _mdRxBuf
  4774  0010F4  24F3               	addwf	prodl,w,c
  4775  0010F6  6ED9               	movwf	fsr2l,c
  4776  0010F8  0E02               	movlw	high _mdRxBuf
  4777  0010FA  20F4               	addwfc	prodh,w,c
  4778  0010FC  6EDA               	movwf	fsr2h,c
  4779  0010FE  50DF               	movf	indf2,w,c
  4780  001100  6F6F               	movwf	parse_csq_ok@tens_digit& (0+255),b
  4781                           
  4782                           ; BSR set to: 0
  4783                           ;uart.c: 265: if (tens_digit >= 0x41)
  4784  001102  0E40               	movlw	64
  4785  001104  656F               	cpfsgt	parse_csq_ok@tens_digit& (0+255),b
  4786  001106  D003               	goto	l1554
  4787                           
  4788                           ; BSR set to: 0
  4789                           ;uart.c: 266: tens_digit = (uint8_t)((tens_digit - 0x41 + 0x0A) * 10);
  4790  001108  516F               	movf	parse_csq_ok@tens_digit& (0+255),w,b
  4791  00110A  0FC9               	addlw	201
  4792  00110C  D002               	goto	L2
  4793  00110E                     l1554:
  4794                           
  4795                           ; BSR set to: 0
  4796                           ;uart.c: 267: else
  4797                           ;uart.c: 268: tens_digit = (uint8_t)((tens_digit - 0x30) * 10);
  4798                           
  4799                           ; BSR set to: 0
  4800  00110E  516F               	movf	parse_csq_ok@tens_digit& (0+255),w,b
  4801  001110  0FD0               	addlw	208
  4802  001112                     L2:
  4803  001112  0D0A               	mullw	10
  4804  001114  CFF3 F06F          	movff	prodl,parse_csq_ok@tens_digit
  4805                           
  4806                           ; BSR set to: 0
  4807                           ;uart.c: 269: ones_digit = (mdRxBuf[(uint8_t)(comma_index - 1)]);
  4808                           
  4809                           ; BSR set to: 0
  4810  001118  C06C  F060         	movff	parse_csq_ok@comma_index,??_parse_csq_ok
  4811  00111C  0EFF               	movlw	255
  4812  00111E  2760               	addwf	??_parse_csq_ok& (0+255),f,b
  4813  001120  5160               	movf	??_parse_csq_ok& (0+255),w,b
  4814  001122  0D01               	mullw	1
  4815  001124  0E00               	movlw	low _mdRxBuf
  4816  001126  24F3               	addwf	prodl,w,c
  4817  001128  6ED9               	movwf	fsr2l,c
  4818  00112A  0E02               	movlw	high _mdRxBuf
  4819  00112C  20F4               	addwfc	prodh,w,c
  4820  00112E  6EDA               	movwf	fsr2h,c
  4821  001130  50DF               	movf	indf2,w,c
  4822  001132  6F6B               	movwf	parse_csq_ok@ones_digit& (0+255),b
  4823                           
  4824                           ; BSR set to: 0
  4825                           ;uart.c: 270: if (ones_digit >= 0x41)
  4826  001134  0E40               	movlw	64
  4827  001136  656B               	cpfsgt	parse_csq_ok@ones_digit& (0+255),b
  4828  001138  D002               	goto	l1556
  4829                           
  4830                           ; BSR set to: 0
  4831                           ;uart.c: 271: ones_digit -= 0x41;
  4832  00113A  0E41               	movlw	65
  4833  00113C  D001               	goto	L1
  4834  00113E                     l1556:
  4835                           
  4836                           ; BSR set to: 0
  4837                           ;uart.c: 272: else
  4838                           ;uart.c: 273: ones_digit -= 0x30;
  4839                           
  4840                           ; BSR set to: 0
  4841  00113E  0E30               	movlw	48
  4842  001140                     L1:
  4843  001140  5F6B               	subwf	parse_csq_ok@ones_digit& (0+255),f,b
  4844                           
  4845                           ; BSR set to: 0
  4846                           ;uart.c: 274: tens_digit += ones_digit;
  4847  001142  516B               	movf	parse_csq_ok@ones_digit& (0+255),w,b
  4848  001144  276F               	addwf	parse_csq_ok@tens_digit& (0+255),f,b
  4849                           
  4850                           ; BSR set to: 0
  4851                           ;uart.c: 275: if (tens_digit > 0 && tens_digit < 99)
  4852  001146  516F               	movf	parse_csq_ok@tens_digit& (0+255),w,b
  4853  001148  B4D8               	btfsc	status,2,c
  4854  00114A  D005               	goto	l1558
  4855                           
  4856                           ; BSR set to: 0
  4857  00114C  0E63               	movlw	99
  4858  00114E  616F               	cpfslt	parse_csq_ok@tens_digit& (0+255),b
  4859  001150  D002               	goto	l1558
  4860  001152                     u7860:
  4861                           
  4862                           ; BSR set to: 0
  4863                           ;uart.c: 276: return 1;
  4864  001152  0E01               	movlw	1
  4865                           
  4866                           ; BSR set to: 0
  4867  001154  0012               	return	
  4868  001156                     l1558:
  4869                           
  4870                           ; BSR set to: 0
  4871                           ;uart.c: 277: else
  4872                           ;uart.c: 278: return 4;
  4873                           
  4874                           ; BSR set to: 0
  4875  001156  0E04               	movlw	4
  4876                           
  4877                           ; BSR set to: 0
  4878  001158  0012               	return	
  4879  00115A                     l1553:
  4880                           
  4881                           ; BSR set to: 0
  4882                           ;uart.c: 280: else
  4883                           ;uart.c: 281: {
  4884                           ;uart.c: 282: ones_digit = (uint8_t)(mdRxBuf[(uint8_t)(comma_index - 1)] - 0x30);
  4885                           
  4886                           ; BSR set to: 0
  4887  00115A  C06C  F060         	movff	parse_csq_ok@comma_index,??_parse_csq_ok
  4888  00115E  0EFF               	movlw	255
  4889  001160  2760               	addwf	??_parse_csq_ok& (0+255),f,b
  4890  001162  5160               	movf	??_parse_csq_ok& (0+255),w,b
  4891  001164  0D01               	mullw	1
  4892  001166  0E00               	movlw	low _mdRxBuf
  4893  001168  24F3               	addwf	prodl,w,c
  4894  00116A  6ED9               	movwf	fsr2l,c
  4895  00116C  0E02               	movlw	high _mdRxBuf
  4896  00116E  20F4               	addwfc	prodh,w,c
  4897  001170  6EDA               	movwf	fsr2h,c
  4898  001172  50DF               	movf	indf2,w,c
  4899  001174  0FD0               	addlw	208
  4900  001176  6F6B               	movwf	parse_csq_ok@ones_digit& (0+255),b
  4901                           
  4902                           ; BSR set to: 0
  4903                           ;uart.c: 283: if (ones_digit > 0)
  4904  001178  516B               	movf	parse_csq_ok@ones_digit& (0+255),w,b
  4905  00117A  A4D8               	btfss	status,2,c
  4906  00117C  D7EA               	goto	u7860
  4907                           
  4908                           ; BSR set to: 0
  4909                           ;uart.c: 285: else
  4910                           ;uart.c: 286: return 4;
  4911                           
  4912                           ; BSR set to: 0
  4913                           
  4914                           ; BSR set to: 0
  4915                           
  4916                           ; BSR set to: 0
  4917                           
  4918                           ; BSR set to: 0
  4919                           ;uart.c: 284: return 1;
  4920  00117E  0E04               	movlw	4
  4921                           
  4922                           ; BSR set to: 0
  4923  001180  0012               	return	
  4924  001182                     l1563:
  4925                           
  4926                           ; BSR set to: 0
  4927                           ;uart.c: 287: }
  4928                           ;uart.c: 288: }
  4929                           ;uart.c: 289: return 4;
  4930                           
  4931                           ; BSR set to: 0
  4932                           
  4933                           ; BSR set to: 0
  4934                           
  4935                           ; BSR set to: 0
  4936  001182  0E04               	movlw	4
  4937  001184  0012               	return	
  4938  001186                     __end_of_parse_csq_ok:
  4939                           	opt stack 0
  4940                           tblptru	equ	0xFF8
  4941                           tblptrh	equ	0xFF7
  4942                           tblptrl	equ	0xFF6
  4943                           tablat	equ	0xFF5
  4944                           prodh	equ	0xFF4
  4945                           prodl	equ	0xFF3
  4946                           intcon	equ	0xFF2
  4947                           postinc0	equ	0xFEE
  4948                           wreg	equ	0xFE8
  4949                           postdec1	equ	0xFE5
  4950                           plusw1	equ	0xFE3
  4951                           fsr1l	equ	0xFE1
  4952                           indf2	equ	0xFDF
  4953                           postinc2	equ	0xFDE
  4954                           plusw2	equ	0xFDB
  4955                           fsr2h	equ	0xFDA
  4956                           fsr2l	equ	0xFD9
  4957                           status	equ	0xFD8
  4958                           
  4959 ;; *************** function _parse_creg_ok *****************
  4960 ;; Defined at:
  4961 ;;		line 206 in file "uart.c"
  4962 ;; Parameters:    Size  Location     Type
  4963 ;;		None
  4964 ;; Auto vars:     Size  Location     Type
  4965 ;;  i               1   11[BANK0 ] unsigned char 
  4966 ;;  creg_rsp        8    2[BANK0 ] unsigned char [8]
  4967 ;;  registration    1   10[BANK0 ] unsigned char 
  4968 ;; Return value:  Size  Location     Type
  4969 ;;                  1    wreg      unsigned char 
  4970 ;; Registers used:
  4971 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4972 ;; Tracked objects:
  4973 ;;		On entry : 0/0
  4974 ;;		On exit  : 0/0
  4975 ;;		Unchanged: 0/0
  4976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4978 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4979 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4980 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4981 ;;Total ram usage:       12 bytes
  4982 ;; Hardware stack levels used:    1
  4983 ;; Hardware stack levels required when called:    3
  4984 ;; This function calls:
  4985 ;;		Nothing
  4986 ;; This function is called by:
  4987 ;;		_startup_ok
  4988 ;; This function uses a non-reentrant model
  4989 ;;
  4990                           
  4991                           	psect	text19
  4992  001546                     __ptext19:
  4993                           	opt stack 0
  4994  001546                     _parse_creg_ok:
  4995                           	opt stack 22
  4996                           
  4997                           ;uart.c: 208: uint8_t creg_rsp[] = "+CREG: ";
  4998                           
  4999                           ; BSR set to: 0
  5000                           ;incstack = 0
  5001  001546  EE21  F096         	lfsr	2,parse_creg_ok@F6836
  5002  00154A  EE10  F062         	lfsr	1,parse_creg_ok@creg_rsp
  5003  00154E  0E07               	movlw	7
  5004  001550                     u7511:
  5005  001550  CFDB FFE3          	movff	plusw2,plusw1
  5006  001554  06E8               	decf	wreg,f,c
  5007  001556  E2FC               	bc	u7511
  5008                           
  5009                           ;uart.c: 209: uint8_t registration_num;
  5010                           ;uart.c: 210: for (uint8_t i = 0; i < sizeof(mdRxBuf); i++)
  5011  001558  0E00               	movlw	0
  5012  00155A  0100               	movlb	0	; () banked
  5013  00155C  6F6B               	movwf	parse_creg_ok@i& (0+255),b
  5014  00155E                     l6570:
  5015                           
  5016                           ; BSR set to: 0
  5017  00155E  0E9F               	movlw	159
  5018  001560  656B               	cpfsgt	parse_creg_ok@i& (0+255),b
  5019  001562  D001               	goto	l1528
  5020  001564  D076               	goto	u7610
  5021  001566                     l1528:
  5022                           
  5023                           ; BSR set to: 0
  5024                           ;uart.c: 211: {
  5025                           ;uart.c: 212: if (mdRxBuf[i] == creg_rsp[0] && mdRxBuf[(uint8_t)(i + 1)] == creg_rsp[1] 
      +                          && mdRxBuf[(uint8_t)(i + 2)] == creg_rsp[2] && mdRxBuf[(uint8_t)(i + 3)] == creg_rsp[3] 
      +                          && mdRxBuf[(uint8_t)(i + 4)] == creg_rsp[4] && mdRxBuf[(uint8_t)(i + 5)] == creg_rsp[5])
  5026                           
  5027                           ; BSR set to: 0
  5028  001566  516B               	movf	parse_creg_ok@i& (0+255),w,b
  5029  001568  0D01               	mullw	1
  5030  00156A  0E00               	movlw	low _mdRxBuf
  5031  00156C  24F3               	addwf	prodl,w,c
  5032  00156E  6ED9               	movwf	fsr2l,c
  5033  001570  0E02               	movlw	high _mdRxBuf
  5034  001572  20F4               	addwfc	prodh,w,c
  5035  001574  6EDA               	movwf	fsr2h,c
  5036  001576  5162               	movf	parse_creg_ok@creg_rsp& (0+255),w,b
  5037  001578  18DE               	xorwf	postinc2,w,c
  5038  00157A  A4D8               	btfss	status,2,c
  5039  00157C  D068               	goto	l1533
  5040                           
  5041                           ; BSR set to: 0
  5042  00157E  C06B  F060         	movff	parse_creg_ok@i,??_parse_creg_ok
  5043  001582  0E01               	movlw	1
  5044  001584  2760               	addwf	??_parse_creg_ok& (0+255),f,b
  5045  001586  5160               	movf	??_parse_creg_ok& (0+255),w,b
  5046  001588  0D01               	mullw	1
  5047  00158A  0E00               	movlw	low _mdRxBuf
  5048  00158C  24F3               	addwf	prodl,w,c
  5049  00158E  6ED9               	movwf	fsr2l,c
  5050  001590  0E02               	movlw	high _mdRxBuf
  5051  001592  20F4               	addwfc	prodh,w,c
  5052  001594  6EDA               	movwf	fsr2h,c
  5053  001596  5163               	movf	(parse_creg_ok@creg_rsp+1)& (0+255),w,b
  5054  001598  18DE               	xorwf	postinc2,w,c
  5055  00159A  A4D8               	btfss	status,2,c
  5056  00159C  D058               	goto	l1533
  5057                           
  5058                           ; BSR set to: 0
  5059  00159E  C06B  F060         	movff	parse_creg_ok@i,??_parse_creg_ok
  5060  0015A2  0E02               	movlw	2
  5061  0015A4  2760               	addwf	??_parse_creg_ok& (0+255),f,b
  5062  0015A6  5160               	movf	??_parse_creg_ok& (0+255),w,b
  5063  0015A8  0D01               	mullw	1
  5064  0015AA  0E00               	movlw	low _mdRxBuf
  5065  0015AC  24F3               	addwf	prodl,w,c
  5066  0015AE  6ED9               	movwf	fsr2l,c
  5067  0015B0  0E02               	movlw	high _mdRxBuf
  5068  0015B2  20F4               	addwfc	prodh,w,c
  5069  0015B4  6EDA               	movwf	fsr2h,c
  5070  0015B6  5164               	movf	(parse_creg_ok@creg_rsp+2)& (0+255),w,b
  5071  0015B8  18DE               	xorwf	postinc2,w,c
  5072  0015BA  A4D8               	btfss	status,2,c
  5073  0015BC  D048               	goto	l1533
  5074                           
  5075                           ; BSR set to: 0
  5076  0015BE  C06B  F060         	movff	parse_creg_ok@i,??_parse_creg_ok
  5077  0015C2  0E03               	movlw	3
  5078  0015C4  2760               	addwf	??_parse_creg_ok& (0+255),f,b
  5079  0015C6  5160               	movf	??_parse_creg_ok& (0+255),w,b
  5080  0015C8  0D01               	mullw	1
  5081  0015CA  0E00               	movlw	low _mdRxBuf
  5082  0015CC  24F3               	addwf	prodl,w,c
  5083  0015CE  6ED9               	movwf	fsr2l,c
  5084  0015D0  0E02               	movlw	high _mdRxBuf
  5085  0015D2  20F4               	addwfc	prodh,w,c
  5086  0015D4  6EDA               	movwf	fsr2h,c
  5087  0015D6  5165               	movf	(parse_creg_ok@creg_rsp+3)& (0+255),w,b
  5088  0015D8  18DE               	xorwf	postinc2,w,c
  5089  0015DA  A4D8               	btfss	status,2,c
  5090  0015DC  D038               	goto	l1533
  5091                           
  5092                           ; BSR set to: 0
  5093  0015DE  C06B  F060         	movff	parse_creg_ok@i,??_parse_creg_ok
  5094  0015E2  0E04               	movlw	4
  5095  0015E4  2760               	addwf	??_parse_creg_ok& (0+255),f,b
  5096  0015E6  5160               	movf	??_parse_creg_ok& (0+255),w,b
  5097  0015E8  0D01               	mullw	1
  5098  0015EA  0E00               	movlw	low _mdRxBuf
  5099  0015EC  24F3               	addwf	prodl,w,c
  5100  0015EE  6ED9               	movwf	fsr2l,c
  5101  0015F0  0E02               	movlw	high _mdRxBuf
  5102  0015F2  20F4               	addwfc	prodh,w,c
  5103  0015F4  6EDA               	movwf	fsr2h,c
  5104  0015F6  5166               	movf	(parse_creg_ok@creg_rsp+4)& (0+255),w,b
  5105  0015F8  18DE               	xorwf	postinc2,w,c
  5106  0015FA  A4D8               	btfss	status,2,c
  5107  0015FC  D028               	goto	l1533
  5108                           
  5109                           ; BSR set to: 0
  5110  0015FE  C06B  F060         	movff	parse_creg_ok@i,??_parse_creg_ok
  5111  001602  0E05               	movlw	5
  5112  001604  2760               	addwf	??_parse_creg_ok& (0+255),f,b
  5113  001606  5160               	movf	??_parse_creg_ok& (0+255),w,b
  5114  001608  0D01               	mullw	1
  5115  00160A  0E00               	movlw	low _mdRxBuf
  5116  00160C  24F3               	addwf	prodl,w,c
  5117  00160E  6ED9               	movwf	fsr2l,c
  5118  001610  0E02               	movlw	high _mdRxBuf
  5119  001612  20F4               	addwfc	prodh,w,c
  5120  001614  6EDA               	movwf	fsr2h,c
  5121  001616  5167               	movf	(parse_creg_ok@creg_rsp+5)& (0+255),w,b
  5122  001618  18DE               	xorwf	postinc2,w,c
  5123  00161A  A4D8               	btfss	status,2,c
  5124  00161C  D018               	goto	l1533
  5125                           
  5126                           ; BSR set to: 0
  5127                           ;uart.c: 215: {
  5128                           ;uart.c: 216: registration_num = mdRxBuf[(uint8_t)(i + 9)];
  5129  00161E  C06B  F060         	movff	parse_creg_ok@i,??_parse_creg_ok
  5130  001622  0E09               	movlw	9
  5131  001624  2760               	addwf	??_parse_creg_ok& (0+255),f,b
  5132  001626  5160               	movf	??_parse_creg_ok& (0+255),w,b
  5133  001628  0D01               	mullw	1
  5134  00162A  0E00               	movlw	low _mdRxBuf
  5135  00162C  24F3               	addwf	prodl,w,c
  5136  00162E  6ED9               	movwf	fsr2l,c
  5137  001630  0E02               	movlw	high _mdRxBuf
  5138  001632  20F4               	addwfc	prodh,w,c
  5139  001634  6EDA               	movwf	fsr2h,c
  5140  001636  50DF               	movf	indf2,w,c
  5141  001638  6F6A               	movwf	parse_creg_ok@registration_num& (0+255),b
  5142                           
  5143                           ; BSR set to: 0
  5144                           ;uart.c: 217: if (registration_num > '0' && registration_num < '6')
  5145  00163A  0E30               	movlw	48
  5146  00163C  656A               	cpfsgt	parse_creg_ok@registration_num& (0+255),b
  5147  00163E  D005               	goto	l1531
  5148                           
  5149                           ; BSR set to: 0
  5150  001640  0E36               	movlw	54
  5151  001642  616A               	cpfslt	parse_creg_ok@registration_num& (0+255),b
  5152  001644  D002               	goto	l1531
  5153                           
  5154                           ; BSR set to: 0
  5155                           ;uart.c: 218: return 1;
  5156  001646  0E01               	movlw	1
  5157                           
  5158                           ; BSR set to: 0
  5159  001648  0012               	return	
  5160  00164A                     l1531:
  5161                           
  5162                           ; BSR set to: 0
  5163                           ;uart.c: 219: else
  5164                           ;uart.c: 220: return 4;
  5165                           
  5166                           ; BSR set to: 0
  5167  00164A  0E04               	movlw	4
  5168                           
  5169                           ; BSR set to: 0
  5170  00164C  0012               	return	
  5171  00164E                     l1533:
  5172                           
  5173                           ; BSR set to: 0
  5174                           
  5175                           ; BSR set to: 0
  5176                           
  5177                           ; BSR set to: 0
  5178  00164E  2B6B               	incf	parse_creg_ok@i& (0+255),f,b
  5179  001650  D786               	goto	l6570
  5180  001652                     u7610:
  5181                           
  5182                           ; BSR set to: 0
  5183                           ;uart.c: 221: }
  5184                           ;uart.c: 222: }
  5185                           ;uart.c: 223: return 4;
  5186                           
  5187                           ; BSR set to: 0
  5188  001652  0E04               	movlw	4
  5189  001654  0012               	return	
  5190  001656                     __end_of_parse_creg_ok:
  5191                           	opt stack 0
  5192                           tblptru	equ	0xFF8
  5193                           tblptrh	equ	0xFF7
  5194                           tblptrl	equ	0xFF6
  5195                           tablat	equ	0xFF5
  5196                           prodh	equ	0xFF4
  5197                           prodl	equ	0xFF3
  5198                           intcon	equ	0xFF2
  5199                           postinc0	equ	0xFEE
  5200                           wreg	equ	0xFE8
  5201                           postdec1	equ	0xFE5
  5202                           plusw1	equ	0xFE3
  5203                           fsr1l	equ	0xFE1
  5204                           indf2	equ	0xFDF
  5205                           postinc2	equ	0xFDE
  5206                           plusw2	equ	0xFDB
  5207                           fsr2h	equ	0xFDA
  5208                           fsr2l	equ	0xFD9
  5209                           status	equ	0xFD8
  5210                           
  5211 ;; *************** function _parse_cereg_ok *****************
  5212 ;; Defined at:
  5213 ;;		line 226 in file "uart.c"
  5214 ;; Parameters:    Size  Location     Type
  5215 ;;		None
  5216 ;; Auto vars:     Size  Location     Type
  5217 ;;  i               1   12[BANK0 ] unsigned char 
  5218 ;;  cereg_rsp       9    2[BANK0 ] unsigned char [9]
  5219 ;;  registration    1   11[BANK0 ] unsigned char 
  5220 ;; Return value:  Size  Location     Type
  5221 ;;                  1    wreg      unsigned char 
  5222 ;; Registers used:
  5223 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5224 ;; Tracked objects:
  5225 ;;		On entry : 0/0
  5226 ;;		On exit  : 0/0
  5227 ;;		Unchanged: 0/0
  5228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5230 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5231 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5232 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5233 ;;Total ram usage:       13 bytes
  5234 ;; Hardware stack levels used:    1
  5235 ;; Hardware stack levels required when called:    3
  5236 ;; This function calls:
  5237 ;;		Nothing
  5238 ;; This function is called by:
  5239 ;;		_startup_ok
  5240 ;; This function uses a non-reentrant model
  5241 ;;
  5242                           
  5243                           	psect	text20
  5244  001416                     __ptext20:
  5245                           	opt stack 0
  5246  001416                     _parse_cereg_ok:
  5247                           	opt stack 22
  5248                           
  5249                           ;uart.c: 228: uint8_t cereg_rsp[] = "+CEREG: ";
  5250                           
  5251                           ; BSR set to: 0
  5252                           ;incstack = 0
  5253  001416  EE21  F069         	lfsr	2,parse_cereg_ok@F6846
  5254  00141A  EE10  F062         	lfsr	1,parse_cereg_ok@cereg_rsp
  5255  00141E  0E08               	movlw	8
  5256  001420                     u7621:
  5257  001420  CFDB FFE3          	movff	plusw2,plusw1
  5258  001424  06E8               	decf	wreg,f,c
  5259  001426  E2FC               	bc	u7621
  5260                           
  5261                           ;uart.c: 229: uint8_t registration_num;
  5262                           ;uart.c: 230: for (uint8_t i = 0; i < sizeof(mdRxBuf); i++)
  5263  001428  0E00               	movlw	0
  5264  00142A  0100               	movlb	0	; () banked
  5265  00142C  6F6C               	movwf	parse_cereg_ok@i& (0+255),b
  5266  00142E                     l6614:
  5267                           
  5268                           ; BSR set to: 0
  5269  00142E  0E9F               	movlw	159
  5270  001430  656C               	cpfsgt	parse_cereg_ok@i& (0+255),b
  5271  001432  D001               	goto	l1538
  5272  001434  D086               	goto	u7730
  5273  001436                     l1538:
  5274                           
  5275                           ; BSR set to: 0
  5276                           ;uart.c: 231: {
  5277                           ;uart.c: 232: if (mdRxBuf[i] == cereg_rsp[0] && mdRxBuf[(uint8_t)(i + 1)] == cereg_rsp[1
      +                          ] && mdRxBuf[(uint8_t)(i + 2)] == cereg_rsp[2] && mdRxBuf[(uint8_t)(i + 3)] == cereg_rsp
      +                          [3] && mdRxBuf[(uint8_t)(i + 4)] == cereg_rsp[4] && mdRxBuf[(uint8_t)(i + 5)] == cereg_r
  5278                           
  5279                           ; BSR set to: 0
  5280  001436  516C               	movf	parse_cereg_ok@i& (0+255),w,b
  5281  001438  0D01               	mullw	1
  5282  00143A  0E00               	movlw	low _mdRxBuf
  5283  00143C  24F3               	addwf	prodl,w,c
  5284  00143E  6ED9               	movwf	fsr2l,c
  5285  001440  0E02               	movlw	high _mdRxBuf
  5286  001442  20F4               	addwfc	prodh,w,c
  5287  001444  6EDA               	movwf	fsr2h,c
  5288  001446  5162               	movf	parse_cereg_ok@cereg_rsp& (0+255),w,b
  5289  001448  18DE               	xorwf	postinc2,w,c
  5290  00144A  A4D8               	btfss	status,2,c
  5291  00144C  D078               	goto	l1543
  5292                           
  5293                           ; BSR set to: 0
  5294  00144E  C06C  F060         	movff	parse_cereg_ok@i,??_parse_cereg_ok
  5295  001452  0E01               	movlw	1
  5296  001454  2760               	addwf	??_parse_cereg_ok& (0+255),f,b
  5297  001456  5160               	movf	??_parse_cereg_ok& (0+255),w,b
  5298  001458  0D01               	mullw	1
  5299  00145A  0E00               	movlw	low _mdRxBuf
  5300  00145C  24F3               	addwf	prodl,w,c
  5301  00145E  6ED9               	movwf	fsr2l,c
  5302  001460  0E02               	movlw	high _mdRxBuf
  5303  001462  20F4               	addwfc	prodh,w,c
  5304  001464  6EDA               	movwf	fsr2h,c
  5305  001466  5163               	movf	(parse_cereg_ok@cereg_rsp+1)& (0+255),w,b
  5306  001468  18DE               	xorwf	postinc2,w,c
  5307  00146A  A4D8               	btfss	status,2,c
  5308  00146C  D068               	goto	l1543
  5309                           
  5310                           ; BSR set to: 0
  5311  00146E  C06C  F060         	movff	parse_cereg_ok@i,??_parse_cereg_ok
  5312  001472  0E02               	movlw	2
  5313  001474  2760               	addwf	??_parse_cereg_ok& (0+255),f,b
  5314  001476  5160               	movf	??_parse_cereg_ok& (0+255),w,b
  5315  001478  0D01               	mullw	1
  5316  00147A  0E00               	movlw	low _mdRxBuf
  5317  00147C  24F3               	addwf	prodl,w,c
  5318  00147E  6ED9               	movwf	fsr2l,c
  5319  001480  0E02               	movlw	high _mdRxBuf
  5320  001482  20F4               	addwfc	prodh,w,c
  5321  001484  6EDA               	movwf	fsr2h,c
  5322  001486  5164               	movf	(parse_cereg_ok@cereg_rsp+2)& (0+255),w,b
  5323  001488  18DE               	xorwf	postinc2,w,c
  5324  00148A  A4D8               	btfss	status,2,c
  5325  00148C  D058               	goto	l1543
  5326                           
  5327                           ; BSR set to: 0
  5328  00148E  C06C  F060         	movff	parse_cereg_ok@i,??_parse_cereg_ok
  5329  001492  0E03               	movlw	3
  5330  001494  2760               	addwf	??_parse_cereg_ok& (0+255),f,b
  5331  001496  5160               	movf	??_parse_cereg_ok& (0+255),w,b
  5332  001498  0D01               	mullw	1
  5333  00149A  0E00               	movlw	low _mdRxBuf
  5334  00149C  24F3               	addwf	prodl,w,c
  5335  00149E  6ED9               	movwf	fsr2l,c
  5336  0014A0  0E02               	movlw	high _mdRxBuf
  5337  0014A2  20F4               	addwfc	prodh,w,c
  5338  0014A4  6EDA               	movwf	fsr2h,c
  5339  0014A6  5165               	movf	(parse_cereg_ok@cereg_rsp+3)& (0+255),w,b
  5340  0014A8  18DE               	xorwf	postinc2,w,c
  5341  0014AA  A4D8               	btfss	status,2,c
  5342  0014AC  D048               	goto	l1543
  5343                           
  5344                           ; BSR set to: 0
  5345  0014AE  C06C  F060         	movff	parse_cereg_ok@i,??_parse_cereg_ok
  5346  0014B2  0E04               	movlw	4
  5347  0014B4  2760               	addwf	??_parse_cereg_ok& (0+255),f,b
  5348  0014B6  5160               	movf	??_parse_cereg_ok& (0+255),w,b
  5349  0014B8  0D01               	mullw	1
  5350  0014BA  0E00               	movlw	low _mdRxBuf
  5351  0014BC  24F3               	addwf	prodl,w,c
  5352  0014BE  6ED9               	movwf	fsr2l,c
  5353  0014C0  0E02               	movlw	high _mdRxBuf
  5354  0014C2  20F4               	addwfc	prodh,w,c
  5355  0014C4  6EDA               	movwf	fsr2h,c
  5356  0014C6  5166               	movf	(parse_cereg_ok@cereg_rsp+4)& (0+255),w,b
  5357  0014C8  18DE               	xorwf	postinc2,w,c
  5358  0014CA  A4D8               	btfss	status,2,c
  5359  0014CC  D038               	goto	l1543
  5360                           
  5361                           ; BSR set to: 0
  5362  0014CE  C06C  F060         	movff	parse_cereg_ok@i,??_parse_cereg_ok
  5363  0014D2  0E05               	movlw	5
  5364  0014D4  2760               	addwf	??_parse_cereg_ok& (0+255),f,b
  5365  0014D6  5160               	movf	??_parse_cereg_ok& (0+255),w,b
  5366  0014D8  0D01               	mullw	1
  5367  0014DA  0E00               	movlw	low _mdRxBuf
  5368  0014DC  24F3               	addwf	prodl,w,c
  5369  0014DE  6ED9               	movwf	fsr2l,c
  5370  0014E0  0E02               	movlw	high _mdRxBuf
  5371  0014E2  20F4               	addwfc	prodh,w,c
  5372  0014E4  6EDA               	movwf	fsr2h,c
  5373  0014E6  5167               	movf	(parse_cereg_ok@cereg_rsp+5)& (0+255),w,b
  5374  0014E8  18DE               	xorwf	postinc2,w,c
  5375  0014EA  A4D8               	btfss	status,2,c
  5376  0014EC  D028               	goto	l1543
  5377                           
  5378                           ; BSR set to: 0
  5379  0014EE  C06C  F060         	movff	parse_cereg_ok@i,??_parse_cereg_ok
  5380  0014F2  0E06               	movlw	6
  5381  0014F4  2760               	addwf	??_parse_cereg_ok& (0+255),f,b
  5382  0014F6  5160               	movf	??_parse_cereg_ok& (0+255),w,b
  5383  0014F8  0D01               	mullw	1
  5384  0014FA  0E00               	movlw	low _mdRxBuf
  5385  0014FC  24F3               	addwf	prodl,w,c
  5386  0014FE  6ED9               	movwf	fsr2l,c
  5387  001500  0E02               	movlw	high _mdRxBuf
  5388  001502  20F4               	addwfc	prodh,w,c
  5389  001504  6EDA               	movwf	fsr2h,c
  5390  001506  5168               	movf	(parse_cereg_ok@cereg_rsp+6)& (0+255),w,b
  5391  001508  18DE               	xorwf	postinc2,w,c
  5392  00150A  A4D8               	btfss	status,2,c
  5393  00150C  D018               	goto	l1543
  5394                           
  5395                           ; BSR set to: 0
  5396                           ;uart.c: 236: {
  5397                           ;uart.c: 237: registration_num = mdRxBuf[(uint8_t)(i + 10)];
  5398  00150E  C06C  F060         	movff	parse_cereg_ok@i,??_parse_cereg_ok
  5399  001512  0E0A               	movlw	10
  5400  001514  2760               	addwf	??_parse_cereg_ok& (0+255),f,b
  5401  001516  5160               	movf	??_parse_cereg_ok& (0+255),w,b
  5402  001518  0D01               	mullw	1
  5403  00151A  0E00               	movlw	low _mdRxBuf
  5404  00151C  24F3               	addwf	prodl,w,c
  5405  00151E  6ED9               	movwf	fsr2l,c
  5406  001520  0E02               	movlw	high _mdRxBuf
  5407  001522  20F4               	addwfc	prodh,w,c
  5408  001524  6EDA               	movwf	fsr2h,c
  5409  001526  50DF               	movf	indf2,w,c
  5410  001528  6F6B               	movwf	parse_cereg_ok@registration_num& (0+255),b
  5411                           
  5412                           ; BSR set to: 0
  5413                           ;uart.c: 238: if (registration_num > '0' && registration_num < '9')
  5414  00152A  0E30               	movlw	48
  5415  00152C  656B               	cpfsgt	parse_cereg_ok@registration_num& (0+255),b
  5416  00152E  D005               	goto	l1541
  5417                           
  5418                           ; BSR set to: 0
  5419  001530  0E39               	movlw	57
  5420  001532  616B               	cpfslt	parse_cereg_ok@registration_num& (0+255),b
  5421  001534  D002               	goto	l1541
  5422                           
  5423                           ; BSR set to: 0
  5424                           ;uart.c: 239: return 1;
  5425  001536  0E01               	movlw	1
  5426                           
  5427                           ; BSR set to: 0
  5428  001538  0012               	return	
  5429  00153A                     l1541:
  5430                           
  5431                           ; BSR set to: 0
  5432                           ;uart.c: 240: else
  5433                           ;uart.c: 241: return 4;
  5434                           
  5435                           ; BSR set to: 0
  5436  00153A  0E04               	movlw	4
  5437                           
  5438                           ; BSR set to: 0
  5439  00153C  0012               	return	
  5440  00153E                     l1543:
  5441                           
  5442                           ; BSR set to: 0
  5443                           
  5444                           ; BSR set to: 0
  5445                           
  5446                           ; BSR set to: 0
  5447  00153E  2B6C               	incf	parse_cereg_ok@i& (0+255),f,b
  5448  001540  D776               	goto	l6614
  5449  001542                     u7730:
  5450                           
  5451                           ; BSR set to: 0
  5452                           ;uart.c: 242: }
  5453                           ;uart.c: 243: }
  5454                           ;uart.c: 244: return 4;
  5455                           
  5456                           ; BSR set to: 0
  5457  001542  0E04               	movlw	4
  5458  001544  0012               	return	
  5459  001546                     __end_of_parse_cereg_ok:
  5460                           	opt stack 0
  5461                           tblptru	equ	0xFF8
  5462                           tblptrh	equ	0xFF7
  5463                           tblptrl	equ	0xFF6
  5464                           tablat	equ	0xFF5
  5465                           prodh	equ	0xFF4
  5466                           prodl	equ	0xFF3
  5467                           intcon	equ	0xFF2
  5468                           postinc0	equ	0xFEE
  5469                           wreg	equ	0xFE8
  5470                           postdec1	equ	0xFE5
  5471                           plusw1	equ	0xFE3
  5472                           fsr1l	equ	0xFE1
  5473                           indf2	equ	0xFDF
  5474                           postinc2	equ	0xFDE
  5475                           plusw2	equ	0xFDB
  5476                           fsr2h	equ	0xFDA
  5477                           fsr2l	equ	0xFD9
  5478                           status	equ	0xFD8
  5479                           
  5480 ;; *************** function _send_sms_ok *****************
  5481 ;; Defined at:
  5482 ;;		line 312 in file "sms.c"
  5483 ;; Parameters:    Size  Location     Type
  5484 ;;  isValidCmd      1    wreg     unsigned char 
  5485 ;; Auto vars:     Size  Location     Type
  5486 ;;  isValidCmd      1   21[BANK0 ] unsigned char 
  5487 ;;  cmgs            9    9[BANK0 ] unsigned char [9]
  5488 ;;  msgIndex        3   18[BANK0 ] unsigned char [3]
  5489 ;;  i               1   24[BANK0 ] unsigned char 
  5490 ;;  poundCount      1   23[BANK0 ] unsigned char 
  5491 ;;  smsEndIndex     1   22[BANK0 ] unsigned char 
  5492 ;; Return value:  Size  Location     Type
  5493 ;;                  1    wreg      unsigned char 
  5494 ;; Registers used:
  5495 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5496 ;; Tracked objects:
  5497 ;;		On entry : 0/0
  5498 ;;		On exit  : 0/0
  5499 ;;		Unchanged: 0/0
  5500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5502 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5503 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5504 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5505 ;;Total ram usage:       17 bytes
  5506 ;; Hardware stack levels used:    1
  5507 ;; Hardware stack levels required when called:    5
  5508 ;; This function calls:
  5509 ;;		_clear_at_ok
  5510 ;;		_init_md_uart
  5511 ;;		_md_uart_write_str_ok
  5512 ;; This function is called by:
  5513 ;;		_listen_sms
  5514 ;; This function uses a non-reentrant model
  5515 ;;
  5516                           
  5517                           	psect	text21
  5518  001186                     __ptext21:
  5519                           	opt stack 0
  5520  001186                     _send_sms_ok:
  5521                           	opt stack 23
  5522                           
  5523                           ; BSR set to: 0
  5524                           ;incstack = 0
  5525                           ;send_sms_ok@isValidCmd stored from wreg
  5526  001186  0100               	movlb	0	; () banked
  5527  001188  6F75               	movwf	send_sms_ok@isValidCmd& (0+255),b
  5528                           
  5529                           ;sms.c: 314: uint8_t cmgs[] = "AT+CMGS=";
  5530  00118A  EE21  F07B         	lfsr	2,send_sms_ok@F6905
  5531  00118E  EE10  F069         	lfsr	1,send_sms_ok@cmgs
  5532  001192  0E08               	movlw	8
  5533  001194                     u9771:
  5534  001194  CFDB FFE3          	movff	plusw2,plusw1
  5535  001198  06E8               	decf	wreg,f,c
  5536  00119A  E2FC               	bc	u9771
  5537                           
  5538                           ;sms.c: 315: uint8_t msgIndex[] = "\r\n";
  5539  00119C  C1BE  F072         	movff	send_sms_ok@F6907,send_sms_ok@msgIndex
  5540  0011A0  C1BF  F073         	movff	send_sms_ok@F6907+1,send_sms_ok@msgIndex+1
  5541  0011A4  C1C0  F074         	movff	send_sms_ok@F6907+2,send_sms_ok@msgIndex+2
  5542                           
  5543                           ;sms.c: 316: uint8_t poundCount = 0, i = 0, smsEndIndex;
  5544  0011A8  0E00               	movlw	0
  5545  0011AA  0100               	movlb	0	; () banked
  5546  0011AC  6F77               	movwf	send_sms_ok@poundCount& (0+255),b
  5547                           
  5548                           ; BSR set to: 0
  5549  0011AE  0E00               	movlw	0
  5550  0011B0  6F78               	movwf	send_sms_ok@i& (0+255),b
  5551                           
  5552                           ; BSR set to: 0
  5553                           ;sms.c: 318: init_md_uart();
  5554  0011B2  EC40  F011         	call	_init_md_uart	;wreg free
  5555                           
  5556                           ;sms.c: 320: if (at1 != 1)
  5557  0011B6  0100               	movlb	0	; () banked
  5558  0011B8  05C0               	decf	_at1& (0+255),w,b
  5559  0011BA  B4D8               	btfsc	status,2,c
  5560  0011BC  D08C               	goto	l890
  5561                           
  5562                           ; BSR set to: 0
  5563                           ;sms.c: 321: {
  5564                           ;sms.c: 322: at1 = md_uart_write_str_ok((uint8_t *)&cmgs[0], sizeof(cmgs), 0, 0);
  5565  0011BE  0E69               	movlw	low send_sms_ok@cmgs
  5566  0011C0  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  5567  0011C2  0E00               	movlw	high send_sms_ok@cmgs
  5568  0011C4  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  5569  0011C6  0E09               	movlw	9
  5570  0011C8  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  5571  0011CA  0E00               	movlw	0
  5572  0011CC  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  5573  0011CE  0E00               	movlw	0
  5574  0011D0  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  5575  0011D2  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  5576  0011D6  0100               	movlb	0	; () banked
  5577  0011D8  6FC0               	movwf	_at1& (0+255),b
  5578                           
  5579                           ;sms.c: 323: at1 = md_uart_write_str_ok((uint8_t *)&ph_num[0], sizeof(ph_num), 0, 0);
  5580  0011DA  0EE9               	movlw	low _ph_num
  5581  0011DC  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  5582  0011DE  0E01               	movlw	high _ph_num
  5583  0011E0  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  5584  0011E2  0E09               	movlw	9
  5585  0011E4  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  5586  0011E6  0E00               	movlw	0
  5587  0011E8  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  5588  0011EA  0E00               	movlw	0
  5589  0011EC  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  5590  0011EE  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  5591  0011F2  0100               	movlb	0	; () banked
  5592  0011F4  6FC0               	movwf	_at1& (0+255),b
  5593                           
  5594                           ; BSR set to: 0
  5595                           ;sms.c: 324: at1 = 0;
  5596  0011F6  0E00               	movlw	0
  5597  0011F8  6FC0               	movwf	_at1& (0+255),b
  5598                           
  5599                           ; BSR set to: 0
  5600                           ;sms.c: 325: at1 = md_uart_write_str_ok((uint8_t *)&msgIndex[0], sizeof(msgIndex), 0, 1)
      +                          ;
  5601  0011FA  0E72               	movlw	low send_sms_ok@msgIndex
  5602  0011FC  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  5603  0011FE  0E00               	movlw	high send_sms_ok@msgIndex
  5604  001200  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  5605  001202  0E03               	movlw	3
  5606  001204  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  5607  001206  0E00               	movlw	0
  5608  001208  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  5609  00120A  0E01               	movlw	1
  5610  00120C  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  5611  00120E  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  5612  001212  0100               	movlb	0	; () banked
  5613  001214  6FC0               	movwf	_at1& (0+255),b
  5614  001216                     
  5615                           ; BSR set to: 0
  5616                           
  5617                           ; BSR set to: 0
  5618                           
  5619                           ; BSR set to: 0
  5620  001216  05C0               	decf	_at1& (0+255),w,b
  5621  001218  B4D8               	btfsc	status,2,c
  5622  00121A  D003               	goto	u9800
  5623                           
  5624                           ; BSR set to: 0
  5625  00121C  5007               	movf	_timedOut,w,c
  5626  00121E  B4D8               	btfsc	status,2,c
  5627  001220  D7FA               	goto	l871
  5628  001222                     u9800:
  5629                           
  5630                           ; BSR set to: 0
  5631                           ;sms.c: 327: if (at1 == 1 && isValidCmd)
  5632                           
  5633                           ; BSR set to: 0
  5634                           
  5635                           ; BSR set to: 0
  5636  001222  05C0               	decf	_at1& (0+255),w,b
  5637  001224  A4D8               	btfss	status,2,c
  5638  001226  D043               	goto	u9880
  5639                           
  5640                           ; BSR set to: 0
  5641  001228  5175               	movf	send_sms_ok@isValidCmd& (0+255),w,b
  5642  00122A  B4D8               	btfsc	status,2,c
  5643  00122C  D040               	goto	u9880
  5644                           
  5645                           ; BSR set to: 0
  5646                           ;sms.c: 328: {
  5647                           ;sms.c: 329: for (i = 0; i < sizeof(sms_buf); i++)
  5648  00122E  0E00               	movlw	0
  5649  001230  6F78               	movwf	send_sms_ok@i& (0+255),b
  5650  001232                     l7630:
  5651                           
  5652                           ; BSR set to: 0
  5653  001232  0E27               	movlw	39
  5654  001234  6578               	cpfsgt	send_sms_ok@i& (0+255),b
  5655  001236  D001               	goto	l876
  5656  001238  D015               	goto	u9860
  5657  00123A                     l876:
  5658                           
  5659                           ; BSR set to: 0
  5660                           ;sms.c: 330: {
  5661                           ;sms.c: 331: if (sms_buf[i] == '#')
  5662                           
  5663                           ; BSR set to: 0
  5664  00123A  5178               	movf	send_sms_ok@i& (0+255),w,b
  5665  00123C  0D01               	mullw	1
  5666  00123E  0EA0               	movlw	low _sms_buf
  5667  001240  24F3               	addwf	prodl,w,c
  5668  001242  6ED9               	movwf	fsr2l,c
  5669  001244  0E02               	movlw	high _sms_buf
  5670  001246  20F4               	addwfc	prodh,w,c
  5671  001248  6EDA               	movwf	fsr2h,c
  5672  00124A  0E23               	movlw	35
  5673  00124C  18DE               	xorwf	postinc2,w,c
  5674  00124E  B4D8               	btfsc	status,2,c
  5675                           
  5676                           ; BSR set to: 0
  5677                           ;sms.c: 332: poundCount ++;
  5678  001250  2B77               	incf	send_sms_ok@poundCount& (0+255),f,b
  5679                           
  5680                           ; BSR set to: 0
  5681                           ;sms.c: 333: if (poundCount == 2)
  5682                           
  5683                           ; BSR set to: 0
  5684  001252  0E02               	movlw	2
  5685  001254  1977               	xorwf	send_sms_ok@poundCount& (0+255),w,b
  5686  001256  A4D8               	btfss	status,2,c
  5687  001258  D003               	goto	l879
  5688                           
  5689                           ; BSR set to: 0
  5690                           ;sms.c: 334: {
  5691                           ;sms.c: 335: smsEndIndex = (uint8_t)(i + 1);
  5692  00125A  2978               	incf	send_sms_ok@i& (0+255),w,b
  5693  00125C  6F76               	movwf	send_sms_ok@smsEndIndex& (0+255),b
  5694                           
  5695                           ; BSR set to: 0
  5696                           ;sms.c: 336: poundCount++;
  5697  00125E  2B77               	incf	send_sms_ok@poundCount& (0+255),f,b
  5698  001260                     l879:
  5699                           
  5700                           ; BSR set to: 0
  5701                           
  5702                           ; BSR set to: 0
  5703  001260  2B78               	incf	send_sms_ok@i& (0+255),f,b
  5704  001262  D7E7               	goto	l7630
  5705  001264                     u9860:
  5706                           
  5707                           ; BSR set to: 0
  5708                           ;sms.c: 337: }
  5709                           ;sms.c: 338: }
  5710                           ;sms.c: 340: at2 = md_uart_write_str_ok((uint8_t *)&sms_buf[0], smsEndIndex, 0, 0);
  5711                           
  5712                           ; BSR set to: 0
  5713  001264  0EA0               	movlw	low _sms_buf
  5714  001266  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  5715  001268  0E02               	movlw	high _sms_buf
  5716  00126A  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  5717  00126C  C076  F063         	movff	send_sms_ok@smsEndIndex,md_uart_write_str_ok@len1
  5718  001270  0E00               	movlw	0
  5719  001272  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  5720  001274  0E00               	movlw	0
  5721  001276  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  5722  001278  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  5723  00127C  0100               	movlb	0	; () banked
  5724  00127E  6FBF               	movwf	_at2& (0+255),b
  5725                           
  5726                           ;sms.c: 341: at2 = md_uart_write_str_ok((uint8_t *)(0x1A), 1, 1, 0);
  5727  001280  0E1A               	movlw	26
  5728  001282  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  5729  001284  0E00               	movlw	0
  5730  001286  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  5731  001288  0E01               	movlw	1
  5732  00128A  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  5733  00128C  0E01               	movlw	1
  5734  00128E  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  5735  001290  0E00               	movlw	0
  5736  001292  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  5737  001294  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  5738  001298  0100               	movlb	0	; () banked
  5739  00129A  6FBF               	movwf	_at2& (0+255),b
  5740                           
  5741                           ;sms.c: 342: while (at2 != 1 && !timedOut)
  5742  00129C  D001               	goto	l880
  5743  00129E                     l881:
  5744                           
  5745                           ; BSR set to: 0
  5746  00129E  0004               	clrwdt		;# 
  5747  0012A0                     l880:
  5748  0012A0  0100               	movlb	0	; () banked
  5749  0012A2  05BF               	decf	_at2& (0+255),w,b
  5750  0012A4  B4D8               	btfsc	status,2,c
  5751  0012A6  D003               	goto	u9880
  5752                           
  5753                           ; BSR set to: 0
  5754  0012A8  5007               	movf	_timedOut,w,c
  5755  0012AA  B4D8               	btfsc	status,2,c
  5756  0012AC  D7F8               	goto	l881
  5757  0012AE                     u9880:
  5758                           
  5759                           ; BSR set to: 0
  5760                           ;sms.c: 344: }
  5761                           ;sms.c: 345: if (at1 == 1)
  5762                           
  5763                           ; BSR set to: 0
  5764                           
  5765                           ; BSR set to: 0
  5766                           
  5767                           ; BSR set to: 0
  5768  0012AE  05C0               	decf	_at1& (0+255),w,b
  5769  0012B0  A4D8               	btfss	status,2,c
  5770  0012B2  D004               	goto	l885
  5771                           
  5772                           ; BSR set to: 0
  5773                           ;sms.c: 346: {
  5774                           ;sms.c: 347: clear_at_ok();
  5775  0012B4  ECA9  F010         	call	_clear_at_ok	;wreg free
  5776                           
  5777                           ;sms.c: 348: return 1;
  5778  0012B8  0E01               	movlw	1
  5779  0012BA  0012               	return	
  5780  0012BC                     l885:
  5781                           
  5782                           ;sms.c: 350: else if (at1 == 4)
  5783  0012BC  0E04               	movlw	4
  5784  0012BE  0100               	movlb	0	; () banked
  5785  0012C0  19C0               	xorwf	_at1& (0+255),w,b
  5786  0012C2  A4D8               	btfss	status,2,c
  5787  0012C4  D002               	goto	l888
  5788                           
  5789                           ; BSR set to: 0
  5790                           ;sms.c: 351: return 4;
  5791  0012C6  0E04               	movlw	4
  5792                           
  5793                           ; BSR set to: 0
  5794  0012C8  0012               	return	
  5795  0012CA                     l888:
  5796                           
  5797                           ; BSR set to: 0
  5798                           ;sms.c: 352: else if (at1 == 5)
  5799                           
  5800                           ; BSR set to: 0
  5801  0012CA  0E05               	movlw	5
  5802  0012CC  19C0               	xorwf	_at1& (0+255),w,b
  5803  0012CE  A4D8               	btfss	status,2,c
  5804  0012D0  D002               	goto	l890
  5805                           
  5806                           ; BSR set to: 0
  5807                           ;sms.c: 353: return 5;
  5808  0012D2  0E05               	movlw	5
  5809                           
  5810                           ; BSR set to: 0
  5811  0012D4  0012               	return	
  5812  0012D6                     l890:
  5813                           
  5814                           ;sms.c: 354: }
  5815                           ;sms.c: 355: return 2;
  5816                           
  5817                           ; BSR set to: 0
  5818                           
  5819                           ; BSR set to: 0
  5820                           
  5821                           ; BSR set to: 0
  5822                           
  5823                           ; BSR set to: 0
  5824  0012D6  0E02               	movlw	2
  5825  0012D8  0012               	return	
  5826  0012DA                     __end_of_send_sms_ok:
  5827                           	opt stack 0
  5828                           tblptru	equ	0xFF8
  5829                           tblptrh	equ	0xFF7
  5830                           tblptrl	equ	0xFF6
  5831                           tablat	equ	0xFF5
  5832                           prodh	equ	0xFF4
  5833                           prodl	equ	0xFF3
  5834                           intcon	equ	0xFF2
  5835                           postinc0	equ	0xFEE
  5836                           wreg	equ	0xFE8
  5837                           postdec1	equ	0xFE5
  5838                           plusw1	equ	0xFE3
  5839                           fsr1l	equ	0xFE1
  5840                           indf2	equ	0xFDF
  5841                           postinc2	equ	0xFDE
  5842                           plusw2	equ	0xFDB
  5843                           fsr2h	equ	0xFDA
  5844                           fsr2l	equ	0xFD9
  5845                           status	equ	0xFD8
  5846                           
  5847 ;; *************** function _read_sms *****************
  5848 ;; Defined at:
  5849 ;;		line 150 in file "sms.c"
  5850 ;; Parameters:    Size  Location     Type
  5851 ;;		None
  5852 ;; Auto vars:     Size  Location     Type
  5853 ;;  cmgl           16   43[BANK0 ] unsigned char [16]
  5854 ;;  cmgd            9   68[BANK0 ] unsigned char [9]
  5855 ;;  cmgr            9   59[BANK0 ] unsigned char [9]
  5856 ;;  msgIndex        3   77[BANK0 ] unsigned char [3]
  5857 ;; Return value:  Size  Location     Type
  5858 ;;                  1    wreg      unsigned char 
  5859 ;; Registers used:
  5860 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5861 ;; Tracked objects:
  5862 ;;		On entry : 0/0
  5863 ;;		On exit  : 0/0
  5864 ;;		Unchanged: 0/0
  5865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5867 ;;      Locals:         0      37       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5868 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5869 ;;      Totals:         0      39       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5870 ;;Total ram usage:       39 bytes
  5871 ;; Hardware stack levels used:    1
  5872 ;; Hardware stack levels required when called:    6
  5873 ;; This function calls:
  5874 ;;		_clear_at_ok
  5875 ;;		_init_md_uart
  5876 ;;		_md_uart_write_str_ok
  5877 ;;		_parse_cmgl
  5878 ;;		_parse_cmgr
  5879 ;; This function is called by:
  5880 ;;		_listen_sms
  5881 ;; This function uses a non-reentrant model
  5882 ;;
  5883                           
  5884                           	psect	text22
  5885  000CBC                     __ptext22:
  5886                           	opt stack 0
  5887  000CBC                     _read_sms:
  5888                           	opt stack 22
  5889                           
  5890                           ;sms.c: 152: uint8_t cmgl[] = "AT+CMGL=\"ALL\"\r\n";
  5891                           
  5892                           ;incstack = 0
  5893  000CBC  EE22  F0E8         	lfsr	2,read_sms@F6841
  5894  000CC0  EE10  F08B         	lfsr	1,read_sms@cmgl
  5895  000CC4  0E0F               	movlw	15
  5896  000CC6                     u9651:
  5897  000CC6  CFDB FFE3          	movff	plusw2,plusw1
  5898  000CCA  06E8               	decf	wreg,f,c
  5899  000CCC  E2FC               	bc	u9651
  5900                           
  5901                           ;sms.c: 153: uint8_t cmgr[] = "AT+CMGR=";
  5902  000CCE  EE21  F08D         	lfsr	2,read_sms@F6843
  5903  000CD2  EE10  F09B         	lfsr	1,read_sms@cmgr
  5904  000CD6  0E08               	movlw	8
  5905  000CD8                     u9661:
  5906  000CD8  CFDB FFE3          	movff	plusw2,plusw1
  5907  000CDC  06E8               	decf	wreg,f,c
  5908  000CDE  E2FC               	bc	u9661
  5909                           
  5910                           ;sms.c: 154: uint8_t msgIndex[] = "\r\n";
  5911  000CE0  C040  F0AD         	movff	read_sms@F6845,read_sms@msgIndex
  5912  000CE4  C041  F0AE         	movff	read_sms@F6845+1,read_sms@msgIndex+1
  5913  000CE8  C042  F0AF         	movff	read_sms@F6845+2,read_sms@msgIndex+2
  5914                           
  5915                           ;sms.c: 155: uint8_t cmgd[] = "AT+CMGD=";
  5916  000CEC  EE21  F084         	lfsr	2,read_sms@F6847
  5917  000CF0  EE10  F0A4         	lfsr	1,read_sms@cmgd
  5918  000CF4  0E08               	movlw	8
  5919  000CF6                     u9671:
  5920  000CF6  CFDB FFE3          	movff	plusw2,plusw1
  5921  000CFA  06E8               	decf	wreg,f,c
  5922  000CFC  E2FC               	bc	u9671
  5923                           
  5924                           ;sms.c: 157: init_md_uart();
  5925  000CFE  EC40  F011         	call	_init_md_uart	;wreg free
  5926                           
  5927                           ;sms.c: 160: numUartRetries = 15;
  5928  000D02  0E0F               	movlw	15
  5929  000D04  6E44               	movwf	_numUartRetries,c
  5930                           
  5931                           ;sms.c: 161: at1 = md_uart_write_str_ok((uint8_t *)&cmgl[0], sizeof(cmgl), 1, 0);
  5932  000D06  0E8B               	movlw	low read_sms@cmgl
  5933  000D08  0100               	movlb	0	; () banked
  5934  000D0A  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  5935  000D0C  0E00               	movlw	high read_sms@cmgl
  5936  000D0E  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  5937  000D10  0E10               	movlw	16
  5938  000D12  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  5939  000D14  0E01               	movlw	1
  5940  000D16  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  5941  000D18  0E00               	movlw	0
  5942  000D1A  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  5943  000D1C  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  5944  000D20  0100               	movlb	0	; () banked
  5945  000D22  6FC0               	movwf	_at1& (0+255),b
  5946                           
  5947                           ; BSR set to: 0
  5948                           ;sms.c: 162: if (at1 == 1)
  5949  000D24  05C0               	decf	_at1& (0+255),w,b
  5950  000D26  A4D8               	btfss	status,2,c
  5951  000D28  D009               	goto	l809
  5952                           
  5953                           ; BSR set to: 0
  5954                           ;sms.c: 163: {
  5955                           ;sms.c: 164: if (parse_cmgl() == 1)
  5956  000D2A  EC44  F00D         	call	_parse_cmgl	;wreg free
  5957  000D2E  06E8               	decf	wreg,f,c
  5958  000D30  A4D8               	btfss	status,2,c
  5959  000D32  D00B               	goto	l812
  5960                           
  5961                           ;sms.c: 165: {
  5962                           ;sms.c: 166: ready_to_read_text = 1;
  5963  000D34  0E01               	movlw	1
  5964  000D36  0100               	movlb	0	; () banked
  5965  000D38  6FC4               	movwf	_ready_to_read_text& (0+255),b
  5966                           
  5967                           ; BSR set to: 0
  5968                           ;sms.c: 167: }
  5969                           ;sms.c: 168: }
  5970  000D3A  D007               	goto	l812
  5971  000D3C                     l809:
  5972                           
  5973                           ; BSR set to: 0
  5974                           ;sms.c: 169: else if (at1 == 5)
  5975                           
  5976                           ; BSR set to: 0
  5977  000D3C  0E05               	movlw	5
  5978  000D3E  19C0               	xorwf	_at1& (0+255),w,b
  5979  000D40  A4D8               	btfss	status,2,c
  5980  000D42  D003               	goto	l812
  5981                           
  5982                           ; BSR set to: 0
  5983                           ;sms.c: 170: {
  5984                           ;sms.c: 171: clear_at_ok();
  5985  000D44  ECA9  F010         	call	_clear_at_ok	;wreg free
  5986                           
  5987                           ;sms.c: 172: return 5;
  5988                           ;	Return value of _read_sms is never used
  5989  000D48  0012               	return	
  5990  000D4A                     l812:
  5991                           
  5992                           ;sms.c: 173: }
  5993                           ;sms.c: 174: if (ready_to_read_text)
  5994  000D4A  0100               	movlb	0	; () banked
  5995  000D4C  51C4               	movf	_ready_to_read_text& (0+255),w,b
  5996  000D4E  B4D8               	btfsc	status,2,c
  5997  000D50  0012               	return	
  5998                           
  5999                           ; BSR set to: 0
  6000                           ;sms.c: 175: {
  6001                           ;sms.c: 176: at2 = md_uart_write_str_ok((uint8_t *)&cmgr[0], sizeof(cmgr), 0, 0);
  6002  000D52  0E9B               	movlw	low read_sms@cmgr
  6003  000D54  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  6004  000D56  0E00               	movlw	high read_sms@cmgr
  6005  000D58  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  6006  000D5A  0E09               	movlw	9
  6007  000D5C  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  6008  000D5E  0E00               	movlw	0
  6009  000D60  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  6010  000D62  0E00               	movlw	0
  6011  000D64  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  6012  000D66  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  6013  000D6A  0100               	movlb	0	; () banked
  6014  000D6C  6FBF               	movwf	_at2& (0+255),b
  6015                           
  6016                           ;sms.c: 177: at2 = md_uart_write_str_ok((uint8_t *)smsMsgIndex, 1, 0, 0);
  6017  000D6E  51C3               	movf	_smsMsgIndex& (0+255),w,b
  6018  000D70  6F89               	movwf	??_read_sms& (0+255),b
  6019  000D72  6B8A               	clrf	(??_read_sms+1)& (0+255),b
  6020  000D74  C089  F061         	movff	??_read_sms,md_uart_write_str_ok@data
  6021  000D78  C08A  F062         	movff	??_read_sms+1,md_uart_write_str_ok@data+1
  6022  000D7C  0E01               	movlw	1
  6023  000D7E  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  6024  000D80  0E00               	movlw	0
  6025  000D82  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  6026  000D84  0E00               	movlw	0
  6027  000D86  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  6028  000D88  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  6029  000D8C  0100               	movlb	0	; () banked
  6030  000D8E  6FBF               	movwf	_at2& (0+255),b
  6031                           
  6032                           ;sms.c: 178: at2 = md_uart_write_str_ok((uint8_t *)&msgIndex[0], sizeof(msgIndex), 1, 0)
      +                          ;
  6033  000D90  0EAD               	movlw	low read_sms@msgIndex
  6034  000D92  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  6035  000D94  0E00               	movlw	high read_sms@msgIndex
  6036  000D96  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  6037  000D98  0E03               	movlw	3
  6038  000D9A  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  6039  000D9C  0E01               	movlw	1
  6040  000D9E  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  6041  000DA0  0E00               	movlw	0
  6042  000DA2  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  6043  000DA4  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  6044  000DA8  0100               	movlb	0	; () banked
  6045  000DAA  6FBF               	movwf	_at2& (0+255),b
  6046                           
  6047                           ; BSR set to: 0
  6048                           ;sms.c: 180: if (at2 == 1)
  6049  000DAC  05BF               	decf	_at2& (0+255),w,b
  6050  000DAE  A4D8               	btfss	status,2,c
  6051  000DB0  D04E               	goto	l820
  6052                           
  6053                           ; BSR set to: 0
  6054                           ;sms.c: 181: {
  6055                           ;sms.c: 182: if (parse_cmgr() == 1)
  6056  000DB2  ECA0  F003         	call	_parse_cmgr	;wreg free
  6057  000DB6  06E8               	decf	wreg,f,c
  6058  000DB8  A4D8               	btfss	status,2,c
  6059  000DBA  D009               	goto	l816
  6060                           
  6061                           ;sms.c: 183: {
  6062                           ;sms.c: 184: sms_echo_ready = 1;
  6063  000DBC  0E01               	movlw	1
  6064  000DBE  0100               	movlb	0	; () banked
  6065  000DC0  6FC6               	movwf	_sms_echo_ready& (0+255),b
  6066                           
  6067                           ; BSR set to: 0
  6068                           ;sms.c: 185: clear_at_ok();
  6069  000DC2  ECA9  F010         	call	_clear_at_ok	;wreg free
  6070  000DC6                     l7564:
  6071                           
  6072                           ;sms.c: 186: ready_to_read_text = 0;
  6073  000DC6  0E00               	movlw	0
  6074  000DC8  0100               	movlb	0	; () banked
  6075  000DCA  6FC4               	movwf	_ready_to_read_text& (0+255),b
  6076                           
  6077                           ; BSR set to: 0
  6078                           ;sms.c: 187: return 1;
  6079                           ;	Return value of _read_sms is never used
  6080  000DCC  0012               	return	
  6081  000DCE                     l816:
  6082                           
  6083                           ;sms.c: 189: else
  6084                           ;sms.c: 190: {
  6085                           ;sms.c: 191: sms_err_ready = 1;
  6086                           
  6087                           ; BSR set to: 0
  6088  000DCE  0E01               	movlw	1
  6089  000DD0  0100               	movlb	0	; () banked
  6090  000DD2  6FC5               	movwf	_sms_err_ready& (0+255),b
  6091                           
  6092                           ; BSR set to: 0
  6093                           ;sms.c: 192: at3 = md_uart_write_str_ok((uint8_t *)&cmgd[0], sizeof(cmgd), 0, 0);
  6094  000DD4  0EA4               	movlw	low read_sms@cmgd
  6095  000DD6  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  6096  000DD8  0E00               	movlw	high read_sms@cmgd
  6097  000DDA  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  6098  000DDC  0E09               	movlw	9
  6099  000DDE  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  6100  000DE0  0E00               	movlw	0
  6101  000DE2  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  6102  000DE4  0E00               	movlw	0
  6103  000DE6  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  6104  000DE8  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  6105  000DEC  0100               	movlb	0	; () banked
  6106  000DEE  6FBE               	movwf	_at3& (0+255),b
  6107                           
  6108                           ; BSR set to: 0
  6109                           ;sms.c: 193: at3 = md_uart_write_str_ok((uint8_t *)smsMsgIndex, 1, 0, 0);
  6110  000DF0  51C3               	movf	_smsMsgIndex& (0+255),w,b
  6111  000DF2  6F89               	movwf	??_read_sms& (0+255),b
  6112  000DF4  6B8A               	clrf	(??_read_sms+1)& (0+255),b
  6113  000DF6  C089  F061         	movff	??_read_sms,md_uart_write_str_ok@data
  6114  000DFA  C08A  F062         	movff	??_read_sms+1,md_uart_write_str_ok@data+1
  6115  000DFE  0E01               	movlw	1
  6116  000E00  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  6117  000E02  0E00               	movlw	0
  6118  000E04  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  6119  000E06  0E00               	movlw	0
  6120  000E08  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  6121  000E0A  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  6122  000E0E  0100               	movlb	0	; () banked
  6123  000E10  6FBE               	movwf	_at3& (0+255),b
  6124                           
  6125                           ; BSR set to: 0
  6126                           ;sms.c: 194: at3 = md_uart_write_str_ok((uint8_t *)&msgIndex[0], sizeof(msgIndex), 1, 0)
      +                          ;
  6127  000E12  0EAD               	movlw	low read_sms@msgIndex
  6128  000E14  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  6129  000E16  0E00               	movlw	high read_sms@msgIndex
  6130  000E18  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  6131  000E1A  0E03               	movlw	3
  6132  000E1C  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  6133  000E1E  0E01               	movlw	1
  6134  000E20  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  6135  000E22  0E00               	movlw	0
  6136  000E24  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  6137  000E26  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  6138  000E2A  0100               	movlb	0	; () banked
  6139  000E2C  6FBE               	movwf	_at3& (0+255),b
  6140                           
  6141                           ; BSR set to: 0
  6142                           ;sms.c: 195: if (at3 == 1)
  6143  000E2E  05BE               	decf	_at3& (0+255),w,b
  6144  000E30  A4D8               	btfss	status,2,c
  6145  000E32  D003               	goto	l818
  6146                           
  6147                           ; BSR set to: 0
  6148                           ;sms.c: 196: {
  6149                           ;sms.c: 197: clear_at_ok();
  6150  000E34  ECA9  F010         	call	_clear_at_ok	;wreg free
  6151  000E38  D7C6               	goto	l7564
  6152  000E3A                     l818:
  6153                           
  6154                           ; BSR set to: 0
  6155                           ;sms.c: 201: else if (at3 == 5)
  6156                           
  6157                           ; BSR set to: 0
  6158  000E3A  0E05               	movlw	5
  6159  000E3C  19BE               	xorwf	_at3& (0+255),w,b
  6160  000E3E  A4D8               	btfss	status,2,c
  6161  000E40  D006               	goto	l820
  6162                           
  6163                           ; BSR set to: 0
  6164                           ;sms.c: 202: {
  6165                           ;sms.c: 203: clear_at_ok();
  6166  000E42  ECA9  F010         	call	_clear_at_ok	;wreg free
  6167                           
  6168                           ;sms.c: 204: ready_to_read_text = 0;
  6169  000E46  0E00               	movlw	0
  6170  000E48  0100               	movlb	0	; () banked
  6171  000E4A  6FC4               	movwf	_ready_to_read_text& (0+255),b
  6172                           
  6173                           ; BSR set to: 0
  6174                           ;sms.c: 205: return 5;
  6175                           ;	Return value of _read_sms is never used
  6176  000E4C  0012               	return	
  6177  000E4E                     l820:
  6178                           
  6179                           ; BSR set to: 0
  6180                           ;sms.c: 206: }
  6181                           ;sms.c: 207: }
  6182                           ;sms.c: 208: }
  6183                           ;sms.c: 209: if (at2 == 5)
  6184                           
  6185                           ; BSR set to: 0
  6186                           
  6187                           ; BSR set to: 0
  6188                           
  6189                           ; BSR set to: 0
  6190                           
  6191                           ; BSR set to: 0
  6192  000E4E  0E05               	movlw	5
  6193  000E50  19BF               	xorwf	_at2& (0+255),w,b
  6194  000E52  A4D8               	btfss	status,2,c
  6195  000E54  0012               	return	
  6196                           
  6197                           ; BSR set to: 0
  6198                           ;sms.c: 210: {
  6199                           ;sms.c: 211: ready_to_read_text = 0;
  6200  000E56  0E00               	movlw	0
  6201  000E58  6FC4               	movwf	_ready_to_read_text& (0+255),b
  6202                           
  6203                           ; BSR set to: 0
  6204                           
  6205                           ; BSR set to: 0
  6206                           ;sms.c: 212: return 5;
  6207                           ;	Return value of _read_sms is never used
  6208  000E5A  0012               	return	
  6209  000E5C                     __end_of_read_sms:
  6210                           	opt stack 0
  6211                           tblptru	equ	0xFF8
  6212                           tblptrh	equ	0xFF7
  6213                           tblptrl	equ	0xFF6
  6214                           tablat	equ	0xFF5
  6215                           prodh	equ	0xFF4
  6216                           prodl	equ	0xFF3
  6217                           intcon	equ	0xFF2
  6218                           postinc0	equ	0xFEE
  6219                           wreg	equ	0xFE8
  6220                           postdec1	equ	0xFE5
  6221                           plusw1	equ	0xFE3
  6222                           fsr1l	equ	0xFE1
  6223                           indf2	equ	0xFDF
  6224                           postinc2	equ	0xFDE
  6225                           plusw2	equ	0xFDB
  6226                           fsr2h	equ	0xFDA
  6227                           fsr2l	equ	0xFD9
  6228                           status	equ	0xFD8
  6229                           
  6230 ;; *************** function _parse_cmgr *****************
  6231 ;; Defined at:
  6232 ;;		line 238 in file "sms.c"
  6233 ;; Parameters:    Size  Location     Type
  6234 ;;		None
  6235 ;; Auto vars:     Size  Location     Type
  6236 ;;  l               1   38[BANK0 ] unsigned char 
  6237 ;;  k               1   29[BANK0 ] unsigned char 
  6238 ;;  j               1   39[BANK0 ] unsigned char 
  6239 ;;  i               1   40[BANK0 ] unsigned char 
  6240 ;;  cmgr_rsp        8   19[BANK0 ] unsigned char [8]
  6241 ;;  access_code     4   30[BANK0 ] unsigned char [4]
  6242 ;;  final_field_    1   37[BANK0 ] unsigned char 
  6243 ;;  final_field_    1   36[BANK0 ] unsigned char 
  6244 ;;  field_num_on    1   35[BANK0 ] unsigned char 
  6245 ;;  field_num_te    1   34[BANK0 ] unsigned char 
  6246 ;;  newline_inde    1   28[BANK0 ] unsigned char 
  6247 ;;  colon_index     1   27[BANK0 ] unsigned char 
  6248 ;; Return value:  Size  Location     Type
  6249 ;;                  1    wreg      unsigned char 
  6250 ;; Registers used:
  6251 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6252 ;; Tracked objects:
  6253 ;;		On entry : 0/0
  6254 ;;		On exit  : 0/0
  6255 ;;		Unchanged: 0/0
  6256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6258 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6259 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6260 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6261 ;;Total ram usage:       24 bytes
  6262 ;; Hardware stack levels used:    1
  6263 ;; Hardware stack levels required when called:    5
  6264 ;; This function calls:
  6265 ;;		_ee_read
  6266 ;;		_program_field
  6267 ;; This function is called by:
  6268 ;;		_read_sms
  6269 ;; This function uses a non-reentrant model
  6270 ;;
  6271                           
  6272                           	psect	text23
  6273  000740                     __ptext23:
  6274                           	opt stack 0
  6275  000740                     _parse_cmgr:
  6276                           	opt stack 22
  6277                           
  6278                           ;sms.c: 240: uint8_t cmgr_rsp[] = "+CMGR: ";
  6279                           
  6280                           ;incstack = 0
  6281  000740  EE21  F09E         	lfsr	2,parse_cmgr@F6863
  6282  000744  EE10  F073         	lfsr	1,parse_cmgr@cmgr_rsp
  6283  000748  0E07               	movlw	7
  6284  00074A                     u9051:
  6285  00074A  CFDB FFE3          	movff	plusw2,plusw1
  6286  00074E  06E8               	decf	wreg,f,c
  6287  000750  E2FC               	bc	u9051
  6288                           
  6289                           ;sms.c: 241: uint8_t access_code[4];
  6290                           ;sms.c: 242: uint8_t colon_index, newline_index;
  6291                           ;sms.c: 243: uint8_t field_num_tens, field_num_ones;
  6292                           ;sms.c: 244: uint8_t final_field_index = 0, final_field_term = 0;
  6293  000752  0E00               	movlw	0
  6294  000754  0100               	movlb	0	; () banked
  6295  000756  6F85               	movwf	parse_cmgr@final_field_index& (0+255),b
  6296                           
  6297                           ; BSR set to: 0
  6298  000758  0E00               	movlw	0
  6299  00075A  6F84               	movwf	parse_cmgr@final_field_term& (0+255),b
  6300                           
  6301                           ; BSR set to: 0
  6302                           ;sms.c: 246: access_code[0] = ee_read(0x00, 0xC0);
  6303  00075C  0EC0               	movlw	192
  6304  00075E  6F60               	movwf	ee_read@addr& (0+255),b
  6305  000760  0E00               	movlw	0
  6306  000762  EC76  F011         	call	_ee_read
  6307  000766  0100               	movlb	0	; () banked
  6308  000768  6F7E               	movwf	parse_cmgr@access_code& (0+255),b
  6309                           
  6310                           ; BSR set to: 0
  6311                           ;sms.c: 247: access_code[1] = ee_read(0x00, 0xC1);
  6312  00076A  0EC1               	movlw	193
  6313  00076C  6F60               	movwf	ee_read@addr& (0+255),b
  6314  00076E  0E00               	movlw	0
  6315  000770  EC76  F011         	call	_ee_read
  6316  000774  0100               	movlb	0	; () banked
  6317  000776  6F7F               	movwf	(parse_cmgr@access_code+1)& (0+255),b
  6318                           
  6319                           ; BSR set to: 0
  6320                           ;sms.c: 248: access_code[2] = ee_read(0x00, 0xC2);
  6321  000778  0EC2               	movlw	194
  6322  00077A  6F60               	movwf	ee_read@addr& (0+255),b
  6323  00077C  0E00               	movlw	0
  6324  00077E  EC76  F011         	call	_ee_read
  6325  000782  0100               	movlb	0	; () banked
  6326  000784  6F80               	movwf	(parse_cmgr@access_code+2)& (0+255),b
  6327                           
  6328                           ; BSR set to: 0
  6329                           ;sms.c: 249: access_code[3] = ee_read(0x00, 0xC3);
  6330  000786  0EC3               	movlw	195
  6331  000788  6F60               	movwf	ee_read@addr& (0+255),b
  6332  00078A  0E00               	movlw	0
  6333  00078C  EC76  F011         	call	_ee_read
  6334  000790  0100               	movlb	0	; () banked
  6335  000792  6F81               	movwf	(parse_cmgr@access_code+3)& (0+255),b
  6336                           
  6337                           ; BSR set to: 0
  6338                           ;sms.c: 251: for (uint8_t i = 0; i < sizeof(mdRxBuf); i++)
  6339  000794  0E00               	movlw	0
  6340  000796  6F88               	movwf	parse_cmgr@i& (0+255),b
  6341  000798                     l7234:
  6342                           
  6343                           ; BSR set to: 0
  6344  000798  0E9F               	movlw	159
  6345  00079A  6588               	cpfsgt	parse_cmgr@i& (0+255),b
  6346  00079C  D001               	goto	l835
  6347  00079E  D15C               	goto	u9230
  6348  0007A0                     l835:
  6349                           
  6350                           ; BSR set to: 0
  6351                           ;sms.c: 252: {
  6352                           ;sms.c: 253: if (mdRxBuf[i] == ':')
  6353                           
  6354                           ; BSR set to: 0
  6355  0007A0  5188               	movf	parse_cmgr@i& (0+255),w,b
  6356  0007A2  0D01               	mullw	1
  6357  0007A4  0E00               	movlw	low _mdRxBuf
  6358  0007A6  24F3               	addwf	prodl,w,c
  6359  0007A8  6ED9               	movwf	fsr2l,c
  6360  0007AA  0E02               	movlw	high _mdRxBuf
  6361  0007AC  20F4               	addwfc	prodh,w,c
  6362  0007AE  6EDA               	movwf	fsr2h,c
  6363  0007B0  0E3A               	movlw	58
  6364  0007B2  18DE               	xorwf	postinc2,w,c
  6365  0007B4  B4D8               	btfsc	status,2,c
  6366                           
  6367                           ; BSR set to: 0
  6368                           ;sms.c: 254: colon_index = i;
  6369  0007B6  C088  F07B         	movff	parse_cmgr@i,parse_cmgr@colon_index
  6370                           
  6371                           ; BSR set to: 0
  6372                           ;sms.c: 255: if (mdRxBuf[i] == ',' && mdRxBuf[(uint8_t)(i + 2)] == '+')
  6373                           
  6374                           ; BSR set to: 0
  6375  0007BA  5188               	movf	parse_cmgr@i& (0+255),w,b
  6376  0007BC  0D01               	mullw	1
  6377  0007BE  0E00               	movlw	low _mdRxBuf
  6378  0007C0  24F3               	addwf	prodl,w,c
  6379  0007C2  6ED9               	movwf	fsr2l,c
  6380  0007C4  0E02               	movlw	high _mdRxBuf
  6381  0007C6  20F4               	addwfc	prodh,w,c
  6382  0007C8  6EDA               	movwf	fsr2h,c
  6383  0007CA  0E2C               	movlw	44
  6384  0007CC  18DE               	xorwf	postinc2,w,c
  6385  0007CE  A4D8               	btfss	status,2,c
  6386  0007D0  D030               	goto	u9110
  6387                           
  6388                           ; BSR set to: 0
  6389  0007D2  C088  F071         	movff	parse_cmgr@i,??_parse_cmgr
  6390  0007D6  0E02               	movlw	2
  6391  0007D8  2771               	addwf	??_parse_cmgr& (0+255),f,b
  6392  0007DA  5171               	movf	??_parse_cmgr& (0+255),w,b
  6393  0007DC  0D01               	mullw	1
  6394  0007DE  0E00               	movlw	low _mdRxBuf
  6395  0007E0  24F3               	addwf	prodl,w,c
  6396  0007E2  6ED9               	movwf	fsr2l,c
  6397  0007E4  0E02               	movlw	high _mdRxBuf
  6398  0007E6  20F4               	addwfc	prodh,w,c
  6399  0007E8  6EDA               	movwf	fsr2h,c
  6400  0007EA  0E2B               	movlw	43
  6401  0007EC  18DE               	xorwf	postinc2,w,c
  6402  0007EE  A4D8               	btfss	status,2,c
  6403  0007F0  D020               	goto	u9110
  6404                           
  6405                           ; BSR set to: 0
  6406                           ;sms.c: 256: {
  6407                           ;sms.c: 257: ph_num_index = (uint8_t)(i + 3);
  6408  0007F2  5188               	movf	parse_cmgr@i& (0+255),w,b
  6409  0007F4  0F03               	addlw	3
  6410  0007F6  6FB3               	movwf	_ph_num_index& (0+255),b
  6411                           
  6412                           ; BSR set to: 0
  6413                           ;sms.c: 258: for (uint8_t l = 0; l < sizeof(ph_num); l++)
  6414  0007F8  0E00               	movlw	0
  6415  0007FA  6F86               	movwf	parse_cmgr@l& (0+255),b
  6416  0007FC                     l7250:
  6417                           
  6418                           ; BSR set to: 0
  6419  0007FC  0E08               	movlw	8
  6420  0007FE  6586               	cpfsgt	parse_cmgr@l& (0+255),b
  6421  000800  D001               	goto	l839
  6422  000802  D017               	goto	u9110
  6423  000804                     l839:
  6424                           
  6425                           ; BSR set to: 0
  6426                           ;sms.c: 259: ph_num[l] = mdRxBuf[(uint8_t)(ph_num_index + l)];
  6427                           
  6428                           ; BSR set to: 0
  6429  000804  51B3               	movf	_ph_num_index& (0+255),w,b
  6430  000806  2586               	addwf	parse_cmgr@l& (0+255),w,b
  6431  000808  6F71               	movwf	??_parse_cmgr& (0+255),b
  6432  00080A  5171               	movf	??_parse_cmgr& (0+255),w,b
  6433  00080C  0D01               	mullw	1
  6434  00080E  0E00               	movlw	low _mdRxBuf
  6435  000810  24F3               	addwf	prodl,w,c
  6436  000812  6ED9               	movwf	fsr2l,c
  6437  000814  0E02               	movlw	high _mdRxBuf
  6438  000816  20F4               	addwfc	prodh,w,c
  6439  000818  6EDA               	movwf	fsr2h,c
  6440  00081A  5186               	movf	parse_cmgr@l& (0+255),w,b
  6441  00081C  0D01               	mullw	1
  6442  00081E  0EE9               	movlw	low _ph_num
  6443  000820  24F3               	addwf	prodl,w,c
  6444  000822  6EE1               	movwf	fsr1l,c
  6445  000824  0E01               	movlw	high _ph_num
  6446  000826  20F4               	addwfc	prodh,w,c
  6447  000828  6EE2               	movwf	fsr1h,c
  6448  00082A  CFDF FFE7          	movff	indf2,indf1
  6449                           
  6450                           ; BSR set to: 0
  6451  00082E  2B86               	incf	parse_cmgr@l& (0+255),f,b
  6452  000830  D7E5               	goto	l7250
  6453  000832                     u9110:
  6454                           
  6455                           ; BSR set to: 0
  6456                           ;sms.c: 260: }
  6457                           ;sms.c: 261: if (mdRxBuf[i] == '\n')
  6458                           
  6459                           ; BSR set to: 0
  6460                           
  6461                           ; BSR set to: 0
  6462  000832  5188               	movf	parse_cmgr@i& (0+255),w,b
  6463  000834  0D01               	mullw	1
  6464  000836  0E00               	movlw	low _mdRxBuf
  6465  000838  24F3               	addwf	prodl,w,c
  6466  00083A  6ED9               	movwf	fsr2l,c
  6467  00083C  0E02               	movlw	high _mdRxBuf
  6468  00083E  20F4               	addwfc	prodh,w,c
  6469  000840  6EDA               	movwf	fsr2h,c
  6470  000842  0E0A               	movlw	10
  6471  000844  18DE               	xorwf	postinc2,w,c
  6472  000846  B4D8               	btfsc	status,2,c
  6473                           
  6474                           ; BSR set to: 0
  6475                           ;sms.c: 262: newline_index = i;
  6476  000848  C088  F07C         	movff	parse_cmgr@i,parse_cmgr@newline_index
  6477                           
  6478                           ; BSR set to: 0
  6479                           ;sms.c: 263: if (mdRxBuf[i] == access_code[0] && mdRxBuf[(uint8_t)(i + 1)] == access_cod
      +                          e[1] && mdRxBuf[(uint8_t)(i + 2)] == access_code[2] && mdRxBuf[(uint8_t)(i + 3)] == acce
      +                          ss_code[3] && mdRxBuf[(uint8_t)(i + 4)] == '#')
  6480                           
  6481                           ; BSR set to: 0
  6482  00084C  5188               	movf	parse_cmgr@i& (0+255),w,b
  6483  00084E  0D01               	mullw	1
  6484  000850  0E00               	movlw	low _mdRxBuf
  6485  000852  24F3               	addwf	prodl,w,c
  6486  000854  6ED9               	movwf	fsr2l,c
  6487  000856  0E02               	movlw	high _mdRxBuf
  6488  000858  20F4               	addwfc	prodh,w,c
  6489  00085A  6EDA               	movwf	fsr2h,c
  6490  00085C  517E               	movf	parse_cmgr@access_code& (0+255),w,b
  6491  00085E  18DE               	xorwf	postinc2,w,c
  6492  000860  A4D8               	btfss	status,2,c
  6493  000862  D0F8               	goto	l852
  6494                           
  6495                           ; BSR set to: 0
  6496  000864  C088  F071         	movff	parse_cmgr@i,??_parse_cmgr
  6497  000868  0E01               	movlw	1
  6498  00086A  2771               	addwf	??_parse_cmgr& (0+255),f,b
  6499  00086C  5171               	movf	??_parse_cmgr& (0+255),w,b
  6500  00086E  0D01               	mullw	1
  6501  000870  0E00               	movlw	low _mdRxBuf
  6502  000872  24F3               	addwf	prodl,w,c
  6503  000874  6ED9               	movwf	fsr2l,c
  6504  000876  0E02               	movlw	high _mdRxBuf
  6505  000878  20F4               	addwfc	prodh,w,c
  6506  00087A  6EDA               	movwf	fsr2h,c
  6507  00087C  517F               	movf	(parse_cmgr@access_code+1)& (0+255),w,b
  6508  00087E  18DE               	xorwf	postinc2,w,c
  6509  000880  A4D8               	btfss	status,2,c
  6510  000882  D0E8               	goto	l852
  6511                           
  6512                           ; BSR set to: 0
  6513  000884  C088  F071         	movff	parse_cmgr@i,??_parse_cmgr
  6514  000888  0E02               	movlw	2
  6515  00088A  2771               	addwf	??_parse_cmgr& (0+255),f,b
  6516  00088C  5171               	movf	??_parse_cmgr& (0+255),w,b
  6517  00088E  0D01               	mullw	1
  6518  000890  0E00               	movlw	low _mdRxBuf
  6519  000892  24F3               	addwf	prodl,w,c
  6520  000894  6ED9               	movwf	fsr2l,c
  6521  000896  0E02               	movlw	high _mdRxBuf
  6522  000898  20F4               	addwfc	prodh,w,c
  6523  00089A  6EDA               	movwf	fsr2h,c
  6524  00089C  5180               	movf	(parse_cmgr@access_code+2)& (0+255),w,b
  6525  00089E  18DE               	xorwf	postinc2,w,c
  6526  0008A0  A4D8               	btfss	status,2,c
  6527  0008A2  D0D8               	goto	l852
  6528                           
  6529                           ; BSR set to: 0
  6530  0008A4  C088  F071         	movff	parse_cmgr@i,??_parse_cmgr
  6531  0008A8  0E03               	movlw	3
  6532  0008AA  2771               	addwf	??_parse_cmgr& (0+255),f,b
  6533  0008AC  5171               	movf	??_parse_cmgr& (0+255),w,b
  6534  0008AE  0D01               	mullw	1
  6535  0008B0  0E00               	movlw	low _mdRxBuf
  6536  0008B2  24F3               	addwf	prodl,w,c
  6537  0008B4  6ED9               	movwf	fsr2l,c
  6538  0008B6  0E02               	movlw	high _mdRxBuf
  6539  0008B8  20F4               	addwfc	prodh,w,c
  6540  0008BA  6EDA               	movwf	fsr2h,c
  6541  0008BC  5181               	movf	(parse_cmgr@access_code+3)& (0+255),w,b
  6542  0008BE  18DE               	xorwf	postinc2,w,c
  6543  0008C0  A4D8               	btfss	status,2,c
  6544  0008C2  D0C8               	goto	l852
  6545                           
  6546                           ; BSR set to: 0
  6547  0008C4  C088  F071         	movff	parse_cmgr@i,??_parse_cmgr
  6548  0008C8  0E04               	movlw	4
  6549  0008CA  2771               	addwf	??_parse_cmgr& (0+255),f,b
  6550  0008CC  5171               	movf	??_parse_cmgr& (0+255),w,b
  6551  0008CE  0D01               	mullw	1
  6552  0008D0  0E00               	movlw	low _mdRxBuf
  6553  0008D2  24F3               	addwf	prodl,w,c
  6554  0008D4  6ED9               	movwf	fsr2l,c
  6555  0008D6  0E02               	movlw	high _mdRxBuf
  6556  0008D8  20F4               	addwfc	prodh,w,c
  6557  0008DA  6EDA               	movwf	fsr2h,c
  6558  0008DC  0E23               	movlw	35
  6559  0008DE  18DE               	xorwf	postinc2,w,c
  6560  0008E0  A4D8               	btfss	status,2,c
  6561  0008E2  D0B8               	goto	l852
  6562                           
  6563                           ; BSR set to: 0
  6564                           ;sms.c: 266: {
  6565                           ;sms.c: 267: if (mdRxBuf[(uint8_t)(i + 7)] == '#')
  6566  0008E4  C088  F071         	movff	parse_cmgr@i,??_parse_cmgr
  6567  0008E8  0E07               	movlw	7
  6568  0008EA  2771               	addwf	??_parse_cmgr& (0+255),f,b
  6569  0008EC  5171               	movf	??_parse_cmgr& (0+255),w,b
  6570  0008EE  0D01               	mullw	1
  6571  0008F0  0E00               	movlw	low _mdRxBuf
  6572  0008F2  24F3               	addwf	prodl,w,c
  6573  0008F4  6ED9               	movwf	fsr2l,c
  6574  0008F6  0E02               	movlw	high _mdRxBuf
  6575  0008F8  20F4               	addwfc	prodh,w,c
  6576  0008FA  6EDA               	movwf	fsr2h,c
  6577  0008FC  0E23               	movlw	35
  6578  0008FE  18DE               	xorwf	postinc2,w,c
  6579  000900  A4D8               	btfss	status,2,c
  6580  000902  D061               	goto	l843
  6581                           
  6582                           ; BSR set to: 0
  6583                           ;sms.c: 268: {
  6584                           ;sms.c: 269: if (mdRxBuf[(uint8_t)(i + 5)] >= 0x41)
  6585  000904  C088  F071         	movff	parse_cmgr@i,??_parse_cmgr
  6586  000908  0E05               	movlw	5
  6587  00090A  2771               	addwf	??_parse_cmgr& (0+255),f,b
  6588  00090C  5171               	movf	??_parse_cmgr& (0+255),w,b
  6589  00090E  0D01               	mullw	1
  6590  000910  0E00               	movlw	low _mdRxBuf
  6591  000912  24F3               	addwf	prodl,w,c
  6592  000914  6ED9               	movwf	fsr2l,c
  6593  000916  0E02               	movlw	high _mdRxBuf
  6594  000918  20F4               	addwfc	prodh,w,c
  6595  00091A  6EDA               	movwf	fsr2h,c
  6596  00091C  0E40               	movlw	64
  6597  00091E  64DF               	cpfsgt	indf2,c
  6598  000920  D00F               	goto	l844
  6599                           
  6600                           ; BSR set to: 0
  6601                           ;sms.c: 270: field_num_tens = (uint8_t)((mdRxBuf[(uint8_t)(i + 5)] - 0x41 + 0x0A) * 10);
  6602  000922  C088  F071         	movff	parse_cmgr@i,??_parse_cmgr
  6603  000926  0E05               	movlw	5
  6604  000928  2771               	addwf	??_parse_cmgr& (0+255),f,b
  6605  00092A  5171               	movf	??_parse_cmgr& (0+255),w,b
  6606  00092C  0D01               	mullw	1
  6607  00092E  0E00               	movlw	low _mdRxBuf
  6608  000930  24F3               	addwf	prodl,w,c
  6609  000932  6ED9               	movwf	fsr2l,c
  6610  000934  0E02               	movlw	high _mdRxBuf
  6611  000936  20F4               	addwfc	prodh,w,c
  6612  000938  6EDA               	movwf	fsr2h,c
  6613  00093A  50DF               	movf	indf2,w,c
  6614  00093C  0FC9               	addlw	201
  6615  00093E  D00E               	goto	L3
  6616  000940                     l844:
  6617                           
  6618                           ; BSR set to: 0
  6619                           ;sms.c: 271: else
  6620                           ;sms.c: 272: field_num_tens = (uint8_t)((mdRxBuf[(uint8_t)(i + 5)] - 0x30) * 10);
  6621                           
  6622                           ; BSR set to: 0
  6623  000940  C088  F071         	movff	parse_cmgr@i,??_parse_cmgr
  6624  000944  0E05               	movlw	5
  6625  000946  2771               	addwf	??_parse_cmgr& (0+255),f,b
  6626  000948  5171               	movf	??_parse_cmgr& (0+255),w,b
  6627  00094A  0D01               	mullw	1
  6628  00094C  0E00               	movlw	low _mdRxBuf
  6629  00094E  24F3               	addwf	prodl,w,c
  6630  000950  6ED9               	movwf	fsr2l,c
  6631  000952  0E02               	movlw	high _mdRxBuf
  6632  000954  20F4               	addwfc	prodh,w,c
  6633  000956  6EDA               	movwf	fsr2h,c
  6634  000958  50DF               	movf	indf2,w,c
  6635  00095A  0FD0               	addlw	208
  6636  00095C                     L3:
  6637  00095C  0D0A               	mullw	10
  6638  00095E  CFF3 F082          	movff	prodl,parse_cmgr@field_num_tens
  6639                           
  6640                           ; BSR set to: 0
  6641                           ;sms.c: 273: if (mdRxBuf[(uint8_t)(i + 6)] >= 0x41)
  6642  000962  C088  F071         	movff	parse_cmgr@i,??_parse_cmgr
  6643  000966  0E06               	movlw	6
  6644  000968  2771               	addwf	??_parse_cmgr& (0+255),f,b
  6645  00096A  5171               	movf	??_parse_cmgr& (0+255),w,b
  6646  00096C  0D01               	mullw	1
  6647  00096E  0E00               	movlw	low _mdRxBuf
  6648  000970  24F3               	addwf	prodl,w,c
  6649  000972  6ED9               	movwf	fsr2l,c
  6650  000974  0E02               	movlw	high _mdRxBuf
  6651  000976  20F4               	addwfc	prodh,w,c
  6652  000978  6EDA               	movwf	fsr2h,c
  6653  00097A  0E40               	movlw	64
  6654  00097C  64DF               	cpfsgt	indf2,c
  6655  00097E  D00F               	goto	l846
  6656                           
  6657                           ; BSR set to: 0
  6658                           ;sms.c: 274: field_num_ones = (uint8_t)(mdRxBuf[(uint8_t)(i + 6)] - 0x41 + 0x0A);
  6659  000980  C088  F071         	movff	parse_cmgr@i,??_parse_cmgr
  6660  000984  0E06               	movlw	6
  6661  000986  2771               	addwf	??_parse_cmgr& (0+255),f,b
  6662  000988  5171               	movf	??_parse_cmgr& (0+255),w,b
  6663  00098A  0D01               	mullw	1
  6664  00098C  0E00               	movlw	low _mdRxBuf
  6665  00098E  24F3               	addwf	prodl,w,c
  6666  000990  6ED9               	movwf	fsr2l,c
  6667  000992  0E02               	movlw	high _mdRxBuf
  6668  000994  20F4               	addwfc	prodh,w,c
  6669  000996  6EDA               	movwf	fsr2h,c
  6670  000998  50DF               	movf	indf2,w,c
  6671  00099A  0FC9               	addlw	201
  6672  00099C  D00E               	goto	L4
  6673  00099E                     l846:
  6674                           
  6675                           ; BSR set to: 0
  6676                           ;sms.c: 275: else
  6677                           ;sms.c: 276: field_num_ones = (uint8_t)(mdRxBuf[(uint8_t)(i + 6)] - 0x30);
  6678                           
  6679                           ; BSR set to: 0
  6680  00099E  C088  F071         	movff	parse_cmgr@i,??_parse_cmgr
  6681  0009A2  0E06               	movlw	6
  6682  0009A4  2771               	addwf	??_parse_cmgr& (0+255),f,b
  6683  0009A6  5171               	movf	??_parse_cmgr& (0+255),w,b
  6684  0009A8  0D01               	mullw	1
  6685  0009AA  0E00               	movlw	low _mdRxBuf
  6686  0009AC  24F3               	addwf	prodl,w,c
  6687  0009AE  6ED9               	movwf	fsr2l,c
  6688  0009B0  0E02               	movlw	high _mdRxBuf
  6689  0009B2  20F4               	addwfc	prodh,w,c
  6690  0009B4  6EDA               	movwf	fsr2h,c
  6691  0009B6  50DF               	movf	indf2,w,c
  6692  0009B8  0FD0               	addlw	208
  6693  0009BA                     L4:
  6694  0009BA  6F83               	movwf	parse_cmgr@field_num_ones& (0+255),b
  6695                           
  6696                           ; BSR set to: 0
  6697                           ;sms.c: 277: field_num_tens += field_num_ones;
  6698                           
  6699                           ; BSR set to: 0
  6700  0009BC  5183               	movf	parse_cmgr@field_num_ones& (0+255),w,b
  6701  0009BE  2782               	addwf	parse_cmgr@field_num_tens& (0+255),f,b
  6702                           
  6703                           ; BSR set to: 0
  6704                           ;sms.c: 278: final_field_index = (uint8_t)(i + 8);
  6705  0009C0  5188               	movf	parse_cmgr@i& (0+255),w,b
  6706  0009C2  0F08               	addlw	8
  6707  0009C4  D043               	goto	L5
  6708  0009C6                     l843:
  6709                           
  6710                           ; BSR set to: 0
  6711                           ;sms.c: 280: else if (mdRxBuf[(uint8_t)(i + 6)] == '#')
  6712                           
  6713                           ; BSR set to: 0
  6714  0009C6  C088  F071         	movff	parse_cmgr@i,??_parse_cmgr
  6715  0009CA  0E06               	movlw	6
  6716  0009CC  2771               	addwf	??_parse_cmgr& (0+255),f,b
  6717  0009CE  5171               	movf	??_parse_cmgr& (0+255),w,b
  6718  0009D0  0D01               	mullw	1
  6719  0009D2  0E00               	movlw	low _mdRxBuf
  6720  0009D4  24F3               	addwf	prodl,w,c
  6721  0009D6  6ED9               	movwf	fsr2l,c
  6722  0009D8  0E02               	movlw	high _mdRxBuf
  6723  0009DA  20F4               	addwfc	prodh,w,c
  6724  0009DC  6EDA               	movwf	fsr2h,c
  6725  0009DE  0E23               	movlw	35
  6726  0009E0  18DE               	xorwf	postinc2,w,c
  6727  0009E2  A4D8               	btfss	status,2,c
  6728  0009E4  D035               	goto	l849
  6729                           
  6730                           ; BSR set to: 0
  6731                           ;sms.c: 281: {
  6732                           ;sms.c: 282: field_num_tens = 0;
  6733  0009E6  0E00               	movlw	0
  6734  0009E8  6F82               	movwf	parse_cmgr@field_num_tens& (0+255),b
  6735                           
  6736                           ; BSR set to: 0
  6737                           ;sms.c: 283: if (mdRxBuf[(uint8_t)(i + 5)] >= 0x41)
  6738  0009EA  C088  F071         	movff	parse_cmgr@i,??_parse_cmgr
  6739  0009EE  0E05               	movlw	5
  6740  0009F0  2771               	addwf	??_parse_cmgr& (0+255),f,b
  6741  0009F2  5171               	movf	??_parse_cmgr& (0+255),w,b
  6742  0009F4  0D01               	mullw	1
  6743  0009F6  0E00               	movlw	low _mdRxBuf
  6744  0009F8  24F3               	addwf	prodl,w,c
  6745  0009FA  6ED9               	movwf	fsr2l,c
  6746  0009FC  0E02               	movlw	high _mdRxBuf
  6747  0009FE  20F4               	addwfc	prodh,w,c
  6748  000A00  6EDA               	movwf	fsr2h,c
  6749  000A02  0E40               	movlw	64
  6750  000A04  64DF               	cpfsgt	indf2,c
  6751  000A06  D00F               	goto	l850
  6752                           
  6753                           ; BSR set to: 0
  6754                           ;sms.c: 284: field_num_ones = (uint8_t)(mdRxBuf[(uint8_t)(i + 5)] - 0x41 + 0x0A);
  6755  000A08  C088  F071         	movff	parse_cmgr@i,??_parse_cmgr
  6756  000A0C  0E05               	movlw	5
  6757  000A0E  2771               	addwf	??_parse_cmgr& (0+255),f,b
  6758  000A10  5171               	movf	??_parse_cmgr& (0+255),w,b
  6759  000A12  0D01               	mullw	1
  6760  000A14  0E00               	movlw	low _mdRxBuf
  6761  000A16  24F3               	addwf	prodl,w,c
  6762  000A18  6ED9               	movwf	fsr2l,c
  6763  000A1A  0E02               	movlw	high _mdRxBuf
  6764  000A1C  20F4               	addwfc	prodh,w,c
  6765  000A1E  6EDA               	movwf	fsr2h,c
  6766  000A20  50DF               	movf	indf2,w,c
  6767  000A22  0FC9               	addlw	201
  6768  000A24  D00E               	goto	L6
  6769  000A26                     l850:
  6770                           
  6771                           ; BSR set to: 0
  6772                           ;sms.c: 285: else
  6773                           ;sms.c: 286: field_num_ones = (uint8_t)(mdRxBuf[(uint8_t)(i + 5)] - 0x30);
  6774                           
  6775                           ; BSR set to: 0
  6776  000A26  C088  F071         	movff	parse_cmgr@i,??_parse_cmgr
  6777  000A2A  0E05               	movlw	5
  6778  000A2C  2771               	addwf	??_parse_cmgr& (0+255),f,b
  6779  000A2E  5171               	movf	??_parse_cmgr& (0+255),w,b
  6780  000A30  0D01               	mullw	1
  6781  000A32  0E00               	movlw	low _mdRxBuf
  6782  000A34  24F3               	addwf	prodl,w,c
  6783  000A36  6ED9               	movwf	fsr2l,c
  6784  000A38  0E02               	movlw	high _mdRxBuf
  6785  000A3A  20F4               	addwfc	prodh,w,c
  6786  000A3C  6EDA               	movwf	fsr2h,c
  6787  000A3E  50DF               	movf	indf2,w,c
  6788  000A40  0FD0               	addlw	208
  6789  000A42                     L6:
  6790  000A42  6F83               	movwf	parse_cmgr@field_num_ones& (0+255),b
  6791                           
  6792                           ; BSR set to: 0
  6793                           ;sms.c: 287: field_num_tens += field_num_ones;
  6794                           
  6795                           ; BSR set to: 0
  6796  000A44  5183               	movf	parse_cmgr@field_num_ones& (0+255),w,b
  6797  000A46  2782               	addwf	parse_cmgr@field_num_tens& (0+255),f,b
  6798                           
  6799                           ; BSR set to: 0
  6800                           ;sms.c: 288: final_field_index = (uint8_t)(i + 7);
  6801  000A48  5188               	movf	parse_cmgr@i& (0+255),w,b
  6802  000A4A  0F07               	addlw	7
  6803  000A4C                     L5:
  6804  000A4C  6F85               	movwf	parse_cmgr@final_field_index& (0+255),b
  6805                           
  6806                           ;sms.c: 289: }
  6807  000A4E  D002               	goto	l852
  6808  000A50                     l849:
  6809                           
  6810                           ; BSR set to: 0
  6811                           ;sms.c: 290: else
  6812                           ;sms.c: 291: return 4;
  6813                           
  6814                           ; BSR set to: 0
  6815  000A50  0E04               	movlw	4
  6816                           
  6817                           ; BSR set to: 0
  6818  000A52  0012               	return	
  6819  000A54                     l852:
  6820                           
  6821                           ; BSR set to: 0
  6822                           
  6823                           ; BSR set to: 0
  6824                           
  6825                           ; BSR set to: 0
  6826                           
  6827                           ; BSR set to: 0
  6828  000A54  2B88               	incf	parse_cmgr@i& (0+255),f,b
  6829  000A56  D6A0               	goto	l7234
  6830  000A58                     u9230:
  6831                           
  6832                           ; BSR set to: 0
  6833                           ;sms.c: 292: }
  6834                           ;sms.c: 293: }
  6835                           ;sms.c: 294: for (uint8_t j = final_field_index; j < sizeof(mdRxBuf); j++)
  6836  000A58  C085  F087         	movff	parse_cmgr@final_field_index,parse_cmgr@j
  6837  000A5C                     l7312:
  6838                           
  6839                           ; BSR set to: 0
  6840  000A5C  0E9F               	movlw	159
  6841  000A5E  6587               	cpfsgt	parse_cmgr@j& (0+255),b
  6842  000A60  D001               	goto	l854
  6843  000A62  D00F               	goto	u9260
  6844  000A64                     l854:
  6845                           
  6846                           ; BSR set to: 0
  6847                           ;sms.c: 295: {
  6848                           ;sms.c: 296: if (mdRxBuf[j] == '#')
  6849                           
  6850                           ; BSR set to: 0
  6851  000A64  5187               	movf	parse_cmgr@j& (0+255),w,b
  6852  000A66  0D01               	mullw	1
  6853  000A68  0E00               	movlw	low _mdRxBuf
  6854  000A6A  24F3               	addwf	prodl,w,c
  6855  000A6C  6ED9               	movwf	fsr2l,c
  6856  000A6E  0E02               	movlw	high _mdRxBuf
  6857  000A70  20F4               	addwfc	prodh,w,c
  6858  000A72  6EDA               	movwf	fsr2h,c
  6859  000A74  0E23               	movlw	35
  6860  000A76  18DE               	xorwf	postinc2,w,c
  6861  000A78  B4D8               	btfsc	status,2,c
  6862                           
  6863                           ; BSR set to: 0
  6864                           ;sms.c: 297: final_field_term = j;
  6865  000A7A  C087  F084         	movff	parse_cmgr@j,parse_cmgr@final_field_term
  6866                           
  6867                           ; BSR set to: 0
  6868                           
  6869                           ; BSR set to: 0
  6870  000A7E  2B87               	incf	parse_cmgr@j& (0+255),f,b
  6871  000A80  D7ED               	goto	l7312
  6872  000A82                     u9260:
  6873                           
  6874                           ; BSR set to: 0
  6875                           ;sms.c: 298: }
  6876                           ;sms.c: 299: if (final_field_term == 0)
  6877                           
  6878                           ; BSR set to: 0
  6879  000A82  5184               	movf	parse_cmgr@final_field_term& (0+255),w,b
  6880  000A84  A4D8               	btfss	status,2,c
  6881  000A86  D002               	goto	l857
  6882                           
  6883                           ; BSR set to: 0
  6884                           ;sms.c: 300: return 4;
  6885  000A88  0E04               	movlw	4
  6886                           
  6887                           ; BSR set to: 0
  6888  000A8A  0012               	return	
  6889  000A8C                     l857:
  6890                           
  6891                           ; BSR set to: 0
  6892                           ;sms.c: 301: for (uint8_t k = final_field_index; k < final_field_term; k++)
  6893  000A8C  C085  F07D         	movff	parse_cmgr@final_field_index,parse_cmgr@k
  6894  000A90  D001               	goto	l858
  6895  000A92                     
  6896                           ; BSR set to: 0
  6897                           
  6898                           ; BSR set to: 0
  6899  000A92  2B7D               	incf	parse_cmgr@k& (0+255),f,b
  6900  000A94                     l858:
  6901                           
  6902                           ; BSR set to: 0
  6903                           
  6904                           ; BSR set to: 0
  6905  000A94  5184               	movf	parse_cmgr@final_field_term& (0+255),w,b
  6906  000A96  5D7D               	subwf	parse_cmgr@k& (0+255),w,b
  6907  000A98  A0D8               	btfss	status,0,c
  6908  000A9A  D7FB               	goto	l859
  6909                           
  6910                           ; BSR set to: 0
  6911                           ;sms.c: 304: }
  6912                           ;sms.c: 305: if (program_field(field_num_tens, referenceBuf, (uint8_t)(final_field_term 
      +                          - final_field_index)))
  6913                           
  6914                           ; BSR set to: 0
  6915  000A9C  0E40               	movlw	low _referenceBuf
  6916  000A9E  6F68               	movwf	program_field@data_buf& (0+255),b
  6917  000AA0  0E03               	movlw	high _referenceBuf
  6918  000AA2  6F69               	movwf	(program_field@data_buf+1)& (0+255),b
  6919  000AA4  5185               	movf	parse_cmgr@final_field_index& (0+255),w,b
  6920  000AA6  0800               	sublw	0
  6921  000AA8  2584               	addwf	parse_cmgr@final_field_term& (0+255),w,b
  6922  000AAA  6F6A               	movwf	program_field@size& (0+255),b
  6923  000AAC  5182               	movf	parse_cmgr@field_num_tens& (0+255),w,b
  6924  000AAE  EC60  F005         	call	_program_field
  6925  000AB2  0900               	iorlw	0
  6926  000AB4  B4D8               	btfsc	status,2,c
  6927  000AB6  D002               	goto	l861
  6928                           
  6929                           ;sms.c: 306: return 1;
  6930  000AB8  0E01               	movlw	1
  6931  000ABA  0012               	return	
  6932  000ABC                     l861:
  6933                           
  6934                           ;sms.c: 307: else
  6935                           ;sms.c: 308: return 4;
  6936  000ABC  0E04               	movlw	4
  6937  000ABE  0012               	return	
  6938  000AC0                     __end_of_parse_cmgr:
  6939                           	opt stack 0
  6940                           tblptru	equ	0xFF8
  6941                           tblptrh	equ	0xFF7
  6942                           tblptrl	equ	0xFF6
  6943                           tablat	equ	0xFF5
  6944                           prodh	equ	0xFF4
  6945                           prodl	equ	0xFF3
  6946                           intcon	equ	0xFF2
  6947                           postinc0	equ	0xFEE
  6948                           wreg	equ	0xFE8
  6949                           indf1	equ	0xFE7
  6950                           postdec1	equ	0xFE5
  6951                           plusw1	equ	0xFE3
  6952                           fsr1h	equ	0xFE2
  6953                           fsr1l	equ	0xFE1
  6954                           indf2	equ	0xFDF
  6955                           postinc2	equ	0xFDE
  6956                           plusw2	equ	0xFDB
  6957                           fsr2h	equ	0xFDA
  6958                           fsr2l	equ	0xFD9
  6959                           status	equ	0xFD8
  6960                           
  6961 ;; *************** function _program_field *****************
  6962 ;; Defined at:
  6963 ;;		line 5 in file "cell_settings.c"
  6964 ;; Parameters:    Size  Location     Type
  6965 ;;  field_number    1    wreg     unsigned char 
  6966 ;;  data_buf        2    8[BANK0 ] PTR unsigned char 
  6967 ;;		 -> referenceBuf(60), 
  6968 ;;  size            1   10[BANK0 ] unsigned char 
  6969 ;; Auto vars:     Size  Location     Type
  6970 ;;  field_number    1   16[BANK0 ] unsigned char 
  6971 ;;  start_addr      1   15[BANK0 ] unsigned char 
  6972 ;;  i               1   14[BANK0 ] unsigned char 
  6973 ;;  max_size        1   13[BANK0 ] unsigned char 
  6974 ;;  page            1   12[BANK0 ] unsigned char 
  6975 ;; Return value:  Size  Location     Type
  6976 ;;                  1    wreg      unsigned char 
  6977 ;; Registers used:
  6978 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6979 ;; Tracked objects:
  6980 ;;		On entry : 0/0
  6981 ;;		On exit  : 0/0
  6982 ;;		Unchanged: 0/0
  6983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6984 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6985 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6986 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6987 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6988 ;;Total ram usage:        9 bytes
  6989 ;; Hardware stack levels used:    1
  6990 ;; Hardware stack levels required when called:    4
  6991 ;; This function calls:
  6992 ;;		___awdiv
  6993 ;;		___awmod
  6994 ;;		_ee_write
  6995 ;; This function is called by:
  6996 ;;		_parse_cmgr
  6997 ;; This function uses a non-reentrant model
  6998 ;;
  6999                           
  7000                           	psect	text24
  7001  000AC0                     __ptext24:
  7002                           	opt stack 0
  7003  000AC0                     _program_field:
  7004                           	opt stack 22
  7005                           
  7006                           ;incstack = 0
  7007                           ;program_field@field_number stored from wreg
  7008  000AC0  0100               	movlb	0	; () banked
  7009  000AC2  6F70               	movwf	program_field@field_number& (0+255),b
  7010                           
  7011                           ;cell_settings.c: 7: uint8_t start_addr;
  7012                           ;cell_settings.c: 8: uint8_t page = 0x00;
  7013  000AC4  0E00               	movlw	0
  7014  000AC6  0100               	movlb	0	; () banked
  7015  000AC8  6F6C               	movwf	program_field@page& (0+255),b
  7016                           
  7017                           ;cell_settings.c: 9: uint8_t max_size = 40;
  7018  000ACA  0E28               	movlw	40
  7019  000ACC  6F6D               	movwf	program_field@max_size& (0+255),b
  7020                           
  7021                           ;cell_settings.c: 10: uint8_t i = 0;
  7022  000ACE  0E00               	movlw	0
  7023  000AD0  6F6E               	movwf	program_field@i& (0+255),b
  7024                           
  7025                           ; BSR set to: 0
  7026                           ;cell_settings.c: 11: if (field_number == 1)
  7027  000AD2  0570               	decf	program_field@field_number& (0+255),w,b
  7028  000AD4  A4D8               	btfss	status,2,c
  7029  000AD6  D002               	goto	l1689
  7030                           
  7031                           ; BSR set to: 0
  7032                           ;cell_settings.c: 12: start_addr = 0x30;
  7033  000AD8  0E30               	movlw	48
  7034  000ADA  D071               	goto	L25
  7035  000ADC                     l1689:
  7036                           
  7037                           ; BSR set to: 0
  7038                           ;cell_settings.c: 13: else if (field_number == 2)
  7039                           
  7040                           ; BSR set to: 0
  7041  000ADC  0E02               	movlw	2
  7042  000ADE  1970               	xorwf	program_field@field_number& (0+255),w,b
  7043  000AE0  A4D8               	btfss	status,2,c
  7044  000AE2  D002               	goto	l1691
  7045                           
  7046                           ; BSR set to: 0
  7047                           ;cell_settings.c: 14: start_addr = 0x50;
  7048  000AE4  0E50               	movlw	80
  7049  000AE6  D06B               	goto	L25
  7050  000AE8                     l1691:
  7051                           
  7052                           ; BSR set to: 0
  7053                           ;cell_settings.c: 15: else if (field_number == 3)
  7054                           
  7055                           ; BSR set to: 0
  7056  000AE8  0E03               	movlw	3
  7057  000AEA  1970               	xorwf	program_field@field_number& (0+255),w,b
  7058  000AEC  A4D8               	btfss	status,2,c
  7059  000AEE  D002               	goto	l1693
  7060                           
  7061                           ; BSR set to: 0
  7062                           ;cell_settings.c: 16: start_addr = 0x70;
  7063  000AF0  0E70               	movlw	112
  7064  000AF2  D065               	goto	L25
  7065  000AF4                     l1693:
  7066                           
  7067                           ; BSR set to: 0
  7068                           ;cell_settings.c: 17: else if (field_number == 4)
  7069                           
  7070                           ; BSR set to: 0
  7071  000AF4  0E04               	movlw	4
  7072  000AF6  1970               	xorwf	program_field@field_number& (0+255),w,b
  7073  000AF8  A4D8               	btfss	status,2,c
  7074  000AFA  D002               	goto	l1695
  7075                           
  7076                           ; BSR set to: 0
  7077                           ;cell_settings.c: 18: start_addr = 0x90;
  7078  000AFC  0E90               	movlw	144
  7079  000AFE  D05F               	goto	L25
  7080  000B00                     l1695:
  7081                           
  7082                           ; BSR set to: 0
  7083                           ;cell_settings.c: 19: else if (field_number == 5)
  7084                           
  7085                           ; BSR set to: 0
  7086  000B00  0E05               	movlw	5
  7087  000B02  1970               	xorwf	program_field@field_number& (0+255),w,b
  7088  000B04  A4D8               	btfss	status,2,c
  7089  000B06  D002               	goto	l1697
  7090                           
  7091                           ; BSR set to: 0
  7092                           ;cell_settings.c: 20: start_addr = 0xC0;
  7093  000B08  0EC0               	movlw	192
  7094  000B0A  D059               	goto	L25
  7095  000B0C                     l1697:
  7096                           
  7097                           ; BSR set to: 0
  7098                           ;cell_settings.c: 21: else if (field_number == 6)
  7099                           
  7100                           ; BSR set to: 0
  7101  000B0C  0E06               	movlw	6
  7102  000B0E  1970               	xorwf	program_field@field_number& (0+255),w,b
  7103  000B10  A4D8               	btfss	status,2,c
  7104  000B12  D002               	goto	l1699
  7105                           
  7106                           ; BSR set to: 0
  7107                           ;cell_settings.c: 22: start_addr = 0xC7;
  7108  000B14  0EC7               	movlw	199
  7109  000B16  D053               	goto	L25
  7110  000B18                     l1699:
  7111                           
  7112                           ; BSR set to: 0
  7113                           ;cell_settings.c: 23: else if (field_number == 7)
  7114                           
  7115                           ; BSR set to: 0
  7116  000B18  0E07               	movlw	7
  7117  000B1A  1970               	xorwf	program_field@field_number& (0+255),w,b
  7118  000B1C  A4D8               	btfss	status,2,c
  7119  000B1E  D002               	goto	l1701
  7120                           
  7121                           ; BSR set to: 0
  7122                           ;cell_settings.c: 24: start_addr = 0xC8;
  7123  000B20  0EC8               	movlw	200
  7124  000B22  D04D               	goto	L25
  7125  000B24                     l1701:
  7126                           
  7127                           ; BSR set to: 0
  7128                           ;cell_settings.c: 25: else if (field_number == 8)
  7129                           
  7130                           ; BSR set to: 0
  7131  000B24  0E08               	movlw	8
  7132  000B26  1970               	xorwf	program_field@field_number& (0+255),w,b
  7133  000B28  A4D8               	btfss	status,2,c
  7134  000B2A  D002               	goto	l1703
  7135                           
  7136                           ; BSR set to: 0
  7137                           ;cell_settings.c: 26: start_addr = 0xC9;
  7138  000B2C  0EC9               	movlw	201
  7139  000B2E  D047               	goto	L25
  7140  000B30                     l1703:
  7141                           
  7142                           ; BSR set to: 0
  7143                           ;cell_settings.c: 27: else if (field_number == 9)
  7144                           
  7145                           ; BSR set to: 0
  7146  000B30  0E09               	movlw	9
  7147  000B32  1970               	xorwf	program_field@field_number& (0+255),w,b
  7148  000B34  A4D8               	btfss	status,2,c
  7149  000B36  D002               	goto	l1705
  7150                           
  7151                           ; BSR set to: 0
  7152                           ;cell_settings.c: 28: start_addr = 0xB8;
  7153  000B38  0EB8               	movlw	184
  7154  000B3A  D041               	goto	L25
  7155  000B3C                     l1705:
  7156                           
  7157                           ; BSR set to: 0
  7158                           ;cell_settings.c: 29: else if (field_number == 10)
  7159                           
  7160                           ; BSR set to: 0
  7161  000B3C  0E0A               	movlw	10
  7162  000B3E  1970               	xorwf	program_field@field_number& (0+255),w,b
  7163  000B40  A4D8               	btfss	status,2,c
  7164  000B42  D002               	goto	l1707
  7165                           
  7166                           ; BSR set to: 0
  7167                           ;cell_settings.c: 30: start_addr = 0xCA;
  7168  000B44  0ECA               	movlw	202
  7169  000B46  D03B               	goto	L25
  7170  000B48                     l1707:
  7171                           
  7172                           ; BSR set to: 0
  7173                           ;cell_settings.c: 31: else if (field_number == 11)
  7174                           
  7175                           ; BSR set to: 0
  7176  000B48  0E0B               	movlw	11
  7177  000B4A  1970               	xorwf	program_field@field_number& (0+255),w,b
  7178  000B4C  A4D8               	btfss	status,2,c
  7179  000B4E  D002               	goto	l1709
  7180                           
  7181                           ; BSR set to: 0
  7182                           ;cell_settings.c: 32: start_addr = 0xD0;
  7183  000B50  0ED0               	movlw	208
  7184  000B52  D035               	goto	L25
  7185  000B54                     l1709:
  7186                           
  7187                           ; BSR set to: 0
  7188                           ;cell_settings.c: 33: else if (field_number == 12)
  7189                           
  7190                           ; BSR set to: 0
  7191  000B54  0E0C               	movlw	12
  7192  000B56  1970               	xorwf	program_field@field_number& (0+255),w,b
  7193  000B58  A4D8               	btfss	status,2,c
  7194  000B5A  D002               	goto	l1711
  7195                           
  7196                           ; BSR set to: 0
  7197                           ;cell_settings.c: 34: start_addr = 0xB9;
  7198  000B5C  0EB9               	movlw	185
  7199  000B5E  D02F               	goto	L25
  7200  000B60                     l1711:
  7201                           
  7202                           ; BSR set to: 0
  7203                           ;cell_settings.c: 35: else if (field_number == 14)
  7204                           
  7205                           ; BSR set to: 0
  7206  000B60  0E0E               	movlw	14
  7207  000B62  1970               	xorwf	program_field@field_number& (0+255),w,b
  7208  000B64  A4D8               	btfss	status,2,c
  7209  000B66  D002               	goto	l1713
  7210                           
  7211                           ; BSR set to: 0
  7212                           ;cell_settings.c: 36: start_addr = 0xBB;
  7213  000B68  0EBB               	movlw	187
  7214  000B6A  D029               	goto	L25
  7215  000B6C                     l1713:
  7216                           
  7217                           ; BSR set to: 0
  7218                           ;cell_settings.c: 37: else if (field_number == 15)
  7219                           
  7220                           ; BSR set to: 0
  7221  000B6C  0E0F               	movlw	15
  7222  000B6E  1970               	xorwf	program_field@field_number& (0+255),w,b
  7223  000B70  A4D8               	btfss	status,2,c
  7224  000B72  D002               	goto	l1715
  7225                           
  7226                           ; BSR set to: 0
  7227                           ;cell_settings.c: 38: start_addr = 0xBC;
  7228  000B74  0EBC               	movlw	188
  7229  000B76  D023               	goto	L25
  7230  000B78                     l1715:
  7231                           
  7232                           ; BSR set to: 0
  7233                           ;cell_settings.c: 39: else if (field_number == 16)
  7234                           
  7235                           ; BSR set to: 0
  7236  000B78  0E10               	movlw	16
  7237  000B7A  1970               	xorwf	program_field@field_number& (0+255),w,b
  7238  000B7C  A4D8               	btfss	status,2,c
  7239  000B7E  D002               	goto	l1717
  7240                           
  7241                           ; BSR set to: 0
  7242                           ;cell_settings.c: 40: start_addr = 0xBD;
  7243  000B80  0EBD               	movlw	189
  7244  000B82  D01D               	goto	L25
  7245  000B84                     l1717:
  7246                           
  7247                           ; BSR set to: 0
  7248                           ;cell_settings.c: 41: else if (field_number == 31)
  7249                           
  7250                           ; BSR set to: 0
  7251  000B84  0E1F               	movlw	31
  7252  000B86  1970               	xorwf	program_field@field_number& (0+255),w,b
  7253  000B88  A4D8               	btfss	status,2,c
  7254  000B8A  D002               	goto	l1719
  7255                           
  7256                           ; BSR set to: 0
  7257                           ;cell_settings.c: 42: start_addr = 0xB0;
  7258  000B8C  0EB0               	movlw	176
  7259  000B8E  D017               	goto	L25
  7260  000B90                     l1719:
  7261                           
  7262                           ; BSR set to: 0
  7263                           ;cell_settings.c: 43: else if (field_number == 32)
  7264                           
  7265                           ; BSR set to: 0
  7266  000B90  0E20               	movlw	32
  7267  000B92  1970               	xorwf	program_field@field_number& (0+255),w,b
  7268  000B94  A4D8               	btfss	status,2,c
  7269  000B96  D002               	goto	l1721
  7270                           
  7271                           ; BSR set to: 0
  7272                           ;cell_settings.c: 44: start_addr = 0xB2;
  7273  000B98  0EB2               	movlw	178
  7274  000B9A  D011               	goto	L25
  7275  000B9C                     l1721:
  7276                           
  7277                           ; BSR set to: 0
  7278                           ;cell_settings.c: 45: else if (field_number == 33)
  7279                           
  7280                           ; BSR set to: 0
  7281  000B9C  0E21               	movlw	33
  7282  000B9E  1970               	xorwf	program_field@field_number& (0+255),w,b
  7283  000BA0  A4D8               	btfss	status,2,c
  7284  000BA2  D002               	goto	l1723
  7285                           
  7286                           ; BSR set to: 0
  7287                           ;cell_settings.c: 46: start_addr = 0xB4;
  7288  000BA4  0EB4               	movlw	180
  7289  000BA6  D00B               	goto	L25
  7290  000BA8                     l1723:
  7291                           
  7292                           ; BSR set to: 0
  7293                           ;cell_settings.c: 47: else if (field_number == 34)
  7294                           
  7295                           ; BSR set to: 0
  7296  000BA8  0E22               	movlw	34
  7297  000BAA  1970               	xorwf	program_field@field_number& (0+255),w,b
  7298  000BAC  A4D8               	btfss	status,2,c
  7299  000BAE  D002               	goto	l1725
  7300                           
  7301                           ; BSR set to: 0
  7302                           ;cell_settings.c: 48: start_addr = 0xB6;
  7303  000BB0  0EB6               	movlw	182
  7304  000BB2  D005               	goto	L25
  7305  000BB4                     l1725:
  7306                           
  7307                           ; BSR set to: 0
  7308                           ;cell_settings.c: 49: else if (field_number == 35)
  7309                           
  7310                           ; BSR set to: 0
  7311  000BB4  0E23               	movlw	35
  7312  000BB6  1970               	xorwf	program_field@field_number& (0+255),w,b
  7313  000BB8  A4D8               	btfss	status,2,c
  7314  000BBA  D003               	goto	l1727
  7315                           
  7316                           ; BSR set to: 0
  7317                           ;cell_settings.c: 50: start_addr = 0x10;
  7318  000BBC  0E10               	movlw	16
  7319  000BBE                     L25:
  7320  000BBE  6F6F               	movwf	program_field@start_addr& (0+255),b
  7321  000BC0  D010               	goto	l1729
  7322  000BC2                     l1727:
  7323                           
  7324                           ; BSR set to: 0
  7325                           ;cell_settings.c: 51: else if (field_number >= 41 && field_number <= 56)
  7326                           
  7327                           ; BSR set to: 0
  7328  000BC2  0E28               	movlw	40
  7329  000BC4  6570               	cpfsgt	program_field@field_number& (0+255),b
  7330  000BC6  D00D               	goto	l1729
  7331                           
  7332                           ; BSR set to: 0
  7333  000BC8  0E39               	movlw	57
  7334  000BCA  6170               	cpfslt	program_field@field_number& (0+255),b
  7335  000BCC  D00A               	goto	l1729
  7336                           
  7337                           ; BSR set to: 0
  7338                           ;cell_settings.c: 52: {
  7339                           ;cell_settings.c: 53: page = 0x01;
  7340  000BCE  0E01               	movlw	1
  7341  000BD0  6F6C               	movwf	program_field@page& (0+255),b
  7342                           
  7343                           ; BSR set to: 0
  7344                           ;cell_settings.c: 54: start_addr = (uint8_t)(0x80 + 6 * (field_number - 41));
  7345  000BD2  5170               	movf	program_field@field_number& (0+255),w,b
  7346  000BD4  0FD7               	addlw	215
  7347  000BD6  0D06               	mullw	6
  7348  000BD8  50F3               	movf	prodl,w,c
  7349  000BDA  0F80               	addlw	128
  7350  000BDC  6F6F               	movwf	program_field@start_addr& (0+255),b
  7351                           
  7352                           ; BSR set to: 0
  7353                           ;cell_settings.c: 55: max_size = 6;
  7354  000BDE  0E06               	movlw	6
  7355  000BE0  6F6D               	movwf	program_field@max_size& (0+255),b
  7356  000BE2                     l1729:
  7357                           
  7358                           ; BSR set to: 0
  7359                           ;cell_settings.c: 56: }
  7360                           ;cell_settings.c: 57: if (size <= max_size)
  7361                           
  7362                           ; BSR set to: 0
  7363                           
  7364                           ; BSR set to: 0
  7365                           
  7366                           ; BSR set to: 0
  7367                           
  7368                           ; BSR set to: 0
  7369                           
  7370                           ; BSR set to: 0
  7371                           
  7372                           ; BSR set to: 0
  7373                           
  7374                           ; BSR set to: 0
  7375                           
  7376                           ; BSR set to: 0
  7377                           
  7378                           ; BSR set to: 0
  7379                           
  7380                           ; BSR set to: 0
  7381                           
  7382                           ; BSR set to: 0
  7383                           
  7384                           ; BSR set to: 0
  7385                           
  7386                           ; BSR set to: 0
  7387                           
  7388                           ; BSR set to: 0
  7389                           
  7390                           ; BSR set to: 0
  7391                           
  7392                           ; BSR set to: 0
  7393                           
  7394                           ; BSR set to: 0
  7395                           
  7396                           ; BSR set to: 0
  7397                           
  7398                           ; BSR set to: 0
  7399                           
  7400                           ; BSR set to: 0
  7401                           
  7402                           ; BSR set to: 0
  7403  000BE2  516A               	movf	program_field@size& (0+255),w,b
  7404  000BE4  5D6D               	subwf	program_field@max_size& (0+255),w,b
  7405  000BE6  A0D8               	btfss	status,0,c
  7406  000BE8  D067               	goto	l1730
  7407                           
  7408                           ; BSR set to: 0
  7409                           ;cell_settings.c: 58: {
  7410                           ;cell_settings.c: 59: if (field_number >= 10)
  7411  000BEA  0E09               	movlw	9
  7412  000BEC  6570               	cpfsgt	program_field@field_number& (0+255),b
  7413  000BEE  D01E               	goto	l1731
  7414                           
  7415                           ; BSR set to: 0
  7416                           ;cell_settings.c: 60: {
  7417                           ;cell_settings.c: 61: sms_buf[0] = (uint8_t)(field_number / 0x0A + 0x41);
  7418  000BF0  C070  F060         	movff	program_field@field_number,___awdiv@dividend
  7419  000BF4  6B61               	clrf	(___awdiv@dividend+1)& (0+255),b
  7420  000BF6  0E00               	movlw	0
  7421  000BF8  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  7422  000BFA  0E0A               	movlw	10
  7423  000BFC  6F62               	movwf	___awdiv@divisor& (0+255),b
  7424  000BFE  ECD7  F00E         	call	___awdiv	;wreg free
  7425  000C02  0100               	movlb	0	; () banked
  7426  000C04  5160               	movf	?___awdiv& (0+255),w,b
  7427  000C06  0F41               	addlw	65
  7428  000C08  0102               	movlb	2	; () banked
  7429  000C0A  6FA0               	movwf	_sms_buf& (0+255),b
  7430                           
  7431                           ;cell_settings.c: 62: sms_buf[1] = (uint8_t)(field_number % 0x0A + 0x30);
  7432  000C0C  C070  F060         	movff	program_field@field_number,___awmod@dividend
  7433  000C10  0100               	movlb	0	; () banked
  7434  000C12  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  7435  000C14  0E00               	movlw	0
  7436  000C16  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7437  000C18  0E0A               	movlw	10
  7438  000C1A  6F62               	movwf	___awmod@divisor& (0+255),b
  7439  000C1C  EC54  F00F         	call	___awmod	;wreg free
  7440  000C20  0100               	movlb	0	; () banked
  7441  000C22  5160               	movf	?___awmod& (0+255),w,b
  7442  000C24  0F30               	addlw	48
  7443  000C26  0102               	movlb	2	; () banked
  7444  000C28  6FA1               	movwf	(_sms_buf+1)& (0+255),b
  7445                           
  7446                           ;cell_settings.c: 63: }
  7447  000C2A  D005               	goto	l1732
  7448  000C2C                     l1731:
  7449                           
  7450                           ;cell_settings.c: 64: else
  7451                           ;cell_settings.c: 65: sms_buf[0] = (uint8_t)(field_number + 0x30);
  7452                           
  7453                           ; BSR set to: 2
  7454  000C2C  0100               	movlb	0	; () banked
  7455  000C2E  5170               	movf	program_field@field_number& (0+255),w,b
  7456  000C30  0F30               	addlw	48
  7457  000C32  0102               	movlb	2	; () banked
  7458  000C34  6FA0               	movwf	_sms_buf& (0+255),b
  7459  000C36                     l1732:
  7460                           
  7461                           ; BSR set to: 2
  7462                           ;cell_settings.c: 66: sms_buf[2] = '#';
  7463                           
  7464                           ; BSR set to: 2
  7465  000C36  0E23               	movlw	35
  7466  000C38  6FA2               	movwf	(_sms_buf+2)& (0+255),b
  7467                           
  7468                           ; BSR set to: 2
  7469                           ;cell_settings.c: 67: for (i = 0; i < size; i++)
  7470  000C3A  0E00               	movlw	0
  7471  000C3C  0100               	movlb	0	; () banked
  7472  000C3E  6F6E               	movwf	program_field@i& (0+255),b
  7473  000C40  D027               	goto	l1733
  7474  000C42                     
  7475                           ; BSR set to: 0
  7476                           ;cell_settings.c: 68: {
  7477                           ;cell_settings.c: 69: ee_write(page, start_addr, data_buf[i]);
  7478                           
  7479                           ; BSR set to: 0
  7480  000C42  C06F  F063         	movff	program_field@start_addr,ee_write@addr
  7481  000C46  516E               	movf	program_field@i& (0+255),w,b
  7482  000C48  0D01               	mullw	1
  7483  000C4A  50F3               	movf	prodl,w,c
  7484  000C4C  2568               	addwf	program_field@data_buf& (0+255),w,b
  7485  000C4E  6ED9               	movwf	fsr2l,c
  7486  000C50  50F4               	movf	prodh,w,c
  7487  000C52  2169               	addwfc	(program_field@data_buf+1)& (0+255),w,b
  7488  000C54  6EDA               	movwf	fsr2h,c
  7489  000C56  50DF               	movf	indf2,w,c
  7490  000C58  6F64               	movwf	ee_write@data& (0+255),b
  7491  000C5A  516C               	movf	program_field@page& (0+255),w,b
  7492  000C5C  ECDB  F010         	call	_ee_write
  7493                           
  7494                           ;cell_settings.c: 70: sms_buf[(uint8_t)(i + 3)] = data_buf[i];
  7495  000C60  0100               	movlb	0	; () banked
  7496  000C62  516E               	movf	program_field@i& (0+255),w,b
  7497  000C64  0D01               	mullw	1
  7498  000C66  50F3               	movf	prodl,w,c
  7499  000C68  2568               	addwf	program_field@data_buf& (0+255),w,b
  7500  000C6A  6ED9               	movwf	fsr2l,c
  7501  000C6C  50F4               	movf	prodh,w,c
  7502  000C6E  2169               	addwfc	(program_field@data_buf+1)& (0+255),w,b
  7503  000C70  6EDA               	movwf	fsr2h,c
  7504  000C72  C06E  F06B         	movff	program_field@i,??_program_field
  7505  000C76  0E03               	movlw	3
  7506  000C78  276B               	addwf	??_program_field& (0+255),f,b
  7507  000C7A  516B               	movf	??_program_field& (0+255),w,b
  7508  000C7C  0D01               	mullw	1
  7509  000C7E  0EA0               	movlw	low _sms_buf
  7510  000C80  24F3               	addwf	prodl,w,c
  7511  000C82  6EE1               	movwf	fsr1l,c
  7512  000C84  0E02               	movlw	high _sms_buf
  7513  000C86  20F4               	addwfc	prodh,w,c
  7514  000C88  6EE2               	movwf	fsr1h,c
  7515  000C8A  CFDF FFE7          	movff	indf2,indf1
  7516                           
  7517                           ; BSR set to: 0
  7518  000C8E  2B6E               	incf	program_field@i& (0+255),f,b
  7519  000C90                     l1733:
  7520                           
  7521                           ; BSR set to: 0
  7522                           
  7523                           ; BSR set to: 0
  7524  000C90  516A               	movf	program_field@size& (0+255),w,b
  7525  000C92  5D6E               	subwf	program_field@i& (0+255),w,b
  7526  000C94  A0D8               	btfss	status,0,c
  7527  000C96  D7D5               	goto	l1734
  7528                           
  7529                           ; BSR set to: 0
  7530                           ;cell_settings.c: 71: }
  7531                           ;cell_settings.c: 72: sms_buf[(uint8_t)(i + 3)] = '#';
  7532                           
  7533                           ; BSR set to: 0
  7534  000C98  C06E  F06B         	movff	program_field@i,??_program_field
  7535  000C9C  0E03               	movlw	3
  7536  000C9E  276B               	addwf	??_program_field& (0+255),f,b
  7537  000CA0  516B               	movf	??_program_field& (0+255),w,b
  7538  000CA2  0D01               	mullw	1
  7539  000CA4  0EA0               	movlw	low _sms_buf
  7540  000CA6  24F3               	addwf	prodl,w,c
  7541  000CA8  6ED9               	movwf	fsr2l,c
  7542  000CAA  0E02               	movlw	high _sms_buf
  7543  000CAC  20F4               	addwfc	prodh,w,c
  7544  000CAE  6EDA               	movwf	fsr2h,c
  7545  000CB0  0E23               	movlw	35
  7546  000CB2  6EDF               	movwf	indf2,c
  7547                           
  7548                           ; BSR set to: 0
  7549                           ;cell_settings.c: 73: return 1;
  7550  000CB4  0E01               	movlw	1
  7551                           
  7552                           ; BSR set to: 0
  7553  000CB6  0012               	return	
  7554  000CB8                     l1730:
  7555                           
  7556                           ; BSR set to: 0
  7557                           ;cell_settings.c: 74: }
  7558                           ;cell_settings.c: 75: return 0;
  7559                           
  7560                           ; BSR set to: 0
  7561  000CB8  0E00               	movlw	0
  7562  000CBA  0012               	return	
  7563  000CBC                     __end_of_program_field:
  7564                           	opt stack 0
  7565                           tblptru	equ	0xFF8
  7566                           tblptrh	equ	0xFF7
  7567                           tblptrl	equ	0xFF6
  7568                           tablat	equ	0xFF5
  7569                           prodh	equ	0xFF4
  7570                           prodl	equ	0xFF3
  7571                           intcon	equ	0xFF2
  7572                           postinc0	equ	0xFEE
  7573                           wreg	equ	0xFE8
  7574                           indf1	equ	0xFE7
  7575                           postdec1	equ	0xFE5
  7576                           plusw1	equ	0xFE3
  7577                           fsr1h	equ	0xFE2
  7578                           fsr1l	equ	0xFE1
  7579                           indf2	equ	0xFDF
  7580                           postinc2	equ	0xFDE
  7581                           plusw2	equ	0xFDB
  7582                           fsr2h	equ	0xFDA
  7583                           fsr2l	equ	0xFD9
  7584                           status	equ	0xFD8
  7585                           
  7586 ;; *************** function ___awmod *****************
  7587 ;; Defined at:
  7588 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  7589 ;; Parameters:    Size  Location     Type
  7590 ;;  dividend        2    0[BANK0 ] int 
  7591 ;;  divisor         2    2[BANK0 ] int 
  7592 ;; Auto vars:     Size  Location     Type
  7593 ;;  sign            1    5[BANK0 ] unsigned char 
  7594 ;;  counter         1    4[BANK0 ] unsigned char 
  7595 ;; Return value:  Size  Location     Type
  7596 ;;                  2    0[BANK0 ] int 
  7597 ;; Registers used:
  7598 ;;		wreg, status,2, status,0
  7599 ;; Tracked objects:
  7600 ;;		On entry : 0/0
  7601 ;;		On exit  : 0/0
  7602 ;;		Unchanged: 0/0
  7603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7604 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7605 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7607 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7608 ;;Total ram usage:        6 bytes
  7609 ;; Hardware stack levels used:    1
  7610 ;; Hardware stack levels required when called:    3
  7611 ;; This function calls:
  7612 ;;		Nothing
  7613 ;; This function is called by:
  7614 ;;		_program_field
  7615 ;; This function uses a non-reentrant model
  7616 ;;
  7617                           
  7618                           	psect	text25
  7619  001EA8                     __ptext25:
  7620                           	opt stack 0
  7621  001EA8                     ___awmod:
  7622                           	opt stack 22
  7623                           
  7624                           ; BSR set to: 0
  7625                           ;incstack = 0
  7626  001EA8  0E00               	movlw	0
  7627  001EAA  0100               	movlb	0	; () banked
  7628  001EAC  6F65               	movwf	___awmod@sign& (0+255),b
  7629                           
  7630                           ; BSR set to: 0
  7631  001EAE  AF61               	btfss	(___awmod@dividend+1)& (0+255),7,b
  7632  001EB0  D006               	goto	l1917
  7633                           
  7634                           ; BSR set to: 0
  7635  001EB2  6D60               	negf	___awmod@dividend& (0+255),b
  7636  001EB4  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  7637  001EB6  B0D8               	btfsc	status,0,c
  7638  001EB8  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  7639                           
  7640                           ; BSR set to: 0
  7641  001EBA  0E01               	movlw	1
  7642  001EBC  6F65               	movwf	___awmod@sign& (0+255),b
  7643  001EBE                     l1917:
  7644                           
  7645                           ; BSR set to: 0
  7646                           
  7647                           ; BSR set to: 0
  7648  001EBE  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  7649  001EC0  D004               	goto	l1918
  7650                           
  7651                           ; BSR set to: 0
  7652  001EC2  6D62               	negf	___awmod@divisor& (0+255),b
  7653  001EC4  1F63               	comf	(___awmod@divisor+1)& (0+255),f,b
  7654  001EC6  B0D8               	btfsc	status,0,c
  7655  001EC8  2B63               	incf	(___awmod@divisor+1)& (0+255),f,b
  7656  001ECA                     l1918:
  7657                           
  7658                           ; BSR set to: 0
  7659                           
  7660                           ; BSR set to: 0
  7661  001ECA  5162               	movf	___awmod@divisor& (0+255),w,b
  7662  001ECC  1163               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  7663  001ECE  B4D8               	btfsc	status,2,c
  7664  001ED0  D018               	goto	l1925
  7665                           
  7666                           ; BSR set to: 0
  7667  001ED2  0E01               	movlw	1
  7668  001ED4  6F64               	movwf	___awmod@counter& (0+255),b
  7669  001ED6  D004               	goto	l1920
  7670  001ED8                     
  7671                           ; BSR set to: 0
  7672                           
  7673                           ; BSR set to: 0
  7674  001ED8  90D8               	bcf	status,0,c
  7675  001EDA  3762               	rlcf	___awmod@divisor& (0+255),f,b
  7676  001EDC  3763               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  7677  001EDE  2B64               	incf	___awmod@counter& (0+255),f,b
  7678  001EE0                     l1920:
  7679                           
  7680                           ; BSR set to: 0
  7681                           
  7682                           ; BSR set to: 0
  7683  001EE0  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  7684  001EE2  D7FA               	goto	l1921
  7685  001EE4                     u7970:
  7686                           
  7687                           ; BSR set to: 0
  7688                           
  7689                           ; BSR set to: 0
  7690                           
  7691                           ; BSR set to: 0
  7692  001EE4  5162               	movf	___awmod@divisor& (0+255),w,b
  7693  001EE6  5D60               	subwf	___awmod@dividend& (0+255),w,b
  7694  001EE8  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  7695  001EEA  5961               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  7696  001EEC  A0D8               	btfss	status,0,c
  7697  001EEE  D004               	goto	l1924
  7698                           
  7699                           ; BSR set to: 0
  7700  001EF0  5162               	movf	___awmod@divisor& (0+255),w,b
  7701  001EF2  5F60               	subwf	___awmod@dividend& (0+255),f,b
  7702  001EF4  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  7703  001EF6  5B61               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  7704  001EF8                     l1924:
  7705                           
  7706                           ; BSR set to: 0
  7707                           
  7708                           ; BSR set to: 0
  7709  001EF8  90D8               	bcf	status,0,c
  7710  001EFA  3363               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  7711  001EFC  3362               	rrcf	___awmod@divisor& (0+255),f,b
  7712                           
  7713                           ; BSR set to: 0
  7714  001EFE  2F64               	decfsz	___awmod@counter& (0+255),f,b
  7715  001F00  D7F1               	goto	u7970
  7716  001F02                     l1925:
  7717                           
  7718                           ; BSR set to: 0
  7719                           
  7720                           ; BSR set to: 0
  7721                           
  7722                           ; BSR set to: 0
  7723  001F02  5165               	movf	___awmod@sign& (0+255),w,b
  7724  001F04  B4D8               	btfsc	status,2,c
  7725  001F06  D004               	goto	l1926
  7726                           
  7727                           ; BSR set to: 0
  7728  001F08  6D60               	negf	___awmod@dividend& (0+255),b
  7729  001F0A  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  7730  001F0C  B0D8               	btfsc	status,0,c
  7731  001F0E  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  7732  001F10                     l1926:
  7733                           
  7734                           ; BSR set to: 0
  7735                           
  7736                           ; BSR set to: 0
  7737  001F10  C060  F060         	movff	___awmod@dividend,?___awmod
  7738  001F14  C061  F061         	movff	___awmod@dividend+1,?___awmod+1
  7739  001F18  0012               	return	
  7740  001F1A                     __end_of___awmod:
  7741                           	opt stack 0
  7742                           tblptru	equ	0xFF8
  7743                           tblptrh	equ	0xFF7
  7744                           tblptrl	equ	0xFF6
  7745                           tablat	equ	0xFF5
  7746                           prodh	equ	0xFF4
  7747                           prodl	equ	0xFF3
  7748                           intcon	equ	0xFF2
  7749                           postinc0	equ	0xFEE
  7750                           wreg	equ	0xFE8
  7751                           indf1	equ	0xFE7
  7752                           postdec1	equ	0xFE5
  7753                           plusw1	equ	0xFE3
  7754                           fsr1h	equ	0xFE2
  7755                           fsr1l	equ	0xFE1
  7756                           indf2	equ	0xFDF
  7757                           postinc2	equ	0xFDE
  7758                           plusw2	equ	0xFDB
  7759                           fsr2h	equ	0xFDA
  7760                           fsr2l	equ	0xFD9
  7761                           status	equ	0xFD8
  7762                           
  7763 ;; *************** function ___awdiv *****************
  7764 ;; Defined at:
  7765 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  7766 ;; Parameters:    Size  Location     Type
  7767 ;;  dividend        2    0[BANK0 ] int 
  7768 ;;  divisor         2    2[BANK0 ] int 
  7769 ;; Auto vars:     Size  Location     Type
  7770 ;;  quotient        2    6[BANK0 ] int 
  7771 ;;  sign            1    5[BANK0 ] unsigned char 
  7772 ;;  counter         1    4[BANK0 ] unsigned char 
  7773 ;; Return value:  Size  Location     Type
  7774 ;;                  2    0[BANK0 ] int 
  7775 ;; Registers used:
  7776 ;;		wreg, status,2, status,0
  7777 ;; Tracked objects:
  7778 ;;		On entry : 0/0
  7779 ;;		On exit  : 0/0
  7780 ;;		Unchanged: 0/0
  7781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7782 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7783 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7785 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7786 ;;Total ram usage:        8 bytes
  7787 ;; Hardware stack levels used:    1
  7788 ;; Hardware stack levels required when called:    3
  7789 ;; This function calls:
  7790 ;;		Nothing
  7791 ;; This function is called by:
  7792 ;;		_program_field
  7793 ;; This function uses a non-reentrant model
  7794 ;;
  7795                           
  7796                           	psect	text26
  7797  001DAE                     __ptext26:
  7798                           	opt stack 0
  7799  001DAE                     ___awdiv:
  7800                           	opt stack 22
  7801                           
  7802                           ; BSR set to: 0
  7803                           ;incstack = 0
  7804  001DAE  0E00               	movlw	0
  7805  001DB0  0100               	movlb	0	; () banked
  7806  001DB2  6F65               	movwf	___awdiv@sign& (0+255),b
  7807                           
  7808                           ; BSR set to: 0
  7809  001DB4  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  7810  001DB6  D006               	goto	l1904
  7811                           
  7812                           ; BSR set to: 0
  7813  001DB8  6D62               	negf	___awdiv@divisor& (0+255),b
  7814  001DBA  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
  7815  001DBC  B0D8               	btfsc	status,0,c
  7816  001DBE  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
  7817                           
  7818                           ; BSR set to: 0
  7819  001DC0  0E01               	movlw	1
  7820  001DC2  6F65               	movwf	___awdiv@sign& (0+255),b
  7821  001DC4                     l1904:
  7822                           
  7823                           ; BSR set to: 0
  7824                           
  7825                           ; BSR set to: 0
  7826  001DC4  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  7827  001DC6  D006               	goto	l1905
  7828                           
  7829                           ; BSR set to: 0
  7830  001DC8  6D60               	negf	___awdiv@dividend& (0+255),b
  7831  001DCA  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
  7832  001DCC  B0D8               	btfsc	status,0,c
  7833  001DCE  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
  7834                           
  7835                           ; BSR set to: 0
  7836  001DD0  0E01               	movlw	1
  7837  001DD2  1B65               	xorwf	___awdiv@sign& (0+255),f,b
  7838  001DD4                     l1905:
  7839                           
  7840                           ; BSR set to: 0
  7841                           
  7842                           ; BSR set to: 0
  7843  001DD4  0E00               	movlw	0
  7844  001DD6  6F67               	movwf	(___awdiv@quotient+1)& (0+255),b
  7845  001DD8  0E00               	movlw	0
  7846  001DDA  6F66               	movwf	___awdiv@quotient& (0+255),b
  7847                           
  7848                           ; BSR set to: 0
  7849  001DDC  5162               	movf	___awdiv@divisor& (0+255),w,b
  7850  001DDE  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  7851  001DE0  B4D8               	btfsc	status,2,c
  7852  001DE2  D01C               	goto	l1912
  7853                           
  7854                           ; BSR set to: 0
  7855  001DE4  0E01               	movlw	1
  7856  001DE6  6F64               	movwf	___awdiv@counter& (0+255),b
  7857  001DE8  D004               	goto	l1907
  7858  001DEA                     
  7859                           ; BSR set to: 0
  7860                           
  7861                           ; BSR set to: 0
  7862  001DEA  90D8               	bcf	status,0,c
  7863  001DEC  3762               	rlcf	___awdiv@divisor& (0+255),f,b
  7864  001DEE  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  7865  001DF0  2B64               	incf	___awdiv@counter& (0+255),f,b
  7866  001DF2                     l1907:
  7867                           
  7868                           ; BSR set to: 0
  7869                           
  7870                           ; BSR set to: 0
  7871  001DF2  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  7872  001DF4  D7FA               	goto	l1908
  7873  001DF6                     u7910:
  7874                           
  7875                           ; BSR set to: 0
  7876                           
  7877                           ; BSR set to: 0
  7878                           
  7879                           ; BSR set to: 0
  7880  001DF6  90D8               	bcf	status,0,c
  7881  001DF8  3766               	rlcf	___awdiv@quotient& (0+255),f,b
  7882  001DFA  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  7883                           
  7884                           ; BSR set to: 0
  7885  001DFC  5162               	movf	___awdiv@divisor& (0+255),w,b
  7886  001DFE  5D60               	subwf	___awdiv@dividend& (0+255),w,b
  7887  001E00  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  7888  001E02  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  7889  001E04  A0D8               	btfss	status,0,c
  7890  001E06  D005               	goto	l1911
  7891                           
  7892                           ; BSR set to: 0
  7893  001E08  5162               	movf	___awdiv@divisor& (0+255),w,b
  7894  001E0A  5F60               	subwf	___awdiv@dividend& (0+255),f,b
  7895  001E0C  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  7896  001E0E  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  7897                           
  7898                           ; BSR set to: 0
  7899  001E10  8166               	bsf	___awdiv@quotient& (0+255),0,b
  7900  001E12                     l1911:
  7901                           
  7902                           ; BSR set to: 0
  7903                           
  7904                           ; BSR set to: 0
  7905  001E12  90D8               	bcf	status,0,c
  7906  001E14  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  7907  001E16  3362               	rrcf	___awdiv@divisor& (0+255),f,b
  7908                           
  7909                           ; BSR set to: 0
  7910  001E18  2F64               	decfsz	___awdiv@counter& (0+255),f,b
  7911  001E1A  D7ED               	goto	u7910
  7912  001E1C                     l1912:
  7913                           
  7914                           ; BSR set to: 0
  7915                           
  7916                           ; BSR set to: 0
  7917                           
  7918                           ; BSR set to: 0
  7919  001E1C  5165               	movf	___awdiv@sign& (0+255),w,b
  7920  001E1E  B4D8               	btfsc	status,2,c
  7921  001E20  D004               	goto	l1913
  7922                           
  7923                           ; BSR set to: 0
  7924  001E22  6D66               	negf	___awdiv@quotient& (0+255),b
  7925  001E24  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
  7926  001E26  B0D8               	btfsc	status,0,c
  7927  001E28  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
  7928  001E2A                     l1913:
  7929                           
  7930                           ; BSR set to: 0
  7931                           
  7932                           ; BSR set to: 0
  7933  001E2A  C066  F060         	movff	___awdiv@quotient,?___awdiv
  7934  001E2E  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
  7935  001E32  0012               	return	
  7936  001E34                     __end_of___awdiv:
  7937                           	opt stack 0
  7938                           tblptru	equ	0xFF8
  7939                           tblptrh	equ	0xFF7
  7940                           tblptrl	equ	0xFF6
  7941                           tablat	equ	0xFF5
  7942                           prodh	equ	0xFF4
  7943                           prodl	equ	0xFF3
  7944                           intcon	equ	0xFF2
  7945                           postinc0	equ	0xFEE
  7946                           wreg	equ	0xFE8
  7947                           indf1	equ	0xFE7
  7948                           postdec1	equ	0xFE5
  7949                           plusw1	equ	0xFE3
  7950                           fsr1h	equ	0xFE2
  7951                           fsr1l	equ	0xFE1
  7952                           indf2	equ	0xFDF
  7953                           postinc2	equ	0xFDE
  7954                           plusw2	equ	0xFDB
  7955                           fsr2h	equ	0xFDA
  7956                           fsr2l	equ	0xFD9
  7957                           status	equ	0xFD8
  7958                           
  7959 ;; *************** function _parse_cmgl *****************
  7960 ;; Defined at:
  7961 ;;		line 221 in file "sms.c"
  7962 ;; Parameters:    Size  Location     Type
  7963 ;;		None
  7964 ;; Auto vars:     Size  Location     Type
  7965 ;;  i               1    7[BANK0 ] unsigned char 
  7966 ;;  rec_msg         5    2[BANK0 ] unsigned char [5]
  7967 ;; Return value:  Size  Location     Type
  7968 ;;                  1    wreg      unsigned char 
  7969 ;; Registers used:
  7970 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7971 ;; Tracked objects:
  7972 ;;		On entry : 0/0
  7973 ;;		On exit  : 0/0
  7974 ;;		Unchanged: 0/0
  7975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7977 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7978 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7979 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7980 ;;Total ram usage:        8 bytes
  7981 ;; Hardware stack levels used:    1
  7982 ;; Hardware stack levels required when called:    3
  7983 ;; This function calls:
  7984 ;;		Nothing
  7985 ;; This function is called by:
  7986 ;;		_read_sms
  7987 ;; This function uses a non-reentrant model
  7988 ;;
  7989                           
  7990                           	psect	text27
  7991  001A88                     __ptext27:
  7992                           	opt stack 0
  7993  001A88                     _parse_cmgl:
  7994                           	opt stack 24
  7995                           
  7996                           ;sms.c: 223: uint8_t rec_msg[] = "REC ";
  7997                           
  7998                           ; BSR set to: 0
  7999                           ;incstack = 0
  8000  001A88  EE21  F0B9         	lfsr	2,parse_cmgl@F6856
  8001  001A8C  EE10  F062         	lfsr	1,parse_cmgl@rec_msg
  8002  001A90  0E04               	movlw	4
  8003  001A92                     u8981:
  8004  001A92  CFDB FFE3          	movff	plusw2,plusw1
  8005  001A96  06E8               	decf	wreg,f,c
  8006  001A98  E2FC               	bc	u8981
  8007                           
  8008                           ;sms.c: 224: for (uint8_t i = 0; i < sizeof(mdRxBuf); i++)
  8009  001A9A  0E00               	movlw	0
  8010  001A9C  0100               	movlb	0	; () banked
  8011  001A9E  6F67               	movwf	parse_cmgl@i& (0+255),b
  8012                           
  8013                           ; BSR set to: 0
  8014  001AA0  0E9F               	movlw	159
  8015  001AA2  6567               	cpfsgt	parse_cmgl@i& (0+255),b
  8016  001AA4  D001               	goto	l826
  8017  001AA6  D04E               	goto	u9040
  8018  001AA8                     l826:
  8019                           
  8020                           ; BSR set to: 0
  8021                           ;sms.c: 225: {
  8022                           ;sms.c: 226: if (mdRxBuf[i] == rec_msg[0] && mdRxBuf[(uint8_t)(i + 1)] == rec_msg[1] && 
      +                          mdRxBuf[(uint8_t)(i + 2)] == rec_msg[2] && mdRxBuf[(uint8_t)(i + 3)] == rec_msg[3])
  8023                           
  8024                           ; BSR set to: 0
  8025  001AA8  5167               	movf	parse_cmgl@i& (0+255),w,b
  8026  001AAA  0D01               	mullw	1
  8027  001AAC  0E00               	movlw	low _mdRxBuf
  8028  001AAE  24F3               	addwf	prodl,w,c
  8029  001AB0  6ED9               	movwf	fsr2l,c
  8030  001AB2  0E02               	movlw	high _mdRxBuf
  8031  001AB4  20F4               	addwfc	prodh,w,c
  8032  001AB6  6EDA               	movwf	fsr2h,c
  8033  001AB8  5162               	movf	parse_cmgl@rec_msg& (0+255),w,b
  8034  001ABA  18DE               	xorwf	postinc2,w,c
  8035  001ABC  A4D8               	btfss	status,2,c
  8036  001ABE  D040               	goto	l828
  8037                           
  8038                           ; BSR set to: 0
  8039  001AC0  C067  F060         	movff	parse_cmgl@i,??_parse_cmgl
  8040  001AC4  0E01               	movlw	1
  8041  001AC6  2760               	addwf	??_parse_cmgl& (0+255),f,b
  8042  001AC8  5160               	movf	??_parse_cmgl& (0+255),w,b
  8043  001ACA  0D01               	mullw	1
  8044  001ACC  0E00               	movlw	low _mdRxBuf
  8045  001ACE  24F3               	addwf	prodl,w,c
  8046  001AD0  6ED9               	movwf	fsr2l,c
  8047  001AD2  0E02               	movlw	high _mdRxBuf
  8048  001AD4  20F4               	addwfc	prodh,w,c
  8049  001AD6  6EDA               	movwf	fsr2h,c
  8050  001AD8  5163               	movf	(parse_cmgl@rec_msg+1)& (0+255),w,b
  8051  001ADA  18DE               	xorwf	postinc2,w,c
  8052  001ADC  A4D8               	btfss	status,2,c
  8053  001ADE  D030               	goto	l828
  8054                           
  8055                           ; BSR set to: 0
  8056  001AE0  C067  F060         	movff	parse_cmgl@i,??_parse_cmgl
  8057  001AE4  0E02               	movlw	2
  8058  001AE6  2760               	addwf	??_parse_cmgl& (0+255),f,b
  8059  001AE8  5160               	movf	??_parse_cmgl& (0+255),w,b
  8060  001AEA  0D01               	mullw	1
  8061  001AEC  0E00               	movlw	low _mdRxBuf
  8062  001AEE  24F3               	addwf	prodl,w,c
  8063  001AF0  6ED9               	movwf	fsr2l,c
  8064  001AF2  0E02               	movlw	high _mdRxBuf
  8065  001AF4  20F4               	addwfc	prodh,w,c
  8066  001AF6  6EDA               	movwf	fsr2h,c
  8067  001AF8  5164               	movf	(parse_cmgl@rec_msg+2)& (0+255),w,b
  8068  001AFA  18DE               	xorwf	postinc2,w,c
  8069  001AFC  A4D8               	btfss	status,2,c
  8070  001AFE  D020               	goto	l828
  8071                           
  8072                           ; BSR set to: 0
  8073  001B00  C067  F060         	movff	parse_cmgl@i,??_parse_cmgl
  8074  001B04  0E03               	movlw	3
  8075  001B06  2760               	addwf	??_parse_cmgl& (0+255),f,b
  8076  001B08  5160               	movf	??_parse_cmgl& (0+255),w,b
  8077  001B0A  0D01               	mullw	1
  8078  001B0C  0E00               	movlw	low _mdRxBuf
  8079  001B0E  24F3               	addwf	prodl,w,c
  8080  001B10  6ED9               	movwf	fsr2l,c
  8081  001B12  0E02               	movlw	high _mdRxBuf
  8082  001B14  20F4               	addwfc	prodh,w,c
  8083  001B16  6EDA               	movwf	fsr2h,c
  8084  001B18  5165               	movf	(parse_cmgl@rec_msg+3)& (0+255),w,b
  8085  001B1A  18DE               	xorwf	postinc2,w,c
  8086  001B1C  A4D8               	btfss	status,2,c
  8087  001B1E  D010               	goto	l828
  8088                           
  8089                           ; BSR set to: 0
  8090                           ;sms.c: 228: {
  8091                           ;sms.c: 229: smsMsgIndex = mdRxBuf[(uint8_t)(i - 3)];
  8092  001B20  C067  F060         	movff	parse_cmgl@i,??_parse_cmgl
  8093  001B24  0EFD               	movlw	253
  8094  001B26  2760               	addwf	??_parse_cmgl& (0+255),f,b
  8095  001B28  5160               	movf	??_parse_cmgl& (0+255),w,b
  8096  001B2A  0D01               	mullw	1
  8097  001B2C  0E00               	movlw	low _mdRxBuf
  8098  001B2E  24F3               	addwf	prodl,w,c
  8099  001B30  6ED9               	movwf	fsr2l,c
  8100  001B32  0E02               	movlw	high _mdRxBuf
  8101  001B34  20F4               	addwfc	prodh,w,c
  8102  001B36  6EDA               	movwf	fsr2h,c
  8103  001B38  50DF               	movf	indf2,w,c
  8104  001B3A  6FC3               	movwf	_smsMsgIndex& (0+255),b
  8105                           
  8106                           ; BSR set to: 0
  8107                           ;sms.c: 230: return 1;
  8108  001B3C  0E01               	movlw	1
  8109                           
  8110                           ; BSR set to: 0
  8111  001B3E  0012               	return	
  8112  001B40                     l828:
  8113                           
  8114                           ; BSR set to: 0
  8115                           ;sms.c: 232: else
  8116                           ;sms.c: 233: return 4;
  8117                           
  8118                           ; BSR set to: 0
  8119  001B40  0E04               	movlw	4
  8120                           
  8121                           ; BSR set to: 0
  8122  001B42  0012               	return	
  8123  001B44                     u9040:
  8124                           
  8125                           ; BSR set to: 0
  8126                           ;sms.c: 234: }
  8127                           ;sms.c: 235: return 4;
  8128                           
  8129                           ; BSR set to: 0
  8130  001B44  0E04               	movlw	4
  8131  001B46  0012               	return	
  8132  001B48                     __end_of_parse_cmgl:
  8133                           	opt stack 0
  8134                           tblptru	equ	0xFF8
  8135                           tblptrh	equ	0xFF7
  8136                           tblptrl	equ	0xFF6
  8137                           tablat	equ	0xFF5
  8138                           prodh	equ	0xFF4
  8139                           prodl	equ	0xFF3
  8140                           intcon	equ	0xFF2
  8141                           postinc0	equ	0xFEE
  8142                           wreg	equ	0xFE8
  8143                           indf1	equ	0xFE7
  8144                           postdec1	equ	0xFE5
  8145                           plusw1	equ	0xFE3
  8146                           fsr1h	equ	0xFE2
  8147                           fsr1l	equ	0xFE1
  8148                           indf2	equ	0xFDF
  8149                           postinc2	equ	0xFDE
  8150                           plusw2	equ	0xFDB
  8151                           fsr2h	equ	0xFDA
  8152                           fsr2l	equ	0xFD9
  8153                           status	equ	0xFD8
  8154                           
  8155 ;; *************** function _md_uart_write_str_ok *****************
  8156 ;; Defined at:
  8157 ;;		line 102 in file "uart.c"
  8158 ;; Parameters:    Size  Location     Type
  8159 ;;  data            2    1[BANK0 ] PTR unsigned char 
  8160 ;;		 -> startup_ok@csq(9), startup_ok@cereg(12), startup_ok@creg(11), startup_ok@cpin(11), 
  8161 ;;		 -> startup_ok@queryVersion(10), startup_ok@ledpattern(12), startup_ok@ledCfg(16), startup_ok@baud(16), 
  8162 ;;		 -> startup_ok@cmee(12), startup_ok@ate(7), startup_ok@at(5), sms_buf(40), 
  8163 ;;		 -> send_sms_ok@msgIndex(3), send_sms_ok@cmgs(9), ph_num(9), RAM(3895), 
  8164 ;;		 -> read_sms@cmgd(9), read_sms@msgIndex(3), read_sms@cmgr(9), read_sms@cmgl(16), 
  8165 ;;		 -> start_sms_ok@cnmi(14), start_sms_ok@cpms(25), start_sms_ok@cmgf(12), 
  8166 ;;  len1            1    3[BANK0 ] unsigned char 
  8167 ;;  wantOk          1    4[BANK0 ] unsigned char 
  8168 ;;  waitToSendMo    1    5[BANK0 ] unsigned char 
  8169 ;; Auto vars:     Size  Location     Type
  8170 ;;  index           1    7[BANK0 ] unsigned char 
  8171 ;;  pos             1    6[BANK0 ] unsigned char 
  8172 ;; Return value:  Size  Location     Type
  8173 ;;                  1    wreg      unsigned char 
  8174 ;; Registers used:
  8175 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8176 ;; Tracked objects:
  8177 ;;		On entry : 0/0
  8178 ;;		On exit  : 0/0
  8179 ;;		Unchanged: 0/0
  8180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8181 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8182 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8184 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8185 ;;Total ram usage:        7 bytes
  8186 ;; Hardware stack levels used:    1
  8187 ;; Hardware stack levels required when called:    4
  8188 ;; This function calls:
  8189 ;;		_disable_tmr5
  8190 ;;		_enable_md_rxint
  8191 ;;		_md_uart_send
  8192 ;;		_reload_tmr5_pt25s
  8193 ;; This function is called by:
  8194 ;;		_start_sms_ok
  8195 ;;		_read_sms
  8196 ;;		_send_sms_ok
  8197 ;;		_startup_ok
  8198 ;; This function uses a non-reentrant model
  8199 ;;
  8200                           
  8201                           	psect	text28
  8202  0012DA                     __ptext28:
  8203                           	opt stack 0
  8204  0012DA                     _md_uart_write_str_ok:
  8205                           	opt stack 23
  8206                           
  8207                           ;uart.c: 105: if (!waiting_uart && !waiting_carrot)
  8208                           
  8209                           ; BSR set to: 0
  8210                           ;incstack = 0
  8211  0012DA  5006               	movf	_waiting_uart,w,c
  8212  0012DC  A4D8               	btfss	status,2,c
  8213  0012DE  D052               	goto	u7400
  8214  0012E0  5005               	movf	_waiting_carrot,w,c
  8215  0012E2  A4D8               	btfss	status,2,c
  8216  0012E4  D04F               	goto	u7400
  8217                           
  8218                           ;uart.c: 106: {
  8219                           ;uart.c: 107: uint8_t index = 0, pos = 0;
  8220  0012E6  0E00               	movlw	0
  8221  0012E8  0100               	movlb	0	; () banked
  8222  0012EA  6F67               	movwf	md_uart_write_str_ok@index& (0+255),b
  8223  0012EC  0E00               	movlw	0
  8224  0012EE  6F66               	movwf	md_uart_write_str_ok@pos& (0+255),b
  8225                           
  8226                           ; BSR set to: 0
  8227                           ;uart.c: 108: CREN1 = 0;
  8228  0012F0  98AB               	bcf	4011,4,c	;volatile
  8229                           
  8230                           ;uart.c: 109: tmr5_cnt = 0;
  8231  0012F2  0E00               	movlw	0
  8232  0012F4  6E1B               	movwf	_tmr5_cnt,c
  8233                           
  8234                           ;uart.c: 110: receivedOK = 0;
  8235  0012F6  0E00               	movlw	0
  8236  0012F8  6E0A               	movwf	_receivedOK,c
  8237                           
  8238                           ;uart.c: 111: receivedERR = 0;
  8239  0012FA  0E00               	movlw	0
  8240  0012FC  6E09               	movwf	_receivedERR,c
  8241                           
  8242                           ;uart.c: 112: timedOut = 0;
  8243  0012FE  0E00               	movlw	0
  8244  001300  6E07               	movwf	_timedOut,c
  8245                           
  8246                           ;uart.c: 113: while (numUartRetries-- > 0 && !receivedOK)
  8247  001302  D039               	goto	l1504
  8248  001304                     
  8249                           ;uart.c: 114: {
  8250                           ;uart.c: 115: timedOut = 0;
  8251                           
  8252                           ; BSR set to: 0
  8253  001304  0E00               	movlw	0
  8254  001306  6E07               	movwf	_timedOut,c
  8255                           
  8256                           ;uart.c: 116: for (index = 0; index < len1; index++)
  8257  001308  0E00               	movlw	0
  8258  00130A  0100               	movlb	0	; () banked
  8259  00130C  6F67               	movwf	md_uart_write_str_ok@index& (0+255),b
  8260  00130E  D01B               	goto	l1499
  8261  001310                     
  8262                           ; BSR set to: 0
  8263                           ;uart.c: 117: {
  8264                           ;uart.c: 118: referenceBuf[index] = *data;
  8265                           
  8266                           ; BSR set to: 0
  8267  001310  C061  FFD9         	movff	md_uart_write_str_ok@data,fsr2l
  8268  001314  C062  FFDA         	movff	md_uart_write_str_ok@data+1,fsr2h
  8269  001318  5167               	movf	md_uart_write_str_ok@index& (0+255),w,b
  8270  00131A  0D01               	mullw	1
  8271  00131C  0E40               	movlw	low _referenceBuf
  8272  00131E  24F3               	addwf	prodl,w,c
  8273  001320  6EE1               	movwf	fsr1l,c
  8274  001322  0E03               	movlw	high _referenceBuf
  8275  001324  20F4               	addwfc	prodh,w,c
  8276  001326  6EE2               	movwf	fsr1h,c
  8277  001328  CFDF FFE7          	movff	indf2,indf1
  8278                           
  8279                           ; BSR set to: 0
  8280                           ;uart.c: 119: currentChar = *data;
  8281  00132C  C061  FFD9         	movff	md_uart_write_str_ok@data,fsr2l
  8282  001330  C062  FFDA         	movff	md_uart_write_str_ok@data+1,fsr2h
  8283  001334  50DF               	movf	indf2,w,c
  8284  001336  6E16               	movwf	_currentChar,c
  8285                           
  8286                           ; BSR set to: 0
  8287                           ;uart.c: 120: md_uart_send(currentChar);
  8288  001338  5016               	movf	_currentChar,w,c
  8289  00133A  ECF0  F011         	call	_md_uart_send
  8290                           
  8291                           ;uart.c: 121: data++;
  8292  00133E  0100               	movlb	0	; () banked
  8293  001340  4B61               	infsnz	md_uart_write_str_ok@data& (0+255),f,b
  8294  001342  2B62               	incf	(md_uart_write_str_ok@data+1)& (0+255),f,b
  8295                           
  8296                           ; BSR set to: 0
  8297  001344  2B67               	incf	md_uart_write_str_ok@index& (0+255),f,b
  8298  001346                     l1499:
  8299                           
  8300                           ; BSR set to: 0
  8301                           
  8302                           ; BSR set to: 0
  8303  001346  5163               	movf	md_uart_write_str_ok@len1& (0+255),w,b
  8304  001348  5D67               	subwf	md_uart_write_str_ok@index& (0+255),w,b
  8305  00134A  A0D8               	btfss	status,0,c
  8306  00134C  D7E1               	goto	l1500
  8307                           
  8308                           ; BSR set to: 0
  8309                           ;uart.c: 122: }
  8310                           ;uart.c: 123: if (!waitToSendMoreData && wantOk)
  8311                           
  8312                           ; BSR set to: 0
  8313  00134E  5165               	movf	md_uart_write_str_ok@waitToSendMoreData& (0+255),w,b
  8314  001350  A4D8               	btfss	status,2,c
  8315  001352  D00B               	goto	l1502
  8316                           
  8317                           ; BSR set to: 0
  8318  001354  5164               	movf	md_uart_write_str_ok@wantOk& (0+255),w,b
  8319  001356  B4D8               	btfsc	status,2,c
  8320  001358  D008               	goto	l1502
  8321                           
  8322                           ; BSR set to: 0
  8323                           ;uart.c: 124: {
  8324                           ;uart.c: 125: CREN1 = 1;
  8325  00135A  88AB               	bsf	4011,4,c	;volatile
  8326                           
  8327                           ; BSR set to: 0
  8328                           ;uart.c: 126: enable_md_rxint();
  8329  00135C  EC05  F012         	call	_enable_md_rxint	;wreg free
  8330                           
  8331                           ;uart.c: 127: reload_tmr5_pt25s();
  8332  001360  ECB0  F011         	call	_reload_tmr5_pt25s	;wreg free
  8333                           
  8334                           ;uart.c: 128: waiting_uart = 1;
  8335  001364  0E01               	movlw	1
  8336  001366  6E06               	movwf	_waiting_uart,c
  8337                           
  8338                           ;uart.c: 129: }
  8339  001368  D006               	goto	l1504
  8340  00136A                     l1502:
  8341                           
  8342                           ;uart.c: 130: else if (waitToSendMoreData)
  8343  00136A  0100               	movlb	0	; () banked
  8344  00136C  5165               	movf	md_uart_write_str_ok@waitToSendMoreData& (0+255),w,b
  8345  00136E  B4D8               	btfsc	status,2,c
  8346  001370  D002               	goto	l1504
  8347                           
  8348                           ; BSR set to: 0
  8349                           ;uart.c: 131: waiting_carrot = 1;
  8350  001372  0E01               	movlw	1
  8351  001374  6E05               	movwf	_waiting_carrot,c
  8352  001376                     l1504:
  8353                           
  8354                           ; BSR set to: 0
  8355                           
  8356                           ; BSR set to: 0
  8357                           
  8358                           ; BSR set to: 0
  8359  001376  0644               	decf	_numUartRetries,f,c
  8360  001378  2844               	incf	_numUartRetries,w,c
  8361  00137A  B4D8               	btfsc	status,2,c
  8362  00137C  D003               	goto	u7400
  8363  00137E  500A               	movf	_receivedOK,w,c
  8364  001380  B4D8               	btfsc	status,2,c
  8365  001382  D7C0               	goto	l1498
  8366  001384                     u7400:
  8367                           
  8368                           ;uart.c: 132: }
  8369                           ;uart.c: 133: }
  8370                           ;uart.c: 135: if (waitToSendMoreData && waiting_carrot)
  8371  001384  0100               	movlb	0	; () banked
  8372  001386  5165               	movf	md_uart_write_str_ok@waitToSendMoreData& (0+255),w,b
  8373  001388  B4D8               	btfsc	status,2,c
  8374  00138A  D014               	goto	l1514
  8375                           
  8376                           ; BSR set to: 0
  8377  00138C  5005               	movf	_waiting_carrot,w,c
  8378  00138E  B4D8               	btfsc	status,2,c
  8379  001390  D011               	goto	l1514
  8380                           
  8381                           ; BSR set to: 0
  8382                           ;uart.c: 136: {
  8383                           ;uart.c: 137: CREN1 = 1;
  8384  001392  88AB               	bsf	4011,4,c	;volatile
  8385  001394                     
  8386                           ; BSR set to: 0
  8387  001394  AA9E               	btfss	3998,5,c	;volatile
  8388  001396  D7FE               	goto	l1510
  8389                           
  8390                           ;uart.c: 139: currentChar = RC1REG;
  8391  001398  CFAE F016          	movff	4014,_currentChar	;volatile
  8392                           
  8393                           ;uart.c: 140: if (currentChar == '<')
  8394  00139C  0E3C               	movlw	60
  8395  00139E  1816               	xorwf	_currentChar,w,c
  8396  0013A0  A4D8               	btfss	status,2,c
  8397  0013A2  D004               	goto	l1512
  8398                           
  8399                           ;uart.c: 141: {
  8400                           ;uart.c: 142: waiting_carrot = 0;
  8401  0013A4  0E00               	movlw	0
  8402  0013A6  6E05               	movwf	_waiting_carrot,c
  8403                           
  8404                           ;uart.c: 143: return 1;
  8405  0013A8  0E01               	movlw	1
  8406  0013AA  0012               	return	
  8407  0013AC                     l1512:
  8408                           
  8409                           ;uart.c: 145: else
  8410                           ;uart.c: 146: {
  8411                           ;uart.c: 147: waiting_carrot = 0;
  8412  0013AC  0E00               	movlw	0
  8413  0013AE  6E05               	movwf	_waiting_carrot,c
  8414                           
  8415                           ;uart.c: 148: return 4;
  8416  0013B0  0E04               	movlw	4
  8417  0013B2  0012               	return	
  8418  0013B4                     l1514:
  8419                           
  8420                           ;uart.c: 149: }
  8421                           ;uart.c: 150: }
  8422                           ;uart.c: 151: if (wantOk && waiting_uart)
  8423  0013B4  0100               	movlb	0	; () banked
  8424  0013B6  5164               	movf	md_uart_write_str_ok@wantOk& (0+255),w,b
  8425  0013B8  B4D8               	btfsc	status,2,c
  8426  0013BA  D023               	goto	l1515
  8427                           
  8428                           ; BSR set to: 0
  8429  0013BC  5006               	movf	_waiting_uart,w,c
  8430  0013BE  B4D8               	btfsc	status,2,c
  8431  0013C0  D020               	goto	l1515
  8432                           
  8433                           ; BSR set to: 0
  8434                           ;uart.c: 152: {
  8435                           ;uart.c: 153: if (receivedOK)
  8436  0013C2  500A               	movf	_receivedOK,w,c
  8437  0013C4  B4D8               	btfsc	status,2,c
  8438  0013C6  D007               	goto	l1516
  8439                           
  8440                           ; BSR set to: 0
  8441                           ;uart.c: 154: {
  8442                           ;uart.c: 155: disable_tmr5();
  8443  0013C8  EC0B  F012         	call	_disable_tmr5	;wreg free
  8444                           
  8445                           ;uart.c: 156: CREN1 = 0;
  8446  0013CC  98AB               	bcf	4011,4,c	;volatile
  8447                           
  8448                           ;uart.c: 157: waiting_uart = 0;
  8449  0013CE  0E00               	movlw	0
  8450  0013D0  6E06               	movwf	_waiting_uart,c
  8451                           
  8452                           ;uart.c: 158: return 1;
  8453  0013D2  0E01               	movlw	1
  8454  0013D4  0012               	return	
  8455  0013D6                     l1516:
  8456                           
  8457                           ;uart.c: 160: else if (receivedERR)
  8458  0013D6  5009               	movf	_receivedERR,w,c
  8459  0013D8  B4D8               	btfsc	status,2,c
  8460  0013DA  D007               	goto	l1518
  8461                           
  8462                           ;uart.c: 161: {
  8463                           ;uart.c: 162: disable_tmr5();
  8464  0013DC  EC0B  F012         	call	_disable_tmr5	;wreg free
  8465                           
  8466                           ;uart.c: 163: CREN1 = 0;
  8467  0013E0  98AB               	bcf	4011,4,c	;volatile
  8468                           
  8469                           ;uart.c: 164: waiting_uart = 0;
  8470  0013E2  0E00               	movlw	0
  8471  0013E4  6E06               	movwf	_waiting_uart,c
  8472                           
  8473                           ;uart.c: 165: return 4;
  8474  0013E6  0E04               	movlw	4
  8475  0013E8  0012               	return	
  8476  0013EA                     l1518:
  8477                           
  8478                           ;uart.c: 167: else if (timedOut)
  8479  0013EA  5007               	movf	_timedOut,w,c
  8480  0013EC  B4D8               	btfsc	status,2,c
  8481  0013EE  D007               	goto	l1520
  8482                           
  8483                           ;uart.c: 168: {
  8484                           ;uart.c: 169: disable_tmr5();
  8485  0013F0  EC0B  F012         	call	_disable_tmr5	;wreg free
  8486                           
  8487                           ;uart.c: 170: CREN1 = 0;
  8488  0013F4  98AB               	bcf	4011,4,c	;volatile
  8489                           
  8490                           ;uart.c: 171: waiting_uart = 0;
  8491  0013F6  0E00               	movlw	0
  8492  0013F8  6E06               	movwf	_waiting_uart,c
  8493                           
  8494                           ;uart.c: 172: return 5;
  8495  0013FA  0E05               	movlw	5
  8496  0013FC  0012               	return	
  8497  0013FE                     l1520:
  8498                           
  8499                           ;uart.c: 174: else
  8500                           ;uart.c: 175: return 3;
  8501  0013FE  0E03               	movlw	3
  8502  001400  0012               	return	
  8503  001402                     l1515:
  8504                           
  8505                           ;uart.c: 177: else if (!wantOk)
  8506  001402  0100               	movlb	0	; () banked
  8507  001404  5164               	movf	md_uart_write_str_ok@wantOk& (0+255),w,b
  8508  001406  A4D8               	btfss	status,2,c
  8509  001408  D004               	goto	l1523
  8510                           
  8511                           ; BSR set to: 0
  8512                           ;uart.c: 178: {
  8513                           ;uart.c: 179: receivedOK = 1;
  8514  00140A  0E01               	movlw	1
  8515  00140C  6E0A               	movwf	_receivedOK,c
  8516                           
  8517                           ; BSR set to: 0
  8518                           ;uart.c: 180: return 1;
  8519  00140E  0E01               	movlw	1
  8520                           
  8521                           ; BSR set to: 0
  8522  001410  0012               	return	
  8523  001412                     l1523:
  8524                           
  8525                           ;uart.c: 181: }
  8526                           ;uart.c: 194: return 4;
  8527                           
  8528                           ; BSR set to: 0
  8529                           
  8530                           ; BSR set to: 0
  8531  001412  0E04               	movlw	4
  8532  001414  0012               	return	
  8533  001416                     __end_of_md_uart_write_str_ok:
  8534                           	opt stack 0
  8535                           tblptru	equ	0xFF8
  8536                           tblptrh	equ	0xFF7
  8537                           tblptrl	equ	0xFF6
  8538                           tablat	equ	0xFF5
  8539                           prodh	equ	0xFF4
  8540                           prodl	equ	0xFF3
  8541                           intcon	equ	0xFF2
  8542                           postinc0	equ	0xFEE
  8543                           wreg	equ	0xFE8
  8544                           indf1	equ	0xFE7
  8545                           postdec1	equ	0xFE5
  8546                           plusw1	equ	0xFE3
  8547                           fsr1h	equ	0xFE2
  8548                           fsr1l	equ	0xFE1
  8549                           indf2	equ	0xFDF
  8550                           postinc2	equ	0xFDE
  8551                           plusw2	equ	0xFDB
  8552                           fsr2h	equ	0xFDA
  8553                           fsr2l	equ	0xFD9
  8554                           status	equ	0xFD8
  8555                           
  8556 ;; *************** function _reload_tmr5_pt25s *****************
  8557 ;; Defined at:
  8558 ;;		line 260 in file "io.c"
  8559 ;; Parameters:    Size  Location     Type
  8560 ;;		None
  8561 ;; Auto vars:     Size  Location     Type
  8562 ;;		None
  8563 ;; Return value:  Size  Location     Type
  8564 ;;                  1    wreg      void 
  8565 ;; Registers used:
  8566 ;;		wreg, status,2
  8567 ;; Tracked objects:
  8568 ;;		On entry : 0/0
  8569 ;;		On exit  : 0/0
  8570 ;;		Unchanged: 0/0
  8571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8575 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8576 ;;Total ram usage:        0 bytes
  8577 ;; Hardware stack levels used:    1
  8578 ;; Hardware stack levels required when called:    3
  8579 ;; This function calls:
  8580 ;;		Nothing
  8581 ;; This function is called by:
  8582 ;;		_start_md_boot_timer
  8583 ;;		_md_uart_write_str_ok
  8584 ;; This function uses a non-reentrant model
  8585 ;;
  8586                           
  8587                           	psect	text29
  8588  002360                     __ptext29:
  8589                           	opt stack 0
  8590  002360                     _reload_tmr5_pt25s:
  8591                           	opt stack 23
  8592                           
  8593                           ;io.c: 262: INTCONbits.GIE = 0;
  8594                           
  8595                           ;incstack = 0
  8596  002360  9EF2               	bcf	intcon,7,c	;volatile
  8597                           
  8598                           ;io.c: 263: T5CON = 0b00110101;
  8599  002362  0E35               	movlw	53
  8600  002364  010F               	movlb	15	; () banked
  8601  002366  6F4E               	movwf	78,b	;volatile
  8602                           
  8603                           ; BSR set to: 15
  8604                           ;io.c: 265: PIE5bits.TMR5IE = 1;
  8605  002368  827D               	bsf	3965,1,c	;volatile
  8606                           
  8607                           ; BSR set to: 15
  8608                           ;io.c: 266: INTCONbits.PEIE = 1;
  8609  00236A  8CF2               	bsf	intcon,6,c	;volatile
  8610                           
  8611                           ; BSR set to: 15
  8612                           ;io.c: 267: PIR5bits.TMR5IF = 0;
  8613  00236C  927E               	bcf	3966,1,c	;volatile
  8614                           
  8615                           ;io.c: 268: TMR5H = 0x0B;
  8616  00236E  0E0B               	movlw	11
  8617  002370  6F50               	movwf	80,b	;volatile
  8618                           
  8619                           ;io.c: 269: TMR5L = 0x45;
  8620  002372  0E45               	movlw	69
  8621  002374  6F4F               	movwf	79,b	;volatile
  8622                           
  8623                           ; BSR set to: 15
  8624                           ;io.c: 270: INTCONbits.GIE = 1;
  8625  002376  8EF2               	bsf	intcon,7,c	;volatile
  8626                           
  8627                           ; BSR set to: 15
  8628  002378  0012               	return		;funcret
  8629  00237A                     __end_of_reload_tmr5_pt25s:
  8630                           	opt stack 0
  8631                           tblptru	equ	0xFF8
  8632                           tblptrh	equ	0xFF7
  8633                           tblptrl	equ	0xFF6
  8634                           tablat	equ	0xFF5
  8635                           prodh	equ	0xFF4
  8636                           prodl	equ	0xFF3
  8637                           intcon	equ	0xFF2
  8638                           postinc0	equ	0xFEE
  8639                           wreg	equ	0xFE8
  8640                           indf1	equ	0xFE7
  8641                           postdec1	equ	0xFE5
  8642                           plusw1	equ	0xFE3
  8643                           fsr1h	equ	0xFE2
  8644                           fsr1l	equ	0xFE1
  8645                           indf2	equ	0xFDF
  8646                           postinc2	equ	0xFDE
  8647                           plusw2	equ	0xFDB
  8648                           fsr2h	equ	0xFDA
  8649                           fsr2l	equ	0xFD9
  8650                           status	equ	0xFD8
  8651                           
  8652 ;; *************** function _md_uart_send *****************
  8653 ;; Defined at:
  8654 ;;		line 93 in file "uart.c"
  8655 ;; Parameters:    Size  Location     Type
  8656 ;;  data            1    wreg     unsigned char 
  8657 ;; Auto vars:     Size  Location     Type
  8658 ;;  data            1    0[BANK0 ] unsigned char 
  8659 ;; Return value:  Size  Location     Type
  8660 ;;                  1    wreg      void 
  8661 ;; Registers used:
  8662 ;;		wreg
  8663 ;; Tracked objects:
  8664 ;;		On entry : 0/0
  8665 ;;		On exit  : 0/0
  8666 ;;		Unchanged: 0/0
  8667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8669 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8671 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8672 ;;Total ram usage:        1 bytes
  8673 ;; Hardware stack levels used:    1
  8674 ;; Hardware stack levels required when called:    3
  8675 ;; This function calls:
  8676 ;;		Nothing
  8677 ;; This function is called by:
  8678 ;;		_md_uart_write_str_ok
  8679 ;; This function uses a non-reentrant model
  8680 ;;
  8681                           
  8682                           	psect	text30
  8683  0023E0                     __ptext30:
  8684                           	opt stack 0
  8685  0023E0                     _md_uart_send:
  8686                           	opt stack 23
  8687                           
  8688                           ; BSR set to: 15
  8689                           ;incstack = 0
  8690                           ;md_uart_send@data stored from wreg
  8691  0023E0  0100               	movlb	0	; () banked
  8692  0023E2  6F60               	movwf	md_uart_send@data& (0+255),b
  8693  0023E4                     
  8694                           ;uart.c: 95: while (!TRMT1);
  8695  0023E4  A2AC               	btfss	4012,1,c	;volatile
  8696  0023E6  D7FE               	goto	l6394
  8697                           
  8698                           ;uart.c: 96: TX1REG = data;
  8699  0023E8  C060  FFAD         	movff	md_uart_send@data,4013	;volatile
  8700  0023EC  0012               	return		;funcret
  8701  0023EE                     __end_of_md_uart_send:
  8702                           	opt stack 0
  8703                           tblptru	equ	0xFF8
  8704                           tblptrh	equ	0xFF7
  8705                           tblptrl	equ	0xFF6
  8706                           tablat	equ	0xFF5
  8707                           prodh	equ	0xFF4
  8708                           prodl	equ	0xFF3
  8709                           intcon	equ	0xFF2
  8710                           postinc0	equ	0xFEE
  8711                           wreg	equ	0xFE8
  8712                           indf1	equ	0xFE7
  8713                           postdec1	equ	0xFE5
  8714                           plusw1	equ	0xFE3
  8715                           fsr1h	equ	0xFE2
  8716                           fsr1l	equ	0xFE1
  8717                           indf2	equ	0xFDF
  8718                           postinc2	equ	0xFDE
  8719                           plusw2	equ	0xFDB
  8720                           fsr2h	equ	0xFDA
  8721                           fsr2l	equ	0xFD9
  8722                           status	equ	0xFD8
  8723                           
  8724 ;; *************** function _enable_md_rxint *****************
  8725 ;; Defined at:
  8726 ;;		line 65 in file "uart.c"
  8727 ;; Parameters:    Size  Location     Type
  8728 ;;		None
  8729 ;; Auto vars:     Size  Location     Type
  8730 ;;		None
  8731 ;; Return value:  Size  Location     Type
  8732 ;;                  1    wreg      void 
  8733 ;; Registers used:
  8734 ;;		None
  8735 ;; Tracked objects:
  8736 ;;		On entry : 0/0
  8737 ;;		On exit  : 0/0
  8738 ;;		Unchanged: 0/0
  8739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8743 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8744 ;;Total ram usage:        0 bytes
  8745 ;; Hardware stack levels used:    1
  8746 ;; Hardware stack levels required when called:    3
  8747 ;; This function calls:
  8748 ;;		Nothing
  8749 ;; This function is called by:
  8750 ;;		_md_uart_write_str_ok
  8751 ;; This function uses a non-reentrant model
  8752 ;;
  8753                           
  8754                           	psect	text31
  8755  00240A                     __ptext31:
  8756                           	opt stack 0
  8757  00240A                     _enable_md_rxint:
  8758                           	opt stack 23
  8759                           
  8760                           ;uart.c: 67: GIE = 0;
  8761                           
  8762                           ;incstack = 0
  8763  00240A  9EF2               	bcf	intcon,7,c	;volatile
  8764                           
  8765                           ;uart.c: 68: PIE1bits.RC1IE = 1;
  8766  00240C  8A9D               	bsf	3997,5,c	;volatile
  8767                           
  8768                           ;uart.c: 69: PIR1bits.RC1IF = 0;
  8769  00240E  9A9E               	bcf	3998,5,c	;volatile
  8770                           
  8771                           ;uart.c: 70: INTCONbits.PEIE = 1;
  8772  002410  8CF2               	bsf	intcon,6,c	;volatile
  8773                           
  8774                           ;uart.c: 71: GIE = 1;
  8775  002412  8EF2               	bsf	intcon,7,c	;volatile
  8776  002414  0012               	return		;funcret
  8777  002416                     __end_of_enable_md_rxint:
  8778                           	opt stack 0
  8779                           tblptru	equ	0xFF8
  8780                           tblptrh	equ	0xFF7
  8781                           tblptrl	equ	0xFF6
  8782                           tablat	equ	0xFF5
  8783                           prodh	equ	0xFF4
  8784                           prodl	equ	0xFF3
  8785                           intcon	equ	0xFF2
  8786                           postinc0	equ	0xFEE
  8787                           wreg	equ	0xFE8
  8788                           indf1	equ	0xFE7
  8789                           postdec1	equ	0xFE5
  8790                           plusw1	equ	0xFE3
  8791                           fsr1h	equ	0xFE2
  8792                           fsr1l	equ	0xFE1
  8793                           indf2	equ	0xFDF
  8794                           postinc2	equ	0xFDE
  8795                           plusw2	equ	0xFDB
  8796                           fsr2h	equ	0xFDA
  8797                           fsr2l	equ	0xFD9
  8798                           status	equ	0xFD8
  8799                           
  8800 ;; *************** function _disable_tmr5 *****************
  8801 ;; Defined at:
  8802 ;;		line 273 in file "io.c"
  8803 ;; Parameters:    Size  Location     Type
  8804 ;;		None
  8805 ;; Auto vars:     Size  Location     Type
  8806 ;;		None
  8807 ;; Return value:  Size  Location     Type
  8808 ;;                  1    wreg      void 
  8809 ;; Registers used:
  8810 ;;		wreg, status,2
  8811 ;; Tracked objects:
  8812 ;;		On entry : 0/0
  8813 ;;		On exit  : 0/0
  8814 ;;		Unchanged: 0/0
  8815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8819 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8820 ;;Total ram usage:        0 bytes
  8821 ;; Hardware stack levels used:    1
  8822 ;; Hardware stack levels required when called:    3
  8823 ;; This function calls:
  8824 ;;		Nothing
  8825 ;; This function is called by:
  8826 ;;		_check_md_state
  8827 ;;		_md_uart_write_str_ok
  8828 ;; This function uses a non-reentrant model
  8829 ;;
  8830                           
  8831                           	psect	text32
  8832  002416                     __ptext32:
  8833                           	opt stack 0
  8834  002416                     _disable_tmr5:
  8835                           	opt stack 23
  8836                           
  8837                           ;io.c: 275: tmr5_cnt = 0;
  8838                           
  8839                           ;incstack = 0
  8840  002416  0E00               	movlw	0
  8841  002418  6E1B               	movwf	_tmr5_cnt,c
  8842                           
  8843                           ;io.c: 276: T5CONbits.TMR5ON = 0;
  8844  00241A  010F               	movlb	15	; () banked
  8845  00241C  914E               	bcf	78,0,b	;volatile
  8846                           
  8847                           ; BSR set to: 15
  8848                           ;io.c: 277: PIE5bits.TMR5IE = 0;
  8849  00241E  927D               	bcf	3965,1,c	;volatile
  8850                           
  8851                           ; BSR set to: 15
  8852  002420  0012               	return		;funcret
  8853  002422                     __end_of_disable_tmr5:
  8854                           	opt stack 0
  8855                           tblptru	equ	0xFF8
  8856                           tblptrh	equ	0xFF7
  8857                           tblptrl	equ	0xFF6
  8858                           tablat	equ	0xFF5
  8859                           prodh	equ	0xFF4
  8860                           prodl	equ	0xFF3
  8861                           intcon	equ	0xFF2
  8862                           postinc0	equ	0xFEE
  8863                           wreg	equ	0xFE8
  8864                           indf1	equ	0xFE7
  8865                           postdec1	equ	0xFE5
  8866                           plusw1	equ	0xFE3
  8867                           fsr1h	equ	0xFE2
  8868                           fsr1l	equ	0xFE1
  8869                           indf2	equ	0xFDF
  8870                           postinc2	equ	0xFDE
  8871                           plusw2	equ	0xFDB
  8872                           fsr2h	equ	0xFDA
  8873                           fsr2l	equ	0xFD9
  8874                           status	equ	0xFD8
  8875                           
  8876 ;; *************** function _clear_at_ok *****************
  8877 ;; Defined at:
  8878 ;;		line 244 in file "io.c"
  8879 ;; Parameters:    Size  Location     Type
  8880 ;;		None
  8881 ;; Auto vars:     Size  Location     Type
  8882 ;;		None
  8883 ;; Return value:  Size  Location     Type
  8884 ;;                  1    wreg      void 
  8885 ;; Registers used:
  8886 ;;		wreg, status,2
  8887 ;; Tracked objects:
  8888 ;;		On entry : 0/0
  8889 ;;		On exit  : 0/0
  8890 ;;		Unchanged: 0/0
  8891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8895 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8896 ;;Total ram usage:        0 bytes
  8897 ;; Hardware stack levels used:    1
  8898 ;; Hardware stack levels required when called:    3
  8899 ;; This function calls:
  8900 ;;		Nothing
  8901 ;; This function is called by:
  8902 ;;		_init_pic
  8903 ;;		_start_sms_ok
  8904 ;;		_read_sms
  8905 ;;		_send_sms_ok
  8906 ;;		_startup_ok
  8907 ;; This function uses a non-reentrant model
  8908 ;;
  8909                           
  8910                           	psect	text33
  8911  002152                     __ptext33:
  8912                           	opt stack 0
  8913  002152                     _clear_at_ok:
  8914                           	opt stack 26
  8915                           
  8916                           ;io.c: 246: at1 = 0;
  8917                           
  8918                           ; BSR set to: 15
  8919                           ;incstack = 0
  8920  002152  0E00               	movlw	0
  8921  002154  0100               	movlb	0	; () banked
  8922  002156  6FC0               	movwf	_at1& (0+255),b
  8923                           
  8924                           ;io.c: 247: at2 = 0;
  8925  002158  0E00               	movlw	0
  8926  00215A  6FBF               	movwf	_at2& (0+255),b
  8927                           
  8928                           ;io.c: 248: at3 = 0;
  8929  00215C  0E00               	movlw	0
  8930  00215E  6FBE               	movwf	_at3& (0+255),b
  8931                           
  8932                           ;io.c: 249: at4 = 0;
  8933  002160  0E00               	movlw	0
  8934  002162  6FBD               	movwf	_at4& (0+255),b
  8935                           
  8936                           ;io.c: 250: at5 = 0;
  8937  002164  0E00               	movlw	0
  8938  002166  6FBC               	movwf	_at5& (0+255),b
  8939                           
  8940                           ;io.c: 251: at6 = 0;
  8941  002168  0E00               	movlw	0
  8942  00216A  6FBB               	movwf	_at6& (0+255),b
  8943                           
  8944                           ;io.c: 252: at7 = 0;
  8945  00216C  0E00               	movlw	0
  8946  00216E  6FBA               	movwf	_at7& (0+255),b
  8947                           
  8948                           ;io.c: 253: at8 = 0;
  8949  002170  0E00               	movlw	0
  8950  002172  6FB9               	movwf	_at8& (0+255),b
  8951                           
  8952                           ;io.c: 254: at9 = 0;
  8953  002174  0E00               	movlw	0
  8954  002176  6FB8               	movwf	_at9& (0+255),b
  8955                           
  8956                           ;io.c: 255: at10 = 0;
  8957  002178  0E00               	movlw	0
  8958  00217A  6FB7               	movwf	_at10& (0+255),b
  8959                           
  8960                           ;io.c: 256: at11 = 0;
  8961  00217C  0E00               	movlw	0
  8962  00217E  6FB6               	movwf	_at11& (0+255),b
  8963                           
  8964                           ;io.c: 257: at12 = 0;
  8965  002180  0E00               	movlw	0
  8966  002182  6FB5               	movwf	_at12& (0+255),b
  8967                           
  8968                           ; BSR set to: 0
  8969  002184  0012               	return		;funcret
  8970  002186                     __end_of_clear_at_ok:
  8971                           	opt stack 0
  8972                           tblptru	equ	0xFF8
  8973                           tblptrh	equ	0xFF7
  8974                           tblptrl	equ	0xFF6
  8975                           tablat	equ	0xFF5
  8976                           prodh	equ	0xFF4
  8977                           prodl	equ	0xFF3
  8978                           intcon	equ	0xFF2
  8979                           postinc0	equ	0xFEE
  8980                           wreg	equ	0xFE8
  8981                           indf1	equ	0xFE7
  8982                           postdec1	equ	0xFE5
  8983                           plusw1	equ	0xFE3
  8984                           fsr1h	equ	0xFE2
  8985                           fsr1l	equ	0xFE1
  8986                           indf2	equ	0xFDF
  8987                           postinc2	equ	0xFDE
  8988                           plusw2	equ	0xFDB
  8989                           fsr2h	equ	0xFDA
  8990                           fsr2l	equ	0xFD9
  8991                           status	equ	0xFD8
  8992                           
  8993 ;; *************** function _check_sms_timer *****************
  8994 ;; Defined at:
  8995 ;;		line 58 in file "sms.c"
  8996 ;; Parameters:    Size  Location     Type
  8997 ;;		None
  8998 ;; Auto vars:     Size  Location     Type
  8999 ;;  sms_duration    1    6[BANK0 ] unsigned char 
  9000 ;; Return value:  Size  Location     Type
  9001 ;;                  1    wreg      void 
  9002 ;; Registers used:
  9003 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9004 ;; Tracked objects:
  9005 ;;		On entry : 0/0
  9006 ;;		On exit  : 0/0
  9007 ;;		Unchanged: 0/0
  9008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9010 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9012 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9013 ;;Total ram usage:        1 bytes
  9014 ;; Hardware stack levels used:    1
  9015 ;; Hardware stack levels required when called:    5
  9016 ;; This function calls:
  9017 ;;		_ee_read_ascii_to_value
  9018 ;;		_stop_sms_timer
  9019 ;; This function is called by:
  9020 ;;		_listen_sms
  9021 ;; This function uses a non-reentrant model
  9022 ;;
  9023                           
  9024                           	psect	text34
  9025  001E34                     __ptext34:
  9026                           	opt stack 0
  9027  001E34                     _check_sms_timer:
  9028                           	opt stack 23
  9029                           
  9030                           ;sms.c: 60: uint8_t sms_duration = (uint8_t)(ee_read_ascii_to_value(0x00, 0xB8) * 20);
  9031                           
  9032                           ; BSR set to: 0
  9033                           ;incstack = 0
  9034  001E34  0EB8               	movlw	184
  9035  001E36  0100               	movlb	0	; () banked
  9036  001E38  6F63               	movwf	ee_read_ascii_to_value@addr& (0+255),b
  9037  001E3A  0E00               	movlw	0
  9038  001E3C  ECF3  F010         	call	_ee_read_ascii_to_value
  9039  001E40  0D14               	mullw	20
  9040  001E42  CFF3 F066          	movff	prodl,check_sms_timer@sms_duration
  9041                           
  9042                           ;sms.c: 61: switch(SMS_TMR_STATE)
  9043  001E46  D022               	goto	l763
  9044  001E48                     
  9045                           ;sms.c: 66: if (t2_tick >= 31)
  9046  001E48  0E1E               	movlw	30
  9047  001E4A  6417               	cpfsgt	_t2_tick,c
  9048  001E4C  D005               	goto	l767
  9049                           
  9050                           ;sms.c: 67: {
  9051                           ;sms.c: 68: t2_tick = 0;
  9052  001E4E  0E00               	movlw	0
  9053  001E50  6E17               	movwf	_t2_tick,c
  9054                           
  9055                           ;sms.c: 69: sms_tmr_tick++;
  9056  001E52  2A18               	incf	_sms_tmr_tick,f,c
  9057                           
  9058                           ;sms.c: 70: SMS_TMR_STATE = NEXT_SMS_READY;
  9059  001E54  0E02               	movlw	2
  9060  001E56  6E10               	movwf	_SMS_TMR_STATE,c
  9061  001E58                     l767:
  9062                           
  9063                           ;sms.c: 71: }
  9064                           ;sms.c: 72: if (sms_tmr_tick >= sms_duration)
  9065  001E58  0100               	movlb	0	; () banked
  9066  001E5A  5166               	movf	check_sms_timer@sms_duration& (0+255),w,b
  9067  001E5C  5C18               	subwf	_sms_tmr_tick,w,c
  9068  001E5E  A0D8               	btfss	status,0,c
  9069  001E60  0012               	return	
  9070                           
  9071                           ; BSR set to: 0
  9072                           ;sms.c: 73: {
  9073                           ;sms.c: 74: sms_tmr_tick = 0;
  9074  001E62  0E00               	movlw	0
  9075  001E64  6E18               	movwf	_sms_tmr_tick,c
  9076                           
  9077                           ;sms.c: 75: SMS_TMR_STATE = LISTEN_MODE_DONE;
  9078  001E66  0E03               	movlw	3
  9079  001E68  6E10               	movwf	_SMS_TMR_STATE,c
  9080                           
  9081                           ; BSR set to: 0
  9082                           ;sms.c: 76: }
  9083                           ;sms.c: 77: break;
  9084  001E6A  0012               	return	
  9085  001E6C                     
  9086                           ;sms.c: 79: sms_timer_ready = 1;
  9087                           
  9088                           ; BSR set to: 0
  9089  001E6C  0E01               	movlw	1
  9090  001E6E  0100               	movlb	0	; () banked
  9091  001E70  6FC8               	movwf	_sms_timer_ready& (0+255),b
  9092                           
  9093                           ;sms.c: 80: SMS_TMR_STATE = RUNNING;
  9094  001E72  0E01               	movlw	1
  9095  001E74  6E10               	movwf	_SMS_TMR_STATE,c
  9096                           
  9097                           ;sms.c: 81: break;
  9098  001E76  0012               	return	
  9099  001E78                     
  9100                           ;sms.c: 83: stop_sms_timer();
  9101                           
  9102                           ; BSR set to: 0
  9103  001E78  EC36  F012         	call	_stop_sms_timer	;wreg free
  9104                           
  9105                           ;sms.c: 84: modem_ready_sms = 0;
  9106  001E7C  0E00               	movlw	0
  9107  001E7E  0100               	movlb	0	; () banked
  9108  001E80  6FC1               	movwf	_modem_ready_sms& (0+255),b
  9109                           
  9110                           ; BSR set to: 0
  9111                           ;sms.c: 85: STATE = PREV_STATE;
  9112  001E82  C0C9  F01E         	movff	_PREV_STATE,_STATE
  9113                           
  9114                           ; BSR set to: 0
  9115                           ;sms.c: 86: SMS_TMR_STATE = 0;
  9116  001E86  0E00               	movlw	0
  9117  001E88  6E10               	movwf	_SMS_TMR_STATE,c
  9118                           
  9119                           ; BSR set to: 0
  9120                           ;sms.c: 88: }
  9121                           
  9122                           ;sms.c: 87: break;
  9123  001E8A  0012               	return	
  9124  001E8C                     l763:
  9125                           
  9126                           ; BSR set to: 0
  9127  001E8C  5010               	movf	_SMS_TMR_STATE,w,c
  9128                           
  9129                           ; Switch size 1, requested type "space"
  9130                           ; Number of cases is 4, Range of values is 0 to 3
  9131                           ; switch strategies available:
  9132                           ; Name         Instructions Cycles
  9133                           ; simple_byte           13     7 (average)
  9134                           ;	Chosen strategy is simple_byte
  9135  001E8E  0A00               	xorlw	0	; case 0
  9136  001E90  B4D8               	btfsc	status,2,c
  9137  001E92  0012               	return	
  9138  001E94  0A01               	xorlw	1	; case 1
  9139  001E96  B4D8               	btfsc	status,2,c
  9140  001E98  D7D7               	goto	l766
  9141  001E9A  0A03               	xorlw	3	; case 2
  9142  001E9C  B4D8               	btfsc	status,2,c
  9143  001E9E  D7E6               	goto	l769
  9144  001EA0  0A01               	xorlw	1	; case 3
  9145  001EA2  A4D8               	btfss	status,2,c
  9146  001EA4  0012               	return	
  9147  001EA6  D7E8               	goto	l770
  9148  001EA8                     __end_of_check_sms_timer:
  9149                           	opt stack 0
  9150                           tblptru	equ	0xFF8
  9151                           tblptrh	equ	0xFF7
  9152                           tblptrl	equ	0xFF6
  9153                           tablat	equ	0xFF5
  9154                           prodh	equ	0xFF4
  9155                           prodl	equ	0xFF3
  9156                           intcon	equ	0xFF2
  9157                           postinc0	equ	0xFEE
  9158                           wreg	equ	0xFE8
  9159                           indf1	equ	0xFE7
  9160                           postdec1	equ	0xFE5
  9161                           plusw1	equ	0xFE3
  9162                           fsr1h	equ	0xFE2
  9163                           fsr1l	equ	0xFE1
  9164                           indf2	equ	0xFDF
  9165                           postinc2	equ	0xFDE
  9166                           plusw2	equ	0xFDB
  9167                           fsr2h	equ	0xFDA
  9168                           fsr2l	equ	0xFD9
  9169                           status	equ	0xFD8
  9170                           
  9171 ;; *************** function _stop_sms_timer *****************
  9172 ;; Defined at:
  9173 ;;		line 101 in file "sms.c"
  9174 ;; Parameters:    Size  Location     Type
  9175 ;;		None
  9176 ;; Auto vars:     Size  Location     Type
  9177 ;;		None
  9178 ;; Return value:  Size  Location     Type
  9179 ;;                  1    wreg      void 
  9180 ;; Registers used:
  9181 ;;		None
  9182 ;; Tracked objects:
  9183 ;;		On entry : 0/0
  9184 ;;		On exit  : 0/0
  9185 ;;		Unchanged: 0/0
  9186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9188 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9190 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9191 ;;Total ram usage:        0 bytes
  9192 ;; Hardware stack levels used:    1
  9193 ;; Hardware stack levels required when called:    3
  9194 ;; This function calls:
  9195 ;;		Nothing
  9196 ;; This function is called by:
  9197 ;;		_check_sms_timer
  9198 ;; This function uses a non-reentrant model
  9199 ;;
  9200                           
  9201                           	psect	text35
  9202  00246C                     __ptext35:
  9203                           	opt stack 0
  9204  00246C                     _stop_sms_timer:
  9205                           	opt stack 24
  9206                           
  9207                           ;sms.c: 103: T2CONbits.TMR2ON = 0;
  9208                           
  9209                           ;incstack = 0
  9210  00246C  94BA               	bcf	4026,2,c	;volatile
  9211                           
  9212                           ;sms.c: 104: PIE1bits.TMR2IE = 0;
  9213  00246E  929D               	bcf	3997,1,c	;volatile
  9214  002470  0012               	return		;funcret
  9215  002472                     __end_of_stop_sms_timer:
  9216                           	opt stack 0
  9217                           tblptru	equ	0xFF8
  9218                           tblptrh	equ	0xFF7
  9219                           tblptrl	equ	0xFF6
  9220                           tablat	equ	0xFF5
  9221                           prodh	equ	0xFF4
  9222                           prodl	equ	0xFF3
  9223                           intcon	equ	0xFF2
  9224                           postinc0	equ	0xFEE
  9225                           wreg	equ	0xFE8
  9226                           indf1	equ	0xFE7
  9227                           postdec1	equ	0xFE5
  9228                           plusw1	equ	0xFE3
  9229                           fsr1h	equ	0xFE2
  9230                           fsr1l	equ	0xFE1
  9231                           indf2	equ	0xFDF
  9232                           postinc2	equ	0xFDE
  9233                           plusw2	equ	0xFDB
  9234                           fsr2h	equ	0xFDA
  9235                           fsr2l	equ	0xFD9
  9236                           status	equ	0xFD8
  9237                           
  9238 ;; *************** function _ee_read_ascii_to_value *****************
  9239 ;; Defined at:
  9240 ;;		line 39 in file "ee.c"
  9241 ;; Parameters:    Size  Location     Type
  9242 ;;  page            1    wreg     unsigned char 
  9243 ;;  addr            1    3[BANK0 ] unsigned char 
  9244 ;; Auto vars:     Size  Location     Type
  9245 ;;  page            1    4[BANK0 ] unsigned char 
  9246 ;;  data            1    5[BANK0 ] unsigned char 
  9247 ;; Return value:  Size  Location     Type
  9248 ;;                  1    wreg      unsigned char 
  9249 ;; Registers used:
  9250 ;;		wreg, status,2, status,0, cstack
  9251 ;; Tracked objects:
  9252 ;;		On entry : 0/0
  9253 ;;		On exit  : 0/0
  9254 ;;		Unchanged: 0/0
  9255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9256 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9257 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9259 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9260 ;;Total ram usage:        3 bytes
  9261 ;; Hardware stack levels used:    1
  9262 ;; Hardware stack levels required when called:    4
  9263 ;; This function calls:
  9264 ;;		_ee_read
  9265 ;; This function is called by:
  9266 ;;		_check_sms_timer
  9267 ;; This function uses a non-reentrant model
  9268 ;;
  9269                           
  9270                           	psect	text36
  9271  0021E6                     __ptext36:
  9272                           	opt stack 0
  9273  0021E6                     _ee_read_ascii_to_value:
  9274                           	opt stack 23
  9275                           
  9276                           ;incstack = 0
  9277                           ;ee_read_ascii_to_value@page stored from wreg
  9278  0021E6  0100               	movlb	0	; () banked
  9279  0021E8  6F64               	movwf	ee_read_ascii_to_value@page& (0+255),b
  9280                           
  9281                           ;ee.c: 41: uint8_t data;
  9282                           ;ee.c: 42: data = ee_read(page, addr);
  9283  0021EA  C063  F060         	movff	ee_read_ascii_to_value@addr,ee_read@addr
  9284  0021EE  0100               	movlb	0	; () banked
  9285  0021F0  5164               	movf	ee_read_ascii_to_value@page& (0+255),w,b
  9286  0021F2  EC76  F011         	call	_ee_read
  9287  0021F6  0100               	movlb	0	; () banked
  9288  0021F8  6F65               	movwf	ee_read_ascii_to_value@data& (0+255),b
  9289                           
  9290                           ; BSR set to: 0
  9291                           ;ee.c: 43: if (data >= 'A')
  9292  0021FA  0E40               	movlw	64
  9293  0021FC  6565               	cpfsgt	ee_read_ascii_to_value@data& (0+255),b
  9294  0021FE  D003               	goto	l1206
  9295                           
  9296                           ; BSR set to: 0
  9297                           ;ee.c: 44: data = (uint8_t)((data - 0x41) + 0x0A);
  9298  002200  5165               	movf	ee_read_ascii_to_value@data& (0+255),w,b
  9299  002202  0FC9               	addlw	201
  9300  002204  D002               	goto	L26
  9301  002206                     l1206:
  9302                           
  9303                           ; BSR set to: 0
  9304                           ;ee.c: 45: else
  9305                           ;ee.c: 46: data = (uint8_t)(data - 0x30);
  9306                           
  9307                           ; BSR set to: 0
  9308  002206  5165               	movf	ee_read_ascii_to_value@data& (0+255),w,b
  9309  002208  0FD0               	addlw	208
  9310  00220A                     L26:
  9311  00220A  6F65               	movwf	ee_read_ascii_to_value@data& (0+255),b
  9312                           
  9313                           ; BSR set to: 0
  9314                           ;ee.c: 48: return data;
  9315                           
  9316                           ; BSR set to: 0
  9317  00220C  5165               	movf	ee_read_ascii_to_value@data& (0+255),w,b
  9318  00220E  0012               	return	
  9319  002210                     __end_of_ee_read_ascii_to_value:
  9320                           	opt stack 0
  9321                           tblptru	equ	0xFF8
  9322                           tblptrh	equ	0xFF7
  9323                           tblptrl	equ	0xFF6
  9324                           tablat	equ	0xFF5
  9325                           prodh	equ	0xFF4
  9326                           prodl	equ	0xFF3
  9327                           intcon	equ	0xFF2
  9328                           postinc0	equ	0xFEE
  9329                           wreg	equ	0xFE8
  9330                           indf1	equ	0xFE7
  9331                           postdec1	equ	0xFE5
  9332                           plusw1	equ	0xFE3
  9333                           fsr1h	equ	0xFE2
  9334                           fsr1l	equ	0xFE1
  9335                           indf2	equ	0xFDF
  9336                           postinc2	equ	0xFDE
  9337                           plusw2	equ	0xFDB
  9338                           fsr2h	equ	0xFDA
  9339                           fsr2l	equ	0xFD9
  9340                           status	equ	0xFD8
  9341                           
  9342 ;; *************** function _del_sensor *****************
  9343 ;; Defined at:
  9344 ;;		line 184 in file "io.c"
  9345 ;; Parameters:    Size  Location     Type
  9346 ;;  sensorID        2   11[BANK0 ] PTR unsigned char 
  9347 ;;		 -> rx2_buf(5), 
  9348 ;; Auto vars:     Size  Location     Type
  9349 ;;  i               1   15[BANK0 ] unsigned char 
  9350 ;;  sensorIndex     1   14[BANK0 ] unsigned char 
  9351 ;;  j               1   13[BANK0 ] unsigned char 
  9352 ;; Return value:  Size  Location     Type
  9353 ;;                  1    wreg      void 
  9354 ;; Registers used:
  9355 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9356 ;; Tracked objects:
  9357 ;;		On entry : 0/0
  9358 ;;		On exit  : 0/0
  9359 ;;		Unchanged: 0/0
  9360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9361 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9362 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9364 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9365 ;;Total ram usage:        5 bytes
  9366 ;; Hardware stack levels used:    1
  9367 ;; Hardware stack levels required when called:    7
  9368 ;; This function calls:
  9369 ;;		_ee_read
  9370 ;;		_ee_write
  9371 ;;		_getIndexOfLearnedSensor
  9372 ;; This function is called by:
  9373 ;;		_check_state
  9374 ;; This function uses a non-reentrant model
  9375 ;;
  9376                           
  9377                           	psect	text37
  9378  001D1E                     __ptext37:
  9379                           	opt stack 0
  9380  001D1E                     _del_sensor:
  9381                           	opt stack 22
  9382                           
  9383                           ;io.c: 186: if (receivedSensor)
  9384                           
  9385                           ; BSR set to: 0
  9386                           ;incstack = 0
  9387  001D1E  0100               	movlb	0	; () banked
  9388  001D20  51C7               	movf	_receivedSensor& (0+255),w,b
  9389  001D22  B4D8               	btfsc	status,2,c
  9390  001D24  0012               	return	
  9391                           
  9392                           ; BSR set to: 0
  9393                           ;io.c: 187: {
  9394                           ;io.c: 188: uint8_t sensorIndex = getIndexOfLearnedSensor(sensorID);
  9395  001D26  C06B  F061         	movff	del_sensor@sensorID,getIndexOfLearnedSensor@sensorID
  9396  001D2A  C06C  F062         	movff	del_sensor@sensorID+1,getIndexOfLearnedSensor@sensorID+1
  9397  001D2E  EC44  F00E         	call	_getIndexOfLearnedSensor	;wreg free
  9398  001D32  0100               	movlb	0	; () banked
  9399  001D34  6F6E               	movwf	del_sensor@sensorIndex& (0+255),b
  9400                           
  9401                           ; BSR set to: 0
  9402                           ;io.c: 189: uint8_t i, j;
  9403                           ;io.c: 190: if (sensorIndex != 0xFF)
  9404  001D36  296E               	incf	del_sensor@sensorIndex& (0+255),w,b
  9405  001D38  B4D8               	btfsc	status,2,c
  9406  001D3A  0012               	return	
  9407                           
  9408                           ; BSR set to: 0
  9409                           ;io.c: 191: {
  9410                           ;io.c: 192: for (i = 0; i < 4; i++)
  9411  001D3C  0E00               	movlw	0
  9412  001D3E  6F6F               	movwf	del_sensor@i& (0+255),b
  9413  001D40                     l7858:
  9414                           
  9415                           ; BSR set to: 0
  9416  001D40  0E03               	movlw	3
  9417  001D42  656F               	cpfsgt	del_sensor@i& (0+255),b
  9418  001D44  D001               	goto	l491
  9419  001D46  D00E               	goto	u10300
  9420  001D48                     l491:
  9421                           
  9422                           ; BSR set to: 0
  9423                           ;io.c: 193: ee_write(0x01, (uint8_t)(0x80 + (sensorIndex * 4) + i), 0x00);
  9424                           
  9425                           ; BSR set to: 0
  9426  001D48  516E               	movf	del_sensor@sensorIndex& (0+255),w,b
  9427  001D4A  0D04               	mullw	4
  9428  001D4C  50F3               	movf	prodl,w,c
  9429  001D4E  256F               	addwf	del_sensor@i& (0+255),w,b
  9430  001D50  0F80               	addlw	128
  9431  001D52  6F63               	movwf	ee_write@addr& (0+255),b
  9432  001D54  0E00               	movlw	0
  9433  001D56  6F64               	movwf	ee_write@data& (0+255),b
  9434  001D58  0E01               	movlw	1
  9435  001D5A  ECDB  F010         	call	_ee_write
  9436  001D5E  0100               	movlb	0	; () banked
  9437  001D60  2B6F               	incf	del_sensor@i& (0+255),f,b
  9438  001D62  D7EE               	goto	l7858
  9439  001D64                     u10300:
  9440                           
  9441                           ; BSR set to: 0
  9442                           ;io.c: 194: for (i = sensorIndex; i < (16 - 1); i++)
  9443  001D64  C06E  F06F         	movff	del_sensor@sensorIndex,del_sensor@i
  9444  001D68                     l7868:
  9445                           
  9446                           ; BSR set to: 0
  9447  001D68  0E0E               	movlw	14
  9448  001D6A  656F               	cpfsgt	del_sensor@i& (0+255),b
  9449  001D6C  D001               	goto	l493
  9450  001D6E  0012               	return	
  9451  001D70                     l493:
  9452                           
  9453                           ; BSR set to: 0
  9454                           ;io.c: 195: {
  9455                           ;io.c: 196: for (j = 0; j < 4; j++)
  9456                           
  9457                           ; BSR set to: 0
  9458  001D70  0E00               	movlw	0
  9459  001D72  6F6D               	movwf	del_sensor@j& (0+255),b
  9460  001D74                     l7874:
  9461                           
  9462                           ; BSR set to: 0
  9463  001D74  0E03               	movlw	3
  9464  001D76  656D               	cpfsgt	del_sensor@j& (0+255),b
  9465  001D78  D001               	goto	l495
  9466  001D7A  D017               	goto	u10330
  9467  001D7C                     l495:
  9468                           
  9469                           ; BSR set to: 0
  9470                           ;io.c: 197: ee_write(0x01, (uint8_t)(0x80 + (sensorIndex * 4) + i), (ee_read(0x01, (uint
      +                          8_t)(0x80 + (sensorIndex * (4 + 1)) + j))));
  9471                           
  9472                           ; BSR set to: 0
  9473  001D7C  516E               	movf	del_sensor@sensorIndex& (0+255),w,b
  9474  001D7E  0D04               	mullw	4
  9475  001D80  50F3               	movf	prodl,w,c
  9476  001D82  256F               	addwf	del_sensor@i& (0+255),w,b
  9477  001D84  0F80               	addlw	128
  9478  001D86  6F63               	movwf	ee_write@addr& (0+255),b
  9479  001D88  516E               	movf	del_sensor@sensorIndex& (0+255),w,b
  9480  001D8A  0D05               	mullw	5
  9481  001D8C  50F3               	movf	prodl,w,c
  9482  001D8E  256D               	addwf	del_sensor@j& (0+255),w,b
  9483  001D90  0F80               	addlw	128
  9484  001D92  6F60               	movwf	ee_read@addr& (0+255),b
  9485  001D94  0E01               	movlw	1
  9486  001D96  EC76  F011         	call	_ee_read
  9487  001D9A  0100               	movlb	0	; () banked
  9488  001D9C  6F64               	movwf	ee_write@data& (0+255),b
  9489  001D9E  0E01               	movlw	1
  9490  001DA0  ECDB  F010         	call	_ee_write
  9491  001DA4  0100               	movlb	0	; () banked
  9492  001DA6  2B6D               	incf	del_sensor@j& (0+255),f,b
  9493  001DA8  D7E5               	goto	l7874
  9494  001DAA                     u10330:
  9495                           
  9496                           ; BSR set to: 0
  9497                           
  9498                           ; BSR set to: 0
  9499  001DAA  2B6F               	incf	del_sensor@i& (0+255),f,b
  9500  001DAC  D7DD               	goto	l7868
  9501  001DAE                     __end_of_del_sensor:
  9502                           	opt stack 0
  9503                           tblptru	equ	0xFF8
  9504                           tblptrh	equ	0xFF7
  9505                           tblptrl	equ	0xFF6
  9506                           tablat	equ	0xFF5
  9507                           prodh	equ	0xFF4
  9508                           prodl	equ	0xFF3
  9509                           intcon	equ	0xFF2
  9510                           postinc0	equ	0xFEE
  9511                           wreg	equ	0xFE8
  9512                           indf1	equ	0xFE7
  9513                           postdec1	equ	0xFE5
  9514                           plusw1	equ	0xFE3
  9515                           fsr1h	equ	0xFE2
  9516                           fsr1l	equ	0xFE1
  9517                           indf2	equ	0xFDF
  9518                           postinc2	equ	0xFDE
  9519                           plusw2	equ	0xFDB
  9520                           fsr2h	equ	0xFDA
  9521                           fsr2l	equ	0xFD9
  9522                           status	equ	0xFD8
  9523                           
  9524 ;; *************** function _getIndexOfLearnedSensor *****************
  9525 ;; Defined at:
  9526 ;;		line 217 in file "io.c"
  9527 ;; Parameters:    Size  Location     Type
  9528 ;;  sensorID        2    1[BANK0 ] PTR unsigned char 
  9529 ;;		 -> rx2_buf(5), 
  9530 ;; Auto vars:     Size  Location     Type
  9531 ;;  j               1   10[BANK0 ] unsigned char 
  9532 ;;  i               1    9[BANK0 ] unsigned char 
  9533 ;;  isLearnedIn     1    8[BANK0 ] unsigned char 
  9534 ;;  sensorIndex     1    7[BANK0 ] unsigned char 
  9535 ;; Return value:  Size  Location     Type
  9536 ;;                  1    wreg      unsigned char 
  9537 ;; Registers used:
  9538 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9539 ;; Tracked objects:
  9540 ;;		On entry : 0/0
  9541 ;;		On exit  : 0/0
  9542 ;;		Unchanged: 0/0
  9543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9544 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9545 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9546 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9547 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9548 ;;Total ram usage:       10 bytes
  9549 ;; Hardware stack levels used:    1
  9550 ;; Hardware stack levels required when called:    6
  9551 ;; This function calls:
  9552 ;;		_send_uart_ack
  9553 ;; This function is called by:
  9554 ;;		_del_sensor
  9555 ;;		_check_sensor
  9556 ;; This function uses a non-reentrant model
  9557 ;;
  9558                           
  9559                           	psect	text38
  9560  001C88                     __ptext38:
  9561                           	opt stack 0
  9562  001C88                     _getIndexOfLearnedSensor:
  9563                           	opt stack 22
  9564                           
  9565                           ;io.c: 219: bool isLearnedIn = 0;
  9566                           
  9567                           ; BSR set to: 0
  9568                           ;incstack = 0
  9569  001C88  0E00               	movlw	0
  9570  001C8A  0100               	movlb	0	; () banked
  9571  001C8C  6F68               	movwf	getIndexOfLearnedSensor@isLearnedIn& (0+255),b
  9572                           
  9573                           ;io.c: 220: uint8_t i = 0, sensorIndex;
  9574  001C8E  0E00               	movlw	0
  9575  001C90  6F69               	movwf	getIndexOfLearnedSensor@i& (0+255),b
  9576                           
  9577                           ;io.c: 221: if (receivedSensor)
  9578  001C92  51C7               	movf	_receivedSensor& (0+255),w,b
  9579  001C94  B4D8               	btfsc	status,2,c
  9580  001C96  D041               	goto	u9420
  9581                           
  9582                           ; BSR set to: 0
  9583                           ;io.c: 222: {
  9584                           ;io.c: 223: receivedSensor = 0;
  9585  001C98  0E00               	movlw	0
  9586  001C9A  6FC7               	movwf	_receivedSensor& (0+255),b
  9587                           
  9588                           ; BSR set to: 0
  9589                           ;io.c: 224: send_uart_ack();
  9590  001C9C  EC86  F011         	call	_send_uart_ack	;wreg free
  9591                           
  9592                           ;io.c: 225: while (i < 16 && !isLearnedIn)
  9593  001CA0  D035               	goto	l509
  9594  001CA2                     
  9595                           ;io.c: 226: {
  9596                           ;io.c: 227: isLearnedIn = 1;
  9597  001CA2  0E01               	movlw	1
  9598  001CA4  0100               	movlb	0	; () banked
  9599  001CA6  6F68               	movwf	getIndexOfLearnedSensor@isLearnedIn& (0+255),b
  9600                           
  9601                           ;io.c: 228: for (uint8_t j = 0; j < 4 - 1; j++)
  9602  001CA8  0E00               	movlw	0
  9603  001CAA  6F6A               	movwf	getIndexOfLearnedSensor@j& (0+255),b
  9604  001CAC                     l7384:
  9605                           
  9606                           ; BSR set to: 0
  9607  001CAC  0E02               	movlw	2
  9608  001CAE  656A               	cpfsgt	getIndexOfLearnedSensor@j& (0+255),b
  9609  001CB0  D001               	goto	l511
  9610  001CB2  D024               	goto	u9390
  9611  001CB4                     l511:
  9612                           
  9613                           ; BSR set to: 0
  9614                           ;io.c: 229: {
  9615                           ;io.c: 230: isLearnedIn &= (bool)(rx2_buf[j] == ID[i][j]);
  9616                           
  9617                           ; BSR set to: 0
  9618  001CB4  5169               	movf	getIndexOfLearnedSensor@i& (0+255),w,b
  9619  001CB6  0D04               	mullw	4
  9620  001CB8  0E00               	movlw	low _ID
  9621  001CBA  6F63               	movwf	??_getIndexOfLearnedSensor& (0+255),b
  9622  001CBC  0E03               	movlw	high _ID
  9623  001CBE  6F64               	movwf	(??_getIndexOfLearnedSensor+1)& (0+255),b
  9624  001CC0  50F3               	movf	prodl,w,c
  9625  001CC2  2763               	addwf	??_getIndexOfLearnedSensor& (0+255),f,b
  9626  001CC4  50F4               	movf	prodh,w,c
  9627  001CC6  2364               	addwfc	(??_getIndexOfLearnedSensor+1)& (0+255),f,b
  9628  001CC8  516A               	movf	getIndexOfLearnedSensor@j& (0+255),w,b
  9629  001CCA  0D01               	mullw	1
  9630  001CCC  50F3               	movf	prodl,w,c
  9631  001CCE  2563               	addwf	??_getIndexOfLearnedSensor& (0+255),w,b
  9632  001CD0  6ED9               	movwf	fsr2l,c
  9633  001CD2  50F4               	movf	prodh,w,c
  9634  001CD4  2164               	addwfc	(??_getIndexOfLearnedSensor+1)& (0+255),w,b
  9635  001CD6  6EDA               	movwf	fsr2h,c
  9636  001CD8  516A               	movf	getIndexOfLearnedSensor@j& (0+255),w,b
  9637  001CDA  0D01               	mullw	1
  9638  001CDC  0E1F               	movlw	low _rx2_buf
  9639  001CDE  24F3               	addwf	prodl,w,c
  9640  001CE0  6EE1               	movwf	fsr1l,c
  9641  001CE2  0E00               	movlw	high _rx2_buf
  9642  001CE4  20F4               	addwfc	prodh,w,c
  9643  001CE6  6EE2               	movwf	fsr1h,c
  9644  001CE8  50DE               	movf	postinc2,w,c
  9645  001CEA  18E6               	xorwf	postinc1,w,c
  9646  001CEC  A4D8               	btfss	status,2,c
  9647  001CEE  D002               	goto	u9370
  9648  001CF0  0E01               	movlw	1
  9649  001CF2  D001               	goto	u9380
  9650  001CF4                     u9370:
  9651  001CF4  0E00               	movlw	0
  9652  001CF6                     u9380:
  9653  001CF6  1768               	andwf	getIndexOfLearnedSensor@isLearnedIn& (0+255),f,b
  9654                           
  9655                           ; BSR set to: 0
  9656  001CF8  2B6A               	incf	getIndexOfLearnedSensor@j& (0+255),f,b
  9657  001CFA  D7D8               	goto	l7384
  9658  001CFC                     u9390:
  9659                           
  9660                           ; BSR set to: 0
  9661                           ;io.c: 231: }
  9662                           ;io.c: 232: if (isLearnedIn)
  9663                           
  9664                           ; BSR set to: 0
  9665  001CFC  5168               	movf	getIndexOfLearnedSensor@isLearnedIn& (0+255),w,b
  9666  001CFE  B4D8               	btfsc	status,2,c
  9667  001D00  D004               	goto	l513
  9668                           
  9669                           ; BSR set to: 0
  9670                           ;io.c: 233: {
  9671                           ;io.c: 234: sensorIndex = i;
  9672  001D02  C069  F067         	movff	getIndexOfLearnedSensor@i,getIndexOfLearnedSensor@sensorIndex
  9673                           
  9674                           ; BSR set to: 0
  9675                           ;io.c: 235: return sensorIndex;
  9676  001D06  5167               	movf	getIndexOfLearnedSensor@sensorIndex& (0+255),w,b
  9677                           
  9678                           ; BSR set to: 0
  9679  001D08  0012               	return	
  9680  001D0A                     l513:
  9681                           
  9682                           ; BSR set to: 0
  9683                           ;io.c: 236: }
  9684                           ;io.c: 237: i++;
  9685                           
  9686                           ; BSR set to: 0
  9687  001D0A  2B69               	incf	getIndexOfLearnedSensor@i& (0+255),f,b
  9688  001D0C                     l509:
  9689                           
  9690                           ; BSR set to: 0
  9691  001D0C  0E10               	movlw	16
  9692  001D0E  0100               	movlb	0	; () banked
  9693  001D10  6169               	cpfslt	getIndexOfLearnedSensor@i& (0+255),b
  9694  001D12  D003               	goto	u9420
  9695                           
  9696                           ; BSR set to: 0
  9697  001D14  5168               	movf	getIndexOfLearnedSensor@isLearnedIn& (0+255),w,b
  9698  001D16  B4D8               	btfsc	status,2,c
  9699  001D18  D7C4               	goto	l510
  9700  001D1A                     u9420:
  9701                           
  9702                           ; BSR set to: 0
  9703                           ;io.c: 238: }
  9704                           ;io.c: 239: }
  9705                           ;io.c: 240: return 0xFF;
  9706                           
  9707                           ; BSR set to: 0
  9708                           
  9709                           ; BSR set to: 0
  9710                           
  9711                           ; BSR set to: 0
  9712  001D1A  0EFF               	movlw	255
  9713  001D1C  0012               	return	
  9714  001D1E                     __end_of_getIndexOfLearnedSensor:
  9715                           	opt stack 0
  9716                           tblptru	equ	0xFF8
  9717                           tblptrh	equ	0xFF7
  9718                           tblptrl	equ	0xFF6
  9719                           tablat	equ	0xFF5
  9720                           prodh	equ	0xFF4
  9721                           prodl	equ	0xFF3
  9722                           intcon	equ	0xFF2
  9723                           postinc0	equ	0xFEE
  9724                           wreg	equ	0xFE8
  9725                           indf1	equ	0xFE7
  9726                           postinc1	equ	0xFE6
  9727                           postdec1	equ	0xFE5
  9728                           plusw1	equ	0xFE3
  9729                           fsr1h	equ	0xFE2
  9730                           fsr1l	equ	0xFE1
  9731                           indf2	equ	0xFDF
  9732                           postinc2	equ	0xFDE
  9733                           plusw2	equ	0xFDB
  9734                           fsr2h	equ	0xFDA
  9735                           fsr2l	equ	0xFD9
  9736                           status	equ	0xFD8
  9737                           
  9738 ;; *************** function _ee_read *****************
  9739 ;; Defined at:
  9740 ;;		line 4 in file "ee.c"
  9741 ;; Parameters:    Size  Location     Type
  9742 ;;  page            1    wreg     unsigned char 
  9743 ;;  addr            1    0[BANK0 ] unsigned char 
  9744 ;; Auto vars:     Size  Location     Type
  9745 ;;  page            1    1[BANK0 ] unsigned char 
  9746 ;;  data            1    2[BANK0 ] unsigned char 
  9747 ;; Return value:  Size  Location     Type
  9748 ;;                  1    wreg      unsigned char 
  9749 ;; Registers used:
  9750 ;;		wreg, status,2
  9751 ;; Tracked objects:
  9752 ;;		On entry : 0/0
  9753 ;;		On exit  : 0/0
  9754 ;;		Unchanged: 0/0
  9755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9756 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9757 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9759 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9760 ;;Total ram usage:        3 bytes
  9761 ;; Hardware stack levels used:    1
  9762 ;; Hardware stack levels required when called:    3
  9763 ;; This function calls:
  9764 ;;		Nothing
  9765 ;; This function is called by:
  9766 ;;		_del_sensor
  9767 ;;		_load_ID
  9768 ;;		_parse_cmgr
  9769 ;;		_ee_read_ascii_to_value
  9770 ;; This function uses a non-reentrant model
  9771 ;;
  9772                           
  9773                           	psect	text39
  9774  0022EC                     __ptext39:
  9775                           	opt stack 0
  9776  0022EC                     _ee_read:
  9777                           	opt stack 26
  9778                           
  9779                           ; BSR set to: 0
  9780                           ;incstack = 0
  9781                           ;ee_read@page stored from wreg
  9782  0022EC  0100               	movlb	0	; () banked
  9783  0022EE  6F61               	movwf	ee_read@page& (0+255),b
  9784                           
  9785                           ;ee.c: 6: uint8_t data;
  9786                           ;ee.c: 7: GIE = 0;
  9787  0022F0  9EF2               	bcf	intcon,7,c	;volatile
  9788                           
  9789                           ;ee.c: 8: EEADRH = page;
  9790  0022F2  C061  FFAA         	movff	ee_read@page,4010	;volatile
  9791                           
  9792                           ;ee.c: 9: EEADR = addr;
  9793  0022F6  C060  FFA9         	movff	ee_read@addr,4009	;volatile
  9794                           
  9795                           ;ee.c: 10: CFGS = 0;
  9796  0022FA  9CA6               	bcf	4006,6,c	;volsfr
  9797                           
  9798                           ;ee.c: 11: EEPGD = 0;
  9799  0022FC  9EA6               	bcf	4006,7,c	;volsfr
  9800                           
  9801                           ;ee.c: 12: RD = 1;
  9802  0022FE  80A6               	bsf	4006,0,c	;volsfr
  9803                           
  9804                           ;ee.c: 13: data = EEDATA;
  9805  002300  CFA8 F062          	movff	4008,ee_read@data	;volatile
  9806                           
  9807                           ;ee.c: 14: GIE = 1;
  9808  002304  8EF2               	bsf	intcon,7,c	;volatile
  9809                           
  9810                           ;ee.c: 15: return(data);
  9811  002306  0100               	movlb	0	; () banked
  9812  002308  5162               	movf	ee_read@data& (0+255),w,b
  9813  00230A  0012               	return	
  9814  00230C                     __end_of_ee_read:
  9815                           	opt stack 0
  9816                           tblptru	equ	0xFF8
  9817                           tblptrh	equ	0xFF7
  9818                           tblptrl	equ	0xFF6
  9819                           tablat	equ	0xFF5
  9820                           prodh	equ	0xFF4
  9821                           prodl	equ	0xFF3
  9822                           intcon	equ	0xFF2
  9823                           postinc0	equ	0xFEE
  9824                           wreg	equ	0xFE8
  9825                           indf1	equ	0xFE7
  9826                           postinc1	equ	0xFE6
  9827                           postdec1	equ	0xFE5
  9828                           plusw1	equ	0xFE3
  9829                           fsr1h	equ	0xFE2
  9830                           fsr1l	equ	0xFE1
  9831                           indf2	equ	0xFDF
  9832                           postinc2	equ	0xFDE
  9833                           plusw2	equ	0xFDB
  9834                           fsr2h	equ	0xFDA
  9835                           fsr2l	equ	0xFD9
  9836                           status	equ	0xFD8
  9837                           
  9838 ;; *************** function _check_test *****************
  9839 ;; Defined at:
  9840 ;;		line 93 in file "io.c"
  9841 ;; Parameters:    Size  Location     Type
  9842 ;;		None
  9843 ;; Auto vars:     Size  Location     Type
  9844 ;;		None
  9845 ;; Return value:  Size  Location     Type
  9846 ;;                  1    wreg      void 
  9847 ;; Registers used:
  9848 ;;		wreg, status,2, status,0, cstack
  9849 ;; Tracked objects:
  9850 ;;		On entry : 0/0
  9851 ;;		On exit  : 0/0
  9852 ;;		Unchanged: 0/0
  9853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9855 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9856 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9857 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9858 ;;Total ram usage:        1 bytes
  9859 ;; Hardware stack levels used:    1
  9860 ;; Hardware stack levels required when called:    4
  9861 ;; This function calls:
  9862 ;;		_reload_tmr3_pt25s
  9863 ;; This function is called by:
  9864 ;;		_check_state
  9865 ;; This function uses a non-reentrant model
  9866 ;;
  9867                           
  9868                           	psect	text40
  9869  001FF2                     __ptext40:
  9870                           	opt stack 0
  9871  001FF2                     _check_test:
  9872                           	opt stack 25
  9873                           
  9874                           ;io.c: 96: if (PORTBbits.RB4 && !buttonStillPressed)
  9875                           
  9876                           ; BSR set to: 0
  9877                           ;incstack = 0
  9878  001FF2  A881               	btfss	3969,4,c	;volatile
  9879  001FF4  D014               	goto	l468
  9880  001FF6  5001               	movf	_buttonStillPressed,w,c
  9881  001FF8  A4D8               	btfss	status,2,c
  9882  001FFA  D011               	goto	l468
  9883                           
  9884                           ;io.c: 97: {
  9885                           ;io.c: 98: _delay((unsigned long)((30)*(8000000/4000.0)));
  9886  001FFC  0E4E               	movlw	78
  9887  001FFE  0100               	movlb	0	; () banked
  9888  002000  6F60               	movwf	??_check_test& (0+255),b
  9889  002002  0EEB               	movlw	235
  9890  002004                     u10517:
  9891  002004  2EE8               	decfsz	wreg,f,c
  9892  002006  D7FE               	bra	u10517
  9893  002008  2F60               	decfsz	??_check_test& (0+255),f,b
  9894  00200A  D7FC               	bra	u10517
  9895                           
  9896                           ;io.c: 99: if (PORTBbits.RB4)
  9897  00200C  A881               	btfss	3969,4,c	;volatile
  9898  00200E  D005               	goto	l469
  9899                           
  9900                           ;io.c: 100: {
  9901                           ;io.c: 101: buttonPressCount++;
  9902  002010  2A14               	incf	_buttonPressCount,f,c
  9903                           
  9904                           ;io.c: 102: reload_tmr3_pt25s();
  9905  002012  ECE1  F011         	call	_reload_tmr3_pt25s	;wreg free
  9906                           
  9907                           ;io.c: 103: tmr3_cnt = 0;
  9908  002016  0E00               	movlw	0
  9909  002018  6E11               	movwf	_tmr3_cnt,c
  9910  00201A                     l469:
  9911                           
  9912                           ;io.c: 104: }
  9913                           ;io.c: 105: buttonStillPressed = 1;
  9914  00201A  0E01               	movlw	1
  9915  00201C  D00B               	goto	L27
  9916  00201E                     l468:
  9917                           
  9918                           ;io.c: 107: else
  9919                           ;io.c: 108: {
  9920                           ;io.c: 109: _delay((unsigned long)((30)*(8000000/4000.0)));
  9921  00201E  0E4E               	movlw	78
  9922  002020  0100               	movlb	0	; () banked
  9923  002022  6F60               	movwf	??_check_test& (0+255),b
  9924  002024  0EEB               	movlw	235
  9925  002026                     u10527:
  9926  002026  2EE8               	decfsz	wreg,f,c
  9927  002028  D7FE               	bra	u10527
  9928  00202A  2F60               	decfsz	??_check_test& (0+255),f,b
  9929  00202C  D7FC               	bra	u10527
  9930                           
  9931                           ;io.c: 110: if (!PORTBbits.RB4)
  9932  00202E  B881               	btfsc	3969,4,c	;volatile
  9933  002030  D002               	goto	l471
  9934                           
  9935                           ;io.c: 111: {
  9936                           ;io.c: 112: buttonStillPressed = 0;
  9937  002032  0E00               	movlw	0
  9938  002034                     L27:
  9939  002034  6E01               	movwf	_buttonStillPressed,c
  9940  002036                     l471:
  9941                           
  9942                           ;io.c: 113: }
  9943                           ;io.c: 114: }
  9944                           ;io.c: 115: if (inButtonMenu && buttonPressCount == 0)
  9945  002036  5015               	movf	_inButtonMenu,w,c
  9946  002038  B4D8               	btfsc	status,2,c
  9947  00203A  D006               	goto	l472
  9948  00203C  5014               	movf	_buttonPressCount,w,c
  9949  00203E  A4D8               	btfss	status,2,c
  9950  002040  D003               	goto	l472
  9951                           
  9952                           ;io.c: 116: {
  9953                           ;io.c: 117: LATB3=0;
  9954  002042  968A               	bcf	3978,3,c	;volatile
  9955                           
  9956                           ;io.c: 118: LATC4=0;
  9957  002044  988B               	bcf	3979,4,c	;volatile
  9958                           
  9959                           ;io.c: 119: }
  9960  002046  D002               	goto	l473
  9961  002048                     l472:
  9962                           
  9963                           ;io.c: 120: else
  9964                           ;io.c: 121: {
  9965                           ;io.c: 122: LATB3=1;
  9966  002048  868A               	bsf	3978,3,c	;volatile
  9967                           
  9968                           ;io.c: 123: LATC4=1;
  9969  00204A  888B               	bsf	3979,4,c	;volatile
  9970  00204C                     l473:
  9971                           
  9972                           ;io.c: 124: }
  9973                           ;io.c: 125: bled_tmr0_tick = 0;
  9974  00204C  0E00               	movlw	0
  9975  00204E  6E12               	movwf	_bled_tmr0_tick,c
  9976                           
  9977                           ;io.c: 126: gled_tmr0_tick = 0;
  9978  002050  0E00               	movlw	0
  9979  002052  6E13               	movwf	_gled_tmr0_tick,c
  9980  002054  0012               	return		;funcret
  9981  002056                     __end_of_check_test:
  9982                           	opt stack 0
  9983                           tblptru	equ	0xFF8
  9984                           tblptrh	equ	0xFF7
  9985                           tblptrl	equ	0xFF6
  9986                           tablat	equ	0xFF5
  9987                           prodh	equ	0xFF4
  9988                           prodl	equ	0xFF3
  9989                           intcon	equ	0xFF2
  9990                           postinc0	equ	0xFEE
  9991                           wreg	equ	0xFE8
  9992                           indf1	equ	0xFE7
  9993                           postinc1	equ	0xFE6
  9994                           postdec1	equ	0xFE5
  9995                           plusw1	equ	0xFE3
  9996                           fsr1h	equ	0xFE2
  9997                           fsr1l	equ	0xFE1
  9998                           indf2	equ	0xFDF
  9999                           postinc2	equ	0xFDE
 10000                           plusw2	equ	0xFDB
 10001                           fsr2h	equ	0xFDA
 10002                           fsr2l	equ	0xFD9
 10003                           status	equ	0xFD8
 10004                           
 10005 ;; *************** function _reload_tmr3_pt25s *****************
 10006 ;; Defined at:
 10007 ;;		line 350 in file "io.c"
 10008 ;; Parameters:    Size  Location     Type
 10009 ;;		None
 10010 ;; Auto vars:     Size  Location     Type
 10011 ;;		None
 10012 ;; Return value:  Size  Location     Type
 10013 ;;                  1    wreg      void 
 10014 ;; Registers used:
 10015 ;;		wreg, status,2
 10016 ;; Tracked objects:
 10017 ;;		On entry : 0/0
 10018 ;;		On exit  : 0/0
 10019 ;;		Unchanged: 0/0
 10020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10024 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10025 ;;Total ram usage:        0 bytes
 10026 ;; Hardware stack levels used:    1
 10027 ;; Hardware stack levels required when called:    3
 10028 ;; This function calls:
 10029 ;;		Nothing
 10030 ;; This function is called by:
 10031 ;;		_check_test
 10032 ;; This function uses a non-reentrant model
 10033 ;;
 10034                           
 10035                           	psect	text41
 10036  0023C2                     __ptext41:
 10037                           	opt stack 0
 10038  0023C2                     _reload_tmr3_pt25s:
 10039                           	opt stack 25
 10040                           
 10041                           ;io.c: 352: T3CONbits.TMR3ON = 1;
 10042                           
 10043                           ;incstack = 0
 10044  0023C2  80B1               	bsf	4017,0,c	;volatile
 10045                           
 10046                           ;io.c: 353: PIE2bits.TMR3IE = 1;
 10047  0023C4  82A0               	bsf	4000,1,c	;volatile
 10048                           
 10049                           ;io.c: 354: PIR2bits.TMR3IF = 0;
 10050  0023C6  92A1               	bcf	4001,1,c	;volatile
 10051                           
 10052                           ;io.c: 355: TMR3H = 0x0B;
 10053  0023C8  0E0B               	movlw	11
 10054  0023CA  6EB3               	movwf	4019,c	;volatile
 10055                           
 10056                           ;io.c: 356: TMR3L = 0x45;
 10057  0023CC  0E45               	movlw	69
 10058  0023CE  6EB2               	movwf	4018,c	;volatile
 10059  0023D0  0012               	return		;funcret
 10060  0023D2                     __end_of_reload_tmr3_pt25s:
 10061                           	opt stack 0
 10062                           tblptru	equ	0xFF8
 10063                           tblptrh	equ	0xFF7
 10064                           tblptrl	equ	0xFF6
 10065                           tablat	equ	0xFF5
 10066                           prodh	equ	0xFF4
 10067                           prodl	equ	0xFF3
 10068                           intcon	equ	0xFF2
 10069                           postinc0	equ	0xFEE
 10070                           wreg	equ	0xFE8
 10071                           indf1	equ	0xFE7
 10072                           postinc1	equ	0xFE6
 10073                           postdec1	equ	0xFE5
 10074                           plusw1	equ	0xFE3
 10075                           fsr1h	equ	0xFE2
 10076                           fsr1l	equ	0xFE1
 10077                           indf2	equ	0xFDF
 10078                           postinc2	equ	0xFDE
 10079                           plusw2	equ	0xFDB
 10080                           fsr2h	equ	0xFDA
 10081                           fsr2l	equ	0xFD9
 10082                           status	equ	0xFD8
 10083                           
 10084 ;; *************** function _check_tamper *****************
 10085 ;; Defined at:
 10086 ;;		line 303 in file "io.c"
 10087 ;; Parameters:    Size  Location     Type
 10088 ;;		None
 10089 ;; Auto vars:     Size  Location     Type
 10090 ;;		None
 10091 ;; Return value:  Size  Location     Type
 10092 ;;                  1    wreg      void 
 10093 ;; Registers used:
 10094 ;;		None
 10095 ;; Tracked objects:
 10096 ;;		On entry : 0/0
 10097 ;;		On exit  : 0/0
 10098 ;;		Unchanged: 0/0
 10099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10103 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10104 ;;Total ram usage:        0 bytes
 10105 ;; Hardware stack levels used:    1
 10106 ;; Hardware stack levels required when called:    3
 10107 ;; This function calls:
 10108 ;;		Nothing
 10109 ;; This function is called by:
 10110 ;;		_check_state
 10111 ;; This function uses a non-reentrant model
 10112 ;;
 10113                           
 10114                           	psect	text42
 10115  002478                     __ptext42:
 10116                           	opt stack 0
 10117  002478                     _check_tamper:
 10118                           	opt stack 26
 10119                           
 10120                           ;incstack = 0
 10121  002478  0012               	return		;funcret
 10122  00247A                     __end_of_check_tamper:
 10123                           	opt stack 0
 10124                           tblptru	equ	0xFF8
 10125                           tblptrh	equ	0xFF7
 10126                           tblptrl	equ	0xFF6
 10127                           tablat	equ	0xFF5
 10128                           prodh	equ	0xFF4
 10129                           prodl	equ	0xFF3
 10130                           intcon	equ	0xFF2
 10131                           postinc0	equ	0xFEE
 10132                           wreg	equ	0xFE8
 10133                           indf1	equ	0xFE7
 10134                           postinc1	equ	0xFE6
 10135                           postdec1	equ	0xFE5
 10136                           plusw1	equ	0xFE3
 10137                           fsr1h	equ	0xFE2
 10138                           fsr1l	equ	0xFE1
 10139                           indf2	equ	0xFDF
 10140                           postinc2	equ	0xFDE
 10141                           plusw2	equ	0xFDB
 10142                           fsr2h	equ	0xFDA
 10143                           fsr2l	equ	0xFD9
 10144                           status	equ	0xFD8
 10145                           
 10146 ;; *************** function _check_super *****************
 10147 ;; Defined at:
 10148 ;;		line 298 in file "io.c"
 10149 ;; Parameters:    Size  Location     Type
 10150 ;;		None
 10151 ;; Auto vars:     Size  Location     Type
 10152 ;;		None
 10153 ;; Return value:  Size  Location     Type
 10154 ;;                  1    wreg      void 
 10155 ;; Registers used:
 10156 ;;		None
 10157 ;; Tracked objects:
 10158 ;;		On entry : 0/0
 10159 ;;		On exit  : 0/0
 10160 ;;		Unchanged: 0/0
 10161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10163 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10165 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10166 ;;Total ram usage:        0 bytes
 10167 ;; Hardware stack levels used:    1
 10168 ;; Hardware stack levels required when called:    3
 10169 ;; This function calls:
 10170 ;;		Nothing
 10171 ;; This function is called by:
 10172 ;;		_check_state
 10173 ;; This function uses a non-reentrant model
 10174 ;;
 10175                           
 10176                           	psect	text43
 10177  00247A                     __ptext43:
 10178                           	opt stack 0
 10179  00247A                     _check_super:
 10180                           	opt stack 26
 10181                           
 10182                           ;incstack = 0
 10183  00247A  0012               	return		;funcret
 10184  00247C                     __end_of_check_super:
 10185                           	opt stack 0
 10186                           tblptru	equ	0xFF8
 10187                           tblptrh	equ	0xFF7
 10188                           tblptrl	equ	0xFF6
 10189                           tablat	equ	0xFF5
 10190                           prodh	equ	0xFF4
 10191                           prodl	equ	0xFF3
 10192                           intcon	equ	0xFF2
 10193                           postinc0	equ	0xFEE
 10194                           wreg	equ	0xFE8
 10195                           indf1	equ	0xFE7
 10196                           postinc1	equ	0xFE6
 10197                           postdec1	equ	0xFE5
 10198                           plusw1	equ	0xFE3
 10199                           fsr1h	equ	0xFE2
 10200                           fsr1l	equ	0xFE1
 10201                           indf2	equ	0xFDF
 10202                           postinc2	equ	0xFDE
 10203                           plusw2	equ	0xFDB
 10204                           fsr2h	equ	0xFDA
 10205                           fsr2l	equ	0xFD9
 10206                           status	equ	0xFD8
 10207                           
 10208 ;; *************** function _check_alarm *****************
 10209 ;; Defined at:
 10210 ;;		line 308 in file "io.c"
 10211 ;; Parameters:    Size  Location     Type
 10212 ;;		None
 10213 ;; Auto vars:     Size  Location     Type
 10214 ;;		None
 10215 ;; Return value:  Size  Location     Type
 10216 ;;                  1    wreg      void 
 10217 ;; Registers used:
 10218 ;;		None
 10219 ;; Tracked objects:
 10220 ;;		On entry : 0/0
 10221 ;;		On exit  : 0/0
 10222 ;;		Unchanged: 0/0
 10223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10227 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10228 ;;Total ram usage:        0 bytes
 10229 ;; Hardware stack levels used:    1
 10230 ;; Hardware stack levels required when called:    3
 10231 ;; This function calls:
 10232 ;;		Nothing
 10233 ;; This function is called by:
 10234 ;;		_check_state
 10235 ;; This function uses a non-reentrant model
 10236 ;;
 10237                           
 10238                           	psect	text44
 10239  00247C                     __ptext44:
 10240                           	opt stack 0
 10241  00247C                     _check_alarm:
 10242                           	opt stack 26
 10243                           
 10244                           ;incstack = 0
 10245  00247C  0012               	return		;funcret
 10246  00247E                     __end_of_check_alarm:
 10247                           	opt stack 0
 10248                           tblptru	equ	0xFF8
 10249                           tblptrh	equ	0xFF7
 10250                           tblptrl	equ	0xFF6
 10251                           tablat	equ	0xFF5
 10252                           prodh	equ	0xFF4
 10253                           prodl	equ	0xFF3
 10254                           intcon	equ	0xFF2
 10255                           postinc0	equ	0xFEE
 10256                           wreg	equ	0xFE8
 10257                           indf1	equ	0xFE7
 10258                           postinc1	equ	0xFE6
 10259                           postdec1	equ	0xFE5
 10260                           plusw1	equ	0xFE3
 10261                           fsr1h	equ	0xFE2
 10262                           fsr1l	equ	0xFE1
 10263                           indf2	equ	0xFDF
 10264                           postinc2	equ	0xFDE
 10265                           plusw2	equ	0xFDB
 10266                           fsr2h	equ	0xFDA
 10267                           fsr2l	equ	0xFD9
 10268                           status	equ	0xFD8
 10269                           
 10270 ;; *************** function _add_sensor *****************
 10271 ;; Defined at:
 10272 ;;		line 152 in file "io.c"
 10273 ;; Parameters:    Size  Location     Type
 10274 ;;  sensorID        2    6[BANK0 ] PTR unsigned char 
 10275 ;;		 -> rx2_buf(5), 
 10276 ;; Auto vars:     Size  Location     Type
 10277 ;;  i               1   16[BANK0 ] unsigned char 
 10278 ;;  i               1   15[BANK0 ] unsigned char 
 10279 ;;  zone            1   13[BANK0 ] unsigned char 
 10280 ;;  isUnique        1   12[BANK0 ] unsigned char 
 10281 ;;  dev_type_exi    1   11[BANK0 ] unsigned char 
 10282 ;;  dev_type_new    1   10[BANK0 ] unsigned char 
 10283 ;; Return value:  Size  Location     Type
 10284 ;;                  1    wreg      void 
 10285 ;; Registers used:
 10286 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10287 ;; Tracked objects:
 10288 ;;		On entry : 0/0
 10289 ;;		On exit  : 0/0
 10290 ;;		Unchanged: 0/0
 10291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10292 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10293 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10294 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10295 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10296 ;;Total ram usage:       11 bytes
 10297 ;; Hardware stack levels used:    1
 10298 ;; Hardware stack levels required when called:    6
 10299 ;; This function calls:
 10300 ;;		_ee_write
 10301 ;;		_send_uart_ack
 10302 ;; This function is called by:
 10303 ;;		_check_state
 10304 ;; This function uses a non-reentrant model
 10305 ;;
 10306                           
 10307                           	psect	text45
 10308  000E5C                     __ptext45:
 10309                           	opt stack 0
 10310  000E5C                     _add_sensor:
 10311                           	opt stack 23
 10312                           
 10313                           ;io.c: 154: bool isUnique = 1;
 10314                           
 10315                           ;incstack = 0
 10316  000E5C  0E01               	movlw	1
 10317  000E5E  0100               	movlb	0	; () banked
 10318  000E60  6F6C               	movwf	add_sensor@isUnique& (0+255),b
 10319                           
 10320                           ;io.c: 155: uint8_t zone = 1, dev_type_new, dev_type_existing;
 10321  000E62  0E01               	movlw	1
 10322  000E64  6F6D               	movwf	add_sensor@zone& (0+255),b
 10323                           
 10324                           ;io.c: 156: if (receivedSensor && (idEndPtr < (4 - 1)))
 10325  000E66  51C7               	movf	_receivedSensor& (0+255),w,b
 10326  000E68  B4D8               	btfsc	status,2,c
 10327  000E6A  0012               	return	
 10328                           
 10329                           ; BSR set to: 0
 10330  000E6C  0E03               	movlw	3
 10331  000E6E  61CA               	cpfslt	_idEndPtr& (0+255),b
 10332  000E70  0012               	return	
 10333                           
 10334                           ; BSR set to: 0
 10335                           ;io.c: 157: {
 10336                           ;io.c: 158: receivedSensor = 0;
 10337  000E72  0E00               	movlw	0
 10338  000E74  6FC7               	movwf	_receivedSensor& (0+255),b
 10339                           
 10340                           ; BSR set to: 0
 10341                           ;io.c: 159: send_uart_ack();
 10342  000E76  EC86  F011         	call	_send_uart_ack	;wreg free
 10343                           
 10344                           ;io.c: 160: for (uint8_t i = 0; i < 16; i++)
 10345  000E7A  0E00               	movlw	0
 10346  000E7C  0100               	movlb	0	; () banked
 10347  000E7E  6F6F               	movwf	add_sensor@i& (0+255),b
 10348  000E80                     l7800:
 10349                           
 10350                           ; BSR set to: 0
 10351  000E80  0E0F               	movlw	15
 10352  000E82  656F               	cpfsgt	add_sensor@i& (0+255),b
 10353  000E84  D001               	goto	l478
 10354  000E86  D04A               	goto	u10230
 10355  000E88                     l478:
 10356                           
 10357                           ; BSR set to: 0
 10358                           ;io.c: 161: {
 10359                           ;io.c: 162: isUnique &= (bool)((bool)(rx2_buf[0] != ID[i][0]) || (bool)(rx2_buf[1] != ID
      +                          [i][1]) || (bool)(rx2_buf[2] != ID[i][2]));
 10360                           
 10361                           ; BSR set to: 0
 10362  000E88  0E01               	movlw	1
 10363  000E8A  6F6E               	movwf	_add_sensor$1158& (0+255),b
 10364                           
 10365                           ; BSR set to: 0
 10366  000E8C  516F               	movf	add_sensor@i& (0+255),w,b
 10367  000E8E  0D04               	mullw	4
 10368  000E90  0E00               	movlw	low _ID
 10369  000E92  24F3               	addwf	prodl,w,c
 10370  000E94  6ED9               	movwf	fsr2l,c
 10371  000E96  0E03               	movlw	high _ID
 10372  000E98  20F4               	addwfc	prodh,w,c
 10373  000E9A  6EDA               	movwf	fsr2h,c
 10374  000E9C  501F               	movf	_rx2_buf,w,c
 10375  000E9E  18DE               	xorwf	postinc2,w,c
 10376  000EA0  A4D8               	btfss	status,2,c
 10377  000EA2  D022               	goto	l481
 10378                           
 10379                           ; BSR set to: 0
 10380  000EA4  516F               	movf	add_sensor@i& (0+255),w,b
 10381  000EA6  0D04               	mullw	4
 10382  000EA8  0E01               	movlw	1
 10383  000EAA  26F3               	addwf	prodl,f,c
 10384  000EAC  0E00               	movlw	0
 10385  000EAE  22F4               	addwfc	prodh,f,c
 10386  000EB0  0E00               	movlw	low _ID
 10387  000EB2  24F3               	addwf	prodl,w,c
 10388  000EB4  6ED9               	movwf	fsr2l,c
 10389  000EB6  0E03               	movlw	high _ID
 10390  000EB8  20F4               	addwfc	prodh,w,c
 10391  000EBA  6EDA               	movwf	fsr2h,c
 10392  000EBC  50DE               	movf	postinc2,w,c
 10393  000EBE  1820               	xorwf	_rx2_buf+1,w,c
 10394  000EC0  A4D8               	btfss	status,2,c
 10395  000EC2  D012               	goto	l481
 10396                           
 10397                           ; BSR set to: 0
 10398  000EC4  516F               	movf	add_sensor@i& (0+255),w,b
 10399  000EC6  0D04               	mullw	4
 10400  000EC8  0E02               	movlw	2
 10401  000ECA  26F3               	addwf	prodl,f,c
 10402  000ECC  0E00               	movlw	0
 10403  000ECE  22F4               	addwfc	prodh,f,c
 10404  000ED0  0E00               	movlw	low _ID
 10405  000ED2  24F3               	addwf	prodl,w,c
 10406  000ED4  6ED9               	movwf	fsr2l,c
 10407  000ED6  0E03               	movlw	high _ID
 10408  000ED8  20F4               	addwfc	prodh,w,c
 10409  000EDA  6EDA               	movwf	fsr2h,c
 10410  000EDC  50DE               	movf	postinc2,w,c
 10411  000EDE  1821               	xorwf	_rx2_buf+2,w,c
 10412  000EE0  A4D8               	btfss	status,2,c
 10413  000EE2  D002               	goto	l481
 10414                           
 10415                           ; BSR set to: 0
 10416  000EE4  0E00               	movlw	0
 10417  000EE6  6F6E               	movwf	_add_sensor$1158& (0+255),b
 10418  000EE8                     l481:
 10419                           
 10420                           ; BSR set to: 0
 10421                           
 10422                           ; BSR set to: 0
 10423  000EE8  516E               	movf	_add_sensor$1158& (0+255),w,b
 10424  000EEA  176C               	andwf	add_sensor@isUnique& (0+255),f,b
 10425                           
 10426                           ; BSR set to: 0
 10427                           ;io.c: 164: dev_type_new = (uint8_t)((rx2_buf[0] >> 4) & 0x0F);
 10428  000EEC  381F               	swapf	_rx2_buf,w,c
 10429  000EEE  0B0F               	andlw	15
 10430  000EF0  0B0F               	andlw	15
 10431  000EF2  6F6A               	movwf	add_sensor@dev_type_new& (0+255),b
 10432                           
 10433                           ; BSR set to: 0
 10434                           ;io.c: 165: dev_type_existing = (uint8_t)((ID[i][0] >> 4) & 0x0F);
 10435  000EF4  516F               	movf	add_sensor@i& (0+255),w,b
 10436  000EF6  0D04               	mullw	4
 10437  000EF8  0E00               	movlw	low _ID
 10438  000EFA  24F3               	addwf	prodl,w,c
 10439  000EFC  6ED9               	movwf	fsr2l,c
 10440  000EFE  0E03               	movlw	high _ID
 10441  000F00  20F4               	addwfc	prodh,w,c
 10442  000F02  6EDA               	movwf	fsr2h,c
 10443  000F04  50DF               	movf	indf2,w,c
 10444  000F06  6F68               	movwf	??_add_sensor& (0+255),b
 10445  000F08  3968               	swapf	??_add_sensor& (0+255),w,b
 10446  000F0A  0B0F               	andlw	15
 10447  000F0C  0B0F               	andlw	15
 10448  000F0E  6F6B               	movwf	add_sensor@dev_type_existing& (0+255),b
 10449                           
 10450                           ; BSR set to: 0
 10451                           ;io.c: 166: if (dev_type_existing == dev_type_new)
 10452  000F10  516A               	movf	add_sensor@dev_type_new& (0+255),w,b
 10453  000F12  196B               	xorwf	add_sensor@dev_type_existing& (0+255),w,b
 10454  000F14  B4D8               	btfsc	status,2,c
 10455                           
 10456                           ; BSR set to: 0
 10457                           ;io.c: 167: zone++;
 10458  000F16  2B6D               	incf	add_sensor@zone& (0+255),f,b
 10459                           
 10460                           ; BSR set to: 0
 10461  000F18  2B6F               	incf	add_sensor@i& (0+255),f,b
 10462  000F1A  D7B2               	goto	l7800
 10463  000F1C                     u10230:
 10464                           
 10465                           ; BSR set to: 0
 10466                           ;io.c: 168: }
 10467                           ;io.c: 169: if (isUnique)
 10468                           
 10469                           ; BSR set to: 0
 10470  000F1C  516C               	movf	add_sensor@isUnique& (0+255),w,b
 10471  000F1E  B4D8               	btfsc	status,2,c
 10472  000F20  0012               	return	
 10473                           
 10474                           ; BSR set to: 0
 10475                           ;io.c: 170: {
 10476                           ;io.c: 171: for (uint8_t i = 0; i < 4 - 1; i++)
 10477  000F22  0E00               	movlw	0
 10478  000F24  6F70               	movwf	add_sensor@i_1159& (0+255),b
 10479  000F26                     l7830:
 10480                           
 10481                           ; BSR set to: 0
 10482  000F26  0E02               	movlw	2
 10483  000F28  6570               	cpfsgt	add_sensor@i_1159& (0+255),b
 10484  000F2A  D001               	goto	l484
 10485  000F2C  D03C               	goto	u10260
 10486  000F2E                     l484:
 10487                           
 10488                           ; BSR set to: 0
 10489                           ;io.c: 172: {
 10490                           ;io.c: 173: ID[idEndPtr][i] = rx2_buf[i];
 10491                           
 10492                           ; BSR set to: 0
 10493  000F2E  5170               	movf	add_sensor@i_1159& (0+255),w,b
 10494  000F30  0D01               	mullw	1
 10495  000F32  0E1F               	movlw	low _rx2_buf
 10496  000F34  24F3               	addwf	prodl,w,c
 10497  000F36  6ED9               	movwf	fsr2l,c
 10498  000F38  0E00               	movlw	high _rx2_buf
 10499  000F3A  20F4               	addwfc	prodh,w,c
 10500  000F3C  6EDA               	movwf	fsr2h,c
 10501  000F3E  51CA               	movf	_idEndPtr& (0+255),w,b
 10502  000F40  0D04               	mullw	4
 10503  000F42  0E00               	movlw	low _ID
 10504  000F44  6F68               	movwf	??_add_sensor& (0+255),b
 10505  000F46  0E03               	movlw	high _ID
 10506  000F48  6F69               	movwf	(??_add_sensor+1)& (0+255),b
 10507  000F4A  50F3               	movf	prodl,w,c
 10508  000F4C  2768               	addwf	??_add_sensor& (0+255),f,b
 10509  000F4E  50F4               	movf	prodh,w,c
 10510  000F50  2369               	addwfc	(??_add_sensor+1)& (0+255),f,b
 10511  000F52  5170               	movf	add_sensor@i_1159& (0+255),w,b
 10512  000F54  0D01               	mullw	1
 10513  000F56  50F3               	movf	prodl,w,c
 10514  000F58  2568               	addwf	??_add_sensor& (0+255),w,b
 10515  000F5A  6EE1               	movwf	fsr1l,c
 10516  000F5C  50F4               	movf	prodh,w,c
 10517  000F5E  2169               	addwfc	(??_add_sensor+1)& (0+255),w,b
 10518  000F60  6EE2               	movwf	fsr1h,c
 10519  000F62  CFDF FFE7          	movff	indf2,indf1
 10520                           
 10521                           ; BSR set to: 0
 10522                           ;io.c: 174: ee_write(0x01, (uint8_t)(0x80 + (4 * idEndPtr) + i), ID[idEndPtr][i]);
 10523  000F66  51CA               	movf	_idEndPtr& (0+255),w,b
 10524  000F68  0D04               	mullw	4
 10525  000F6A  50F3               	movf	prodl,w,c
 10526  000F6C  2570               	addwf	add_sensor@i_1159& (0+255),w,b
 10527  000F6E  0F80               	addlw	128
 10528  000F70  6F63               	movwf	ee_write@addr& (0+255),b
 10529  000F72  51CA               	movf	_idEndPtr& (0+255),w,b
 10530  000F74  0D04               	mullw	4
 10531  000F76  0E00               	movlw	low _ID
 10532  000F78  6F68               	movwf	??_add_sensor& (0+255),b
 10533  000F7A  0E03               	movlw	high _ID
 10534  000F7C  6F69               	movwf	(??_add_sensor+1)& (0+255),b
 10535  000F7E  50F3               	movf	prodl,w,c
 10536  000F80  2768               	addwf	??_add_sensor& (0+255),f,b
 10537  000F82  50F4               	movf	prodh,w,c
 10538  000F84  2369               	addwfc	(??_add_sensor+1)& (0+255),f,b
 10539  000F86  5170               	movf	add_sensor@i_1159& (0+255),w,b
 10540  000F88  0D01               	mullw	1
 10541  000F8A  50F3               	movf	prodl,w,c
 10542  000F8C  2568               	addwf	??_add_sensor& (0+255),w,b
 10543  000F8E  6ED9               	movwf	fsr2l,c
 10544  000F90  50F4               	movf	prodh,w,c
 10545  000F92  2169               	addwfc	(??_add_sensor+1)& (0+255),w,b
 10546  000F94  6EDA               	movwf	fsr2h,c
 10547  000F96  50DF               	movf	indf2,w,c
 10548  000F98  6F64               	movwf	ee_write@data& (0+255),b
 10549  000F9A  0E01               	movlw	1
 10550  000F9C  ECDB  F010         	call	_ee_write
 10551  000FA0  0100               	movlb	0	; () banked
 10552  000FA2  2B70               	incf	add_sensor@i_1159& (0+255),f,b
 10553  000FA4  D7C0               	goto	l7830
 10554  000FA6                     u10260:
 10555                           
 10556                           ; BSR set to: 0
 10557                           ;io.c: 175: }
 10558                           ;io.c: 176: ID[idEndPtr][3] = zone;
 10559                           
 10560                           ; BSR set to: 0
 10561  000FA6  51CA               	movf	_idEndPtr& (0+255),w,b
 10562  000FA8  0D04               	mullw	4
 10563  000FAA  0E03               	movlw	3
 10564  000FAC  26F3               	addwf	prodl,f,c
 10565  000FAE  0E00               	movlw	0
 10566  000FB0  22F4               	addwfc	prodh,f,c
 10567  000FB2  0E00               	movlw	low _ID
 10568  000FB4  24F3               	addwf	prodl,w,c
 10569  000FB6  6ED9               	movwf	fsr2l,c
 10570  000FB8  0E03               	movlw	high _ID
 10571  000FBA  20F4               	addwfc	prodh,w,c
 10572  000FBC  6EDA               	movwf	fsr2h,c
 10573  000FBE  C06D  FFDF         	movff	add_sensor@zone,indf2
 10574                           
 10575                           ; BSR set to: 0
 10576                           ;io.c: 177: ee_write(0x01, (uint8_t)(0x80 + (4 * idEndPtr) + 3), ID[idEndPtr][3]);
 10577  000FC2  51CA               	movf	_idEndPtr& (0+255),w,b
 10578  000FC4  0D04               	mullw	4
 10579  000FC6  50F3               	movf	prodl,w,c
 10580  000FC8  0F83               	addlw	131
 10581  000FCA  6F63               	movwf	ee_write@addr& (0+255),b
 10582  000FCC  51CA               	movf	_idEndPtr& (0+255),w,b
 10583  000FCE  0D04               	mullw	4
 10584  000FD0  0E03               	movlw	3
 10585  000FD2  26F3               	addwf	prodl,f,c
 10586  000FD4  0E00               	movlw	0
 10587  000FD6  22F4               	addwfc	prodh,f,c
 10588  000FD8  0E00               	movlw	low _ID
 10589  000FDA  24F3               	addwf	prodl,w,c
 10590  000FDC  6ED9               	movwf	fsr2l,c
 10591  000FDE  0E03               	movlw	high _ID
 10592  000FE0  20F4               	addwfc	prodh,w,c
 10593  000FE2  6EDA               	movwf	fsr2h,c
 10594  000FE4  50DF               	movf	indf2,w,c
 10595  000FE6  6F64               	movwf	ee_write@data& (0+255),b
 10596  000FE8  0E01               	movlw	1
 10597  000FEA  ECDB  F010         	call	_ee_write
 10598                           
 10599                           ;io.c: 178: idEndPtr++;
 10600  000FEE  0100               	movlb	0	; () banked
 10601  000FF0  2BCA               	incf	_idEndPtr& (0+255),f,b
 10602                           
 10603                           ; BSR set to: 0
 10604  000FF2  0012               	return	
 10605  000FF4                     __end_of_add_sensor:
 10606                           	opt stack 0
 10607                           tblptru	equ	0xFF8
 10608                           tblptrh	equ	0xFF7
 10609                           tblptrl	equ	0xFF6
 10610                           tablat	equ	0xFF5
 10611                           prodh	equ	0xFF4
 10612                           prodl	equ	0xFF3
 10613                           intcon	equ	0xFF2
 10614                           postinc0	equ	0xFEE
 10615                           wreg	equ	0xFE8
 10616                           indf1	equ	0xFE7
 10617                           postinc1	equ	0xFE6
 10618                           postdec1	equ	0xFE5
 10619                           plusw1	equ	0xFE3
 10620                           fsr1h	equ	0xFE2
 10621                           fsr1l	equ	0xFE1
 10622                           indf2	equ	0xFDF
 10623                           postinc2	equ	0xFDE
 10624                           plusw2	equ	0xFDB
 10625                           fsr2h	equ	0xFDA
 10626                           fsr2l	equ	0xFD9
 10627                           status	equ	0xFD8
 10628                           
 10629 ;; *************** function _send_uart_ack *****************
 10630 ;; Defined at:
 10631 ;;		line 300 in file "uart.c"
 10632 ;; Parameters:    Size  Location     Type
 10633 ;;		None
 10634 ;; Auto vars:     Size  Location     Type
 10635 ;;		None
 10636 ;; Return value:  Size  Location     Type
 10637 ;;                  1    wreg      void 
 10638 ;; Registers used:
 10639 ;;		wreg, status,2, cstack
 10640 ;; Tracked objects:
 10641 ;;		On entry : 0/0
 10642 ;;		On exit  : 0/0
 10643 ;;		Unchanged: 0/0
 10644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10648 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10649 ;;Total ram usage:        0 bytes
 10650 ;; Hardware stack levels used:    1
 10651 ;; Hardware stack levels required when called:    5
 10652 ;; This function calls:
 10653 ;;		_init_uart
 10654 ;;		_rf_uart_send
 10655 ;; This function is called by:
 10656 ;;		_add_sensor
 10657 ;;		_getIndexOfLearnedSensor
 10658 ;; This function uses a non-reentrant model
 10659 ;;
 10660                           
 10661                           	psect	text46
 10662  00230C                     __ptext46:
 10663                           	opt stack 0
 10664  00230C                     _send_uart_ack:
 10665                           	opt stack 22
 10666                           
 10667                           ;uart.c: 302: init_uart();
 10668                           
 10669                           ; BSR set to: 0
 10670                           ;incstack = 0
 10671  00230C  EC2E  F011         	call	_init_uart	;wreg free
 10672                           
 10673                           ;uart.c: 304: rf_uart_send('$');
 10674  002310  0E24               	movlw	36
 10675  002312  ECF7  F011         	call	_rf_uart_send
 10676                           
 10677                           ;uart.c: 305: rf_uart_send('A');
 10678  002316  0E41               	movlw	65
 10679  002318  ECF7  F011         	call	_rf_uart_send
 10680                           
 10681                           ;uart.c: 306: rf_uart_send('\r');
 10682  00231C  0E0D               	movlw	13
 10683  00231E  ECF7  F011         	call	_rf_uart_send
 10684                           
 10685                           ;uart.c: 307: rf_uart_send('\n');
 10686  002322  0E0A               	movlw	10
 10687  002324  ECF7  F011         	call	_rf_uart_send
 10688  002328  0012               	return		;funcret
 10689  00232A                     __end_of_send_uart_ack:
 10690                           	opt stack 0
 10691                           tblptru	equ	0xFF8
 10692                           tblptrh	equ	0xFF7
 10693                           tblptrl	equ	0xFF6
 10694                           tablat	equ	0xFF5
 10695                           prodh	equ	0xFF4
 10696                           prodl	equ	0xFF3
 10697                           intcon	equ	0xFF2
 10698                           postinc0	equ	0xFEE
 10699                           wreg	equ	0xFE8
 10700                           indf1	equ	0xFE7
 10701                           postinc1	equ	0xFE6
 10702                           postdec1	equ	0xFE5
 10703                           plusw1	equ	0xFE3
 10704                           fsr1h	equ	0xFE2
 10705                           fsr1l	equ	0xFE1
 10706                           indf2	equ	0xFDF
 10707                           postinc2	equ	0xFDE
 10708                           plusw2	equ	0xFDB
 10709                           fsr2h	equ	0xFDA
 10710                           fsr2l	equ	0xFD9
 10711                           status	equ	0xFD8
 10712                           
 10713 ;; *************** function _rf_uart_send *****************
 10714 ;; Defined at:
 10715 ;;		line 293 in file "uart.c"
 10716 ;; Parameters:    Size  Location     Type
 10717 ;;  data            1    wreg     unsigned char 
 10718 ;; Auto vars:     Size  Location     Type
 10719 ;;  data            1    0[BANK0 ] unsigned char 
 10720 ;; Return value:  Size  Location     Type
 10721 ;;                  1    wreg      void 
 10722 ;; Registers used:
 10723 ;;		wreg
 10724 ;; Tracked objects:
 10725 ;;		On entry : 0/0
 10726 ;;		On exit  : 0/0
 10727 ;;		Unchanged: 0/0
 10728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10730 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10732 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10733 ;;Total ram usage:        1 bytes
 10734 ;; Hardware stack levels used:    1
 10735 ;; Hardware stack levels required when called:    3
 10736 ;; This function calls:
 10737 ;;		Nothing
 10738 ;; This function is called by:
 10739 ;;		_send_uart_ack
 10740 ;; This function uses a non-reentrant model
 10741 ;;
 10742                           
 10743                           	psect	text47
 10744  0023EE                     __ptext47:
 10745                           	opt stack 0
 10746  0023EE                     _rf_uart_send:
 10747                           	opt stack 23
 10748                           
 10749                           ;incstack = 0
 10750                           ;rf_uart_send@data stored from wreg
 10751  0023EE  0100               	movlb	0	; () banked
 10752  0023F0  6F60               	movwf	rf_uart_send@data& (0+255),b
 10753  0023F2                     
 10754                           ;uart.c: 295: while (!TRMT2);
 10755  0023F2  A272               	btfss	3954,1,c	;volatile
 10756  0023F4  D7FE               	goto	l7154
 10757                           
 10758                           ;uart.c: 296: TX2REG = data;
 10759  0023F6  C060  FF73         	movff	rf_uart_send@data,3955	;volatile
 10760  0023FA  0012               	return		;funcret
 10761  0023FC                     __end_of_rf_uart_send:
 10762                           	opt stack 0
 10763                           tblptru	equ	0xFF8
 10764                           tblptrh	equ	0xFF7
 10765                           tblptrl	equ	0xFF6
 10766                           tablat	equ	0xFF5
 10767                           prodh	equ	0xFF4
 10768                           prodl	equ	0xFF3
 10769                           intcon	equ	0xFF2
 10770                           postinc0	equ	0xFEE
 10771                           wreg	equ	0xFE8
 10772                           indf1	equ	0xFE7
 10773                           postinc1	equ	0xFE6
 10774                           postdec1	equ	0xFE5
 10775                           plusw1	equ	0xFE3
 10776                           fsr1h	equ	0xFE2
 10777                           fsr1l	equ	0xFE1
 10778                           indf2	equ	0xFDF
 10779                           postinc2	equ	0xFDE
 10780                           plusw2	equ	0xFDB
 10781                           fsr2h	equ	0xFDA
 10782                           fsr2l	equ	0xFD9
 10783                           status	equ	0xFD8
 10784                           
 10785 ;; *************** function _init_uart *****************
 10786 ;; Defined at:
 10787 ;;		line 8 in file "uart.c"
 10788 ;; Parameters:    Size  Location     Type
 10789 ;;		None
 10790 ;; Auto vars:     Size  Location     Type
 10791 ;;		None
 10792 ;; Return value:  Size  Location     Type
 10793 ;;                  1    wreg      void 
 10794 ;; Registers used:
 10795 ;;		wreg, status,2, cstack
 10796 ;; Tracked objects:
 10797 ;;		On entry : 0/0
 10798 ;;		On exit  : 0/0
 10799 ;;		Unchanged: 0/0
 10800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10802 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10804 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10805 ;;Total ram usage:        0 bytes
 10806 ;; Hardware stack levels used:    1
 10807 ;; Hardware stack levels required when called:    4
 10808 ;; This function calls:
 10809 ;;		_init_md_uart
 10810 ;; This function is called by:
 10811 ;;		_init_pic
 10812 ;;		_send_uart_ack
 10813 ;; This function uses a non-reentrant model
 10814 ;;
 10815                           
 10816                           	psect	text48
 10817  00225C                     __ptext48:
 10818                           	opt stack 0
 10819  00225C                     _init_uart:
 10820                           	opt stack 25
 10821                           
 10822                           ;uart.c: 10: TRISBbits.TRISB7 = 1;
 10823                           
 10824                           ;incstack = 0
 10825  00225C  8E93               	bsf	3987,7,c	;volatile
 10826                           
 10827                           ;uart.c: 11: TRISBbits.TRISB6 = 0;
 10828  00225E  9C93               	bcf	3987,6,c	;volatile
 10829                           
 10830                           ;uart.c: 14: TRISBbits.TRISB5 = 1;
 10831  002260  8A93               	bsf	3987,5,c	;volatile
 10832                           
 10833                           ;uart.c: 22: TX2STA = 0x26;
 10834  002262  0E26               	movlw	38
 10835  002264  6E72               	movwf	3954,c	;volatile
 10836                           
 10837                           ;uart.c: 23: RC2STA = 0x90;
 10838  002266  0E90               	movlw	144
 10839  002268  6E71               	movwf	3953,c	;volatile
 10840                           
 10841                           ;uart.c: 24: BAUDCON2 = 0xc8;
 10842  00226A  0EC8               	movlw	200
 10843  00226C  6E70               	movwf	3952,c	;volatile
 10844                           
 10845                           ;uart.c: 25: SPBRG2 = 207;
 10846  00226E  0ECF               	movlw	207
 10847  002270  6E75               	movwf	3957,c	;volatile
 10848                           
 10849                           ;uart.c: 26: SPBRGH2 = 0;
 10850  002272  0E00               	movlw	0
 10851  002274  6E76               	movwf	3958,c	;volatile
 10852                           
 10853                           ;uart.c: 27: WPUB5 = 1;
 10854  002276  8A61               	bsf	3937,5,c	;volatile
 10855                           
 10856                           ;uart.c: 28: RC2IE = 1;
 10857  002278  8AA3               	bsf	4003,5,c	;volatile
 10858                           
 10859                           ;uart.c: 30: init_md_uart();
 10860  00227A  EC40  F011         	call	_init_md_uart	;wreg free
 10861  00227E  0012               	return		;funcret
 10862  002280                     __end_of_init_uart:
 10863                           	opt stack 0
 10864                           tblptru	equ	0xFF8
 10865                           tblptrh	equ	0xFF7
 10866                           tblptrl	equ	0xFF6
 10867                           tablat	equ	0xFF5
 10868                           prodh	equ	0xFF4
 10869                           prodl	equ	0xFF3
 10870                           intcon	equ	0xFF2
 10871                           postinc0	equ	0xFEE
 10872                           wreg	equ	0xFE8
 10873                           indf1	equ	0xFE7
 10874                           postinc1	equ	0xFE6
 10875                           postdec1	equ	0xFE5
 10876                           plusw1	equ	0xFE3
 10877                           fsr1h	equ	0xFE2
 10878                           fsr1l	equ	0xFE1
 10879                           indf2	equ	0xFDF
 10880                           postinc2	equ	0xFDE
 10881                           plusw2	equ	0xFDB
 10882                           fsr2h	equ	0xFDA
 10883                           fsr2l	equ	0xFD9
 10884                           status	equ	0xFD8
 10885                           
 10886 ;; *************** function _init_md_uart *****************
 10887 ;; Defined at:
 10888 ;;		line 34 in file "uart.c"
 10889 ;; Parameters:    Size  Location     Type
 10890 ;;		None
 10891 ;; Auto vars:     Size  Location     Type
 10892 ;;		None
 10893 ;; Return value:  Size  Location     Type
 10894 ;;                  1    wreg      void 
 10895 ;; Registers used:
 10896 ;;		wreg, status,2
 10897 ;; Tracked objects:
 10898 ;;		On entry : 0/0
 10899 ;;		On exit  : 0/0
 10900 ;;		Unchanged: 0/0
 10901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10903 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10905 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10906 ;;Total ram usage:        0 bytes
 10907 ;; Hardware stack levels used:    1
 10908 ;; Hardware stack levels required when called:    3
 10909 ;; This function calls:
 10910 ;;		Nothing
 10911 ;; This function is called by:
 10912 ;;		_start_sms_ok
 10913 ;;		_read_sms
 10914 ;;		_send_sms_ok
 10915 ;;		_startup_ok
 10916 ;;		_init_uart
 10917 ;; This function uses a non-reentrant model
 10918 ;;
 10919                           
 10920                           	psect	text49
 10921  002280                     __ptext49:
 10922                           	opt stack 0
 10923  002280                     _init_md_uart:
 10924                           	opt stack 25
 10925                           
 10926                           ;uart.c: 36: BAUDCON1bits.BRG16 = 1;
 10927                           
 10928                           ;incstack = 0
 10929  002280  86B8               	bsf	4024,3,c	;volatile
 10930                           
 10931                           ;uart.c: 37: BAUDCON1bits.RCIDL = 1;
 10932  002282  8CB8               	bsf	4024,6,c	;volatile
 10933                           
 10934                           ;uart.c: 38: BAUDCONbits.CKTXP = 0;
 10935  002284  98B8               	bcf	4024,4,c	;volatile
 10936                           
 10937                           ;uart.c: 39: BAUDCONbits.WUE = 0;
 10938  002286  92B8               	bcf	4024,1,c	;volatile
 10939                           
 10940                           ;uart.c: 40: BAUDCONbits.ABDEN = 0;
 10941  002288  90B8               	bcf	4024,0,c	;volatile
 10942                           
 10943                           ;uart.c: 41: TXSTA1bits.BRGH = 1;
 10944  00228A  84AC               	bsf	4012,2,c	;volatile
 10945                           
 10946                           ;uart.c: 42: TXSTA1bits.SYNC = 0;
 10947  00228C  98AC               	bcf	4012,4,c	;volatile
 10948                           
 10949                           ;uart.c: 43: SPBRGH1 = 0;
 10950  00228E  0E00               	movlw	0
 10951  002290  6EB0               	movwf	4016,c	;volatile
 10952                           
 10953                           ;uart.c: 44: SPBRG1 = 16;
 10954  002292  0E10               	movlw	16
 10955  002294  6EAF               	movwf	4015,c	;volatile
 10956                           
 10957                           ;uart.c: 46: RC1STAbits.SPEN = 1;
 10958  002296  8EAB               	bsf	4011,7,c	;volatile
 10959                           
 10960                           ;uart.c: 47: TRISCbits.TRISC7 = 1;
 10961  002298  8E94               	bsf	3988,7,c	;volatile
 10962                           
 10963                           ;uart.c: 48: TRISCbits.TRISC6 = 0;
 10964  00229A  9C94               	bcf	3988,6,c	;volatile
 10965                           
 10966                           ;uart.c: 51: RCSTA1bits.CREN = 1;
 10967  00229C  88AB               	bsf	4011,4,c	;volatile
 10968                           
 10969                           ;uart.c: 52: TXSTA1bits.TXEN = 1;
 10970  00229E  8AAC               	bsf	4012,5,c	;volatile
 10971                           
 10972                           ;uart.c: 54: PIR1bits.RC1IF = 0;
 10973  0022A0  9A9E               	bcf	3998,5,c	;volatile
 10974  0022A2  0012               	return		;funcret
 10975  0022A4                     __end_of_init_md_uart:
 10976                           	opt stack 0
 10977                           tblptru	equ	0xFF8
 10978                           tblptrh	equ	0xFF7
 10979                           tblptrl	equ	0xFF6
 10980                           tablat	equ	0xFF5
 10981                           prodh	equ	0xFF4
 10982                           prodl	equ	0xFF3
 10983                           intcon	equ	0xFF2
 10984                           postinc0	equ	0xFEE
 10985                           wreg	equ	0xFE8
 10986                           indf1	equ	0xFE7
 10987                           postinc1	equ	0xFE6
 10988                           postdec1	equ	0xFE5
 10989                           plusw1	equ	0xFE3
 10990                           fsr1h	equ	0xFE2
 10991                           fsr1l	equ	0xFE1
 10992                           indf2	equ	0xFDF
 10993                           postinc2	equ	0xFDE
 10994                           plusw2	equ	0xFDB
 10995                           fsr2h	equ	0xFDA
 10996                           fsr2l	equ	0xFD9
 10997                           status	equ	0xFD8
 10998                           
 10999 ;; *************** function _ee_write *****************
 11000 ;; Defined at:
 11001 ;;		line 19 in file "ee.c"
 11002 ;; Parameters:    Size  Location     Type
 11003 ;;  page            1    wreg     unsigned char 
 11004 ;;  addr            1    3[BANK0 ] unsigned char 
 11005 ;;  data            1    4[BANK0 ] unsigned char 
 11006 ;; Auto vars:     Size  Location     Type
 11007 ;;  page            1    5[BANK0 ] unsigned char 
 11008 ;; Return value:  Size  Location     Type
 11009 ;;                  1    wreg      void 
 11010 ;; Registers used:
 11011 ;;		wreg, status,2
 11012 ;; Tracked objects:
 11013 ;;		On entry : 0/0
 11014 ;;		On exit  : 0/0
 11015 ;;		Unchanged: 0/0
 11016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11017 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11018 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11020 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11021 ;;Total ram usage:        3 bytes
 11022 ;; Hardware stack levels used:    1
 11023 ;; Hardware stack levels required when called:    3
 11024 ;; This function calls:
 11025 ;;		Nothing
 11026 ;; This function is called by:
 11027 ;;		_add_sensor
 11028 ;;		_del_sensor
 11029 ;;		_program_field
 11030 ;; This function uses a non-reentrant model
 11031 ;;
 11032                           
 11033                           	psect	text50
 11034  0021B6                     __ptext50:
 11035                           	opt stack 0
 11036  0021B6                     _ee_write:
 11037                           	opt stack 22
 11038                           
 11039                           ;incstack = 0
 11040                           ;ee_write@page stored from wreg
 11041  0021B6  0100               	movlb	0	; () banked
 11042  0021B8  6F65               	movwf	ee_write@page& (0+255),b
 11043                           
 11044                           ;ee.c: 21: GIE = 0;
 11045  0021BA  9EF2               	bcf	intcon,7,c	;volatile
 11046                           
 11047                           ;ee.c: 22: EEADRH = page;
 11048  0021BC  C065  FFAA         	movff	ee_write@page,4010	;volatile
 11049                           
 11050                           ;ee.c: 23: EEADR = addr;
 11051  0021C0  C063  FFA9         	movff	ee_write@addr,4009	;volatile
 11052                           
 11053                           ;ee.c: 24: EEDATA = data;
 11054  0021C4  C064  FFA8         	movff	ee_write@data,4008	;volatile
 11055                           
 11056                           ;ee.c: 25: CFGS = 0;
 11057  0021C8  9CA6               	bcf	4006,6,c	;volsfr
 11058                           
 11059                           ;ee.c: 26: EEPGD = 0;
 11060  0021CA  9EA6               	bcf	4006,7,c	;volsfr
 11061                           
 11062                           ;ee.c: 27: WREN = 1;
 11063  0021CC  84A6               	bsf	4006,2,c	;volsfr
 11064                           
 11065                           ;ee.c: 28: GIE = 0;
 11066  0021CE  9EF2               	bcf	intcon,7,c	;volatile
 11067                           
 11068                           ;ee.c: 29: EECON2 = 0x55;
 11069  0021D0  0E55               	movlw	85
 11070  0021D2  6EA7               	movwf	4007,c	;volsfr
 11071                           
 11072                           ;ee.c: 30: EECON2 = 0xaa;
 11073  0021D4  0EAA               	movlw	170
 11074  0021D6  6EA7               	movwf	4007,c	;volsfr
 11075                           
 11076                           ;ee.c: 31: WR = 1;
 11077  0021D8  82A6               	bsf	4006,1,c	;volsfr
 11078                           
 11079                           ;ee.c: 32: GIE = 1;
 11080  0021DA  8EF2               	bsf	intcon,7,c	;volatile
 11081                           
 11082                           ;ee.c: 33: WREN = 0;
 11083  0021DC  94A6               	bcf	4006,2,c	;volsfr
 11084  0021DE  B2A6               	btfsc	4006,1,c	;volsfr
 11085  0021E0  D7FE               	goto	l1201
 11086                           
 11087                           ;ee.c: 35: GIE = 1;
 11088  0021E2  8EF2               	bsf	intcon,7,c	;volatile
 11089  0021E4  0012               	return		;funcret
 11090  0021E6                     __end_of_ee_write:
 11091                           	opt stack 0
 11092                           tblptru	equ	0xFF8
 11093                           tblptrh	equ	0xFF7
 11094                           tblptrl	equ	0xFF6
 11095                           tablat	equ	0xFF5
 11096                           prodh	equ	0xFF4
 11097                           prodl	equ	0xFF3
 11098                           intcon	equ	0xFF2
 11099                           postinc0	equ	0xFEE
 11100                           wreg	equ	0xFE8
 11101                           indf1	equ	0xFE7
 11102                           postinc1	equ	0xFE6
 11103                           postdec1	equ	0xFE5
 11104                           plusw1	equ	0xFE3
 11105                           fsr1h	equ	0xFE2
 11106                           fsr1l	equ	0xFE1
 11107                           indf2	equ	0xFDF
 11108                           postinc2	equ	0xFDE
 11109                           plusw2	equ	0xFDB
 11110                           fsr2h	equ	0xFDA
 11111                           fsr2l	equ	0xFD9
 11112                           status	equ	0xFD8
 11113                           
 11114 ;; *************** function _isr *****************
 11115 ;; Defined at:
 11116 ;;		line 94 in file "main.c"
 11117 ;; Parameters:    Size  Location     Type
 11118 ;;		None
 11119 ;; Auto vars:     Size  Location     Type
 11120 ;;  temp            1   27[COMRAM] unsigned char 
 11121 ;; Return value:  Size  Location     Type
 11122 ;;                  1    wreg      void 
 11123 ;; Registers used:
 11124 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11125 ;; Tracked objects:
 11126 ;;		On entry : 0/0
 11127 ;;		On exit  : 0/0
 11128 ;;		Unchanged: 0/0
 11129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11131 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11132 ;;      Temps:         20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11133 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11134 ;;Total ram usage:       21 bytes
 11135 ;; Hardware stack levels used:    1
 11136 ;; Hardware stack levels required when called:    2
 11137 ;; This function calls:
 11138 ;;		_add_event
 11139 ;;		_control_leds
 11140 ;;		_disable_tmr3
 11141 ;;		_reload_timer0
 11142 ;;		_start_sensor_tmr
 11143 ;;		i2_disable_md_rxint
 11144 ;;		i2_disable_tmr5
 11145 ;;		i2_ee_read
 11146 ;;		i2_init_uart
 11147 ;;		i2_reload_tmr5_pt25s
 11148 ;; This function is called by:
 11149 ;;		Interrupt level 2
 11150 ;; This function uses a non-reentrant model
 11151 ;;
 11152                           
 11153                           	psect	intcode
 11154  000008                     __pintcode:
 11155                           	opt stack 0
 11156  000008                     _isr:
 11157                           	opt stack 21
 11158                           
 11159                           ;incstack = 0
 11160  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 11161  00000A  CFFA F02D          	movff	pclath,??_isr+2
 11162  00000E  CFFB F02E          	movff	pclatu,??_isr+3
 11163  000012  CFE9 F02F          	movff	fsr0l,??_isr+4
 11164  000016  CFEA F030          	movff	fsr0h,??_isr+5
 11165  00001A  CFE1 F031          	movff	fsr1l,??_isr+6
 11166  00001E  CFE2 F032          	movff	fsr1h,??_isr+7
 11167  000022  CFD9 F033          	movff	fsr2l,??_isr+8
 11168  000026  CFDA F034          	movff	fsr2h,??_isr+9
 11169  00002A  CFF3 F035          	movff	prodl,??_isr+10
 11170  00002E  CFF4 F036          	movff	prodh,??_isr+11
 11171  000032  CFF6 F037          	movff	tblptrl,??_isr+12
 11172  000036  CFF7 F038          	movff	tblptrh,??_isr+13
 11173  00003A  CFF8 F039          	movff	tblptru,??_isr+14
 11174  00003E  CFF5 F03A          	movff	tablat,??_isr+15
 11175  000042  C045  F03B         	movff	btemp,??_isr+16
 11176  000046  C046  F03C         	movff	btemp+1,??_isr+17
 11177  00004A  C047  F03D         	movff	btemp+2,??_isr+18
 11178  00004E  C048  F03E         	movff	btemp+3,??_isr+19
 11179                           
 11180                           ;main.c: 96: uint8_t temp;
 11181                           ;main.c: 97: if (INTCONbits.RBIF)
 11182  000052  A0F2               	btfss	intcon,0,c	;volatile
 11183  000054  D003               	goto	i2l220
 11184                           
 11185                           ;main.c: 98: {
 11186                           ;main.c: 99: INTCONbits.RBIF = 0;
 11187  000056  90F2               	bcf	intcon,0,c	;volatile
 11188                           
 11189                           ;main.c: 100: init_uart();
 11190  000058  EC52  F011         	call	i2_init_uart	;wreg free
 11191  00005C                     i2l220:
 11192                           
 11193                           ;main.c: 101: }
 11194                           ;main.c: 102: if (PIR3bits.RC2IF && PIE3bits.RC2IE)
 11195  00005C  BAA4               	btfsc	4004,5,c	;volatile
 11196  00005E  AAA3               	btfss	4003,5,c	;volatile
 11197  000060  D01C               	goto	i2l223
 11198                           
 11199                           ;main.c: 103: {
 11200                           ;main.c: 104: PIR3bits.RC2IF = 0;
 11201  000062  9AA4               	bcf	4004,5,c	;volatile
 11202                           
 11203                           ;main.c: 105: temp = RC2REG;
 11204  000064  CF74 F03F          	movff	3956,isr@temp	;volatile
 11205                           
 11206                           ;main.c: 106: rx2_buf[rx2pos++] = temp;
 11207  000068  501A               	movf	_rx2pos,w,c
 11208  00006A  0D01               	mullw	1
 11209  00006C  0E1F               	movlw	low _rx2_buf
 11210  00006E  24F3               	addwf	prodl,w,c
 11211  000070  6ED9               	movwf	fsr2l,c
 11212  000072  0E00               	movlw	high _rx2_buf
 11213  000074  20F4               	addwfc	prodh,w,c
 11214  000076  6EDA               	movwf	fsr2h,c
 11215  000078  C03F  FFDF         	movff	isr@temp,indf2
 11216  00007C  2A1A               	incf	_rx2pos,f,c
 11217                           
 11218                           ;main.c: 107: if (rx2pos >= sizeof(rx2_buf)) rx2pos--;
 11219  00007E  0E04               	movlw	4
 11220  000080  641A               	cpfsgt	_rx2pos,c
 11221  000082  D001               	goto	i2l222
 11222  000084  061A               	decf	_rx2pos,f,c
 11223  000086                     i2l222:
 11224                           
 11225                           ;main.c: 108: if (rx2pos >= sizeof(rx2_buf) && rx2_buf[4] == '\n')
 11226  000086  0E04               	movlw	4
 11227  000088  641A               	cpfsgt	_rx2pos,c
 11228  00008A  D007               	goto	i2l223
 11229  00008C  0E0A               	movlw	10
 11230  00008E  1823               	xorwf	_rx2_buf+4,w,c
 11231  000090  A4D8               	btfss	status,2,c
 11232  000092  D003               	goto	i2l223
 11233                           
 11234                           ;main.c: 109: receivedSensor = 1;
 11235  000094  0E01               	movlw	1
 11236  000096  0100               	movlb	0	; () banked
 11237  000098  6FC7               	movwf	_receivedSensor& (0+255),b
 11238  00009A                     i2l223:
 11239                           
 11240                           ;main.c: 110: }
 11241                           ;main.c: 111: if (RC1IF && PIE1bits.RCIE)
 11242                           
 11243                           ; BSR set to: 0
 11244                           
 11245                           ; BSR set to: 0
 11246  00009A  BA9E               	btfsc	3998,5,c	;volatile
 11247  00009C  AA9D               	btfss	3997,5,c	;volatile
 11248  00009E  D0B7               	goto	i2l231
 11249                           
 11250                           ;main.c: 112: {
 11251                           ;main.c: 113: RC1IF = 0;
 11252  0000A0  9A9E               	bcf	3998,5,c	;volatile
 11253                           
 11254                           ;main.c: 114: currentChar = RC1REG;
 11255  0000A2  CFAE F016          	movff	4014,_currentChar	;volatile
 11256                           
 11257                           ;main.c: 115: mdRxBuf[endPtr++] = currentChar;
 11258  0000A6  5003               	movf	_endPtr,w,c
 11259  0000A8  0D01               	mullw	1
 11260  0000AA  0E00               	movlw	low _mdRxBuf
 11261  0000AC  24F3               	addwf	prodl,w,c
 11262  0000AE  6ED9               	movwf	fsr2l,c
 11263  0000B0  0E02               	movlw	high _mdRxBuf
 11264  0000B2  20F4               	addwfc	prodh,w,c
 11265  0000B4  6EDA               	movwf	fsr2h,c
 11266  0000B6  C016  FFDF         	movff	_currentChar,indf2
 11267  0000BA  2A03               	incf	_endPtr,f,c
 11268                           
 11269                           ;main.c: 116: if (endPtr >= sizeof(mdRxBuf))
 11270  0000BC  0E9F               	movlw	159
 11271  0000BE  6403               	cpfsgt	_endPtr,c
 11272  0000C0  D001               	goto	i2l225
 11273                           
 11274                           ;main.c: 117: endPtr--;
 11275  0000C2  0603               	decf	_endPtr,f,c
 11276  0000C4                     i2l225:
 11277                           
 11278                           ;main.c: 118: if (endPtr > 2)
 11279  0000C4  0E02               	movlw	2
 11280  0000C6  6403               	cpfsgt	_endPtr,c
 11281  0000C8  D0A2               	goto	i2l231
 11282                           
 11283                           ;main.c: 119: {
 11284                           ;main.c: 121: if (mdRxBuf[(uint8_t)(endPtr - 2)] == 'O' && mdRxBuf[(uint8_t)(endPtr - 1)
      +                          ] == 'K' && (mdRxBuf[endPtr] == '\r' || mdRxBuf[endPtr] == '\n'))
 11285  0000CA  C003  F02B         	movff	_endPtr,??_isr
 11286  0000CE  0EFE               	movlw	254
 11287  0000D0  262B               	addwf	??_isr,f,c
 11288  0000D2  502B               	movf	??_isr,w,c
 11289  0000D4  0D01               	mullw	1
 11290  0000D6  0E00               	movlw	low _mdRxBuf
 11291  0000D8  24F3               	addwf	prodl,w,c
 11292  0000DA  6ED9               	movwf	fsr2l,c
 11293  0000DC  0E02               	movlw	high _mdRxBuf
 11294  0000DE  20F4               	addwfc	prodh,w,c
 11295  0000E0  6EDA               	movwf	fsr2h,c
 11296  0000E2  0E4F               	movlw	79
 11297  0000E4  18DE               	xorwf	postinc2,w,c
 11298  0000E6  A4D8               	btfss	status,2,c
 11299  0000E8  D036               	goto	i2l227
 11300  0000EA  C003  F02B         	movff	_endPtr,??_isr
 11301  0000EE  0EFF               	movlw	255
 11302  0000F0  262B               	addwf	??_isr,f,c
 11303  0000F2  502B               	movf	??_isr,w,c
 11304  0000F4  0D01               	mullw	1
 11305  0000F6  0E00               	movlw	low _mdRxBuf
 11306  0000F8  24F3               	addwf	prodl,w,c
 11307  0000FA  6ED9               	movwf	fsr2l,c
 11308  0000FC  0E02               	movlw	high _mdRxBuf
 11309  0000FE  20F4               	addwfc	prodh,w,c
 11310  000100  6EDA               	movwf	fsr2h,c
 11311  000102  0E4B               	movlw	75
 11312  000104  18DE               	xorwf	postinc2,w,c
 11313  000106  A4D8               	btfss	status,2,c
 11314  000108  D026               	goto	i2l227
 11315  00010A  5003               	movf	_endPtr,w,c
 11316  00010C  0D01               	mullw	1
 11317  00010E  0E00               	movlw	low _mdRxBuf
 11318  000110  24F3               	addwf	prodl,w,c
 11319  000112  6ED9               	movwf	fsr2l,c
 11320  000114  0E02               	movlw	high _mdRxBuf
 11321  000116  20F4               	addwfc	prodh,w,c
 11322  000118  6EDA               	movwf	fsr2h,c
 11323  00011A  0E0D               	movlw	13
 11324  00011C  18DE               	xorwf	postinc2,w,c
 11325  00011E  B4D8               	btfsc	status,2,c
 11326  000120  D00C               	goto	i2u701_40
 11327  000122  5003               	movf	_endPtr,w,c
 11328  000124  0D01               	mullw	1
 11329  000126  0E00               	movlw	low _mdRxBuf
 11330  000128  24F3               	addwf	prodl,w,c
 11331  00012A  6ED9               	movwf	fsr2l,c
 11332  00012C  0E02               	movlw	high _mdRxBuf
 11333  00012E  20F4               	addwfc	prodh,w,c
 11334  000130  6EDA               	movwf	fsr2h,c
 11335  000132  0E0A               	movlw	10
 11336  000134  18DE               	xorwf	postinc2,w,c
 11337  000136  A4D8               	btfss	status,2,c
 11338  000138  D00E               	goto	i2l227
 11339  00013A                     i2u701_40:
 11340                           
 11341                           ;main.c: 123: {
 11342                           ;main.c: 124: tmr5_cnt = 0;
 11343  00013A  0E00               	movlw	0
 11344  00013C  6E1B               	movwf	_tmr5_cnt,c
 11345                           
 11346                           ;main.c: 125: disable_tmr5();
 11347  00013E  EC11  F012         	call	i2_disable_tmr5	;wreg free
 11348                           
 11349                           ;main.c: 126: TMR5IF = 0;
 11350  000142  927E               	bcf	3966,1,c	;volatile
 11351                           
 11352                           ;main.c: 127: receivedOK = 1;
 11353  000144  0E01               	movlw	1
 11354  000146  6E0A               	movwf	_receivedOK,c
 11355                           
 11356                           ;main.c: 128: receivedERR = 0;
 11357  000148  0E00               	movlw	0
 11358  00014A  6E09               	movwf	_receivedERR,c
 11359                           
 11360                           ;main.c: 129: timedOut = 0;
 11361  00014C  0E00               	movlw	0
 11362  00014E  6E07               	movwf	_timedOut,c
 11363                           
 11364                           ;main.c: 130: disable_md_rxint();
 11365  000150  EC21  F012         	call	i2_disable_md_rxint	;wreg free
 11366                           
 11367                           ;main.c: 131: }
 11368  000154  D05C               	goto	i2l231
 11369  000156                     i2l227:
 11370                           
 11371                           ;main.c: 132: else if (endPtr >= 5 && mdRxBuf[(uint8_t)(endPtr - 4)] == 'E' && mdRxBuf[(
      +                          uint8_t)(endPtr - 3)] == 'R' && mdRxBuf[(uint8_t)(endPtr - 2)] == 'R' && mdRxBuf[(uint8_
      +                          t)(endPtr - 1)] == 'O' && mdRxBuf[endPtr] == 'R')
 11372  000156  0E04               	movlw	4
 11373  000158  6403               	cpfsgt	_endPtr,c
 11374  00015A  D059               	goto	i2l231
 11375  00015C  C003  F02B         	movff	_endPtr,??_isr
 11376  000160  0EFC               	movlw	252
 11377  000162  262B               	addwf	??_isr,f,c
 11378  000164  502B               	movf	??_isr,w,c
 11379  000166  0D01               	mullw	1
 11380  000168  0E00               	movlw	low _mdRxBuf
 11381  00016A  24F3               	addwf	prodl,w,c
 11382  00016C  6ED9               	movwf	fsr2l,c
 11383  00016E  0E02               	movlw	high _mdRxBuf
 11384  000170  20F4               	addwfc	prodh,w,c
 11385  000172  6EDA               	movwf	fsr2h,c
 11386  000174  0E45               	movlw	69
 11387  000176  18DE               	xorwf	postinc2,w,c
 11388  000178  A4D8               	btfss	status,2,c
 11389  00017A  D049               	goto	i2l231
 11390  00017C  C003  F02B         	movff	_endPtr,??_isr
 11391  000180  0EFD               	movlw	253
 11392  000182  262B               	addwf	??_isr,f,c
 11393  000184  502B               	movf	??_isr,w,c
 11394  000186  0D01               	mullw	1
 11395  000188  0E00               	movlw	low _mdRxBuf
 11396  00018A  24F3               	addwf	prodl,w,c
 11397  00018C  6ED9               	movwf	fsr2l,c
 11398  00018E  0E02               	movlw	high _mdRxBuf
 11399  000190  20F4               	addwfc	prodh,w,c
 11400  000192  6EDA               	movwf	fsr2h,c
 11401  000194  0E52               	movlw	82
 11402  000196  18DE               	xorwf	postinc2,w,c
 11403  000198  A4D8               	btfss	status,2,c
 11404  00019A  D039               	goto	i2l231
 11405  00019C  C003  F02B         	movff	_endPtr,??_isr
 11406  0001A0  0EFE               	movlw	254
 11407  0001A2  262B               	addwf	??_isr,f,c
 11408  0001A4  502B               	movf	??_isr,w,c
 11409  0001A6  0D01               	mullw	1
 11410  0001A8  0E00               	movlw	low _mdRxBuf
 11411  0001AA  24F3               	addwf	prodl,w,c
 11412  0001AC  6ED9               	movwf	fsr2l,c
 11413  0001AE  0E02               	movlw	high _mdRxBuf
 11414  0001B0  20F4               	addwfc	prodh,w,c
 11415  0001B2  6EDA               	movwf	fsr2h,c
 11416  0001B4  0E52               	movlw	82
 11417  0001B6  18DE               	xorwf	postinc2,w,c
 11418  0001B8  A4D8               	btfss	status,2,c
 11419  0001BA  D029               	goto	i2l231
 11420  0001BC  C003  F02B         	movff	_endPtr,??_isr
 11421  0001C0  0EFF               	movlw	255
 11422  0001C2  262B               	addwf	??_isr,f,c
 11423  0001C4  502B               	movf	??_isr,w,c
 11424  0001C6  0D01               	mullw	1
 11425  0001C8  0E00               	movlw	low _mdRxBuf
 11426  0001CA  24F3               	addwf	prodl,w,c
 11427  0001CC  6ED9               	movwf	fsr2l,c
 11428  0001CE  0E02               	movlw	high _mdRxBuf
 11429  0001D0  20F4               	addwfc	prodh,w,c
 11430  0001D2  6EDA               	movwf	fsr2h,c
 11431  0001D4  0E4F               	movlw	79
 11432  0001D6  18DE               	xorwf	postinc2,w,c
 11433  0001D8  A4D8               	btfss	status,2,c
 11434  0001DA  D019               	goto	i2l231
 11435  0001DC  5003               	movf	_endPtr,w,c
 11436  0001DE  0D01               	mullw	1
 11437  0001E0  0E00               	movlw	low _mdRxBuf
 11438  0001E2  24F3               	addwf	prodl,w,c
 11439  0001E4  6ED9               	movwf	fsr2l,c
 11440  0001E6  0E02               	movlw	high _mdRxBuf
 11441  0001E8  20F4               	addwfc	prodh,w,c
 11442  0001EA  6EDA               	movwf	fsr2h,c
 11443  0001EC  0E52               	movlw	82
 11444  0001EE  18DE               	xorwf	postinc2,w,c
 11445  0001F0  A4D8               	btfss	status,2,c
 11446  0001F2  D00D               	goto	i2l231
 11447                           
 11448                           ;main.c: 135: {
 11449                           ;main.c: 136: tmr5_cnt = 0;
 11450  0001F4  0E00               	movlw	0
 11451  0001F6  6E1B               	movwf	_tmr5_cnt,c
 11452                           
 11453                           ;main.c: 137: disable_tmr5();
 11454  0001F8  EC11  F012         	call	i2_disable_tmr5	;wreg free
 11455                           
 11456                           ;main.c: 138: TMR5IF = 0;
 11457  0001FC  927E               	bcf	3966,1,c	;volatile
 11458                           
 11459                           ;main.c: 139: receivedOK = 0;
 11460  0001FE  0E00               	movlw	0
 11461  000200  6E0A               	movwf	_receivedOK,c
 11462                           
 11463                           ;main.c: 140: receivedERR = 1;
 11464  000202  0E01               	movlw	1
 11465  000204  6E09               	movwf	_receivedERR,c
 11466                           
 11467                           ;main.c: 141: timedOut = 0;
 11468  000206  0E00               	movlw	0
 11469  000208  6E07               	movwf	_timedOut,c
 11470                           
 11471                           ;main.c: 142: disable_md_rxint();
 11472  00020A  EC21  F012         	call	i2_disable_md_rxint	;wreg free
 11473  00020E                     i2l231:
 11474                           
 11475                           ;main.c: 143: }
 11476                           ;main.c: 144: }
 11477                           ;main.c: 145: }
 11478                           ;main.c: 147: if (TMR5IF)
 11479  00020E  A27E               	btfss	3966,1,c	;volatile
 11480  000210  D004               	goto	i2l232
 11481                           
 11482                           ;main.c: 148: {
 11483                           ;main.c: 150: tmr5_cnt++;
 11484  000212  2A1B               	incf	_tmr5_cnt,f,c
 11485                           
 11486                           ;main.c: 151: TMR5IF = 0;
 11487  000214  927E               	bcf	3966,1,c	;volatile
 11488                           
 11489                           ;main.c: 152: reload_tmr5_pt25s();
 11490  000216  ECBD  F011         	call	i2_reload_tmr5_pt25s	;wreg free
 11491  00021A                     i2l232:
 11492                           
 11493                           ;main.c: 155: }
 11494                           ;main.c: 157: if (TMR0IF)
 11495  00021A  A4F2               	btfss	intcon,2,c	;volatile
 11496  00021C  D007               	goto	i2l233
 11497                           
 11498                           ;main.c: 158: {
 11499                           ;main.c: 159: TMR0IF = 0;
 11500  00021E  94F2               	bcf	intcon,2,c	;volatile
 11501                           
 11502                           ;main.c: 160: reload_timer0();
 11503  000220  EC26  F012         	call	_reload_timer0	;wreg free
 11504                           
 11505                           ;main.c: 161: gled_tmr0_tick++;
 11506  000224  2A13               	incf	_gled_tmr0_tick,f,c
 11507                           
 11508                           ;main.c: 162: bled_tmr0_tick++;
 11509  000226  2A12               	incf	_bled_tmr0_tick,f,c
 11510                           
 11511                           ;main.c: 163: control_leds();
 11512  000228  EC80  F00C         	call	_control_leds	;wreg free
 11513  00022C                     i2l233:
 11514                           
 11515                           ;main.c: 164: }
 11516                           ;main.c: 165: if (TMR3IF)
 11517  00022C  A2A1               	btfss	4001,1,c	;volatile
 11518  00022E  D072               	goto	i2l250
 11519                           
 11520                           ;main.c: 166: {
 11521                           ;main.c: 167: tmr3_cnt++;
 11522  000230  2A11               	incf	_tmr3_cnt,f,c
 11523                           
 11524                           ;main.c: 168: TMR3IF = 0;
 11525  000232  92A1               	bcf	4001,1,c	;volatile
 11526                           
 11527                           ;main.c: 170: if (tmr3_cnt >= 8 && ((inButtonMenu && buttonPressCount > 0) || !inButtonM
      +                          enu))
 11528  000234  0E07               	movlw	7
 11529  000236  6411               	cpfsgt	_tmr3_cnt,c
 11530  000238  D05E               	goto	i2l235
 11531  00023A  5015               	movf	_inButtonMenu,w,c
 11532  00023C  B4D8               	btfsc	status,2,c
 11533  00023E  D003               	goto	i2u713_40
 11534  000240  5014               	movf	_buttonPressCount,w,c
 11535  000242  A4D8               	btfss	status,2,c
 11536  000244  D003               	goto	i2u714_40
 11537  000246                     i2u713_40:
 11538  000246  5015               	movf	_inButtonMenu,w,c
 11539  000248  A4D8               	btfss	status,2,c
 11540  00024A  D055               	goto	i2l235
 11541  00024C                     i2u714_40:
 11542                           
 11543                           ;main.c: 171: {
 11544                           ;main.c: 172: tmr3_cnt = 0;
 11545  00024C  0E00               	movlw	0
 11546  00024E  6E11               	movwf	_tmr3_cnt,c
 11547                           
 11548                           ;main.c: 173: if (inButtonMenu && buttonPressCount == 1)
 11549  000250  5015               	movf	_inButtonMenu,w,c
 11550  000252  B4D8               	btfsc	status,2,c
 11551  000254  D00B               	goto	i2l240
 11552  000256  0414               	decf	_buttonPressCount,w,c
 11553  000258  A4D8               	btfss	status,2,c
 11554  00025A  D008               	goto	i2l240
 11555                           
 11556                           ;main.c: 174: {
 11557                           ;main.c: 175: inButtonMenu = 0;
 11558  00025C  0E00               	movlw	0
 11559  00025E  6E15               	movwf	_inButtonMenu,c
 11560                           
 11561                           ;main.c: 176: disable_tmr3();
 11562  000260  ECFE  F011         	call	_disable_tmr3	;wreg free
 11563                           
 11564                           ;main.c: 177: PREV_STATE = STATE;
 11565  000264  C01E  F0C9         	movff	_STATE,_PREV_STATE
 11566                           
 11567                           ;main.c: 178: STATE = LISTEN_SMS;
 11568  000268  0E02               	movlw	2
 11569  00026A  D041               	goto	L28
 11570  00026C                     i2l240:
 11571                           
 11572                           ;main.c: 180: else if (inButtonMenu && buttonPressCount == 2)
 11573  00026C  5015               	movf	_inButtonMenu,w,c
 11574  00026E  B4D8               	btfsc	status,2,c
 11575  000270  D00F               	goto	i2l242
 11576  000272  0E02               	movlw	2
 11577  000274  1814               	xorwf	_buttonPressCount,w,c
 11578  000276  A4D8               	btfss	status,2,c
 11579  000278  D00B               	goto	i2l242
 11580                           
 11581                           ;main.c: 181: {
 11582                           ;main.c: 182: inButtonMenu = 0;
 11583  00027A  0E00               	movlw	0
 11584  00027C  6E15               	movwf	_inButtonMenu,c
 11585                           
 11586                           ;main.c: 183: disable_tmr3();
 11587  00027E  ECFE  F011         	call	_disable_tmr3	;wreg free
 11588                           
 11589                           ;main.c: 184: PREV_STATE = STATE;
 11590  000282  C01E  F0C9         	movff	_STATE,_PREV_STATE
 11591                           
 11592                           ;main.c: 185: STATE = LEARN_SENSOR;
 11593  000286  0E03               	movlw	3
 11594  000288  6E1E               	movwf	_STATE,c
 11595                           
 11596                           ;main.c: 186: start_sensor_tmr();
 11597  00028A  EC1B  F011         	call	_start_sensor_tmr	;wreg free
 11598                           
 11599                           ;main.c: 187: }
 11600  00028E  D030               	goto	i2l248
 11601  000290                     i2l242:
 11602                           
 11603                           ;main.c: 188: else if (inButtonMenu && buttonPressCount == 3)
 11604  000290  5015               	movf	_inButtonMenu,w,c
 11605  000292  B4D8               	btfsc	status,2,c
 11606  000294  D00F               	goto	i2l244
 11607  000296  0E03               	movlw	3
 11608  000298  1814               	xorwf	_buttonPressCount,w,c
 11609  00029A  A4D8               	btfss	status,2,c
 11610  00029C  D00B               	goto	i2l244
 11611                           
 11612                           ;main.c: 189: {
 11613                           ;main.c: 190: inButtonMenu = 0;
 11614  00029E  0E00               	movlw	0
 11615  0002A0  6E15               	movwf	_inButtonMenu,c
 11616                           
 11617                           ;main.c: 191: disable_tmr3();
 11618  0002A2  ECFE  F011         	call	_disable_tmr3	;wreg free
 11619                           
 11620                           ;main.c: 192: PREV_STATE = STATE;
 11621  0002A6  C01E  F0C9         	movff	_STATE,_PREV_STATE
 11622                           
 11623                           ;main.c: 193: STATE = DEL_SENSOR;
 11624  0002AA  0E04               	movlw	4
 11625  0002AC  6E1E               	movwf	_STATE,c
 11626                           
 11627                           ;main.c: 194: start_sensor_tmr();
 11628  0002AE  EC1B  F011         	call	_start_sensor_tmr	;wreg free
 11629                           
 11630                           ;main.c: 195: }
 11631  0002B2  D01E               	goto	i2l248
 11632  0002B4                     i2l244:
 11633                           
 11634                           ;main.c: 196: else if (inButtonMenu && buttonPressCount == 4)
 11635  0002B4  5015               	movf	_inButtonMenu,w,c
 11636  0002B6  B4D8               	btfsc	status,2,c
 11637  0002B8  D012               	goto	i2l246
 11638  0002BA  0E04               	movlw	4
 11639  0002BC  1814               	xorwf	_buttonPressCount,w,c
 11640  0002BE  A4D8               	btfss	status,2,c
 11641  0002C0  D00E               	goto	i2l246
 11642                           
 11643                           ;main.c: 197: {
 11644                           ;main.c: 198: inButtonMenu = 0;
 11645  0002C2  0E00               	movlw	0
 11646  0002C4  6E15               	movwf	_inButtonMenu,c
 11647                           
 11648                           ;main.c: 199: disable_tmr3();
 11649  0002C6  ECFE  F011         	call	_disable_tmr3	;wreg free
 11650                           
 11651                           ;main.c: 200: add_event(TEST_PIN, (uint8_t)(ee_read(0x00, 0xB9)));
 11652  0002CA  0EB9               	movlw	185
 11653  0002CC  6E24               	movwf	i2ee_read@addr,c
 11654  0002CE  0E00               	movlw	0
 11655  0002D0  EC95  F011         	call	i2_ee_read
 11656  0002D4  6E27               	movwf	add_event@zone,c
 11657  0002D6  0E03               	movlw	3
 11658  0002D8  ECF8  F00D         	call	_add_event
 11659                           
 11660                           ;main.c: 201: }
 11661  0002DC  D009               	goto	i2l248
 11662  0002DE                     i2l246:
 11663                           
 11664                           ;main.c: 202: else if (buttonPressCount == 5)
 11665  0002DE  0E05               	movlw	5
 11666  0002E0  1814               	xorwf	_buttonPressCount,w,c
 11667  0002E2  A4D8               	btfss	status,2,c
 11668  0002E4  D005               	goto	i2l248
 11669                           
 11670                           ;main.c: 203: {
 11671                           ;main.c: 204: inButtonMenu = (bool)(~inButtonMenu);
 11672  0002E6  1E15               	comf	_inButtonMenu,f,c
 11673                           
 11674                           ;main.c: 205: tmr3_cnt = 0;
 11675  0002E8  0E00               	movlw	0
 11676  0002EA  6E11               	movwf	_tmr3_cnt,c
 11677                           
 11678                           ;main.c: 206: STATE = IDLE;
 11679  0002EC  0E00               	movlw	0
 11680  0002EE                     L28:
 11681  0002EE  6E1E               	movwf	_STATE,c
 11682  0002F0                     i2l248:
 11683                           
 11684                           ;main.c: 207: }
 11685                           ;main.c: 209: buttonPressCount = 0;
 11686  0002F0  0E00               	movlw	0
 11687  0002F2  6E14               	movwf	_buttonPressCount,c
 11688                           
 11689                           ;main.c: 210: }
 11690  0002F4  D00F               	goto	i2l250
 11691  0002F6                     i2l235:
 11692                           
 11693                           ;main.c: 211: else if (tmr3_cnt >= 40 && inButtonMenu && buttonPressCount == 0)
 11694  0002F6  0E27               	movlw	39
 11695  0002F8  6411               	cpfsgt	_tmr3_cnt,c
 11696  0002FA  D00C               	goto	i2l250
 11697  0002FC  5015               	movf	_inButtonMenu,w,c
 11698  0002FE  B4D8               	btfsc	status,2,c
 11699  000300  D009               	goto	i2l250
 11700  000302  5014               	movf	_buttonPressCount,w,c
 11701  000304  A4D8               	btfss	status,2,c
 11702  000306  D006               	goto	i2l250
 11703                           
 11704                           ;main.c: 212: {
 11705                           ;main.c: 213: inButtonMenu = 0;
 11706  000308  0E00               	movlw	0
 11707  00030A  6E15               	movwf	_inButtonMenu,c
 11708                           
 11709                           ;main.c: 214: tmr3_cnt = 0;
 11710  00030C  0E00               	movlw	0
 11711  00030E  6E11               	movwf	_tmr3_cnt,c
 11712                           
 11713                           ;main.c: 215: disable_tmr3();
 11714  000310  ECFE  F011         	call	_disable_tmr3	;wreg free
 11715  000314                     i2l250:
 11716  000314  C03E  F048         	movff	??_isr+19,btemp+3
 11717  000318  C03D  F047         	movff	??_isr+18,btemp+2
 11718  00031C  C03C  F046         	movff	??_isr+17,btemp+1
 11719  000320  C03B  F045         	movff	??_isr+16,btemp
 11720  000324  C03A  FFF5         	movff	??_isr+15,tablat
 11721  000328  C039  FFF8         	movff	??_isr+14,tblptru
 11722  00032C  C038  FFF7         	movff	??_isr+13,tblptrh
 11723  000330  C037  FFF6         	movff	??_isr+12,tblptrl
 11724  000334  C036  FFF4         	movff	??_isr+11,prodh
 11725  000338  C035  FFF3         	movff	??_isr+10,prodl
 11726  00033C  C034  FFDA         	movff	??_isr+9,fsr2h
 11727  000340  C033  FFD9         	movff	??_isr+8,fsr2l
 11728  000344  C032  FFE2         	movff	??_isr+7,fsr1h
 11729  000348  C031  FFE1         	movff	??_isr+6,fsr1l
 11730  00034C  C030  FFEA         	movff	??_isr+5,fsr0h
 11731  000350  C02F  FFE9         	movff	??_isr+4,fsr0l
 11732  000354  C02E  FFFB         	movff	??_isr+3,pclatu
 11733  000358  C02D  FFFA         	movff	??_isr+2,pclath
 11734  00035C  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 11735  00035E  0011               	retfie		f
 11736  000360                     __end_of_isr:
 11737                           	opt stack 0
 11738                           pclatu	equ	0xFFB
 11739                           pclath	equ	0xFFA
 11740                           tblptru	equ	0xFF8
 11741                           tblptrh	equ	0xFF7
 11742                           tblptrl	equ	0xFF6
 11743                           tablat	equ	0xFF5
 11744                           prodh	equ	0xFF4
 11745                           prodl	equ	0xFF3
 11746                           intcon	equ	0xFF2
 11747                           postinc0	equ	0xFEE
 11748                           fsr0h	equ	0xFEA
 11749                           fsr0l	equ	0xFE9
 11750                           wreg	equ	0xFE8
 11751                           indf1	equ	0xFE7
 11752                           postinc1	equ	0xFE6
 11753                           postdec1	equ	0xFE5
 11754                           plusw1	equ	0xFE3
 11755                           fsr1h	equ	0xFE2
 11756                           fsr1l	equ	0xFE1
 11757                           indf2	equ	0xFDF
 11758                           postinc2	equ	0xFDE
 11759                           plusw2	equ	0xFDB
 11760                           fsr2h	equ	0xFDA
 11761                           fsr2l	equ	0xFD9
 11762                           status	equ	0xFD8
 11763                           
 11764 ;; *************** function i2_reload_tmr5_pt25s *****************
 11765 ;; Defined at:
 11766 ;;		line 260 in file "io.c"
 11767 ;; Parameters:    Size  Location     Type
 11768 ;;		None
 11769 ;; Auto vars:     Size  Location     Type
 11770 ;;		None
 11771 ;; Return value:  Size  Location     Type
 11772 ;;                  1    wreg      void 
 11773 ;; Registers used:
 11774 ;;		wreg, status,2
 11775 ;; Tracked objects:
 11776 ;;		On entry : 0/0
 11777 ;;		On exit  : 0/0
 11778 ;;		Unchanged: 0/0
 11779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11783 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11784 ;;Total ram usage:        0 bytes
 11785 ;; Hardware stack levels used:    1
 11786 ;; This function calls:
 11787 ;;		Nothing
 11788 ;; This function is called by:
 11789 ;;		_isr
 11790 ;; This function uses a non-reentrant model
 11791 ;;
 11792                           
 11793                           	psect	text52
 11794  00237A                     __ptext52:
 11795                           	opt stack 0
 11796  00237A                     i2_reload_tmr5_pt25s:
 11797                           	opt stack 22
 11798                           
 11799                           ;io.c: 262: INTCONbits.GIE = 0;
 11800                           
 11801                           ;incstack = 0
 11802  00237A  9EF2               	bcf	intcon,7,c	;volatile
 11803                           
 11804                           ;io.c: 263: T5CON = 0b00110101;
 11805  00237C  0E35               	movlw	53
 11806  00237E  010F               	movlb	15	; () banked
 11807  002380  6F4E               	movwf	78,b	;volatile
 11808                           
 11809                           ; BSR set to: 15
 11810                           ;io.c: 265: PIE5bits.TMR5IE = 1;
 11811  002382  827D               	bsf	3965,1,c	;volatile
 11812                           
 11813                           ; BSR set to: 15
 11814                           ;io.c: 266: INTCONbits.PEIE = 1;
 11815  002384  8CF2               	bsf	intcon,6,c	;volatile
 11816                           
 11817                           ; BSR set to: 15
 11818                           ;io.c: 267: PIR5bits.TMR5IF = 0;
 11819  002386  927E               	bcf	3966,1,c	;volatile
 11820                           
 11821                           ;io.c: 268: TMR5H = 0x0B;
 11822  002388  0E0B               	movlw	11
 11823  00238A  6F50               	movwf	80,b	;volatile
 11824                           
 11825                           ;io.c: 269: TMR5L = 0x45;
 11826  00238C  0E45               	movlw	69
 11827  00238E  6F4F               	movwf	79,b	;volatile
 11828                           
 11829                           ; BSR set to: 15
 11830                           ;io.c: 270: INTCONbits.GIE = 1;
 11831  002390  8EF2               	bsf	intcon,7,c	;volatile
 11832                           
 11833                           ; BSR set to: 15
 11834  002392  0012               	return		;funcret
 11835  002394                     __end_ofi2_reload_tmr5_pt25s:
 11836                           	opt stack 0
 11837                           pclatu	equ	0xFFB
 11838                           pclath	equ	0xFFA
 11839                           tblptru	equ	0xFF8
 11840                           tblptrh	equ	0xFF7
 11841                           tblptrl	equ	0xFF6
 11842                           tablat	equ	0xFF5
 11843                           prodh	equ	0xFF4
 11844                           prodl	equ	0xFF3
 11845                           intcon	equ	0xFF2
 11846                           postinc0	equ	0xFEE
 11847                           fsr0h	equ	0xFEA
 11848                           fsr0l	equ	0xFE9
 11849                           wreg	equ	0xFE8
 11850                           indf1	equ	0xFE7
 11851                           postinc1	equ	0xFE6
 11852                           postdec1	equ	0xFE5
 11853                           plusw1	equ	0xFE3
 11854                           fsr1h	equ	0xFE2
 11855                           fsr1l	equ	0xFE1
 11856                           indf2	equ	0xFDF
 11857                           postinc2	equ	0xFDE
 11858                           plusw2	equ	0xFDB
 11859                           fsr2h	equ	0xFDA
 11860                           fsr2l	equ	0xFD9
 11861                           status	equ	0xFD8
 11862                           
 11863 ;; *************** function i2_init_uart *****************
 11864 ;; Defined at:
 11865 ;;		line 8 in file "uart.c"
 11866 ;; Parameters:    Size  Location     Type
 11867 ;;		None
 11868 ;; Auto vars:     Size  Location     Type
 11869 ;;		None
 11870 ;; Return value:  Size  Location     Type
 11871 ;;                  1    wreg      void 
 11872 ;; Registers used:
 11873 ;;		wreg, status,2, cstack
 11874 ;; Tracked objects:
 11875 ;;		On entry : 0/0
 11876 ;;		On exit  : 0/0
 11877 ;;		Unchanged: 0/0
 11878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11880 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11882 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11883 ;;Total ram usage:        0 bytes
 11884 ;; Hardware stack levels used:    1
 11885 ;; Hardware stack levels required when called:    1
 11886 ;; This function calls:
 11887 ;;		i2_init_md_uart
 11888 ;; This function is called by:
 11889 ;;		_isr
 11890 ;; This function uses a non-reentrant model
 11891 ;;
 11892                           
 11893                           	psect	text53
 11894  0022A4                     __ptext53:
 11895                           	opt stack 0
 11896  0022A4                     i2_init_uart:
 11897                           	opt stack 21
 11898                           
 11899                           ;uart.c: 10: TRISBbits.TRISB7 = 1;
 11900                           
 11901                           ; BSR set to: 15
 11902                           ;incstack = 0
 11903  0022A4  8E93               	bsf	3987,7,c	;volatile
 11904                           
 11905                           ;uart.c: 11: TRISBbits.TRISB6 = 0;
 11906  0022A6  9C93               	bcf	3987,6,c	;volatile
 11907                           
 11908                           ;uart.c: 14: TRISBbits.TRISB5 = 1;
 11909  0022A8  8A93               	bsf	3987,5,c	;volatile
 11910                           
 11911                           ;uart.c: 22: TX2STA = 0x26;
 11912  0022AA  0E26               	movlw	38
 11913  0022AC  6E72               	movwf	3954,c	;volatile
 11914                           
 11915                           ;uart.c: 23: RC2STA = 0x90;
 11916  0022AE  0E90               	movlw	144
 11917  0022B0  6E71               	movwf	3953,c	;volatile
 11918                           
 11919                           ;uart.c: 24: BAUDCON2 = 0xc8;
 11920  0022B2  0EC8               	movlw	200
 11921  0022B4  6E70               	movwf	3952,c	;volatile
 11922                           
 11923                           ;uart.c: 25: SPBRG2 = 207;
 11924  0022B6  0ECF               	movlw	207
 11925  0022B8  6E75               	movwf	3957,c	;volatile
 11926                           
 11927                           ;uart.c: 26: SPBRGH2 = 0;
 11928  0022BA  0E00               	movlw	0
 11929  0022BC  6E76               	movwf	3958,c	;volatile
 11930                           
 11931                           ;uart.c: 27: WPUB5 = 1;
 11932  0022BE  8A61               	bsf	3937,5,c	;volatile
 11933                           
 11934                           ;uart.c: 28: RC2IE = 1;
 11935  0022C0  8AA3               	bsf	4003,5,c	;volatile
 11936                           
 11937                           ;uart.c: 30: init_md_uart();
 11938  0022C2  EC64  F011         	call	i2_init_md_uart	;wreg free
 11939  0022C6  0012               	return		;funcret
 11940  0022C8                     __end_ofi2_init_uart:
 11941                           	opt stack 0
 11942                           pclatu	equ	0xFFB
 11943                           pclath	equ	0xFFA
 11944                           tblptru	equ	0xFF8
 11945                           tblptrh	equ	0xFF7
 11946                           tblptrl	equ	0xFF6
 11947                           tablat	equ	0xFF5
 11948                           prodh	equ	0xFF4
 11949                           prodl	equ	0xFF3
 11950                           intcon	equ	0xFF2
 11951                           postinc0	equ	0xFEE
 11952                           fsr0h	equ	0xFEA
 11953                           fsr0l	equ	0xFE9
 11954                           wreg	equ	0xFE8
 11955                           indf1	equ	0xFE7
 11956                           postinc1	equ	0xFE6
 11957                           postdec1	equ	0xFE5
 11958                           plusw1	equ	0xFE3
 11959                           fsr1h	equ	0xFE2
 11960                           fsr1l	equ	0xFE1
 11961                           indf2	equ	0xFDF
 11962                           postinc2	equ	0xFDE
 11963                           plusw2	equ	0xFDB
 11964                           fsr2h	equ	0xFDA
 11965                           fsr2l	equ	0xFD9
 11966                           status	equ	0xFD8
 11967                           
 11968 ;; *************** function i2_init_md_uart *****************
 11969 ;; Defined at:
 11970 ;;		line 34 in file "uart.c"
 11971 ;; Parameters:    Size  Location     Type
 11972 ;;		None
 11973 ;; Auto vars:     Size  Location     Type
 11974 ;;		None
 11975 ;; Return value:  Size  Location     Type
 11976 ;;                  1    wreg      void 
 11977 ;; Registers used:
 11978 ;;		wreg, status,2
 11979 ;; Tracked objects:
 11980 ;;		On entry : 0/0
 11981 ;;		On exit  : 0/0
 11982 ;;		Unchanged: 0/0
 11983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11987 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11988 ;;Total ram usage:        0 bytes
 11989 ;; Hardware stack levels used:    1
 11990 ;; This function calls:
 11991 ;;		Nothing
 11992 ;; This function is called by:
 11993 ;;		i2_init_uart
 11994 ;; This function uses a non-reentrant model
 11995 ;;
 11996                           
 11997                           	psect	text54
 11998  0022C8                     __ptext54:
 11999                           	opt stack 0
 12000  0022C8                     i2_init_md_uart:
 12001                           	opt stack 21
 12002                           
 12003                           ;uart.c: 36: BAUDCON1bits.BRG16 = 1;
 12004                           
 12005                           ;incstack = 0
 12006  0022C8  86B8               	bsf	4024,3,c	;volatile
 12007                           
 12008                           ;uart.c: 37: BAUDCON1bits.RCIDL = 1;
 12009  0022CA  8CB8               	bsf	4024,6,c	;volatile
 12010                           
 12011                           ;uart.c: 38: BAUDCONbits.CKTXP = 0;
 12012  0022CC  98B8               	bcf	4024,4,c	;volatile
 12013                           
 12014                           ;uart.c: 39: BAUDCONbits.WUE = 0;
 12015  0022CE  92B8               	bcf	4024,1,c	;volatile
 12016                           
 12017                           ;uart.c: 40: BAUDCONbits.ABDEN = 0;
 12018  0022D0  90B8               	bcf	4024,0,c	;volatile
 12019                           
 12020                           ;uart.c: 41: TXSTA1bits.BRGH = 1;
 12021  0022D2  84AC               	bsf	4012,2,c	;volatile
 12022                           
 12023                           ;uart.c: 42: TXSTA1bits.SYNC = 0;
 12024  0022D4  98AC               	bcf	4012,4,c	;volatile
 12025                           
 12026                           ;uart.c: 43: SPBRGH1 = 0;
 12027  0022D6  0E00               	movlw	0
 12028  0022D8  6EB0               	movwf	4016,c	;volatile
 12029                           
 12030                           ;uart.c: 44: SPBRG1 = 16;
 12031  0022DA  0E10               	movlw	16
 12032  0022DC  6EAF               	movwf	4015,c	;volatile
 12033                           
 12034                           ;uart.c: 46: RC1STAbits.SPEN = 1;
 12035  0022DE  8EAB               	bsf	4011,7,c	;volatile
 12036                           
 12037                           ;uart.c: 47: TRISCbits.TRISC7 = 1;
 12038  0022E0  8E94               	bsf	3988,7,c	;volatile
 12039                           
 12040                           ;uart.c: 48: TRISCbits.TRISC6 = 0;
 12041  0022E2  9C94               	bcf	3988,6,c	;volatile
 12042                           
 12043                           ;uart.c: 51: RCSTA1bits.CREN = 1;
 12044  0022E4  88AB               	bsf	4011,4,c	;volatile
 12045                           
 12046                           ;uart.c: 52: TXSTA1bits.TXEN = 1;
 12047  0022E6  8AAC               	bsf	4012,5,c	;volatile
 12048                           
 12049                           ;uart.c: 54: PIR1bits.RC1IF = 0;
 12050  0022E8  9A9E               	bcf	3998,5,c	;volatile
 12051  0022EA  0012               	return		;funcret
 12052  0022EC                     __end_ofi2_init_md_uart:
 12053                           	opt stack 0
 12054                           pclatu	equ	0xFFB
 12055                           pclath	equ	0xFFA
 12056                           tblptru	equ	0xFF8
 12057                           tblptrh	equ	0xFF7
 12058                           tblptrl	equ	0xFF6
 12059                           tablat	equ	0xFF5
 12060                           prodh	equ	0xFF4
 12061                           prodl	equ	0xFF3
 12062                           intcon	equ	0xFF2
 12063                           postinc0	equ	0xFEE
 12064                           fsr0h	equ	0xFEA
 12065                           fsr0l	equ	0xFE9
 12066                           wreg	equ	0xFE8
 12067                           indf1	equ	0xFE7
 12068                           postinc1	equ	0xFE6
 12069                           postdec1	equ	0xFE5
 12070                           plusw1	equ	0xFE3
 12071                           fsr1h	equ	0xFE2
 12072                           fsr1l	equ	0xFE1
 12073                           indf2	equ	0xFDF
 12074                           postinc2	equ	0xFDE
 12075                           plusw2	equ	0xFDB
 12076                           fsr2h	equ	0xFDA
 12077                           fsr2l	equ	0xFD9
 12078                           status	equ	0xFD8
 12079                           
 12080 ;; *************** function i2_ee_read *****************
 12081 ;; Defined at:
 12082 ;;		line 4 in file "ee.c"
 12083 ;; Parameters:    Size  Location     Type
 12084 ;;  page            1    wreg     unsigned char 
 12085 ;;  addr            1    0[COMRAM] unsigned char 
 12086 ;; Auto vars:     Size  Location     Type
 12087 ;;  page            1    1[COMRAM] unsigned char 
 12088 ;;  ee_read         1    2[COMRAM] unsigned char 
 12089 ;; Return value:  Size  Location     Type
 12090 ;;                  1    wreg      unsigned char 
 12091 ;; Registers used:
 12092 ;;		wreg, status,2
 12093 ;; Tracked objects:
 12094 ;;		On entry : 0/0
 12095 ;;		On exit  : 0/0
 12096 ;;		Unchanged: 0/0
 12097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12098 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12099 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12101 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12102 ;;Total ram usage:        3 bytes
 12103 ;; Hardware stack levels used:    1
 12104 ;; This function calls:
 12105 ;;		Nothing
 12106 ;; This function is called by:
 12107 ;;		_isr
 12108 ;; This function uses a non-reentrant model
 12109 ;;
 12110                           
 12111                           	psect	text55
 12112  00232A                     __ptext55:
 12113                           	opt stack 0
 12114  00232A                     i2_ee_read:
 12115                           	opt stack 22
 12116                           
 12117                           ;incstack = 0
 12118                           ;i2ee_read@page stored from wreg
 12119  00232A  6E25               	movwf	i2ee_read@page,c
 12120                           
 12121                           ;ee.c: 6: uint8_t data;
 12122                           ;ee.c: 7: GIE = 0;
 12123  00232C  9EF2               	bcf	intcon,7,c	;volatile
 12124                           
 12125                           ;ee.c: 8: EEADRH = page;
 12126  00232E  C025  FFAA         	movff	i2ee_read@page,4010	;volatile
 12127                           
 12128                           ;ee.c: 9: EEADR = addr;
 12129  002332  C024  FFA9         	movff	i2ee_read@addr,4009	;volatile
 12130                           
 12131                           ;ee.c: 10: CFGS = 0;
 12132  002336  9CA6               	bcf	4006,6,c	;volsfr
 12133                           
 12134                           ;ee.c: 11: EEPGD = 0;
 12135  002338  9EA6               	bcf	4006,7,c	;volsfr
 12136                           
 12137                           ;ee.c: 12: RD = 1;
 12138  00233A  80A6               	bsf	4006,0,c	;volsfr
 12139                           
 12140                           ;ee.c: 13: data = EEDATA;
 12141  00233C  CFA8 F026          	movff	4008,i2ee_read@data	;volatile
 12142                           
 12143                           ;ee.c: 14: GIE = 1;
 12144  002340  8EF2               	bsf	intcon,7,c	;volatile
 12145                           
 12146                           ;ee.c: 15: return(data);
 12147  002342  5026               	movf	i2ee_read@data,w,c
 12148  002344  0012               	return	
 12149  002346                     __end_ofi2_ee_read:
 12150                           	opt stack 0
 12151                           pclatu	equ	0xFFB
 12152                           pclath	equ	0xFFA
 12153                           tblptru	equ	0xFF8
 12154                           tblptrh	equ	0xFF7
 12155                           tblptrl	equ	0xFF6
 12156                           tablat	equ	0xFF5
 12157                           prodh	equ	0xFF4
 12158                           prodl	equ	0xFF3
 12159                           intcon	equ	0xFF2
 12160                           postinc0	equ	0xFEE
 12161                           fsr0h	equ	0xFEA
 12162                           fsr0l	equ	0xFE9
 12163                           wreg	equ	0xFE8
 12164                           indf1	equ	0xFE7
 12165                           postinc1	equ	0xFE6
 12166                           postdec1	equ	0xFE5
 12167                           plusw1	equ	0xFE3
 12168                           fsr1h	equ	0xFE2
 12169                           fsr1l	equ	0xFE1
 12170                           indf2	equ	0xFDF
 12171                           postinc2	equ	0xFDE
 12172                           plusw2	equ	0xFDB
 12173                           fsr2h	equ	0xFDA
 12174                           fsr2l	equ	0xFD9
 12175                           status	equ	0xFD8
 12176                           
 12177 ;; *************** function i2_disable_tmr5 *****************
 12178 ;; Defined at:
 12179 ;;		line 273 in file "io.c"
 12180 ;; Parameters:    Size  Location     Type
 12181 ;;		None
 12182 ;; Auto vars:     Size  Location     Type
 12183 ;;		None
 12184 ;; Return value:  Size  Location     Type
 12185 ;;                  1    wreg      void 
 12186 ;; Registers used:
 12187 ;;		wreg, status,2
 12188 ;; Tracked objects:
 12189 ;;		On entry : 0/0
 12190 ;;		On exit  : 0/0
 12191 ;;		Unchanged: 0/0
 12192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12196 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12197 ;;Total ram usage:        0 bytes
 12198 ;; Hardware stack levels used:    1
 12199 ;; This function calls:
 12200 ;;		Nothing
 12201 ;; This function is called by:
 12202 ;;		_isr
 12203 ;; This function uses a non-reentrant model
 12204 ;;
 12205                           
 12206                           	psect	text56
 12207  002422                     __ptext56:
 12208                           	opt stack 0
 12209  002422                     i2_disable_tmr5:
 12210                           	opt stack 22
 12211                           
 12212                           ;io.c: 275: tmr5_cnt = 0;
 12213                           
 12214                           ;incstack = 0
 12215  002422  0E00               	movlw	0
 12216  002424  6E1B               	movwf	_tmr5_cnt,c
 12217                           
 12218                           ;io.c: 276: T5CONbits.TMR5ON = 0;
 12219  002426  010F               	movlb	15	; () banked
 12220  002428  914E               	bcf	78,0,b	;volatile
 12221                           
 12222                           ; BSR set to: 15
 12223                           ;io.c: 277: PIE5bits.TMR5IE = 0;
 12224  00242A  927D               	bcf	3965,1,c	;volatile
 12225                           
 12226                           ; BSR set to: 15
 12227  00242C  0012               	return		;funcret
 12228  00242E                     __end_ofi2_disable_tmr5:
 12229                           	opt stack 0
 12230                           pclatu	equ	0xFFB
 12231                           pclath	equ	0xFFA
 12232                           tblptru	equ	0xFF8
 12233                           tblptrh	equ	0xFF7
 12234                           tblptrl	equ	0xFF6
 12235                           tablat	equ	0xFF5
 12236                           prodh	equ	0xFF4
 12237                           prodl	equ	0xFF3
 12238                           intcon	equ	0xFF2
 12239                           postinc0	equ	0xFEE
 12240                           fsr0h	equ	0xFEA
 12241                           fsr0l	equ	0xFE9
 12242                           wreg	equ	0xFE8
 12243                           indf1	equ	0xFE7
 12244                           postinc1	equ	0xFE6
 12245                           postdec1	equ	0xFE5
 12246                           plusw1	equ	0xFE3
 12247                           fsr1h	equ	0xFE2
 12248                           fsr1l	equ	0xFE1
 12249                           indf2	equ	0xFDF
 12250                           postinc2	equ	0xFDE
 12251                           plusw2	equ	0xFDB
 12252                           fsr2h	equ	0xFDA
 12253                           fsr2l	equ	0xFD9
 12254                           status	equ	0xFD8
 12255                           
 12256 ;; *************** function i2_disable_md_rxint *****************
 12257 ;; Defined at:
 12258 ;;		line 74 in file "uart.c"
 12259 ;; Parameters:    Size  Location     Type
 12260 ;;		None
 12261 ;; Auto vars:     Size  Location     Type
 12262 ;;		None
 12263 ;; Return value:  Size  Location     Type
 12264 ;;                  1    wreg      void 
 12265 ;; Registers used:
 12266 ;;		None
 12267 ;; Tracked objects:
 12268 ;;		On entry : 0/0
 12269 ;;		On exit  : 0/0
 12270 ;;		Unchanged: 0/0
 12271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12275 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12276 ;;Total ram usage:        0 bytes
 12277 ;; Hardware stack levels used:    1
 12278 ;; This function calls:
 12279 ;;		Nothing
 12280 ;; This function is called by:
 12281 ;;		_isr
 12282 ;; This function uses a non-reentrant model
 12283 ;;
 12284                           
 12285                           	psect	text57
 12286  002442                     __ptext57:
 12287                           	opt stack 0
 12288  002442                     i2_disable_md_rxint:
 12289                           	opt stack 22
 12290                           
 12291                           ;uart.c: 76: CREN1 = 0;
 12292                           
 12293                           ; BSR set to: 15
 12294                           ;incstack = 0
 12295  002442  98AB               	bcf	4011,4,c	;volatile
 12296                           
 12297                           ;uart.c: 77: GIE = 0;
 12298  002444  9EF2               	bcf	intcon,7,c	;volatile
 12299                           
 12300                           ;uart.c: 78: PIE1bits.RC1IE = 0;
 12301  002446  9A9D               	bcf	3997,5,c	;volatile
 12302                           
 12303                           ;uart.c: 79: GIE = 1;
 12304  002448  8EF2               	bsf	intcon,7,c	;volatile
 12305  00244A  0012               	return		;funcret
 12306  00244C                     __end_ofi2_disable_md_rxint:
 12307                           	opt stack 0
 12308                           pclatu	equ	0xFFB
 12309                           pclath	equ	0xFFA
 12310                           tblptru	equ	0xFF8
 12311                           tblptrh	equ	0xFF7
 12312                           tblptrl	equ	0xFF6
 12313                           tablat	equ	0xFF5
 12314                           prodh	equ	0xFF4
 12315                           prodl	equ	0xFF3
 12316                           intcon	equ	0xFF2
 12317                           postinc0	equ	0xFEE
 12318                           fsr0h	equ	0xFEA
 12319                           fsr0l	equ	0xFE9
 12320                           wreg	equ	0xFE8
 12321                           indf1	equ	0xFE7
 12322                           postinc1	equ	0xFE6
 12323                           postdec1	equ	0xFE5
 12324                           plusw1	equ	0xFE3
 12325                           fsr1h	equ	0xFE2
 12326                           fsr1l	equ	0xFE1
 12327                           indf2	equ	0xFDF
 12328                           postinc2	equ	0xFDE
 12329                           plusw2	equ	0xFDB
 12330                           fsr2h	equ	0xFDA
 12331                           fsr2l	equ	0xFD9
 12332                           status	equ	0xFD8
 12333                           
 12334 ;; *************** function _start_sensor_tmr *****************
 12335 ;; Defined at:
 12336 ;;		line 280 in file "io.c"
 12337 ;; Parameters:    Size  Location     Type
 12338 ;;		None
 12339 ;; Auto vars:     Size  Location     Type
 12340 ;;		None
 12341 ;; Return value:  Size  Location     Type
 12342 ;;                  1    wreg      void 
 12343 ;; Registers used:
 12344 ;;		wreg, status,2
 12345 ;; Tracked objects:
 12346 ;;		On entry : 0/0
 12347 ;;		On exit  : 0/0
 12348 ;;		Unchanged: 0/0
 12349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12353 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12354 ;;Total ram usage:        0 bytes
 12355 ;; Hardware stack levels used:    1
 12356 ;; This function calls:
 12357 ;;		Nothing
 12358 ;; This function is called by:
 12359 ;;		_isr
 12360 ;; This function uses a non-reentrant model
 12361 ;;
 12362                           
 12363                           	psect	text58
 12364  002236                     __ptext58:
 12365                           	opt stack 0
 12366  002236                     _start_sensor_tmr:
 12367                           	opt stack 22
 12368                           
 12369                           ;io.c: 282: t4_tick = 0;
 12370                           
 12371                           ;incstack = 0
 12372  002236  0E00               	movlw	0
 12373  002238  0100               	movlb	0	; () banked
 12374  00223A  6FB2               	movwf	(_t4_tick+1)& (0+255),b
 12375  00223C  0E00               	movlw	0
 12376  00223E  6FB1               	movwf	_t4_tick& (0+255),b
 12377                           
 12378                           ;io.c: 283: T4CONbits.T4CKPS = 0b10;
 12379  002240  010F               	movlb	15	; () banked
 12380  002242  5151               	movf	81,w,b	;volatile
 12381  002244  0BFC               	andlw	-4
 12382  002246  0902               	iorlw	2
 12383  002248  6F51               	movwf	81,b	;volatile
 12384                           
 12385                           ; BSR set to: 15
 12386                           ;io.c: 284: T4CONbits.T4OUTPS = 0b1111;
 12387  00224A  8751               	bsf	81,3,b	;volatile
 12388  00224C  8951               	bsf	81,4,b	;volatile
 12389  00224E  8B51               	bsf	81,5,b	;volatile
 12390  002250  8D51               	bsf	81,6,b	;volatile
 12391                           
 12392                           ; BSR set to: 15
 12393                           ;io.c: 285: T4CONbits.TMR4ON = 1;
 12394  002252  8551               	bsf	81,2,b	;volatile
 12395                           
 12396                           ; BSR set to: 15
 12397                           ;io.c: 286: PIE5bits.TMR4IE = 1;
 12398  002254  807D               	bsf	3965,0,c	;volatile
 12399                           
 12400                           ; BSR set to: 15
 12401                           ;io.c: 287: INTCONbits.PEIE = 1;
 12402  002256  8CF2               	bsf	intcon,6,c	;volatile
 12403                           
 12404                           ; BSR set to: 15
 12405                           ;io.c: 288: INTCONbits.GIE = 1;
 12406  002258  8EF2               	bsf	intcon,7,c	;volatile
 12407                           
 12408                           ; BSR set to: 15
 12409  00225A  0012               	return		;funcret
 12410  00225C                     __end_of_start_sensor_tmr:
 12411                           	opt stack 0
 12412                           pclatu	equ	0xFFB
 12413                           pclath	equ	0xFFA
 12414                           tblptru	equ	0xFF8
 12415                           tblptrh	equ	0xFF7
 12416                           tblptrl	equ	0xFF6
 12417                           tablat	equ	0xFF5
 12418                           prodh	equ	0xFF4
 12419                           prodl	equ	0xFF3
 12420                           intcon	equ	0xFF2
 12421                           postinc0	equ	0xFEE
 12422                           fsr0h	equ	0xFEA
 12423                           fsr0l	equ	0xFE9
 12424                           wreg	equ	0xFE8
 12425                           indf1	equ	0xFE7
 12426                           postinc1	equ	0xFE6
 12427                           postdec1	equ	0xFE5
 12428                           plusw1	equ	0xFE3
 12429                           fsr1h	equ	0xFE2
 12430                           fsr1l	equ	0xFE1
 12431                           indf2	equ	0xFDF
 12432                           postinc2	equ	0xFDE
 12433                           plusw2	equ	0xFDB
 12434                           fsr2h	equ	0xFDA
 12435                           fsr2l	equ	0xFD9
 12436                           status	equ	0xFD8
 12437                           
 12438 ;; *************** function _reload_timer0 *****************
 12439 ;; Defined at:
 12440 ;;		line 378 in file "io.c"
 12441 ;; Parameters:    Size  Location     Type
 12442 ;;		None
 12443 ;; Auto vars:     Size  Location     Type
 12444 ;;		None
 12445 ;; Return value:  Size  Location     Type
 12446 ;;                  1    wreg      void 
 12447 ;; Registers used:
 12448 ;;		wreg, status,2
 12449 ;; Tracked objects:
 12450 ;;		On entry : 0/0
 12451 ;;		On exit  : 0/0
 12452 ;;		Unchanged: 0/0
 12453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12457 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12458 ;;Total ram usage:        0 bytes
 12459 ;; Hardware stack levels used:    1
 12460 ;; This function calls:
 12461 ;;		Nothing
 12462 ;; This function is called by:
 12463 ;;		_isr
 12464 ;; This function uses a non-reentrant model
 12465 ;;
 12466                           
 12467                           	psect	text59
 12468  00244C                     __ptext59:
 12469                           	opt stack 0
 12470  00244C                     _reload_timer0:
 12471                           	opt stack 22
 12472                           
 12473                           ;io.c: 380: TMR0L = ((65535-781)%256);
 12474                           
 12475                           ; BSR set to: 15
 12476                           ;incstack = 0
 12477  00244C  0EF2               	movlw	242
 12478  00244E  6ED6               	movwf	4054,c	;volatile
 12479                           
 12480                           ;io.c: 381: TMR0H = ((65535-781)/256);
 12481  002450  0EFC               	movlw	252
 12482  002452  6ED7               	movwf	4055,c	;volatile
 12483  002454  0012               	return		;funcret
 12484  002456                     __end_of_reload_timer0:
 12485                           	opt stack 0
 12486                           pclatu	equ	0xFFB
 12487                           pclath	equ	0xFFA
 12488                           tblptru	equ	0xFF8
 12489                           tblptrh	equ	0xFF7
 12490                           tblptrl	equ	0xFF6
 12491                           tablat	equ	0xFF5
 12492                           prodh	equ	0xFF4
 12493                           prodl	equ	0xFF3
 12494                           intcon	equ	0xFF2
 12495                           postinc0	equ	0xFEE
 12496                           fsr0h	equ	0xFEA
 12497                           fsr0l	equ	0xFE9
 12498                           wreg	equ	0xFE8
 12499                           indf1	equ	0xFE7
 12500                           postinc1	equ	0xFE6
 12501                           postdec1	equ	0xFE5
 12502                           plusw1	equ	0xFE3
 12503                           fsr1h	equ	0xFE2
 12504                           fsr1l	equ	0xFE1
 12505                           indf2	equ	0xFDF
 12506                           postinc2	equ	0xFDE
 12507                           plusw2	equ	0xFDB
 12508                           fsr2h	equ	0xFDA
 12509                           fsr2l	equ	0xFD9
 12510                           status	equ	0xFD8
 12511                           
 12512 ;; *************** function _disable_tmr3 *****************
 12513 ;; Defined at:
 12514 ;;		line 359 in file "io.c"
 12515 ;; Parameters:    Size  Location     Type
 12516 ;;		None
 12517 ;; Auto vars:     Size  Location     Type
 12518 ;;		None
 12519 ;; Return value:  Size  Location     Type
 12520 ;;                  1    wreg      void 
 12521 ;; Registers used:
 12522 ;;		wreg, status,2
 12523 ;; Tracked objects:
 12524 ;;		On entry : 0/0
 12525 ;;		On exit  : 0/0
 12526 ;;		Unchanged: 0/0
 12527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12529 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12531 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12532 ;;Total ram usage:        0 bytes
 12533 ;; Hardware stack levels used:    1
 12534 ;; This function calls:
 12535 ;;		Nothing
 12536 ;; This function is called by:
 12537 ;;		_isr
 12538 ;; This function uses a non-reentrant model
 12539 ;;
 12540                           
 12541                           	psect	text60
 12542  0023FC                     __ptext60:
 12543                           	opt stack 0
 12544  0023FC                     _disable_tmr3:
 12545                           	opt stack 22
 12546                           
 12547                           ;io.c: 361: buttonPressCount = 0;
 12548                           
 12549                           ;incstack = 0
 12550  0023FC  0E00               	movlw	0
 12551  0023FE  6E14               	movwf	_buttonPressCount,c
 12552                           
 12553                           ;io.c: 362: tmr3_cnt = 0;
 12554  002400  0E00               	movlw	0
 12555  002402  6E11               	movwf	_tmr3_cnt,c
 12556                           
 12557                           ;io.c: 363: T3CONbits.TMR3ON = 0;
 12558  002404  90B1               	bcf	4017,0,c	;volatile
 12559                           
 12560                           ;io.c: 364: PIE2bits.TMR3IE = 0;
 12561  002406  92A0               	bcf	4000,1,c	;volatile
 12562  002408  0012               	return		;funcret
 12563  00240A                     __end_of_disable_tmr3:
 12564                           	opt stack 0
 12565                           pclatu	equ	0xFFB
 12566                           pclath	equ	0xFFA
 12567                           tblptru	equ	0xFF8
 12568                           tblptrh	equ	0xFF7
 12569                           tblptrl	equ	0xFF6
 12570                           tablat	equ	0xFF5
 12571                           prodh	equ	0xFF4
 12572                           prodl	equ	0xFF3
 12573                           intcon	equ	0xFF2
 12574                           postinc0	equ	0xFEE
 12575                           fsr0h	equ	0xFEA
 12576                           fsr0l	equ	0xFE9
 12577                           wreg	equ	0xFE8
 12578                           indf1	equ	0xFE7
 12579                           postinc1	equ	0xFE6
 12580                           postdec1	equ	0xFE5
 12581                           plusw1	equ	0xFE3
 12582                           fsr1h	equ	0xFE2
 12583                           fsr1l	equ	0xFE1
 12584                           indf2	equ	0xFDF
 12585                           postinc2	equ	0xFDE
 12586                           plusw2	equ	0xFDB
 12587                           fsr2h	equ	0xFDA
 12588                           fsr2l	equ	0xFD9
 12589                           status	equ	0xFD8
 12590                           
 12591 ;; *************** function _control_leds *****************
 12592 ;; Defined at:
 12593 ;;		line 386 in file "io.c"
 12594 ;; Parameters:    Size  Location     Type
 12595 ;;		None
 12596 ;; Auto vars:     Size  Location     Type
 12597 ;;		None
 12598 ;; Return value:  Size  Location     Type
 12599 ;;                  1    wreg      void 
 12600 ;; Registers used:
 12601 ;;		wreg, status,2, status,0
 12602 ;; Tracked objects:
 12603 ;;		On entry : 0/0
 12604 ;;		On exit  : 0/0
 12605 ;;		Unchanged: 0/0
 12606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12610 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12611 ;;Total ram usage:        0 bytes
 12612 ;; Hardware stack levels used:    1
 12613 ;; This function calls:
 12614 ;;		Nothing
 12615 ;; This function is called by:
 12616 ;;		_isr
 12617 ;; This function uses a non-reentrant model
 12618 ;;
 12619                           
 12620                           	psect	text61
 12621  001900                     __ptext61:
 12622                           	opt stack 0
 12623  001900                     _control_leds:
 12624                           	opt stack 22
 12625                           
 12626                           ;io.c: 388: switch (STATE)
 12627                           
 12628                           ;incstack = 0
 12629  001900  D054               	goto	i2l559
 12630  001902                     
 12631                           ;io.c: 391: if (waiting)
 12632  001902  5043               	movf	_waiting,w,c
 12633  001904  B4D8               	btfsc	status,2,c
 12634  001906  0012               	return	
 12635  001908  D007               	goto	i2l562
 12636  00190A                     i2l563:
 12637                           
 12638                           ;io.c: 396: LATB3=0;
 12639  00190A  968A               	bcf	3978,3,c	;volatile
 12640                           
 12641                           ;io.c: 397: break;
 12642  00190C  D00F               	goto	i2l564
 12643  00190E                     i2l565:
 12644                           
 12645                           ;io.c: 399: LATB3=1;
 12646  00190E  868A               	bsf	3978,3,c	;volatile
 12647                           
 12648                           ;io.c: 400: break;
 12649  001910  D00D               	goto	i2l564
 12650  001912                     
 12651                           ;io.c: 402: gled_tmr0_tick = 0;
 12652  001912  0E00               	movlw	0
 12653  001914  6E13               	movwf	_gled_tmr0_tick,c
 12654                           
 12655                           ;io.c: 404: }
 12656                           
 12657                           ;io.c: 403: break;
 12658  001916  D00A               	goto	i2l564
 12659  001918                     i2l562:
 12660  001918  5013               	movf	_gled_tmr0_tick,w,c
 12661                           
 12662                           ; Switch size 1, requested type "space"
 12663                           ; Number of cases is 3, Range of values is 1 to 20
 12664                           ; switch strategies available:
 12665                           ; Name         Instructions Cycles
 12666                           ; simple_byte           10     6 (average)
 12667                           ;	Chosen strategy is simple_byte
 12668  00191A  0A01               	xorlw	1	; case 1
 12669  00191C  B4D8               	btfsc	status,2,c
 12670  00191E  D7F5               	goto	i2l563
 12671  001920  0A04               	xorlw	4	; case 5
 12672  001922  B4D8               	btfsc	status,2,c
 12673  001924  D7F4               	goto	i2l565
 12674  001926  0A11               	xorlw	17	; case 20
 12675  001928  B4D8               	btfsc	status,2,c
 12676  00192A  D7F3               	goto	i2l566
 12677  00192C                     i2l564:
 12678                           
 12679                           ;io.c: 405: LATC4=1;
 12680  00192C  888B               	bsf	3979,4,c	;volatile
 12681                           
 12682                           ;io.c: 406: bled_tmr0_tick = 0;
 12683  00192E  0E00               	movlw	0
 12684  001930  6E12               	movwf	_bled_tmr0_tick,c
 12685                           
 12686                           ;io.c: 407: }
 12687                           ;io.c: 408: break;
 12688  001932  0012               	return	
 12689  001934                     i2l570:
 12690                           
 12691                           ;io.c: 414: LATC4=0;
 12692  001934  988B               	bcf	3979,4,c	;volatile
 12693                           
 12694                           ;io.c: 415: break;
 12695  001936  D00B               	goto	i2l571
 12696  001938                     i2l572:
 12697                           
 12698                           ;io.c: 417: LATC4=1;
 12699  001938  888B               	bsf	3979,4,c	;volatile
 12700                           
 12701                           ;io.c: 418: bled_tmr0_tick = 0;
 12702  00193A  0E00               	movlw	0
 12703  00193C  6E12               	movwf	_bled_tmr0_tick,c
 12704                           
 12705                           ;io.c: 420: }
 12706                           
 12707                           ;io.c: 419: break;
 12708  00193E  D007               	goto	i2l571
 12709  001940  5012               	movf	_bled_tmr0_tick,w,c
 12710                           
 12711                           ; Switch size 1, requested type "space"
 12712                           ; Number of cases is 2, Range of values is 1 to 2
 12713                           ; switch strategies available:
 12714                           ; Name         Instructions Cycles
 12715                           ; simple_byte            7     4 (average)
 12716                           ;	Chosen strategy is simple_byte
 12717  001942  0A01               	xorlw	1	; case 1
 12718  001944  B4D8               	btfsc	status,2,c
 12719  001946  D7F6               	goto	i2l570
 12720  001948  0A03               	xorlw	3	; case 2
 12721  00194A  B4D8               	btfsc	status,2,c
 12722  00194C  D7F5               	goto	i2l572
 12723  00194E                     i2l571:
 12724                           
 12725                           ;io.c: 421: LATB3=1;
 12726  00194E  868A               	bsf	3978,3,c	;volatile
 12727                           
 12728                           ;io.c: 422: gled_tmr0_tick = 0;
 12729  001950  0E00               	movlw	0
 12730  001952  6E13               	movwf	_gled_tmr0_tick,c
 12731                           
 12732                           ;io.c: 423: break;
 12733  001954  0012               	return	
 12734  001956                     i2l575:
 12735                           
 12736                           ;io.c: 429: LATC4=0;
 12737  001956  988B               	bcf	3979,4,c	;volatile
 12738                           
 12739                           ;io.c: 430: break;
 12740  001958  D00F               	goto	i2l576
 12741  00195A                     i2l577:
 12742                           
 12743                           ;io.c: 432: LATC4=1;
 12744  00195A  888B               	bsf	3979,4,c	;volatile
 12745                           
 12746                           ;io.c: 433: break;
 12747  00195C  D00D               	goto	i2l576
 12748  00195E                     
 12749                           ;io.c: 435: bled_tmr0_tick = 0;
 12750  00195E  0E00               	movlw	0
 12751  001960  6E12               	movwf	_bled_tmr0_tick,c
 12752                           
 12753                           ;io.c: 437: }
 12754                           
 12755                           ;io.c: 436: break;
 12756  001962  D00A               	goto	i2l576
 12757  001964  5012               	movf	_bled_tmr0_tick,w,c
 12758                           
 12759                           ; Switch size 1, requested type "space"
 12760                           ; Number of cases is 3, Range of values is 1 to 20
 12761                           ; switch strategies available:
 12762                           ; Name         Instructions Cycles
 12763                           ; simple_byte           10     6 (average)
 12764                           ;	Chosen strategy is simple_byte
 12765  001966  0A01               	xorlw	1	; case 1
 12766  001968  B4D8               	btfsc	status,2,c
 12767  00196A  D7F5               	goto	i2l575
 12768  00196C  0A04               	xorlw	4	; case 5
 12769  00196E  B4D8               	btfsc	status,2,c
 12770  001970  D7F4               	goto	i2l577
 12771  001972  0A11               	xorlw	17	; case 20
 12772  001974  B4D8               	btfsc	status,2,c
 12773  001976  D7F3               	goto	i2l578
 12774  001978                     i2l576:
 12775                           
 12776                           ;io.c: 438: LATB3=0;
 12777  001978  968A               	bcf	3978,3,c	;volatile
 12778                           
 12779                           ;io.c: 439: gled_tmr0_tick = 0;
 12780  00197A  0E00               	movlw	0
 12781  00197C  6E13               	movwf	_gled_tmr0_tick,c
 12782                           
 12783                           ;io.c: 440: break;
 12784  00197E  0012               	return	
 12785  001980                     i2l581:
 12786                           
 12787                           ;io.c: 446: LATB3=0;
 12788  001980  968A               	bcf	3978,3,c	;volatile
 12789                           
 12790                           ;io.c: 447: break;
 12791  001982  D00F               	goto	i2l582
 12792  001984                     i2l583:
 12793                           
 12794                           ;io.c: 449: LATB3=1;
 12795  001984  868A               	bsf	3978,3,c	;volatile
 12796                           
 12797                           ;io.c: 450: break;
 12798  001986  D00D               	goto	i2l582
 12799  001988                     
 12800                           ;io.c: 452: gled_tmr0_tick = 0;
 12801  001988  0E00               	movlw	0
 12802  00198A  6E13               	movwf	_gled_tmr0_tick,c
 12803                           
 12804                           ;io.c: 454: }
 12805                           
 12806                           ;io.c: 453: break;
 12807  00198C  D00A               	goto	i2l582
 12808  00198E  5013               	movf	_gled_tmr0_tick,w,c
 12809                           
 12810                           ; Switch size 1, requested type "space"
 12811                           ; Number of cases is 3, Range of values is 1 to 20
 12812                           ; switch strategies available:
 12813                           ; Name         Instructions Cycles
 12814                           ; simple_byte           10     6 (average)
 12815                           ;	Chosen strategy is simple_byte
 12816  001990  0A01               	xorlw	1	; case 1
 12817  001992  B4D8               	btfsc	status,2,c
 12818  001994  D7F5               	goto	i2l581
 12819  001996  0A04               	xorlw	4	; case 5
 12820  001998  B4D8               	btfsc	status,2,c
 12821  00199A  D7F4               	goto	i2l583
 12822  00199C  0A11               	xorlw	17	; case 20
 12823  00199E  B4D8               	btfsc	status,2,c
 12824  0019A0  D7F3               	goto	i2l584
 12825  0019A2                     i2l582:
 12826                           
 12827                           ;io.c: 455: LATC4=0;
 12828  0019A2  988B               	bcf	3979,4,c	;volatile
 12829                           
 12830                           ;io.c: 456: bled_tmr0_tick = 0;
 12831  0019A4  0E00               	movlw	0
 12832  0019A6  6E12               	movwf	_bled_tmr0_tick,c
 12833                           
 12834                           ;io.c: 458: }
 12835                           
 12836                           ;io.c: 457: break;
 12837  0019A8  0012               	return	
 12838  0019AA                     i2l559:
 12839  0019AA  501E               	movf	_STATE,w,c
 12840                           
 12841                           ; Switch size 1, requested type "space"
 12842                           ; Number of cases is 4, Range of values is 0 to 4
 12843                           ; switch strategies available:
 12844                           ; Name         Instructions Cycles
 12845                           ; simple_byte           13     7 (average)
 12846                           ;	Chosen strategy is simple_byte
 12847  0019AC  0A00               	xorlw	0	; case 0
 12848  0019AE  B4D8               	btfsc	status,2,c
 12849  0019B0  D7A8               	goto	i2l560
 12850  0019B2  0A02               	xorlw	2	; case 2
 12851  0019B4  B4D8               	btfsc	status,2,c
 12852  0019B6  D7C4               	goto	i2l569
 12853  0019B8  0A01               	xorlw	1	; case 3
 12854  0019BA  B4D8               	btfsc	status,2,c
 12855  0019BC  D7D3               	goto	i2l574
 12856  0019BE  0A07               	xorlw	7	; case 4
 12857  0019C0  A4D8               	btfss	status,2,c
 12858  0019C2  0012               	return	
 12859  0019C4  D7E4               	goto	i2l580
 12860  0019C6                     __end_of_control_leds:
 12861                           	opt stack 0
 12862                           pclatu	equ	0xFFB
 12863                           pclath	equ	0xFFA
 12864                           tblptru	equ	0xFF8
 12865                           tblptrh	equ	0xFF7
 12866                           tblptrl	equ	0xFF6
 12867                           tablat	equ	0xFF5
 12868                           prodh	equ	0xFF4
 12869                           prodl	equ	0xFF3
 12870                           intcon	equ	0xFF2
 12871                           postinc0	equ	0xFEE
 12872                           fsr0h	equ	0xFEA
 12873                           fsr0l	equ	0xFE9
 12874                           wreg	equ	0xFE8
 12875                           indf1	equ	0xFE7
 12876                           postinc1	equ	0xFE6
 12877                           postdec1	equ	0xFE5
 12878                           plusw1	equ	0xFE3
 12879                           fsr1h	equ	0xFE2
 12880                           fsr1l	equ	0xFE1
 12881                           indf2	equ	0xFDF
 12882                           postinc2	equ	0xFDE
 12883                           plusw2	equ	0xFDB
 12884                           fsr2h	equ	0xFDA
 12885                           fsr2l	equ	0xFD9
 12886                           status	equ	0xFD8
 12887                           
 12888 ;; *************** function _add_event *****************
 12889 ;; Defined at:
 12890 ;;		line 19 in file "queue.c"
 12891 ;; Parameters:    Size  Location     Type
 12892 ;;  event           1    wreg     enum E6758
 12893 ;;  zone            1    3[COMRAM] unsigned char 
 12894 ;; Auto vars:     Size  Location     Type
 12895 ;;  event           1    5[COMRAM] enum E6758
 12896 ;;  i               1    6[COMRAM] unsigned char 
 12897 ;; Return value:  Size  Location     Type
 12898 ;;                  1    wreg      unsigned char 
 12899 ;; Registers used:
 12900 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12901 ;; Tracked objects:
 12902 ;;		On entry : 0/0
 12903 ;;		On exit  : 0/0
 12904 ;;		Unchanged: 0/0
 12905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12906 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12907 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12908 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12909 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12910 ;;Total ram usage:        4 bytes
 12911 ;; Hardware stack levels used:    1
 12912 ;; This function calls:
 12913 ;;		Nothing
 12914 ;; This function is called by:
 12915 ;;		_isr
 12916 ;;		_check_sensor
 12917 ;; This function uses a non-reentrant model
 12918 ;;
 12919                           
 12920                           	psect	text62
 12921  001BF0                     __ptext62:
 12922                           	opt stack 0
 12923  001BF0                     _add_event:
 12924                           	opt stack 22
 12925                           
 12926                           ;incstack = 0
 12927                           ;add_event@event stored from wreg
 12928  001BF0  6E29               	movwf	add_event@event,c
 12929                           
 12930                           ;queue.c: 21: if (queue_end_ptr == 0)
 12931  001BF2  5002               	movf	_queue_end_ptr,w,c
 12932  001BF4  A4D8               	btfss	status,2,c
 12933  001BF6  D004               	goto	i2l1271
 12934                           
 12935                           ;queue.c: 22: {
 12936                           ;queue.c: 23: event_queue[0][0] = event;
 12937  001BF8  C029  F1C1         	movff	add_event@event,_event_queue
 12938                           
 12939                           ;queue.c: 24: queue_end_ptr++;
 12940  001BFC  2A02               	incf	_queue_end_ptr,f,c
 12941                           
 12942                           ;queue.c: 25: }
 12943  001BFE  0012               	return	
 12944  001C00                     i2l1271:
 12945                           
 12946                           ;queue.c: 26: else
 12947                           ;queue.c: 27: {
 12948                           ;queue.c: 28: for (uint8_t i = 0; i < queue_end_ptr; i++)
 12949  001C00  0E00               	movlw	0
 12950  001C02  6E2A               	movwf	add_event@i,c
 12951  001C04  D01D               	goto	i2l1273
 12952  001C06                     
 12953                           ;queue.c: 29: {
 12954                           ;queue.c: 30: if (event_queue[i][0] == event && event_queue[i][1] == zone)
 12955  001C06  502A               	movf	add_event@i,w,c
 12956  001C08  0D02               	mullw	2
 12957  001C0A  0EC1               	movlw	low _event_queue
 12958  001C0C  24F3               	addwf	prodl,w,c
 12959  001C0E  6ED9               	movwf	fsr2l,c
 12960  001C10  0E01               	movlw	high _event_queue
 12961  001C12  20F4               	addwfc	prodh,w,c
 12962  001C14  6EDA               	movwf	fsr2h,c
 12963  001C16  5029               	movf	add_event@event,w,c
 12964  001C18  18DE               	xorwf	postinc2,w,c
 12965  001C1A  A4D8               	btfss	status,2,c
 12966  001C1C  D010               	goto	i2l1275
 12967  001C1E  502A               	movf	add_event@i,w,c
 12968  001C20  0D02               	mullw	2
 12969  001C22  0E01               	movlw	1
 12970  001C24  26F3               	addwf	prodl,f,c
 12971  001C26  0E00               	movlw	0
 12972  001C28  22F4               	addwfc	prodh,f,c
 12973  001C2A  0EC1               	movlw	low _event_queue
 12974  001C2C  24F3               	addwf	prodl,w,c
 12975  001C2E  6ED9               	movwf	fsr2l,c
 12976  001C30  0E01               	movlw	high _event_queue
 12977  001C32  20F4               	addwfc	prodh,w,c
 12978  001C34  6EDA               	movwf	fsr2h,c
 12979  001C36  5027               	movf	add_event@zone,w,c
 12980  001C38  18DE               	xorwf	postinc2,w,c
 12981  001C3A  B4D8               	btfsc	status,2,c
 12982  001C3C  0012               	return	
 12983  001C3E                     i2l1275:
 12984  001C3E  2A2A               	incf	add_event@i,f,c
 12985  001C40                     i2l1273:
 12986  001C40  5002               	movf	_queue_end_ptr,w,c
 12987  001C42  5C2A               	subwf	add_event@i,w,c
 12988  001C44  A0D8               	btfss	status,0,c
 12989  001C46  D7DF               	goto	i2l1274
 12990                           
 12991                           ;queue.c: 32: }
 12992                           ;queue.c: 35: event_queue[queue_end_ptr][0] = event;
 12993  001C48  5002               	movf	_queue_end_ptr,w,c
 12994  001C4A  0D02               	mullw	2
 12995  001C4C  0EC1               	movlw	low _event_queue
 12996  001C4E  24F3               	addwf	prodl,w,c
 12997  001C50  6ED9               	movwf	fsr2l,c
 12998  001C52  0E01               	movlw	high _event_queue
 12999  001C54  20F4               	addwfc	prodh,w,c
 13000  001C56  6EDA               	movwf	fsr2h,c
 13001  001C58  C029  FFDF         	movff	add_event@event,indf2
 13002                           
 13003                           ;queue.c: 36: event_queue[queue_end_ptr][1] = zone;
 13004  001C5C  5002               	movf	_queue_end_ptr,w,c
 13005  001C5E  0D02               	mullw	2
 13006  001C60  0E01               	movlw	1
 13007  001C62  26F3               	addwf	prodl,f,c
 13008  001C64  0E00               	movlw	0
 13009  001C66  22F4               	addwfc	prodh,f,c
 13010  001C68  0EC1               	movlw	low _event_queue
 13011  001C6A  24F3               	addwf	prodl,w,c
 13012  001C6C  6ED9               	movwf	fsr2l,c
 13013  001C6E  0E01               	movlw	high _event_queue
 13014  001C70  20F4               	addwfc	prodh,w,c
 13015  001C72  6EDA               	movwf	fsr2h,c
 13016  001C74  C027  FFDF         	movff	add_event@zone,indf2
 13017                           
 13018                           ;queue.c: 37: if (queue_end_ptr++ >= sizeof(event_queue))
 13019  001C78  2A02               	incf	_queue_end_ptr,f,c
 13020  001C7A  0402               	decf	_queue_end_ptr,w,c
 13021  001C7C  6E28               	movwf	??_add_event& (0+255),c
 13022  001C7E  0E27               	movlw	39
 13023  001C80  6428               	cpfsgt	??_add_event,c
 13024  001C82  0012               	return	
 13025                           
 13026                           ;queue.c: 38: queue_end_ptr--;
 13027  001C84  0602               	decf	_queue_end_ptr,f,c
 13028  001C86  0012               	return	
 13029  001C88                     __end_of_add_event:
 13030                           	opt stack 0
 13031  0000                     pclatu	equ	0xFFB
 13032                           pclath	equ	0xFFA
 13033                           tblptru	equ	0xFF8
 13034                           tblptrh	equ	0xFF7
 13035                           tblptrl	equ	0xFF6
 13036                           tablat	equ	0xFF5
 13037                           prodh	equ	0xFF4
 13038                           prodl	equ	0xFF3
 13039                           intcon	equ	0xFF2
 13040                           postinc0	equ	0xFEE
 13041                           fsr0h	equ	0xFEA
 13042                           fsr0l	equ	0xFE9
 13043                           wreg	equ	0xFE8
 13044                           indf1	equ	0xFE7
 13045                           postinc1	equ	0xFE6
 13046                           postdec1	equ	0xFE5
 13047                           plusw1	equ	0xFE3
 13048                           fsr1h	equ	0xFE2
 13049                           fsr1l	equ	0xFE1
 13050                           indf2	equ	0xFDF
 13051                           postinc2	equ	0xFDE
 13052                           plusw2	equ	0xFDB
 13053                           fsr2h	equ	0xFDA
 13054                           fsr2l	equ	0xFD9
 13055                           status	equ	0xFD8
 13056                           pclatu	equ	0xFFB
 13057                           pclath	equ	0xFFA
 13058                           tblptru	equ	0xFF8
 13059                           tblptrh	equ	0xFF7
 13060                           tblptrl	equ	0xFF6
 13061                           tablat	equ	0xFF5
 13062                           prodh	equ	0xFF4
 13063                           prodl	equ	0xFF3
 13064                           intcon	equ	0xFF2
 13065                           postinc0	equ	0xFEE
 13066                           fsr0h	equ	0xFEA
 13067                           fsr0l	equ	0xFE9
 13068                           wreg	equ	0xFE8
 13069                           indf1	equ	0xFE7
 13070                           postinc1	equ	0xFE6
 13071                           postdec1	equ	0xFE5
 13072                           plusw1	equ	0xFE3
 13073                           fsr1h	equ	0xFE2
 13074                           fsr1l	equ	0xFE1
 13075                           indf2	equ	0xFDF
 13076                           postinc2	equ	0xFDE
 13077                           plusw2	equ	0xFDB
 13078                           fsr2h	equ	0xFDA
 13079                           fsr2l	equ	0xFD9
 13080                           status	equ	0xFD8
 13081                           
 13082                           	psect	rparam
 13083  0000                     pclatu	equ	0xFFB
 13084                           pclath	equ	0xFFA
 13085                           tblptru	equ	0xFF8
 13086                           tblptrh	equ	0xFF7
 13087                           tblptrl	equ	0xFF6
 13088                           tablat	equ	0xFF5
 13089                           prodh	equ	0xFF4
 13090                           prodl	equ	0xFF3
 13091                           intcon	equ	0xFF2
 13092                           postinc0	equ	0xFEE
 13093                           fsr0h	equ	0xFEA
 13094                           fsr0l	equ	0xFE9
 13095                           wreg	equ	0xFE8
 13096                           indf1	equ	0xFE7
 13097                           postinc1	equ	0xFE6
 13098                           postdec1	equ	0xFE5
 13099                           plusw1	equ	0xFE3
 13100                           fsr1h	equ	0xFE2
 13101                           fsr1l	equ	0xFE1
 13102                           indf2	equ	0xFDF
 13103                           postinc2	equ	0xFDE
 13104                           plusw2	equ	0xFDB
 13105                           fsr2h	equ	0xFDA
 13106                           fsr2l	equ	0xFD9
 13107                           status	equ	0xFD8
 13108                           
 13109                           	psect	temp
 13110  000045                     btemp:
 13111                           	opt stack 0
 13112  000045                     	ds	1
 13113  0000                     int$flags	set	btemp
 13114  0000                     wtemp6	set	btemp+1
 13115                           pclatu	equ	0xFFB
 13116                           pclath	equ	0xFFA
 13117                           tblptru	equ	0xFF8
 13118                           tblptrh	equ	0xFF7
 13119                           tblptrl	equ	0xFF6
 13120                           tablat	equ	0xFF5
 13121                           prodh	equ	0xFF4
 13122                           prodl	equ	0xFF3
 13123                           intcon	equ	0xFF2
 13124                           postinc0	equ	0xFEE
 13125                           fsr0h	equ	0xFEA
 13126                           fsr0l	equ	0xFE9
 13127                           wreg	equ	0xFE8
 13128                           indf1	equ	0xFE7
 13129                           postinc1	equ	0xFE6
 13130                           postdec1	equ	0xFE5
 13131                           plusw1	equ	0xFE3
 13132                           fsr1h	equ	0xFE2
 13133                           fsr1l	equ	0xFE1
 13134                           indf2	equ	0xFDF
 13135                           postinc2	equ	0xFDE
 13136                           plusw2	equ	0xFDB
 13137                           fsr2h	equ	0xFDA
 13138                           fsr2l	equ	0xFD9
 13139                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        271
    BSS         433
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     28      68
    BANK0           160     81     107
    BANK1           256      0     242
    BANK2           256      0     248
    BANK3           256      0     149
    BANK4           256    132     132
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    getIndexOfLearnedSensor@sensorID	PTR unsigned char  size(2) Largest target is 5
		 -> rx2_buf(COMRAM[5]), 

    add_sensor@sensorID	PTR unsigned char  size(2) Largest target is 5
		 -> rx2_buf(COMRAM[5]), 

    program_field@data_buf	PTR unsigned char  size(2) Largest target is 60
		 -> referenceBuf(BANK3[60]), 

    md_uart_write_str_ok@data	PTR unsigned char  size(2) Largest target is 3895
		 -> startup_ok@csq(BANK4[9]), startup_ok@cereg(BANK4[12]), startup_ok@creg(BANK4[11]), startup_ok@cpin(BANK4[11]), 
		 -> startup_ok@queryVersion(BANK4[10]), startup_ok@ledpattern(BANK4[12]), startup_ok@ledCfg(BANK4[16]), startup_ok@baud(BANK4[16]), 
		 -> startup_ok@cmee(BANK4[12]), startup_ok@ate(BANK4[7]), startup_ok@at(BANK4[5]), sms_buf(BANK2[40]), 
		 -> send_sms_ok@msgIndex(BANK0[3]), send_sms_ok@cmgs(BANK0[9]), ph_num(BANK1[9]), RAM(DATA[3895]), 
		 -> read_sms@cmgd(BANK0[9]), read_sms@msgIndex(BANK0[3]), read_sms@cmgr(BANK0[9]), read_sms@cmgl(BANK0[16]), 
		 -> start_sms_ok@cnmi(BANK0[14]), start_sms_ok@cpms(BANK0[25]), start_sms_ok@cmgf(BANK0[12]), 

    del_sensor@sensorID	PTR unsigned char  size(2) Largest target is 5
		 -> rx2_buf(COMRAM[5]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_add_event
    _add_event->i2_ee_read

Critical Paths under _main in BANK0

    _load_ID->_ee_read
    _check_state->_listen_sms
    _listen_sms->_read_sms
    _start_sms_ok->_md_uart_write_str_ok
    _start_modem->_check_md_state
    _startup_ok->_parse_csq_ok
    _send_sms_ok->_md_uart_write_str_ok
    _read_sms->_parse_cmgr
    _parse_cmgr->_program_field
    _program_field->___awdiv
    _md_uart_write_str_ok->_md_uart_send
    _check_sms_timer->_ee_read_ascii_to_value
    _ee_read_ascii_to_value->_ee_read
    _del_sensor->_getIndexOfLearnedSensor
    _add_sensor->_ee_write
    _send_uart_ack->_rf_uart_send
    _ee_write->_ee_read

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    _check_md_state->_startup_ok

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   55826
                        _check_state
                   _disable_md_rxint
               _event_queue_is_empty
                           _init_pic
                            _load_ID
                  _terminate_md_uart
                  _terminate_rf_uart
 ---------------------------------------------------------------------------------
 (1) _terminate_rf_uart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _terminate_md_uart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _load_ID                                              4     4      0    1100
                                              3 BANK0      4     4      0
                            _ee_read
 ---------------------------------------------------------------------------------
 (1) _init_pic                                             0     0      0       0
                        _clear_at_ok
                        _enable_ints
                          _init_uart
 ---------------------------------------------------------------------------------
 (2) _enable_ints                                          0     0      0       0
                       _start_timer0
 ---------------------------------------------------------------------------------
 (3) _start_timer0                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _event_queue_is_empty                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _disable_md_rxint                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _check_state                                          0     0      0   54726
                         _add_sensor
                        _check_alarm
                        _check_super
                       _check_tamper
                         _check_test
                         _del_sensor
                         _listen_sms
                    _stop_sensor_tmr
 ---------------------------------------------------------------------------------
 (2) _stop_sensor_tmr                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _listen_sms                                           1     1      0   50064
                                             80 BANK0      1     1      0
                    _check_sms_timer
                           _read_sms
                        _send_sms_ok
                        _start_modem
                       _start_sms_ok
                    _start_sms_timer
 ---------------------------------------------------------------------------------
 (3) _start_sms_timer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _start_sms_ok                                        51    51      0    9867
                                              8 BANK0     51    51      0
                        _clear_at_ok
                       _init_md_uart
               _md_uart_write_str_ok
 ---------------------------------------------------------------------------------
 (3) _start_modem                                          2     2      0   12353
                                             17 BANK0      2     2      0
                     _check_md_state
                _start_md_boot_timer
 ---------------------------------------------------------------------------------
 (4) _start_md_boot_timer                                  0     0      0       0
                  _reload_tmr5_pt25s
 ---------------------------------------------------------------------------------
 (4) _check_md_state                                       1     1      0   12353
                                             16 BANK0      1     1      0
                       _disable_tmr5
                         _startup_ok
 ---------------------------------------------------------------------------------
 (5) _startup_ok                                         132   132      0   12254
                                              0 BANK4    132   132      0
                        _clear_at_ok
                       _init_md_uart
               _md_uart_write_str_ok
                     _parse_cereg_ok
                      _parse_creg_ok
                       _parse_csq_ok
 ---------------------------------------------------------------------------------
 (6) _parse_csq_ok                                        16    16      0     891
                                              0 BANK0     16    16      0
 ---------------------------------------------------------------------------------
 (6) _parse_creg_ok                                       12    12      0     554
                                              0 BANK0     12    12      0
 ---------------------------------------------------------------------------------
 (6) _parse_cereg_ok                                      13    13      0     619
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (3) _send_sms_ok                                         17    17      0   10065
                                              8 BANK0     17    17      0
                        _clear_at_ok
                       _init_md_uart
               _md_uart_write_str_ok
 ---------------------------------------------------------------------------------
 (3) _read_sms                                            39    39      0   16589
                                             41 BANK0     39    39      0
                        _clear_at_ok
                       _init_md_uart
               _md_uart_write_str_ok
                         _parse_cmgl
                         _parse_cmgr
 ---------------------------------------------------------------------------------
 (4) _parse_cmgr                                          24    24      0    6292
                                             17 BANK0     24    24      0
                            _ee_read
                      _program_field
 ---------------------------------------------------------------------------------
 (5) _program_field                                        9     6      3    3704
                                              8 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                           _ee_write
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     613
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     625
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (4) _parse_cmgl                                           8     8      0     359
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (4) _md_uart_write_str_ok                                 7     2      5    9747
                                              1 BANK0      7     2      5
                       _disable_tmr5
                    _enable_md_rxint
                       _md_uart_send
                  _reload_tmr5_pt25s
 ---------------------------------------------------------------------------------
 (5) _reload_tmr5_pt25s                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _md_uart_send                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _enable_md_rxint                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _disable_tmr5                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _clear_at_ok                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _check_sms_timer                                      1     1      0    1190
                                              6 BANK0      1     1      0
             _ee_read_ascii_to_value
                     _stop_sms_timer
 ---------------------------------------------------------------------------------
 (4) _stop_sms_timer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ee_read_ascii_to_value                               3     2      1    1156
                                              3 BANK0      3     2      1
                            _ee_read
 ---------------------------------------------------------------------------------
 (2) _del_sensor                                           5     3      2    2985
                                             11 BANK0      5     3      2
                            _ee_read
                           _ee_write
            _getIndexOfLearnedSensor
 ---------------------------------------------------------------------------------
 (3) _getIndexOfLearnedSensor                             10     8      2     545
                                              1 BANK0     10     8      2
                      _send_uart_ack
 ---------------------------------------------------------------------------------
 (2) _ee_read                                              3     2      1     871
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _check_test                                           1     1      0       0
                                              0 BANK0      1     1      0
                  _reload_tmr3_pt25s
 ---------------------------------------------------------------------------------
 (3) _reload_tmr3_pt25s                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _check_tamper                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _check_super                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _check_alarm                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _add_sensor                                          11     9      2    1677
                                              6 BANK0     11     9      2
                           _ee_write
                      _send_uart_ack
 ---------------------------------------------------------------------------------
 (4) _send_uart_ack                                        0     0      0      31
                          _init_uart
                       _rf_uart_send
 ---------------------------------------------------------------------------------
 (5) _rf_uart_send                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _init_uart                                            0     0      0       0
                       _init_md_uart
 ---------------------------------------------------------------------------------
 (3) _init_md_uart                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _ee_write                                             3     1      2     993
                                              3 BANK0      3     1      2
                            _ee_read (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _isr                                                 21    21      0     446
                                              7 COMRAM    21    21      0
                          _add_event
                       _control_leds
                       _disable_tmr3
                      _reload_timer0
                   _start_sensor_tmr
                 i2_disable_md_rxint
                     i2_disable_tmr5
                          i2_ee_read
                        i2_init_uart
                i2_reload_tmr5_pt25s
 ---------------------------------------------------------------------------------
 (9) i2_reload_tmr5_pt25s                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (9) i2_init_uart                                          0     0      0       0
                     i2_init_md_uart
 ---------------------------------------------------------------------------------
 (10) i2_init_md_uart                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) i2_ee_read                                            3     2      1      93
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (9) i2_disable_tmr5                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (9) i2_disable_md_rxint                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _start_sensor_tmr                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _reload_timer0                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _disable_tmr3                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _control_leds                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _add_event                                            4     3      1     330
                                              3 COMRAM     4     3      1
                          i2_ee_read (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _check_state
     _add_sensor
       _ee_write
         _ee_read (ARG)
       _send_uart_ack
         _init_uart
           _init_md_uart
         _rf_uart_send
     _check_alarm
     _check_super
     _check_tamper
     _check_test
       _reload_tmr3_pt25s
     _del_sensor
       _ee_read
       _ee_write
         _ee_read (ARG)
       _getIndexOfLearnedSensor
         _send_uart_ack
           _init_uart
             _init_md_uart
           _rf_uart_send
     _listen_sms
       _check_sms_timer
         _ee_read_ascii_to_value
           _ee_read
         _stop_sms_timer
       _read_sms
         _clear_at_ok
         _init_md_uart
         _md_uart_write_str_ok
           _disable_tmr5
           _enable_md_rxint
           _md_uart_send
           _reload_tmr5_pt25s
         _parse_cmgl
         _parse_cmgr
           _ee_read
           _program_field
             ___awdiv
             ___awmod
             _ee_write
               _ee_read (ARG)
       _send_sms_ok
         _clear_at_ok
         _init_md_uart
         _md_uart_write_str_ok
           _disable_tmr5
           _enable_md_rxint
           _md_uart_send
           _reload_tmr5_pt25s
       _start_modem
         _check_md_state
           _disable_tmr5
           _startup_ok
             _clear_at_ok
             _init_md_uart
             _md_uart_write_str_ok
               _disable_tmr5
               _enable_md_rxint
               _md_uart_send
               _reload_tmr5_pt25s
             _parse_cereg_ok
             _parse_creg_ok
             _parse_csq_ok
         _start_md_boot_timer
           _reload_tmr5_pt25s
       _start_sms_ok
         _clear_at_ok
         _init_md_uart
         _md_uart_write_str_ok
           _disable_tmr5
           _enable_md_rxint
           _md_uart_send
           _reload_tmr5_pt25s
       _start_sms_timer
     _stop_sensor_tmr
   _disable_md_rxint
   _event_queue_is_empty
   _init_pic
     _clear_at_ok
     _enable_ints
       _start_timer0
     _init_uart
       _init_md_uart
   _load_ID
     _ee_read
   _terminate_md_uart
   _terminate_rf_uart

 _isr (ROOT)
   _add_event
     i2_ee_read (ARG)
   _control_leds
   _disable_tmr3
   _reload_timer0
   _start_sensor_tmr
   i2_disable_md_rxint
   i2_disable_tmr5
   i2_ee_read
   i2_init_uart
     i2_init_md_uart
   i2_reload_tmr5_pt25s

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100     84      84      14       51.6%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      95      11       58.2%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      F8       9       96.9%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      F2       7       94.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     51      6B       5       66.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     1C      44       1       72.3%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     3B2      12        0.0%
DATA                 0      0     3B2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Sep 17 16:33:59 2018

                        ??_disable_tmr3 0024                          ??_disable_tmr5 0060  
                 __size_of_start_timer0 0014                   __size_of_start_sms_ok 010C  
                           __CFG_CP0$ON 000000                             __CFG_CP1$ON 000000  
                           __CFG_CP2$ON 000000                             __CFG_CP3$ON 000000  
                                    _ID 0300                             __CFG_CPB$ON 000000  
                                    _RD 007D30                             __CFG_CPD$ON 000000  
                 __end_of_parse_creg_ok 1656                                      _WR 007D31  
                          ___awdiv@sign 0065                  __end_of_parse_cereg_ok 1546  
                     ?_disable_md_rxint 0024                            _sms_tmr_tick 0018  
                                   l200 214C                                     l210 1B70  
                                   l211 1B96                                     l213 1BAC  
                                   l206 1BD4                                     l207 1B4A  
                                   l209 1B5C                                     l500 1FE8  
                                   l501 1FA0                                     l510 1CA2  
                                   l502 1FAC                                     l511 1CB4  
                                   l513 1D0A                                     l509 1D0C  
                                   l197 2114                                     l198 2148  
                                   l471 2036                                     l472 2048  
                                   l481 0EE8                                     l473 204C  
                                   l491 1D48                                     l484 0F2E  
                                   l468 201E                                     l820 0E4E  
                                   l812 0D4A                                     l469 201A  
                                   l493 1D70                                     l478 0E88  
                                   l495 1D7C                                     l816 0DCE  
                                   l752 17C4                                     l744 1770  
                                   l809 0D3C                                     l753 17FC  
                                   l770 1E78                                     l826 1AA8  
                                   l850 0A26                                     l818 0E3A  
                                   l754 17EE                                     l746 17A4  
                                   l763 1E8C                                     l843 09C6  
                                   l835 07A0                                     l747 1794  
                                   l828 1B40                                     l852 0A54  
                                   l844 0940                                     l861 0ABC  
                                   l766 1E48                                     l854 0A64  
                                   l846 099E                                     l758 1824  
                                   l767 1E58                                     l839 0804  
                                   l871 1216                                     l791 1722  
                                   l759 1830                                     l880 12A0  
                                   l792 1742                                     l769 1E6C  
                                   l857 0A8C                                     l849 0A50  
                                   l881 129E                                     l858 0A94  
                                   l890 12D6                                     l859 0A92  
                                   l787 16BE                                     l876 123A  
                                   l885 12BC                                     l797 175E  
                                   l789 16F0                                     l879 1260  
                                   l888 12CA                                     _GIE 007F97  
                _ee_read_ascii_to_value 21E6                           _queue_end_ptr 0002  
                                   _at1 00C0                                     _at2 00BF  
                                   _at3 00BE                                     _at4 00BD  
                                   _at5 00BC                                     _at6 00BB  
                                   _at7 00BA                                     _at8 00B9  
                                   _at9 00B8                    __end_of_check_tamper 247A  
                           _start_modem 2056                                     _isr 0008  
                        _check_md_state 1F1A                            ___awmod@sign 0065  
                    ??_disable_md_rxint 0060                                     prod 000FF3  
                        ?_program_field 0068                                     wreg 000FE8  
                            _TXSTA1bits 000FAC                              _TXSTA2bits 000F72  
                          __CFG_LVP$OFF 000000                                    l1101 0568  
                                  l1110 0614                                    l1103 059A  
                                  l1112 0644                                    l1040 1F6C  
                                  l1201 21DE                                    l1121 073C  
                                  l1105 05CC                                    l1041 1F22  
                                  l1114 0674                                    l1115 068A  
                                  l1043 1F26                                    l1116 06EA  
                                  l1045 1F52                                    l1206 2206  
                                  l1047 1F5E                                    l1058 209C  
                                  l1091 046E                                    l1500 1310  
                                  l1093 04A0                                    l1510 1394  
                                  l1502 136A                                    l1095 04D2  
                                  l1520 13FE                                    l1512 13AC  
                                  l1504 1376                                    l1097 0504  
                                  l1514 13B4                                    l1523 1412  
                                  l1515 1402                                    l1531 164A  
                                  l1099 0536                                    l1516 13D6  
                                  l1701 0B24                                    l1541 153A  
                                  l1533 164E                                    l1518 13EA  
                                  l1711 0B60                                    l1703 0B30  
                                  l1543 153E                                    l1528 1566  
                                  l1721 0B9C                                    l1713 0B6C  
                                  l1705 0B3C                                    l1553 115A  
                                  l1730 0CB8                                    l1538 1436  
                                  l1554 110E                                    l1731 0C2C  
                                  l1723 0BA8                                    l1715 0B78  
                                  l1707 0B48                                    l1563 1182  
                                  l1732 0C36                                    l1556 113E  
                                  l1548 101C                                    l1733 0C90  
                                  l1725 0BB4                                    l1717 0B84  
                                  l1709 0B54                                    l1734 0C42  
                                  l1558 1156                                    l1911 1E12  
                                  l1727 0BC2                                    l1719 0B90  
                                  l1912 1E1C                                    l1904 1DC4  
                                  l1920 1EE0                                    l1913 1E2A  
                                  l1905 1DD4                                    l1921 1ED8  
                                  l1729 0BE2                                    l1498 1304  
                                  l1499 1346                                    l1907 1DF2  
                                  l1691 0AE8                                    l1908 1DEA  
                                  l1924 1EF8                                    l1925 1F02  
                                  l1917 1EBE                                    l1693 0AF4  
                                  l1926 1F10                                    l1918 1ECA  
                                  l1695 0B00                                    l1697 0B0C  
                                  l1689 0ADC                                    l1699 0B18  
                                  l7312 0A5C                                    l7154 23F2  
                                  l7250 07FC                                    l7234 0798  
                                  l6614 142E                                    l6394 23E4  
                                  l6570 155E                                    ?_isr 0024  
                                  l7630 1232                                    l7800 0E80  
                                  l7384 1CAC                                    l6664 1014  
                                  l7564 0DC6                                    l7830 0F26  
                                  l7874 1D74                                    l7858 1D40  
                                  l7946 1FA4                                    l7868 1D68  
                                  _CFGS 007D36                                    u7400 1384  
                                  u8301 03C8                                    u9110 0832  
                                  u7511 1550                                    u8311 03DA  
                                  u9040 1B44                                    u8321 03EC  
                                  u7610 1652                                    u9051 074A  
                                  u8331 03FE                                    u8251 036E  
                                  u7621 1420                                    u8341 0410  
                                  u8261 0380                                    u9230 0A58  
                                  u8351 0422                                    u8271 0392  
                                  u8361 0434                                    u8281 03A4  
                                  u7730 1542                                    u8291 03B6  
                                  u9420 1D1A                                    u9260 0A82  
                                  u7820 10E6                                    u7741 0FFE  
                                  u9501 1684                                    u7910 1DF6  
                                  u8630 05E4                                    u9370 1CF4  
                                  u7770 103A                                    u9450 206C  
                                  u9610 173A                                    u9380 1CF6  
                                  u7860 1152                                    u9390 1CFC  
                                  u8830 06E2                                    u9800 1222  
                                  u9481 1660                                    u7970 1EE4  
                                  u9651 0CC6                                    u9491 1672  
                                  u9661 0CD8                                    u9671 0CF6  
                                  u9771 1194                                    u9860 1264  
                                  u8981 1A92                                    u9880 12AE  
                                  _WREN 007D32                                    _at10 00B7  
                                  _at11 00B6                                    _at12 00B5  
                                  _main 210C                      _buttonStillPressed 0001  
                                  fsr0h 000FEA                                    fsr1h 000FE2  
                                  fsr2h 000FDA                                    fsr0l 000FE9  
                                  indf1 000FE7                                    indf2 000FDF  
                                  fsr1l 000FE1                                    fsr2l 000FD9  
                                  btemp 0045                            _start_timer0 23AE  
                         __CFG_BORV$190 000000                            _start_sms_ok 1656  
                                  prodh 000FF4                                    prodl 000FF3  
                                  start 0360                           __CFG_IESO$OFF 000000  
              __size_of_start_sms_timer 001A                      _ready_to_read_text 00C4  
                          ___param_bank 000000            __size_of_start_md_boot_timer 0006  
                                 ??_isr 002B                            _BAUDCON1bits 000FB8  
                       ?_parse_cereg_ok 0024                           ?_control_leds 0024  
                __end_of_check_md_state 1F8A                                   ?_main 0024  
                       __end_of___awdiv 1E34                                   _EEADR 000FA9  
                         ?_md_uart_send 0024                         __end_of___awmod 1F1A  
                                 _EEPGD 007D37                                   _CREN1 007D5C  
                                 u10300 1D64                                   u10230 0F1C  
                                 u10330 1DAA                                   u10260 0FA6  
                                 u10420 23DC                                   u10360 1FE6  
                                 _T0CON 000FD5                                   u10507 207A  
                       ___awdiv@divisor 0062                                   u10517 2004  
                                 u10527 2026                                   _LATB3 007C53  
                                 _LATC4 007C5C                                   _RC1IE 007CED  
                                 _RC1IF 007CF5                                   _LATC7 007C5F  
                                 _RC2IE 007D1D                                   _T5CON 000F4E  
                                 i2l220 005C                                   i2l222 0086  
                                 i2l231 020E                                   i2l223 009A  
                                 i2l240 026C                                   i2l232 021A  
                                 i2l233 022C                                   i2l225 00C4  
                                 i2l250 0314                                   i2l242 0290  
                                 i2l235 02F6                                   i2l227 0156  
                                 i2l244 02B4                                   i2l246 02DE  
                                 i2l248 02F0                                   i2l560 1902  
                                 i2l570 1934                                   i2l562 1918  
                                 i2l571 194E                                   i2l563 190A  
                                 i2l580 198E                                   i2l572 1938  
                                 i2l564 192C                                   i2l581 1980  
                                 i2l565 190E                                   i2l582 19A2  
                                 i2l574 1964                                   i2l566 1912  
                                 i2l559 19AA                                   i2l583 1984  
                                 i2l575 1956                                   i2l584 1988  
                                 i2l576 1978                                   i2l577 195A  
                                 i2l569 1940                                   i2l578 195E  
                       ___awdiv@counter 0064                                   _TMR0H 000FD7  
                                 _TMR0L 000FD6                                   _TMR3H 000FB3  
                                 _TMR3L 000FB2                                   _TMR5H 000F50  
                                 _TMR5L 000F4F                                   _STATE 001E  
                                 _TRISA 000F92                                   _TRISB 000F93  
                                 _TRMT1 007D61                                   _TRISC 000F94  
                                 _TRMT2 007B91                                   _WPUB5 007B0D  
                       __end_of_ee_read 230C                           __CFG_WRT0$OFF 000000  
                         __CFG_WRT1$OFF 000000                           __CFG_WRT2$OFF 000000  
                         __CFG_WRT3$OFF 000000                          __CFG_EBTR0$OFF 000000  
                        __CFG_FCMEN$OFF 000000                          __CFG_EBTR1$OFF 000000  
                        __CFG_EBTR2$OFF 000000                          __CFG_EBTR3$OFF 000000  
                         __CFG_WRTB$OFF 000000                    __size_of_check_alarm 0002  
                         __CFG_WRTC$OFF 000000                           __CFG_WRTD$OFF 000000  
                       _stop_sensor_tmr 245E                       _modem_network_err 000C  
                        __CFG_EBTRB$OFF 000000                         __end_of_load_ID 1FF2  
                  __size_of_check_state 00A8                      __CFG_MCLRE$INTMCLR 000000  
                  __size_of_check_super 0002                             i2_init_uart 22A4  
                       _check_sms_timer 1E34                          __CFG_BOREN$OFF 000000  
                                 pclath 000FFA                                   tablat 000FF5  
                                 plusw1 000FE3                                   plusw2 000FDB  
                      add_sensor@i_1159 0070                                   status 000FD8  
                                 wtemp6 0046                          __CFG_HFOFST$ON 000000  
                       _sms_timer_ready 00C8                __end_of_start_sensor_tmr 225C  
                       _enable_md_rxint 240A                          startup_ok@baud 040B  
                        startup_ok@cmee 042B                          startup_ok@creg 045A  
                        startup_ok@cpin 044F                          startup_ok@gprs 0400  
                    __size_ofi2_ee_read 001C                         __initialization 1836  
              parse_cmgr@field_num_ones 0083                parse_cmgr@field_num_tens 0082  
                          __end_of_main 2152                   __end_of_reload_timer0 2456  
                  __size_of_clear_at_ok 0034                          ??_control_leds 0024  
               _getIndexOfLearnedSensor 1C88                          ??_md_uart_send 0060  
                        _bled_tmr0_tick 0012                                  ??_main 00B1  
                       ?_check_md_state 0024                         ??_program_field 006B  
                         __activetblptr 000002            __end_of_event_queue_is_empty 23E0  
                 parse_creg_ok@creg_rsp 0062                       _terminate_md_uart 242E  
                 del_sensor@sensorIndex 006E                       _terminate_rf_uart 2456  
                  __size_of_enable_ints 0026                      ?_terminate_md_uart 0024  
                  __end_of_disable_tmr3 240A                    __end_of_disable_tmr5 2422  
                                _EEADRH 000FAA                                  _EEDATA 000FA8  
                                _EECON2 000FA7                        ___awdiv@dividend 0060  
                                _ANSELA 000F38                                  _ANSELB 000F39  
                                _ANSELC 000F3A                   __end_of_send_uart_ack 232A  
                                _RC1REG 000FAE                                  _RC2REG 000F74  
                    ?_terminate_rf_uart 0024                                  _RC2STA 000F71  
                          ?_send_sms_ok 0024                                  i2l1271 1C00  
                                i2l1273 1C40                                  i2l1274 1C06  
                                i2l1275 1C3E                           ?_init_md_uart 0024  
                                _TMR0IE 007F95                                  _SPBRG1 000FAF  
                                _TMR0IF 007F92                                  _SPBRG2 000F75  
                                _TMR3IF 007D09                                  _TMR5IF 007BF1  
                                _TX1REG 000FAD                                  _TX2REG 000F73  
                                _TX2STA 000F72                 parse_csq_ok@comma_index 006C  
                   ??_terminate_md_uart 0060                        __end_of_ee_write 21E6  
                   ??_terminate_rf_uart 0060                          __CFG_XINST$OFF 000000  
               parse_csq_ok@colon_index 006D                               ??___awdiv 0064  
                        __CFG_STVREN$ON 000000                               ??___awmod 0064  
          __size_ofi2_reload_tmr5_pt25s 001A                                  _endPtr 0003  
                 __size_of_check_tamper 0002                                  _rx2pos 001A  
                      __end_of_init_pic 210C           __size_of_md_uart_write_str_ok 013C  
                     ??_start_sms_timer 0060                                  _ph_num 01E9  
                             ??_ee_read 0061                                  clear_0 18BC  
                                clear_1 18C8                                  clear_2 18D4  
                                clear_3 18E0                                  clear_4 18EC  
                      ___awdiv@quotient 0066                        __end_of_read_sms 0E5C  
                       ___awmod@divisor 0062                         ___awmod@counter 0064  
               __end_of_stop_sensor_tmr 2466               __end_of_terminate_md_uart 2438  
                             ??_load_ID 0063                            __pdataCOMRAM 0040  
               __end_of_check_sms_timer 1EA8               __end_of_terminate_rf_uart 245E  
                                tblptrh 000FF7                                  tblptrl 000FF6  
                                tblptru 000FF8                       __end_ofi2_ee_read 2346  
                     program_field@page 006C                         startup_ok@F6830 01B4  
                       startup_ok@F6832 01AD                         startup_ok@F6840 011A  
                       startup_ok@F6842 015F                         startup_ok@F6850 013E  
                       startup_ok@F6834 0126                         startup_ok@F6836 02D8  
                       startup_ok@F6852 0172                         startup_ok@F6844 0154  
                       startup_ok@F6838 02C8                         startup_ok@F6846 0149  
                       startup_ok@F6848 010E                        ??i2_init_md_uart 0024  
                     program_field@size 006A                           parse_csq_ok@i 006E  
                        _md_timeout_cnt 0004                 __end_of_enable_md_rxint 2416  
                        ??_init_md_uart 0060             __size_ofi2_disable_md_rxint 000A  
                            __accesstop 0060                 __end_of__initialization 18F2  
                       __CFG_PBADEN$OFF 000000                      __size_of_add_event 0098  
                         ___rparam_used 000001                         startup_ok@cereg 0443  
                          _check_tamper 2478                          __pcstackCOMRAM 0024  
                          __pidataBANK1 19C6                            __pidataBANK2 2186  
                          __pidataBANK3 2394               ??_getIndexOfLearnedSensor 0063  
                         ?_parse_csq_ok 0024                 ?_ee_read_ascii_to_value 0063  
                            _add_sensor 0E5C                            startup_ok@at 047F  
                         ?_rf_uart_send 0024                            ?_start_modem 0024  
                   _start_md_boot_timer 2466                             parse_cmgl@i 0067  
                       send_sms_ok@cmgs 0069                             parse_cmgr@i 0088  
                           parse_cmgr@j 0087                             parse_cmgr@k 007D  
                           parse_cmgr@l 0086                              __pbssBANK0 00B1  
                            __pbssBANK1 01C1                              __pbssBANK2 0200  
                            __pbssBANK3 0300                              _check_test 1FF2  
                       __CFG_PLLCFG$OFF 000000               __size_of_disable_md_rxint 000A  
                  __end_of_control_leds 19C6                    __end_of_md_uart_send 23EE  
                    __size_of_init_uart 0024                              _del_sensor 1D1E  
                  _event_queue_is_empty 23D2                      __CFG_CCP2MX$PORTC1 000000  
                            add_event@i 002A                        ??_parse_cereg_ok 0060  
                        ??_parse_csq_ok 0060          __end_of_ee_read_ascii_to_value 2210  
                  ?_start_md_boot_timer 0024                      __CFG_CCP3MX$PORTB5 000000  
                    parse_cmgr@cmgr_rsp 0073                          ??_rf_uart_send 0060  
        parse_cereg_ok@registration_num 006B                        ?_stop_sensor_tmr 0024  
            __size_of_terminate_md_uart 000A                              _ledPattern 001D  
                  startup_ok@ledpattern 0437                   __size_of_disable_tmr3 000E  
                 __size_of_disable_tmr5 000C                       __end_of_add_event 1C88  
                       __CFG_WDTEN$SWON 000000                        ?_check_sms_timer 0024  
            __size_of_terminate_rf_uart 0008                 __size_of_stop_sms_timer 0006  
                             ?_ee_write 0063                                 _SPBRGH1 000FB0  
                               _SPBRGH2 000F76                 program_field@start_addr 006F  
       __end_of_getIndexOfLearnedSensor 1D1E                            ?i2_init_uart 0024  
                      ?_enable_md_rxint 0024                          add_event@event 0029  
                          _inButtonMenu 0015                  __size_of_parse_creg_ok 0110  
                             ?_init_pic 0024                               ?_read_sms 0024  
                  __size_of_send_sms_ok 0154                   ?_event_queue_is_empty 0024  
                       __CFG_PWRTEN$OFF 000000              md_uart_write_str_ok@wantOk 0064  
                    del_sensor@sensorID 006B                                 __Hparam 0000  
                     ?_start_sensor_tmr 0024                                 __Lparam 0000  
             md_uart_write_str_ok@index 0067                   ??_start_md_boot_timer 0060  
                    ??_start_sensor_tmr 0024                                 _t2_tick 0017  
                        program_field@i 006E                        ??_check_md_state 0070  
                               _t4_tick 00B1                                 ___awdiv 1DAE  
                               ___awmod 1EA8                            _disable_tmr3 23FC  
                          _disable_tmr5 2416                             ?_add_sensor 0066  
                               _ee_read 22EC                                 __pcinit 1836  
                               __ramtop 1000                    __end_of_init_md_uart 22A4  
                               _mdRxBuf 0200                                 __ptext0 210C  
                               __ptext1 2456                                 __ptext2 242E  
                               __ptext3 1F8A                                 __ptext4 20B6  
                               __ptext5 2210                                 __ptext6 23AE  
                               __ptext7 23D2                                 __ptext8 2438  
                               __ptext9 1B48                 __size_ofi2_disable_tmr5 000C  
                       _ledPatternCount 001C                           ??_check_alarm 0060  
                               _load_ID 1F8A                                 _rx2_buf 001F  
                             _T2CONbits 000FBA                          _numUartRetries 0044  
                          __size_of_isr 0358                               _T3CONbits 000FB1  
                     __end_of_init_uart 2280                        ___awmod@dividend 0060  
                            _receivedOK 000A                           ??_check_state 00B1  
             program_field@field_number 0070                           ??_check_super 0060  
                             _T4CONbits 000F51                               _T5CONbits 000F4E  
                         i2ee_read@addr 0024                           i2ee_read@data 0026  
                            ??_ee_write 0065                           i2ee_read@page 0025  
                            _parse_cmgl 1A88                              _parse_cmgr 0740  
                               _waiting 0043                                 _sms_buf 02A0  
                      rf_uart_send@data 0060                     i2_reload_tmr5_pt25s 237A  
                            _listen_sms 1762                    end_of_initialization 18F2  
                           ?_check_test 0024                                 isr@temp 003F  
                   parse_csq_ok@csq_rsp 0064                           __Lmediumconst 0000  
               md_uart_write_str_ok@pos 0066                              ??_init_pic 0060  
                            ??_read_sms 0089                         _start_sms_timer 2346  
                           ?_del_sensor 006B                           ??_clear_at_ok 0060  
                        parse_creg_ok@i 006B                                 postdec1 000FE5  
                  ?i2_reload_tmr5_pt25s 0024                                 postinc0 000FEE  
                               postinc1 000FE6                                 postinc2 000FDE  
                      _buttonPressCount 0014                           _parse_creg_ok 1546  
                             _PORTBbits 000F81                              _test_count 0019  
                          read_sms@cmgd 00A4                            read_sms@cmgl 008B  
                          read_sms@cmgr 009B                           ??_enable_ints 0060  
                 __end_of_program_field 0CBC                               _TRISBbits 000F93  
                    parse_creg_ok@F6836 0196                               _TRISCbits 000F94  
                  __size_of_start_modem 0060                   __size_of_control_leds 00C6  
                 __size_of_md_uart_send 000E                    __end_of_parse_csq_ok 1186  
                add_sensor@dev_type_new 006A                     __end_of_check_alarm 247E  
          __end_of_md_uart_write_str_ok 1416                  __size_of_reload_timer0 000A  
                   __end_of_check_state 1BF0                               i2_ee_read 232A  
                   __end_of_check_super 247C         getIndexOfLearnedSensor@sensorID 0061  
                      _disable_md_rxint 2438                              _startup_ok 0364  
                   __size_of_add_sensor 0198                        startup_ok@ledCfg 041B  
                ??_event_queue_is_empty 0060                    __end_of_rf_uart_send 23FC  
                      _modem_ready_data 000D                          add_sensor@zone 006D  
                 ??i2_reload_tmr5_pt25s 0024                  send_sms_ok@smsEndIndex 0076  
                    add_sensor@isUnique 006C                          ?_parse_creg_ok 0024  
                   __end_of_clear_at_ok 2186                             _BAUDCONbits 000FB8  
md_uart_write_str_ok@waitToSendMoreData 0065                           __pidataCOMRAM 2472  
                __size_of_send_uart_ack 001E                     __size_of_check_test 0064  
                          _control_leds 1900                            _md_uart_send 23E0  
                    add_sensor@sensorID 0066                     start_initialization 1836  
                        _stop_sms_timer 246C                           startup_ok@ate 0478  
                         startup_ok@csq 046F                     __size_of_del_sensor 0090  
                           ?_parse_cmgl 0024                             ?_parse_cmgr 0024  
                           __end_of_isr 0360              __end_ofi2_disable_md_rxint 244C  
                           ?_listen_sms 0024                 __end_of_start_sms_timer 2360  
                   __end_of_enable_ints 2236                     parse_cereg_ok@F6846 0169  
                            ?i2_ee_read 0024                 parse_cereg_ok@cereg_rsp 0062  
                  __size_ofi2_init_uart 0024                           ?_start_timer0 0024  
                         ?_start_sms_ok 0024                        send_sms_ok@F6905 017B  
                      send_sms_ok@F6907 01BE                   __size_of_init_md_uart 0024  
                         _reload_timer0 244C                             __pdataBANK1 0100  
                           __pdataBANK2 02C8                             __pdataBANK3 037C  
              check_md_state@tempStatus 0070                          i2_disable_tmr5 2422  
                __end_of_stop_sms_timer 2472                             _check_alarm 247C  
                 parse_cmgr@access_code 007E                             __pbssCOMRAM 0001  
                           _check_state 1B48                           __pcstackBANK0 0060  
                         __pcstackBANK4 0400                             _check_super 247A  
                             _add_event 1BF0                       __size_of_ee_write 0030  
                         _send_uart_ack 230C                          ??_start_timer0 0060  
                        ??_start_sms_ok 0068                             ?_startup_ok 0024  
                          _init_md_uart 2280                       parse_cmgl@rec_msg 0062  
                             __pnvBANK0 00CA                ?_getIndexOfLearnedSensor 0061  
                     __size_of_init_pic 0056                             _clear_at_ok 2152  
               __size_ofi2_init_md_uart 0024                       __size_of_read_sms 01A0  
    getIndexOfLearnedSensor@isLearnedIn 0068                               __pintcode 0008  
                       ??_parse_creg_ok 0060                     __size_of_parse_cmgl 00C0  
                   __size_of_parse_cmgr 0380                          ?_reload_timer0 0024  
                              ?___awdiv 0060                                ?___awmod 0060  
                __end_ofi2_disable_tmr5 242E                            ??_add_sensor 0068  
                   __size_of_listen_sms 00D4                    _md_uart_write_str_ok 12DA  
                 send_sms_ok@isValidCmd 0075                  parse_csq_ok@ones_digit 006B  
                              ?_ee_read 0060                        __CFG_PRICLKEN$ON 000000  
                       ?_stop_sms_timer 0024                                ?_load_ID 0024  
                           add_sensor@i 006F                                _BAUDCON2 000F70  
             __size_of_start_sensor_tmr 0026                           add_event@zone 0027  
                 __size_of_parse_csq_ok 0192                             _enable_ints 2210  
                parse_csq_ok@tens_digit 006F                              ?_add_event 0027  
              __size_of_stop_sensor_tmr 0008                               _init_uart 225C  
                 __size_of_rf_uart_send 000E                        ?_start_sms_timer 0024  
                         ??_send_sms_ok 0068                          ?_send_uart_ack 0024  
                        _waiting_carrot 0005                             ??i2_ee_read 0025  
                          ??_check_test 0060                            _receivedRESP 0008  
              __size_of_check_sms_timer 0074                                _IOCBbits 000F62  
                              _LATAbits 000F89                getIndexOfLearnedSensor@i 0069  
           __end_of_start_md_boot_timer 246C                getIndexOfLearnedSensor@j 006A  
                    __end_of_add_sensor 0FF4                            _ph_num_index 00B3  
                              _PIE1bits 000F9D                                _PIE2bits 000FA0  
                              _PIE3bits 000FA3                                _PIE5bits 000F7D  
                          ??_del_sensor 006D                                _MD_STATE 000F  
                              _PIR1bits 000F9E                                _PIR2bits 000FA1  
                              i2u701_40 013A                                _PIR3bits 000FA4  
                              i2u713_40 0246                                _PIR5bits 000F7E  
                              i2u714_40 024C                __size_of_enable_md_rxint 000C  
                      __CFG_WDTPS$32768 000000                       _reload_tmr3_pt25s 23C2  
                     _reload_tmr5_pt25s 2360                            _parse_csq_ok 0FF4  
                       ?i2_disable_tmr5 0024           parse_creg_ok@registration_num 006A  
                 ?_md_uart_write_str_ok 0061                      ?_reload_tmr3_pt25s 0024  
                    ?_reload_tmr5_pt25s 0024                            _referenceBuf 0340  
              __end_of_disable_md_rxint 2442                     __size_of_startup_ok 03DC  
                    __end_of_check_test 2056                            _rf_uart_send 23EE  
               __size_of_parse_cereg_ok 0130                     ??_reload_tmr3_pt25s 0060  
                       _modem_ready_sms 00C1                     ??_reload_tmr5_pt25s 0060  
                    __end_of_del_sensor 1DAE                              ?_init_uart 0024  
                             copy_data0 184A                               copy_data1 186A  
                             copy_data2 188A                               copy_data3 18AA  
                           _md_timer_up 000E             check_sms_timer@sms_duration 0066  
                          send_sms_ok@i 0078                ??_ee_read_ascii_to_value 0064  
           add_sensor@dev_type_existing 006B                           ?_check_tamper 0024  
                 send_sms_ok@poundCount 0077                   program_field@data_buf 0068  
                   __end_of_send_sms_ok 12DA                                __Hrparam 0000  
                          ee_write@addr 0063               __end_of_reload_tmr3_pt25s 23D2  
                          ee_write@data 0064                         ??_reload_timer0 0024  
                          ee_write@page 0065               __end_of_reload_tmr5_pt25s 237A  
                              __Lrparam 0000                       __CFG_P2BMX$PORTB5 000000  
                 parse_cmgr@colon_index 007B                 parse_cmgr@newline_index 007C  
                      __size_of___awdiv 0086                        __size_of___awmod 0072  
                           _event_queue 01C1                   program_field@max_size 006D  
                      __size_of_ee_read 0020                    __end_of_start_timer0 23C2  
                              _idEndPtr 00CA                    __end_of_start_sms_ok 1762  
                         ??_start_modem 0071                             _currentChar 0016  
                           ee_read@addr 0060                             ee_read@data 0062  
                        _gled_tmr0_tick 0013                        __size_of_load_ID 0068  
                           ee_read@page 0061                 __size_of_check_md_state 0070  
                              _ee_write 21B6                            ??_parse_cmgl 0060  
                          ??_parse_cmgr 0071                                __ptext10 245E  
                              __ptext11 1762                                __ptext20 1416  
                              __ptext12 2346                                __ptext21 1186  
                              __ptext13 1656                                __ptext30 23E0  
                              __ptext22 0CBC                                __ptext14 2056  
                              __ptext31 240A                                __ptext23 0740  
                              __ptext15 2466                         ??_send_uart_ack 0061  
                              __ptext40 1FF2                                __ptext32 2416  
                              __ptext24 0AC0                                __ptext16 1F1A  
                              __ptext41 23C2                                __ptext33 2152  
                              __ptext25 1EA8                                __ptext17 0364  
                              __ptext50 21B6                                __ptext42 2478  
                              __ptext34 1E34                                __ptext26 1DAE  
                              __ptext18 0FF4                                __ptext43 247A  
                              __ptext35 246C                                __ptext27 1A88  
                              __ptext19 1546                                __ptext60 23FC  
                              __ptext52 237A                                __ptext44 247C  
                              __ptext36 21E6                                __ptext28 12DA  
                              __ptext61 1900                                __ptext53 22A4  
                              __ptext45 0E5C                                __ptext37 1D1E  
                              __ptext29 2360                                __ptext62 1BF0  
                              __ptext54 22C8                                __ptext46 230C  
                              __ptext38 1C88                                __ptext55 232A  
                              __ptext47 23EE                                __ptext39 22EC  
                              __ptext56 2422                                __ptext48 225C  
                              __ptext57 2442                                __ptext49 2280  
                              __ptext58 2236                                __ptext59 244C  
                           ??_add_event 0028                       parse_csq_ok@F6857 01A6  
                          ??_listen_sms 00B0                           __size_of_main 0046  
                              _init_pic 20B6                                _read_sms 0CBC  
           __end_ofi2_reload_tmr5_pt25s 2394                          ??_check_tamper 0060  
                           _receivedERR 0009                             _modem_awake 00C2  
                     ??_stop_sensor_tmr 0060             parse_cmgr@final_field_index 0085  
         __size_of_event_queue_is_empty 000E                          i2_init_md_uart 22C8  
                              _tmr3_cnt 0011                                _tmr5_cnt 001B  
                            _RC1STAbits 000FAB                       ??_check_sms_timer 0066  
                    i2_disable_md_rxint 2442                  __size_of_program_field 01FC  
                              _timedOut 0007                                _retryCnt 00B4  
                ??_md_uart_write_str_ok 0066                                int$flags 0045  
                        _receivedSensor 00C7                      __end_of_parse_cmgl 1B48  
                    __end_of_parse_cmgr 0AC0                             del_sensor@i 006F  
                           del_sensor@j 006D                     ?i2_disable_md_rxint 0024  
                    __end_of_listen_sms 1836                       ??_enable_md_rxint 0060  
                       parse_cmgl@F6856 01B9                            ?_check_alarm 0024  
                              load_ID@i 0065                                load_ID@j 0066  
                      _start_sensor_tmr 2236                              _INTCONbits 000FF2  
                        _modem_retrying 000B                        read_sms@msgIndex 00AD  
                       parse_cmgr@F6863 019E                            ?_check_state 0024  
                          ?_check_super 0024      getIndexOfLearnedSensor@sensorIndex 0067  
                        _sms_echo_ready 00C6                md_uart_write_str_ok@data 0061  
              md_uart_write_str_ok@len1 0063                  startup_ok@queryVersion 0465  
                         ??i2_init_uart 0024                             ??_init_uart 0060  
                   __end_of_start_modem 20B6                                intlevel2 0000  
                       parse_cereg_ok@i 006C                             _send_sms_ok 1186  
                  ??i2_disable_md_rxint 0024                            ??_startup_ok 0070  
                __end_ofi2_init_md_uart 22EC                              _RCSTA1bits 000FAB  
                            _RCSTA2bits 000F71         __size_of_ee_read_ascii_to_value 002A  
                          ?_clear_at_ok 0024                            _waiting_uart 0006  
                            _OSCCONbits 000FD3              __size_of_reload_tmr3_pt25s 0010  
            parse_cmgr@final_field_term 0084                     send_sms_ok@msgIndex 0072  
            __size_of_reload_tmr5_pt25s 001A                       start_sms_ok@F6832 0132  
                     start_sms_ok@F6834 037C                       start_sms_ok@F6836 0100  
                      md_uart_send@data 0060                           ?_disable_tmr3 0024  
                         ?_disable_tmr5 0024                        ??_stop_sms_timer 0060  
      __size_of_getIndexOfLearnedSensor 0096                          _parse_cereg_ok 1416  
                           _smsMsgIndex 00C3                      __end_of_startup_ok 0740  
                          ?_enable_ints 0024                              _PREV_STATE 00C9  
                         read_sms@F6841 02E8                           read_sms@F6843 018D  
                         read_sms@F6845 0040                           read_sms@F6847 0184  
                         _program_field 0AC0                       __CFG_T3CMX$PORTC0 000000  
                       _add_sensor$1158 006E                        start_sms_ok@cmgf 008F  
                      start_sms_ok@cnmi 0081                        start_sms_ok@cpms 0068  
                     __CFG_FOSC$INTIO67 000000                         ?i2_init_md_uart 0024  
                         _sms_err_ready 00C5                     __end_ofi2_init_uart 22C8  
            ee_read_ascii_to_value@addr 0063              ee_read_ascii_to_value@data 0065  
                      ??i2_disable_tmr5 0024              ee_read_ascii_to_value@page 0064  
                         _SMS_TMR_STATE 0010  
