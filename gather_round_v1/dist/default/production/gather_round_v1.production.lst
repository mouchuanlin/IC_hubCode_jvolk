

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Sep 16 11:34:22 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F26K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     8                           	psect	idataBANK3,global,class=CODE,delta=1,noexec
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    18                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    19                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    20                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1,noexec
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    22                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	text0,global,reloc=2,class=CODE,delta=1
    24                           	psect	text1,global,reloc=2,class=CODE,delta=1
    25                           	psect	text2,global,reloc=2,class=CODE,delta=1
    26                           	psect	text3,global,reloc=2,class=CODE,delta=1
    27                           	psect	text4,global,reloc=2,class=CODE,delta=1
    28                           	psect	text5,global,reloc=2,class=CODE,delta=1
    29                           	psect	text6,global,reloc=2,class=CODE,delta=1
    30                           	psect	text7,global,reloc=2,class=CODE,delta=1
    31                           	psect	text8,global,reloc=2,class=CODE,delta=1
    32                           	psect	text9,global,reloc=2,class=CODE,delta=1
    33                           	psect	text10,global,reloc=2,class=CODE,delta=1
    34                           	psect	text11,global,reloc=2,class=CODE,delta=1
    35                           	psect	text12,global,reloc=2,class=CODE,delta=1
    36                           	psect	text13,global,reloc=2,class=CODE,delta=1
    37                           	psect	text14,global,reloc=2,class=CODE,delta=1
    38                           	psect	text15,global,reloc=2,class=CODE,delta=1
    39                           	psect	text16,global,reloc=2,class=CODE,delta=1
    40                           	psect	text17,global,reloc=2,class=CODE,delta=1
    41                           	psect	text18,global,reloc=2,class=CODE,delta=1
    42                           	psect	text19,global,reloc=2,class=CODE,delta=1
    43                           	psect	text20,global,reloc=2,class=CODE,delta=1
    44                           	psect	text21,global,reloc=2,class=CODE,delta=1
    45                           	psect	text22,global,reloc=2,class=CODE,delta=1
    46                           	psect	text23,global,reloc=2,class=CODE,delta=1
    47                           	psect	text24,global,reloc=2,class=CODE,delta=1
    48                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text27,global,reloc=2,class=CODE,delta=1
    51                           	psect	text28,global,reloc=2,class=CODE,delta=1
    52                           	psect	text29,global,reloc=2,class=CODE,delta=1
    53                           	psect	text30,global,reloc=2,class=CODE,delta=1
    54                           	psect	text31,global,reloc=2,class=CODE,delta=1
    55                           	psect	text32,global,reloc=2,class=CODE,delta=1
    56                           	psect	text33,global,reloc=2,class=CODE,delta=1
    57                           	psect	text34,global,reloc=2,class=CODE,delta=1
    58                           	psect	text35,global,reloc=2,class=CODE,delta=1
    59                           	psect	text36,global,reloc=2,class=CODE,delta=1
    60                           	psect	text37,global,reloc=2,class=CODE,delta=1
    61                           	psect	text38,global,reloc=2,class=CODE,delta=1
    62                           	psect	text39,global,reloc=2,class=CODE,delta=1
    63                           	psect	text40,global,reloc=2,class=CODE,delta=1
    64                           	psect	text41,global,reloc=2,class=CODE,delta=1
    65                           	psect	text42,global,reloc=2,class=CODE,delta=1
    66                           	psect	text43,global,reloc=2,class=CODE,delta=1
    67                           	psect	text44,global,reloc=2,class=CODE,delta=1
    68                           	psect	text45,global,reloc=2,class=CODE,delta=1
    69                           	psect	text46,global,reloc=2,class=CODE,delta=1
    70                           	psect	text47,global,reloc=2,class=CODE,delta=1
    71                           	psect	text48,global,reloc=2,class=CODE,delta=1
    72                           	psect	text49,global,reloc=2,class=CODE,delta=1
    73                           	psect	text50,global,reloc=2,class=CODE,delta=1
    74                           	psect	text51,global,reloc=2,class=CODE,delta=1
    75                           	psect	text52,global,reloc=2,class=CODE,delta=1
    76                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    77                           	psect	text54,global,reloc=2,class=CODE,delta=1
    78                           	psect	text55,global,reloc=2,class=CODE,delta=1
    79                           	psect	text56,global,reloc=2,class=CODE,delta=1
    80                           	psect	text57,global,reloc=2,class=CODE,delta=1
    81                           	psect	text58,global,reloc=2,class=CODE,delta=1
    82                           	psect	text59,global,reloc=2,class=CODE,delta=1
    83                           	psect	text60,global,reloc=2,class=CODE,delta=1
    84                           	psect	text61,global,reloc=2,class=CODE,delta=1
    85                           	psect	text62,global,reloc=2,class=CODE,delta=1
    86                           	psect	text63,global,reloc=2,class=CODE,delta=1
    87                           	psect	text64,global,reloc=2,class=CODE,delta=1
    88                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    89                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    90                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    91  0000                     
    92                           ; Version 1.45
    93                           ; Generated 16/11/2017 GMT
    94                           ; 
    95                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    96                           ; All rights reserved.
    97                           ; 
    98                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    99                           ; 
   100                           ; Redistribution and use in source and binary forms, with or without modification, are
   101                           ; permitted provided that the following conditions are met:
   102                           ; 
   103                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   104                           ;        conditions and the following disclaimer.
   105                           ; 
   106                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   107                           ;        of conditions and the following disclaimer in the documentation and/or other
   108                           ;        materials provided with the distribution.
   109                           ; 
   110                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   111                           ;        software without specific prior written permission.
   112                           ; 
   113                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   114                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   115                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   116                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   117                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   118                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   119                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   120                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   121                           ; 
   122                           ; 
   123                           ; Code-generator required, PIC18F26K22 Definitions
   124                           ; 
   125                           ; SFR Addresses
   126  0000                     
   127                           	psect	idataCOMRAM
   128  00255C                     __pidataCOMRAM:
   129                           	opt stack 0
   130                           
   131                           ;initializer for read_sms@F6845
   132  00255C  0D                 	db	13
   133  00255D  0A                 	db	10
   134  00255E  00                 	db	0
   135                           
   136                           ;initializer for _waiting
   137  00255F  01                 	db	1
   138                           
   139                           ;initializer for _numUartRetries
   140  002560  0F                 	db	15
   141                           
   142                           	psect	idataBANK1
   143  0019C6                     __pidataBANK1:
   144                           	opt stack 0
   145                           
   146                           ;initializer for start_sms_ok@F6836
   147  0019C6  41                 	db	65
   148  0019C7  54                 	db	84
   149  0019C8  2B                 	db	43
   150  0019C9  43                 	db	67
   151  0019CA  4E                 	db	78
   152  0019CB  4D                 	db	77
   153  0019CC  49                 	db	73
   154  0019CD  3D                 	db	61
   155  0019CE  31                 	db	49
   156  0019CF  2C                 	db	44
   157  0019D0  31                 	db	49
   158  0019D1  0D                 	db	13
   159  0019D2  0A                 	db	10
   160  0019D3  00                 	db	0
   161                           
   162                           ;initializer for startup_ok@F6848
   163  0019D4  41                 	db	65
   164  0019D5  54                 	db	84
   165  0019D6  2B                 	db	43
   166  0019D7  43                 	db	67
   167  0019D8  45                 	db	69
   168  0019D9  52                 	db	82
   169  0019DA  45                 	db	69
   170  0019DB  47                 	db	71
   171  0019DC  3F                 	db	63
   172  0019DD  0D                 	db	13
   173  0019DE  0A                 	db	10
   174  0019DF  00                 	db	0
   175                           
   176                           ;initializer for startup_ok@F6840
   177  0019E0  41                 	db	65
   178  0019E1  54                 	db	84
   179  0019E2  23                 	db	35
   180  0019E3  53                 	db	83
   181  0019E4  4C                 	db	76
   182  0019E5  45                 	db	69
   183  0019E6  44                 	db	68
   184  0019E7  3D                 	db	61
   185  0019E8  34                 	db	52
   186  0019E9  0D                 	db	13
   187  0019EA  0A                 	db	10
   188  0019EB  00                 	db	0
   189                           
   190                           ;initializer for startup_ok@F6834
   191  0019EC  41                 	db	65
   192  0019ED  54                 	db	84
   193  0019EE  2B                 	db	43
   194  0019EF  43                 	db	67
   195  0019F0  4D                 	db	77
   196  0019F1  45                 	db	69
   197  0019F2  45                 	db	69
   198  0019F3  3D                 	db	61
   199  0019F4  32                 	db	50
   200  0019F5  0D                 	db	13
   201  0019F6  0A                 	db	10
   202  0019F7  00                 	db	0
   203                           
   204                           ;initializer for start_sms_ok@F6832
   205  0019F8  41                 	db	65
   206  0019F9  54                 	db	84
   207  0019FA  2B                 	db	43
   208  0019FB  43                 	db	67
   209  0019FC  4D                 	db	77
   210  0019FD  47                 	db	71
   211  0019FE  46                 	db	70
   212  0019FF  3D                 	db	61
   213  001A00  31                 	db	49
   214  001A01  0D                 	db	13
   215  001A02  0A                 	db	10
   216  001A03  00                 	db	0
   217                           
   218                           ;initializer for startup_ok@F6850
   219  001A04  41                 	db	65
   220  001A05  54                 	db	84
   221  001A06  23                 	db	35
   222  001A07  47                 	db	71
   223  001A08  50                 	db	80
   224  001A09  52                 	db	82
   225  001A0A  53                 	db	83
   226  001A0B  3F                 	db	63
   227  001A0C  0D                 	db	13
   228  001A0D  0A                 	db	10
   229  001A0E  00                 	db	0
   230                           
   231                           ;initializer for startup_ok@F6846
   232  001A0F  41                 	db	65
   233  001A10  54                 	db	84
   234  001A11  2B                 	db	43
   235  001A12  43                 	db	67
   236  001A13  52                 	db	82
   237  001A14  45                 	db	69
   238  001A15  47                 	db	71
   239  001A16  3F                 	db	63
   240  001A17  0D                 	db	13
   241  001A18  0A                 	db	10
   242  001A19  00                 	db	0
   243                           
   244                           ;initializer for startup_ok@F6844
   245  001A1A  41                 	db	65
   246  001A1B  54                 	db	84
   247  001A1C  2B                 	db	43
   248  001A1D  43                 	db	67
   249  001A1E  50                 	db	80
   250  001A1F  49                 	db	73
   251  001A20  4E                 	db	78
   252  001A21  3F                 	db	63
   253  001A22  0D                 	db	13
   254  001A23  0A                 	db	10
   255  001A24  00                 	db	0
   256                           
   257                           ;initializer for startup_ok@F6842
   258  001A25  41                 	db	65
   259  001A26  54                 	db	84
   260  001A27  23                 	db	35
   261  001A28  43                 	db	67
   262  001A29  47                 	db	71
   263  001A2A  4D                 	db	77
   264  001A2B  52                 	db	82
   265  001A2C  0D                 	db	13
   266  001A2D  0A                 	db	10
   267  001A2E  00                 	db	0
   268                           
   269                           ;initializer for parse_cereg_ok@F6846
   270  001A2F  2B                 	db	43
   271  001A30  43                 	db	67
   272  001A31  45                 	db	69
   273  001A32  52                 	db	82
   274  001A33  45                 	db	69
   275  001A34  47                 	db	71
   276  001A35  3A                 	db	58
   277  001A36  20                 	db	32
   278  001A37  00                 	db	0
   279                           
   280                           ;initializer for startup_ok@F6852
   281  001A38  41                 	db	65
   282  001A39  54                 	db	84
   283  001A3A  2B                 	db	43
   284  001A3B  43                 	db	67
   285  001A3C  53                 	db	83
   286  001A3D  51                 	db	81
   287  001A3E  0D                 	db	13
   288  001A3F  0A                 	db	10
   289  001A40  00                 	db	0
   290                           
   291                           ;initializer for send_sms_ok@F6905
   292  001A41  41                 	db	65
   293  001A42  54                 	db	84
   294  001A43  2B                 	db	43
   295  001A44  43                 	db	67
   296  001A45  4D                 	db	77
   297  001A46  47                 	db	71
   298  001A47  53                 	db	83
   299  001A48  3D                 	db	61
   300  001A49  00                 	db	0
   301                           
   302                           ;initializer for read_sms@F6847
   303  001A4A  41                 	db	65
   304  001A4B  54                 	db	84
   305  001A4C  2B                 	db	43
   306  001A4D  43                 	db	67
   307  001A4E  4D                 	db	77
   308  001A4F  47                 	db	71
   309  001A50  44                 	db	68
   310  001A51  3D                 	db	61
   311  001A52  00                 	db	0
   312                           
   313                           ;initializer for read_sms@F6843
   314  001A53  41                 	db	65
   315  001A54  54                 	db	84
   316  001A55  2B                 	db	43
   317  001A56  43                 	db	67
   318  001A57  4D                 	db	77
   319  001A58  47                 	db	71
   320  001A59  52                 	db	82
   321  001A5A  3D                 	db	61
   322  001A5B  00                 	db	0
   323                           
   324                           ;initializer for parse_creg_ok@F6836
   325  001A5C  2B                 	db	43
   326  001A5D  43                 	db	67
   327  001A5E  52                 	db	82
   328  001A5F  45                 	db	69
   329  001A60  47                 	db	71
   330  001A61  3A                 	db	58
   331  001A62  20                 	db	32
   332  001A63  00                 	db	0
   333                           
   334                           ;initializer for parse_cmgr@F6863
   335  001A64  2B                 	db	43
   336  001A65  43                 	db	67
   337  001A66  4D                 	db	77
   338  001A67  47                 	db	71
   339  001A68  52                 	db	82
   340  001A69  3A                 	db	58
   341  001A6A  20                 	db	32
   342  001A6B  00                 	db	0
   343                           
   344                           ;initializer for parse_csq_ok@F6857
   345  001A6C  2B                 	db	43
   346  001A6D  43                 	db	67
   347  001A6E  53                 	db	83
   348  001A6F  51                 	db	81
   349  001A70  3A                 	db	58
   350  001A71  20                 	db	32
   351  001A72  00                 	db	0
   352                           
   353                           ;initializer for startup_ok@F6832
   354  001A73  41                 	db	65
   355  001A74  54                 	db	84
   356  001A75  45                 	db	69
   357  001A76  31                 	db	49
   358  001A77  0D                 	db	13
   359  001A78  0A                 	db	10
   360  001A79  00                 	db	0
   361                           
   362                           ;initializer for startup_ok@F6830
   363  001A7A  41                 	db	65
   364  001A7B  54                 	db	84
   365  001A7C  0D                 	db	13
   366  001A7D  0A                 	db	10
   367  001A7E  00                 	db	0
   368                           
   369                           ;initializer for parse_cmgl@F6856
   370  001A7F  52                 	db	82
   371  001A80  45                 	db	69
   372  001A81  43                 	db	67
   373  001A82  20                 	db	32
   374  001A83  00                 	db	0
   375                           
   376                           ;initializer for send_sms_ok@F6907
   377  001A84  0D                 	db	13
   378  001A85  0A                 	db	10
   379  001A86  00                 	db	0
   380                           
   381                           	psect	idataBANK2
   382  002270                     __pidataBANK2:
   383                           	opt stack 0
   384                           
   385                           ;initializer for startup_ok@F6838
   386  002270  41                 	db	65
   387  002271  54                 	db	84
   388  002272  23                 	db	35
   389  002273  47                 	db	71
   390  002274  50                 	db	80
   391  002275  49                 	db	73
   392  002276  4F                 	db	79
   393  002277  3D                 	db	61
   394  002278  37                 	db	55
   395  002279  2C                 	db	44
   396  00227A  30                 	db	48
   397  00227B  2C                 	db	44
   398  00227C  32                 	db	50
   399  00227D  0D                 	db	13
   400  00227E  0A                 	db	10
   401  00227F  00                 	db	0
   402                           
   403                           ;initializer for startup_ok@F6836
   404  002280  41                 	db	65
   405  002281  54                 	db	84
   406  002282  2B                 	db	43
   407  002283  49                 	db	73
   408  002284  50                 	db	80
   409  002285  52                 	db	82
   410  002286  3D                 	db	61
   411  002287  31                 	db	49
   412  002288  31                 	db	49
   413  002289  35                 	db	53
   414  00228A  32                 	db	50
   415  00228B  30                 	db	48
   416  00228C  30                 	db	48
   417  00228D  0D                 	db	13
   418  00228E  0A                 	db	10
   419  00228F  00                 	db	0
   420                           
   421                           ;initializer for read_sms@F6841
   422  002290  41                 	db	65
   423  002291  54                 	db	84
   424  002292  2B                 	db	43
   425  002293  43                 	db	67
   426  002294  4D                 	db	77
   427  002295  47                 	db	71
   428  002296  4C                 	db	76
   429  002297  3D                 	db	61
   430  002298  22                 	db	34
   431  002299  41                 	db	65
   432  00229A  4C                 	db	76
   433  00229B  4C                 	db	76
   434  00229C  22                 	db	34
   435  00229D  0D                 	db	13
   436  00229E  0A                 	db	10
   437  00229F  00                 	db	0
   438                           
   439                           	psect	idataBANK3
   440  00247E                     __pidataBANK3:
   441                           	opt stack 0
   442                           
   443                           ;initializer for start_sms_ok@F6834
   444  00247E  41                 	db	65
   445  00247F  54                 	db	84
   446  002480  2B                 	db	43
   447  002481  43                 	db	67
   448  002482  50                 	db	80
   449  002483  4D                 	db	77
   450  002484  53                 	db	83
   451  002485  3D                 	db	61
   452  002486  22                 	db	34
   453  002487  4D                 	db	77
   454  002488  45                 	db	69
   455  002489  22                 	db	34
   456  00248A  2C                 	db	44
   457  00248B  22                 	db	34
   458  00248C  4D                 	db	77
   459  00248D  45                 	db	69
   460  00248E  22                 	db	34
   461  00248F  2C                 	db	44
   462  002490  22                 	db	34
   463  002491  4D                 	db	77
   464  002492  45                 	db	69
   465  002493  22                 	db	34
   466  002494  0D                 	db	13
   467  002495  0A                 	db	10
   468  002496  00                 	db	0
   469                           
   470                           	psect	nvBANK0
   471  0000CA                     __pnvBANK0:
   472                           	opt stack 0
   473  0000CA                     _idEndPtr:
   474                           	opt stack 0
   475  0000CA                     	ds	1
   476  0000                     _T4CONbits	set	3921
   477  0000                     _T5CONbits	set	3918
   478  0000                     _TMR5L	set	3919
   479  0000                     _TMR5H	set	3920
   480  0000                     _T5CON	set	3918
   481  0000                     _ANSELC	set	3898
   482  0000                     _ANSELB	set	3897
   483  0000                     _ANSELA	set	3896
   484  0000                     _TX2REG	set	3955
   485  0000                     _TX1REG	set	4013
   486  0000                     _TXSTA2bits	set	3954
   487  0000                     _RCSTA2bits	set	3953
   488  0000                     _PIR1bits	set	3998
   489  0000                     _RCSTA1bits	set	4011
   490  0000                     _TRISCbits	set	3988
   491  0000                     _RC1STAbits	set	4011
   492  0000                     _SPBRG1	set	4015
   493  0000                     _SPBRGH1	set	4016
   494  0000                     _TXSTA1bits	set	4012
   495  0000                     _BAUDCONbits	set	4024
   496  0000                     _BAUDCON1bits	set	4024
   497  0000                     _SPBRGH2	set	3958
   498  0000                     _SPBRG2	set	3957
   499  0000                     _BAUDCON2	set	3952
   500  0000                     _RC2STA	set	3953
   501  0000                     _TX2STA	set	3954
   502  0000                     _TRISBbits	set	3987
   503  0000                     _EECON2	set	4007
   504  0000                     _EEDATA	set	4008
   505  0000                     _EEADR	set	4009
   506  0000                     _EEADRH	set	4010
   507  0000                     _T2CONbits	set	4026
   508  0000                     _TMR3L	set	4018
   509  0000                     _TMR3H	set	4019
   510  0000                     _PIR2bits	set	4001
   511  0000                     _PIE2bits	set	4000
   512  0000                     _T3CONbits	set	4017
   513  0000                     _PIR5bits	set	3966
   514  0000                     _PIE5bits	set	3965
   515  0000                     _PORTBbits	set	3969
   516  0000                     _LATAbits	set	3977
   517  0000                     _TMR0L	set	4054
   518  0000                     _TMR0H	set	4055
   519  0000                     _T0CON	set	4053
   520  0000                     _TRISC	set	3988
   521  0000                     _TRISB	set	3987
   522  0000                     _TRISA	set	3986
   523  0000                     _OSCCONbits	set	4051
   524  0000                     _RC1REG	set	4014
   525  0000                     _PIE1bits	set	3997
   526  0000                     _RC2REG	set	3956
   527  0000                     _PIE3bits	set	4003
   528  0000                     _PIR3bits	set	4004
   529  0000                     _INTCONbits	set	4082
   530  0000                     _IOCBbits	set	3938
   531  0000                     _TRMT2	set	31633
   532  0000                     _TRMT1	set	32097
   533  0000                     _RC1IE	set	31981
   534  0000                     _LATC7	set	31839
   535  0000                     _CREN1	set	32092
   536  0000                     _RC2IE	set	32029
   537  0000                     _WPUB5	set	31501
   538  0000                     _WR	set	32049
   539  0000                     _WREN	set	32050
   540  0000                     _RD	set	32048
   541  0000                     _EEPGD	set	32055
   542  0000                     _CFGS	set	32054
   543  0000                     _GIE	set	32663
   544  0000                     _TMR0IE	set	32661
   545  0000                     _LATB3	set	31827
   546  0000                     _LATC4	set	31836
   547  0000                     _TMR3IF	set	32009
   548  0000                     _TMR0IF	set	32658
   549  0000                     _TMR5IF	set	31729
   550  0000                     _RC1IF	set	31989
   551                           
   552                           ; #config settings
   553  0000                     
   554                           	psect	cinit
   555  001836                     __pcinit:
   556                           	opt stack 0
   557  001836                     start_initialization:
   558                           	opt stack 0
   559  001836                     __initialization:
   560                           	opt stack 0
   561                           
   562                           ; Initialize objects allocated to BANK3 (25 bytes)
   563                           ; load TBLPTR registers with __pidataBANK3
   564  001836  0E7E               	movlw	low __pidataBANK3
   565  001838  6EF6               	movwf	tblptrl,c
   566  00183A  0E24               	movlw	high __pidataBANK3
   567  00183C  6EF7               	movwf	tblptrh,c
   568  00183E  0E00               	movlw	low (__pidataBANK3 shr (0+16))
   569  001840  6EF8               	movwf	tblptru,c
   570  001842  EE03  F07C         	lfsr	0,__pdataBANK3
   571  001846  EE10 F019          	lfsr	1,25
   572  00184A                     copy_data0:
   573  00184A  0009               	tblrd		*+
   574  00184C  CFF5 FFEE          	movff	tablat,postinc0
   575  001850  50E5               	movf	postdec1,w,c
   576  001852  50E1               	movf	fsr1l,w,c
   577  001854  E1FA               	bnz	copy_data0
   578                           
   579                           ; Initialize objects allocated to BANK2 (48 bytes)
   580                           ; load TBLPTR registers with __pidataBANK2
   581  001856  0E70               	movlw	low __pidataBANK2
   582  001858  6EF6               	movwf	tblptrl,c
   583  00185A  0E22               	movlw	high __pidataBANK2
   584  00185C  6EF7               	movwf	tblptrh,c
   585  00185E  0E00               	movlw	low (__pidataBANK2 shr (0+16))
   586  001860  6EF8               	movwf	tblptru,c
   587  001862  EE02  F0C8         	lfsr	0,__pdataBANK2
   588  001866  EE10 F030          	lfsr	1,48
   589  00186A                     copy_data1:
   590  00186A  0009               	tblrd		*+
   591  00186C  CFF5 FFEE          	movff	tablat,postinc0
   592  001870  50E5               	movf	postdec1,w,c
   593  001872  50E1               	movf	fsr1l,w,c
   594  001874  E1FA               	bnz	copy_data1
   595                           
   596                           ; Initialize objects allocated to BANK1 (193 bytes)
   597                           ; load TBLPTR registers with __pidataBANK1
   598  001876  0EC6               	movlw	low __pidataBANK1
   599  001878  6EF6               	movwf	tblptrl,c
   600  00187A  0E19               	movlw	high __pidataBANK1
   601  00187C  6EF7               	movwf	tblptrh,c
   602  00187E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   603  001880  6EF8               	movwf	tblptru,c
   604  001882  EE01  F000         	lfsr	0,__pdataBANK1
   605  001886  EE10 F0C1          	lfsr	1,193
   606  00188A                     copy_data2:
   607  00188A  0009               	tblrd		*+
   608  00188C  CFF5 FFEE          	movff	tablat,postinc0
   609  001890  50E5               	movf	postdec1,w,c
   610  001892  50E1               	movf	fsr1l,w,c
   611  001894  E1FA               	bnz	copy_data2
   612                           
   613                           ; Initialize objects allocated to COMRAM (5 bytes)
   614                           ; load TBLPTR registers with __pidataCOMRAM
   615  001896  0E5C               	movlw	low __pidataCOMRAM
   616  001898  6EF6               	movwf	tblptrl,c
   617  00189A  0E25               	movlw	high __pidataCOMRAM
   618  00189C  6EF7               	movwf	tblptrh,c
   619  00189E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   620  0018A0  6EF8               	movwf	tblptru,c
   621  0018A2  EE00  F040         	lfsr	0,__pdataCOMRAM
   622  0018A6  EE10 F005          	lfsr	1,5
   623  0018AA                     copy_data3:
   624  0018AA  0009               	tblrd		*+
   625  0018AC  CFF5 FFEE          	movff	tablat,postinc0
   626  0018B0  50E5               	movf	postdec1,w,c
   627  0018B2  50E1               	movf	fsr1l,w,c
   628  0018B4  E1FA               	bnz	copy_data3
   629                           
   630                           ; Clear objects allocated to BANK3 (124 bytes)
   631  0018B6  EE03  F000         	lfsr	0,__pbssBANK3
   632  0018BA  0E7C               	movlw	124
   633  0018BC                     clear_0:
   634  0018BC  6AEE               	clrf	postinc0,c
   635  0018BE  06E8               	decf	wreg,f,c
   636  0018C0  E1FD               	bnz	clear_0
   637                           
   638                           ; Clear objects allocated to BANK2 (200 bytes)
   639  0018C2  EE02  F000         	lfsr	0,__pbssBANK2
   640  0018C6  0EC8               	movlw	200
   641  0018C8                     clear_1:
   642  0018C8  6AEE               	clrf	postinc0,c
   643  0018CA  06E8               	decf	wreg,f,c
   644  0018CC  E1FD               	bnz	clear_1
   645                           
   646                           ; Clear objects allocated to BANK1 (49 bytes)
   647  0018CE  EE01  F0C1         	lfsr	0,__pbssBANK1
   648  0018D2  0E31               	movlw	49
   649  0018D4                     clear_2:
   650  0018D4  6AEE               	clrf	postinc0,c
   651  0018D6  06E8               	decf	wreg,f,c
   652  0018D8  E1FD               	bnz	clear_2
   653                           
   654                           ; Clear objects allocated to BANK0 (25 bytes)
   655  0018DA  EE00  F0B1         	lfsr	0,__pbssBANK0
   656  0018DE  0E19               	movlw	25
   657  0018E0                     clear_3:
   658  0018E0  6AEE               	clrf	postinc0,c
   659  0018E2  06E8               	decf	wreg,f,c
   660  0018E4  E1FD               	bnz	clear_3
   661                           
   662                           ; Clear objects allocated to COMRAM (35 bytes)
   663  0018E6  EE00  F001         	lfsr	0,__pbssCOMRAM
   664  0018EA  0E23               	movlw	35
   665  0018EC                     clear_4:
   666  0018EC  6AEE               	clrf	postinc0,c
   667  0018EE  06E8               	decf	wreg,f,c
   668  0018F0  E1FD               	bnz	clear_4
   669  0018F2                     end_of_initialization:
   670                           	opt stack 0
   671  0018F2                     __end_of__initialization:
   672                           	opt stack 0
   673  0018F2  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   674  0018F4  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   675  0018F6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   676  0018F8  6EF8               	movwf	tblptru,c
   677  0018FA  0100               	movlb	0
   678  0018FC  EFFD  F010         	goto	_main	;jump to C main() function
   679                           tblptru	equ	0xFF8
   680                           tblptrh	equ	0xFF7
   681                           tblptrl	equ	0xFF6
   682                           tablat	equ	0xFF5
   683                           postinc0	equ	0xFEE
   684                           wreg	equ	0xFE8
   685                           postdec1	equ	0xFE5
   686                           fsr1l	equ	0xFE1
   687                           
   688                           	psect	bssCOMRAM
   689  000001                     __pbssCOMRAM:
   690                           	opt stack 0
   691  000001                     _buttonStillPressed:
   692                           	opt stack 0
   693  000001                     	ds	1
   694  000002                     _queue_end_ptr:
   695                           	opt stack 0
   696  000002                     	ds	1
   697  000003                     _endPtr:
   698                           	opt stack 0
   699  000003                     	ds	1
   700  000004                     _md_timeout_cnt:
   701                           	opt stack 0
   702  000004                     	ds	1
   703  000005                     _waiting_carrot:
   704                           	opt stack 0
   705  000005                     	ds	1
   706  000006                     _waiting_uart:
   707                           	opt stack 0
   708  000006                     	ds	1
   709  000007                     _timedOut:
   710                           	opt stack 0
   711  000007                     	ds	1
   712  000008                     _receivedRESP:
   713                           	opt stack 0
   714  000008                     	ds	1
   715  000009                     _receivedERR:
   716                           	opt stack 0
   717  000009                     	ds	1
   718  00000A                     _receivedOK:
   719                           	opt stack 0
   720  00000A                     	ds	1
   721  00000B                     _modem_retrying:
   722                           	opt stack 0
   723  00000B                     	ds	1
   724  00000C                     _modem_network_err:
   725                           	opt stack 0
   726  00000C                     	ds	1
   727  00000D                     _modem_ready_data:
   728                           	opt stack 0
   729  00000D                     	ds	1
   730  00000E                     _md_timer_up:
   731                           	opt stack 0
   732  00000E                     	ds	1
   733  00000F                     _MD_STATE:
   734                           	opt stack 0
   735  00000F                     	ds	1
   736  000010                     _SMS_TMR_STATE:
   737                           	opt stack 0
   738  000010                     	ds	1
   739  000011                     _tmr3_cnt:
   740                           	opt stack 0
   741  000011                     	ds	1
   742  000012                     _bled_tmr0_tick:
   743                           	opt stack 0
   744  000012                     	ds	1
   745  000013                     _gled_tmr0_tick:
   746                           	opt stack 0
   747  000013                     	ds	1
   748  000014                     _buttonPressCount:
   749                           	opt stack 0
   750  000014                     	ds	1
   751  000015                     _inButtonMenu:
   752                           	opt stack 0
   753  000015                     	ds	1
   754  000016                     _currentChar:
   755                           	opt stack 0
   756  000016                     	ds	1
   757  000017                     _t2_tick:
   758                           	opt stack 0
   759  000017                     	ds	1
   760  000018                     _sms_tmr_tick:
   761                           	opt stack 0
   762  000018                     	ds	1
   763  000019                     _test_count:
   764                           	opt stack 0
   765  000019                     	ds	1
   766  00001A                     _rx2pos:
   767                           	opt stack 0
   768  00001A                     	ds	1
   769  00001B                     _tmr5_cnt:
   770                           	opt stack 0
   771  00001B                     	ds	1
   772  00001C                     _ledPatternCount:
   773                           	opt stack 0
   774  00001C                     	ds	1
   775  00001D                     _ledPattern:
   776                           	opt stack 0
   777  00001D                     	ds	1
   778  00001E                     _STATE:
   779                           	opt stack 0
   780  00001E                     	ds	1
   781  00001F                     _rx2_buf:
   782                           	opt stack 0
   783  00001F                     	ds	5
   784                           tblptru	equ	0xFF8
   785                           tblptrh	equ	0xFF7
   786                           tblptrl	equ	0xFF6
   787                           tablat	equ	0xFF5
   788                           postinc0	equ	0xFEE
   789                           wreg	equ	0xFE8
   790                           postdec1	equ	0xFE5
   791                           fsr1l	equ	0xFE1
   792                           
   793                           	psect	dataCOMRAM
   794  000040                     __pdataCOMRAM:
   795                           	opt stack 0
   796  000040                     read_sms@F6845:
   797                           	opt stack 0
   798  000040                     	ds	3
   799  000043                     _waiting:
   800                           	opt stack 0
   801  000043                     	ds	1
   802  000044                     _numUartRetries:
   803                           	opt stack 0
   804  000044                     	ds	1
   805                           tblptru	equ	0xFF8
   806                           tblptrh	equ	0xFF7
   807                           tblptrl	equ	0xFF6
   808                           tablat	equ	0xFF5
   809                           postinc0	equ	0xFEE
   810                           wreg	equ	0xFE8
   811                           postdec1	equ	0xFE5
   812                           fsr1l	equ	0xFE1
   813                           
   814                           	psect	bssBANK0
   815  0000B1                     __pbssBANK0:
   816                           	opt stack 0
   817  0000B1                     _t4_tick:
   818                           	opt stack 0
   819  0000B1                     	ds	2
   820  0000B3                     _ph_num_index:
   821                           	opt stack 0
   822  0000B3                     	ds	1
   823  0000B4                     _retryCnt:
   824                           	opt stack 0
   825  0000B4                     	ds	1
   826  0000B5                     _at12:
   827                           	opt stack 0
   828  0000B5                     	ds	1
   829  0000B6                     _at11:
   830                           	opt stack 0
   831  0000B6                     	ds	1
   832  0000B7                     _at10:
   833                           	opt stack 0
   834  0000B7                     	ds	1
   835  0000B8                     _at9:
   836                           	opt stack 0
   837  0000B8                     	ds	1
   838  0000B9                     _at8:
   839                           	opt stack 0
   840  0000B9                     	ds	1
   841  0000BA                     _at7:
   842                           	opt stack 0
   843  0000BA                     	ds	1
   844  0000BB                     _at6:
   845                           	opt stack 0
   846  0000BB                     	ds	1
   847  0000BC                     _at5:
   848                           	opt stack 0
   849  0000BC                     	ds	1
   850  0000BD                     _at4:
   851                           	opt stack 0
   852  0000BD                     	ds	1
   853  0000BE                     _at3:
   854                           	opt stack 0
   855  0000BE                     	ds	1
   856  0000BF                     _at2:
   857                           	opt stack 0
   858  0000BF                     	ds	1
   859  0000C0                     _at1:
   860                           	opt stack 0
   861  0000C0                     	ds	1
   862  0000C1                     _modem_ready_sms:
   863                           	opt stack 0
   864  0000C1                     	ds	1
   865  0000C2                     _modem_awake:
   866                           	opt stack 0
   867  0000C2                     	ds	1
   868  0000C3                     _smsMsgIndex:
   869                           	opt stack 0
   870  0000C3                     	ds	1
   871  0000C4                     _ready_to_read_text:
   872                           	opt stack 0
   873  0000C4                     	ds	1
   874  0000C5                     _sms_err_ready:
   875                           	opt stack 0
   876  0000C5                     	ds	1
   877  0000C6                     _sms_echo_ready:
   878                           	opt stack 0
   879  0000C6                     	ds	1
   880  0000C7                     _receivedSensor:
   881                           	opt stack 0
   882  0000C7                     	ds	1
   883  0000C8                     _sms_timer_ready:
   884                           	opt stack 0
   885  0000C8                     	ds	1
   886  0000C9                     _PREV_STATE:
   887                           	opt stack 0
   888  0000C9                     	ds	1
   889                           tblptru	equ	0xFF8
   890                           tblptrh	equ	0xFF7
   891                           tblptrl	equ	0xFF6
   892                           tablat	equ	0xFF5
   893                           postinc0	equ	0xFEE
   894                           wreg	equ	0xFE8
   895                           postdec1	equ	0xFE5
   896                           fsr1l	equ	0xFE1
   897                           
   898                           	psect	bssBANK1
   899  0001C1                     __pbssBANK1:
   900                           	opt stack 0
   901  0001C1                     _event_queue:
   902                           	opt stack 0
   903  0001C1                     	ds	40
   904  0001E9                     _ph_num:
   905                           	opt stack 0
   906  0001E9                     	ds	9
   907                           tblptru	equ	0xFF8
   908                           tblptrh	equ	0xFF7
   909                           tblptrl	equ	0xFF6
   910                           tablat	equ	0xFF5
   911                           postinc0	equ	0xFEE
   912                           wreg	equ	0xFE8
   913                           postdec1	equ	0xFE5
   914                           fsr1l	equ	0xFE1
   915                           
   916                           	psect	dataBANK1
   917  000100                     __pdataBANK1:
   918                           	opt stack 0
   919  000100                     start_sms_ok@F6836:
   920                           	opt stack 0
   921  000100                     	ds	14
   922  00010E                     startup_ok@F6848:
   923                           	opt stack 0
   924  00010E                     	ds	12
   925  00011A                     startup_ok@F6840:
   926                           	opt stack 0
   927  00011A                     	ds	12
   928  000126                     startup_ok@F6834:
   929                           	opt stack 0
   930  000126                     	ds	12
   931  000132                     start_sms_ok@F6832:
   932                           	opt stack 0
   933  000132                     	ds	12
   934  00013E                     startup_ok@F6850:
   935                           	opt stack 0
   936  00013E                     	ds	11
   937  000149                     startup_ok@F6846:
   938                           	opt stack 0
   939  000149                     	ds	11
   940  000154                     startup_ok@F6844:
   941                           	opt stack 0
   942  000154                     	ds	11
   943  00015F                     startup_ok@F6842:
   944                           	opt stack 0
   945  00015F                     	ds	10
   946  000169                     parse_cereg_ok@F6846:
   947                           	opt stack 0
   948  000169                     	ds	9
   949  000172                     startup_ok@F6852:
   950                           	opt stack 0
   951  000172                     	ds	9
   952  00017B                     send_sms_ok@F6905:
   953                           	opt stack 0
   954  00017B                     	ds	9
   955  000184                     read_sms@F6847:
   956                           	opt stack 0
   957  000184                     	ds	9
   958  00018D                     read_sms@F6843:
   959                           	opt stack 0
   960  00018D                     	ds	9
   961  000196                     parse_creg_ok@F6836:
   962                           	opt stack 0
   963  000196                     	ds	8
   964  00019E                     parse_cmgr@F6863:
   965                           	opt stack 0
   966  00019E                     	ds	8
   967  0001A6                     parse_csq_ok@F6857:
   968                           	opt stack 0
   969  0001A6                     	ds	7
   970  0001AD                     startup_ok@F6832:
   971                           	opt stack 0
   972  0001AD                     	ds	7
   973  0001B4                     startup_ok@F6830:
   974                           	opt stack 0
   975  0001B4                     	ds	5
   976  0001B9                     parse_cmgl@F6856:
   977                           	opt stack 0
   978  0001B9                     	ds	5
   979  0001BE                     send_sms_ok@F6907:
   980                           	opt stack 0
   981  0001BE                     	ds	3
   982                           tblptru	equ	0xFF8
   983                           tblptrh	equ	0xFF7
   984                           tblptrl	equ	0xFF6
   985                           tablat	equ	0xFF5
   986                           postinc0	equ	0xFEE
   987                           wreg	equ	0xFE8
   988                           postdec1	equ	0xFE5
   989                           fsr1l	equ	0xFE1
   990                           
   991                           	psect	bssBANK2
   992  000200                     __pbssBANK2:
   993                           	opt stack 0
   994  000200                     _mdRxBuf:
   995                           	opt stack 0
   996  000200                     	ds	160
   997  0002A0                     _sms_buf:
   998                           	opt stack 0
   999  0002A0                     	ds	40
  1000                           tblptru	equ	0xFF8
  1001                           tblptrh	equ	0xFF7
  1002                           tblptrl	equ	0xFF6
  1003                           tablat	equ	0xFF5
  1004                           postinc0	equ	0xFEE
  1005                           wreg	equ	0xFE8
  1006                           postdec1	equ	0xFE5
  1007                           fsr1l	equ	0xFE1
  1008                           
  1009                           	psect	dataBANK2
  1010  0002C8                     __pdataBANK2:
  1011                           	opt stack 0
  1012  0002C8                     startup_ok@F6838:
  1013                           	opt stack 0
  1014  0002C8                     	ds	16
  1015  0002D8                     startup_ok@F6836:
  1016                           	opt stack 0
  1017  0002D8                     	ds	16
  1018  0002E8                     read_sms@F6841:
  1019                           	opt stack 0
  1020  0002E8                     	ds	16
  1021                           tblptru	equ	0xFF8
  1022                           tblptrh	equ	0xFF7
  1023                           tblptrl	equ	0xFF6
  1024                           tablat	equ	0xFF5
  1025                           postinc0	equ	0xFEE
  1026                           wreg	equ	0xFE8
  1027                           postdec1	equ	0xFE5
  1028                           fsr1l	equ	0xFE1
  1029                           
  1030                           	psect	bssBANK3
  1031  000300                     __pbssBANK3:
  1032                           	opt stack 0
  1033  000300                     _ID:
  1034                           	opt stack 0
  1035  000300                     	ds	64
  1036  000340                     _referenceBuf:
  1037                           	opt stack 0
  1038  000340                     	ds	60
  1039                           tblptru	equ	0xFF8
  1040                           tblptrh	equ	0xFF7
  1041                           tblptrl	equ	0xFF6
  1042                           tablat	equ	0xFF5
  1043                           postinc0	equ	0xFEE
  1044                           wreg	equ	0xFE8
  1045                           postdec1	equ	0xFE5
  1046                           fsr1l	equ	0xFE1
  1047                           
  1048                           	psect	dataBANK3
  1049  00037C                     __pdataBANK3:
  1050                           	opt stack 0
  1051  00037C                     start_sms_ok@F6834:
  1052                           	opt stack 0
  1053  00037C                     	ds	25
  1054                           tblptru	equ	0xFF8
  1055                           tblptrh	equ	0xFF7
  1056                           tblptrl	equ	0xFF6
  1057                           tablat	equ	0xFF5
  1058                           postinc0	equ	0xFEE
  1059                           wreg	equ	0xFE8
  1060                           postdec1	equ	0xFE5
  1061                           fsr1l	equ	0xFE1
  1062                           
  1063                           	psect	cstackBANK4
  1064  000400                     __pcstackBANK4:
  1065                           	opt stack 0
  1066  000400                     startup_ok@gprs:
  1067                           	opt stack 0
  1068                           
  1069                           ; 11 bytes @ 0x0
  1070  000400                     	ds	11
  1071  00040B                     startup_ok@baud:
  1072                           	opt stack 0
  1073                           
  1074                           ; 16 bytes @ 0xB
  1075  00040B                     	ds	16
  1076  00041B                     startup_ok@ledCfg:
  1077                           	opt stack 0
  1078                           
  1079                           ; 16 bytes @ 0x1B
  1080  00041B                     	ds	16
  1081  00042B                     startup_ok@cmee:
  1082                           	opt stack 0
  1083                           
  1084                           ; 12 bytes @ 0x2B
  1085  00042B                     	ds	12
  1086  000437                     startup_ok@ledpattern:
  1087                           	opt stack 0
  1088                           
  1089                           ; 12 bytes @ 0x37
  1090  000437                     	ds	12
  1091  000443                     startup_ok@cereg:
  1092                           	opt stack 0
  1093                           
  1094                           ; 12 bytes @ 0x43
  1095  000443                     	ds	12
  1096  00044F                     startup_ok@cpin:
  1097                           	opt stack 0
  1098                           
  1099                           ; 11 bytes @ 0x4F
  1100  00044F                     	ds	11
  1101  00045A                     startup_ok@creg:
  1102                           	opt stack 0
  1103                           
  1104                           ; 11 bytes @ 0x5A
  1105  00045A                     	ds	11
  1106  000465                     startup_ok@queryVersion:
  1107                           	opt stack 0
  1108                           
  1109                           ; 10 bytes @ 0x65
  1110  000465                     	ds	10
  1111  00046F                     startup_ok@csq:
  1112                           	opt stack 0
  1113                           
  1114                           ; 9 bytes @ 0x6F
  1115  00046F                     	ds	9
  1116  000478                     startup_ok@ate:
  1117                           	opt stack 0
  1118                           
  1119                           ; 7 bytes @ 0x78
  1120  000478                     	ds	7
  1121  00047F                     startup_ok@at:
  1122                           	opt stack 0
  1123                           
  1124                           ; 5 bytes @ 0x7F
  1125  00047F                     	ds	5
  1126                           tblptru	equ	0xFF8
  1127                           tblptrh	equ	0xFF7
  1128                           tblptrl	equ	0xFF6
  1129                           tablat	equ	0xFF5
  1130                           postinc0	equ	0xFEE
  1131                           wreg	equ	0xFE8
  1132                           postdec1	equ	0xFE5
  1133                           fsr1l	equ	0xFE1
  1134                           
  1135                           	psect	cstackBANK0
  1136  000060                     __pcstackBANK0:
  1137                           	opt stack 0
  1138  000060                     ??_check_test:
  1139  000060                     ??_parse_cmgl:
  1140  000060                     ??_parse_creg_ok:
  1141  000060                     ??_parse_cereg_ok:
  1142  000060                     ??_parse_csq_ok:
  1143  000060                     ?___awdiv:
  1144                           	opt stack 0
  1145  000060                     ?___awmod:
  1146                           	opt stack 0
  1147  000060                     ee_read@addr:
  1148                           	opt stack 0
  1149  000060                     add_event@zone:
  1150                           	opt stack 0
  1151  000060                     md_uart_send@data:
  1152                           	opt stack 0
  1153  000060                     rf_uart_send@data:
  1154                           	opt stack 0
  1155  000060                     ___awdiv@dividend:
  1156                           	opt stack 0
  1157  000060                     ___awmod@dividend:
  1158                           	opt stack 0
  1159                           
  1160                           ; 2 bytes @ 0x0
  1161  000060                     	ds	1
  1162  000061                     ??_add_event:
  1163  000061                     ee_read@page:
  1164                           	opt stack 0
  1165  000061                     getIndexOfLearnedSensor@sensorID:
  1166                           	opt stack 0
  1167  000061                     md_uart_write_str_ok@data:
  1168                           	opt stack 0
  1169                           
  1170                           ; 2 bytes @ 0x1
  1171  000061                     	ds	1
  1172  000062                     ee_read@data:
  1173                           	opt stack 0
  1174  000062                     add_event@event:
  1175                           	opt stack 0
  1176  000062                     ___awdiv@divisor:
  1177                           	opt stack 0
  1178  000062                     ___awmod@divisor:
  1179                           	opt stack 0
  1180  000062                     parse_cmgl@rec_msg:
  1181                           	opt stack 0
  1182  000062                     parse_creg_ok@creg_rsp:
  1183                           	opt stack 0
  1184  000062                     parse_cereg_ok@cereg_rsp:
  1185                           	opt stack 0
  1186                           
  1187                           ; 9 bytes @ 0x2
  1188  000062                     	ds	1
  1189  000063                     ??_load_ID:
  1190  000063                     ??_getIndexOfLearnedSensor:
  1191  000063                     ee_write@addr:
  1192                           	opt stack 0
  1193  000063                     ee_read_ascii_to_value@addr:
  1194                           	opt stack 0
  1195  000063                     add_event@i:
  1196                           	opt stack 0
  1197  000063                     md_uart_write_str_ok@len1:
  1198                           	opt stack 0
  1199                           
  1200                           ; 1 bytes @ 0x3
  1201  000063                     	ds	1
  1202  000064                     ee_write@data:
  1203                           	opt stack 0
  1204  000064                     ee_read_ascii_to_value@page:
  1205                           	opt stack 0
  1206  000064                     md_uart_write_str_ok@wantOk:
  1207                           	opt stack 0
  1208  000064                     ___awdiv@counter:
  1209                           	opt stack 0
  1210  000064                     ___awmod@counter:
  1211                           	opt stack 0
  1212  000064                     parse_csq_ok@csq_rsp:
  1213                           	opt stack 0
  1214                           
  1215                           ; 7 bytes @ 0x4
  1216  000064                     	ds	1
  1217  000065                     load_ID@i:
  1218                           	opt stack 0
  1219  000065                     ee_write@page:
  1220                           	opt stack 0
  1221  000065                     ee_read_ascii_to_value@data:
  1222                           	opt stack 0
  1223  000065                     md_uart_write_str_ok@waitToSendMoreData:
  1224                           	opt stack 0
  1225  000065                     ___awdiv@sign:
  1226                           	opt stack 0
  1227  000065                     ___awmod@sign:
  1228                           	opt stack 0
  1229                           
  1230                           ; 1 bytes @ 0x5
  1231  000065                     	ds	1
  1232  000066                     load_ID@j:
  1233                           	opt stack 0
  1234  000066                     check_sms_timer@sms_duration:
  1235                           	opt stack 0
  1236  000066                     md_uart_write_str_ok@pos:
  1237                           	opt stack 0
  1238  000066                     add_sensor@sensorID:
  1239                           	opt stack 0
  1240  000066                     ___awdiv@quotient:
  1241                           	opt stack 0
  1242                           
  1243                           ; 2 bytes @ 0x6
  1244  000066                     	ds	1
  1245  000067                     getIndexOfLearnedSensor@sensorIndex:
  1246                           	opt stack 0
  1247  000067                     parse_cmgl@i:
  1248                           	opt stack 0
  1249  000067                     md_uart_write_str_ok@index:
  1250                           	opt stack 0
  1251                           
  1252                           ; 1 bytes @ 0x7
  1253  000067                     	ds	1
  1254  000068                     ??_add_sensor:
  1255  000068                     getIndexOfLearnedSensor@isLearnedIn:
  1256                           	opt stack 0
  1257  000068                     program_field@data_buf:
  1258                           	opt stack 0
  1259  000068                     start_sms_ok@cpms:
  1260                           	opt stack 0
  1261                           
  1262                           ; 25 bytes @ 0x8
  1263  000068                     	ds	1
  1264  000069                     getIndexOfLearnedSensor@i:
  1265                           	opt stack 0
  1266  000069                     send_sms_ok@cmgs:
  1267                           	opt stack 0
  1268                           
  1269                           ; 9 bytes @ 0x9
  1270  000069                     	ds	1
  1271  00006A                     add_sensor@dev_type_new:
  1272                           	opt stack 0
  1273  00006A                     getIndexOfLearnedSensor@j:
  1274                           	opt stack 0
  1275  00006A                     parse_creg_ok@registration_num:
  1276                           	opt stack 0
  1277  00006A                     program_field@size:
  1278                           	opt stack 0
  1279                           
  1280                           ; 1 bytes @ 0xA
  1281  00006A                     	ds	1
  1282  00006B                     ??_program_field:
  1283  00006B                     check_sensor@zone:
  1284                           	opt stack 0
  1285  00006B                     add_sensor@dev_type_existing:
  1286                           	opt stack 0
  1287  00006B                     parse_creg_ok@i:
  1288                           	opt stack 0
  1289  00006B                     parse_cereg_ok@registration_num:
  1290                           	opt stack 0
  1291  00006B                     parse_csq_ok@ones_digit:
  1292                           	opt stack 0
  1293  00006B                     del_sensor@sensorID:
  1294                           	opt stack 0
  1295                           
  1296                           ; 2 bytes @ 0xB
  1297  00006B                     	ds	1
  1298  00006C                     check_sensor@sensorIndex:
  1299                           	opt stack 0
  1300  00006C                     add_sensor@isUnique:
  1301                           	opt stack 0
  1302  00006C                     parse_cereg_ok@i:
  1303                           	opt stack 0
  1304  00006C                     parse_csq_ok@comma_index:
  1305                           	opt stack 0
  1306  00006C                     program_field@page:
  1307                           	opt stack 0
  1308                           
  1309                           ; 1 bytes @ 0xC
  1310  00006C                     	ds	1
  1311  00006D                     add_sensor@zone:
  1312                           	opt stack 0
  1313  00006D                     del_sensor@j:
  1314                           	opt stack 0
  1315  00006D                     parse_csq_ok@colon_index:
  1316                           	opt stack 0
  1317  00006D                     program_field@max_size:
  1318                           	opt stack 0
  1319                           
  1320                           ; 1 bytes @ 0xD
  1321  00006D                     	ds	1
  1322  00006E                     _add_sensor$1162:
  1323                           	opt stack 0
  1324  00006E                     del_sensor@sensorIndex:
  1325                           	opt stack 0
  1326  00006E                     parse_csq_ok@i:
  1327                           	opt stack 0
  1328  00006E                     program_field@i:
  1329                           	opt stack 0
  1330                           
  1331                           ; 1 bytes @ 0xE
  1332  00006E                     	ds	1
  1333  00006F                     add_sensor@i:
  1334                           	opt stack 0
  1335  00006F                     del_sensor@i:
  1336                           	opt stack 0
  1337  00006F                     parse_csq_ok@tens_digit:
  1338                           	opt stack 0
  1339  00006F                     program_field@start_addr:
  1340                           	opt stack 0
  1341                           
  1342                           ; 1 bytes @ 0xF
  1343  00006F                     	ds	1
  1344  000070                     add_sensor@i_1163:
  1345                           	opt stack 0
  1346  000070                     check_md_state@tempStatus:
  1347                           	opt stack 0
  1348  000070                     program_field@field_number:
  1349                           	opt stack 0
  1350                           
  1351                           ; 1 bytes @ 0x10
  1352  000070                     	ds	1
  1353  000071                     ??_start_modem:
  1354  000071                     ??_parse_cmgr:
  1355                           
  1356                           ; 1 bytes @ 0x11
  1357  000071                     	ds	1
  1358  000072                     send_sms_ok@msgIndex:
  1359                           	opt stack 0
  1360                           
  1361                           ; 3 bytes @ 0x12
  1362  000072                     	ds	1
  1363  000073                     parse_cmgr@cmgr_rsp:
  1364                           	opt stack 0
  1365                           
  1366                           ; 8 bytes @ 0x13
  1367  000073                     	ds	2
  1368  000075                     send_sms_ok@isValidCmd:
  1369                           	opt stack 0
  1370                           
  1371                           ; 1 bytes @ 0x15
  1372  000075                     	ds	1
  1373  000076                     send_sms_ok@smsEndIndex:
  1374                           	opt stack 0
  1375                           
  1376                           ; 1 bytes @ 0x16
  1377  000076                     	ds	1
  1378  000077                     send_sms_ok@poundCount:
  1379                           	opt stack 0
  1380                           
  1381                           ; 1 bytes @ 0x17
  1382  000077                     	ds	1
  1383  000078                     send_sms_ok@i:
  1384                           	opt stack 0
  1385                           
  1386                           ; 1 bytes @ 0x18
  1387  000078                     	ds	3
  1388  00007B                     parse_cmgr@colon_index:
  1389                           	opt stack 0
  1390                           
  1391                           ; 1 bytes @ 0x1B
  1392  00007B                     	ds	1
  1393  00007C                     parse_cmgr@newline_index:
  1394                           	opt stack 0
  1395                           
  1396                           ; 1 bytes @ 0x1C
  1397  00007C                     	ds	1
  1398  00007D                     parse_cmgr@k:
  1399                           	opt stack 0
  1400                           
  1401                           ; 1 bytes @ 0x1D
  1402  00007D                     	ds	1
  1403  00007E                     parse_cmgr@access_code:
  1404                           	opt stack 0
  1405                           
  1406                           ; 4 bytes @ 0x1E
  1407  00007E                     	ds	3
  1408  000081                     start_sms_ok@cnmi:
  1409                           	opt stack 0
  1410                           
  1411                           ; 14 bytes @ 0x21
  1412  000081                     	ds	1
  1413  000082                     parse_cmgr@field_num_tens:
  1414                           	opt stack 0
  1415                           
  1416                           ; 1 bytes @ 0x22
  1417  000082                     	ds	1
  1418  000083                     parse_cmgr@field_num_ones:
  1419                           	opt stack 0
  1420                           
  1421                           ; 1 bytes @ 0x23
  1422  000083                     	ds	1
  1423  000084                     parse_cmgr@final_field_term:
  1424                           	opt stack 0
  1425                           
  1426                           ; 1 bytes @ 0x24
  1427  000084                     	ds	1
  1428  000085                     parse_cmgr@final_field_index:
  1429                           	opt stack 0
  1430                           
  1431                           ; 1 bytes @ 0x25
  1432  000085                     	ds	1
  1433  000086                     parse_cmgr@l:
  1434                           	opt stack 0
  1435                           
  1436                           ; 1 bytes @ 0x26
  1437  000086                     	ds	1
  1438  000087                     parse_cmgr@j:
  1439                           	opt stack 0
  1440                           
  1441                           ; 1 bytes @ 0x27
  1442  000087                     	ds	1
  1443  000088                     parse_cmgr@i:
  1444                           	opt stack 0
  1445                           
  1446                           ; 1 bytes @ 0x28
  1447  000088                     	ds	1
  1448  000089                     ??_read_sms:
  1449                           
  1450                           ; 1 bytes @ 0x29
  1451  000089                     	ds	2
  1452  00008B                     read_sms@cmgl:
  1453                           	opt stack 0
  1454                           
  1455                           ; 16 bytes @ 0x2B
  1456  00008B                     	ds	4
  1457  00008F                     start_sms_ok@cmgf:
  1458                           	opt stack 0
  1459                           
  1460                           ; 12 bytes @ 0x2F
  1461  00008F                     	ds	12
  1462  00009B                     read_sms@cmgr:
  1463                           	opt stack 0
  1464                           
  1465                           ; 9 bytes @ 0x3B
  1466  00009B                     	ds	9
  1467  0000A4                     read_sms@cmgd:
  1468                           	opt stack 0
  1469                           
  1470                           ; 9 bytes @ 0x44
  1471  0000A4                     	ds	9
  1472  0000AD                     read_sms@msgIndex:
  1473                           	opt stack 0
  1474                           
  1475                           ; 3 bytes @ 0x4D
  1476  0000AD                     	ds	3
  1477  0000B0                     ??_listen_sms:
  1478                           
  1479                           ; 1 bytes @ 0x50
  1480  0000B0                     	ds	1
  1481  0000B1                     tblptru	equ	0xFF8
  1482                           tblptrh	equ	0xFF7
  1483                           tblptrl	equ	0xFF6
  1484                           tablat	equ	0xFF5
  1485                           postinc0	equ	0xFEE
  1486                           wreg	equ	0xFE8
  1487                           postdec1	equ	0xFE5
  1488                           fsr1l	equ	0xFE1
  1489                           
  1490                           ; 1 bytes @ 0x51
  1491                           
  1492                           	psect	cstackCOMRAM
  1493  000024                     __pcstackCOMRAM:
  1494                           	opt stack 0
  1495  000024                     i2ee_read@addr:
  1496                           	opt stack 0
  1497                           
  1498                           ; 1 bytes @ 0x0
  1499  000024                     	ds	1
  1500  000025                     i2ee_read@page:
  1501                           	opt stack 0
  1502                           
  1503                           ; 1 bytes @ 0x1
  1504  000025                     	ds	1
  1505  000026                     i2ee_read@data:
  1506                           	opt stack 0
  1507                           
  1508                           ; 1 bytes @ 0x2
  1509  000026                     	ds	1
  1510  000027                     i2add_event@zone:
  1511                           	opt stack 0
  1512                           
  1513                           ; 1 bytes @ 0x3
  1514  000027                     	ds	1
  1515  000028                     ??i2_add_event:
  1516                           
  1517                           ; 1 bytes @ 0x4
  1518  000028                     	ds	1
  1519  000029                     i2add_event@event:
  1520                           	opt stack 0
  1521                           
  1522                           ; 1 bytes @ 0x5
  1523  000029                     	ds	1
  1524  00002A                     i2add_event@i:
  1525                           	opt stack 0
  1526                           
  1527                           ; 1 bytes @ 0x6
  1528  00002A                     	ds	1
  1529  00002B                     ??_isr:
  1530                           
  1531                           ; 1 bytes @ 0x7
  1532  00002B                     	ds	20
  1533  00003F                     isr@temp:
  1534                           	opt stack 0
  1535                           
  1536                           ; 1 bytes @ 0x1B
  1537  00003F                     	ds	1
  1538                           tblptru	equ	0xFF8
  1539                           tblptrh	equ	0xFF7
  1540                           tblptrl	equ	0xFF6
  1541                           tablat	equ	0xFF5
  1542                           postinc0	equ	0xFEE
  1543                           wreg	equ	0xFE8
  1544                           postdec1	equ	0xFE5
  1545                           fsr1l	equ	0xFE1
  1546                           
  1547 ;;
  1548 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1549 ;;
  1550 ;; *************** function _main *****************
  1551 ;; Defined at:
  1552 ;;		line 16 in file "main.c"
  1553 ;; Parameters:    Size  Location     Type
  1554 ;;		None
  1555 ;; Auto vars:     Size  Location     Type
  1556 ;;		None
  1557 ;; Return value:  Size  Location     Type
  1558 ;;                  1    wreg      void 
  1559 ;; Registers used:
  1560 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1561 ;; Tracked objects:
  1562 ;;		On entry : 0/0
  1563 ;;		On exit  : 0/0
  1564 ;;		Unchanged: 0/0
  1565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1569 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1570 ;;Total ram usage:        0 bytes
  1571 ;; Hardware stack levels required when called:   10
  1572 ;; This function calls:
  1573 ;;		_check_state
  1574 ;;		_disable_md_rxint
  1575 ;;		_event_queue_is_empty
  1576 ;;		_init_pic
  1577 ;;		_load_ID
  1578 ;;		_terminate_md_uart
  1579 ;;		_terminate_rf_uart
  1580 ;; This function is called by:
  1581 ;;		Startup code after reset
  1582 ;; This function uses a non-reentrant model
  1583 ;;
  1584                           
  1585                           	psect	text0
  1586  0021FA                     __ptext0:
  1587                           	opt stack 0
  1588  0021FA                     _main:
  1589                           	opt stack 21
  1590                           
  1591                           ;main.c: 18: init_pic();
  1592                           
  1593                           ;incstack = 0
  1594  0021FA  ECAD  F010         	call	_init_pic	;wreg free
  1595                           
  1596                           ;main.c: 20: load_ID();
  1597  0021FE  EC17  F010         	call	_load_ID	;wreg free
  1598  002202                     l199:
  1599  002202  0004               	clrwdt		;# 
  1600                           
  1601                           ;main.c: 24: check_state();
  1602  002204  ECA4  F00D         	call	_check_state	;wreg free
  1603                           
  1604                           ;main.c: 26: if (event_queue_is_empty() && STATE == IDLE && test_count == 0 && MD_STATE 
      +                          == MD_OFF)
  1605  002208  EC5E  F012         	call	_event_queue_is_empty	;wreg free
  1606  00220C  0900               	iorlw	0
  1607  00220E  B4D8               	btfsc	status,2,c
  1608  002210  D012               	goto	l200
  1609  002212  501E               	movf	_STATE,w,c
  1610  002214  A4D8               	btfss	status,2,c
  1611  002216  D00F               	goto	l200
  1612  002218  5019               	movf	_test_count,w,c
  1613  00221A  A4D8               	btfss	status,2,c
  1614  00221C  D00C               	goto	l200
  1615  00221E  500F               	movf	_MD_STATE,w,c
  1616  002220  A4D8               	btfss	status,2,c
  1617  002222  D009               	goto	l200
  1618                           
  1619                           ;main.c: 27: {
  1620                           ;main.c: 28: disable_md_rxint();
  1621  002224  EC91  F012         	call	_disable_md_rxint	;wreg free
  1622                           
  1623                           ;main.c: 29: terminate_md_uart();
  1624  002228  EC8C  F012         	call	_terminate_md_uart	;wreg free
  1625                           
  1626                           ;main.c: 30: terminate_rf_uart();
  1627  00222C  ECA0  F012         	call	_terminate_rf_uart	;wreg free
  1628  002230  0003               	sleep		;# 
  1629                           
  1630                           ;main.c: 32: __nop();
  1631  002232  F000               	nop	
  1632                           
  1633                           ;main.c: 33: }
  1634  002234  D7E6               	goto	l199
  1635  002236                     l200:
  1636                           
  1637                           ;main.c: 34: else if (!event_queue_is_empty())
  1638  002236  EC5E  F012         	call	_event_queue_is_empty	;wreg free
  1639                           
  1640                           ;main.c: 35: {
  1641  00223A  D7E3               	goto	l199
  1642  00223C                     __end_of_main:
  1643                           	opt stack 0
  1644                           tblptru	equ	0xFF8
  1645                           tblptrh	equ	0xFF7
  1646                           tblptrl	equ	0xFF6
  1647                           tablat	equ	0xFF5
  1648                           postinc0	equ	0xFEE
  1649                           wreg	equ	0xFE8
  1650                           postdec1	equ	0xFE5
  1651                           fsr1l	equ	0xFE1
  1652                           status	equ	0xFD8
  1653                           
  1654 ;; *************** function _terminate_rf_uart *****************
  1655 ;; Defined at:
  1656 ;;		line 57 in file "uart.c"
  1657 ;; Parameters:    Size  Location     Type
  1658 ;;		None
  1659 ;; Auto vars:     Size  Location     Type
  1660 ;;		None
  1661 ;; Return value:  Size  Location     Type
  1662 ;;                  1    wreg      void 
  1663 ;; Registers used:
  1664 ;;		None
  1665 ;; Tracked objects:
  1666 ;;		On entry : 0/0
  1667 ;;		On exit  : 0/0
  1668 ;;		Unchanged: 0/0
  1669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1673 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1674 ;;Total ram usage:        0 bytes
  1675 ;; Hardware stack levels used:    1
  1676 ;; Hardware stack levels required when called:    3
  1677 ;; This function calls:
  1678 ;;		Nothing
  1679 ;; This function is called by:
  1680 ;;		_main
  1681 ;; This function uses a non-reentrant model
  1682 ;;
  1683                           
  1684                           	psect	text1
  1685  002540                     __ptext1:
  1686                           	opt stack 0
  1687  002540                     _terminate_rf_uart:
  1688                           	opt stack 27
  1689                           
  1690                           ;uart.c: 59: RCSTA2bits.SPEN = 0;
  1691                           
  1692                           ;incstack = 0
  1693  002540  9E71               	bcf	3953,7,c	;volatile
  1694                           
  1695                           ;uart.c: 60: RCSTA2bits.CREN = 0;
  1696  002542  9871               	bcf	3953,4,c	;volatile
  1697                           
  1698                           ;uart.c: 61: TXSTA2bits.TXEN = 0;
  1699  002544  9A72               	bcf	3954,5,c	;volatile
  1700  002546  0012               	return		;funcret
  1701  002548                     __end_of_terminate_rf_uart:
  1702                           	opt stack 0
  1703                           tblptru	equ	0xFF8
  1704                           tblptrh	equ	0xFF7
  1705                           tblptrl	equ	0xFF6
  1706                           tablat	equ	0xFF5
  1707                           postinc0	equ	0xFEE
  1708                           wreg	equ	0xFE8
  1709                           postdec1	equ	0xFE5
  1710                           fsr1l	equ	0xFE1
  1711                           status	equ	0xFD8
  1712                           
  1713 ;; *************** function _terminate_md_uart *****************
  1714 ;; Defined at:
  1715 ;;		line 83 in file "uart.c"
  1716 ;; Parameters:    Size  Location     Type
  1717 ;;		None
  1718 ;; Auto vars:     Size  Location     Type
  1719 ;;		None
  1720 ;; Return value:  Size  Location     Type
  1721 ;;                  1    wreg      void 
  1722 ;; Registers used:
  1723 ;;		None
  1724 ;; Tracked objects:
  1725 ;;		On entry : 0/0
  1726 ;;		On exit  : 0/0
  1727 ;;		Unchanged: 0/0
  1728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1732 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1733 ;;Total ram usage:        0 bytes
  1734 ;; Hardware stack levels used:    1
  1735 ;; Hardware stack levels required when called:    3
  1736 ;; This function calls:
  1737 ;;		Nothing
  1738 ;; This function is called by:
  1739 ;;		_main
  1740 ;; This function uses a non-reentrant model
  1741 ;;
  1742                           
  1743                           	psect	text2
  1744  002518                     __ptext2:
  1745                           	opt stack 0
  1746  002518                     _terminate_md_uart:
  1747                           	opt stack 27
  1748                           
  1749                           ;uart.c: 85: RCSTA1bits.SPEN = 0;
  1750                           
  1751                           ;incstack = 0
  1752  002518  9EAB               	bcf	4011,7,c	;volatile
  1753                           
  1754                           ;uart.c: 88: TRISCbits.TRISC7 = 0;
  1755  00251A  9E94               	bcf	3988,7,c	;volatile
  1756                           
  1757                           ;uart.c: 89: LATC7 = 0;
  1758  00251C  9E8B               	bcf	3979,7,c	;volatile
  1759                           
  1760                           ;uart.c: 90: RC1IE = 0;
  1761  00251E  9A9D               	bcf	3997,5,c	;volatile
  1762  002520  0012               	return		;funcret
  1763  002522                     __end_of_terminate_md_uart:
  1764                           	opt stack 0
  1765                           tblptru	equ	0xFF8
  1766                           tblptrh	equ	0xFF7
  1767                           tblptrl	equ	0xFF6
  1768                           tablat	equ	0xFF5
  1769                           postinc0	equ	0xFEE
  1770                           wreg	equ	0xFE8
  1771                           postdec1	equ	0xFE5
  1772                           fsr1l	equ	0xFE1
  1773                           status	equ	0xFD8
  1774                           
  1775 ;; *************** function _load_ID *****************
  1776 ;; Defined at:
  1777 ;;		line 206 in file "io.c"
  1778 ;; Parameters:    Size  Location     Type
  1779 ;;		None
  1780 ;; Auto vars:     Size  Location     Type
  1781 ;;  j               1    6[BANK0 ] unsigned char 
  1782 ;;  i               1    5[BANK0 ] unsigned char 
  1783 ;; Return value:  Size  Location     Type
  1784 ;;                  1    wreg      void 
  1785 ;; Registers used:
  1786 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1787 ;; Tracked objects:
  1788 ;;		On entry : 0/0
  1789 ;;		On exit  : 0/0
  1790 ;;		Unchanged: 0/0
  1791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1793 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1794 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1795 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1796 ;;Total ram usage:        4 bytes
  1797 ;; Hardware stack levels used:    1
  1798 ;; Hardware stack levels required when called:    4
  1799 ;; This function calls:
  1800 ;;		_ee_read
  1801 ;; This function is called by:
  1802 ;;		_main
  1803 ;; This function uses a non-reentrant model
  1804 ;;
  1805                           
  1806                           	psect	text3
  1807  00202E                     __ptext3:
  1808                           	opt stack 0
  1809  00202E                     _load_ID:
  1810                           	opt stack 26
  1811                           
  1812                           ;io.c: 208: idEndPtr = ee_read(0x00, 0x02);
  1813                           
  1814                           ;incstack = 0
  1815  00202E  0E02               	movlw	2
  1816  002030  0100               	movlb	0	; () banked
  1817  002032  6F60               	movwf	ee_read@addr& (0+255),b
  1818  002034  0E00               	movlw	0
  1819  002036  ECEB  F011         	call	_ee_read
  1820  00203A  0100               	movlb	0	; () banked
  1821  00203C  6FCA               	movwf	_idEndPtr& (0+255),b
  1822                           
  1823                           ; BSR set to: 0
  1824                           ;io.c: 209: for (uint8_t i = 0; i < idEndPtr; i++)
  1825  00203E  0E00               	movlw	0
  1826  002040  6F65               	movwf	load_ID@i& (0+255),b
  1827  002042  D024               	goto	l502
  1828  002044                     
  1829                           ; BSR set to: 0
  1830                           ;io.c: 210: {
  1831                           ;io.c: 211: for (uint8_t j = 0; j < 4; j++)
  1832                           
  1833                           ; BSR set to: 0
  1834  002044  0E00               	movlw	0
  1835  002046  6F66               	movwf	load_ID@j& (0+255),b
  1836  002048                     l8046:
  1837                           
  1838                           ; BSR set to: 0
  1839  002048  0E03               	movlw	3
  1840  00204A  6566               	cpfsgt	load_ID@j& (0+255),b
  1841  00204C  D001               	goto	l504
  1842  00204E  D01D               	goto	u10530
  1843  002050                     l504:
  1844                           
  1845                           ; BSR set to: 0
  1846                           ;io.c: 212: ID[i][j] = ee_read(0x01, (uint8_t)(0x80 + j + i));
  1847                           
  1848                           ; BSR set to: 0
  1849  002050  5165               	movf	load_ID@i& (0+255),w,b
  1850  002052  0D04               	mullw	4
  1851  002054  0E00               	movlw	low _ID
  1852  002056  6F63               	movwf	??_load_ID& (0+255),b
  1853  002058  0E03               	movlw	high _ID
  1854  00205A  6F64               	movwf	(??_load_ID+1)& (0+255),b
  1855  00205C  50F3               	movf	prodl,w,c
  1856  00205E  2763               	addwf	??_load_ID& (0+255),f,b
  1857  002060  50F4               	movf	prodh,w,c
  1858  002062  2364               	addwfc	(??_load_ID+1)& (0+255),f,b
  1859  002064  5166               	movf	load_ID@j& (0+255),w,b
  1860  002066  0D01               	mullw	1
  1861  002068  50F3               	movf	prodl,w,c
  1862  00206A  2563               	addwf	??_load_ID& (0+255),w,b
  1863  00206C  6ED9               	movwf	fsr2l,c
  1864  00206E  50F4               	movf	prodh,w,c
  1865  002070  2164               	addwfc	(??_load_ID+1)& (0+255),w,b
  1866  002072  6EDA               	movwf	fsr2h,c
  1867  002074  5166               	movf	load_ID@j& (0+255),w,b
  1868  002076  2565               	addwf	load_ID@i& (0+255),w,b
  1869  002078  0F80               	addlw	128
  1870  00207A  6F60               	movwf	ee_read@addr& (0+255),b
  1871  00207C  0E01               	movlw	1
  1872  00207E  ECEB  F011         	call	_ee_read
  1873  002082  6EDF               	movwf	indf2,c
  1874  002084  0100               	movlb	0	; () banked
  1875  002086  2B66               	incf	load_ID@j& (0+255),f,b
  1876  002088  D7DF               	goto	l8046
  1877  00208A                     u10530:
  1878                           
  1879                           ; BSR set to: 0
  1880                           
  1881                           ; BSR set to: 0
  1882  00208A  2B65               	incf	load_ID@i& (0+255),f,b
  1883  00208C                     l502:
  1884                           
  1885                           ; BSR set to: 0
  1886                           
  1887                           ; BSR set to: 0
  1888  00208C  51CA               	movf	_idEndPtr& (0+255),w,b
  1889  00208E  5D65               	subwf	load_ID@i& (0+255),w,b
  1890  002090  B0D8               	btfsc	status,0,c
  1891  002092  0012               	return	
  1892  002094  D7D7               	goto	l503
  1893  002096                     __end_of_load_ID:
  1894                           	opt stack 0
  1895                           tblptru	equ	0xFF8
  1896                           tblptrh	equ	0xFF7
  1897                           tblptrl	equ	0xFF6
  1898                           tablat	equ	0xFF5
  1899                           prodh	equ	0xFF4
  1900                           prodl	equ	0xFF3
  1901                           postinc0	equ	0xFEE
  1902                           wreg	equ	0xFE8
  1903                           postdec1	equ	0xFE5
  1904                           fsr1l	equ	0xFE1
  1905                           indf2	equ	0xFDF
  1906                           fsr2h	equ	0xFDA
  1907                           fsr2l	equ	0xFD9
  1908                           status	equ	0xFD8
  1909                           
  1910 ;; *************** function _init_pic *****************
  1911 ;; Defined at:
  1912 ;;		line 10 in file "io.c"
  1913 ;; Parameters:    Size  Location     Type
  1914 ;;		None
  1915 ;; Auto vars:     Size  Location     Type
  1916 ;;		None
  1917 ;; Return value:  Size  Location     Type
  1918 ;;                  1    wreg      void 
  1919 ;; Registers used:
  1920 ;;		wreg, status,2, cstack
  1921 ;; Tracked objects:
  1922 ;;		On entry : 0/0
  1923 ;;		On exit  : 0/0
  1924 ;;		Unchanged: 0/0
  1925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1929 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1930 ;;Total ram usage:        0 bytes
  1931 ;; Hardware stack levels used:    1
  1932 ;; Hardware stack levels required when called:    5
  1933 ;; This function calls:
  1934 ;;		_clear_at_ok
  1935 ;;		_enable_ints
  1936 ;;		_init_uart
  1937 ;; This function is called by:
  1938 ;;		_main
  1939 ;; This function uses a non-reentrant model
  1940 ;;
  1941                           
  1942                           	psect	text4
  1943  00215A                     __ptext4:
  1944                           	opt stack 0
  1945  00215A                     _init_pic:
  1946                           	opt stack 25
  1947                           
  1948                           ;io.c: 13: OSCCONbits.IDLEN = 0;
  1949                           
  1950                           ; BSR set to: 0
  1951                           ;incstack = 0
  1952  00215A  9ED3               	bcf	4051,7,c	;volatile
  1953                           
  1954                           ;io.c: 14: OSCCONbits.IRCF = 0b110;
  1955  00215C  50D3               	movf	4051,w,c	;volatile
  1956  00215E  0B8F               	andlw	-113
  1957  002160  0960               	iorlw	96
  1958  002162  6ED3               	movwf	4051,c	;volatile
  1959                           
  1960                           ;io.c: 15: OSCCONbits.OSTS = 1;
  1961  002164  86D3               	bsf	4051,3,c	;volatile
  1962                           
  1963                           ;io.c: 18: ANSELA = 0x01;
  1964  002166  0E01               	movlw	1
  1965  002168  010F               	movlb	15	; () banked
  1966  00216A  6F38               	movwf	56,b	;volatile
  1967                           
  1968                           ;io.c: 19: ANSELB = 0x00;
  1969  00216C  0E00               	movlw	0
  1970  00216E  6F39               	movwf	57,b	;volatile
  1971                           
  1972                           ;io.c: 20: ANSELC = 0x00;
  1973  002170  0E00               	movlw	0
  1974  002172  6F3A               	movwf	58,b	;volatile
  1975                           
  1976                           ;io.c: 22: TRISA = 0b00000001;
  1977  002174  0E01               	movlw	1
  1978  002176  6E92               	movwf	3986,c	;volatile
  1979                           
  1980                           ;io.c: 23: TRISB = 0b10110110;
  1981  002178  0EB6               	movlw	182
  1982  00217A  6E93               	movwf	3987,c	;volatile
  1983                           
  1984                           ;io.c: 24: TRISC = 0b10000100;
  1985  00217C  0E84               	movlw	132
  1986  00217E  6E94               	movwf	3988,c	;volatile
  1987                           
  1988                           ; BSR set to: 15
  1989                           ;io.c: 26: LATC4=1;
  1990  002180  888B               	bsf	3979,4,c	;volatile
  1991                           
  1992                           ; BSR set to: 15
  1993                           ;io.c: 27: LATB3=1;
  1994  002182  868A               	bsf	3978,3,c	;volatile
  1995                           
  1996                           ;io.c: 35: T0CON = 0x87;
  1997  002184  0E87               	movlw	135
  1998  002186  6ED5               	movwf	4053,c	;volatile
  1999                           
  2000                           ;io.c: 36: TMR0H = ((65535-780)/256);
  2001  002188  0EFC               	movlw	252
  2002  00218A  6ED7               	movwf	4055,c	;volatile
  2003                           
  2004                           ;io.c: 37: TMR0L = ((65535-780)%256);
  2005  00218C  0EF3               	movlw	243
  2006  00218E  6ED6               	movwf	4054,c	;volatile
  2007                           
  2008                           ; BSR set to: 15
  2009                           ;io.c: 38: TMR0IF = 0;
  2010  002190  94F2               	bcf	intcon,2,c	;volatile
  2011                           
  2012                           ; BSR set to: 15
  2013                           ;io.c: 60: LATAbits.LATA4 = 0;
  2014  002192  9889               	bcf	3977,4,c	;volatile
  2015                           
  2016                           ; BSR set to: 15
  2017                           ;io.c: 61: IOCBbits.IOCB4 = 1;
  2018  002194  8862               	bsf	3938,4,c	;volatile
  2019                           
  2020                           ; BSR set to: 15
  2021                           ;io.c: 63: INTCONbits.RBIE = 1;
  2022  002196  86F2               	bsf	intcon,3,c	;volatile
  2023                           
  2024                           ; BSR set to: 15
  2025                           ;io.c: 64: INTCONbits.GIE = 1;
  2026  002198  8EF2               	bsf	intcon,7,c	;volatile
  2027                           
  2028                           ;io.c: 66: STATE = IDLE;
  2029  00219A  0E00               	movlw	0
  2030  00219C  6E1E               	movwf	_STATE,c
  2031                           
  2032                           ;io.c: 67: MD_STATE = MD_OFF;
  2033  00219E  0E00               	movlw	0
  2034  0021A0  6E0F               	movwf	_MD_STATE,c
  2035                           
  2036                           ; BSR set to: 15
  2037                           ;io.c: 70: init_uart();
  2038  0021A2  ECA3  F011         	call	_init_uart	;wreg free
  2039                           
  2040                           ;io.c: 72: clear_at_ok();
  2041  0021A6  EC1E  F011         	call	_clear_at_ok	;wreg free
  2042                           
  2043                           ;io.c: 74: enable_ints();
  2044  0021AA  EC7D  F011         	call	_enable_ints	;wreg free
  2045  0021AE  0012               	return		;funcret
  2046  0021B0                     __end_of_init_pic:
  2047                           	opt stack 0
  2048                           tblptru	equ	0xFF8
  2049                           tblptrh	equ	0xFF7
  2050                           tblptrl	equ	0xFF6
  2051                           tablat	equ	0xFF5
  2052                           prodh	equ	0xFF4
  2053                           prodl	equ	0xFF3
  2054                           intcon	equ	0xFF2
  2055                           postinc0	equ	0xFEE
  2056                           wreg	equ	0xFE8
  2057                           postdec1	equ	0xFE5
  2058                           fsr1l	equ	0xFE1
  2059                           indf2	equ	0xFDF
  2060                           fsr2h	equ	0xFDA
  2061                           fsr2l	equ	0xFD9
  2062                           status	equ	0xFD8
  2063                           
  2064 ;; *************** function _enable_ints *****************
  2065 ;; Defined at:
  2066 ;;		line 313 in file "io.c"
  2067 ;; Parameters:    Size  Location     Type
  2068 ;;		None
  2069 ;; Auto vars:     Size  Location     Type
  2070 ;;		None
  2071 ;; Return value:  Size  Location     Type
  2072 ;;                  1    wreg      void 
  2073 ;; Registers used:
  2074 ;;		wreg, status,2, cstack
  2075 ;; Tracked objects:
  2076 ;;		On entry : 0/0
  2077 ;;		On exit  : 0/0
  2078 ;;		Unchanged: 0/0
  2079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2083 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2084 ;;Total ram usage:        0 bytes
  2085 ;; Hardware stack levels used:    1
  2086 ;; Hardware stack levels required when called:    4
  2087 ;; This function calls:
  2088 ;;		_start_timer0
  2089 ;; This function is called by:
  2090 ;;		_init_pic
  2091 ;; This function uses a non-reentrant model
  2092 ;;
  2093                           
  2094                           	psect	text5
  2095  0022FA                     __ptext5:
  2096                           	opt stack 0
  2097  0022FA                     _enable_ints:
  2098                           	opt stack 25
  2099                           
  2100                           ;io.c: 315: INTCONbits.GIE = 0;
  2101                           
  2102                           ;incstack = 0
  2103  0022FA  9EF2               	bcf	intcon,7,c	;volatile
  2104                           
  2105                           ;io.c: 322: start_timer0();
  2106  0022FC  EC4C  F012         	call	_start_timer0	;wreg free
  2107                           
  2108                           ;io.c: 325: T3CONbits.T3CKPS = 0b11;
  2109  002300  0E30               	movlw	48
  2110  002302  12B1               	iorwf	4017,f,c	;volatile
  2111                           
  2112                           ;io.c: 326: T3CONbits.TMR3CS = 0b00;
  2113  002304  0E3F               	movlw	-193
  2114  002306  16B1               	andwf	4017,f,c	;volatile
  2115                           
  2116                           ;io.c: 327: T3CONbits.nT3SYNC = 1;
  2117  002308  84B1               	bsf	4017,2,c	;volatile
  2118                           
  2119                           ;io.c: 329: T3CONbits.TMR3ON = 1;
  2120  00230A  80B1               	bsf	4017,0,c	;volatile
  2121                           
  2122                           ;io.c: 330: PIE2bits.TMR3IE = 1;
  2123  00230C  82A0               	bsf	4000,1,c	;volatile
  2124                           
  2125                           ;io.c: 331: PIR2bits.TMR3IF = 0;
  2126  00230E  92A1               	bcf	4001,1,c	;volatile
  2127                           
  2128                           ;io.c: 332: TMR3H = 0x60;
  2129  002310  0E60               	movlw	96
  2130  002312  6EB3               	movwf	4019,c	;volatile
  2131                           
  2132                           ;io.c: 333: TMR3L = 0;
  2133  002314  0E00               	movlw	0
  2134  002316  6EB2               	movwf	4018,c	;volatile
  2135                           
  2136                           ;io.c: 335: INTCONbits.GIE = 0;
  2137  002318  9EF2               	bcf	intcon,7,c	;volatile
  2138                           
  2139                           ;io.c: 336: INTCONbits.PEIE = 1;
  2140  00231A  8CF2               	bsf	intcon,6,c	;volatile
  2141                           
  2142                           ;io.c: 338: INTCONbits.GIE = 1;
  2143  00231C  8EF2               	bsf	intcon,7,c	;volatile
  2144  00231E  0012               	return		;funcret
  2145  002320                     __end_of_enable_ints:
  2146                           	opt stack 0
  2147                           tblptru	equ	0xFF8
  2148                           tblptrh	equ	0xFF7
  2149                           tblptrl	equ	0xFF6
  2150                           tablat	equ	0xFF5
  2151                           prodh	equ	0xFF4
  2152                           prodl	equ	0xFF3
  2153                           intcon	equ	0xFF2
  2154                           postinc0	equ	0xFEE
  2155                           wreg	equ	0xFE8
  2156                           postdec1	equ	0xFE5
  2157                           fsr1l	equ	0xFE1
  2158                           indf2	equ	0xFDF
  2159                           fsr2h	equ	0xFDA
  2160                           fsr2l	equ	0xFD9
  2161                           status	equ	0xFD8
  2162                           
  2163 ;; *************** function _start_timer0 *****************
  2164 ;; Defined at:
  2165 ;;		line 367 in file "io.c"
  2166 ;; Parameters:    Size  Location     Type
  2167 ;;		None
  2168 ;; Auto vars:     Size  Location     Type
  2169 ;;		None
  2170 ;; Return value:  Size  Location     Type
  2171 ;;                  1    wreg      void 
  2172 ;; Registers used:
  2173 ;;		wreg, status,2
  2174 ;; Tracked objects:
  2175 ;;		On entry : 0/0
  2176 ;;		On exit  : 0/0
  2177 ;;		Unchanged: 0/0
  2178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2182 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2183 ;;Total ram usage:        0 bytes
  2184 ;; Hardware stack levels used:    1
  2185 ;; Hardware stack levels required when called:    3
  2186 ;; This function calls:
  2187 ;;		Nothing
  2188 ;; This function is called by:
  2189 ;;		_enable_ints
  2190 ;; This function uses a non-reentrant model
  2191 ;;
  2192                           
  2193                           	psect	text6
  2194  002498                     __ptext6:
  2195                           	opt stack 0
  2196  002498                     _start_timer0:
  2197                           	opt stack 25
  2198                           
  2199                           ;io.c: 369: T0CON = 0x87;
  2200                           
  2201                           ;incstack = 0
  2202  002498  0E87               	movlw	135
  2203  00249A  6ED5               	movwf	4053,c	;volatile
  2204                           
  2205                           ;io.c: 370: TMR0L = ((65535-781)%256);
  2206  00249C  0EF2               	movlw	242
  2207  00249E  6ED6               	movwf	4054,c	;volatile
  2208                           
  2209                           ;io.c: 371: TMR0H = ((65535-781)/256);
  2210  0024A0  0EFC               	movlw	252
  2211  0024A2  6ED7               	movwf	4055,c	;volatile
  2212                           
  2213                           ;io.c: 372: TMR0IF = 0;
  2214  0024A4  94F2               	bcf	intcon,2,c	;volatile
  2215                           
  2216                           ;io.c: 373: TMR0IE = 1;
  2217  0024A6  8AF2               	bsf	intcon,5,c	;volatile
  2218                           
  2219                           ;io.c: 374: INTCONbits.GIE = 1;
  2220  0024A8  8EF2               	bsf	intcon,7,c	;volatile
  2221  0024AA  0012               	return		;funcret
  2222  0024AC                     __end_of_start_timer0:
  2223                           	opt stack 0
  2224                           tblptru	equ	0xFF8
  2225                           tblptrh	equ	0xFF7
  2226                           tblptrl	equ	0xFF6
  2227                           tablat	equ	0xFF5
  2228                           prodh	equ	0xFF4
  2229                           prodl	equ	0xFF3
  2230                           intcon	equ	0xFF2
  2231                           postinc0	equ	0xFEE
  2232                           wreg	equ	0xFE8
  2233                           postdec1	equ	0xFE5
  2234                           fsr1l	equ	0xFE1
  2235                           indf2	equ	0xFDF
  2236                           fsr2h	equ	0xFDA
  2237                           fsr2l	equ	0xFD9
  2238                           status	equ	0xFD8
  2239                           
  2240 ;; *************** function _event_queue_is_empty *****************
  2241 ;; Defined at:
  2242 ;;		line 13 in file "queue.c"
  2243 ;; Parameters:    Size  Location     Type
  2244 ;;		None
  2245 ;; Auto vars:     Size  Location     Type
  2246 ;;		None
  2247 ;; Return value:  Size  Location     Type
  2248 ;;                  1    wreg      unsigned char 
  2249 ;; Registers used:
  2250 ;;		wreg, status,2
  2251 ;; Tracked objects:
  2252 ;;		On entry : 0/0
  2253 ;;		On exit  : 0/0
  2254 ;;		Unchanged: 0/0
  2255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2259 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2260 ;;Total ram usage:        0 bytes
  2261 ;; Hardware stack levels used:    1
  2262 ;; Hardware stack levels required when called:    3
  2263 ;; This function calls:
  2264 ;;		Nothing
  2265 ;; This function is called by:
  2266 ;;		_main
  2267 ;; This function uses a non-reentrant model
  2268 ;;
  2269                           
  2270                           	psect	text7
  2271  0024BC                     __ptext7:
  2272                           	opt stack 0
  2273  0024BC                     _event_queue_is_empty:
  2274                           	opt stack 27
  2275                           
  2276                           ;queue.c: 15: return (bool)(queue_end_ptr > 0);
  2277                           
  2278                           ;incstack = 0
  2279  0024BC  5002               	movf	_queue_end_ptr,w,c
  2280  0024BE  B4D8               	btfsc	status,2,c
  2281  0024C0  D002               	goto	u10590
  2282  0024C2  0E01               	movlw	1
  2283  0024C4  0012               	return	
  2284  0024C6                     u10590:
  2285  0024C6  0E00               	movlw	0
  2286  0024C8  0012               	return	
  2287  0024CA                     __end_of_event_queue_is_empty:
  2288                           	opt stack 0
  2289                           tblptru	equ	0xFF8
  2290                           tblptrh	equ	0xFF7
  2291                           tblptrl	equ	0xFF6
  2292                           tablat	equ	0xFF5
  2293                           prodh	equ	0xFF4
  2294                           prodl	equ	0xFF3
  2295                           intcon	equ	0xFF2
  2296                           postinc0	equ	0xFEE
  2297                           wreg	equ	0xFE8
  2298                           postdec1	equ	0xFE5
  2299                           fsr1l	equ	0xFE1
  2300                           indf2	equ	0xFDF
  2301                           fsr2h	equ	0xFDA
  2302                           fsr2l	equ	0xFD9
  2303                           status	equ	0xFD8
  2304                           
  2305 ;; *************** function _disable_md_rxint *****************
  2306 ;; Defined at:
  2307 ;;		line 74 in file "uart.c"
  2308 ;; Parameters:    Size  Location     Type
  2309 ;;		None
  2310 ;; Auto vars:     Size  Location     Type
  2311 ;;		None
  2312 ;; Return value:  Size  Location     Type
  2313 ;;                  1    wreg      void 
  2314 ;; Registers used:
  2315 ;;		None
  2316 ;; Tracked objects:
  2317 ;;		On entry : 0/0
  2318 ;;		On exit  : 0/0
  2319 ;;		Unchanged: 0/0
  2320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2324 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2325 ;;Total ram usage:        0 bytes
  2326 ;; Hardware stack levels used:    1
  2327 ;; Hardware stack levels required when called:    3
  2328 ;; This function calls:
  2329 ;;		Nothing
  2330 ;; This function is called by:
  2331 ;;		_main
  2332 ;; This function uses a non-reentrant model
  2333 ;;
  2334                           
  2335                           	psect	text8
  2336  002522                     __ptext8:
  2337                           	opt stack 0
  2338  002522                     _disable_md_rxint:
  2339                           	opt stack 27
  2340                           
  2341                           ;uart.c: 76: CREN1 = 0;
  2342                           
  2343                           ;incstack = 0
  2344  002522  98AB               	bcf	4011,4,c	;volatile
  2345                           
  2346                           ;uart.c: 77: GIE = 0;
  2347  002524  9EF2               	bcf	intcon,7,c	;volatile
  2348                           
  2349                           ;uart.c: 78: PIE1bits.RC1IE = 0;
  2350  002526  9A9D               	bcf	3997,5,c	;volatile
  2351                           
  2352                           ;uart.c: 79: GIE = 1;
  2353  002528  8EF2               	bsf	intcon,7,c	;volatile
  2354  00252A  0012               	return		;funcret
  2355  00252C                     __end_of_disable_md_rxint:
  2356                           	opt stack 0
  2357                           tblptru	equ	0xFF8
  2358                           tblptrh	equ	0xFF7
  2359                           tblptrl	equ	0xFF6
  2360                           tablat	equ	0xFF5
  2361                           prodh	equ	0xFF4
  2362                           prodl	equ	0xFF3
  2363                           intcon	equ	0xFF2
  2364                           postinc0	equ	0xFEE
  2365                           wreg	equ	0xFE8
  2366                           postdec1	equ	0xFE5
  2367                           fsr1l	equ	0xFE1
  2368                           indf2	equ	0xFDF
  2369                           fsr2h	equ	0xFDA
  2370                           fsr2l	equ	0xFD9
  2371                           status	equ	0xFD8
  2372                           
  2373 ;; *************** function _check_state *****************
  2374 ;; Defined at:
  2375 ;;		line 43 in file "main.c"
  2376 ;; Parameters:    Size  Location     Type
  2377 ;;		None
  2378 ;; Auto vars:     Size  Location     Type
  2379 ;;		None
  2380 ;; Return value:  Size  Location     Type
  2381 ;;                  1    wreg      void 
  2382 ;; Registers used:
  2383 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2384 ;; Tracked objects:
  2385 ;;		On entry : 0/0
  2386 ;;		On exit  : 0/0
  2387 ;;		Unchanged: 0/0
  2388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2390 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2392 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2393 ;;Total ram usage:        0 bytes
  2394 ;; Hardware stack levels used:    1
  2395 ;; Hardware stack levels required when called:    9
  2396 ;; This function calls:
  2397 ;;		_add_sensor
  2398 ;;		_check_alarm
  2399 ;;		_check_sensor
  2400 ;;		_check_super
  2401 ;;		_check_tamper
  2402 ;;		_check_test
  2403 ;;		_del_sensor
  2404 ;;		_listen_sms
  2405 ;;		_stop_sensor_tmr
  2406 ;; This function is called by:
  2407 ;;		_main
  2408 ;; This function uses a non-reentrant model
  2409 ;;
  2410                           
  2411                           	psect	text9
  2412  001B48                     __ptext9:
  2413                           	opt stack 0
  2414  001B48                     _check_state:
  2415                           	opt stack 21
  2416                           
  2417                           ;main.c: 45: switch(STATE)
  2418                           
  2419                           ;incstack = 0
  2420  001B48  D049               	goto	l208
  2421  001B4A                     
  2422                           ;main.c: 48: check_super();
  2423  001B4A  ECB2  F012         	call	_check_super	;wreg free
  2424                           
  2425                           ;main.c: 49: check_tamper();
  2426  001B4E  ECB1  F012         	call	_check_tamper	;wreg free
  2427                           
  2428                           ;main.c: 51: check_alarm();
  2429  001B52  ECB3  F012         	call	_check_alarm	;wreg free
  2430                           
  2431                           ;main.c: 52: check_test();
  2432  001B56  EC4B  F010         	call	_check_test	;wreg free
  2433                           
  2434                           ;main.c: 53: check_sensor();
  2435  001B5A  ECD8  F010         	call	_check_sensor	;wreg free
  2436                           
  2437                           ;main.c: 55: break;
  2438  001B5E  0012               	return	
  2439  001B60                     l211:
  2440  001B60  0004               	clrwdt		;# 
  2441                           
  2442                           ;main.c: 58: listen_sms();
  2443  001B62  ECB1  F00B         	call	_listen_sms	;wreg free
  2444                           
  2445                           ;main.c: 59: check_tamper();
  2446  001B66  ECB1  F012         	call	_check_tamper	;wreg free
  2447                           
  2448                           ;main.c: 61: check_alarm();
  2449  001B6A  ECB3  F012         	call	_check_alarm	;wreg free
  2450                           
  2451                           ;main.c: 62: check_test();
  2452  001B6E  EC4B  F010         	call	_check_test	;wreg free
  2453                           
  2454                           ;main.c: 63: check_sensor();
  2455  001B72  ECD8  F010         	call	_check_sensor	;wreg free
  2456                           
  2457                           ;main.c: 64: break;
  2458  001B76  0012               	return	
  2459  001B78                     l212:
  2460  001B78  0004               	clrwdt		;# 
  2461                           
  2462                           ;main.c: 67: IOCBbits.IOCB5 = 1;
  2463  001B7A  8A62               	bsf	3938,5,c	;volatile
  2464                           
  2465                           ;main.c: 68: INTCONbits.RBIE = 1;
  2466  001B7C  86F2               	bsf	intcon,3,c	;volatile
  2467                           
  2468                           ;main.c: 69: if (receivedSensor && idEndPtr < (sizeof(ID) - 1))
  2469  001B7E  0100               	movlb	0	; () banked
  2470  001B80  51C7               	movf	_receivedSensor& (0+255),w,b
  2471  001B82  B4D8               	btfsc	status,2,c
  2472  001B84  D00C               	goto	l213
  2473                           
  2474                           ; BSR set to: 0
  2475  001B86  0E3F               	movlw	63
  2476  001B88  61CA               	cpfslt	_idEndPtr& (0+255),b
  2477  001B8A  D009               	goto	l213
  2478                           
  2479                           ; BSR set to: 0
  2480                           ;main.c: 70: {
  2481                           ;main.c: 71: add_sensor(rx2_buf);
  2482  001B8C  0E1F               	movlw	low _rx2_buf
  2483  001B8E  6F66               	movwf	add_sensor@sensorID& (0+255),b
  2484  001B90  0E00               	movlw	high _rx2_buf
  2485  001B92  6F67               	movwf	(add_sensor@sensorID+1)& (0+255),b
  2486  001B94  EC2E  F007         	call	_add_sensor	;wreg free
  2487                           
  2488                           ;main.c: 72: receivedSensor = 0;
  2489  001B98  0E00               	movlw	0
  2490  001B9A  0100               	movlb	0	; () banked
  2491  001B9C  6FC7               	movwf	_receivedSensor& (0+255),b
  2492  001B9E                     l213:
  2493                           
  2494                           ; BSR set to: 0
  2495                           ;main.c: 73: }
  2496                           ;main.c: 74: if (t4_tick >= 611)
  2497                           
  2498                           ; BSR set to: 0
  2499  001B9E  0E63               	movlw	99
  2500  001BA0  5DB1               	subwf	_t4_tick& (0+255),w,b
  2501  001BA2  0E02               	movlw	2
  2502  001BA4  59B2               	subwfb	(_t4_tick+1)& (0+255),w,b
  2503  001BA6  A0D8               	btfss	status,0,c
  2504  001BA8  0012               	return	
  2505                           
  2506                           ; BSR set to: 0
  2507                           ;main.c: 75: {
  2508                           ;main.c: 76: stop_sensor_tmr();
  2509  001BAA  ECA4  F012         	call	_stop_sensor_tmr	;wreg free
  2510                           
  2511                           ;main.c: 77: STATE = PREV_STATE;
  2512  001BAE  C0C9  F01E         	movff	_PREV_STATE,_STATE
  2513                           
  2514                           ;main.c: 78: }
  2515                           ;main.c: 79: break;
  2516  001BB2  0012               	return	
  2517  001BB4                     l215:
  2518  001BB4  0004               	clrwdt		;# 
  2519                           
  2520                           ;main.c: 82: del_sensor(rx2_buf);
  2521  001BB6  0E1F               	movlw	low _rx2_buf
  2522  001BB8  0100               	movlb	0	; () banked
  2523  001BBA  6F6B               	movwf	del_sensor@sensorID& (0+255),b
  2524  001BBC  0E00               	movlw	high _rx2_buf
  2525  001BBE  6F6C               	movwf	(del_sensor@sensorID+1)& (0+255),b
  2526  001BC0  ECE1  F00E         	call	_del_sensor	;wreg free
  2527                           
  2528                           ;main.c: 83: if (t4_tick >= 611)
  2529  001BC4  0E63               	movlw	99
  2530  001BC6  0100               	movlb	0	; () banked
  2531  001BC8  5DB1               	subwf	_t4_tick& (0+255),w,b
  2532  001BCA  0E02               	movlw	2
  2533  001BCC  59B2               	subwfb	(_t4_tick+1)& (0+255),w,b
  2534  001BCE  A0D8               	btfss	status,0,c
  2535  001BD0  0012               	return	
  2536                           
  2537                           ; BSR set to: 0
  2538                           ;main.c: 84: {
  2539                           ;main.c: 85: stop_sensor_tmr();
  2540  001BD2  ECA4  F012         	call	_stop_sensor_tmr	;wreg free
  2541                           
  2542                           ;main.c: 86: STATE = PREV_STATE;
  2543  001BD6  C0C9  F01E         	movff	_PREV_STATE,_STATE
  2544                           
  2545                           ;main.c: 89: }
  2546                           
  2547                           ;main.c: 87: }
  2548                           ;main.c: 88: break;
  2549  001BDA  0012               	return	
  2550  001BDC                     l208:
  2551  001BDC  501E               	movf	_STATE,w,c
  2552                           
  2553                           ; Switch size 1, requested type "space"
  2554                           ; Number of cases is 4, Range of values is 0 to 4
  2555                           ; switch strategies available:
  2556                           ; Name         Instructions Cycles
  2557                           ; simple_byte           13     7 (average)
  2558                           ;	Chosen strategy is simple_byte
  2559  001BDE  0A00               	xorlw	0	; case 0
  2560  001BE0  B4D8               	btfsc	status,2,c
  2561  001BE2  D7B3               	goto	l209
  2562  001BE4  0A02               	xorlw	2	; case 2
  2563  001BE6  B4D8               	btfsc	status,2,c
  2564  001BE8  D7BB               	goto	l211
  2565  001BEA  0A01               	xorlw	1	; case 3
  2566  001BEC  B4D8               	btfsc	status,2,c
  2567  001BEE  D7C4               	goto	l212
  2568  001BF0  0A07               	xorlw	7	; case 4
  2569  001BF2  A4D8               	btfss	status,2,c
  2570  001BF4  0012               	return	
  2571  001BF6  D7DE               	goto	l215
  2572  001BF8                     __end_of_check_state:
  2573                           	opt stack 0
  2574                           tblptru	equ	0xFF8
  2575                           tblptrh	equ	0xFF7
  2576                           tblptrl	equ	0xFF6
  2577                           tablat	equ	0xFF5
  2578                           prodh	equ	0xFF4
  2579                           prodl	equ	0xFF3
  2580                           intcon	equ	0xFF2
  2581                           postinc0	equ	0xFEE
  2582                           wreg	equ	0xFE8
  2583                           postdec1	equ	0xFE5
  2584                           fsr1l	equ	0xFE1
  2585                           indf2	equ	0xFDF
  2586                           fsr2h	equ	0xFDA
  2587                           fsr2l	equ	0xFD9
  2588                           status	equ	0xFD8
  2589                           
  2590 ;; *************** function _stop_sensor_tmr *****************
  2591 ;; Defined at:
  2592 ;;		line 291 in file "io.c"
  2593 ;; Parameters:    Size  Location     Type
  2594 ;;		None
  2595 ;; Auto vars:     Size  Location     Type
  2596 ;;		None
  2597 ;; Return value:  Size  Location     Type
  2598 ;;                  1    wreg      void 
  2599 ;; Registers used:
  2600 ;;		None
  2601 ;; Tracked objects:
  2602 ;;		On entry : 0/0
  2603 ;;		On exit  : 0/0
  2604 ;;		Unchanged: 0/0
  2605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2609 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2610 ;;Total ram usage:        0 bytes
  2611 ;; Hardware stack levels used:    1
  2612 ;; Hardware stack levels required when called:    3
  2613 ;; This function calls:
  2614 ;;		Nothing
  2615 ;; This function is called by:
  2616 ;;		_check_state
  2617 ;; This function uses a non-reentrant model
  2618 ;;
  2619                           
  2620                           	psect	text10
  2621  002548                     __ptext10:
  2622                           	opt stack 0
  2623  002548                     _stop_sensor_tmr:
  2624                           	opt stack 26
  2625                           
  2626                           ;io.c: 293: T4CONbits.TMR4ON = 0;
  2627                           
  2628                           ;incstack = 0
  2629  002548  010F               	movlb	15	; () banked
  2630  00254A  9551               	bcf	81,2,b	;volatile
  2631                           
  2632                           ;io.c: 294: PIE5bits.TMR4IE = 0;
  2633  00254C  907D               	bcf	3965,0,c	;volatile
  2634                           
  2635                           ; BSR set to: 15
  2636  00254E  0012               	return		;funcret
  2637  002550                     __end_of_stop_sensor_tmr:
  2638                           	opt stack 0
  2639                           tblptru	equ	0xFF8
  2640                           tblptrh	equ	0xFF7
  2641                           tblptrl	equ	0xFF6
  2642                           tablat	equ	0xFF5
  2643                           prodh	equ	0xFF4
  2644                           prodl	equ	0xFF3
  2645                           intcon	equ	0xFF2
  2646                           postinc0	equ	0xFEE
  2647                           wreg	equ	0xFE8
  2648                           postdec1	equ	0xFE5
  2649                           fsr1l	equ	0xFE1
  2650                           indf2	equ	0xFDF
  2651                           fsr2h	equ	0xFDA
  2652                           fsr2l	equ	0xFD9
  2653                           status	equ	0xFD8
  2654                           
  2655 ;; *************** function _listen_sms *****************
  2656 ;; Defined at:
  2657 ;;		line 9 in file "sms.c"
  2658 ;; Parameters:    Size  Location     Type
  2659 ;;		None
  2660 ;; Auto vars:     Size  Location     Type
  2661 ;;		None
  2662 ;; Return value:  Size  Location     Type
  2663 ;;                  1    wreg      void 
  2664 ;; Registers used:
  2665 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2666 ;; Tracked objects:
  2667 ;;		On entry : 0/0
  2668 ;;		On exit  : 0/0
  2669 ;;		Unchanged: 0/0
  2670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2673 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2674 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2675 ;;Total ram usage:        1 bytes
  2676 ;; Hardware stack levels used:    1
  2677 ;; Hardware stack levels required when called:    8
  2678 ;; This function calls:
  2679 ;;		_check_sms_timer
  2680 ;;		_read_sms
  2681 ;;		_send_sms_ok
  2682 ;;		_start_modem
  2683 ;;		_start_sms_ok
  2684 ;;		_start_sms_timer
  2685 ;; This function is called by:
  2686 ;;		_check_state
  2687 ;; This function uses a non-reentrant model
  2688 ;;
  2689                           
  2690                           	psect	text11
  2691  001762                     __ptext11:
  2692                           	opt stack 0
  2693  001762                     _listen_sms:
  2694                           	opt stack 21
  2695                           
  2696                           ;sms.c: 11: if (!modem_awake)
  2697                           
  2698                           ; BSR set to: 15
  2699                           ;incstack = 0
  2700  001762  0100               	movlb	0	; () banked
  2701  001764  51C2               	movf	_modem_awake& (0+255),w,b
  2702  001766  A4D8               	btfss	status,2,c
  2703  001768  D003               	goto	l746
  2704                           
  2705                           ; BSR set to: 0
  2706                           ;sms.c: 12: start_modem();
  2707  00176A  EC7D  F010         	call	_start_modem	;wreg free
  2708  00176E  0012               	return	
  2709  001770                     l746:
  2710                           
  2711                           ;sms.c: 13: else if (modem_awake && !modem_ready_sms)
  2712  001770  0100               	movlb	0	; () banked
  2713  001772  51C2               	movf	_modem_awake& (0+255),w,b
  2714  001774  B4D8               	btfsc	status,2,c
  2715  001776  D016               	goto	l748
  2716                           
  2717                           ; BSR set to: 0
  2718  001778  51C1               	movf	_modem_ready_sms& (0+255),w,b
  2719  00177A  A4D8               	btfss	status,2,c
  2720  00177C  D013               	goto	l748
  2721                           
  2722                           ; BSR set to: 0
  2723                           ;sms.c: 14: {
  2724                           ;sms.c: 15: if (start_sms_ok() == 1)
  2725  00177E  EC2B  F00B         	call	_start_sms_ok	;wreg free
  2726  001782  06E8               	decf	wreg,f,c
  2727  001784  A4D8               	btfss	status,2,c
  2728  001786  D006               	goto	l749
  2729                           
  2730                           ;sms.c: 16: {
  2731                           ;sms.c: 17: start_sms_timer();
  2732  001788  EC18  F012         	call	_start_sms_timer	;wreg free
  2733                           
  2734                           ;sms.c: 18: modem_ready_sms = 1;
  2735  00178C  0E01               	movlw	1
  2736  00178E  0100               	movlb	0	; () banked
  2737  001790  6FC1               	movwf	_modem_ready_sms& (0+255),b
  2738                           
  2739                           ;sms.c: 19: }
  2740  001792  0012               	return	
  2741  001794                     l749:
  2742                           
  2743                           ;sms.c: 20: else if (start_sms_ok() == 5)
  2744                           
  2745                           ; BSR set to: 0
  2746  001794  EC2B  F00B         	call	_start_sms_ok	;wreg free
  2747  001798  0A05               	xorlw	5
  2748  00179A  A4D8               	btfss	status,2,c
  2749  00179C  0012               	return	
  2750                           
  2751                           ;sms.c: 21: start_modem();
  2752  00179E  EC7D  F010         	call	_start_modem	;wreg free
  2753                           
  2754                           ;sms.c: 22: }
  2755  0017A2  0012               	return	
  2756  0017A4                     l748:
  2757                           
  2758                           ;sms.c: 24: else if (modem_ready_sms)
  2759  0017A4  0100               	movlb	0	; () banked
  2760  0017A6  51C1               	movf	_modem_ready_sms& (0+255),w,b
  2761  0017A8  B4D8               	btfsc	status,2,c
  2762  0017AA  0012               	return	
  2763                           
  2764                           ; BSR set to: 0
  2765                           ;sms.c: 25: {
  2766                           ;sms.c: 26: if (sms_timer_ready && !sms_echo_ready)
  2767  0017AC  51C8               	movf	_sms_timer_ready& (0+255),w,b
  2768  0017AE  B4D8               	btfsc	status,2,c
  2769  0017B0  D009               	goto	l754
  2770                           
  2771                           ; BSR set to: 0
  2772  0017B2  51C6               	movf	_sms_echo_ready& (0+255),w,b
  2773  0017B4  A4D8               	btfss	status,2,c
  2774  0017B6  D006               	goto	l754
  2775                           
  2776                           ; BSR set to: 0
  2777                           ;sms.c: 27: {
  2778                           ;sms.c: 28: retryCnt = 0;
  2779  0017B8  0E00               	movlw	0
  2780  0017BA  6FB4               	movwf	_retryCnt& (0+255),b
  2781                           
  2782                           ;sms.c: 29: sms_timer_ready = 0;
  2783  0017BC  0E00               	movlw	0
  2784  0017BE  6FC8               	movwf	_sms_timer_ready& (0+255),b
  2785                           
  2786                           ; BSR set to: 0
  2787                           ;sms.c: 30: read_sms();
  2788  0017C0  EC5E  F006         	call	_read_sms	;wreg free
  2789  0017C4                     l754:
  2790                           
  2791                           ;sms.c: 31: }
  2792                           ;sms.c: 32: if (sms_echo_ready)
  2793  0017C4  0100               	movlb	0	; () banked
  2794  0017C6  51C6               	movf	_sms_echo_ready& (0+255),w,b
  2795  0017C8  B4D8               	btfsc	status,2,c
  2796  0017CA  D018               	goto	l755
  2797                           
  2798                           ; BSR set to: 0
  2799                           ;sms.c: 33: {
  2800                           ;sms.c: 34: if (send_sms_ok(1) == 1 && retryCnt++ < 5)
  2801  0017CC  0E01               	movlw	1
  2802  0017CE  ECC3  F008         	call	_send_sms_ok
  2803  0017D2  06E8               	decf	wreg,f,c
  2804  0017D4  A4D8               	btfss	status,2,c
  2805  0017D6  D00B               	goto	l756
  2806  0017D8  0100               	movlb	0	; () banked
  2807  0017DA  2BB4               	incf	_retryCnt& (0+255),f,b
  2808  0017DC  05B4               	decf	_retryCnt& (0+255),w,b
  2809  0017DE  6FB0               	movwf	??_listen_sms& (0+255),b
  2810  0017E0  0E05               	movlw	5
  2811  0017E2  61B0               	cpfslt	??_listen_sms& (0+255),b
  2812  0017E4  D004               	goto	l756
  2813                           
  2814                           ; BSR set to: 0
  2815                           ;sms.c: 35: {
  2816                           ;sms.c: 36: retryCnt = 0;
  2817  0017E6  0E00               	movlw	0
  2818  0017E8  6FB4               	movwf	_retryCnt& (0+255),b
  2819                           
  2820                           ;sms.c: 37: sms_echo_ready = 0;
  2821  0017EA  0E00               	movlw	0
  2822  0017EC  6FC6               	movwf	_sms_echo_ready& (0+255),b
  2823  0017EE                     l756:
  2824                           
  2825                           ;sms.c: 38: }
  2826                           ;sms.c: 39: if (retryCnt >= 5)
  2827                           
  2828                           ; BSR set to: 0
  2829  0017EE  0E04               	movlw	4
  2830  0017F0  0100               	movlb	0	; () banked
  2831  0017F2  65B4               	cpfsgt	_retryCnt& (0+255),b
  2832  0017F4  D01D               	goto	l761
  2833                           
  2834                           ; BSR set to: 0
  2835                           ;sms.c: 40: sms_echo_ready = 0;
  2836  0017F6  0E00               	movlw	0
  2837  0017F8  6FC6               	movwf	_sms_echo_ready& (0+255),b
  2838                           
  2839                           ; BSR set to: 0
  2840                           ;sms.c: 41: }
  2841  0017FA  D01A               	goto	l761
  2842  0017FC                     l755:
  2843                           
  2844                           ; BSR set to: 0
  2845                           ;sms.c: 42: else if (sms_err_ready)
  2846                           
  2847                           ; BSR set to: 0
  2848  0017FC  51C5               	movf	_sms_err_ready& (0+255),w,b
  2849  0017FE  B4D8               	btfsc	status,2,c
  2850  001800  D017               	goto	l761
  2851                           
  2852                           ; BSR set to: 0
  2853                           ;sms.c: 43: {
  2854                           ;sms.c: 44: if (send_sms_ok(0) == 1 && retryCnt++ < 5)
  2855  001802  0E00               	movlw	0
  2856  001804  ECC3  F008         	call	_send_sms_ok
  2857  001808  06E8               	decf	wreg,f,c
  2858  00180A  A4D8               	btfss	status,2,c
  2859  00180C  D00B               	goto	l760
  2860  00180E  0100               	movlb	0	; () banked
  2861  001810  2BB4               	incf	_retryCnt& (0+255),f,b
  2862  001812  05B4               	decf	_retryCnt& (0+255),w,b
  2863  001814  6FB0               	movwf	??_listen_sms& (0+255),b
  2864  001816  0E05               	movlw	5
  2865  001818  61B0               	cpfslt	??_listen_sms& (0+255),b
  2866  00181A  D004               	goto	l760
  2867                           
  2868                           ; BSR set to: 0
  2869                           ;sms.c: 45: {
  2870                           ;sms.c: 46: retryCnt = 0;
  2871  00181C  0E00               	movlw	0
  2872  00181E  6FB4               	movwf	_retryCnt& (0+255),b
  2873                           
  2874                           ;sms.c: 47: sms_err_ready = 0;
  2875  001820  0E00               	movlw	0
  2876  001822  6FC5               	movwf	_sms_err_ready& (0+255),b
  2877  001824                     l760:
  2878                           
  2879                           ;sms.c: 48: }
  2880                           ;sms.c: 49: if (retryCnt >= 5)
  2881                           
  2882                           ; BSR set to: 0
  2883  001824  0E04               	movlw	4
  2884  001826  0100               	movlb	0	; () banked
  2885  001828  65B4               	cpfsgt	_retryCnt& (0+255),b
  2886  00182A  D002               	goto	l761
  2887                           
  2888                           ; BSR set to: 0
  2889                           ;sms.c: 50: sms_err_ready = 0;
  2890  00182C  0E00               	movlw	0
  2891  00182E  6FC5               	movwf	_sms_err_ready& (0+255),b
  2892  001830                     l761:
  2893                           
  2894                           ; BSR set to: 0
  2895                           ;sms.c: 51: }
  2896                           ;sms.c: 52: check_sms_timer();
  2897                           
  2898                           ; BSR set to: 0
  2899                           
  2900                           ; BSR set to: 0
  2901                           
  2902                           ; BSR set to: 0
  2903  001830  EC6C  F00F         	call	_check_sms_timer	;wreg free
  2904  001834  0012               	return	
  2905  001836                     __end_of_listen_sms:
  2906                           	opt stack 0
  2907                           tblptru	equ	0xFF8
  2908                           tblptrh	equ	0xFF7
  2909                           tblptrl	equ	0xFF6
  2910                           tablat	equ	0xFF5
  2911                           prodh	equ	0xFF4
  2912                           prodl	equ	0xFF3
  2913                           intcon	equ	0xFF2
  2914                           postinc0	equ	0xFEE
  2915                           wreg	equ	0xFE8
  2916                           postdec1	equ	0xFE5
  2917                           fsr1l	equ	0xFE1
  2918                           indf2	equ	0xFDF
  2919                           fsr2h	equ	0xFDA
  2920                           fsr2l	equ	0xFD9
  2921                           status	equ	0xFD8
  2922                           
  2923 ;; *************** function _start_sms_timer *****************
  2924 ;; Defined at:
  2925 ;;		line 91 in file "sms.c"
  2926 ;; Parameters:    Size  Location     Type
  2927 ;;		None
  2928 ;; Auto vars:     Size  Location     Type
  2929 ;;		None
  2930 ;; Return value:  Size  Location     Type
  2931 ;;                  1    wreg      void 
  2932 ;; Registers used:
  2933 ;;		wreg, status,2
  2934 ;; Tracked objects:
  2935 ;;		On entry : 0/0
  2936 ;;		On exit  : 0/0
  2937 ;;		Unchanged: 0/0
  2938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2940 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2942 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2943 ;;Total ram usage:        0 bytes
  2944 ;; Hardware stack levels used:    1
  2945 ;; Hardware stack levels required when called:    3
  2946 ;; This function calls:
  2947 ;;		Nothing
  2948 ;; This function is called by:
  2949 ;;		_listen_sms
  2950 ;; This function uses a non-reentrant model
  2951 ;;
  2952                           
  2953                           	psect	text12
  2954  002430                     __ptext12:
  2955                           	opt stack 0
  2956  002430                     _start_sms_timer:
  2957                           	opt stack 25
  2958                           
  2959                           ;sms.c: 93: T2CONbits.T2CKPS = 0b10;
  2960                           
  2961                           ;incstack = 0
  2962  002430  50BA               	movf	4026,w,c	;volatile
  2963  002432  0BFC               	andlw	-4
  2964  002434  0902               	iorlw	2
  2965  002436  6EBA               	movwf	4026,c	;volatile
  2966                           
  2967                           ;sms.c: 94: T2CONbits.T2OUTPS = 0b1111;
  2968  002438  86BA               	bsf	4026,3,c	;volatile
  2969  00243A  88BA               	bsf	4026,4,c	;volatile
  2970  00243C  8ABA               	bsf	4026,5,c	;volatile
  2971  00243E  8CBA               	bsf	4026,6,c	;volatile
  2972                           
  2973                           ;sms.c: 95: T2CONbits.TMR2ON = 1;
  2974  002440  84BA               	bsf	4026,2,c	;volatile
  2975                           
  2976                           ;sms.c: 96: PIE1bits.TMR2IE = 1;
  2977  002442  829D               	bsf	3997,1,c	;volatile
  2978                           
  2979                           ;sms.c: 97: INTCONbits.PEIE = 1;
  2980  002444  8CF2               	bsf	intcon,6,c	;volatile
  2981                           
  2982                           ;sms.c: 98: INTCONbits.GIE = 1;
  2983  002446  8EF2               	bsf	intcon,7,c	;volatile
  2984  002448  0012               	return		;funcret
  2985  00244A                     __end_of_start_sms_timer:
  2986                           	opt stack 0
  2987                           tblptru	equ	0xFF8
  2988                           tblptrh	equ	0xFF7
  2989                           tblptrl	equ	0xFF6
  2990                           tablat	equ	0xFF5
  2991                           prodh	equ	0xFF4
  2992                           prodl	equ	0xFF3
  2993                           intcon	equ	0xFF2
  2994                           postinc0	equ	0xFEE
  2995                           wreg	equ	0xFE8
  2996                           postdec1	equ	0xFE5
  2997                           fsr1l	equ	0xFE1
  2998                           indf2	equ	0xFDF
  2999                           fsr2h	equ	0xFDA
  3000                           fsr2l	equ	0xFD9
  3001                           status	equ	0xFD8
  3002                           
  3003 ;; *************** function _start_sms_ok *****************
  3004 ;; Defined at:
  3005 ;;		line 109 in file "sms.c"
  3006 ;; Parameters:    Size  Location     Type
  3007 ;;		None
  3008 ;; Auto vars:     Size  Location     Type
  3009 ;;  cpms           25    8[BANK0 ] unsigned char [25]
  3010 ;;  cnmi           14   33[BANK0 ] unsigned char [14]
  3011 ;;  cmgf           12   47[BANK0 ] unsigned char [12]
  3012 ;; Return value:  Size  Location     Type
  3013 ;;                  1    wreg      unsigned char 
  3014 ;; Registers used:
  3015 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3016 ;; Tracked objects:
  3017 ;;		On entry : 0/0
  3018 ;;		On exit  : 0/0
  3019 ;;		Unchanged: 0/0
  3020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3022 ;;      Locals:         0      51       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3024 ;;      Totals:         0      51       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3025 ;;Total ram usage:       51 bytes
  3026 ;; Hardware stack levels used:    1
  3027 ;; Hardware stack levels required when called:    5
  3028 ;; This function calls:
  3029 ;;		_clear_at_ok
  3030 ;;		_init_md_uart
  3031 ;;		_md_uart_write_str_ok
  3032 ;; This function is called by:
  3033 ;;		_listen_sms
  3034 ;; This function uses a non-reentrant model
  3035 ;;
  3036                           
  3037                           	psect	text13
  3038  001656                     __ptext13:
  3039                           	opt stack 0
  3040  001656                     _start_sms_ok:
  3041                           	opt stack 23
  3042                           
  3043                           ;sms.c: 111: uint8_t cmgf[] = "AT+CMGF=1\r\n";
  3044                           
  3045                           ;incstack = 0
  3046  001656  EE21  F032         	lfsr	2,start_sms_ok@F6832
  3047  00165A  EE10  F08F         	lfsr	1,start_sms_ok@cmgf
  3048  00165E  0E0B               	movlw	11
  3049  001660                     u9631:
  3050  001660  CFDB FFE3          	movff	plusw2,plusw1
  3051  001664  06E8               	decf	wreg,f,c
  3052  001666  E2FC               	bc	u9631
  3053                           
  3054                           ;sms.c: 112: uint8_t cpms[]="AT+CPMS=\"ME\",\"ME\",\"ME\"\r\n";
  3055  001668  EE23  F07C         	lfsr	2,start_sms_ok@F6834
  3056  00166C  EE10  F068         	lfsr	1,start_sms_ok@cpms
  3057  001670  0E18               	movlw	24
  3058  001672                     u9641:
  3059  001672  CFDB FFE3          	movff	plusw2,plusw1
  3060  001676  06E8               	decf	wreg,f,c
  3061  001678  E2FC               	bc	u9641
  3062                           
  3063                           ;sms.c: 113: uint8_t cnmi[]="AT+CNMI=1,1\r\n";
  3064  00167A  EE21  F000         	lfsr	2,start_sms_ok@F6836
  3065  00167E  EE10  F081         	lfsr	1,start_sms_ok@cnmi
  3066  001682  0E0D               	movlw	13
  3067  001684                     u9651:
  3068  001684  CFDB FFE3          	movff	plusw2,plusw1
  3069  001688  06E8               	decf	wreg,f,c
  3070  00168A  E2FC               	bc	u9651
  3071                           
  3072                           ;sms.c: 115: init_md_uart();
  3073  00168C  ECB5  F011         	call	_init_md_uart	;wreg free
  3074                           
  3075                           ;sms.c: 117: if (at1 != 1)
  3076  001690  0100               	movlb	0	; () banked
  3077  001692  05C0               	decf	_at1& (0+255),w,b
  3078  001694  B4D8               	btfsc	status,2,c
  3079  001696  D013               	goto	l789
  3080                           
  3081                           ; BSR set to: 0
  3082                           ;sms.c: 118: {
  3083                           ;sms.c: 119: at1 = md_uart_write_str_ok((uint8_t *)&cmgf[0], sizeof(cmgf), 1, 0);
  3084  001698  0E8F               	movlw	low start_sms_ok@cmgf
  3085  00169A  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  3086  00169C  0E00               	movlw	high start_sms_ok@cmgf
  3087  00169E  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  3088  0016A0  0E0C               	movlw	12
  3089  0016A2  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  3090  0016A4  0E01               	movlw	1
  3091  0016A6  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  3092  0016A8  0E00               	movlw	0
  3093  0016AA  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  3094  0016AC  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  3095  0016B0  0100               	movlb	0	; () banked
  3096  0016B2  6FC0               	movwf	_at1& (0+255),b
  3097                           
  3098                           ; BSR set to: 0
  3099                           ;sms.c: 120: if (at1 == 1)
  3100  0016B4  05C0               	decf	_at1& (0+255),w,b
  3101  0016B6  A4D8               	btfss	status,2,c
  3102  0016B8  D002               	goto	l789
  3103                           
  3104                           ; BSR set to: 0
  3105                           ;sms.c: 121: numUartRetries = 15;
  3106  0016BA  0E0F               	movlw	15
  3107  0016BC  6E44               	movwf	_numUartRetries,c
  3108  0016BE                     l789:
  3109                           
  3110                           ; BSR set to: 0
  3111                           ;sms.c: 122: }
  3112                           ;sms.c: 123: if (at1 == 1 && at2 != 1)
  3113                           
  3114                           ; BSR set to: 0
  3115                           
  3116                           ; BSR set to: 0
  3117  0016BE  05C0               	decf	_at1& (0+255),w,b
  3118  0016C0  A4D8               	btfss	status,2,c
  3119  0016C2  D016               	goto	l791
  3120                           
  3121                           ; BSR set to: 0
  3122  0016C4  05BF               	decf	_at2& (0+255),w,b
  3123  0016C6  B4D8               	btfsc	status,2,c
  3124  0016C8  D013               	goto	l791
  3125                           
  3126                           ; BSR set to: 0
  3127                           ;sms.c: 124: {
  3128                           ;sms.c: 125: at2 = md_uart_write_str_ok((uint8_t *)&cpms[0], sizeof(cpms), 1, 0);
  3129  0016CA  0E68               	movlw	low start_sms_ok@cpms
  3130  0016CC  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  3131  0016CE  0E00               	movlw	high start_sms_ok@cpms
  3132  0016D0  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  3133  0016D2  0E19               	movlw	25
  3134  0016D4  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  3135  0016D6  0E01               	movlw	1
  3136  0016D8  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  3137  0016DA  0E00               	movlw	0
  3138  0016DC  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  3139  0016DE  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  3140  0016E2  0100               	movlb	0	; () banked
  3141  0016E4  6FBF               	movwf	_at2& (0+255),b
  3142                           
  3143                           ; BSR set to: 0
  3144                           ;sms.c: 126: if (at2 == 1)
  3145  0016E6  05BF               	decf	_at2& (0+255),w,b
  3146  0016E8  A4D8               	btfss	status,2,c
  3147  0016EA  D002               	goto	l791
  3148                           
  3149                           ; BSR set to: 0
  3150                           ;sms.c: 127: numUartRetries = 15;
  3151  0016EC  0E0F               	movlw	15
  3152  0016EE  6E44               	movwf	_numUartRetries,c
  3153  0016F0                     l791:
  3154                           
  3155                           ; BSR set to: 0
  3156                           ;sms.c: 128: }
  3157                           ;sms.c: 129: if (at2 == 1 && at3 != 1)
  3158                           
  3159                           ; BSR set to: 0
  3160                           
  3161                           ; BSR set to: 0
  3162  0016F0  05BF               	decf	_at2& (0+255),w,b
  3163  0016F2  A4D8               	btfss	status,2,c
  3164  0016F4  D016               	goto	l793
  3165                           
  3166                           ; BSR set to: 0
  3167  0016F6  05BE               	decf	_at3& (0+255),w,b
  3168  0016F8  B4D8               	btfsc	status,2,c
  3169  0016FA  D013               	goto	l793
  3170                           
  3171                           ; BSR set to: 0
  3172                           ;sms.c: 130: {
  3173                           ;sms.c: 131: at3 = md_uart_write_str_ok((uint8_t *)&cnmi[0], sizeof(cnmi), 1, 0);
  3174  0016FC  0E81               	movlw	low start_sms_ok@cnmi
  3175  0016FE  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  3176  001700  0E00               	movlw	high start_sms_ok@cnmi
  3177  001702  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  3178  001704  0E0E               	movlw	14
  3179  001706  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  3180  001708  0E01               	movlw	1
  3181  00170A  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  3182  00170C  0E00               	movlw	0
  3183  00170E  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  3184  001710  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  3185  001714  0100               	movlb	0	; () banked
  3186  001716  6FBE               	movwf	_at3& (0+255),b
  3187                           
  3188                           ; BSR set to: 0
  3189                           ;sms.c: 132: if (at3 == 1)
  3190  001718  05BE               	decf	_at3& (0+255),w,b
  3191  00171A  A4D8               	btfss	status,2,c
  3192  00171C  D002               	goto	l793
  3193                           
  3194                           ; BSR set to: 0
  3195                           ;sms.c: 133: numUartRetries = 15;
  3196  00171E  0E0F               	movlw	15
  3197  001720  6E44               	movwf	_numUartRetries,c
  3198  001722                     l793:
  3199                           
  3200                           ; BSR set to: 0
  3201                           ;sms.c: 134: }
  3202                           ;sms.c: 135: if (at1 == 5 || at2 == 5 || at3 == 5)
  3203                           
  3204                           ; BSR set to: 0
  3205                           
  3206                           ; BSR set to: 0
  3207  001722  0E05               	movlw	5
  3208  001724  19C0               	xorwf	_at1& (0+255),w,b
  3209  001726  B4D8               	btfsc	status,2,c
  3210  001728  D008               	goto	u9760
  3211                           
  3212                           ; BSR set to: 0
  3213  00172A  0E05               	movlw	5
  3214  00172C  19BF               	xorwf	_at2& (0+255),w,b
  3215  00172E  B4D8               	btfsc	status,2,c
  3216  001730  D004               	goto	u9760
  3217                           
  3218                           ; BSR set to: 0
  3219  001732  0E05               	movlw	5
  3220  001734  19BE               	xorwf	_at3& (0+255),w,b
  3221  001736  A4D8               	btfss	status,2,c
  3222  001738  D004               	goto	l794
  3223  00173A                     u9760:
  3224                           
  3225                           ; BSR set to: 0
  3226                           ;sms.c: 136: {
  3227                           ;sms.c: 137: clear_at_ok();
  3228                           
  3229                           ; BSR set to: 0
  3230  00173A  EC1E  F011         	call	_clear_at_ok	;wreg free
  3231                           
  3232                           ;sms.c: 138: return 5;
  3233  00173E  0E05               	movlw	5
  3234                           
  3235                           ;sms.c: 139: }
  3236  001740  0012               	return	
  3237  001742                     l794:
  3238                           
  3239                           ;sms.c: 140: else if (at1 == 1 && at2 == 1 && at3 == 1)
  3240  001742  0100               	movlb	0	; () banked
  3241  001744  05C0               	decf	_at1& (0+255),w,b
  3242  001746  A4D8               	btfss	status,2,c
  3243  001748  D00A               	goto	l799
  3244                           
  3245                           ; BSR set to: 0
  3246  00174A  05BF               	decf	_at2& (0+255),w,b
  3247  00174C  A4D8               	btfss	status,2,c
  3248  00174E  D007               	goto	l799
  3249                           
  3250                           ; BSR set to: 0
  3251  001750  05BE               	decf	_at3& (0+255),w,b
  3252  001752  A4D8               	btfss	status,2,c
  3253  001754  D004               	goto	l799
  3254                           
  3255                           ; BSR set to: 0
  3256                           ;sms.c: 141: {
  3257                           ;sms.c: 142: clear_at_ok();
  3258  001756  EC1E  F011         	call	_clear_at_ok	;wreg free
  3259                           
  3260                           ;sms.c: 143: return 1;
  3261  00175A  0E01               	movlw	1
  3262                           
  3263                           ;sms.c: 144: }
  3264  00175C  0012               	return	
  3265  00175E                     l799:
  3266                           
  3267                           ;sms.c: 145: else
  3268                           ;sms.c: 146: return 2;
  3269  00175E  0E02               	movlw	2
  3270  001760  0012               	return	
  3271  001762                     __end_of_start_sms_ok:
  3272                           	opt stack 0
  3273                           tblptru	equ	0xFF8
  3274                           tblptrh	equ	0xFF7
  3275                           tblptrl	equ	0xFF6
  3276                           tablat	equ	0xFF5
  3277                           prodh	equ	0xFF4
  3278                           prodl	equ	0xFF3
  3279                           intcon	equ	0xFF2
  3280                           postinc0	equ	0xFEE
  3281                           wreg	equ	0xFE8
  3282                           postdec1	equ	0xFE5
  3283                           plusw1	equ	0xFE3
  3284                           fsr1l	equ	0xFE1
  3285                           indf2	equ	0xFDF
  3286                           plusw2	equ	0xFDB
  3287                           fsr2h	equ	0xFDA
  3288                           fsr2l	equ	0xFD9
  3289                           status	equ	0xFD8
  3290                           
  3291 ;; *************** function _start_modem *****************
  3292 ;; Defined at:
  3293 ;;		line 61 in file "general_modem.c"
  3294 ;; Parameters:    Size  Location     Type
  3295 ;;		None
  3296 ;; Auto vars:     Size  Location     Type
  3297 ;;		None
  3298 ;; Return value:  Size  Location     Type
  3299 ;;                  1    wreg      void 
  3300 ;; Registers used:
  3301 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3302 ;; Tracked objects:
  3303 ;;		On entry : 0/0
  3304 ;;		On exit  : 0/0
  3305 ;;		Unchanged: 0/0
  3306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3309 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3310 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3311 ;;Total ram usage:        2 bytes
  3312 ;; Hardware stack levels used:    1
  3313 ;; Hardware stack levels required when called:    7
  3314 ;; This function calls:
  3315 ;;		_check_md_state
  3316 ;;		_start_md_boot_timer
  3317 ;; This function is called by:
  3318 ;;		_listen_sms
  3319 ;; This function uses a non-reentrant model
  3320 ;;
  3321                           
  3322                           	psect	text14
  3323  0020FA                     __ptext14:
  3324                           	opt stack 0
  3325  0020FA                     _start_modem:
  3326                           	opt stack 21
  3327                           
  3328                           ;general_modem.c: 63: check_md_state();
  3329                           
  3330                           ;incstack = 0
  3331  0020FA  ECDF  F00F         	call	_check_md_state	;wreg free
  3332                           
  3333                           ;general_modem.c: 64: if (MD_STATE != WAITING || (MD_STATE == WAITING && md_timeout_cnt 
      +                          >= 2))
  3334  0020FE  040F               	decf	_MD_STATE,w,c
  3335  002100  A4D8               	btfss	status,2,c
  3336  002102  D006               	goto	u9600
  3337  002104  040F               	decf	_MD_STATE,w,c
  3338  002106  A4D8               	btfss	status,2,c
  3339  002108  D01B               	goto	l1060
  3340  00210A  0E01               	movlw	1
  3341  00210C  6404               	cpfsgt	_md_timeout_cnt,c
  3342  00210E  D018               	goto	l1060
  3343  002110                     u9600:
  3344                           
  3345                           ;general_modem.c: 65: {
  3346                           ;general_modem.c: 66: LATAbits.LATA3 = 0;
  3347  002110  9689               	bcf	3977,3,c	;volatile
  3348                           
  3349                           ;general_modem.c: 69: _delay((unsigned long)((200)*(8000000/4000.0)));
  3350  002112  0E03               	movlw	3
  3351  002114  0100               	movlb	0	; () banked
  3352  002116  6F72               	movwf	(??_start_modem+1)& (0+255),b
  3353  002118  0E08               	movlw	8
  3354  00211A  6F71               	movwf	??_start_modem& (0+255),b
  3355  00211C  0E77               	movlw	119
  3356  00211E                     u10657:
  3357  00211E  2EE8               	decfsz	wreg,f,c
  3358  002120  D7FE               	bra	u10657
  3359  002122  2F71               	decfsz	??_start_modem& (0+255),f,b
  3360  002124  D7FC               	bra	u10657
  3361  002126  2F72               	decfsz	(??_start_modem+1)& (0+255),f,b
  3362  002128  D7FA               	bra	u10657
  3363                           
  3364                           ;general_modem.c: 70: LATAbits.LATA3 = 1;
  3365  00212A  8689               	bsf	3977,3,c	;volatile
  3366                           
  3367                           ;general_modem.c: 71: MD_STATE = WAITING;
  3368  00212C  0E01               	movlw	1
  3369  00212E  6E0F               	movwf	_MD_STATE,c
  3370                           
  3371                           ;general_modem.c: 72: modem_awake = 0;
  3372  002130  0E00               	movlw	0
  3373  002132  0100               	movlb	0	; () banked
  3374  002134  6FC2               	movwf	_modem_awake& (0+255),b
  3375                           
  3376                           ; BSR set to: 0
  3377                           ;general_modem.c: 73: md_timeout_cnt = 0;
  3378  002136  0E00               	movlw	0
  3379  002138  6E04               	movwf	_md_timeout_cnt,c
  3380                           
  3381                           ; BSR set to: 0
  3382                           ;general_modem.c: 76: numUartRetries = 15;
  3383  00213A  0E0F               	movlw	15
  3384  00213C  6E44               	movwf	_numUartRetries,c
  3385                           
  3386                           ;general_modem.c: 77: }
  3387  00213E  0012               	return	
  3388  002140                     l1060:
  3389                           
  3390                           ;general_modem.c: 78: else if (MD_STATE == WAITING && (md_timeout_cnt == 1))
  3391                           
  3392                           ; BSR set to: 0
  3393  002140  040F               	decf	_MD_STATE,w,c
  3394  002142  A4D8               	btfss	status,2,c
  3395  002144  0012               	return	
  3396  002146  0404               	decf	_md_timeout_cnt,w,c
  3397  002148  A4D8               	btfss	status,2,c
  3398  00214A  0012               	return	
  3399                           
  3400                           ;general_modem.c: 79: {
  3401                           ;general_modem.c: 80: MD_STATE = WAITING;
  3402  00214C  0E01               	movlw	1
  3403  00214E  6E0F               	movwf	_MD_STATE,c
  3404                           
  3405                           ;general_modem.c: 81: start_md_boot_timer();
  3406  002150  ECA8  F012         	call	_start_md_boot_timer	;wreg free
  3407                           
  3408                           ;general_modem.c: 82: numUartRetries = 15;
  3409  002154  0E0F               	movlw	15
  3410  002156  6E44               	movwf	_numUartRetries,c
  3411  002158  0012               	return	
  3412  00215A                     __end_of_start_modem:
  3413                           	opt stack 0
  3414                           tblptru	equ	0xFF8
  3415                           tblptrh	equ	0xFF7
  3416                           tblptrl	equ	0xFF6
  3417                           tablat	equ	0xFF5
  3418                           prodh	equ	0xFF4
  3419                           prodl	equ	0xFF3
  3420                           intcon	equ	0xFF2
  3421                           postinc0	equ	0xFEE
  3422                           wreg	equ	0xFE8
  3423                           postdec1	equ	0xFE5
  3424                           plusw1	equ	0xFE3
  3425                           fsr1l	equ	0xFE1
  3426                           indf2	equ	0xFDF
  3427                           plusw2	equ	0xFDB
  3428                           fsr2h	equ	0xFDA
  3429                           fsr2l	equ	0xFD9
  3430                           status	equ	0xFD8
  3431                           
  3432 ;; *************** function _start_md_boot_timer *****************
  3433 ;; Defined at:
  3434 ;;		line 201 in file "general_modem.c"
  3435 ;; Parameters:    Size  Location     Type
  3436 ;;		None
  3437 ;; Auto vars:     Size  Location     Type
  3438 ;;		None
  3439 ;; Return value:  Size  Location     Type
  3440 ;;                  1    wreg      void 
  3441 ;; Registers used:
  3442 ;;		wreg, status,2, cstack
  3443 ;; Tracked objects:
  3444 ;;		On entry : 0/0
  3445 ;;		On exit  : 0/0
  3446 ;;		Unchanged: 0/0
  3447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3451 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3452 ;;Total ram usage:        0 bytes
  3453 ;; Hardware stack levels used:    1
  3454 ;; Hardware stack levels required when called:    4
  3455 ;; This function calls:
  3456 ;;		_reload_tmr5_pt25s
  3457 ;; This function is called by:
  3458 ;;		_start_modem
  3459 ;; This function uses a non-reentrant model
  3460 ;;
  3461                           
  3462                           	psect	text15
  3463  002550                     __ptext15:
  3464                           	opt stack 0
  3465  002550                     _start_md_boot_timer:
  3466                           	opt stack 23
  3467                           
  3468                           ;general_modem.c: 203: reload_tmr5_pt25s();
  3469                           
  3470                           ;incstack = 0
  3471  002550  EC25  F012         	call	_reload_tmr5_pt25s	;wreg free
  3472  002554  0012               	return		;funcret
  3473  002556                     __end_of_start_md_boot_timer:
  3474                           	opt stack 0
  3475                           tblptru	equ	0xFF8
  3476                           tblptrh	equ	0xFF7
  3477                           tblptrl	equ	0xFF6
  3478                           tablat	equ	0xFF5
  3479                           prodh	equ	0xFF4
  3480                           prodl	equ	0xFF3
  3481                           intcon	equ	0xFF2
  3482                           postinc0	equ	0xFEE
  3483                           wreg	equ	0xFE8
  3484                           postdec1	equ	0xFE5
  3485                           plusw1	equ	0xFE3
  3486                           fsr1l	equ	0xFE1
  3487                           indf2	equ	0xFDF
  3488                           plusw2	equ	0xFDB
  3489                           fsr2h	equ	0xFDA
  3490                           fsr2l	equ	0xFD9
  3491                           status	equ	0xFD8
  3492                           
  3493 ;; *************** function _check_md_state *****************
  3494 ;; Defined at:
  3495 ;;		line 14 in file "general_modem.c"
  3496 ;; Parameters:    Size  Location     Type
  3497 ;;		None
  3498 ;; Auto vars:     Size  Location     Type
  3499 ;;  tempStatus      1   16[BANK0 ] unsigned char 
  3500 ;; Return value:  Size  Location     Type
  3501 ;;                  1    wreg      void 
  3502 ;; Registers used:
  3503 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3504 ;; Tracked objects:
  3505 ;;		On entry : 0/0
  3506 ;;		On exit  : 0/0
  3507 ;;		Unchanged: 0/0
  3508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3510 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3512 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3513 ;;Total ram usage:        1 bytes
  3514 ;; Hardware stack levels used:    1
  3515 ;; Hardware stack levels required when called:    6
  3516 ;; This function calls:
  3517 ;;		_disable_tmr5
  3518 ;;		_startup_ok
  3519 ;; This function is called by:
  3520 ;;		_start_modem
  3521 ;;		_send_data
  3522 ;; This function uses a non-reentrant model
  3523 ;;
  3524                           
  3525                           	psect	text16
  3526  001FBE                     __ptext16:
  3527                           	opt stack 0
  3528  001FBE                     _check_md_state:
  3529                           	opt stack 21
  3530                           
  3531                           ;general_modem.c: 16: uint8_t tempStatus = 0;
  3532                           
  3533                           ;incstack = 0
  3534  001FBE  0E00               	movlw	0
  3535  001FC0  0100               	movlb	0	; () banked
  3536  001FC2  6F70               	movwf	check_md_state@tempStatus& (0+255),b
  3537                           
  3538                           ;general_modem.c: 17: switch (MD_STATE)
  3539  001FC4  D025               	goto	l1042
  3540  001FC6                     l1043:
  3541                           
  3542                           ; BSR set to: 0
  3543                           ;general_modem.c: 20: LATAbits.LATA3 = 0;
  3544  001FC6  9689               	bcf	3977,3,c	;volatile
  3545                           
  3546                           ;general_modem.c: 21: break;
  3547  001FC8  0012               	return	
  3548  001FCA                     
  3549                           ; BSR set to: 0
  3550                           ;general_modem.c: 23: if (tmr5_cnt >= (4*45) && !modem_awake)
  3551                           
  3552                           ; BSR set to: 0
  3553  001FCA  0EB3               	movlw	179
  3554  001FCC  641B               	cpfsgt	_tmr5_cnt,c
  3555  001FCE  0012               	return	
  3556                           
  3557                           ; BSR set to: 0
  3558  001FD0  51C2               	movf	_modem_awake& (0+255),w,b
  3559  001FD2  A4D8               	btfss	status,2,c
  3560  001FD4  0012               	return	
  3561                           
  3562                           ; BSR set to: 0
  3563                           ;general_modem.c: 24: {
  3564                           ;general_modem.c: 25: disable_tmr5();
  3565  001FD6  EC80  F012         	call	_disable_tmr5	;wreg free
  3566                           
  3567                           ;general_modem.c: 26: tempStatus = startup_ok();
  3568  001FDA  ECB2  F001         	call	_startup_ok	;wreg free
  3569  001FDE  0100               	movlb	0	; () banked
  3570  001FE0  6F70               	movwf	check_md_state@tempStatus& (0+255),b
  3571                           
  3572                           ; BSR set to: 0
  3573                           ;general_modem.c: 27: if (tempStatus == 1)
  3574  001FE2  0570               	decf	check_md_state@tempStatus& (0+255),w,b
  3575  001FE4  A4D8               	btfss	status,2,c
  3576  001FE6  D007               	goto	l1047
  3577                           
  3578                           ; BSR set to: 0
  3579                           ;general_modem.c: 28: {
  3580                           ;general_modem.c: 30: md_timeout_cnt = 0;
  3581  001FE8  0E00               	movlw	0
  3582  001FEA  6E04               	movwf	_md_timeout_cnt,c
  3583                           
  3584                           ;general_modem.c: 31: modem_awake = 1;
  3585  001FEC  0E01               	movlw	1
  3586  001FEE  6FC2               	movwf	_modem_awake& (0+255),b
  3587                           
  3588                           ;general_modem.c: 32: MD_STATE = AWAKE_IDLE;
  3589  001FF0  0E02               	movlw	2
  3590  001FF2  6E0F               	movwf	_MD_STATE,c
  3591                           
  3592                           ;general_modem.c: 33: }
  3593  001FF4  0012               	return	
  3594  001FF6                     l1047:
  3595                           
  3596                           ; BSR set to: 0
  3597                           ;general_modem.c: 34: else if (tempStatus == 2)
  3598                           
  3599                           ; BSR set to: 0
  3600  001FF6  0E02               	movlw	2
  3601  001FF8  1970               	xorwf	check_md_state@tempStatus& (0+255),w,b
  3602  001FFA  A4D8               	btfss	status,2,c
  3603  001FFC  D002               	goto	l1049
  3604                           
  3605                           ; BSR set to: 0
  3606                           ;general_modem.c: 35: __nop();
  3607  001FFE  F000               	nop	
  3608  002000  0012               	return	
  3609  002002                     l1049:
  3610                           
  3611                           ;general_modem.c: 36: else if (tempStatus == 3)
  3612  002002  0E03               	movlw	3
  3613  002004  0100               	movlb	0	; () banked
  3614  002006  1970               	xorwf	check_md_state@tempStatus& (0+255),w,b
  3615  002008  A4D8               	btfss	status,2,c
  3616  00200A  0012               	return	
  3617                           
  3618                           ; BSR set to: 0
  3619                           ;general_modem.c: 37: md_timeout_cnt++;
  3620  00200C  2A04               	incf	_md_timeout_cnt,f,c
  3621                           
  3622                           ; BSR set to: 0
  3623                           ;general_modem.c: 57: }
  3624                           
  3625                           ; BSR set to: 0
  3626                           ;general_modem.c: 56: break;
  3627                           
  3628                           ;general_modem.c: 48: case RETRY_IP:
  3629                           
  3630                           ; BSR set to: 0
  3631                           ;general_modem.c: 47: break;
  3632                           
  3633                           ;general_modem.c: 46: case CONNECTED:
  3634                           
  3635                           ; BSR set to: 0
  3636                           ;general_modem.c: 45: break;
  3637                           
  3638                           ;general_modem.c: 44: case AWAKE_IDLE:
  3639                           
  3640                           ; BSR set to: 0
  3641                           ;general_modem.c: 42: }
  3642                           ;general_modem.c: 43: break;
  3643                           
  3644                           ; BSR set to: 0
  3645                           
  3646                           ;general_modem.c: 40: {
  3647                           
  3648                           ; BSR set to: 0
  3649                           
  3650                           ; BSR set to: 0
  3651                           
  3652                           ; BSR set to: 0
  3653                           ;general_modem.c: 38: }
  3654                           
  3655                           ; BSR set to: 0
  3656                           
  3657                           ; BSR set to: 0
  3658  00200E  0012               	return	
  3659  002010                     l1042:
  3660                           
  3661                           ; BSR set to: 0
  3662                           
  3663                           ; BSR set to: 0
  3664  002010  500F               	movf	_MD_STATE,w,c
  3665                           
  3666                           ; Switch size 1, requested type "space"
  3667                           ; Number of cases is 5, Range of values is 0 to 4
  3668                           ; switch strategies available:
  3669                           ; Name         Instructions Cycles
  3670                           ; simple_byte           16     9 (average)
  3671                           ;	Chosen strategy is simple_byte
  3672  002012  0A00               	xorlw	0	; case 0
  3673  002014  B4D8               	btfsc	status,2,c
  3674  002016  D7D7               	goto	l1043
  3675  002018  0A01               	xorlw	1	; case 1
  3676  00201A  B4D8               	btfsc	status,2,c
  3677  00201C  D7D6               	goto	l1045
  3678  00201E  0A03               	xorlw	3	; case 2
  3679  002020  B4D8               	btfsc	status,2,c
  3680  002022  0012               	return	
  3681  002024  0A01               	xorlw	1	; case 3
  3682  002026  B4D8               	btfsc	status,2,c
  3683  002028  0012               	return	
  3684  00202A  0A07               	xorlw	7	; case 4
  3685  00202C  0012               	return	
  3686  00202E                     __end_of_check_md_state:
  3687                           	opt stack 0
  3688                           tblptru	equ	0xFF8
  3689                           tblptrh	equ	0xFF7
  3690                           tblptrl	equ	0xFF6
  3691                           tablat	equ	0xFF5
  3692                           prodh	equ	0xFF4
  3693                           prodl	equ	0xFF3
  3694                           intcon	equ	0xFF2
  3695                           postinc0	equ	0xFEE
  3696                           wreg	equ	0xFE8
  3697                           postdec1	equ	0xFE5
  3698                           plusw1	equ	0xFE3
  3699                           fsr1l	equ	0xFE1
  3700                           indf2	equ	0xFDF
  3701                           plusw2	equ	0xFDB
  3702                           fsr2h	equ	0xFDA
  3703                           fsr2l	equ	0xFD9
  3704                           status	equ	0xFD8
  3705                           
  3706 ;; *************** function _startup_ok *****************
  3707 ;; Defined at:
  3708 ;;		line 87 in file "general_modem.c"
  3709 ;; Parameters:    Size  Location     Type
  3710 ;;		None
  3711 ;; Auto vars:     Size  Location     Type
  3712 ;;  ledCfg         16   27[BANK4 ] unsigned char [16]
  3713 ;;  baud           16   11[BANK4 ] unsigned char [16]
  3714 ;;  cereg          12   67[BANK4 ] unsigned char [12]
  3715 ;;  ledpattern     12   55[BANK4 ] unsigned char [12]
  3716 ;;  cmee           12   43[BANK4 ] unsigned char [12]
  3717 ;;  creg           11   90[BANK4 ] unsigned char [11]
  3718 ;;  cpin           11   79[BANK4 ] unsigned char [11]
  3719 ;;  gprs           11    0[BANK4 ] unsigned char [11]
  3720 ;;  queryVersion   10  101[BANK4 ] unsigned char [10]
  3721 ;;  csq             9  111[BANK4 ] unsigned char [9]
  3722 ;;  ate             7  120[BANK4 ] unsigned char [7]
  3723 ;;  at              5  127[BANK4 ] unsigned char [5]
  3724 ;; Return value:  Size  Location     Type
  3725 ;;                  1    wreg      unsigned char 
  3726 ;; Registers used:
  3727 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3728 ;; Tracked objects:
  3729 ;;		On entry : 0/0
  3730 ;;		On exit  : 0/0
  3731 ;;		Unchanged: 0/0
  3732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3734 ;;      Locals:         0       0       0       0       0     132       0       0       0       0       0       0       
      +0       0       0       0       0
  3735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3736 ;;      Totals:         0       0       0       0       0     132       0       0       0       0       0       0       
      +0       0       0       0       0
  3737 ;;Total ram usage:      132 bytes
  3738 ;; Hardware stack levels used:    1
  3739 ;; Hardware stack levels required when called:    5
  3740 ;; This function calls:
  3741 ;;		_clear_at_ok
  3742 ;;		_init_md_uart
  3743 ;;		_md_uart_write_str_ok
  3744 ;;		_parse_cereg_ok
  3745 ;;		_parse_creg_ok
  3746 ;;		_parse_csq_ok
  3747 ;; This function is called by:
  3748 ;;		_check_md_state
  3749 ;; This function uses a non-reentrant model
  3750 ;;
  3751                           
  3752                           	psect	text17
  3753  000364                     __ptext17:
  3754                           	opt stack 0
  3755  000364                     _startup_ok:
  3756                           	opt stack 21
  3757                           
  3758                           ;general_modem.c: 89: uint8_t at[] = "AT\r\n";
  3759                           
  3760                           ;incstack = 0
  3761  000364  EE21  F0B4         	lfsr	2,startup_ok@F6830
  3762  000368  EE14  F07F         	lfsr	1,startup_ok@at
  3763  00036C  0E04               	movlw	4
  3764  00036E                     u8351:
  3765  00036E  CFDB FFE3          	movff	plusw2,plusw1
  3766  000372  06E8               	decf	wreg,f,c
  3767  000374  E2FC               	bc	u8351
  3768                           
  3769                           ;general_modem.c: 90: uint8_t ate[] = "ATE1\r\n";
  3770  000376  EE21  F0AD         	lfsr	2,startup_ok@F6832
  3771  00037A  EE14  F078         	lfsr	1,startup_ok@ate
  3772  00037E  0E06               	movlw	6
  3773  000380                     u8361:
  3774  000380  CFDB FFE3          	movff	plusw2,plusw1
  3775  000384  06E8               	decf	wreg,f,c
  3776  000386  E2FC               	bc	u8361
  3777                           
  3778                           ;general_modem.c: 91: uint8_t cmee[] = "AT+CMEE=2\r\n";
  3779  000388  EE21  F026         	lfsr	2,startup_ok@F6834
  3780  00038C  EE14  F02B         	lfsr	1,startup_ok@cmee
  3781  000390  0E0B               	movlw	11
  3782  000392                     u8371:
  3783  000392  CFDB FFE3          	movff	plusw2,plusw1
  3784  000396  06E8               	decf	wreg,f,c
  3785  000398  E2FC               	bc	u8371
  3786                           
  3787                           ;general_modem.c: 92: uint8_t baud[] = "AT+IPR=115200\r\n";
  3788  00039A  EE22  F0D8         	lfsr	2,startup_ok@F6836
  3789  00039E  EE14  F00B         	lfsr	1,startup_ok@baud
  3790  0003A2  0E0F               	movlw	15
  3791  0003A4                     u8381:
  3792  0003A4  CFDB FFE3          	movff	plusw2,plusw1
  3793  0003A8  06E8               	decf	wreg,f,c
  3794  0003AA  E2FC               	bc	u8381
  3795                           
  3796                           ;general_modem.c: 93: uint8_t ledCfg[] = "AT#GPIO=7,0,2\r\n";
  3797  0003AC  EE22  F0C8         	lfsr	2,startup_ok@F6838
  3798  0003B0  EE14  F01B         	lfsr	1,startup_ok@ledCfg
  3799  0003B4  0E0F               	movlw	15
  3800  0003B6                     u8391:
  3801  0003B6  CFDB FFE3          	movff	plusw2,plusw1
  3802  0003BA  06E8               	decf	wreg,f,c
  3803  0003BC  E2FC               	bc	u8391
  3804                           
  3805                           ;general_modem.c: 94: uint8_t ledpattern[] = "AT#SLED=4\r\n";
  3806  0003BE  EE21  F01A         	lfsr	2,startup_ok@F6840
  3807  0003C2  EE14  F037         	lfsr	1,startup_ok@ledpattern
  3808  0003C6  0E0B               	movlw	11
  3809  0003C8                     u8401:
  3810  0003C8  CFDB FFE3          	movff	plusw2,plusw1
  3811  0003CC  06E8               	decf	wreg,f,c
  3812  0003CE  E2FC               	bc	u8401
  3813                           
  3814                           ;general_modem.c: 95: uint8_t queryVersion[] = "AT#CGMR\r\n";
  3815  0003D0  EE21  F05F         	lfsr	2,startup_ok@F6842
  3816  0003D4  EE14  F065         	lfsr	1,startup_ok@queryVersion
  3817  0003D8  0E09               	movlw	9
  3818  0003DA                     u8411:
  3819  0003DA  CFDB FFE3          	movff	plusw2,plusw1
  3820  0003DE  06E8               	decf	wreg,f,c
  3821  0003E0  E2FC               	bc	u8411
  3822                           
  3823                           ;general_modem.c: 96: uint8_t cpin[] = "AT+CPIN?\r\n";
  3824  0003E2  EE21  F054         	lfsr	2,startup_ok@F6844
  3825  0003E6  EE14  F04F         	lfsr	1,startup_ok@cpin
  3826  0003EA  0E0A               	movlw	10
  3827  0003EC                     u8421:
  3828  0003EC  CFDB FFE3          	movff	plusw2,plusw1
  3829  0003F0  06E8               	decf	wreg,f,c
  3830  0003F2  E2FC               	bc	u8421
  3831                           
  3832                           ;general_modem.c: 97: uint8_t creg[] = "AT+CREG?\r\n";
  3833  0003F4  EE21  F049         	lfsr	2,startup_ok@F6846
  3834  0003F8  EE14  F05A         	lfsr	1,startup_ok@creg
  3835  0003FC  0E0A               	movlw	10
  3836  0003FE                     u8431:
  3837  0003FE  CFDB FFE3          	movff	plusw2,plusw1
  3838  000402  06E8               	decf	wreg,f,c
  3839  000404  E2FC               	bc	u8431
  3840                           
  3841                           ;general_modem.c: 98: uint8_t cereg[] = "AT+CEREG?\r\n";
  3842  000406  EE21  F00E         	lfsr	2,startup_ok@F6848
  3843  00040A  EE14  F043         	lfsr	1,startup_ok@cereg
  3844  00040E  0E0B               	movlw	11
  3845  000410                     u8441:
  3846  000410  CFDB FFE3          	movff	plusw2,plusw1
  3847  000414  06E8               	decf	wreg,f,c
  3848  000416  E2FC               	bc	u8441
  3849                           
  3850                           ;general_modem.c: 99: uint8_t gprs[] = "AT#GPRS?\r\n";
  3851  000418  EE21  F03E         	lfsr	2,startup_ok@F6850
  3852  00041C  EE14  F000         	lfsr	1,startup_ok@gprs
  3853  000420  0E0A               	movlw	10
  3854  000422                     u8451:
  3855  000422  CFDB FFE3          	movff	plusw2,plusw1
  3856  000426  06E8               	decf	wreg,f,c
  3857  000428  E2FC               	bc	u8451
  3858                           
  3859                           ;general_modem.c: 100: uint8_t csq[] = "AT+CSQ\r\n";
  3860  00042A  EE21  F072         	lfsr	2,startup_ok@F6852
  3861  00042E  EE14  F06F         	lfsr	1,startup_ok@csq
  3862  000432  0E08               	movlw	8
  3863  000434                     u8461:
  3864  000434  CFDB FFE3          	movff	plusw2,plusw1
  3865  000438  06E8               	decf	wreg,f,c
  3866  00043A  E2FC               	bc	u8461
  3867                           
  3868                           ;general_modem.c: 103: init_md_uart();
  3869  00043C  ECB5  F011         	call	_init_md_uart	;wreg free
  3870                           
  3871                           ;general_modem.c: 106: if (at1 != 1)
  3872  000440  0100               	movlb	0	; () banked
  3873  000442  05C0               	decf	_at1& (0+255),w,b
  3874  000444  B4D8               	btfsc	status,2,c
  3875  000446  D013               	goto	l1093
  3876                           
  3877                           ; BSR set to: 0
  3878                           ;general_modem.c: 107: {
  3879                           ;general_modem.c: 108: at1 = md_uart_write_str_ok((uint8_t *)&at[0], sizeof(at), 1, 0);
  3880  000448  0E7F               	movlw	low startup_ok@at
  3881  00044A  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  3882  00044C  0E04               	movlw	high startup_ok@at
  3883  00044E  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  3884  000450  0E05               	movlw	5
  3885  000452  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  3886  000454  0E01               	movlw	1
  3887  000456  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  3888  000458  0E00               	movlw	0
  3889  00045A  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  3890  00045C  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  3891  000460  0100               	movlb	0	; () banked
  3892  000462  6FC0               	movwf	_at1& (0+255),b
  3893                           
  3894                           ; BSR set to: 0
  3895                           ;general_modem.c: 109: if (at1 == 1)
  3896  000464  05C0               	decf	_at1& (0+255),w,b
  3897  000466  A4D8               	btfss	status,2,c
  3898  000468  D002               	goto	l1093
  3899                           
  3900                           ; BSR set to: 0
  3901                           ;general_modem.c: 110: numUartRetries = 15;
  3902  00046A  0E0F               	movlw	15
  3903  00046C  6E44               	movwf	_numUartRetries,c
  3904  00046E                     l1093:
  3905                           
  3906                           ; BSR set to: 0
  3907                           ;general_modem.c: 111: }
  3908                           ;general_modem.c: 112: if (at1 == 1 && at2 != 1)
  3909                           
  3910                           ; BSR set to: 0
  3911                           
  3912                           ; BSR set to: 0
  3913  00046E  05C0               	decf	_at1& (0+255),w,b
  3914  000470  A4D8               	btfss	status,2,c
  3915  000472  D016               	goto	l1095
  3916                           
  3917                           ; BSR set to: 0
  3918  000474  05BF               	decf	_at2& (0+255),w,b
  3919  000476  B4D8               	btfsc	status,2,c
  3920  000478  D013               	goto	l1095
  3921                           
  3922                           ; BSR set to: 0
  3923                           ;general_modem.c: 113: {
  3924                           ;general_modem.c: 114: at2 = md_uart_write_str_ok((uint8_t *)&ate[0], sizeof(ate), 1, 0)
      +                          ;
  3925  00047A  0E78               	movlw	low startup_ok@ate
  3926  00047C  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  3927  00047E  0E04               	movlw	high startup_ok@ate
  3928  000480  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  3929  000482  0E07               	movlw	7
  3930  000484  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  3931  000486  0E01               	movlw	1
  3932  000488  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  3933  00048A  0E00               	movlw	0
  3934  00048C  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  3935  00048E  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  3936  000492  0100               	movlb	0	; () banked
  3937  000494  6FBF               	movwf	_at2& (0+255),b
  3938                           
  3939                           ; BSR set to: 0
  3940                           ;general_modem.c: 115: if (at2 == 1)
  3941  000496  05BF               	decf	_at2& (0+255),w,b
  3942  000498  A4D8               	btfss	status,2,c
  3943  00049A  D002               	goto	l1095
  3944                           
  3945                           ; BSR set to: 0
  3946                           ;general_modem.c: 116: numUartRetries = 15;
  3947  00049C  0E0F               	movlw	15
  3948  00049E  6E44               	movwf	_numUartRetries,c
  3949  0004A0                     l1095:
  3950                           
  3951                           ; BSR set to: 0
  3952                           ;general_modem.c: 117: }
  3953                           ;general_modem.c: 118: if (at2 == 1 && at3 != 1)
  3954                           
  3955                           ; BSR set to: 0
  3956                           
  3957                           ; BSR set to: 0
  3958  0004A0  05BF               	decf	_at2& (0+255),w,b
  3959  0004A2  A4D8               	btfss	status,2,c
  3960  0004A4  D016               	goto	l1097
  3961                           
  3962                           ; BSR set to: 0
  3963  0004A6  05BE               	decf	_at3& (0+255),w,b
  3964  0004A8  B4D8               	btfsc	status,2,c
  3965  0004AA  D013               	goto	l1097
  3966                           
  3967                           ; BSR set to: 0
  3968                           ;general_modem.c: 119: {
  3969                           ;general_modem.c: 120: at3 = md_uart_write_str_ok((uint8_t *)&cmee[0], sizeof(cmee), 1, 
      +                          0);
  3970  0004AC  0E2B               	movlw	low startup_ok@cmee
  3971  0004AE  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  3972  0004B0  0E04               	movlw	high startup_ok@cmee
  3973  0004B2  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  3974  0004B4  0E0C               	movlw	12
  3975  0004B6  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  3976  0004B8  0E01               	movlw	1
  3977  0004BA  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  3978  0004BC  0E00               	movlw	0
  3979  0004BE  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  3980  0004C0  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  3981  0004C4  0100               	movlb	0	; () banked
  3982  0004C6  6FBE               	movwf	_at3& (0+255),b
  3983                           
  3984                           ; BSR set to: 0
  3985                           ;general_modem.c: 121: if (at3 == 1)
  3986  0004C8  05BE               	decf	_at3& (0+255),w,b
  3987  0004CA  A4D8               	btfss	status,2,c
  3988  0004CC  D002               	goto	l1097
  3989                           
  3990                           ; BSR set to: 0
  3991                           ;general_modem.c: 122: numUartRetries = 15;
  3992  0004CE  0E0F               	movlw	15
  3993  0004D0  6E44               	movwf	_numUartRetries,c
  3994  0004D2                     l1097:
  3995                           
  3996                           ; BSR set to: 0
  3997                           ;general_modem.c: 123: }
  3998                           ;general_modem.c: 124: if (at3 == 1 && at4 != 1)
  3999                           
  4000                           ; BSR set to: 0
  4001                           
  4002                           ; BSR set to: 0
  4003  0004D2  05BE               	decf	_at3& (0+255),w,b
  4004  0004D4  A4D8               	btfss	status,2,c
  4005  0004D6  D016               	goto	l1099
  4006                           
  4007                           ; BSR set to: 0
  4008  0004D8  05BD               	decf	_at4& (0+255),w,b
  4009  0004DA  B4D8               	btfsc	status,2,c
  4010  0004DC  D013               	goto	l1099
  4011                           
  4012                           ; BSR set to: 0
  4013                           ;general_modem.c: 125: {
  4014                           ;general_modem.c: 126: at4 = md_uart_write_str_ok((uint8_t *)&baud[0], sizeof(baud), 1, 
      +                          0);
  4015  0004DE  0E0B               	movlw	low startup_ok@baud
  4016  0004E0  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  4017  0004E2  0E04               	movlw	high startup_ok@baud
  4018  0004E4  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  4019  0004E6  0E10               	movlw	16
  4020  0004E8  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  4021  0004EA  0E01               	movlw	1
  4022  0004EC  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  4023  0004EE  0E00               	movlw	0
  4024  0004F0  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  4025  0004F2  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  4026  0004F6  0100               	movlb	0	; () banked
  4027  0004F8  6FBD               	movwf	_at4& (0+255),b
  4028                           
  4029                           ; BSR set to: 0
  4030                           ;general_modem.c: 127: if (at4 == 1)
  4031  0004FA  05BD               	decf	_at4& (0+255),w,b
  4032  0004FC  A4D8               	btfss	status,2,c
  4033  0004FE  D002               	goto	l1099
  4034                           
  4035                           ; BSR set to: 0
  4036                           ;general_modem.c: 128: numUartRetries = 15;
  4037  000500  0E0F               	movlw	15
  4038  000502  6E44               	movwf	_numUartRetries,c
  4039  000504                     l1099:
  4040                           
  4041                           ; BSR set to: 0
  4042                           ;general_modem.c: 129: }
  4043                           ;general_modem.c: 130: if (at4 == 1 && at5 != 1)
  4044                           
  4045                           ; BSR set to: 0
  4046                           
  4047                           ; BSR set to: 0
  4048  000504  05BD               	decf	_at4& (0+255),w,b
  4049  000506  A4D8               	btfss	status,2,c
  4050  000508  D016               	goto	l1101
  4051                           
  4052                           ; BSR set to: 0
  4053  00050A  05BC               	decf	_at5& (0+255),w,b
  4054  00050C  B4D8               	btfsc	status,2,c
  4055  00050E  D013               	goto	l1101
  4056                           
  4057                           ; BSR set to: 0
  4058                           ;general_modem.c: 131: {
  4059                           ;general_modem.c: 132: at5 = md_uart_write_str_ok((uint8_t *)&ledCfg[0], sizeof(ledCfg),
      +                           1, 0);
  4060  000510  0E1B               	movlw	low startup_ok@ledCfg
  4061  000512  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  4062  000514  0E04               	movlw	high startup_ok@ledCfg
  4063  000516  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  4064  000518  0E10               	movlw	16
  4065  00051A  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  4066  00051C  0E01               	movlw	1
  4067  00051E  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  4068  000520  0E00               	movlw	0
  4069  000522  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  4070  000524  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  4071  000528  0100               	movlb	0	; () banked
  4072  00052A  6FBC               	movwf	_at5& (0+255),b
  4073                           
  4074                           ; BSR set to: 0
  4075                           ;general_modem.c: 133: if (at5 == 1)
  4076  00052C  05BC               	decf	_at5& (0+255),w,b
  4077  00052E  A4D8               	btfss	status,2,c
  4078  000530  D002               	goto	l1101
  4079                           
  4080                           ; BSR set to: 0
  4081                           ;general_modem.c: 134: numUartRetries = 15;
  4082  000532  0E0F               	movlw	15
  4083  000534  6E44               	movwf	_numUartRetries,c
  4084  000536                     l1101:
  4085                           
  4086                           ; BSR set to: 0
  4087                           ;general_modem.c: 135: }
  4088                           ;general_modem.c: 136: if (at5 == 1 && at6 != 1)
  4089                           
  4090                           ; BSR set to: 0
  4091                           
  4092                           ; BSR set to: 0
  4093  000536  05BC               	decf	_at5& (0+255),w,b
  4094  000538  A4D8               	btfss	status,2,c
  4095  00053A  D016               	goto	l1103
  4096                           
  4097                           ; BSR set to: 0
  4098  00053C  05BB               	decf	_at6& (0+255),w,b
  4099  00053E  B4D8               	btfsc	status,2,c
  4100  000540  D013               	goto	l1103
  4101                           
  4102                           ; BSR set to: 0
  4103                           ;general_modem.c: 137: {
  4104                           ;general_modem.c: 138: at6 = md_uart_write_str_ok((uint8_t *)&ledpattern[0], sizeof(ledp
      +                          attern), 1, 0);
  4105  000542  0E37               	movlw	low startup_ok@ledpattern
  4106  000544  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  4107  000546  0E04               	movlw	high startup_ok@ledpattern
  4108  000548  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  4109  00054A  0E0C               	movlw	12
  4110  00054C  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  4111  00054E  0E01               	movlw	1
  4112  000550  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  4113  000552  0E00               	movlw	0
  4114  000554  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  4115  000556  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  4116  00055A  0100               	movlb	0	; () banked
  4117  00055C  6FBB               	movwf	_at6& (0+255),b
  4118                           
  4119                           ; BSR set to: 0
  4120                           ;general_modem.c: 139: if (at6 == 1)
  4121  00055E  05BB               	decf	_at6& (0+255),w,b
  4122  000560  A4D8               	btfss	status,2,c
  4123  000562  D002               	goto	l1103
  4124                           
  4125                           ; BSR set to: 0
  4126                           ;general_modem.c: 140: numUartRetries = 15;
  4127  000564  0E0F               	movlw	15
  4128  000566  6E44               	movwf	_numUartRetries,c
  4129  000568                     l1103:
  4130                           
  4131                           ; BSR set to: 0
  4132                           ;general_modem.c: 141: }
  4133                           ;general_modem.c: 142: if (at6 == 1 && at7 != 1)
  4134                           
  4135                           ; BSR set to: 0
  4136                           
  4137                           ; BSR set to: 0
  4138  000568  05BB               	decf	_at6& (0+255),w,b
  4139  00056A  A4D8               	btfss	status,2,c
  4140  00056C  D016               	goto	l1105
  4141                           
  4142                           ; BSR set to: 0
  4143  00056E  05BA               	decf	_at7& (0+255),w,b
  4144  000570  B4D8               	btfsc	status,2,c
  4145  000572  D013               	goto	l1105
  4146                           
  4147                           ; BSR set to: 0
  4148                           ;general_modem.c: 143: {
  4149                           ;general_modem.c: 144: at7 = md_uart_write_str_ok((uint8_t *)&queryVersion[0], sizeof(qu
      +                          eryVersion), 1, 0);
  4150  000574  0E65               	movlw	low startup_ok@queryVersion
  4151  000576  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  4152  000578  0E04               	movlw	high startup_ok@queryVersion
  4153  00057A  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  4154  00057C  0E0A               	movlw	10
  4155  00057E  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  4156  000580  0E01               	movlw	1
  4157  000582  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  4158  000584  0E00               	movlw	0
  4159  000586  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  4160  000588  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  4161  00058C  0100               	movlb	0	; () banked
  4162  00058E  6FBA               	movwf	_at7& (0+255),b
  4163                           
  4164                           ; BSR set to: 0
  4165                           ;general_modem.c: 145: if (at7 == 1)
  4166  000590  05BA               	decf	_at7& (0+255),w,b
  4167  000592  A4D8               	btfss	status,2,c
  4168  000594  D002               	goto	l1105
  4169                           
  4170                           ; BSR set to: 0
  4171                           ;general_modem.c: 146: numUartRetries = 15;
  4172  000596  0E0F               	movlw	15
  4173  000598  6E44               	movwf	_numUartRetries,c
  4174  00059A                     l1105:
  4175                           
  4176                           ; BSR set to: 0
  4177                           ;general_modem.c: 147: }
  4178                           ;general_modem.c: 148: if (at7 == 1 && at8 != 1)
  4179                           
  4180                           ; BSR set to: 0
  4181                           
  4182                           ; BSR set to: 0
  4183  00059A  05BA               	decf	_at7& (0+255),w,b
  4184  00059C  A4D8               	btfss	status,2,c
  4185  00059E  D016               	goto	l1107
  4186                           
  4187                           ; BSR set to: 0
  4188  0005A0  05B9               	decf	_at8& (0+255),w,b
  4189  0005A2  B4D8               	btfsc	status,2,c
  4190  0005A4  D013               	goto	l1107
  4191                           
  4192                           ; BSR set to: 0
  4193                           ;general_modem.c: 149: {
  4194                           ;general_modem.c: 150: at8 = md_uart_write_str_ok((uint8_t *)&cpin[0], sizeof(cpin), 1, 
      +                          0);
  4195  0005A6  0E4F               	movlw	low startup_ok@cpin
  4196  0005A8  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  4197  0005AA  0E04               	movlw	high startup_ok@cpin
  4198  0005AC  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  4199  0005AE  0E0B               	movlw	11
  4200  0005B0  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  4201  0005B2  0E01               	movlw	1
  4202  0005B4  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  4203  0005B6  0E00               	movlw	0
  4204  0005B8  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  4205  0005BA  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  4206  0005BE  0100               	movlb	0	; () banked
  4207  0005C0  6FB9               	movwf	_at8& (0+255),b
  4208                           
  4209                           ; BSR set to: 0
  4210                           ;general_modem.c: 151: if (at8 == 1)
  4211  0005C2  05B9               	decf	_at8& (0+255),w,b
  4212  0005C4  A4D8               	btfss	status,2,c
  4213  0005C6  D002               	goto	l1107
  4214                           
  4215                           ; BSR set to: 0
  4216                           ;general_modem.c: 152: numUartRetries = 30;
  4217  0005C8  0E1E               	movlw	30
  4218  0005CA  6E44               	movwf	_numUartRetries,c
  4219  0005CC                     l1107:
  4220                           
  4221                           ; BSR set to: 0
  4222                           ;general_modem.c: 153: }
  4223                           ;general_modem.c: 156: if (at8 == 1 && (at9 != 1 || at10 != 1 || at11 != 1))
  4224                           
  4225                           ; BSR set to: 0
  4226                           
  4227                           ; BSR set to: 0
  4228  0005CC  05B9               	decf	_at8& (0+255),w,b
  4229  0005CE  A4D8               	btfss	status,2,c
  4230  0005D0  D05C               	goto	l1117
  4231                           
  4232                           ; BSR set to: 0
  4233  0005D2  05B8               	decf	_at9& (0+255),w,b
  4234  0005D4  A4D8               	btfss	status,2,c
  4235  0005D6  D006               	goto	u8730
  4236                           
  4237                           ; BSR set to: 0
  4238  0005D8  05B7               	decf	_at10& (0+255),w,b
  4239  0005DA  A4D8               	btfss	status,2,c
  4240  0005DC  D003               	goto	u8730
  4241                           
  4242                           ; BSR set to: 0
  4243  0005DE  05B6               	decf	_at11& (0+255),w,b
  4244  0005E0  B4D8               	btfsc	status,2,c
  4245  0005E2  D053               	goto	l1117
  4246  0005E4                     u8730:
  4247                           
  4248                           ; BSR set to: 0
  4249                           ;general_modem.c: 157: {
  4250                           ;general_modem.c: 158: if (at9 != 1)
  4251                           
  4252                           ; BSR set to: 0
  4253  0005E4  05B8               	decf	_at9& (0+255),w,b
  4254  0005E6  B4D8               	btfsc	status,2,c
  4255  0005E8  D015               	goto	l1112
  4256                           
  4257                           ; BSR set to: 0
  4258                           ;general_modem.c: 159: {
  4259                           ;general_modem.c: 160: at9 = md_uart_write_str_ok((uint8_t *)&creg[0], sizeof(creg), 1, 
      +                          0);
  4260  0005EA  0E5A               	movlw	low startup_ok@creg
  4261  0005EC  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  4262  0005EE  0E04               	movlw	high startup_ok@creg
  4263  0005F0  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  4264  0005F2  0E0B               	movlw	11
  4265  0005F4  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  4266  0005F6  0E01               	movlw	1
  4267  0005F8  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  4268  0005FA  0E00               	movlw	0
  4269  0005FC  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  4270  0005FE  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  4271  000602  0100               	movlb	0	; () banked
  4272  000604  6FB8               	movwf	_at9& (0+255),b
  4273                           
  4274                           ; BSR set to: 0
  4275                           ;general_modem.c: 161: if (at9 == 1)
  4276  000606  05B8               	decf	_at9& (0+255),w,b
  4277  000608  A4D8               	btfss	status,2,c
  4278  00060A  D004               	goto	l1112
  4279                           
  4280                           ; BSR set to: 0
  4281                           ;general_modem.c: 162: at9 = parse_creg_ok();
  4282  00060C  ECA3  F00A         	call	_parse_creg_ok	;wreg free
  4283  000610  0100               	movlb	0	; () banked
  4284  000612  6FB8               	movwf	_at9& (0+255),b
  4285  000614                     l1112:
  4286                           
  4287                           ; BSR set to: 0
  4288                           ;general_modem.c: 163: }
  4289                           ;general_modem.c: 164: if (at10 != 1)
  4290                           
  4291                           ; BSR set to: 0
  4292                           
  4293                           ; BSR set to: 0
  4294  000614  05B7               	decf	_at10& (0+255),w,b
  4295  000616  B4D8               	btfsc	status,2,c
  4296  000618  D015               	goto	l1114
  4297                           
  4298                           ; BSR set to: 0
  4299                           ;general_modem.c: 165: {
  4300                           ;general_modem.c: 166: at10 = md_uart_write_str_ok((uint8_t *)&cereg[0], sizeof(cereg), 
      +                          1, 0);
  4301  00061A  0E43               	movlw	low startup_ok@cereg
  4302  00061C  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  4303  00061E  0E04               	movlw	high startup_ok@cereg
  4304  000620  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  4305  000622  0E0C               	movlw	12
  4306  000624  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  4307  000626  0E01               	movlw	1
  4308  000628  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  4309  00062A  0E00               	movlw	0
  4310  00062C  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  4311  00062E  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  4312  000632  0100               	movlb	0	; () banked
  4313  000634  6FB7               	movwf	_at10& (0+255),b
  4314                           
  4315                           ; BSR set to: 0
  4316                           ;general_modem.c: 167: if (at10 == 1)
  4317  000636  05B7               	decf	_at10& (0+255),w,b
  4318  000638  A4D8               	btfss	status,2,c
  4319  00063A  D004               	goto	l1114
  4320                           
  4321                           ; BSR set to: 0
  4322                           ;general_modem.c: 168: at10 = parse_cereg_ok();
  4323  00063C  EC0B  F00A         	call	_parse_cereg_ok	;wreg free
  4324  000640  0100               	movlb	0	; () banked
  4325  000642  6FB7               	movwf	_at10& (0+255),b
  4326  000644                     l1114:
  4327                           
  4328                           ; BSR set to: 0
  4329                           ;general_modem.c: 169: }
  4330                           ;general_modem.c: 170: if (at11 != 1)
  4331                           
  4332                           ; BSR set to: 0
  4333                           
  4334                           ; BSR set to: 0
  4335  000644  05B6               	decf	_at11& (0+255),w,b
  4336  000646  B4D8               	btfsc	status,2,c
  4337  000648  D015               	goto	l1116
  4338                           
  4339                           ; BSR set to: 0
  4340                           ;general_modem.c: 171: {
  4341                           ;general_modem.c: 172: at11 = md_uart_write_str_ok((uint8_t *)&csq[0], sizeof(csq), 1, 0
      +                          );
  4342  00064A  0E6F               	movlw	low startup_ok@csq
  4343  00064C  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  4344  00064E  0E04               	movlw	high startup_ok@csq
  4345  000650  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  4346  000652  0E09               	movlw	9
  4347  000654  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  4348  000656  0E01               	movlw	1
  4349  000658  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  4350  00065A  0E00               	movlw	0
  4351  00065C  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  4352  00065E  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  4353  000662  0100               	movlb	0	; () banked
  4354  000664  6FB6               	movwf	_at11& (0+255),b
  4355                           
  4356                           ; BSR set to: 0
  4357                           ;general_modem.c: 173: if (at11 == 1)
  4358  000666  05B6               	decf	_at11& (0+255),w,b
  4359  000668  A4D8               	btfss	status,2,c
  4360  00066A  D004               	goto	l1116
  4361                           
  4362                           ; BSR set to: 0
  4363                           ;general_modem.c: 174: at11 = parse_csq_ok();
  4364  00066C  ECFA  F007         	call	_parse_csq_ok	;wreg free
  4365  000670  0100               	movlb	0	; () banked
  4366  000672  6FB6               	movwf	_at11& (0+255),b
  4367  000674                     l1116:
  4368                           
  4369                           ; BSR set to: 0
  4370                           ;general_modem.c: 175: }
  4371                           ;general_modem.c: 177: if (at9 == 1 && at10 == 1 && at11 == 1)
  4372                           
  4373                           ; BSR set to: 0
  4374                           
  4375                           ; BSR set to: 0
  4376  000674  05B8               	decf	_at9& (0+255),w,b
  4377  000676  A4D8               	btfss	status,2,c
  4378  000678  D008               	goto	l1117
  4379                           
  4380                           ; BSR set to: 0
  4381  00067A  05B7               	decf	_at10& (0+255),w,b
  4382  00067C  A4D8               	btfss	status,2,c
  4383  00067E  D005               	goto	l1117
  4384                           
  4385                           ; BSR set to: 0
  4386  000680  05B6               	decf	_at11& (0+255),w,b
  4387  000682  A4D8               	btfss	status,2,c
  4388  000684  D002               	goto	l1117
  4389                           
  4390                           ; BSR set to: 0
  4391                           ;general_modem.c: 178: numUartRetries = 15;
  4392  000686  0E0F               	movlw	15
  4393  000688  6E44               	movwf	_numUartRetries,c
  4394  00068A                     l1117:
  4395                           
  4396                           ; BSR set to: 0
  4397                           ;general_modem.c: 179: }
  4398                           ;general_modem.c: 185: if (at1 == 5 || at2 == 5 || at3 == 5 || at4 == 5 || at5 == 5 || a
      +                          t6 == 5 || at7 == 5 || at8 == 5 || at9 == 5 || at10 == 5 || at11 == 5)
  4399                           
  4400                           ; BSR set to: 0
  4401                           
  4402                           ; BSR set to: 0
  4403  00068A  0E05               	movlw	5
  4404  00068C  19C0               	xorwf	_at1& (0+255),w,b
  4405  00068E  B4D8               	btfsc	status,2,c
  4406  000690  D028               	goto	u8930
  4407                           
  4408                           ; BSR set to: 0
  4409  000692  0E05               	movlw	5
  4410  000694  19BF               	xorwf	_at2& (0+255),w,b
  4411  000696  B4D8               	btfsc	status,2,c
  4412  000698  D024               	goto	u8930
  4413                           
  4414                           ; BSR set to: 0
  4415  00069A  0E05               	movlw	5
  4416  00069C  19BE               	xorwf	_at3& (0+255),w,b
  4417  00069E  B4D8               	btfsc	status,2,c
  4418  0006A0  D020               	goto	u8930
  4419                           
  4420                           ; BSR set to: 0
  4421  0006A2  0E05               	movlw	5
  4422  0006A4  19BD               	xorwf	_at4& (0+255),w,b
  4423  0006A6  B4D8               	btfsc	status,2,c
  4424  0006A8  D01C               	goto	u8930
  4425                           
  4426                           ; BSR set to: 0
  4427  0006AA  0E05               	movlw	5
  4428  0006AC  19BC               	xorwf	_at5& (0+255),w,b
  4429  0006AE  B4D8               	btfsc	status,2,c
  4430  0006B0  D018               	goto	u8930
  4431                           
  4432                           ; BSR set to: 0
  4433  0006B2  0E05               	movlw	5
  4434  0006B4  19BB               	xorwf	_at6& (0+255),w,b
  4435  0006B6  B4D8               	btfsc	status,2,c
  4436  0006B8  D014               	goto	u8930
  4437                           
  4438                           ; BSR set to: 0
  4439  0006BA  0E05               	movlw	5
  4440  0006BC  19BA               	xorwf	_at7& (0+255),w,b
  4441  0006BE  B4D8               	btfsc	status,2,c
  4442  0006C0  D010               	goto	u8930
  4443                           
  4444                           ; BSR set to: 0
  4445  0006C2  0E05               	movlw	5
  4446  0006C4  19B9               	xorwf	_at8& (0+255),w,b
  4447  0006C6  B4D8               	btfsc	status,2,c
  4448  0006C8  D00C               	goto	u8930
  4449                           
  4450                           ; BSR set to: 0
  4451  0006CA  0E05               	movlw	5
  4452  0006CC  19B8               	xorwf	_at9& (0+255),w,b
  4453  0006CE  B4D8               	btfsc	status,2,c
  4454  0006D0  D008               	goto	u8930
  4455                           
  4456                           ; BSR set to: 0
  4457  0006D2  0E05               	movlw	5
  4458  0006D4  19B7               	xorwf	_at10& (0+255),w,b
  4459  0006D6  B4D8               	btfsc	status,2,c
  4460  0006D8  D004               	goto	u8930
  4461                           
  4462                           ; BSR set to: 0
  4463  0006DA  0E05               	movlw	5
  4464  0006DC  19B6               	xorwf	_at11& (0+255),w,b
  4465  0006DE  A4D8               	btfss	status,2,c
  4466  0006E0  D004               	goto	l1118
  4467  0006E2                     u8930:
  4468                           
  4469                           ; BSR set to: 0
  4470                           ;general_modem.c: 187: {
  4471                           ;general_modem.c: 188: clear_at_ok();
  4472                           
  4473                           ; BSR set to: 0
  4474  0006E2  EC1E  F011         	call	_clear_at_ok	;wreg free
  4475                           
  4476                           ;general_modem.c: 189: return 5;
  4477  0006E6  0E05               	movlw	5
  4478  0006E8  0012               	return	
  4479  0006EA                     l1118:
  4480                           
  4481                           ;general_modem.c: 191: else if (at1 == 1 && at2 == 1 && at3 == 1 && at4 == 1 && at5 == 1
      +                           && at6 == 1 && at7 == 1 && at8 == 1 && at9 == 1 && at10 == 1 && at11 == 1 && at12 == 1)
  4482  0006EA  0100               	movlb	0	; () banked
  4483  0006EC  05C0               	decf	_at1& (0+255),w,b
  4484  0006EE  A4D8               	btfss	status,2,c
  4485  0006F0  D025               	goto	l1123
  4486                           
  4487                           ; BSR set to: 0
  4488  0006F2  05BF               	decf	_at2& (0+255),w,b
  4489  0006F4  A4D8               	btfss	status,2,c
  4490  0006F6  D022               	goto	l1123
  4491                           
  4492                           ; BSR set to: 0
  4493  0006F8  05BE               	decf	_at3& (0+255),w,b
  4494  0006FA  A4D8               	btfss	status,2,c
  4495  0006FC  D01F               	goto	l1123
  4496                           
  4497                           ; BSR set to: 0
  4498  0006FE  05BD               	decf	_at4& (0+255),w,b
  4499  000700  A4D8               	btfss	status,2,c
  4500  000702  D01C               	goto	l1123
  4501                           
  4502                           ; BSR set to: 0
  4503  000704  05BC               	decf	_at5& (0+255),w,b
  4504  000706  A4D8               	btfss	status,2,c
  4505  000708  D019               	goto	l1123
  4506                           
  4507                           ; BSR set to: 0
  4508  00070A  05BB               	decf	_at6& (0+255),w,b
  4509  00070C  A4D8               	btfss	status,2,c
  4510  00070E  D016               	goto	l1123
  4511                           
  4512                           ; BSR set to: 0
  4513  000710  05BA               	decf	_at7& (0+255),w,b
  4514  000712  A4D8               	btfss	status,2,c
  4515  000714  D013               	goto	l1123
  4516                           
  4517                           ; BSR set to: 0
  4518  000716  05B9               	decf	_at8& (0+255),w,b
  4519  000718  A4D8               	btfss	status,2,c
  4520  00071A  D010               	goto	l1123
  4521                           
  4522                           ; BSR set to: 0
  4523  00071C  05B8               	decf	_at9& (0+255),w,b
  4524  00071E  A4D8               	btfss	status,2,c
  4525  000720  D00D               	goto	l1123
  4526                           
  4527                           ; BSR set to: 0
  4528  000722  05B7               	decf	_at10& (0+255),w,b
  4529  000724  A4D8               	btfss	status,2,c
  4530  000726  D00A               	goto	l1123
  4531                           
  4532                           ; BSR set to: 0
  4533  000728  05B6               	decf	_at11& (0+255),w,b
  4534  00072A  A4D8               	btfss	status,2,c
  4535  00072C  D007               	goto	l1123
  4536                           
  4537                           ; BSR set to: 0
  4538  00072E  05B5               	decf	_at12& (0+255),w,b
  4539  000730  A4D8               	btfss	status,2,c
  4540  000732  D004               	goto	l1123
  4541                           
  4542                           ; BSR set to: 0
  4543                           ;general_modem.c: 193: {
  4544                           ;general_modem.c: 194: clear_at_ok();
  4545  000734  EC1E  F011         	call	_clear_at_ok	;wreg free
  4546                           
  4547                           ;general_modem.c: 195: return 1;
  4548  000738  0E01               	movlw	1
  4549  00073A  0012               	return	
  4550  00073C                     l1123:
  4551                           
  4552                           ;general_modem.c: 196: }
  4553                           ;general_modem.c: 197: return 2;
  4554  00073C  0E02               	movlw	2
  4555  00073E  0012               	return	
  4556  000740                     __end_of_startup_ok:
  4557                           	opt stack 0
  4558                           tblptru	equ	0xFF8
  4559                           tblptrh	equ	0xFF7
  4560                           tblptrl	equ	0xFF6
  4561                           tablat	equ	0xFF5
  4562                           prodh	equ	0xFF4
  4563                           prodl	equ	0xFF3
  4564                           intcon	equ	0xFF2
  4565                           postinc0	equ	0xFEE
  4566                           wreg	equ	0xFE8
  4567                           postdec1	equ	0xFE5
  4568                           plusw1	equ	0xFE3
  4569                           fsr1l	equ	0xFE1
  4570                           indf2	equ	0xFDF
  4571                           plusw2	equ	0xFDB
  4572                           fsr2h	equ	0xFDA
  4573                           fsr2l	equ	0xFD9
  4574                           status	equ	0xFD8
  4575                           
  4576 ;; *************** function _parse_csq_ok *****************
  4577 ;; Defined at:
  4578 ;;		line 247 in file "uart.c"
  4579 ;; Parameters:    Size  Location     Type
  4580 ;;		None
  4581 ;; Auto vars:     Size  Location     Type
  4582 ;;  i               1   14[BANK0 ] unsigned char 
  4583 ;;  csq_rsp         7    4[BANK0 ] unsigned char [7]
  4584 ;;  tens_digit      1   15[BANK0 ] unsigned char 
  4585 ;;  colon_index     1   13[BANK0 ] unsigned char 
  4586 ;;  comma_index     1   12[BANK0 ] unsigned char 
  4587 ;;  ones_digit      1   11[BANK0 ] unsigned char 
  4588 ;; Return value:  Size  Location     Type
  4589 ;;                  1    wreg      unsigned char 
  4590 ;; Registers used:
  4591 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4592 ;; Tracked objects:
  4593 ;;		On entry : 0/0
  4594 ;;		On exit  : 0/0
  4595 ;;		Unchanged: 0/0
  4596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4598 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4599 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4600 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4601 ;;Total ram usage:       16 bytes
  4602 ;; Hardware stack levels used:    1
  4603 ;; Hardware stack levels required when called:    3
  4604 ;; This function calls:
  4605 ;;		Nothing
  4606 ;; This function is called by:
  4607 ;;		_startup_ok
  4608 ;; This function uses a non-reentrant model
  4609 ;;
  4610                           
  4611                           	psect	text18
  4612  000FF4                     __ptext18:
  4613                           	opt stack 0
  4614  000FF4                     _parse_csq_ok:
  4615                           	opt stack 22
  4616                           
  4617                           ;uart.c: 249: uint8_t csq_rsp[] = "+CSQ: ";
  4618                           
  4619                           ;incstack = 0
  4620  000FF4  EE21  F0A6         	lfsr	2,parse_csq_ok@F6857
  4621  000FF8  EE10  F064         	lfsr	1,parse_csq_ok@csq_rsp
  4622  000FFC  0E06               	movlw	6
  4623  000FFE                     u7841:
  4624  000FFE  CFDB FFE3          	movff	plusw2,plusw1
  4625  001002  06E8               	decf	wreg,f,c
  4626  001004  E2FC               	bc	u7841
  4627                           
  4628                           ;uart.c: 250: uint8_t colon_index = 0, comma_index = 0;
  4629  001006  0E00               	movlw	0
  4630  001008  0100               	movlb	0	; () banked
  4631  00100A  6F6D               	movwf	parse_csq_ok@colon_index& (0+255),b
  4632                           
  4633                           ; BSR set to: 0
  4634  00100C  0E00               	movlw	0
  4635  00100E  6F6C               	movwf	parse_csq_ok@comma_index& (0+255),b
  4636                           
  4637                           ; BSR set to: 0
  4638                           ;uart.c: 251: uint8_t tens_digit, ones_digit;
  4639                           ;uart.c: 252: for (uint8_t i = 0; i < sizeof(mdRxBuf); i++)
  4640  001010  0E00               	movlw	0
  4641  001012  6F6E               	movwf	parse_csq_ok@i& (0+255),b
  4642  001014                     l6726:
  4643                           
  4644                           ; BSR set to: 0
  4645  001014  0E9F               	movlw	159
  4646  001016  656E               	cpfsgt	parse_csq_ok@i& (0+255),b
  4647  001018  D001               	goto	l1550
  4648  00101A  D00F               	goto	u7870
  4649  00101C                     l1550:
  4650                           
  4651                           ; BSR set to: 0
  4652                           ;uart.c: 253: {
  4653                           ;uart.c: 254: if (mdRxBuf[i] == csq_rsp[4])
  4654                           
  4655                           ; BSR set to: 0
  4656  00101C  516E               	movf	parse_csq_ok@i& (0+255),w,b
  4657  00101E  0D01               	mullw	1
  4658  001020  0E00               	movlw	low _mdRxBuf
  4659  001022  24F3               	addwf	prodl,w,c
  4660  001024  6ED9               	movwf	fsr2l,c
  4661  001026  0E02               	movlw	high _mdRxBuf
  4662  001028  20F4               	addwfc	prodh,w,c
  4663  00102A  6EDA               	movwf	fsr2h,c
  4664  00102C  5168               	movf	(parse_csq_ok@csq_rsp+4)& (0+255),w,b
  4665  00102E  18DE               	xorwf	postinc2,w,c
  4666  001030  B4D8               	btfsc	status,2,c
  4667                           
  4668                           ; BSR set to: 0
  4669                           ;uart.c: 255: colon_index = i;
  4670  001032  C06E  F06D         	movff	parse_csq_ok@i,parse_csq_ok@colon_index
  4671                           
  4672                           ; BSR set to: 0
  4673                           
  4674                           ; BSR set to: 0
  4675                           
  4676                           ; BSR set to: 0
  4677                           
  4678                           ; BSR set to: 0
  4679  001036  2B6E               	incf	parse_csq_ok@i& (0+255),f,b
  4680  001038  D7ED               	goto	l6726
  4681  00103A                     u7870:
  4682                           
  4683                           ; BSR set to: 0
  4684                           ;uart.c: 258: }
  4685                           ;uart.c: 259: if (mdRxBuf[(uint8_t)(colon_index - 4)] == csq_rsp[0] && mdRxBuf[(uint8_t)
      +                          (colon_index - 3)] == csq_rsp[1] && mdRxBuf[(uint8_t)(colon_index - 2)] == csq_rsp[2] &&
      +                           mdRxBuf[(uint8_t)(colon_index - 1)] == csq_rsp[3])
  4686                           
  4687                           ; BSR set to: 0
  4688  00103A  C06D  F060         	movff	parse_csq_ok@colon_index,??_parse_csq_ok
  4689  00103E  0EFC               	movlw	252
  4690  001040  2760               	addwf	??_parse_csq_ok& (0+255),f,b
  4691  001042  5160               	movf	??_parse_csq_ok& (0+255),w,b
  4692  001044  0D01               	mullw	1
  4693  001046  0E00               	movlw	low _mdRxBuf
  4694  001048  24F3               	addwf	prodl,w,c
  4695  00104A  6ED9               	movwf	fsr2l,c
  4696  00104C  0E02               	movlw	high _mdRxBuf
  4697  00104E  20F4               	addwfc	prodh,w,c
  4698  001050  6EDA               	movwf	fsr2h,c
  4699  001052  5164               	movf	parse_csq_ok@csq_rsp& (0+255),w,b
  4700  001054  18DE               	xorwf	postinc2,w,c
  4701  001056  A4D8               	btfss	status,2,c
  4702  001058  D094               	goto	l1565
  4703                           
  4704                           ; BSR set to: 0
  4705  00105A  C06D  F060         	movff	parse_csq_ok@colon_index,??_parse_csq_ok
  4706  00105E  0EFD               	movlw	253
  4707  001060  2760               	addwf	??_parse_csq_ok& (0+255),f,b
  4708  001062  5160               	movf	??_parse_csq_ok& (0+255),w,b
  4709  001064  0D01               	mullw	1
  4710  001066  0E00               	movlw	low _mdRxBuf
  4711  001068  24F3               	addwf	prodl,w,c
  4712  00106A  6ED9               	movwf	fsr2l,c
  4713  00106C  0E02               	movlw	high _mdRxBuf
  4714  00106E  20F4               	addwfc	prodh,w,c
  4715  001070  6EDA               	movwf	fsr2h,c
  4716  001072  5165               	movf	(parse_csq_ok@csq_rsp+1)& (0+255),w,b
  4717  001074  18DE               	xorwf	postinc2,w,c
  4718  001076  A4D8               	btfss	status,2,c
  4719  001078  D084               	goto	l1565
  4720                           
  4721                           ; BSR set to: 0
  4722  00107A  C06D  F060         	movff	parse_csq_ok@colon_index,??_parse_csq_ok
  4723  00107E  0EFE               	movlw	254
  4724  001080  2760               	addwf	??_parse_csq_ok& (0+255),f,b
  4725  001082  5160               	movf	??_parse_csq_ok& (0+255),w,b
  4726  001084  0D01               	mullw	1
  4727  001086  0E00               	movlw	low _mdRxBuf
  4728  001088  24F3               	addwf	prodl,w,c
  4729  00108A  6ED9               	movwf	fsr2l,c
  4730  00108C  0E02               	movlw	high _mdRxBuf
  4731  00108E  20F4               	addwfc	prodh,w,c
  4732  001090  6EDA               	movwf	fsr2h,c
  4733  001092  5166               	movf	(parse_csq_ok@csq_rsp+2)& (0+255),w,b
  4734  001094  18DE               	xorwf	postinc2,w,c
  4735  001096  A4D8               	btfss	status,2,c
  4736  001098  D074               	goto	l1565
  4737                           
  4738                           ; BSR set to: 0
  4739  00109A  C06D  F060         	movff	parse_csq_ok@colon_index,??_parse_csq_ok
  4740  00109E  0EFF               	movlw	255
  4741  0010A0  2760               	addwf	??_parse_csq_ok& (0+255),f,b
  4742  0010A2  5160               	movf	??_parse_csq_ok& (0+255),w,b
  4743  0010A4  0D01               	mullw	1
  4744  0010A6  0E00               	movlw	low _mdRxBuf
  4745  0010A8  24F3               	addwf	prodl,w,c
  4746  0010AA  6ED9               	movwf	fsr2l,c
  4747  0010AC  0E02               	movlw	high _mdRxBuf
  4748  0010AE  20F4               	addwfc	prodh,w,c
  4749  0010B0  6EDA               	movwf	fsr2h,c
  4750  0010B2  5167               	movf	(parse_csq_ok@csq_rsp+3)& (0+255),w,b
  4751  0010B4  18DE               	xorwf	postinc2,w,c
  4752  0010B6  A4D8               	btfss	status,2,c
  4753  0010B8  D064               	goto	l1565
  4754                           
  4755                           ; BSR set to: 0
  4756                           ;uart.c: 261: {
  4757                           ;uart.c: 262: if (comma_index - colon_index > 3)
  4758  0010BA  516D               	movf	parse_csq_ok@colon_index& (0+255),w,b
  4759  0010BC  6F60               	movwf	??_parse_csq_ok& (0+255),b
  4760  0010BE  6B61               	clrf	(??_parse_csq_ok+1)& (0+255),b
  4761  0010C0  1F60               	comf	??_parse_csq_ok& (0+255),f,b
  4762  0010C2  1F61               	comf	(??_parse_csq_ok+1)& (0+255),f,b
  4763  0010C4  4B60               	infsnz	??_parse_csq_ok& (0+255),f,b
  4764  0010C6  2B61               	incf	(??_parse_csq_ok+1)& (0+255),f,b
  4765  0010C8  516C               	movf	parse_csq_ok@comma_index& (0+255),w,b
  4766  0010CA  6F62               	movwf	(??_parse_csq_ok+2)& (0+255),b
  4767  0010CC  6B63               	clrf	(??_parse_csq_ok+3)& (0+255),b
  4768  0010CE  5160               	movf	??_parse_csq_ok& (0+255),w,b
  4769  0010D0  2762               	addwf	(??_parse_csq_ok+2)& (0+255),f,b
  4770  0010D2  5161               	movf	(??_parse_csq_ok+1)& (0+255),w,b
  4771  0010D4  2363               	addwfc	(??_parse_csq_ok+3)& (0+255),f,b
  4772  0010D6  BF63               	btfsc	(??_parse_csq_ok+3)& (0+255),7,b
  4773  0010D8  D040               	goto	l1555
  4774  0010DA  5163               	movf	(??_parse_csq_ok+3)& (0+255),w,b
  4775  0010DC  E104               	bnz	u7920
  4776  0010DE  0E04               	movlw	4
  4777  0010E0  5D62               	subwf	(??_parse_csq_ok+2)& (0+255),w,b
  4778  0010E2  A0D8               	btfss	status,0,c
  4779  0010E4  D03A               	goto	l1555
  4780  0010E6                     u7920:
  4781                           
  4782                           ; BSR set to: 0
  4783                           ;uart.c: 263: {
  4784                           ;uart.c: 264: tens_digit = (mdRxBuf[(uint8_t)(comma_index - 2)]);
  4785  0010E6  C06C  F060         	movff	parse_csq_ok@comma_index,??_parse_csq_ok
  4786  0010EA  0EFE               	movlw	254
  4787  0010EC  2760               	addwf	??_parse_csq_ok& (0+255),f,b
  4788  0010EE  5160               	movf	??_parse_csq_ok& (0+255),w,b
  4789  0010F0  0D01               	mullw	1
  4790  0010F2  0E00               	movlw	low _mdRxBuf
  4791  0010F4  24F3               	addwf	prodl,w,c
  4792  0010F6  6ED9               	movwf	fsr2l,c
  4793  0010F8  0E02               	movlw	high _mdRxBuf
  4794  0010FA  20F4               	addwfc	prodh,w,c
  4795  0010FC  6EDA               	movwf	fsr2h,c
  4796  0010FE  50DF               	movf	indf2,w,c
  4797  001100  6F6F               	movwf	parse_csq_ok@tens_digit& (0+255),b
  4798                           
  4799                           ; BSR set to: 0
  4800                           ;uart.c: 265: if (tens_digit >= 0x41)
  4801  001102  0E40               	movlw	64
  4802  001104  656F               	cpfsgt	parse_csq_ok@tens_digit& (0+255),b
  4803  001106  D003               	goto	l1556
  4804                           
  4805                           ; BSR set to: 0
  4806                           ;uart.c: 266: tens_digit = (uint8_t)((tens_digit - 0x41 + 0x0A) * 10);
  4807  001108  516F               	movf	parse_csq_ok@tens_digit& (0+255),w,b
  4808  00110A  0FC9               	addlw	201
  4809  00110C  D002               	goto	L2
  4810  00110E                     l1556:
  4811                           
  4812                           ; BSR set to: 0
  4813                           ;uart.c: 267: else
  4814                           ;uart.c: 268: tens_digit = (uint8_t)((tens_digit - 0x30) * 10);
  4815                           
  4816                           ; BSR set to: 0
  4817  00110E  516F               	movf	parse_csq_ok@tens_digit& (0+255),w,b
  4818  001110  0FD0               	addlw	208
  4819  001112                     L2:
  4820  001112  0D0A               	mullw	10
  4821  001114  CFF3 F06F          	movff	prodl,parse_csq_ok@tens_digit
  4822                           
  4823                           ; BSR set to: 0
  4824                           ;uart.c: 269: ones_digit = (mdRxBuf[(uint8_t)(comma_index - 1)]);
  4825                           
  4826                           ; BSR set to: 0
  4827  001118  C06C  F060         	movff	parse_csq_ok@comma_index,??_parse_csq_ok
  4828  00111C  0EFF               	movlw	255
  4829  00111E  2760               	addwf	??_parse_csq_ok& (0+255),f,b
  4830  001120  5160               	movf	??_parse_csq_ok& (0+255),w,b
  4831  001122  0D01               	mullw	1
  4832  001124  0E00               	movlw	low _mdRxBuf
  4833  001126  24F3               	addwf	prodl,w,c
  4834  001128  6ED9               	movwf	fsr2l,c
  4835  00112A  0E02               	movlw	high _mdRxBuf
  4836  00112C  20F4               	addwfc	prodh,w,c
  4837  00112E  6EDA               	movwf	fsr2h,c
  4838  001130  50DF               	movf	indf2,w,c
  4839  001132  6F6B               	movwf	parse_csq_ok@ones_digit& (0+255),b
  4840                           
  4841                           ; BSR set to: 0
  4842                           ;uart.c: 270: if (ones_digit >= 0x41)
  4843  001134  0E40               	movlw	64
  4844  001136  656B               	cpfsgt	parse_csq_ok@ones_digit& (0+255),b
  4845  001138  D002               	goto	l1558
  4846                           
  4847                           ; BSR set to: 0
  4848                           ;uart.c: 271: ones_digit -= 0x41;
  4849  00113A  0E41               	movlw	65
  4850  00113C  D001               	goto	L1
  4851  00113E                     l1558:
  4852                           
  4853                           ; BSR set to: 0
  4854                           ;uart.c: 272: else
  4855                           ;uart.c: 273: ones_digit -= 0x30;
  4856                           
  4857                           ; BSR set to: 0
  4858  00113E  0E30               	movlw	48
  4859  001140                     L1:
  4860  001140  5F6B               	subwf	parse_csq_ok@ones_digit& (0+255),f,b
  4861                           
  4862                           ; BSR set to: 0
  4863                           ;uart.c: 274: tens_digit += ones_digit;
  4864  001142  516B               	movf	parse_csq_ok@ones_digit& (0+255),w,b
  4865  001144  276F               	addwf	parse_csq_ok@tens_digit& (0+255),f,b
  4866                           
  4867                           ; BSR set to: 0
  4868                           ;uart.c: 275: if (tens_digit > 0 && tens_digit < 99)
  4869  001146  516F               	movf	parse_csq_ok@tens_digit& (0+255),w,b
  4870  001148  B4D8               	btfsc	status,2,c
  4871  00114A  D005               	goto	l1560
  4872                           
  4873                           ; BSR set to: 0
  4874  00114C  0E63               	movlw	99
  4875  00114E  616F               	cpfslt	parse_csq_ok@tens_digit& (0+255),b
  4876  001150  D002               	goto	l1560
  4877  001152                     u7960:
  4878                           
  4879                           ; BSR set to: 0
  4880                           ;uart.c: 276: return 1;
  4881  001152  0E01               	movlw	1
  4882                           
  4883                           ; BSR set to: 0
  4884  001154  0012               	return	
  4885  001156                     l1560:
  4886                           
  4887                           ; BSR set to: 0
  4888                           ;uart.c: 277: else
  4889                           ;uart.c: 278: return 4;
  4890                           
  4891                           ; BSR set to: 0
  4892  001156  0E04               	movlw	4
  4893                           
  4894                           ; BSR set to: 0
  4895  001158  0012               	return	
  4896  00115A                     l1555:
  4897                           
  4898                           ; BSR set to: 0
  4899                           ;uart.c: 280: else
  4900                           ;uart.c: 281: {
  4901                           ;uart.c: 282: ones_digit = (uint8_t)(mdRxBuf[(uint8_t)(comma_index - 1)] - 0x30);
  4902                           
  4903                           ; BSR set to: 0
  4904  00115A  C06C  F060         	movff	parse_csq_ok@comma_index,??_parse_csq_ok
  4905  00115E  0EFF               	movlw	255
  4906  001160  2760               	addwf	??_parse_csq_ok& (0+255),f,b
  4907  001162  5160               	movf	??_parse_csq_ok& (0+255),w,b
  4908  001164  0D01               	mullw	1
  4909  001166  0E00               	movlw	low _mdRxBuf
  4910  001168  24F3               	addwf	prodl,w,c
  4911  00116A  6ED9               	movwf	fsr2l,c
  4912  00116C  0E02               	movlw	high _mdRxBuf
  4913  00116E  20F4               	addwfc	prodh,w,c
  4914  001170  6EDA               	movwf	fsr2h,c
  4915  001172  50DF               	movf	indf2,w,c
  4916  001174  0FD0               	addlw	208
  4917  001176  6F6B               	movwf	parse_csq_ok@ones_digit& (0+255),b
  4918                           
  4919                           ; BSR set to: 0
  4920                           ;uart.c: 283: if (ones_digit > 0)
  4921  001178  516B               	movf	parse_csq_ok@ones_digit& (0+255),w,b
  4922  00117A  A4D8               	btfss	status,2,c
  4923  00117C  D7EA               	goto	u7960
  4924                           
  4925                           ; BSR set to: 0
  4926                           ;uart.c: 285: else
  4927                           ;uart.c: 286: return 4;
  4928                           
  4929                           ; BSR set to: 0
  4930                           
  4931                           ; BSR set to: 0
  4932                           
  4933                           ; BSR set to: 0
  4934                           
  4935                           ; BSR set to: 0
  4936                           ;uart.c: 284: return 1;
  4937  00117E  0E04               	movlw	4
  4938                           
  4939                           ; BSR set to: 0
  4940  001180  0012               	return	
  4941  001182                     l1565:
  4942                           
  4943                           ; BSR set to: 0
  4944                           ;uart.c: 287: }
  4945                           ;uart.c: 288: }
  4946                           ;uart.c: 289: return 4;
  4947                           
  4948                           ; BSR set to: 0
  4949                           
  4950                           ; BSR set to: 0
  4951                           
  4952                           ; BSR set to: 0
  4953  001182  0E04               	movlw	4
  4954  001184  0012               	return	
  4955  001186                     __end_of_parse_csq_ok:
  4956                           	opt stack 0
  4957                           tblptru	equ	0xFF8
  4958                           tblptrh	equ	0xFF7
  4959                           tblptrl	equ	0xFF6
  4960                           tablat	equ	0xFF5
  4961                           prodh	equ	0xFF4
  4962                           prodl	equ	0xFF3
  4963                           intcon	equ	0xFF2
  4964                           postinc0	equ	0xFEE
  4965                           wreg	equ	0xFE8
  4966                           postdec1	equ	0xFE5
  4967                           plusw1	equ	0xFE3
  4968                           fsr1l	equ	0xFE1
  4969                           indf2	equ	0xFDF
  4970                           postinc2	equ	0xFDE
  4971                           plusw2	equ	0xFDB
  4972                           fsr2h	equ	0xFDA
  4973                           fsr2l	equ	0xFD9
  4974                           status	equ	0xFD8
  4975                           
  4976 ;; *************** function _parse_creg_ok *****************
  4977 ;; Defined at:
  4978 ;;		line 206 in file "uart.c"
  4979 ;; Parameters:    Size  Location     Type
  4980 ;;		None
  4981 ;; Auto vars:     Size  Location     Type
  4982 ;;  i               1   11[BANK0 ] unsigned char 
  4983 ;;  creg_rsp        8    2[BANK0 ] unsigned char [8]
  4984 ;;  registration    1   10[BANK0 ] unsigned char 
  4985 ;; Return value:  Size  Location     Type
  4986 ;;                  1    wreg      unsigned char 
  4987 ;; Registers used:
  4988 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4989 ;; Tracked objects:
  4990 ;;		On entry : 0/0
  4991 ;;		On exit  : 0/0
  4992 ;;		Unchanged: 0/0
  4993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4995 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4996 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4997 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4998 ;;Total ram usage:       12 bytes
  4999 ;; Hardware stack levels used:    1
  5000 ;; Hardware stack levels required when called:    3
  5001 ;; This function calls:
  5002 ;;		Nothing
  5003 ;; This function is called by:
  5004 ;;		_startup_ok
  5005 ;; This function uses a non-reentrant model
  5006 ;;
  5007                           
  5008                           	psect	text19
  5009  001546                     __ptext19:
  5010                           	opt stack 0
  5011  001546                     _parse_creg_ok:
  5012                           	opt stack 22
  5013                           
  5014                           ;uart.c: 208: uint8_t creg_rsp[] = "+CREG: ";
  5015                           
  5016                           ; BSR set to: 0
  5017                           ;incstack = 0
  5018  001546  EE21  F096         	lfsr	2,parse_creg_ok@F6836
  5019  00154A  EE10  F062         	lfsr	1,parse_creg_ok@creg_rsp
  5020  00154E  0E07               	movlw	7
  5021  001550                     u7611:
  5022  001550  CFDB FFE3          	movff	plusw2,plusw1
  5023  001554  06E8               	decf	wreg,f,c
  5024  001556  E2FC               	bc	u7611
  5025                           
  5026                           ;uart.c: 209: uint8_t registration_num;
  5027                           ;uart.c: 210: for (uint8_t i = 0; i < sizeof(mdRxBuf); i++)
  5028  001558  0E00               	movlw	0
  5029  00155A  0100               	movlb	0	; () banked
  5030  00155C  6F6B               	movwf	parse_creg_ok@i& (0+255),b
  5031  00155E                     l6632:
  5032                           
  5033                           ; BSR set to: 0
  5034  00155E  0E9F               	movlw	159
  5035  001560  656B               	cpfsgt	parse_creg_ok@i& (0+255),b
  5036  001562  D001               	goto	l1530
  5037  001564  D076               	goto	u7710
  5038  001566                     l1530:
  5039                           
  5040                           ; BSR set to: 0
  5041                           ;uart.c: 211: {
  5042                           ;uart.c: 212: if (mdRxBuf[i] == creg_rsp[0] && mdRxBuf[(uint8_t)(i + 1)] == creg_rsp[1] 
      +                          && mdRxBuf[(uint8_t)(i + 2)] == creg_rsp[2] && mdRxBuf[(uint8_t)(i + 3)] == creg_rsp[3] 
      +                          && mdRxBuf[(uint8_t)(i + 4)] == creg_rsp[4] && mdRxBuf[(uint8_t)(i + 5)] == creg_rsp[5])
  5043                           
  5044                           ; BSR set to: 0
  5045  001566  516B               	movf	parse_creg_ok@i& (0+255),w,b
  5046  001568  0D01               	mullw	1
  5047  00156A  0E00               	movlw	low _mdRxBuf
  5048  00156C  24F3               	addwf	prodl,w,c
  5049  00156E  6ED9               	movwf	fsr2l,c
  5050  001570  0E02               	movlw	high _mdRxBuf
  5051  001572  20F4               	addwfc	prodh,w,c
  5052  001574  6EDA               	movwf	fsr2h,c
  5053  001576  5162               	movf	parse_creg_ok@creg_rsp& (0+255),w,b
  5054  001578  18DE               	xorwf	postinc2,w,c
  5055  00157A  A4D8               	btfss	status,2,c
  5056  00157C  D068               	goto	l1535
  5057                           
  5058                           ; BSR set to: 0
  5059  00157E  C06B  F060         	movff	parse_creg_ok@i,??_parse_creg_ok
  5060  001582  0E01               	movlw	1
  5061  001584  2760               	addwf	??_parse_creg_ok& (0+255),f,b
  5062  001586  5160               	movf	??_parse_creg_ok& (0+255),w,b
  5063  001588  0D01               	mullw	1
  5064  00158A  0E00               	movlw	low _mdRxBuf
  5065  00158C  24F3               	addwf	prodl,w,c
  5066  00158E  6ED9               	movwf	fsr2l,c
  5067  001590  0E02               	movlw	high _mdRxBuf
  5068  001592  20F4               	addwfc	prodh,w,c
  5069  001594  6EDA               	movwf	fsr2h,c
  5070  001596  5163               	movf	(parse_creg_ok@creg_rsp+1)& (0+255),w,b
  5071  001598  18DE               	xorwf	postinc2,w,c
  5072  00159A  A4D8               	btfss	status,2,c
  5073  00159C  D058               	goto	l1535
  5074                           
  5075                           ; BSR set to: 0
  5076  00159E  C06B  F060         	movff	parse_creg_ok@i,??_parse_creg_ok
  5077  0015A2  0E02               	movlw	2
  5078  0015A4  2760               	addwf	??_parse_creg_ok& (0+255),f,b
  5079  0015A6  5160               	movf	??_parse_creg_ok& (0+255),w,b
  5080  0015A8  0D01               	mullw	1
  5081  0015AA  0E00               	movlw	low _mdRxBuf
  5082  0015AC  24F3               	addwf	prodl,w,c
  5083  0015AE  6ED9               	movwf	fsr2l,c
  5084  0015B0  0E02               	movlw	high _mdRxBuf
  5085  0015B2  20F4               	addwfc	prodh,w,c
  5086  0015B4  6EDA               	movwf	fsr2h,c
  5087  0015B6  5164               	movf	(parse_creg_ok@creg_rsp+2)& (0+255),w,b
  5088  0015B8  18DE               	xorwf	postinc2,w,c
  5089  0015BA  A4D8               	btfss	status,2,c
  5090  0015BC  D048               	goto	l1535
  5091                           
  5092                           ; BSR set to: 0
  5093  0015BE  C06B  F060         	movff	parse_creg_ok@i,??_parse_creg_ok
  5094  0015C2  0E03               	movlw	3
  5095  0015C4  2760               	addwf	??_parse_creg_ok& (0+255),f,b
  5096  0015C6  5160               	movf	??_parse_creg_ok& (0+255),w,b
  5097  0015C8  0D01               	mullw	1
  5098  0015CA  0E00               	movlw	low _mdRxBuf
  5099  0015CC  24F3               	addwf	prodl,w,c
  5100  0015CE  6ED9               	movwf	fsr2l,c
  5101  0015D0  0E02               	movlw	high _mdRxBuf
  5102  0015D2  20F4               	addwfc	prodh,w,c
  5103  0015D4  6EDA               	movwf	fsr2h,c
  5104  0015D6  5165               	movf	(parse_creg_ok@creg_rsp+3)& (0+255),w,b
  5105  0015D8  18DE               	xorwf	postinc2,w,c
  5106  0015DA  A4D8               	btfss	status,2,c
  5107  0015DC  D038               	goto	l1535
  5108                           
  5109                           ; BSR set to: 0
  5110  0015DE  C06B  F060         	movff	parse_creg_ok@i,??_parse_creg_ok
  5111  0015E2  0E04               	movlw	4
  5112  0015E4  2760               	addwf	??_parse_creg_ok& (0+255),f,b
  5113  0015E6  5160               	movf	??_parse_creg_ok& (0+255),w,b
  5114  0015E8  0D01               	mullw	1
  5115  0015EA  0E00               	movlw	low _mdRxBuf
  5116  0015EC  24F3               	addwf	prodl,w,c
  5117  0015EE  6ED9               	movwf	fsr2l,c
  5118  0015F0  0E02               	movlw	high _mdRxBuf
  5119  0015F2  20F4               	addwfc	prodh,w,c
  5120  0015F4  6EDA               	movwf	fsr2h,c
  5121  0015F6  5166               	movf	(parse_creg_ok@creg_rsp+4)& (0+255),w,b
  5122  0015F8  18DE               	xorwf	postinc2,w,c
  5123  0015FA  A4D8               	btfss	status,2,c
  5124  0015FC  D028               	goto	l1535
  5125                           
  5126                           ; BSR set to: 0
  5127  0015FE  C06B  F060         	movff	parse_creg_ok@i,??_parse_creg_ok
  5128  001602  0E05               	movlw	5
  5129  001604  2760               	addwf	??_parse_creg_ok& (0+255),f,b
  5130  001606  5160               	movf	??_parse_creg_ok& (0+255),w,b
  5131  001608  0D01               	mullw	1
  5132  00160A  0E00               	movlw	low _mdRxBuf
  5133  00160C  24F3               	addwf	prodl,w,c
  5134  00160E  6ED9               	movwf	fsr2l,c
  5135  001610  0E02               	movlw	high _mdRxBuf
  5136  001612  20F4               	addwfc	prodh,w,c
  5137  001614  6EDA               	movwf	fsr2h,c
  5138  001616  5167               	movf	(parse_creg_ok@creg_rsp+5)& (0+255),w,b
  5139  001618  18DE               	xorwf	postinc2,w,c
  5140  00161A  A4D8               	btfss	status,2,c
  5141  00161C  D018               	goto	l1535
  5142                           
  5143                           ; BSR set to: 0
  5144                           ;uart.c: 215: {
  5145                           ;uart.c: 216: registration_num = mdRxBuf[(uint8_t)(i + 9)];
  5146  00161E  C06B  F060         	movff	parse_creg_ok@i,??_parse_creg_ok
  5147  001622  0E09               	movlw	9
  5148  001624  2760               	addwf	??_parse_creg_ok& (0+255),f,b
  5149  001626  5160               	movf	??_parse_creg_ok& (0+255),w,b
  5150  001628  0D01               	mullw	1
  5151  00162A  0E00               	movlw	low _mdRxBuf
  5152  00162C  24F3               	addwf	prodl,w,c
  5153  00162E  6ED9               	movwf	fsr2l,c
  5154  001630  0E02               	movlw	high _mdRxBuf
  5155  001632  20F4               	addwfc	prodh,w,c
  5156  001634  6EDA               	movwf	fsr2h,c
  5157  001636  50DF               	movf	indf2,w,c
  5158  001638  6F6A               	movwf	parse_creg_ok@registration_num& (0+255),b
  5159                           
  5160                           ; BSR set to: 0
  5161                           ;uart.c: 217: if (registration_num > '0' && registration_num < '6')
  5162  00163A  0E30               	movlw	48
  5163  00163C  656A               	cpfsgt	parse_creg_ok@registration_num& (0+255),b
  5164  00163E  D005               	goto	l1533
  5165                           
  5166                           ; BSR set to: 0
  5167  001640  0E36               	movlw	54
  5168  001642  616A               	cpfslt	parse_creg_ok@registration_num& (0+255),b
  5169  001644  D002               	goto	l1533
  5170                           
  5171                           ; BSR set to: 0
  5172                           ;uart.c: 218: return 1;
  5173  001646  0E01               	movlw	1
  5174                           
  5175                           ; BSR set to: 0
  5176  001648  0012               	return	
  5177  00164A                     l1533:
  5178                           
  5179                           ; BSR set to: 0
  5180                           ;uart.c: 219: else
  5181                           ;uart.c: 220: return 4;
  5182                           
  5183                           ; BSR set to: 0
  5184  00164A  0E04               	movlw	4
  5185                           
  5186                           ; BSR set to: 0
  5187  00164C  0012               	return	
  5188  00164E                     l1535:
  5189                           
  5190                           ; BSR set to: 0
  5191                           
  5192                           ; BSR set to: 0
  5193                           
  5194                           ; BSR set to: 0
  5195  00164E  2B6B               	incf	parse_creg_ok@i& (0+255),f,b
  5196  001650  D786               	goto	l6632
  5197  001652                     u7710:
  5198                           
  5199                           ; BSR set to: 0
  5200                           ;uart.c: 221: }
  5201                           ;uart.c: 222: }
  5202                           ;uart.c: 223: return 4;
  5203                           
  5204                           ; BSR set to: 0
  5205  001652  0E04               	movlw	4
  5206  001654  0012               	return	
  5207  001656                     __end_of_parse_creg_ok:
  5208                           	opt stack 0
  5209                           tblptru	equ	0xFF8
  5210                           tblptrh	equ	0xFF7
  5211                           tblptrl	equ	0xFF6
  5212                           tablat	equ	0xFF5
  5213                           prodh	equ	0xFF4
  5214                           prodl	equ	0xFF3
  5215                           intcon	equ	0xFF2
  5216                           postinc0	equ	0xFEE
  5217                           wreg	equ	0xFE8
  5218                           postdec1	equ	0xFE5
  5219                           plusw1	equ	0xFE3
  5220                           fsr1l	equ	0xFE1
  5221                           indf2	equ	0xFDF
  5222                           postinc2	equ	0xFDE
  5223                           plusw2	equ	0xFDB
  5224                           fsr2h	equ	0xFDA
  5225                           fsr2l	equ	0xFD9
  5226                           status	equ	0xFD8
  5227                           
  5228 ;; *************** function _parse_cereg_ok *****************
  5229 ;; Defined at:
  5230 ;;		line 226 in file "uart.c"
  5231 ;; Parameters:    Size  Location     Type
  5232 ;;		None
  5233 ;; Auto vars:     Size  Location     Type
  5234 ;;  i               1   12[BANK0 ] unsigned char 
  5235 ;;  cereg_rsp       9    2[BANK0 ] unsigned char [9]
  5236 ;;  registration    1   11[BANK0 ] unsigned char 
  5237 ;; Return value:  Size  Location     Type
  5238 ;;                  1    wreg      unsigned char 
  5239 ;; Registers used:
  5240 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5241 ;; Tracked objects:
  5242 ;;		On entry : 0/0
  5243 ;;		On exit  : 0/0
  5244 ;;		Unchanged: 0/0
  5245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5247 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5248 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5249 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5250 ;;Total ram usage:       13 bytes
  5251 ;; Hardware stack levels used:    1
  5252 ;; Hardware stack levels required when called:    3
  5253 ;; This function calls:
  5254 ;;		Nothing
  5255 ;; This function is called by:
  5256 ;;		_startup_ok
  5257 ;; This function uses a non-reentrant model
  5258 ;;
  5259                           
  5260                           	psect	text20
  5261  001416                     __ptext20:
  5262                           	opt stack 0
  5263  001416                     _parse_cereg_ok:
  5264                           	opt stack 22
  5265                           
  5266                           ;uart.c: 228: uint8_t cereg_rsp[] = "+CEREG: ";
  5267                           
  5268                           ; BSR set to: 0
  5269                           ;incstack = 0
  5270  001416  EE21  F069         	lfsr	2,parse_cereg_ok@F6846
  5271  00141A  EE10  F062         	lfsr	1,parse_cereg_ok@cereg_rsp
  5272  00141E  0E08               	movlw	8
  5273  001420                     u7721:
  5274  001420  CFDB FFE3          	movff	plusw2,plusw1
  5275  001424  06E8               	decf	wreg,f,c
  5276  001426  E2FC               	bc	u7721
  5277                           
  5278                           ;uart.c: 229: uint8_t registration_num;
  5279                           ;uart.c: 230: for (uint8_t i = 0; i < sizeof(mdRxBuf); i++)
  5280  001428  0E00               	movlw	0
  5281  00142A  0100               	movlb	0	; () banked
  5282  00142C  6F6C               	movwf	parse_cereg_ok@i& (0+255),b
  5283  00142E                     l6676:
  5284                           
  5285                           ; BSR set to: 0
  5286  00142E  0E9F               	movlw	159
  5287  001430  656C               	cpfsgt	parse_cereg_ok@i& (0+255),b
  5288  001432  D001               	goto	l1540
  5289  001434  D086               	goto	u7830
  5290  001436                     l1540:
  5291                           
  5292                           ; BSR set to: 0
  5293                           ;uart.c: 231: {
  5294                           ;uart.c: 232: if (mdRxBuf[i] == cereg_rsp[0] && mdRxBuf[(uint8_t)(i + 1)] == cereg_rsp[1
      +                          ] && mdRxBuf[(uint8_t)(i + 2)] == cereg_rsp[2] && mdRxBuf[(uint8_t)(i + 3)] == cereg_rsp
      +                          [3] && mdRxBuf[(uint8_t)(i + 4)] == cereg_rsp[4] && mdRxBuf[(uint8_t)(i + 5)] == cereg_r
  5295                           
  5296                           ; BSR set to: 0
  5297  001436  516C               	movf	parse_cereg_ok@i& (0+255),w,b
  5298  001438  0D01               	mullw	1
  5299  00143A  0E00               	movlw	low _mdRxBuf
  5300  00143C  24F3               	addwf	prodl,w,c
  5301  00143E  6ED9               	movwf	fsr2l,c
  5302  001440  0E02               	movlw	high _mdRxBuf
  5303  001442  20F4               	addwfc	prodh,w,c
  5304  001444  6EDA               	movwf	fsr2h,c
  5305  001446  5162               	movf	parse_cereg_ok@cereg_rsp& (0+255),w,b
  5306  001448  18DE               	xorwf	postinc2,w,c
  5307  00144A  A4D8               	btfss	status,2,c
  5308  00144C  D078               	goto	l1545
  5309                           
  5310                           ; BSR set to: 0
  5311  00144E  C06C  F060         	movff	parse_cereg_ok@i,??_parse_cereg_ok
  5312  001452  0E01               	movlw	1
  5313  001454  2760               	addwf	??_parse_cereg_ok& (0+255),f,b
  5314  001456  5160               	movf	??_parse_cereg_ok& (0+255),w,b
  5315  001458  0D01               	mullw	1
  5316  00145A  0E00               	movlw	low _mdRxBuf
  5317  00145C  24F3               	addwf	prodl,w,c
  5318  00145E  6ED9               	movwf	fsr2l,c
  5319  001460  0E02               	movlw	high _mdRxBuf
  5320  001462  20F4               	addwfc	prodh,w,c
  5321  001464  6EDA               	movwf	fsr2h,c
  5322  001466  5163               	movf	(parse_cereg_ok@cereg_rsp+1)& (0+255),w,b
  5323  001468  18DE               	xorwf	postinc2,w,c
  5324  00146A  A4D8               	btfss	status,2,c
  5325  00146C  D068               	goto	l1545
  5326                           
  5327                           ; BSR set to: 0
  5328  00146E  C06C  F060         	movff	parse_cereg_ok@i,??_parse_cereg_ok
  5329  001472  0E02               	movlw	2
  5330  001474  2760               	addwf	??_parse_cereg_ok& (0+255),f,b
  5331  001476  5160               	movf	??_parse_cereg_ok& (0+255),w,b
  5332  001478  0D01               	mullw	1
  5333  00147A  0E00               	movlw	low _mdRxBuf
  5334  00147C  24F3               	addwf	prodl,w,c
  5335  00147E  6ED9               	movwf	fsr2l,c
  5336  001480  0E02               	movlw	high _mdRxBuf
  5337  001482  20F4               	addwfc	prodh,w,c
  5338  001484  6EDA               	movwf	fsr2h,c
  5339  001486  5164               	movf	(parse_cereg_ok@cereg_rsp+2)& (0+255),w,b
  5340  001488  18DE               	xorwf	postinc2,w,c
  5341  00148A  A4D8               	btfss	status,2,c
  5342  00148C  D058               	goto	l1545
  5343                           
  5344                           ; BSR set to: 0
  5345  00148E  C06C  F060         	movff	parse_cereg_ok@i,??_parse_cereg_ok
  5346  001492  0E03               	movlw	3
  5347  001494  2760               	addwf	??_parse_cereg_ok& (0+255),f,b
  5348  001496  5160               	movf	??_parse_cereg_ok& (0+255),w,b
  5349  001498  0D01               	mullw	1
  5350  00149A  0E00               	movlw	low _mdRxBuf
  5351  00149C  24F3               	addwf	prodl,w,c
  5352  00149E  6ED9               	movwf	fsr2l,c
  5353  0014A0  0E02               	movlw	high _mdRxBuf
  5354  0014A2  20F4               	addwfc	prodh,w,c
  5355  0014A4  6EDA               	movwf	fsr2h,c
  5356  0014A6  5165               	movf	(parse_cereg_ok@cereg_rsp+3)& (0+255),w,b
  5357  0014A8  18DE               	xorwf	postinc2,w,c
  5358  0014AA  A4D8               	btfss	status,2,c
  5359  0014AC  D048               	goto	l1545
  5360                           
  5361                           ; BSR set to: 0
  5362  0014AE  C06C  F060         	movff	parse_cereg_ok@i,??_parse_cereg_ok
  5363  0014B2  0E04               	movlw	4
  5364  0014B4  2760               	addwf	??_parse_cereg_ok& (0+255),f,b
  5365  0014B6  5160               	movf	??_parse_cereg_ok& (0+255),w,b
  5366  0014B8  0D01               	mullw	1
  5367  0014BA  0E00               	movlw	low _mdRxBuf
  5368  0014BC  24F3               	addwf	prodl,w,c
  5369  0014BE  6ED9               	movwf	fsr2l,c
  5370  0014C0  0E02               	movlw	high _mdRxBuf
  5371  0014C2  20F4               	addwfc	prodh,w,c
  5372  0014C4  6EDA               	movwf	fsr2h,c
  5373  0014C6  5166               	movf	(parse_cereg_ok@cereg_rsp+4)& (0+255),w,b
  5374  0014C8  18DE               	xorwf	postinc2,w,c
  5375  0014CA  A4D8               	btfss	status,2,c
  5376  0014CC  D038               	goto	l1545
  5377                           
  5378                           ; BSR set to: 0
  5379  0014CE  C06C  F060         	movff	parse_cereg_ok@i,??_parse_cereg_ok
  5380  0014D2  0E05               	movlw	5
  5381  0014D4  2760               	addwf	??_parse_cereg_ok& (0+255),f,b
  5382  0014D6  5160               	movf	??_parse_cereg_ok& (0+255),w,b
  5383  0014D8  0D01               	mullw	1
  5384  0014DA  0E00               	movlw	low _mdRxBuf
  5385  0014DC  24F3               	addwf	prodl,w,c
  5386  0014DE  6ED9               	movwf	fsr2l,c
  5387  0014E0  0E02               	movlw	high _mdRxBuf
  5388  0014E2  20F4               	addwfc	prodh,w,c
  5389  0014E4  6EDA               	movwf	fsr2h,c
  5390  0014E6  5167               	movf	(parse_cereg_ok@cereg_rsp+5)& (0+255),w,b
  5391  0014E8  18DE               	xorwf	postinc2,w,c
  5392  0014EA  A4D8               	btfss	status,2,c
  5393  0014EC  D028               	goto	l1545
  5394                           
  5395                           ; BSR set to: 0
  5396  0014EE  C06C  F060         	movff	parse_cereg_ok@i,??_parse_cereg_ok
  5397  0014F2  0E06               	movlw	6
  5398  0014F4  2760               	addwf	??_parse_cereg_ok& (0+255),f,b
  5399  0014F6  5160               	movf	??_parse_cereg_ok& (0+255),w,b
  5400  0014F8  0D01               	mullw	1
  5401  0014FA  0E00               	movlw	low _mdRxBuf
  5402  0014FC  24F3               	addwf	prodl,w,c
  5403  0014FE  6ED9               	movwf	fsr2l,c
  5404  001500  0E02               	movlw	high _mdRxBuf
  5405  001502  20F4               	addwfc	prodh,w,c
  5406  001504  6EDA               	movwf	fsr2h,c
  5407  001506  5168               	movf	(parse_cereg_ok@cereg_rsp+6)& (0+255),w,b
  5408  001508  18DE               	xorwf	postinc2,w,c
  5409  00150A  A4D8               	btfss	status,2,c
  5410  00150C  D018               	goto	l1545
  5411                           
  5412                           ; BSR set to: 0
  5413                           ;uart.c: 236: {
  5414                           ;uart.c: 237: registration_num = mdRxBuf[(uint8_t)(i + 10)];
  5415  00150E  C06C  F060         	movff	parse_cereg_ok@i,??_parse_cereg_ok
  5416  001512  0E0A               	movlw	10
  5417  001514  2760               	addwf	??_parse_cereg_ok& (0+255),f,b
  5418  001516  5160               	movf	??_parse_cereg_ok& (0+255),w,b
  5419  001518  0D01               	mullw	1
  5420  00151A  0E00               	movlw	low _mdRxBuf
  5421  00151C  24F3               	addwf	prodl,w,c
  5422  00151E  6ED9               	movwf	fsr2l,c
  5423  001520  0E02               	movlw	high _mdRxBuf
  5424  001522  20F4               	addwfc	prodh,w,c
  5425  001524  6EDA               	movwf	fsr2h,c
  5426  001526  50DF               	movf	indf2,w,c
  5427  001528  6F6B               	movwf	parse_cereg_ok@registration_num& (0+255),b
  5428                           
  5429                           ; BSR set to: 0
  5430                           ;uart.c: 238: if (registration_num > '0' && registration_num < '9')
  5431  00152A  0E30               	movlw	48
  5432  00152C  656B               	cpfsgt	parse_cereg_ok@registration_num& (0+255),b
  5433  00152E  D005               	goto	l1543
  5434                           
  5435                           ; BSR set to: 0
  5436  001530  0E39               	movlw	57
  5437  001532  616B               	cpfslt	parse_cereg_ok@registration_num& (0+255),b
  5438  001534  D002               	goto	l1543
  5439                           
  5440                           ; BSR set to: 0
  5441                           ;uart.c: 239: return 1;
  5442  001536  0E01               	movlw	1
  5443                           
  5444                           ; BSR set to: 0
  5445  001538  0012               	return	
  5446  00153A                     l1543:
  5447                           
  5448                           ; BSR set to: 0
  5449                           ;uart.c: 240: else
  5450                           ;uart.c: 241: return 4;
  5451                           
  5452                           ; BSR set to: 0
  5453  00153A  0E04               	movlw	4
  5454                           
  5455                           ; BSR set to: 0
  5456  00153C  0012               	return	
  5457  00153E                     l1545:
  5458                           
  5459                           ; BSR set to: 0
  5460                           
  5461                           ; BSR set to: 0
  5462                           
  5463                           ; BSR set to: 0
  5464  00153E  2B6C               	incf	parse_cereg_ok@i& (0+255),f,b
  5465  001540  D776               	goto	l6676
  5466  001542                     u7830:
  5467                           
  5468                           ; BSR set to: 0
  5469                           ;uart.c: 242: }
  5470                           ;uart.c: 243: }
  5471                           ;uart.c: 244: return 4;
  5472                           
  5473                           ; BSR set to: 0
  5474  001542  0E04               	movlw	4
  5475  001544  0012               	return	
  5476  001546                     __end_of_parse_cereg_ok:
  5477                           	opt stack 0
  5478                           tblptru	equ	0xFF8
  5479                           tblptrh	equ	0xFF7
  5480                           tblptrl	equ	0xFF6
  5481                           tablat	equ	0xFF5
  5482                           prodh	equ	0xFF4
  5483                           prodl	equ	0xFF3
  5484                           intcon	equ	0xFF2
  5485                           postinc0	equ	0xFEE
  5486                           wreg	equ	0xFE8
  5487                           postdec1	equ	0xFE5
  5488                           plusw1	equ	0xFE3
  5489                           fsr1l	equ	0xFE1
  5490                           indf2	equ	0xFDF
  5491                           postinc2	equ	0xFDE
  5492                           plusw2	equ	0xFDB
  5493                           fsr2h	equ	0xFDA
  5494                           fsr2l	equ	0xFD9
  5495                           status	equ	0xFD8
  5496                           
  5497 ;; *************** function _send_sms_ok *****************
  5498 ;; Defined at:
  5499 ;;		line 312 in file "sms.c"
  5500 ;; Parameters:    Size  Location     Type
  5501 ;;  isValidCmd      1    wreg     unsigned char 
  5502 ;; Auto vars:     Size  Location     Type
  5503 ;;  isValidCmd      1   21[BANK0 ] unsigned char 
  5504 ;;  cmgs            9    9[BANK0 ] unsigned char [9]
  5505 ;;  msgIndex        3   18[BANK0 ] unsigned char [3]
  5506 ;;  i               1   24[BANK0 ] unsigned char 
  5507 ;;  poundCount      1   23[BANK0 ] unsigned char 
  5508 ;;  smsEndIndex     1   22[BANK0 ] unsigned char 
  5509 ;; Return value:  Size  Location     Type
  5510 ;;                  1    wreg      unsigned char 
  5511 ;; Registers used:
  5512 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5513 ;; Tracked objects:
  5514 ;;		On entry : 0/0
  5515 ;;		On exit  : 0/0
  5516 ;;		Unchanged: 0/0
  5517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5519 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5520 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5521 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5522 ;;Total ram usage:       17 bytes
  5523 ;; Hardware stack levels used:    1
  5524 ;; Hardware stack levels required when called:    5
  5525 ;; This function calls:
  5526 ;;		_clear_at_ok
  5527 ;;		_init_md_uart
  5528 ;;		_md_uart_write_str_ok
  5529 ;; This function is called by:
  5530 ;;		_listen_sms
  5531 ;; This function uses a non-reentrant model
  5532 ;;
  5533                           
  5534                           	psect	text21
  5535  001186                     __ptext21:
  5536                           	opt stack 0
  5537  001186                     _send_sms_ok:
  5538                           	opt stack 23
  5539                           
  5540                           ; BSR set to: 0
  5541                           ;incstack = 0
  5542                           ;send_sms_ok@isValidCmd stored from wreg
  5543  001186  0100               	movlb	0	; () banked
  5544  001188  6F75               	movwf	send_sms_ok@isValidCmd& (0+255),b
  5545                           
  5546                           ;sms.c: 314: uint8_t cmgs[] = "AT+CMGS=";
  5547  00118A  EE21  F07B         	lfsr	2,send_sms_ok@F6905
  5548  00118E  EE10  F069         	lfsr	1,send_sms_ok@cmgs
  5549  001192  0E08               	movlw	8
  5550  001194                     u9921:
  5551  001194  CFDB FFE3          	movff	plusw2,plusw1
  5552  001198  06E8               	decf	wreg,f,c
  5553  00119A  E2FC               	bc	u9921
  5554                           
  5555                           ;sms.c: 315: uint8_t msgIndex[] = "\r\n";
  5556  00119C  C1BE  F072         	movff	send_sms_ok@F6907,send_sms_ok@msgIndex
  5557  0011A0  C1BF  F073         	movff	send_sms_ok@F6907+1,send_sms_ok@msgIndex+1
  5558  0011A4  C1C0  F074         	movff	send_sms_ok@F6907+2,send_sms_ok@msgIndex+2
  5559                           
  5560                           ;sms.c: 316: uint8_t poundCount = 0, i = 0, smsEndIndex;
  5561  0011A8  0E00               	movlw	0
  5562  0011AA  0100               	movlb	0	; () banked
  5563  0011AC  6F77               	movwf	send_sms_ok@poundCount& (0+255),b
  5564                           
  5565                           ; BSR set to: 0
  5566  0011AE  0E00               	movlw	0
  5567  0011B0  6F78               	movwf	send_sms_ok@i& (0+255),b
  5568                           
  5569                           ; BSR set to: 0
  5570                           ;sms.c: 318: init_md_uart();
  5571  0011B2  ECB5  F011         	call	_init_md_uart	;wreg free
  5572                           
  5573                           ;sms.c: 320: if (at1 != 1)
  5574  0011B6  0100               	movlb	0	; () banked
  5575  0011B8  05C0               	decf	_at1& (0+255),w,b
  5576  0011BA  B4D8               	btfsc	status,2,c
  5577  0011BC  D08C               	goto	l892
  5578                           
  5579                           ; BSR set to: 0
  5580                           ;sms.c: 321: {
  5581                           ;sms.c: 322: at1 = md_uart_write_str_ok((uint8_t *)&cmgs[0], sizeof(cmgs), 0, 0);
  5582  0011BE  0E69               	movlw	low send_sms_ok@cmgs
  5583  0011C0  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  5584  0011C2  0E00               	movlw	high send_sms_ok@cmgs
  5585  0011C4  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  5586  0011C6  0E09               	movlw	9
  5587  0011C8  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  5588  0011CA  0E00               	movlw	0
  5589  0011CC  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  5590  0011CE  0E00               	movlw	0
  5591  0011D0  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  5592  0011D2  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  5593  0011D6  0100               	movlb	0	; () banked
  5594  0011D8  6FC0               	movwf	_at1& (0+255),b
  5595                           
  5596                           ;sms.c: 323: at1 = md_uart_write_str_ok((uint8_t *)&ph_num[0], sizeof(ph_num), 0, 0);
  5597  0011DA  0EE9               	movlw	low _ph_num
  5598  0011DC  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  5599  0011DE  0E01               	movlw	high _ph_num
  5600  0011E0  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  5601  0011E2  0E09               	movlw	9
  5602  0011E4  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  5603  0011E6  0E00               	movlw	0
  5604  0011E8  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  5605  0011EA  0E00               	movlw	0
  5606  0011EC  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  5607  0011EE  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  5608  0011F2  0100               	movlb	0	; () banked
  5609  0011F4  6FC0               	movwf	_at1& (0+255),b
  5610                           
  5611                           ; BSR set to: 0
  5612                           ;sms.c: 324: at1 = 0;
  5613  0011F6  0E00               	movlw	0
  5614  0011F8  6FC0               	movwf	_at1& (0+255),b
  5615                           
  5616                           ; BSR set to: 0
  5617                           ;sms.c: 325: at1 = md_uart_write_str_ok((uint8_t *)&msgIndex[0], sizeof(msgIndex), 0, 1)
      +                          ;
  5618  0011FA  0E72               	movlw	low send_sms_ok@msgIndex
  5619  0011FC  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  5620  0011FE  0E00               	movlw	high send_sms_ok@msgIndex
  5621  001200  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  5622  001202  0E03               	movlw	3
  5623  001204  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  5624  001206  0E00               	movlw	0
  5625  001208  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  5626  00120A  0E01               	movlw	1
  5627  00120C  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  5628  00120E  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  5629  001212  0100               	movlb	0	; () banked
  5630  001214  6FC0               	movwf	_at1& (0+255),b
  5631  001216                     
  5632                           ; BSR set to: 0
  5633                           
  5634                           ; BSR set to: 0
  5635                           
  5636                           ; BSR set to: 0
  5637  001216  05C0               	decf	_at1& (0+255),w,b
  5638  001218  B4D8               	btfsc	status,2,c
  5639  00121A  D003               	goto	u9950
  5640                           
  5641                           ; BSR set to: 0
  5642  00121C  5007               	movf	_timedOut,w,c
  5643  00121E  B4D8               	btfsc	status,2,c
  5644  001220  D7FA               	goto	l873
  5645  001222                     u9950:
  5646                           
  5647                           ; BSR set to: 0
  5648                           ;sms.c: 327: if (at1 == 1 && isValidCmd)
  5649                           
  5650                           ; BSR set to: 0
  5651                           
  5652                           ; BSR set to: 0
  5653  001222  05C0               	decf	_at1& (0+255),w,b
  5654  001224  A4D8               	btfss	status,2,c
  5655  001226  D043               	goto	u10030
  5656                           
  5657                           ; BSR set to: 0
  5658  001228  5175               	movf	send_sms_ok@isValidCmd& (0+255),w,b
  5659  00122A  B4D8               	btfsc	status,2,c
  5660  00122C  D040               	goto	u10030
  5661                           
  5662                           ; BSR set to: 0
  5663                           ;sms.c: 328: {
  5664                           ;sms.c: 329: for (i = 0; i < sizeof(sms_buf); i++)
  5665  00122E  0E00               	movlw	0
  5666  001230  6F78               	movwf	send_sms_ok@i& (0+255),b
  5667  001232                     l7718:
  5668                           
  5669                           ; BSR set to: 0
  5670  001232  0E27               	movlw	39
  5671  001234  6578               	cpfsgt	send_sms_ok@i& (0+255),b
  5672  001236  D001               	goto	l878
  5673  001238  D015               	goto	u10010
  5674  00123A                     l878:
  5675                           
  5676                           ; BSR set to: 0
  5677                           ;sms.c: 330: {
  5678                           ;sms.c: 331: if (sms_buf[i] == '#')
  5679                           
  5680                           ; BSR set to: 0
  5681  00123A  5178               	movf	send_sms_ok@i& (0+255),w,b
  5682  00123C  0D01               	mullw	1
  5683  00123E  0EA0               	movlw	low _sms_buf
  5684  001240  24F3               	addwf	prodl,w,c
  5685  001242  6ED9               	movwf	fsr2l,c
  5686  001244  0E02               	movlw	high _sms_buf
  5687  001246  20F4               	addwfc	prodh,w,c
  5688  001248  6EDA               	movwf	fsr2h,c
  5689  00124A  0E23               	movlw	35
  5690  00124C  18DE               	xorwf	postinc2,w,c
  5691  00124E  B4D8               	btfsc	status,2,c
  5692                           
  5693                           ; BSR set to: 0
  5694                           ;sms.c: 332: poundCount ++;
  5695  001250  2B77               	incf	send_sms_ok@poundCount& (0+255),f,b
  5696                           
  5697                           ; BSR set to: 0
  5698                           ;sms.c: 333: if (poundCount == 2)
  5699                           
  5700                           ; BSR set to: 0
  5701  001252  0E02               	movlw	2
  5702  001254  1977               	xorwf	send_sms_ok@poundCount& (0+255),w,b
  5703  001256  A4D8               	btfss	status,2,c
  5704  001258  D003               	goto	l881
  5705                           
  5706                           ; BSR set to: 0
  5707                           ;sms.c: 334: {
  5708                           ;sms.c: 335: smsEndIndex = (uint8_t)(i + 1);
  5709  00125A  2978               	incf	send_sms_ok@i& (0+255),w,b
  5710  00125C  6F76               	movwf	send_sms_ok@smsEndIndex& (0+255),b
  5711                           
  5712                           ; BSR set to: 0
  5713                           ;sms.c: 336: poundCount++;
  5714  00125E  2B77               	incf	send_sms_ok@poundCount& (0+255),f,b
  5715  001260                     l881:
  5716                           
  5717                           ; BSR set to: 0
  5718                           
  5719                           ; BSR set to: 0
  5720  001260  2B78               	incf	send_sms_ok@i& (0+255),f,b
  5721  001262  D7E7               	goto	l7718
  5722  001264                     u10010:
  5723                           
  5724                           ; BSR set to: 0
  5725                           ;sms.c: 337: }
  5726                           ;sms.c: 338: }
  5727                           ;sms.c: 340: at2 = md_uart_write_str_ok((uint8_t *)&sms_buf[0], smsEndIndex, 0, 0);
  5728                           
  5729                           ; BSR set to: 0
  5730  001264  0EA0               	movlw	low _sms_buf
  5731  001266  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  5732  001268  0E02               	movlw	high _sms_buf
  5733  00126A  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  5734  00126C  C076  F063         	movff	send_sms_ok@smsEndIndex,md_uart_write_str_ok@len1
  5735  001270  0E00               	movlw	0
  5736  001272  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  5737  001274  0E00               	movlw	0
  5738  001276  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  5739  001278  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  5740  00127C  0100               	movlb	0	; () banked
  5741  00127E  6FBF               	movwf	_at2& (0+255),b
  5742                           
  5743                           ;sms.c: 341: at2 = md_uart_write_str_ok((uint8_t *)(0x1A), 1, 1, 0);
  5744  001280  0E1A               	movlw	26
  5745  001282  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  5746  001284  0E00               	movlw	0
  5747  001286  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  5748  001288  0E01               	movlw	1
  5749  00128A  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  5750  00128C  0E01               	movlw	1
  5751  00128E  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  5752  001290  0E00               	movlw	0
  5753  001292  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  5754  001294  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  5755  001298  0100               	movlb	0	; () banked
  5756  00129A  6FBF               	movwf	_at2& (0+255),b
  5757                           
  5758                           ;sms.c: 342: while (at2 != 1 && !timedOut)
  5759  00129C  D001               	goto	l882
  5760  00129E                     l883:
  5761                           
  5762                           ; BSR set to: 0
  5763  00129E  0004               	clrwdt		;# 
  5764  0012A0                     l882:
  5765  0012A0  0100               	movlb	0	; () banked
  5766  0012A2  05BF               	decf	_at2& (0+255),w,b
  5767  0012A4  B4D8               	btfsc	status,2,c
  5768  0012A6  D003               	goto	u10030
  5769                           
  5770                           ; BSR set to: 0
  5771  0012A8  5007               	movf	_timedOut,w,c
  5772  0012AA  B4D8               	btfsc	status,2,c
  5773  0012AC  D7F8               	goto	l883
  5774  0012AE                     u10030:
  5775                           
  5776                           ; BSR set to: 0
  5777                           ;sms.c: 344: }
  5778                           ;sms.c: 345: if (at1 == 1)
  5779                           
  5780                           ; BSR set to: 0
  5781                           
  5782                           ; BSR set to: 0
  5783                           
  5784                           ; BSR set to: 0
  5785  0012AE  05C0               	decf	_at1& (0+255),w,b
  5786  0012B0  A4D8               	btfss	status,2,c
  5787  0012B2  D004               	goto	l887
  5788                           
  5789                           ; BSR set to: 0
  5790                           ;sms.c: 346: {
  5791                           ;sms.c: 347: clear_at_ok();
  5792  0012B4  EC1E  F011         	call	_clear_at_ok	;wreg free
  5793                           
  5794                           ;sms.c: 348: return 1;
  5795  0012B8  0E01               	movlw	1
  5796  0012BA  0012               	return	
  5797  0012BC                     l887:
  5798                           
  5799                           ;sms.c: 350: else if (at1 == 4)
  5800  0012BC  0E04               	movlw	4
  5801  0012BE  0100               	movlb	0	; () banked
  5802  0012C0  19C0               	xorwf	_at1& (0+255),w,b
  5803  0012C2  A4D8               	btfss	status,2,c
  5804  0012C4  D002               	goto	l890
  5805                           
  5806                           ; BSR set to: 0
  5807                           ;sms.c: 351: return 4;
  5808  0012C6  0E04               	movlw	4
  5809                           
  5810                           ; BSR set to: 0
  5811  0012C8  0012               	return	
  5812  0012CA                     l890:
  5813                           
  5814                           ; BSR set to: 0
  5815                           ;sms.c: 352: else if (at1 == 5)
  5816                           
  5817                           ; BSR set to: 0
  5818  0012CA  0E05               	movlw	5
  5819  0012CC  19C0               	xorwf	_at1& (0+255),w,b
  5820  0012CE  A4D8               	btfss	status,2,c
  5821  0012D0  D002               	goto	l892
  5822                           
  5823                           ; BSR set to: 0
  5824                           ;sms.c: 353: return 5;
  5825  0012D2  0E05               	movlw	5
  5826                           
  5827                           ; BSR set to: 0
  5828  0012D4  0012               	return	
  5829  0012D6                     l892:
  5830                           
  5831                           ;sms.c: 354: }
  5832                           ;sms.c: 355: return 2;
  5833                           
  5834                           ; BSR set to: 0
  5835                           
  5836                           ; BSR set to: 0
  5837                           
  5838                           ; BSR set to: 0
  5839                           
  5840                           ; BSR set to: 0
  5841  0012D6  0E02               	movlw	2
  5842  0012D8  0012               	return	
  5843  0012DA                     __end_of_send_sms_ok:
  5844                           	opt stack 0
  5845                           tblptru	equ	0xFF8
  5846                           tblptrh	equ	0xFF7
  5847                           tblptrl	equ	0xFF6
  5848                           tablat	equ	0xFF5
  5849                           prodh	equ	0xFF4
  5850                           prodl	equ	0xFF3
  5851                           intcon	equ	0xFF2
  5852                           postinc0	equ	0xFEE
  5853                           wreg	equ	0xFE8
  5854                           postdec1	equ	0xFE5
  5855                           plusw1	equ	0xFE3
  5856                           fsr1l	equ	0xFE1
  5857                           indf2	equ	0xFDF
  5858                           postinc2	equ	0xFDE
  5859                           plusw2	equ	0xFDB
  5860                           fsr2h	equ	0xFDA
  5861                           fsr2l	equ	0xFD9
  5862                           status	equ	0xFD8
  5863                           
  5864 ;; *************** function _read_sms *****************
  5865 ;; Defined at:
  5866 ;;		line 150 in file "sms.c"
  5867 ;; Parameters:    Size  Location     Type
  5868 ;;		None
  5869 ;; Auto vars:     Size  Location     Type
  5870 ;;  cmgl           16   43[BANK0 ] unsigned char [16]
  5871 ;;  cmgd            9   68[BANK0 ] unsigned char [9]
  5872 ;;  cmgr            9   59[BANK0 ] unsigned char [9]
  5873 ;;  msgIndex        3   77[BANK0 ] unsigned char [3]
  5874 ;; Return value:  Size  Location     Type
  5875 ;;                  1    wreg      unsigned char 
  5876 ;; Registers used:
  5877 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5878 ;; Tracked objects:
  5879 ;;		On entry : 0/0
  5880 ;;		On exit  : 0/0
  5881 ;;		Unchanged: 0/0
  5882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5884 ;;      Locals:         0      37       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5885 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5886 ;;      Totals:         0      39       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5887 ;;Total ram usage:       39 bytes
  5888 ;; Hardware stack levels used:    1
  5889 ;; Hardware stack levels required when called:    6
  5890 ;; This function calls:
  5891 ;;		_clear_at_ok
  5892 ;;		_init_md_uart
  5893 ;;		_md_uart_write_str_ok
  5894 ;;		_parse_cmgl
  5895 ;;		_parse_cmgr
  5896 ;; This function is called by:
  5897 ;;		_listen_sms
  5898 ;; This function uses a non-reentrant model
  5899 ;;
  5900                           
  5901                           	psect	text22
  5902  000CBC                     __ptext22:
  5903                           	opt stack 0
  5904  000CBC                     _read_sms:
  5905                           	opt stack 22
  5906                           
  5907                           ;sms.c: 152: uint8_t cmgl[] = "AT+CMGL=\"ALL\"\r\n";
  5908                           
  5909                           ;incstack = 0
  5910  000CBC  EE22  F0E8         	lfsr	2,read_sms@F6841
  5911  000CC0  EE10  F08B         	lfsr	1,read_sms@cmgl
  5912  000CC4  0E0F               	movlw	15
  5913  000CC6                     u9801:
  5914  000CC6  CFDB FFE3          	movff	plusw2,plusw1
  5915  000CCA  06E8               	decf	wreg,f,c
  5916  000CCC  E2FC               	bc	u9801
  5917                           
  5918                           ;sms.c: 153: uint8_t cmgr[] = "AT+CMGR=";
  5919  000CCE  EE21  F08D         	lfsr	2,read_sms@F6843
  5920  000CD2  EE10  F09B         	lfsr	1,read_sms@cmgr
  5921  000CD6  0E08               	movlw	8
  5922  000CD8                     u9811:
  5923  000CD8  CFDB FFE3          	movff	plusw2,plusw1
  5924  000CDC  06E8               	decf	wreg,f,c
  5925  000CDE  E2FC               	bc	u9811
  5926                           
  5927                           ;sms.c: 154: uint8_t msgIndex[] = "\r\n";
  5928  000CE0  C040  F0AD         	movff	read_sms@F6845,read_sms@msgIndex
  5929  000CE4  C041  F0AE         	movff	read_sms@F6845+1,read_sms@msgIndex+1
  5930  000CE8  C042  F0AF         	movff	read_sms@F6845+2,read_sms@msgIndex+2
  5931                           
  5932                           ;sms.c: 155: uint8_t cmgd[] = "AT+CMGD=";
  5933  000CEC  EE21  F084         	lfsr	2,read_sms@F6847
  5934  000CF0  EE10  F0A4         	lfsr	1,read_sms@cmgd
  5935  000CF4  0E08               	movlw	8
  5936  000CF6                     u9821:
  5937  000CF6  CFDB FFE3          	movff	plusw2,plusw1
  5938  000CFA  06E8               	decf	wreg,f,c
  5939  000CFC  E2FC               	bc	u9821
  5940                           
  5941                           ;sms.c: 157: init_md_uart();
  5942  000CFE  ECB5  F011         	call	_init_md_uart	;wreg free
  5943                           
  5944                           ;sms.c: 160: numUartRetries = 15;
  5945  000D02  0E0F               	movlw	15
  5946  000D04  6E44               	movwf	_numUartRetries,c
  5947                           
  5948                           ;sms.c: 161: at1 = md_uart_write_str_ok((uint8_t *)&cmgl[0], sizeof(cmgl), 1, 0);
  5949  000D06  0E8B               	movlw	low read_sms@cmgl
  5950  000D08  0100               	movlb	0	; () banked
  5951  000D0A  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  5952  000D0C  0E00               	movlw	high read_sms@cmgl
  5953  000D0E  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  5954  000D10  0E10               	movlw	16
  5955  000D12  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  5956  000D14  0E01               	movlw	1
  5957  000D16  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  5958  000D18  0E00               	movlw	0
  5959  000D1A  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  5960  000D1C  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  5961  000D20  0100               	movlb	0	; () banked
  5962  000D22  6FC0               	movwf	_at1& (0+255),b
  5963                           
  5964                           ; BSR set to: 0
  5965                           ;sms.c: 162: if (at1 == 1)
  5966  000D24  05C0               	decf	_at1& (0+255),w,b
  5967  000D26  A4D8               	btfss	status,2,c
  5968  000D28  D009               	goto	l811
  5969                           
  5970                           ; BSR set to: 0
  5971                           ;sms.c: 163: {
  5972                           ;sms.c: 164: if (parse_cmgl() == 1)
  5973  000D2A  EC44  F00D         	call	_parse_cmgl	;wreg free
  5974  000D2E  06E8               	decf	wreg,f,c
  5975  000D30  A4D8               	btfss	status,2,c
  5976  000D32  D00B               	goto	l814
  5977                           
  5978                           ;sms.c: 165: {
  5979                           ;sms.c: 166: ready_to_read_text = 1;
  5980  000D34  0E01               	movlw	1
  5981  000D36  0100               	movlb	0	; () banked
  5982  000D38  6FC4               	movwf	_ready_to_read_text& (0+255),b
  5983                           
  5984                           ; BSR set to: 0
  5985                           ;sms.c: 167: }
  5986                           ;sms.c: 168: }
  5987  000D3A  D007               	goto	l814
  5988  000D3C                     l811:
  5989                           
  5990                           ; BSR set to: 0
  5991                           ;sms.c: 169: else if (at1 == 5)
  5992                           
  5993                           ; BSR set to: 0
  5994  000D3C  0E05               	movlw	5
  5995  000D3E  19C0               	xorwf	_at1& (0+255),w,b
  5996  000D40  A4D8               	btfss	status,2,c
  5997  000D42  D003               	goto	l814
  5998                           
  5999                           ; BSR set to: 0
  6000                           ;sms.c: 170: {
  6001                           ;sms.c: 171: clear_at_ok();
  6002  000D44  EC1E  F011         	call	_clear_at_ok	;wreg free
  6003                           
  6004                           ;sms.c: 172: return 5;
  6005                           ;	Return value of _read_sms is never used
  6006  000D48  0012               	return	
  6007  000D4A                     l814:
  6008                           
  6009                           ;sms.c: 173: }
  6010                           ;sms.c: 174: if (ready_to_read_text)
  6011  000D4A  0100               	movlb	0	; () banked
  6012  000D4C  51C4               	movf	_ready_to_read_text& (0+255),w,b
  6013  000D4E  B4D8               	btfsc	status,2,c
  6014  000D50  0012               	return	
  6015                           
  6016                           ; BSR set to: 0
  6017                           ;sms.c: 175: {
  6018                           ;sms.c: 176: at2 = md_uart_write_str_ok((uint8_t *)&cmgr[0], sizeof(cmgr), 0, 0);
  6019  000D52  0E9B               	movlw	low read_sms@cmgr
  6020  000D54  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  6021  000D56  0E00               	movlw	high read_sms@cmgr
  6022  000D58  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  6023  000D5A  0E09               	movlw	9
  6024  000D5C  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  6025  000D5E  0E00               	movlw	0
  6026  000D60  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  6027  000D62  0E00               	movlw	0
  6028  000D64  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  6029  000D66  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  6030  000D6A  0100               	movlb	0	; () banked
  6031  000D6C  6FBF               	movwf	_at2& (0+255),b
  6032                           
  6033                           ;sms.c: 177: at2 = md_uart_write_str_ok((uint8_t *)smsMsgIndex, 1, 0, 0);
  6034  000D6E  51C3               	movf	_smsMsgIndex& (0+255),w,b
  6035  000D70  6F89               	movwf	??_read_sms& (0+255),b
  6036  000D72  6B8A               	clrf	(??_read_sms+1)& (0+255),b
  6037  000D74  C089  F061         	movff	??_read_sms,md_uart_write_str_ok@data
  6038  000D78  C08A  F062         	movff	??_read_sms+1,md_uart_write_str_ok@data+1
  6039  000D7C  0E01               	movlw	1
  6040  000D7E  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  6041  000D80  0E00               	movlw	0
  6042  000D82  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  6043  000D84  0E00               	movlw	0
  6044  000D86  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  6045  000D88  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  6046  000D8C  0100               	movlb	0	; () banked
  6047  000D8E  6FBF               	movwf	_at2& (0+255),b
  6048                           
  6049                           ;sms.c: 178: at2 = md_uart_write_str_ok((uint8_t *)&msgIndex[0], sizeof(msgIndex), 1, 0)
      +                          ;
  6050  000D90  0EAD               	movlw	low read_sms@msgIndex
  6051  000D92  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  6052  000D94  0E00               	movlw	high read_sms@msgIndex
  6053  000D96  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  6054  000D98  0E03               	movlw	3
  6055  000D9A  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  6056  000D9C  0E01               	movlw	1
  6057  000D9E  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  6058  000DA0  0E00               	movlw	0
  6059  000DA2  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  6060  000DA4  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  6061  000DA8  0100               	movlb	0	; () banked
  6062  000DAA  6FBF               	movwf	_at2& (0+255),b
  6063                           
  6064                           ; BSR set to: 0
  6065                           ;sms.c: 180: if (at2 == 1)
  6066  000DAC  05BF               	decf	_at2& (0+255),w,b
  6067  000DAE  A4D8               	btfss	status,2,c
  6068  000DB0  D04E               	goto	l822
  6069                           
  6070                           ; BSR set to: 0
  6071                           ;sms.c: 181: {
  6072                           ;sms.c: 182: if (parse_cmgr() == 1)
  6073  000DB2  ECA0  F003         	call	_parse_cmgr	;wreg free
  6074  000DB6  06E8               	decf	wreg,f,c
  6075  000DB8  A4D8               	btfss	status,2,c
  6076  000DBA  D009               	goto	l818
  6077                           
  6078                           ;sms.c: 183: {
  6079                           ;sms.c: 184: sms_echo_ready = 1;
  6080  000DBC  0E01               	movlw	1
  6081  000DBE  0100               	movlb	0	; () banked
  6082  000DC0  6FC6               	movwf	_sms_echo_ready& (0+255),b
  6083                           
  6084                           ; BSR set to: 0
  6085                           ;sms.c: 185: clear_at_ok();
  6086  000DC2  EC1E  F011         	call	_clear_at_ok	;wreg free
  6087  000DC6                     l7652:
  6088                           
  6089                           ;sms.c: 186: ready_to_read_text = 0;
  6090  000DC6  0E00               	movlw	0
  6091  000DC8  0100               	movlb	0	; () banked
  6092  000DCA  6FC4               	movwf	_ready_to_read_text& (0+255),b
  6093                           
  6094                           ; BSR set to: 0
  6095                           ;sms.c: 187: return 1;
  6096                           ;	Return value of _read_sms is never used
  6097  000DCC  0012               	return	
  6098  000DCE                     l818:
  6099                           
  6100                           ;sms.c: 189: else
  6101                           ;sms.c: 190: {
  6102                           ;sms.c: 191: sms_err_ready = 1;
  6103                           
  6104                           ; BSR set to: 0
  6105  000DCE  0E01               	movlw	1
  6106  000DD0  0100               	movlb	0	; () banked
  6107  000DD2  6FC5               	movwf	_sms_err_ready& (0+255),b
  6108                           
  6109                           ; BSR set to: 0
  6110                           ;sms.c: 192: at3 = md_uart_write_str_ok((uint8_t *)&cmgd[0], sizeof(cmgd), 0, 0);
  6111  000DD4  0EA4               	movlw	low read_sms@cmgd
  6112  000DD6  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  6113  000DD8  0E00               	movlw	high read_sms@cmgd
  6114  000DDA  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  6115  000DDC  0E09               	movlw	9
  6116  000DDE  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  6117  000DE0  0E00               	movlw	0
  6118  000DE2  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  6119  000DE4  0E00               	movlw	0
  6120  000DE6  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  6121  000DE8  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  6122  000DEC  0100               	movlb	0	; () banked
  6123  000DEE  6FBE               	movwf	_at3& (0+255),b
  6124                           
  6125                           ; BSR set to: 0
  6126                           ;sms.c: 193: at3 = md_uart_write_str_ok((uint8_t *)smsMsgIndex, 1, 0, 0);
  6127  000DF0  51C3               	movf	_smsMsgIndex& (0+255),w,b
  6128  000DF2  6F89               	movwf	??_read_sms& (0+255),b
  6129  000DF4  6B8A               	clrf	(??_read_sms+1)& (0+255),b
  6130  000DF6  C089  F061         	movff	??_read_sms,md_uart_write_str_ok@data
  6131  000DFA  C08A  F062         	movff	??_read_sms+1,md_uart_write_str_ok@data+1
  6132  000DFE  0E01               	movlw	1
  6133  000E00  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  6134  000E02  0E00               	movlw	0
  6135  000E04  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  6136  000E06  0E00               	movlw	0
  6137  000E08  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  6138  000E0A  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  6139  000E0E  0100               	movlb	0	; () banked
  6140  000E10  6FBE               	movwf	_at3& (0+255),b
  6141                           
  6142                           ; BSR set to: 0
  6143                           ;sms.c: 194: at3 = md_uart_write_str_ok((uint8_t *)&msgIndex[0], sizeof(msgIndex), 1, 0)
      +                          ;
  6144  000E12  0EAD               	movlw	low read_sms@msgIndex
  6145  000E14  6F61               	movwf	md_uart_write_str_ok@data& (0+255),b
  6146  000E16  0E00               	movlw	high read_sms@msgIndex
  6147  000E18  6F62               	movwf	(md_uart_write_str_ok@data+1)& (0+255),b
  6148  000E1A  0E03               	movlw	3
  6149  000E1C  6F63               	movwf	md_uart_write_str_ok@len1& (0+255),b
  6150  000E1E  0E01               	movlw	1
  6151  000E20  6F64               	movwf	md_uart_write_str_ok@wantOk& (0+255),b
  6152  000E22  0E00               	movlw	0
  6153  000E24  6F65               	movwf	md_uart_write_str_ok@waitToSendMoreData& (0+255),b
  6154  000E26  EC6D  F009         	call	_md_uart_write_str_ok	;wreg free
  6155  000E2A  0100               	movlb	0	; () banked
  6156  000E2C  6FBE               	movwf	_at3& (0+255),b
  6157                           
  6158                           ; BSR set to: 0
  6159                           ;sms.c: 195: if (at3 == 1)
  6160  000E2E  05BE               	decf	_at3& (0+255),w,b
  6161  000E30  A4D8               	btfss	status,2,c
  6162  000E32  D003               	goto	l820
  6163                           
  6164                           ; BSR set to: 0
  6165                           ;sms.c: 196: {
  6166                           ;sms.c: 197: clear_at_ok();
  6167  000E34  EC1E  F011         	call	_clear_at_ok	;wreg free
  6168  000E38  D7C6               	goto	l7652
  6169  000E3A                     l820:
  6170                           
  6171                           ; BSR set to: 0
  6172                           ;sms.c: 201: else if (at3 == 5)
  6173                           
  6174                           ; BSR set to: 0
  6175  000E3A  0E05               	movlw	5
  6176  000E3C  19BE               	xorwf	_at3& (0+255),w,b
  6177  000E3E  A4D8               	btfss	status,2,c
  6178  000E40  D006               	goto	l822
  6179                           
  6180                           ; BSR set to: 0
  6181                           ;sms.c: 202: {
  6182                           ;sms.c: 203: clear_at_ok();
  6183  000E42  EC1E  F011         	call	_clear_at_ok	;wreg free
  6184                           
  6185                           ;sms.c: 204: ready_to_read_text = 0;
  6186  000E46  0E00               	movlw	0
  6187  000E48  0100               	movlb	0	; () banked
  6188  000E4A  6FC4               	movwf	_ready_to_read_text& (0+255),b
  6189                           
  6190                           ; BSR set to: 0
  6191                           ;sms.c: 205: return 5;
  6192                           ;	Return value of _read_sms is never used
  6193  000E4C  0012               	return	
  6194  000E4E                     l822:
  6195                           
  6196                           ; BSR set to: 0
  6197                           ;sms.c: 206: }
  6198                           ;sms.c: 207: }
  6199                           ;sms.c: 208: }
  6200                           ;sms.c: 209: if (at2 == 5)
  6201                           
  6202                           ; BSR set to: 0
  6203                           
  6204                           ; BSR set to: 0
  6205                           
  6206                           ; BSR set to: 0
  6207                           
  6208                           ; BSR set to: 0
  6209  000E4E  0E05               	movlw	5
  6210  000E50  19BF               	xorwf	_at2& (0+255),w,b
  6211  000E52  A4D8               	btfss	status,2,c
  6212  000E54  0012               	return	
  6213                           
  6214                           ; BSR set to: 0
  6215                           ;sms.c: 210: {
  6216                           ;sms.c: 211: ready_to_read_text = 0;
  6217  000E56  0E00               	movlw	0
  6218  000E58  6FC4               	movwf	_ready_to_read_text& (0+255),b
  6219                           
  6220                           ; BSR set to: 0
  6221                           
  6222                           ; BSR set to: 0
  6223                           ;sms.c: 212: return 5;
  6224                           ;	Return value of _read_sms is never used
  6225  000E5A  0012               	return	
  6226  000E5C                     __end_of_read_sms:
  6227                           	opt stack 0
  6228                           tblptru	equ	0xFF8
  6229                           tblptrh	equ	0xFF7
  6230                           tblptrl	equ	0xFF6
  6231                           tablat	equ	0xFF5
  6232                           prodh	equ	0xFF4
  6233                           prodl	equ	0xFF3
  6234                           intcon	equ	0xFF2
  6235                           postinc0	equ	0xFEE
  6236                           wreg	equ	0xFE8
  6237                           postdec1	equ	0xFE5
  6238                           plusw1	equ	0xFE3
  6239                           fsr1l	equ	0xFE1
  6240                           indf2	equ	0xFDF
  6241                           postinc2	equ	0xFDE
  6242                           plusw2	equ	0xFDB
  6243                           fsr2h	equ	0xFDA
  6244                           fsr2l	equ	0xFD9
  6245                           status	equ	0xFD8
  6246                           
  6247 ;; *************** function _parse_cmgr *****************
  6248 ;; Defined at:
  6249 ;;		line 238 in file "sms.c"
  6250 ;; Parameters:    Size  Location     Type
  6251 ;;		None
  6252 ;; Auto vars:     Size  Location     Type
  6253 ;;  l               1   38[BANK0 ] unsigned char 
  6254 ;;  k               1   29[BANK0 ] unsigned char 
  6255 ;;  j               1   39[BANK0 ] unsigned char 
  6256 ;;  i               1   40[BANK0 ] unsigned char 
  6257 ;;  cmgr_rsp        8   19[BANK0 ] unsigned char [8]
  6258 ;;  access_code     4   30[BANK0 ] unsigned char [4]
  6259 ;;  final_field_    1   37[BANK0 ] unsigned char 
  6260 ;;  final_field_    1   36[BANK0 ] unsigned char 
  6261 ;;  field_num_on    1   35[BANK0 ] unsigned char 
  6262 ;;  field_num_te    1   34[BANK0 ] unsigned char 
  6263 ;;  newline_inde    1   28[BANK0 ] unsigned char 
  6264 ;;  colon_index     1   27[BANK0 ] unsigned char 
  6265 ;; Return value:  Size  Location     Type
  6266 ;;                  1    wreg      unsigned char 
  6267 ;; Registers used:
  6268 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6269 ;; Tracked objects:
  6270 ;;		On entry : 0/0
  6271 ;;		On exit  : 0/0
  6272 ;;		Unchanged: 0/0
  6273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6275 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6276 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6277 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6278 ;;Total ram usage:       24 bytes
  6279 ;; Hardware stack levels used:    1
  6280 ;; Hardware stack levels required when called:    5
  6281 ;; This function calls:
  6282 ;;		_ee_read
  6283 ;;		_program_field
  6284 ;; This function is called by:
  6285 ;;		_read_sms
  6286 ;; This function uses a non-reentrant model
  6287 ;;
  6288                           
  6289                           	psect	text23
  6290  000740                     __ptext23:
  6291                           	opt stack 0
  6292  000740                     _parse_cmgr:
  6293                           	opt stack 22
  6294                           
  6295                           ;sms.c: 240: uint8_t cmgr_rsp[] = "+CMGR: ";
  6296                           
  6297                           ;incstack = 0
  6298  000740  EE21  F09E         	lfsr	2,parse_cmgr@F6863
  6299  000744  EE10  F073         	lfsr	1,parse_cmgr@cmgr_rsp
  6300  000748  0E07               	movlw	7
  6301  00074A                     u9151:
  6302  00074A  CFDB FFE3          	movff	plusw2,plusw1
  6303  00074E  06E8               	decf	wreg,f,c
  6304  000750  E2FC               	bc	u9151
  6305                           
  6306                           ;sms.c: 241: uint8_t access_code[4];
  6307                           ;sms.c: 242: uint8_t colon_index, newline_index;
  6308                           ;sms.c: 243: uint8_t field_num_tens, field_num_ones;
  6309                           ;sms.c: 244: uint8_t final_field_index = 0, final_field_term = 0;
  6310  000752  0E00               	movlw	0
  6311  000754  0100               	movlb	0	; () banked
  6312  000756  6F85               	movwf	parse_cmgr@final_field_index& (0+255),b
  6313                           
  6314                           ; BSR set to: 0
  6315  000758  0E00               	movlw	0
  6316  00075A  6F84               	movwf	parse_cmgr@final_field_term& (0+255),b
  6317                           
  6318                           ; BSR set to: 0
  6319                           ;sms.c: 246: access_code[0] = ee_read(0x00, 0xC0);
  6320  00075C  0EC0               	movlw	192
  6321  00075E  6F60               	movwf	ee_read@addr& (0+255),b
  6322  000760  0E00               	movlw	0
  6323  000762  ECEB  F011         	call	_ee_read
  6324  000766  0100               	movlb	0	; () banked
  6325  000768  6F7E               	movwf	parse_cmgr@access_code& (0+255),b
  6326                           
  6327                           ; BSR set to: 0
  6328                           ;sms.c: 247: access_code[1] = ee_read(0x00, 0xC1);
  6329  00076A  0EC1               	movlw	193
  6330  00076C  6F60               	movwf	ee_read@addr& (0+255),b
  6331  00076E  0E00               	movlw	0
  6332  000770  ECEB  F011         	call	_ee_read
  6333  000774  0100               	movlb	0	; () banked
  6334  000776  6F7F               	movwf	(parse_cmgr@access_code+1)& (0+255),b
  6335                           
  6336                           ; BSR set to: 0
  6337                           ;sms.c: 248: access_code[2] = ee_read(0x00, 0xC2);
  6338  000778  0EC2               	movlw	194
  6339  00077A  6F60               	movwf	ee_read@addr& (0+255),b
  6340  00077C  0E00               	movlw	0
  6341  00077E  ECEB  F011         	call	_ee_read
  6342  000782  0100               	movlb	0	; () banked
  6343  000784  6F80               	movwf	(parse_cmgr@access_code+2)& (0+255),b
  6344                           
  6345                           ; BSR set to: 0
  6346                           ;sms.c: 249: access_code[3] = ee_read(0x00, 0xC3);
  6347  000786  0EC3               	movlw	195
  6348  000788  6F60               	movwf	ee_read@addr& (0+255),b
  6349  00078A  0E00               	movlw	0
  6350  00078C  ECEB  F011         	call	_ee_read
  6351  000790  0100               	movlb	0	; () banked
  6352  000792  6F81               	movwf	(parse_cmgr@access_code+3)& (0+255),b
  6353                           
  6354                           ; BSR set to: 0
  6355                           ;sms.c: 251: for (uint8_t i = 0; i < sizeof(mdRxBuf); i++)
  6356  000794  0E00               	movlw	0
  6357  000796  6F88               	movwf	parse_cmgr@i& (0+255),b
  6358  000798                     l7296:
  6359                           
  6360                           ; BSR set to: 0
  6361  000798  0E9F               	movlw	159
  6362  00079A  6588               	cpfsgt	parse_cmgr@i& (0+255),b
  6363  00079C  D001               	goto	l837
  6364  00079E  D15C               	goto	u9330
  6365  0007A0                     l837:
  6366                           
  6367                           ; BSR set to: 0
  6368                           ;sms.c: 252: {
  6369                           ;sms.c: 253: if (mdRxBuf[i] == ':')
  6370                           
  6371                           ; BSR set to: 0
  6372  0007A0  5188               	movf	parse_cmgr@i& (0+255),w,b
  6373  0007A2  0D01               	mullw	1
  6374  0007A4  0E00               	movlw	low _mdRxBuf
  6375  0007A6  24F3               	addwf	prodl,w,c
  6376  0007A8  6ED9               	movwf	fsr2l,c
  6377  0007AA  0E02               	movlw	high _mdRxBuf
  6378  0007AC  20F4               	addwfc	prodh,w,c
  6379  0007AE  6EDA               	movwf	fsr2h,c
  6380  0007B0  0E3A               	movlw	58
  6381  0007B2  18DE               	xorwf	postinc2,w,c
  6382  0007B4  B4D8               	btfsc	status,2,c
  6383                           
  6384                           ; BSR set to: 0
  6385                           ;sms.c: 254: colon_index = i;
  6386  0007B6  C088  F07B         	movff	parse_cmgr@i,parse_cmgr@colon_index
  6387                           
  6388                           ; BSR set to: 0
  6389                           ;sms.c: 255: if (mdRxBuf[i] == ',' && mdRxBuf[(uint8_t)(i + 2)] == '+')
  6390                           
  6391                           ; BSR set to: 0
  6392  0007BA  5188               	movf	parse_cmgr@i& (0+255),w,b
  6393  0007BC  0D01               	mullw	1
  6394  0007BE  0E00               	movlw	low _mdRxBuf
  6395  0007C0  24F3               	addwf	prodl,w,c
  6396  0007C2  6ED9               	movwf	fsr2l,c
  6397  0007C4  0E02               	movlw	high _mdRxBuf
  6398  0007C6  20F4               	addwfc	prodh,w,c
  6399  0007C8  6EDA               	movwf	fsr2h,c
  6400  0007CA  0E2C               	movlw	44
  6401  0007CC  18DE               	xorwf	postinc2,w,c
  6402  0007CE  A4D8               	btfss	status,2,c
  6403  0007D0  D030               	goto	u9210
  6404                           
  6405                           ; BSR set to: 0
  6406  0007D2  C088  F071         	movff	parse_cmgr@i,??_parse_cmgr
  6407  0007D6  0E02               	movlw	2
  6408  0007D8  2771               	addwf	??_parse_cmgr& (0+255),f,b
  6409  0007DA  5171               	movf	??_parse_cmgr& (0+255),w,b
  6410  0007DC  0D01               	mullw	1
  6411  0007DE  0E00               	movlw	low _mdRxBuf
  6412  0007E0  24F3               	addwf	prodl,w,c
  6413  0007E2  6ED9               	movwf	fsr2l,c
  6414  0007E4  0E02               	movlw	high _mdRxBuf
  6415  0007E6  20F4               	addwfc	prodh,w,c
  6416  0007E8  6EDA               	movwf	fsr2h,c
  6417  0007EA  0E2B               	movlw	43
  6418  0007EC  18DE               	xorwf	postinc2,w,c
  6419  0007EE  A4D8               	btfss	status,2,c
  6420  0007F0  D020               	goto	u9210
  6421                           
  6422                           ; BSR set to: 0
  6423                           ;sms.c: 256: {
  6424                           ;sms.c: 257: ph_num_index = (uint8_t)(i + 3);
  6425  0007F2  5188               	movf	parse_cmgr@i& (0+255),w,b
  6426  0007F4  0F03               	addlw	3
  6427  0007F6  6FB3               	movwf	_ph_num_index& (0+255),b
  6428                           
  6429                           ; BSR set to: 0
  6430                           ;sms.c: 258: for (uint8_t l = 0; l < sizeof(ph_num); l++)
  6431  0007F8  0E00               	movlw	0
  6432  0007FA  6F86               	movwf	parse_cmgr@l& (0+255),b
  6433  0007FC                     l7312:
  6434                           
  6435                           ; BSR set to: 0
  6436  0007FC  0E08               	movlw	8
  6437  0007FE  6586               	cpfsgt	parse_cmgr@l& (0+255),b
  6438  000800  D001               	goto	l841
  6439  000802  D017               	goto	u9210
  6440  000804                     l841:
  6441                           
  6442                           ; BSR set to: 0
  6443                           ;sms.c: 259: ph_num[l] = mdRxBuf[(uint8_t)(ph_num_index + l)];
  6444                           
  6445                           ; BSR set to: 0
  6446  000804  51B3               	movf	_ph_num_index& (0+255),w,b
  6447  000806  2586               	addwf	parse_cmgr@l& (0+255),w,b
  6448  000808  6F71               	movwf	??_parse_cmgr& (0+255),b
  6449  00080A  5171               	movf	??_parse_cmgr& (0+255),w,b
  6450  00080C  0D01               	mullw	1
  6451  00080E  0E00               	movlw	low _mdRxBuf
  6452  000810  24F3               	addwf	prodl,w,c
  6453  000812  6ED9               	movwf	fsr2l,c
  6454  000814  0E02               	movlw	high _mdRxBuf
  6455  000816  20F4               	addwfc	prodh,w,c
  6456  000818  6EDA               	movwf	fsr2h,c
  6457  00081A  5186               	movf	parse_cmgr@l& (0+255),w,b
  6458  00081C  0D01               	mullw	1
  6459  00081E  0EE9               	movlw	low _ph_num
  6460  000820  24F3               	addwf	prodl,w,c
  6461  000822  6EE1               	movwf	fsr1l,c
  6462  000824  0E01               	movlw	high _ph_num
  6463  000826  20F4               	addwfc	prodh,w,c
  6464  000828  6EE2               	movwf	fsr1h,c
  6465  00082A  CFDF FFE7          	movff	indf2,indf1
  6466                           
  6467                           ; BSR set to: 0
  6468  00082E  2B86               	incf	parse_cmgr@l& (0+255),f,b
  6469  000830  D7E5               	goto	l7312
  6470  000832                     u9210:
  6471                           
  6472                           ; BSR set to: 0
  6473                           ;sms.c: 260: }
  6474                           ;sms.c: 261: if (mdRxBuf[i] == '\n')
  6475                           
  6476                           ; BSR set to: 0
  6477                           
  6478                           ; BSR set to: 0
  6479  000832  5188               	movf	parse_cmgr@i& (0+255),w,b
  6480  000834  0D01               	mullw	1
  6481  000836  0E00               	movlw	low _mdRxBuf
  6482  000838  24F3               	addwf	prodl,w,c
  6483  00083A  6ED9               	movwf	fsr2l,c
  6484  00083C  0E02               	movlw	high _mdRxBuf
  6485  00083E  20F4               	addwfc	prodh,w,c
  6486  000840  6EDA               	movwf	fsr2h,c
  6487  000842  0E0A               	movlw	10
  6488  000844  18DE               	xorwf	postinc2,w,c
  6489  000846  B4D8               	btfsc	status,2,c
  6490                           
  6491                           ; BSR set to: 0
  6492                           ;sms.c: 262: newline_index = i;
  6493  000848  C088  F07C         	movff	parse_cmgr@i,parse_cmgr@newline_index
  6494                           
  6495                           ; BSR set to: 0
  6496                           ;sms.c: 263: if (mdRxBuf[i] == access_code[0] && mdRxBuf[(uint8_t)(i + 1)] == access_cod
      +                          e[1] && mdRxBuf[(uint8_t)(i + 2)] == access_code[2] && mdRxBuf[(uint8_t)(i + 3)] == acce
      +                          ss_code[3] && mdRxBuf[(uint8_t)(i + 4)] == '#')
  6497                           
  6498                           ; BSR set to: 0
  6499  00084C  5188               	movf	parse_cmgr@i& (0+255),w,b
  6500  00084E  0D01               	mullw	1
  6501  000850  0E00               	movlw	low _mdRxBuf
  6502  000852  24F3               	addwf	prodl,w,c
  6503  000854  6ED9               	movwf	fsr2l,c
  6504  000856  0E02               	movlw	high _mdRxBuf
  6505  000858  20F4               	addwfc	prodh,w,c
  6506  00085A  6EDA               	movwf	fsr2h,c
  6507  00085C  517E               	movf	parse_cmgr@access_code& (0+255),w,b
  6508  00085E  18DE               	xorwf	postinc2,w,c
  6509  000860  A4D8               	btfss	status,2,c
  6510  000862  D0F8               	goto	l854
  6511                           
  6512                           ; BSR set to: 0
  6513  000864  C088  F071         	movff	parse_cmgr@i,??_parse_cmgr
  6514  000868  0E01               	movlw	1
  6515  00086A  2771               	addwf	??_parse_cmgr& (0+255),f,b
  6516  00086C  5171               	movf	??_parse_cmgr& (0+255),w,b
  6517  00086E  0D01               	mullw	1
  6518  000870  0E00               	movlw	low _mdRxBuf
  6519  000872  24F3               	addwf	prodl,w,c
  6520  000874  6ED9               	movwf	fsr2l,c
  6521  000876  0E02               	movlw	high _mdRxBuf
  6522  000878  20F4               	addwfc	prodh,w,c
  6523  00087A  6EDA               	movwf	fsr2h,c
  6524  00087C  517F               	movf	(parse_cmgr@access_code+1)& (0+255),w,b
  6525  00087E  18DE               	xorwf	postinc2,w,c
  6526  000880  A4D8               	btfss	status,2,c
  6527  000882  D0E8               	goto	l854
  6528                           
  6529                           ; BSR set to: 0
  6530  000884  C088  F071         	movff	parse_cmgr@i,??_parse_cmgr
  6531  000888  0E02               	movlw	2
  6532  00088A  2771               	addwf	??_parse_cmgr& (0+255),f,b
  6533  00088C  5171               	movf	??_parse_cmgr& (0+255),w,b
  6534  00088E  0D01               	mullw	1
  6535  000890  0E00               	movlw	low _mdRxBuf
  6536  000892  24F3               	addwf	prodl,w,c
  6537  000894  6ED9               	movwf	fsr2l,c
  6538  000896  0E02               	movlw	high _mdRxBuf
  6539  000898  20F4               	addwfc	prodh,w,c
  6540  00089A  6EDA               	movwf	fsr2h,c
  6541  00089C  5180               	movf	(parse_cmgr@access_code+2)& (0+255),w,b
  6542  00089E  18DE               	xorwf	postinc2,w,c
  6543  0008A0  A4D8               	btfss	status,2,c
  6544  0008A2  D0D8               	goto	l854
  6545                           
  6546                           ; BSR set to: 0
  6547  0008A4  C088  F071         	movff	parse_cmgr@i,??_parse_cmgr
  6548  0008A8  0E03               	movlw	3
  6549  0008AA  2771               	addwf	??_parse_cmgr& (0+255),f,b
  6550  0008AC  5171               	movf	??_parse_cmgr& (0+255),w,b
  6551  0008AE  0D01               	mullw	1
  6552  0008B0  0E00               	movlw	low _mdRxBuf
  6553  0008B2  24F3               	addwf	prodl,w,c
  6554  0008B4  6ED9               	movwf	fsr2l,c
  6555  0008B6  0E02               	movlw	high _mdRxBuf
  6556  0008B8  20F4               	addwfc	prodh,w,c
  6557  0008BA  6EDA               	movwf	fsr2h,c
  6558  0008BC  5181               	movf	(parse_cmgr@access_code+3)& (0+255),w,b
  6559  0008BE  18DE               	xorwf	postinc2,w,c
  6560  0008C0  A4D8               	btfss	status,2,c
  6561  0008C2  D0C8               	goto	l854
  6562                           
  6563                           ; BSR set to: 0
  6564  0008C4  C088  F071         	movff	parse_cmgr@i,??_parse_cmgr
  6565  0008C8  0E04               	movlw	4
  6566  0008CA  2771               	addwf	??_parse_cmgr& (0+255),f,b
  6567  0008CC  5171               	movf	??_parse_cmgr& (0+255),w,b
  6568  0008CE  0D01               	mullw	1
  6569  0008D0  0E00               	movlw	low _mdRxBuf
  6570  0008D2  24F3               	addwf	prodl,w,c
  6571  0008D4  6ED9               	movwf	fsr2l,c
  6572  0008D6  0E02               	movlw	high _mdRxBuf
  6573  0008D8  20F4               	addwfc	prodh,w,c
  6574  0008DA  6EDA               	movwf	fsr2h,c
  6575  0008DC  0E23               	movlw	35
  6576  0008DE  18DE               	xorwf	postinc2,w,c
  6577  0008E0  A4D8               	btfss	status,2,c
  6578  0008E2  D0B8               	goto	l854
  6579                           
  6580                           ; BSR set to: 0
  6581                           ;sms.c: 266: {
  6582                           ;sms.c: 267: if (mdRxBuf[(uint8_t)(i + 7)] == '#')
  6583  0008E4  C088  F071         	movff	parse_cmgr@i,??_parse_cmgr
  6584  0008E8  0E07               	movlw	7
  6585  0008EA  2771               	addwf	??_parse_cmgr& (0+255),f,b
  6586  0008EC  5171               	movf	??_parse_cmgr& (0+255),w,b
  6587  0008EE  0D01               	mullw	1
  6588  0008F0  0E00               	movlw	low _mdRxBuf
  6589  0008F2  24F3               	addwf	prodl,w,c
  6590  0008F4  6ED9               	movwf	fsr2l,c
  6591  0008F6  0E02               	movlw	high _mdRxBuf
  6592  0008F8  20F4               	addwfc	prodh,w,c
  6593  0008FA  6EDA               	movwf	fsr2h,c
  6594  0008FC  0E23               	movlw	35
  6595  0008FE  18DE               	xorwf	postinc2,w,c
  6596  000900  A4D8               	btfss	status,2,c
  6597  000902  D061               	goto	l845
  6598                           
  6599                           ; BSR set to: 0
  6600                           ;sms.c: 268: {
  6601                           ;sms.c: 269: if (mdRxBuf[(uint8_t)(i + 5)] >= 0x41)
  6602  000904  C088  F071         	movff	parse_cmgr@i,??_parse_cmgr
  6603  000908  0E05               	movlw	5
  6604  00090A  2771               	addwf	??_parse_cmgr& (0+255),f,b
  6605  00090C  5171               	movf	??_parse_cmgr& (0+255),w,b
  6606  00090E  0D01               	mullw	1
  6607  000910  0E00               	movlw	low _mdRxBuf
  6608  000912  24F3               	addwf	prodl,w,c
  6609  000914  6ED9               	movwf	fsr2l,c
  6610  000916  0E02               	movlw	high _mdRxBuf
  6611  000918  20F4               	addwfc	prodh,w,c
  6612  00091A  6EDA               	movwf	fsr2h,c
  6613  00091C  0E40               	movlw	64
  6614  00091E  64DF               	cpfsgt	indf2,c
  6615  000920  D00F               	goto	l846
  6616                           
  6617                           ; BSR set to: 0
  6618                           ;sms.c: 270: field_num_tens = (uint8_t)((mdRxBuf[(uint8_t)(i + 5)] - 0x41 + 0x0A) * 10);
  6619  000922  C088  F071         	movff	parse_cmgr@i,??_parse_cmgr
  6620  000926  0E05               	movlw	5
  6621  000928  2771               	addwf	??_parse_cmgr& (0+255),f,b
  6622  00092A  5171               	movf	??_parse_cmgr& (0+255),w,b
  6623  00092C  0D01               	mullw	1
  6624  00092E  0E00               	movlw	low _mdRxBuf
  6625  000930  24F3               	addwf	prodl,w,c
  6626  000932  6ED9               	movwf	fsr2l,c
  6627  000934  0E02               	movlw	high _mdRxBuf
  6628  000936  20F4               	addwfc	prodh,w,c
  6629  000938  6EDA               	movwf	fsr2h,c
  6630  00093A  50DF               	movf	indf2,w,c
  6631  00093C  0FC9               	addlw	201
  6632  00093E  D00E               	goto	L3
  6633  000940                     l846:
  6634                           
  6635                           ; BSR set to: 0
  6636                           ;sms.c: 271: else
  6637                           ;sms.c: 272: field_num_tens = (uint8_t)((mdRxBuf[(uint8_t)(i + 5)] - 0x30) * 10);
  6638                           
  6639                           ; BSR set to: 0
  6640  000940  C088  F071         	movff	parse_cmgr@i,??_parse_cmgr
  6641  000944  0E05               	movlw	5
  6642  000946  2771               	addwf	??_parse_cmgr& (0+255),f,b
  6643  000948  5171               	movf	??_parse_cmgr& (0+255),w,b
  6644  00094A  0D01               	mullw	1
  6645  00094C  0E00               	movlw	low _mdRxBuf
  6646  00094E  24F3               	addwf	prodl,w,c
  6647  000950  6ED9               	movwf	fsr2l,c
  6648  000952  0E02               	movlw	high _mdRxBuf
  6649  000954  20F4               	addwfc	prodh,w,c
  6650  000956  6EDA               	movwf	fsr2h,c
  6651  000958  50DF               	movf	indf2,w,c
  6652  00095A  0FD0               	addlw	208
  6653  00095C                     L3:
  6654  00095C  0D0A               	mullw	10
  6655  00095E  CFF3 F082          	movff	prodl,parse_cmgr@field_num_tens
  6656                           
  6657                           ; BSR set to: 0
  6658                           ;sms.c: 273: if (mdRxBuf[(uint8_t)(i + 6)] >= 0x41)
  6659  000962  C088  F071         	movff	parse_cmgr@i,??_parse_cmgr
  6660  000966  0E06               	movlw	6
  6661  000968  2771               	addwf	??_parse_cmgr& (0+255),f,b
  6662  00096A  5171               	movf	??_parse_cmgr& (0+255),w,b
  6663  00096C  0D01               	mullw	1
  6664  00096E  0E00               	movlw	low _mdRxBuf
  6665  000970  24F3               	addwf	prodl,w,c
  6666  000972  6ED9               	movwf	fsr2l,c
  6667  000974  0E02               	movlw	high _mdRxBuf
  6668  000976  20F4               	addwfc	prodh,w,c
  6669  000978  6EDA               	movwf	fsr2h,c
  6670  00097A  0E40               	movlw	64
  6671  00097C  64DF               	cpfsgt	indf2,c
  6672  00097E  D00F               	goto	l848
  6673                           
  6674                           ; BSR set to: 0
  6675                           ;sms.c: 274: field_num_ones = (uint8_t)(mdRxBuf[(uint8_t)(i + 6)] - 0x41 + 0x0A);
  6676  000980  C088  F071         	movff	parse_cmgr@i,??_parse_cmgr
  6677  000984  0E06               	movlw	6
  6678  000986  2771               	addwf	??_parse_cmgr& (0+255),f,b
  6679  000988  5171               	movf	??_parse_cmgr& (0+255),w,b
  6680  00098A  0D01               	mullw	1
  6681  00098C  0E00               	movlw	low _mdRxBuf
  6682  00098E  24F3               	addwf	prodl,w,c
  6683  000990  6ED9               	movwf	fsr2l,c
  6684  000992  0E02               	movlw	high _mdRxBuf
  6685  000994  20F4               	addwfc	prodh,w,c
  6686  000996  6EDA               	movwf	fsr2h,c
  6687  000998  50DF               	movf	indf2,w,c
  6688  00099A  0FC9               	addlw	201
  6689  00099C  D00E               	goto	L4
  6690  00099E                     l848:
  6691                           
  6692                           ; BSR set to: 0
  6693                           ;sms.c: 275: else
  6694                           ;sms.c: 276: field_num_ones = (uint8_t)(mdRxBuf[(uint8_t)(i + 6)] - 0x30);
  6695                           
  6696                           ; BSR set to: 0
  6697  00099E  C088  F071         	movff	parse_cmgr@i,??_parse_cmgr
  6698  0009A2  0E06               	movlw	6
  6699  0009A4  2771               	addwf	??_parse_cmgr& (0+255),f,b
  6700  0009A6  5171               	movf	??_parse_cmgr& (0+255),w,b
  6701  0009A8  0D01               	mullw	1
  6702  0009AA  0E00               	movlw	low _mdRxBuf
  6703  0009AC  24F3               	addwf	prodl,w,c
  6704  0009AE  6ED9               	movwf	fsr2l,c
  6705  0009B0  0E02               	movlw	high _mdRxBuf
  6706  0009B2  20F4               	addwfc	prodh,w,c
  6707  0009B4  6EDA               	movwf	fsr2h,c
  6708  0009B6  50DF               	movf	indf2,w,c
  6709  0009B8  0FD0               	addlw	208
  6710  0009BA                     L4:
  6711  0009BA  6F83               	movwf	parse_cmgr@field_num_ones& (0+255),b
  6712                           
  6713                           ; BSR set to: 0
  6714                           ;sms.c: 277: field_num_tens += field_num_ones;
  6715                           
  6716                           ; BSR set to: 0
  6717  0009BC  5183               	movf	parse_cmgr@field_num_ones& (0+255),w,b
  6718  0009BE  2782               	addwf	parse_cmgr@field_num_tens& (0+255),f,b
  6719                           
  6720                           ; BSR set to: 0
  6721                           ;sms.c: 278: final_field_index = (uint8_t)(i + 8);
  6722  0009C0  5188               	movf	parse_cmgr@i& (0+255),w,b
  6723  0009C2  0F08               	addlw	8
  6724  0009C4  D043               	goto	L5
  6725  0009C6                     l845:
  6726                           
  6727                           ; BSR set to: 0
  6728                           ;sms.c: 280: else if (mdRxBuf[(uint8_t)(i + 6)] == '#')
  6729                           
  6730                           ; BSR set to: 0
  6731  0009C6  C088  F071         	movff	parse_cmgr@i,??_parse_cmgr
  6732  0009CA  0E06               	movlw	6
  6733  0009CC  2771               	addwf	??_parse_cmgr& (0+255),f,b
  6734  0009CE  5171               	movf	??_parse_cmgr& (0+255),w,b
  6735  0009D0  0D01               	mullw	1
  6736  0009D2  0E00               	movlw	low _mdRxBuf
  6737  0009D4  24F3               	addwf	prodl,w,c
  6738  0009D6  6ED9               	movwf	fsr2l,c
  6739  0009D8  0E02               	movlw	high _mdRxBuf
  6740  0009DA  20F4               	addwfc	prodh,w,c
  6741  0009DC  6EDA               	movwf	fsr2h,c
  6742  0009DE  0E23               	movlw	35
  6743  0009E0  18DE               	xorwf	postinc2,w,c
  6744  0009E2  A4D8               	btfss	status,2,c
  6745  0009E4  D035               	goto	l851
  6746                           
  6747                           ; BSR set to: 0
  6748                           ;sms.c: 281: {
  6749                           ;sms.c: 282: field_num_tens = 0;
  6750  0009E6  0E00               	movlw	0
  6751  0009E8  6F82               	movwf	parse_cmgr@field_num_tens& (0+255),b
  6752                           
  6753                           ; BSR set to: 0
  6754                           ;sms.c: 283: if (mdRxBuf[(uint8_t)(i + 5)] >= 0x41)
  6755  0009EA  C088  F071         	movff	parse_cmgr@i,??_parse_cmgr
  6756  0009EE  0E05               	movlw	5
  6757  0009F0  2771               	addwf	??_parse_cmgr& (0+255),f,b
  6758  0009F2  5171               	movf	??_parse_cmgr& (0+255),w,b
  6759  0009F4  0D01               	mullw	1
  6760  0009F6  0E00               	movlw	low _mdRxBuf
  6761  0009F8  24F3               	addwf	prodl,w,c
  6762  0009FA  6ED9               	movwf	fsr2l,c
  6763  0009FC  0E02               	movlw	high _mdRxBuf
  6764  0009FE  20F4               	addwfc	prodh,w,c
  6765  000A00  6EDA               	movwf	fsr2h,c
  6766  000A02  0E40               	movlw	64
  6767  000A04  64DF               	cpfsgt	indf2,c
  6768  000A06  D00F               	goto	l852
  6769                           
  6770                           ; BSR set to: 0
  6771                           ;sms.c: 284: field_num_ones = (uint8_t)(mdRxBuf[(uint8_t)(i + 5)] - 0x41 + 0x0A);
  6772  000A08  C088  F071         	movff	parse_cmgr@i,??_parse_cmgr
  6773  000A0C  0E05               	movlw	5
  6774  000A0E  2771               	addwf	??_parse_cmgr& (0+255),f,b
  6775  000A10  5171               	movf	??_parse_cmgr& (0+255),w,b
  6776  000A12  0D01               	mullw	1
  6777  000A14  0E00               	movlw	low _mdRxBuf
  6778  000A16  24F3               	addwf	prodl,w,c
  6779  000A18  6ED9               	movwf	fsr2l,c
  6780  000A1A  0E02               	movlw	high _mdRxBuf
  6781  000A1C  20F4               	addwfc	prodh,w,c
  6782  000A1E  6EDA               	movwf	fsr2h,c
  6783  000A20  50DF               	movf	indf2,w,c
  6784  000A22  0FC9               	addlw	201
  6785  000A24  D00E               	goto	L6
  6786  000A26                     l852:
  6787                           
  6788                           ; BSR set to: 0
  6789                           ;sms.c: 285: else
  6790                           ;sms.c: 286: field_num_ones = (uint8_t)(mdRxBuf[(uint8_t)(i + 5)] - 0x30);
  6791                           
  6792                           ; BSR set to: 0
  6793  000A26  C088  F071         	movff	parse_cmgr@i,??_parse_cmgr
  6794  000A2A  0E05               	movlw	5
  6795  000A2C  2771               	addwf	??_parse_cmgr& (0+255),f,b
  6796  000A2E  5171               	movf	??_parse_cmgr& (0+255),w,b
  6797  000A30  0D01               	mullw	1
  6798  000A32  0E00               	movlw	low _mdRxBuf
  6799  000A34  24F3               	addwf	prodl,w,c
  6800  000A36  6ED9               	movwf	fsr2l,c
  6801  000A38  0E02               	movlw	high _mdRxBuf
  6802  000A3A  20F4               	addwfc	prodh,w,c
  6803  000A3C  6EDA               	movwf	fsr2h,c
  6804  000A3E  50DF               	movf	indf2,w,c
  6805  000A40  0FD0               	addlw	208
  6806  000A42                     L6:
  6807  000A42  6F83               	movwf	parse_cmgr@field_num_ones& (0+255),b
  6808                           
  6809                           ; BSR set to: 0
  6810                           ;sms.c: 287: field_num_tens += field_num_ones;
  6811                           
  6812                           ; BSR set to: 0
  6813  000A44  5183               	movf	parse_cmgr@field_num_ones& (0+255),w,b
  6814  000A46  2782               	addwf	parse_cmgr@field_num_tens& (0+255),f,b
  6815                           
  6816                           ; BSR set to: 0
  6817                           ;sms.c: 288: final_field_index = (uint8_t)(i + 7);
  6818  000A48  5188               	movf	parse_cmgr@i& (0+255),w,b
  6819  000A4A  0F07               	addlw	7
  6820  000A4C                     L5:
  6821  000A4C  6F85               	movwf	parse_cmgr@final_field_index& (0+255),b
  6822                           
  6823                           ;sms.c: 289: }
  6824  000A4E  D002               	goto	l854
  6825  000A50                     l851:
  6826                           
  6827                           ; BSR set to: 0
  6828                           ;sms.c: 290: else
  6829                           ;sms.c: 291: return 4;
  6830                           
  6831                           ; BSR set to: 0
  6832  000A50  0E04               	movlw	4
  6833                           
  6834                           ; BSR set to: 0
  6835  000A52  0012               	return	
  6836  000A54                     l854:
  6837                           
  6838                           ; BSR set to: 0
  6839                           
  6840                           ; BSR set to: 0
  6841                           
  6842                           ; BSR set to: 0
  6843                           
  6844                           ; BSR set to: 0
  6845  000A54  2B88               	incf	parse_cmgr@i& (0+255),f,b
  6846  000A56  D6A0               	goto	l7296
  6847  000A58                     u9330:
  6848                           
  6849                           ; BSR set to: 0
  6850                           ;sms.c: 292: }
  6851                           ;sms.c: 293: }
  6852                           ;sms.c: 294: for (uint8_t j = final_field_index; j < sizeof(mdRxBuf); j++)
  6853  000A58  C085  F087         	movff	parse_cmgr@final_field_index,parse_cmgr@j
  6854  000A5C                     l7374:
  6855                           
  6856                           ; BSR set to: 0
  6857  000A5C  0E9F               	movlw	159
  6858  000A5E  6587               	cpfsgt	parse_cmgr@j& (0+255),b
  6859  000A60  D001               	goto	l856
  6860  000A62  D00F               	goto	u9360
  6861  000A64                     l856:
  6862                           
  6863                           ; BSR set to: 0
  6864                           ;sms.c: 295: {
  6865                           ;sms.c: 296: if (mdRxBuf[j] == '#')
  6866                           
  6867                           ; BSR set to: 0
  6868  000A64  5187               	movf	parse_cmgr@j& (0+255),w,b
  6869  000A66  0D01               	mullw	1
  6870  000A68  0E00               	movlw	low _mdRxBuf
  6871  000A6A  24F3               	addwf	prodl,w,c
  6872  000A6C  6ED9               	movwf	fsr2l,c
  6873  000A6E  0E02               	movlw	high _mdRxBuf
  6874  000A70  20F4               	addwfc	prodh,w,c
  6875  000A72  6EDA               	movwf	fsr2h,c
  6876  000A74  0E23               	movlw	35
  6877  000A76  18DE               	xorwf	postinc2,w,c
  6878  000A78  B4D8               	btfsc	status,2,c
  6879                           
  6880                           ; BSR set to: 0
  6881                           ;sms.c: 297: final_field_term = j;
  6882  000A7A  C087  F084         	movff	parse_cmgr@j,parse_cmgr@final_field_term
  6883                           
  6884                           ; BSR set to: 0
  6885                           
  6886                           ; BSR set to: 0
  6887  000A7E  2B87               	incf	parse_cmgr@j& (0+255),f,b
  6888  000A80  D7ED               	goto	l7374
  6889  000A82                     u9360:
  6890                           
  6891                           ; BSR set to: 0
  6892                           ;sms.c: 298: }
  6893                           ;sms.c: 299: if (final_field_term == 0)
  6894                           
  6895                           ; BSR set to: 0
  6896  000A82  5184               	movf	parse_cmgr@final_field_term& (0+255),w,b
  6897  000A84  A4D8               	btfss	status,2,c
  6898  000A86  D002               	goto	l859
  6899                           
  6900                           ; BSR set to: 0
  6901                           ;sms.c: 300: return 4;
  6902  000A88  0E04               	movlw	4
  6903                           
  6904                           ; BSR set to: 0
  6905  000A8A  0012               	return	
  6906  000A8C                     l859:
  6907                           
  6908                           ; BSR set to: 0
  6909                           ;sms.c: 301: for (uint8_t k = final_field_index; k < final_field_term; k++)
  6910  000A8C  C085  F07D         	movff	parse_cmgr@final_field_index,parse_cmgr@k
  6911  000A90  D001               	goto	l860
  6912  000A92                     
  6913                           ; BSR set to: 0
  6914                           
  6915                           ; BSR set to: 0
  6916  000A92  2B7D               	incf	parse_cmgr@k& (0+255),f,b
  6917  000A94                     l860:
  6918                           
  6919                           ; BSR set to: 0
  6920                           
  6921                           ; BSR set to: 0
  6922  000A94  5184               	movf	parse_cmgr@final_field_term& (0+255),w,b
  6923  000A96  5D7D               	subwf	parse_cmgr@k& (0+255),w,b
  6924  000A98  A0D8               	btfss	status,0,c
  6925  000A9A  D7FB               	goto	l861
  6926                           
  6927                           ; BSR set to: 0
  6928                           ;sms.c: 304: }
  6929                           ;sms.c: 305: if (program_field(field_num_tens, referenceBuf, (uint8_t)(final_field_term 
      +                          - final_field_index)))
  6930                           
  6931                           ; BSR set to: 0
  6932  000A9C  0E40               	movlw	low _referenceBuf
  6933  000A9E  6F68               	movwf	program_field@data_buf& (0+255),b
  6934  000AA0  0E03               	movlw	high _referenceBuf
  6935  000AA2  6F69               	movwf	(program_field@data_buf+1)& (0+255),b
  6936  000AA4  5185               	movf	parse_cmgr@final_field_index& (0+255),w,b
  6937  000AA6  0800               	sublw	0
  6938  000AA8  2584               	addwf	parse_cmgr@final_field_term& (0+255),w,b
  6939  000AAA  6F6A               	movwf	program_field@size& (0+255),b
  6940  000AAC  5182               	movf	parse_cmgr@field_num_tens& (0+255),w,b
  6941  000AAE  EC60  F005         	call	_program_field
  6942  000AB2  0900               	iorlw	0
  6943  000AB4  B4D8               	btfsc	status,2,c
  6944  000AB6  D002               	goto	l863
  6945                           
  6946                           ;sms.c: 306: return 1;
  6947  000AB8  0E01               	movlw	1
  6948  000ABA  0012               	return	
  6949  000ABC                     l863:
  6950                           
  6951                           ;sms.c: 307: else
  6952                           ;sms.c: 308: return 4;
  6953  000ABC  0E04               	movlw	4
  6954  000ABE  0012               	return	
  6955  000AC0                     __end_of_parse_cmgr:
  6956                           	opt stack 0
  6957                           tblptru	equ	0xFF8
  6958                           tblptrh	equ	0xFF7
  6959                           tblptrl	equ	0xFF6
  6960                           tablat	equ	0xFF5
  6961                           prodh	equ	0xFF4
  6962                           prodl	equ	0xFF3
  6963                           intcon	equ	0xFF2
  6964                           postinc0	equ	0xFEE
  6965                           wreg	equ	0xFE8
  6966                           indf1	equ	0xFE7
  6967                           postdec1	equ	0xFE5
  6968                           plusw1	equ	0xFE3
  6969                           fsr1h	equ	0xFE2
  6970                           fsr1l	equ	0xFE1
  6971                           indf2	equ	0xFDF
  6972                           postinc2	equ	0xFDE
  6973                           plusw2	equ	0xFDB
  6974                           fsr2h	equ	0xFDA
  6975                           fsr2l	equ	0xFD9
  6976                           status	equ	0xFD8
  6977                           
  6978 ;; *************** function _program_field *****************
  6979 ;; Defined at:
  6980 ;;		line 5 in file "cell_settings.c"
  6981 ;; Parameters:    Size  Location     Type
  6982 ;;  field_number    1    wreg     unsigned char 
  6983 ;;  data_buf        2    8[BANK0 ] PTR unsigned char 
  6984 ;;		 -> referenceBuf(60), 
  6985 ;;  size            1   10[BANK0 ] unsigned char 
  6986 ;; Auto vars:     Size  Location     Type
  6987 ;;  field_number    1   16[BANK0 ] unsigned char 
  6988 ;;  start_addr      1   15[BANK0 ] unsigned char 
  6989 ;;  i               1   14[BANK0 ] unsigned char 
  6990 ;;  max_size        1   13[BANK0 ] unsigned char 
  6991 ;;  page            1   12[BANK0 ] unsigned char 
  6992 ;; Return value:  Size  Location     Type
  6993 ;;                  1    wreg      unsigned char 
  6994 ;; Registers used:
  6995 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6996 ;; Tracked objects:
  6997 ;;		On entry : 0/0
  6998 ;;		On exit  : 0/0
  6999 ;;		Unchanged: 0/0
  7000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7001 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7002 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7003 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7004 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7005 ;;Total ram usage:        9 bytes
  7006 ;; Hardware stack levels used:    1
  7007 ;; Hardware stack levels required when called:    4
  7008 ;; This function calls:
  7009 ;;		___awdiv
  7010 ;;		___awmod
  7011 ;;		_ee_write
  7012 ;; This function is called by:
  7013 ;;		_parse_cmgr
  7014 ;; This function uses a non-reentrant model
  7015 ;;
  7016                           
  7017                           	psect	text24
  7018  000AC0                     __ptext24:
  7019                           	opt stack 0
  7020  000AC0                     _program_field:
  7021                           	opt stack 22
  7022                           
  7023                           ;incstack = 0
  7024                           ;program_field@field_number stored from wreg
  7025  000AC0  0100               	movlb	0	; () banked
  7026  000AC2  6F70               	movwf	program_field@field_number& (0+255),b
  7027                           
  7028                           ;cell_settings.c: 7: uint8_t start_addr;
  7029                           ;cell_settings.c: 8: uint8_t page = 0x00;
  7030  000AC4  0E00               	movlw	0
  7031  000AC6  0100               	movlb	0	; () banked
  7032  000AC8  6F6C               	movwf	program_field@page& (0+255),b
  7033                           
  7034                           ;cell_settings.c: 9: uint8_t max_size = 40;
  7035  000ACA  0E28               	movlw	40
  7036  000ACC  6F6D               	movwf	program_field@max_size& (0+255),b
  7037                           
  7038                           ;cell_settings.c: 10: uint8_t i = 0;
  7039  000ACE  0E00               	movlw	0
  7040  000AD0  6F6E               	movwf	program_field@i& (0+255),b
  7041                           
  7042                           ; BSR set to: 0
  7043                           ;cell_settings.c: 11: if (field_number == 1)
  7044  000AD2  0570               	decf	program_field@field_number& (0+255),w,b
  7045  000AD4  A4D8               	btfss	status,2,c
  7046  000AD6  D002               	goto	l1691
  7047                           
  7048                           ; BSR set to: 0
  7049                           ;cell_settings.c: 12: start_addr = 0x30;
  7050  000AD8  0E30               	movlw	48
  7051  000ADA  D071               	goto	L25
  7052  000ADC                     l1691:
  7053                           
  7054                           ; BSR set to: 0
  7055                           ;cell_settings.c: 13: else if (field_number == 2)
  7056                           
  7057                           ; BSR set to: 0
  7058  000ADC  0E02               	movlw	2
  7059  000ADE  1970               	xorwf	program_field@field_number& (0+255),w,b
  7060  000AE0  A4D8               	btfss	status,2,c
  7061  000AE2  D002               	goto	l1693
  7062                           
  7063                           ; BSR set to: 0
  7064                           ;cell_settings.c: 14: start_addr = 0x50;
  7065  000AE4  0E50               	movlw	80
  7066  000AE6  D06B               	goto	L25
  7067  000AE8                     l1693:
  7068                           
  7069                           ; BSR set to: 0
  7070                           ;cell_settings.c: 15: else if (field_number == 3)
  7071                           
  7072                           ; BSR set to: 0
  7073  000AE8  0E03               	movlw	3
  7074  000AEA  1970               	xorwf	program_field@field_number& (0+255),w,b
  7075  000AEC  A4D8               	btfss	status,2,c
  7076  000AEE  D002               	goto	l1695
  7077                           
  7078                           ; BSR set to: 0
  7079                           ;cell_settings.c: 16: start_addr = 0x70;
  7080  000AF0  0E70               	movlw	112
  7081  000AF2  D065               	goto	L25
  7082  000AF4                     l1695:
  7083                           
  7084                           ; BSR set to: 0
  7085                           ;cell_settings.c: 17: else if (field_number == 4)
  7086                           
  7087                           ; BSR set to: 0
  7088  000AF4  0E04               	movlw	4
  7089  000AF6  1970               	xorwf	program_field@field_number& (0+255),w,b
  7090  000AF8  A4D8               	btfss	status,2,c
  7091  000AFA  D002               	goto	l1697
  7092                           
  7093                           ; BSR set to: 0
  7094                           ;cell_settings.c: 18: start_addr = 0x90;
  7095  000AFC  0E90               	movlw	144
  7096  000AFE  D05F               	goto	L25
  7097  000B00                     l1697:
  7098                           
  7099                           ; BSR set to: 0
  7100                           ;cell_settings.c: 19: else if (field_number == 5)
  7101                           
  7102                           ; BSR set to: 0
  7103  000B00  0E05               	movlw	5
  7104  000B02  1970               	xorwf	program_field@field_number& (0+255),w,b
  7105  000B04  A4D8               	btfss	status,2,c
  7106  000B06  D002               	goto	l1699
  7107                           
  7108                           ; BSR set to: 0
  7109                           ;cell_settings.c: 20: start_addr = 0xC0;
  7110  000B08  0EC0               	movlw	192
  7111  000B0A  D059               	goto	L25
  7112  000B0C                     l1699:
  7113                           
  7114                           ; BSR set to: 0
  7115                           ;cell_settings.c: 21: else if (field_number == 6)
  7116                           
  7117                           ; BSR set to: 0
  7118  000B0C  0E06               	movlw	6
  7119  000B0E  1970               	xorwf	program_field@field_number& (0+255),w,b
  7120  000B10  A4D8               	btfss	status,2,c
  7121  000B12  D002               	goto	l1701
  7122                           
  7123                           ; BSR set to: 0
  7124                           ;cell_settings.c: 22: start_addr = 0xC7;
  7125  000B14  0EC7               	movlw	199
  7126  000B16  D053               	goto	L25
  7127  000B18                     l1701:
  7128                           
  7129                           ; BSR set to: 0
  7130                           ;cell_settings.c: 23: else if (field_number == 7)
  7131                           
  7132                           ; BSR set to: 0
  7133  000B18  0E07               	movlw	7
  7134  000B1A  1970               	xorwf	program_field@field_number& (0+255),w,b
  7135  000B1C  A4D8               	btfss	status,2,c
  7136  000B1E  D002               	goto	l1703
  7137                           
  7138                           ; BSR set to: 0
  7139                           ;cell_settings.c: 24: start_addr = 0xC8;
  7140  000B20  0EC8               	movlw	200
  7141  000B22  D04D               	goto	L25
  7142  000B24                     l1703:
  7143                           
  7144                           ; BSR set to: 0
  7145                           ;cell_settings.c: 25: else if (field_number == 8)
  7146                           
  7147                           ; BSR set to: 0
  7148  000B24  0E08               	movlw	8
  7149  000B26  1970               	xorwf	program_field@field_number& (0+255),w,b
  7150  000B28  A4D8               	btfss	status,2,c
  7151  000B2A  D002               	goto	l1705
  7152                           
  7153                           ; BSR set to: 0
  7154                           ;cell_settings.c: 26: start_addr = 0xC9;
  7155  000B2C  0EC9               	movlw	201
  7156  000B2E  D047               	goto	L25
  7157  000B30                     l1705:
  7158                           
  7159                           ; BSR set to: 0
  7160                           ;cell_settings.c: 27: else if (field_number == 9)
  7161                           
  7162                           ; BSR set to: 0
  7163  000B30  0E09               	movlw	9
  7164  000B32  1970               	xorwf	program_field@field_number& (0+255),w,b
  7165  000B34  A4D8               	btfss	status,2,c
  7166  000B36  D002               	goto	l1707
  7167                           
  7168                           ; BSR set to: 0
  7169                           ;cell_settings.c: 28: start_addr = 0xB8;
  7170  000B38  0EB8               	movlw	184
  7171  000B3A  D041               	goto	L25
  7172  000B3C                     l1707:
  7173                           
  7174                           ; BSR set to: 0
  7175                           ;cell_settings.c: 29: else if (field_number == 10)
  7176                           
  7177                           ; BSR set to: 0
  7178  000B3C  0E0A               	movlw	10
  7179  000B3E  1970               	xorwf	program_field@field_number& (0+255),w,b
  7180  000B40  A4D8               	btfss	status,2,c
  7181  000B42  D002               	goto	l1709
  7182                           
  7183                           ; BSR set to: 0
  7184                           ;cell_settings.c: 30: start_addr = 0xCA;
  7185  000B44  0ECA               	movlw	202
  7186  000B46  D03B               	goto	L25
  7187  000B48                     l1709:
  7188                           
  7189                           ; BSR set to: 0
  7190                           ;cell_settings.c: 31: else if (field_number == 11)
  7191                           
  7192                           ; BSR set to: 0
  7193  000B48  0E0B               	movlw	11
  7194  000B4A  1970               	xorwf	program_field@field_number& (0+255),w,b
  7195  000B4C  A4D8               	btfss	status,2,c
  7196  000B4E  D002               	goto	l1711
  7197                           
  7198                           ; BSR set to: 0
  7199                           ;cell_settings.c: 32: start_addr = 0xD0;
  7200  000B50  0ED0               	movlw	208
  7201  000B52  D035               	goto	L25
  7202  000B54                     l1711:
  7203                           
  7204                           ; BSR set to: 0
  7205                           ;cell_settings.c: 33: else if (field_number == 12)
  7206                           
  7207                           ; BSR set to: 0
  7208  000B54  0E0C               	movlw	12
  7209  000B56  1970               	xorwf	program_field@field_number& (0+255),w,b
  7210  000B58  A4D8               	btfss	status,2,c
  7211  000B5A  D002               	goto	l1713
  7212                           
  7213                           ; BSR set to: 0
  7214                           ;cell_settings.c: 34: start_addr = 0xB9;
  7215  000B5C  0EB9               	movlw	185
  7216  000B5E  D02F               	goto	L25
  7217  000B60                     l1713:
  7218                           
  7219                           ; BSR set to: 0
  7220                           ;cell_settings.c: 35: else if (field_number == 14)
  7221                           
  7222                           ; BSR set to: 0
  7223  000B60  0E0E               	movlw	14
  7224  000B62  1970               	xorwf	program_field@field_number& (0+255),w,b
  7225  000B64  A4D8               	btfss	status,2,c
  7226  000B66  D002               	goto	l1715
  7227                           
  7228                           ; BSR set to: 0
  7229                           ;cell_settings.c: 36: start_addr = 0xBB;
  7230  000B68  0EBB               	movlw	187
  7231  000B6A  D029               	goto	L25
  7232  000B6C                     l1715:
  7233                           
  7234                           ; BSR set to: 0
  7235                           ;cell_settings.c: 37: else if (field_number == 15)
  7236                           
  7237                           ; BSR set to: 0
  7238  000B6C  0E0F               	movlw	15
  7239  000B6E  1970               	xorwf	program_field@field_number& (0+255),w,b
  7240  000B70  A4D8               	btfss	status,2,c
  7241  000B72  D002               	goto	l1717
  7242                           
  7243                           ; BSR set to: 0
  7244                           ;cell_settings.c: 38: start_addr = 0xBC;
  7245  000B74  0EBC               	movlw	188
  7246  000B76  D023               	goto	L25
  7247  000B78                     l1717:
  7248                           
  7249                           ; BSR set to: 0
  7250                           ;cell_settings.c: 39: else if (field_number == 16)
  7251                           
  7252                           ; BSR set to: 0
  7253  000B78  0E10               	movlw	16
  7254  000B7A  1970               	xorwf	program_field@field_number& (0+255),w,b
  7255  000B7C  A4D8               	btfss	status,2,c
  7256  000B7E  D002               	goto	l1719
  7257                           
  7258                           ; BSR set to: 0
  7259                           ;cell_settings.c: 40: start_addr = 0xBD;
  7260  000B80  0EBD               	movlw	189
  7261  000B82  D01D               	goto	L25
  7262  000B84                     l1719:
  7263                           
  7264                           ; BSR set to: 0
  7265                           ;cell_settings.c: 41: else if (field_number == 31)
  7266                           
  7267                           ; BSR set to: 0
  7268  000B84  0E1F               	movlw	31
  7269  000B86  1970               	xorwf	program_field@field_number& (0+255),w,b
  7270  000B88  A4D8               	btfss	status,2,c
  7271  000B8A  D002               	goto	l1721
  7272                           
  7273                           ; BSR set to: 0
  7274                           ;cell_settings.c: 42: start_addr = 0xB0;
  7275  000B8C  0EB0               	movlw	176
  7276  000B8E  D017               	goto	L25
  7277  000B90                     l1721:
  7278                           
  7279                           ; BSR set to: 0
  7280                           ;cell_settings.c: 43: else if (field_number == 32)
  7281                           
  7282                           ; BSR set to: 0
  7283  000B90  0E20               	movlw	32
  7284  000B92  1970               	xorwf	program_field@field_number& (0+255),w,b
  7285  000B94  A4D8               	btfss	status,2,c
  7286  000B96  D002               	goto	l1723
  7287                           
  7288                           ; BSR set to: 0
  7289                           ;cell_settings.c: 44: start_addr = 0xB2;
  7290  000B98  0EB2               	movlw	178
  7291  000B9A  D011               	goto	L25
  7292  000B9C                     l1723:
  7293                           
  7294                           ; BSR set to: 0
  7295                           ;cell_settings.c: 45: else if (field_number == 33)
  7296                           
  7297                           ; BSR set to: 0
  7298  000B9C  0E21               	movlw	33
  7299  000B9E  1970               	xorwf	program_field@field_number& (0+255),w,b
  7300  000BA0  A4D8               	btfss	status,2,c
  7301  000BA2  D002               	goto	l1725
  7302                           
  7303                           ; BSR set to: 0
  7304                           ;cell_settings.c: 46: start_addr = 0xB4;
  7305  000BA4  0EB4               	movlw	180
  7306  000BA6  D00B               	goto	L25
  7307  000BA8                     l1725:
  7308                           
  7309                           ; BSR set to: 0
  7310                           ;cell_settings.c: 47: else if (field_number == 34)
  7311                           
  7312                           ; BSR set to: 0
  7313  000BA8  0E22               	movlw	34
  7314  000BAA  1970               	xorwf	program_field@field_number& (0+255),w,b
  7315  000BAC  A4D8               	btfss	status,2,c
  7316  000BAE  D002               	goto	l1727
  7317                           
  7318                           ; BSR set to: 0
  7319                           ;cell_settings.c: 48: start_addr = 0xB6;
  7320  000BB0  0EB6               	movlw	182
  7321  000BB2  D005               	goto	L25
  7322  000BB4                     l1727:
  7323                           
  7324                           ; BSR set to: 0
  7325                           ;cell_settings.c: 49: else if (field_number == 35)
  7326                           
  7327                           ; BSR set to: 0
  7328  000BB4  0E23               	movlw	35
  7329  000BB6  1970               	xorwf	program_field@field_number& (0+255),w,b
  7330  000BB8  A4D8               	btfss	status,2,c
  7331  000BBA  D003               	goto	l1729
  7332                           
  7333                           ; BSR set to: 0
  7334                           ;cell_settings.c: 50: start_addr = 0x10;
  7335  000BBC  0E10               	movlw	16
  7336  000BBE                     L25:
  7337  000BBE  6F6F               	movwf	program_field@start_addr& (0+255),b
  7338  000BC0  D010               	goto	l1731
  7339  000BC2                     l1729:
  7340                           
  7341                           ; BSR set to: 0
  7342                           ;cell_settings.c: 51: else if (field_number >= 41 && field_number <= 56)
  7343                           
  7344                           ; BSR set to: 0
  7345  000BC2  0E28               	movlw	40
  7346  000BC4  6570               	cpfsgt	program_field@field_number& (0+255),b
  7347  000BC6  D00D               	goto	l1731
  7348                           
  7349                           ; BSR set to: 0
  7350  000BC8  0E39               	movlw	57
  7351  000BCA  6170               	cpfslt	program_field@field_number& (0+255),b
  7352  000BCC  D00A               	goto	l1731
  7353                           
  7354                           ; BSR set to: 0
  7355                           ;cell_settings.c: 52: {
  7356                           ;cell_settings.c: 53: page = 0x01;
  7357  000BCE  0E01               	movlw	1
  7358  000BD0  6F6C               	movwf	program_field@page& (0+255),b
  7359                           
  7360                           ; BSR set to: 0
  7361                           ;cell_settings.c: 54: start_addr = (uint8_t)(0x80 + 6 * (field_number - 41));
  7362  000BD2  5170               	movf	program_field@field_number& (0+255),w,b
  7363  000BD4  0FD7               	addlw	215
  7364  000BD6  0D06               	mullw	6
  7365  000BD8  50F3               	movf	prodl,w,c
  7366  000BDA  0F80               	addlw	128
  7367  000BDC  6F6F               	movwf	program_field@start_addr& (0+255),b
  7368                           
  7369                           ; BSR set to: 0
  7370                           ;cell_settings.c: 55: max_size = 6;
  7371  000BDE  0E06               	movlw	6
  7372  000BE0  6F6D               	movwf	program_field@max_size& (0+255),b
  7373  000BE2                     l1731:
  7374                           
  7375                           ; BSR set to: 0
  7376                           ;cell_settings.c: 56: }
  7377                           ;cell_settings.c: 57: if (size <= max_size)
  7378                           
  7379                           ; BSR set to: 0
  7380                           
  7381                           ; BSR set to: 0
  7382                           
  7383                           ; BSR set to: 0
  7384                           
  7385                           ; BSR set to: 0
  7386                           
  7387                           ; BSR set to: 0
  7388                           
  7389                           ; BSR set to: 0
  7390                           
  7391                           ; BSR set to: 0
  7392                           
  7393                           ; BSR set to: 0
  7394                           
  7395                           ; BSR set to: 0
  7396                           
  7397                           ; BSR set to: 0
  7398                           
  7399                           ; BSR set to: 0
  7400                           
  7401                           ; BSR set to: 0
  7402                           
  7403                           ; BSR set to: 0
  7404                           
  7405                           ; BSR set to: 0
  7406                           
  7407                           ; BSR set to: 0
  7408                           
  7409                           ; BSR set to: 0
  7410                           
  7411                           ; BSR set to: 0
  7412                           
  7413                           ; BSR set to: 0
  7414                           
  7415                           ; BSR set to: 0
  7416                           
  7417                           ; BSR set to: 0
  7418                           
  7419                           ; BSR set to: 0
  7420  000BE2  516A               	movf	program_field@size& (0+255),w,b
  7421  000BE4  5D6D               	subwf	program_field@max_size& (0+255),w,b
  7422  000BE6  A0D8               	btfss	status,0,c
  7423  000BE8  D067               	goto	l1732
  7424                           
  7425                           ; BSR set to: 0
  7426                           ;cell_settings.c: 58: {
  7427                           ;cell_settings.c: 59: if (field_number >= 10)
  7428  000BEA  0E09               	movlw	9
  7429  000BEC  6570               	cpfsgt	program_field@field_number& (0+255),b
  7430  000BEE  D01E               	goto	l1733
  7431                           
  7432                           ; BSR set to: 0
  7433                           ;cell_settings.c: 60: {
  7434                           ;cell_settings.c: 61: sms_buf[0] = (uint8_t)(field_number / 0x0A + 0x41);
  7435  000BF0  C070  F060         	movff	program_field@field_number,___awdiv@dividend
  7436  000BF4  6B61               	clrf	(___awdiv@dividend+1)& (0+255),b
  7437  000BF6  0E00               	movlw	0
  7438  000BF8  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  7439  000BFA  0E0A               	movlw	10
  7440  000BFC  6F62               	movwf	___awdiv@divisor& (0+255),b
  7441  000BFE  EC29  F00F         	call	___awdiv	;wreg free
  7442  000C02  0100               	movlb	0	; () banked
  7443  000C04  5160               	movf	?___awdiv& (0+255),w,b
  7444  000C06  0F41               	addlw	65
  7445  000C08  0102               	movlb	2	; () banked
  7446  000C0A  6FA0               	movwf	_sms_buf& (0+255),b
  7447                           
  7448                           ;cell_settings.c: 62: sms_buf[1] = (uint8_t)(field_number % 0x0A + 0x30);
  7449  000C0C  C070  F060         	movff	program_field@field_number,___awmod@dividend
  7450  000C10  0100               	movlb	0	; () banked
  7451  000C12  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  7452  000C14  0E00               	movlw	0
  7453  000C16  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7454  000C18  0E0A               	movlw	10
  7455  000C1A  6F62               	movwf	___awmod@divisor& (0+255),b
  7456  000C1C  ECA6  F00F         	call	___awmod	;wreg free
  7457  000C20  0100               	movlb	0	; () banked
  7458  000C22  5160               	movf	?___awmod& (0+255),w,b
  7459  000C24  0F30               	addlw	48
  7460  000C26  0102               	movlb	2	; () banked
  7461  000C28  6FA1               	movwf	(_sms_buf+1)& (0+255),b
  7462                           
  7463                           ;cell_settings.c: 63: }
  7464  000C2A  D005               	goto	l1734
  7465  000C2C                     l1733:
  7466                           
  7467                           ;cell_settings.c: 64: else
  7468                           ;cell_settings.c: 65: sms_buf[0] = (uint8_t)(field_number + 0x30);
  7469                           
  7470                           ; BSR set to: 2
  7471  000C2C  0100               	movlb	0	; () banked
  7472  000C2E  5170               	movf	program_field@field_number& (0+255),w,b
  7473  000C30  0F30               	addlw	48
  7474  000C32  0102               	movlb	2	; () banked
  7475  000C34  6FA0               	movwf	_sms_buf& (0+255),b
  7476  000C36                     l1734:
  7477                           
  7478                           ; BSR set to: 2
  7479                           ;cell_settings.c: 66: sms_buf[2] = '#';
  7480                           
  7481                           ; BSR set to: 2
  7482  000C36  0E23               	movlw	35
  7483  000C38  6FA2               	movwf	(_sms_buf+2)& (0+255),b
  7484                           
  7485                           ; BSR set to: 2
  7486                           ;cell_settings.c: 67: for (i = 0; i < size; i++)
  7487  000C3A  0E00               	movlw	0
  7488  000C3C  0100               	movlb	0	; () banked
  7489  000C3E  6F6E               	movwf	program_field@i& (0+255),b
  7490  000C40  D027               	goto	l1735
  7491  000C42                     
  7492                           ; BSR set to: 0
  7493                           ;cell_settings.c: 68: {
  7494                           ;cell_settings.c: 69: ee_write(page, start_addr, data_buf[i]);
  7495                           
  7496                           ; BSR set to: 0
  7497  000C42  C06F  F063         	movff	program_field@start_addr,ee_write@addr
  7498  000C46  516E               	movf	program_field@i& (0+255),w,b
  7499  000C48  0D01               	mullw	1
  7500  000C4A  50F3               	movf	prodl,w,c
  7501  000C4C  2568               	addwf	program_field@data_buf& (0+255),w,b
  7502  000C4E  6ED9               	movwf	fsr2l,c
  7503  000C50  50F4               	movf	prodh,w,c
  7504  000C52  2169               	addwfc	(program_field@data_buf+1)& (0+255),w,b
  7505  000C54  6EDA               	movwf	fsr2h,c
  7506  000C56  50DF               	movf	indf2,w,c
  7507  000C58  6F64               	movwf	ee_write@data& (0+255),b
  7508  000C5A  516C               	movf	program_field@page& (0+255),w,b
  7509  000C5C  EC50  F011         	call	_ee_write
  7510                           
  7511                           ;cell_settings.c: 70: sms_buf[(uint8_t)(i + 3)] = data_buf[i];
  7512  000C60  0100               	movlb	0	; () banked
  7513  000C62  516E               	movf	program_field@i& (0+255),w,b
  7514  000C64  0D01               	mullw	1
  7515  000C66  50F3               	movf	prodl,w,c
  7516  000C68  2568               	addwf	program_field@data_buf& (0+255),w,b
  7517  000C6A  6ED9               	movwf	fsr2l,c
  7518  000C6C  50F4               	movf	prodh,w,c
  7519  000C6E  2169               	addwfc	(program_field@data_buf+1)& (0+255),w,b
  7520  000C70  6EDA               	movwf	fsr2h,c
  7521  000C72  C06E  F06B         	movff	program_field@i,??_program_field
  7522  000C76  0E03               	movlw	3
  7523  000C78  276B               	addwf	??_program_field& (0+255),f,b
  7524  000C7A  516B               	movf	??_program_field& (0+255),w,b
  7525  000C7C  0D01               	mullw	1
  7526  000C7E  0EA0               	movlw	low _sms_buf
  7527  000C80  24F3               	addwf	prodl,w,c
  7528  000C82  6EE1               	movwf	fsr1l,c
  7529  000C84  0E02               	movlw	high _sms_buf
  7530  000C86  20F4               	addwfc	prodh,w,c
  7531  000C88  6EE2               	movwf	fsr1h,c
  7532  000C8A  CFDF FFE7          	movff	indf2,indf1
  7533                           
  7534                           ; BSR set to: 0
  7535  000C8E  2B6E               	incf	program_field@i& (0+255),f,b
  7536  000C90                     l1735:
  7537                           
  7538                           ; BSR set to: 0
  7539                           
  7540                           ; BSR set to: 0
  7541  000C90  516A               	movf	program_field@size& (0+255),w,b
  7542  000C92  5D6E               	subwf	program_field@i& (0+255),w,b
  7543  000C94  A0D8               	btfss	status,0,c
  7544  000C96  D7D5               	goto	l1736
  7545                           
  7546                           ; BSR set to: 0
  7547                           ;cell_settings.c: 71: }
  7548                           ;cell_settings.c: 72: sms_buf[(uint8_t)(i + 3)] = '#';
  7549                           
  7550                           ; BSR set to: 0
  7551  000C98  C06E  F06B         	movff	program_field@i,??_program_field
  7552  000C9C  0E03               	movlw	3
  7553  000C9E  276B               	addwf	??_program_field& (0+255),f,b
  7554  000CA0  516B               	movf	??_program_field& (0+255),w,b
  7555  000CA2  0D01               	mullw	1
  7556  000CA4  0EA0               	movlw	low _sms_buf
  7557  000CA6  24F3               	addwf	prodl,w,c
  7558  000CA8  6ED9               	movwf	fsr2l,c
  7559  000CAA  0E02               	movlw	high _sms_buf
  7560  000CAC  20F4               	addwfc	prodh,w,c
  7561  000CAE  6EDA               	movwf	fsr2h,c
  7562  000CB0  0E23               	movlw	35
  7563  000CB2  6EDF               	movwf	indf2,c
  7564                           
  7565                           ; BSR set to: 0
  7566                           ;cell_settings.c: 73: return 1;
  7567  000CB4  0E01               	movlw	1
  7568                           
  7569                           ; BSR set to: 0
  7570  000CB6  0012               	return	
  7571  000CB8                     l1732:
  7572                           
  7573                           ; BSR set to: 0
  7574                           ;cell_settings.c: 74: }
  7575                           ;cell_settings.c: 75: return 0;
  7576                           
  7577                           ; BSR set to: 0
  7578  000CB8  0E00               	movlw	0
  7579  000CBA  0012               	return	
  7580  000CBC                     __end_of_program_field:
  7581                           	opt stack 0
  7582                           tblptru	equ	0xFF8
  7583                           tblptrh	equ	0xFF7
  7584                           tblptrl	equ	0xFF6
  7585                           tablat	equ	0xFF5
  7586                           prodh	equ	0xFF4
  7587                           prodl	equ	0xFF3
  7588                           intcon	equ	0xFF2
  7589                           postinc0	equ	0xFEE
  7590                           wreg	equ	0xFE8
  7591                           indf1	equ	0xFE7
  7592                           postdec1	equ	0xFE5
  7593                           plusw1	equ	0xFE3
  7594                           fsr1h	equ	0xFE2
  7595                           fsr1l	equ	0xFE1
  7596                           indf2	equ	0xFDF
  7597                           postinc2	equ	0xFDE
  7598                           plusw2	equ	0xFDB
  7599                           fsr2h	equ	0xFDA
  7600                           fsr2l	equ	0xFD9
  7601                           status	equ	0xFD8
  7602                           
  7603 ;; *************** function ___awmod *****************
  7604 ;; Defined at:
  7605 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  7606 ;; Parameters:    Size  Location     Type
  7607 ;;  dividend        2    0[BANK0 ] int 
  7608 ;;  divisor         2    2[BANK0 ] int 
  7609 ;; Auto vars:     Size  Location     Type
  7610 ;;  sign            1    5[BANK0 ] unsigned char 
  7611 ;;  counter         1    4[BANK0 ] unsigned char 
  7612 ;; Return value:  Size  Location     Type
  7613 ;;                  2    0[BANK0 ] int 
  7614 ;; Registers used:
  7615 ;;		wreg, status,2, status,0
  7616 ;; Tracked objects:
  7617 ;;		On entry : 0/0
  7618 ;;		On exit  : 0/0
  7619 ;;		Unchanged: 0/0
  7620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7621 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7622 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7624 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7625 ;;Total ram usage:        6 bytes
  7626 ;; Hardware stack levels used:    1
  7627 ;; Hardware stack levels required when called:    3
  7628 ;; This function calls:
  7629 ;;		Nothing
  7630 ;; This function is called by:
  7631 ;;		_program_field
  7632 ;; This function uses a non-reentrant model
  7633 ;;
  7634                           
  7635                           	psect	text25
  7636  001F4C                     __ptext25:
  7637                           	opt stack 0
  7638  001F4C                     ___awmod:
  7639                           	opt stack 22
  7640                           
  7641                           ; BSR set to: 0
  7642                           ;incstack = 0
  7643  001F4C  0E00               	movlw	0
  7644  001F4E  0100               	movlb	0	; () banked
  7645  001F50  6F65               	movwf	___awmod@sign& (0+255),b
  7646                           
  7647                           ; BSR set to: 0
  7648  001F52  AF61               	btfss	(___awmod@dividend+1)& (0+255),7,b
  7649  001F54  D006               	goto	l1919
  7650                           
  7651                           ; BSR set to: 0
  7652  001F56  6D60               	negf	___awmod@dividend& (0+255),b
  7653  001F58  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  7654  001F5A  B0D8               	btfsc	status,0,c
  7655  001F5C  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  7656                           
  7657                           ; BSR set to: 0
  7658  001F5E  0E01               	movlw	1
  7659  001F60  6F65               	movwf	___awmod@sign& (0+255),b
  7660  001F62                     l1919:
  7661                           
  7662                           ; BSR set to: 0
  7663                           
  7664                           ; BSR set to: 0
  7665  001F62  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  7666  001F64  D004               	goto	l1920
  7667                           
  7668                           ; BSR set to: 0
  7669  001F66  6D62               	negf	___awmod@divisor& (0+255),b
  7670  001F68  1F63               	comf	(___awmod@divisor+1)& (0+255),f,b
  7671  001F6A  B0D8               	btfsc	status,0,c
  7672  001F6C  2B63               	incf	(___awmod@divisor+1)& (0+255),f,b
  7673  001F6E                     l1920:
  7674                           
  7675                           ; BSR set to: 0
  7676                           
  7677                           ; BSR set to: 0
  7678  001F6E  5162               	movf	___awmod@divisor& (0+255),w,b
  7679  001F70  1163               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  7680  001F72  B4D8               	btfsc	status,2,c
  7681  001F74  D018               	goto	l1927
  7682                           
  7683                           ; BSR set to: 0
  7684  001F76  0E01               	movlw	1
  7685  001F78  6F64               	movwf	___awmod@counter& (0+255),b
  7686  001F7A  D004               	goto	l1922
  7687  001F7C                     
  7688                           ; BSR set to: 0
  7689                           
  7690                           ; BSR set to: 0
  7691  001F7C  90D8               	bcf	status,0,c
  7692  001F7E  3762               	rlcf	___awmod@divisor& (0+255),f,b
  7693  001F80  3763               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  7694  001F82  2B64               	incf	___awmod@counter& (0+255),f,b
  7695  001F84                     l1922:
  7696                           
  7697                           ; BSR set to: 0
  7698                           
  7699                           ; BSR set to: 0
  7700  001F84  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  7701  001F86  D7FA               	goto	l1923
  7702  001F88                     u8070:
  7703                           
  7704                           ; BSR set to: 0
  7705                           
  7706                           ; BSR set to: 0
  7707                           
  7708                           ; BSR set to: 0
  7709  001F88  5162               	movf	___awmod@divisor& (0+255),w,b
  7710  001F8A  5D60               	subwf	___awmod@dividend& (0+255),w,b
  7711  001F8C  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  7712  001F8E  5961               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  7713  001F90  A0D8               	btfss	status,0,c
  7714  001F92  D004               	goto	l1926
  7715                           
  7716                           ; BSR set to: 0
  7717  001F94  5162               	movf	___awmod@divisor& (0+255),w,b
  7718  001F96  5F60               	subwf	___awmod@dividend& (0+255),f,b
  7719  001F98  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  7720  001F9A  5B61               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  7721  001F9C                     l1926:
  7722                           
  7723                           ; BSR set to: 0
  7724                           
  7725                           ; BSR set to: 0
  7726  001F9C  90D8               	bcf	status,0,c
  7727  001F9E  3363               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  7728  001FA0  3362               	rrcf	___awmod@divisor& (0+255),f,b
  7729                           
  7730                           ; BSR set to: 0
  7731  001FA2  2F64               	decfsz	___awmod@counter& (0+255),f,b
  7732  001FA4  D7F1               	goto	u8070
  7733  001FA6                     l1927:
  7734                           
  7735                           ; BSR set to: 0
  7736                           
  7737                           ; BSR set to: 0
  7738                           
  7739                           ; BSR set to: 0
  7740  001FA6  5165               	movf	___awmod@sign& (0+255),w,b
  7741  001FA8  B4D8               	btfsc	status,2,c
  7742  001FAA  D004               	goto	l1928
  7743                           
  7744                           ; BSR set to: 0
  7745  001FAC  6D60               	negf	___awmod@dividend& (0+255),b
  7746  001FAE  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  7747  001FB0  B0D8               	btfsc	status,0,c
  7748  001FB2  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  7749  001FB4                     l1928:
  7750                           
  7751                           ; BSR set to: 0
  7752                           
  7753                           ; BSR set to: 0
  7754  001FB4  C060  F060         	movff	___awmod@dividend,?___awmod
  7755  001FB8  C061  F061         	movff	___awmod@dividend+1,?___awmod+1
  7756  001FBC  0012               	return	
  7757  001FBE                     __end_of___awmod:
  7758                           	opt stack 0
  7759                           tblptru	equ	0xFF8
  7760                           tblptrh	equ	0xFF7
  7761                           tblptrl	equ	0xFF6
  7762                           tablat	equ	0xFF5
  7763                           prodh	equ	0xFF4
  7764                           prodl	equ	0xFF3
  7765                           intcon	equ	0xFF2
  7766                           postinc0	equ	0xFEE
  7767                           wreg	equ	0xFE8
  7768                           indf1	equ	0xFE7
  7769                           postdec1	equ	0xFE5
  7770                           plusw1	equ	0xFE3
  7771                           fsr1h	equ	0xFE2
  7772                           fsr1l	equ	0xFE1
  7773                           indf2	equ	0xFDF
  7774                           postinc2	equ	0xFDE
  7775                           plusw2	equ	0xFDB
  7776                           fsr2h	equ	0xFDA
  7777                           fsr2l	equ	0xFD9
  7778                           status	equ	0xFD8
  7779                           
  7780 ;; *************** function ___awdiv *****************
  7781 ;; Defined at:
  7782 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  7783 ;; Parameters:    Size  Location     Type
  7784 ;;  dividend        2    0[BANK0 ] int 
  7785 ;;  divisor         2    2[BANK0 ] int 
  7786 ;; Auto vars:     Size  Location     Type
  7787 ;;  quotient        2    6[BANK0 ] int 
  7788 ;;  sign            1    5[BANK0 ] unsigned char 
  7789 ;;  counter         1    4[BANK0 ] unsigned char 
  7790 ;; Return value:  Size  Location     Type
  7791 ;;                  2    0[BANK0 ] int 
  7792 ;; Registers used:
  7793 ;;		wreg, status,2, status,0
  7794 ;; Tracked objects:
  7795 ;;		On entry : 0/0
  7796 ;;		On exit  : 0/0
  7797 ;;		Unchanged: 0/0
  7798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7799 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7800 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7802 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7803 ;;Total ram usage:        8 bytes
  7804 ;; Hardware stack levels used:    1
  7805 ;; Hardware stack levels required when called:    3
  7806 ;; This function calls:
  7807 ;;		Nothing
  7808 ;; This function is called by:
  7809 ;;		_program_field
  7810 ;; This function uses a non-reentrant model
  7811 ;;
  7812                           
  7813                           	psect	text26
  7814  001E52                     __ptext26:
  7815                           	opt stack 0
  7816  001E52                     ___awdiv:
  7817                           	opt stack 22
  7818                           
  7819                           ; BSR set to: 0
  7820                           ;incstack = 0
  7821  001E52  0E00               	movlw	0
  7822  001E54  0100               	movlb	0	; () banked
  7823  001E56  6F65               	movwf	___awdiv@sign& (0+255),b
  7824                           
  7825                           ; BSR set to: 0
  7826  001E58  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  7827  001E5A  D006               	goto	l1906
  7828                           
  7829                           ; BSR set to: 0
  7830  001E5C  6D62               	negf	___awdiv@divisor& (0+255),b
  7831  001E5E  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
  7832  001E60  B0D8               	btfsc	status,0,c
  7833  001E62  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
  7834                           
  7835                           ; BSR set to: 0
  7836  001E64  0E01               	movlw	1
  7837  001E66  6F65               	movwf	___awdiv@sign& (0+255),b
  7838  001E68                     l1906:
  7839                           
  7840                           ; BSR set to: 0
  7841                           
  7842                           ; BSR set to: 0
  7843  001E68  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  7844  001E6A  D006               	goto	l1907
  7845                           
  7846                           ; BSR set to: 0
  7847  001E6C  6D60               	negf	___awdiv@dividend& (0+255),b
  7848  001E6E  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
  7849  001E70  B0D8               	btfsc	status,0,c
  7850  001E72  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
  7851                           
  7852                           ; BSR set to: 0
  7853  001E74  0E01               	movlw	1
  7854  001E76  1B65               	xorwf	___awdiv@sign& (0+255),f,b
  7855  001E78                     l1907:
  7856                           
  7857                           ; BSR set to: 0
  7858                           
  7859                           ; BSR set to: 0
  7860  001E78  0E00               	movlw	0
  7861  001E7A  6F67               	movwf	(___awdiv@quotient+1)& (0+255),b
  7862  001E7C  0E00               	movlw	0
  7863  001E7E  6F66               	movwf	___awdiv@quotient& (0+255),b
  7864                           
  7865                           ; BSR set to: 0
  7866  001E80  5162               	movf	___awdiv@divisor& (0+255),w,b
  7867  001E82  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  7868  001E84  B4D8               	btfsc	status,2,c
  7869  001E86  D01C               	goto	l1914
  7870                           
  7871                           ; BSR set to: 0
  7872  001E88  0E01               	movlw	1
  7873  001E8A  6F64               	movwf	___awdiv@counter& (0+255),b
  7874  001E8C  D004               	goto	l1909
  7875  001E8E                     
  7876                           ; BSR set to: 0
  7877                           
  7878                           ; BSR set to: 0
  7879  001E8E  90D8               	bcf	status,0,c
  7880  001E90  3762               	rlcf	___awdiv@divisor& (0+255),f,b
  7881  001E92  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  7882  001E94  2B64               	incf	___awdiv@counter& (0+255),f,b
  7883  001E96                     l1909:
  7884                           
  7885                           ; BSR set to: 0
  7886                           
  7887                           ; BSR set to: 0
  7888  001E96  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  7889  001E98  D7FA               	goto	l1910
  7890  001E9A                     u8010:
  7891                           
  7892                           ; BSR set to: 0
  7893                           
  7894                           ; BSR set to: 0
  7895                           
  7896                           ; BSR set to: 0
  7897  001E9A  90D8               	bcf	status,0,c
  7898  001E9C  3766               	rlcf	___awdiv@quotient& (0+255),f,b
  7899  001E9E  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  7900                           
  7901                           ; BSR set to: 0
  7902  001EA0  5162               	movf	___awdiv@divisor& (0+255),w,b
  7903  001EA2  5D60               	subwf	___awdiv@dividend& (0+255),w,b
  7904  001EA4  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  7905  001EA6  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  7906  001EA8  A0D8               	btfss	status,0,c
  7907  001EAA  D005               	goto	l1913
  7908                           
  7909                           ; BSR set to: 0
  7910  001EAC  5162               	movf	___awdiv@divisor& (0+255),w,b
  7911  001EAE  5F60               	subwf	___awdiv@dividend& (0+255),f,b
  7912  001EB0  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  7913  001EB2  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  7914                           
  7915                           ; BSR set to: 0
  7916  001EB4  8166               	bsf	___awdiv@quotient& (0+255),0,b
  7917  001EB6                     l1913:
  7918                           
  7919                           ; BSR set to: 0
  7920                           
  7921                           ; BSR set to: 0
  7922  001EB6  90D8               	bcf	status,0,c
  7923  001EB8  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  7924  001EBA  3362               	rrcf	___awdiv@divisor& (0+255),f,b
  7925                           
  7926                           ; BSR set to: 0
  7927  001EBC  2F64               	decfsz	___awdiv@counter& (0+255),f,b
  7928  001EBE  D7ED               	goto	u8010
  7929  001EC0                     l1914:
  7930                           
  7931                           ; BSR set to: 0
  7932                           
  7933                           ; BSR set to: 0
  7934                           
  7935                           ; BSR set to: 0
  7936  001EC0  5165               	movf	___awdiv@sign& (0+255),w,b
  7937  001EC2  B4D8               	btfsc	status,2,c
  7938  001EC4  D004               	goto	l1915
  7939                           
  7940                           ; BSR set to: 0
  7941  001EC6  6D66               	negf	___awdiv@quotient& (0+255),b
  7942  001EC8  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
  7943  001ECA  B0D8               	btfsc	status,0,c
  7944  001ECC  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
  7945  001ECE                     l1915:
  7946                           
  7947                           ; BSR set to: 0
  7948                           
  7949                           ; BSR set to: 0
  7950  001ECE  C066  F060         	movff	___awdiv@quotient,?___awdiv
  7951  001ED2  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
  7952  001ED6  0012               	return	
  7953  001ED8                     __end_of___awdiv:
  7954                           	opt stack 0
  7955                           tblptru	equ	0xFF8
  7956                           tblptrh	equ	0xFF7
  7957                           tblptrl	equ	0xFF6
  7958                           tablat	equ	0xFF5
  7959                           prodh	equ	0xFF4
  7960                           prodl	equ	0xFF3
  7961                           intcon	equ	0xFF2
  7962                           postinc0	equ	0xFEE
  7963                           wreg	equ	0xFE8
  7964                           indf1	equ	0xFE7
  7965                           postdec1	equ	0xFE5
  7966                           plusw1	equ	0xFE3
  7967                           fsr1h	equ	0xFE2
  7968                           fsr1l	equ	0xFE1
  7969                           indf2	equ	0xFDF
  7970                           postinc2	equ	0xFDE
  7971                           plusw2	equ	0xFDB
  7972                           fsr2h	equ	0xFDA
  7973                           fsr2l	equ	0xFD9
  7974                           status	equ	0xFD8
  7975                           
  7976 ;; *************** function _parse_cmgl *****************
  7977 ;; Defined at:
  7978 ;;		line 221 in file "sms.c"
  7979 ;; Parameters:    Size  Location     Type
  7980 ;;		None
  7981 ;; Auto vars:     Size  Location     Type
  7982 ;;  i               1    7[BANK0 ] unsigned char 
  7983 ;;  rec_msg         5    2[BANK0 ] unsigned char [5]
  7984 ;; Return value:  Size  Location     Type
  7985 ;;                  1    wreg      unsigned char 
  7986 ;; Registers used:
  7987 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7988 ;; Tracked objects:
  7989 ;;		On entry : 0/0
  7990 ;;		On exit  : 0/0
  7991 ;;		Unchanged: 0/0
  7992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7994 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7995 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7996 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7997 ;;Total ram usage:        8 bytes
  7998 ;; Hardware stack levels used:    1
  7999 ;; Hardware stack levels required when called:    3
  8000 ;; This function calls:
  8001 ;;		Nothing
  8002 ;; This function is called by:
  8003 ;;		_read_sms
  8004 ;; This function uses a non-reentrant model
  8005 ;;
  8006                           
  8007                           	psect	text27
  8008  001A88                     __ptext27:
  8009                           	opt stack 0
  8010  001A88                     _parse_cmgl:
  8011                           	opt stack 24
  8012                           
  8013                           ;sms.c: 223: uint8_t rec_msg[] = "REC ";
  8014                           
  8015                           ; BSR set to: 0
  8016                           ;incstack = 0
  8017  001A88  EE21  F0B9         	lfsr	2,parse_cmgl@F6856
  8018  001A8C  EE10  F062         	lfsr	1,parse_cmgl@rec_msg
  8019  001A90  0E04               	movlw	4
  8020  001A92                     u9081:
  8021  001A92  CFDB FFE3          	movff	plusw2,plusw1
  8022  001A96  06E8               	decf	wreg,f,c
  8023  001A98  E2FC               	bc	u9081
  8024                           
  8025                           ;sms.c: 224: for (uint8_t i = 0; i < sizeof(mdRxBuf); i++)
  8026  001A9A  0E00               	movlw	0
  8027  001A9C  0100               	movlb	0	; () banked
  8028  001A9E  6F67               	movwf	parse_cmgl@i& (0+255),b
  8029                           
  8030                           ; BSR set to: 0
  8031  001AA0  0E9F               	movlw	159
  8032  001AA2  6567               	cpfsgt	parse_cmgl@i& (0+255),b
  8033  001AA4  D001               	goto	l828
  8034  001AA6  D04E               	goto	u9140
  8035  001AA8                     l828:
  8036                           
  8037                           ; BSR set to: 0
  8038                           ;sms.c: 225: {
  8039                           ;sms.c: 226: if (mdRxBuf[i] == rec_msg[0] && mdRxBuf[(uint8_t)(i + 1)] == rec_msg[1] && 
      +                          mdRxBuf[(uint8_t)(i + 2)] == rec_msg[2] && mdRxBuf[(uint8_t)(i + 3)] == rec_msg[3])
  8040                           
  8041                           ; BSR set to: 0
  8042  001AA8  5167               	movf	parse_cmgl@i& (0+255),w,b
  8043  001AAA  0D01               	mullw	1
  8044  001AAC  0E00               	movlw	low _mdRxBuf
  8045  001AAE  24F3               	addwf	prodl,w,c
  8046  001AB0  6ED9               	movwf	fsr2l,c
  8047  001AB2  0E02               	movlw	high _mdRxBuf
  8048  001AB4  20F4               	addwfc	prodh,w,c
  8049  001AB6  6EDA               	movwf	fsr2h,c
  8050  001AB8  5162               	movf	parse_cmgl@rec_msg& (0+255),w,b
  8051  001ABA  18DE               	xorwf	postinc2,w,c
  8052  001ABC  A4D8               	btfss	status,2,c
  8053  001ABE  D040               	goto	l830
  8054                           
  8055                           ; BSR set to: 0
  8056  001AC0  C067  F060         	movff	parse_cmgl@i,??_parse_cmgl
  8057  001AC4  0E01               	movlw	1
  8058  001AC6  2760               	addwf	??_parse_cmgl& (0+255),f,b
  8059  001AC8  5160               	movf	??_parse_cmgl& (0+255),w,b
  8060  001ACA  0D01               	mullw	1
  8061  001ACC  0E00               	movlw	low _mdRxBuf
  8062  001ACE  24F3               	addwf	prodl,w,c
  8063  001AD0  6ED9               	movwf	fsr2l,c
  8064  001AD2  0E02               	movlw	high _mdRxBuf
  8065  001AD4  20F4               	addwfc	prodh,w,c
  8066  001AD6  6EDA               	movwf	fsr2h,c
  8067  001AD8  5163               	movf	(parse_cmgl@rec_msg+1)& (0+255),w,b
  8068  001ADA  18DE               	xorwf	postinc2,w,c
  8069  001ADC  A4D8               	btfss	status,2,c
  8070  001ADE  D030               	goto	l830
  8071                           
  8072                           ; BSR set to: 0
  8073  001AE0  C067  F060         	movff	parse_cmgl@i,??_parse_cmgl
  8074  001AE4  0E02               	movlw	2
  8075  001AE6  2760               	addwf	??_parse_cmgl& (0+255),f,b
  8076  001AE8  5160               	movf	??_parse_cmgl& (0+255),w,b
  8077  001AEA  0D01               	mullw	1
  8078  001AEC  0E00               	movlw	low _mdRxBuf
  8079  001AEE  24F3               	addwf	prodl,w,c
  8080  001AF0  6ED9               	movwf	fsr2l,c
  8081  001AF2  0E02               	movlw	high _mdRxBuf
  8082  001AF4  20F4               	addwfc	prodh,w,c
  8083  001AF6  6EDA               	movwf	fsr2h,c
  8084  001AF8  5164               	movf	(parse_cmgl@rec_msg+2)& (0+255),w,b
  8085  001AFA  18DE               	xorwf	postinc2,w,c
  8086  001AFC  A4D8               	btfss	status,2,c
  8087  001AFE  D020               	goto	l830
  8088                           
  8089                           ; BSR set to: 0
  8090  001B00  C067  F060         	movff	parse_cmgl@i,??_parse_cmgl
  8091  001B04  0E03               	movlw	3
  8092  001B06  2760               	addwf	??_parse_cmgl& (0+255),f,b
  8093  001B08  5160               	movf	??_parse_cmgl& (0+255),w,b
  8094  001B0A  0D01               	mullw	1
  8095  001B0C  0E00               	movlw	low _mdRxBuf
  8096  001B0E  24F3               	addwf	prodl,w,c
  8097  001B10  6ED9               	movwf	fsr2l,c
  8098  001B12  0E02               	movlw	high _mdRxBuf
  8099  001B14  20F4               	addwfc	prodh,w,c
  8100  001B16  6EDA               	movwf	fsr2h,c
  8101  001B18  5165               	movf	(parse_cmgl@rec_msg+3)& (0+255),w,b
  8102  001B1A  18DE               	xorwf	postinc2,w,c
  8103  001B1C  A4D8               	btfss	status,2,c
  8104  001B1E  D010               	goto	l830
  8105                           
  8106                           ; BSR set to: 0
  8107                           ;sms.c: 228: {
  8108                           ;sms.c: 229: smsMsgIndex = mdRxBuf[(uint8_t)(i - 3)];
  8109  001B20  C067  F060         	movff	parse_cmgl@i,??_parse_cmgl
  8110  001B24  0EFD               	movlw	253
  8111  001B26  2760               	addwf	??_parse_cmgl& (0+255),f,b
  8112  001B28  5160               	movf	??_parse_cmgl& (0+255),w,b
  8113  001B2A  0D01               	mullw	1
  8114  001B2C  0E00               	movlw	low _mdRxBuf
  8115  001B2E  24F3               	addwf	prodl,w,c
  8116  001B30  6ED9               	movwf	fsr2l,c
  8117  001B32  0E02               	movlw	high _mdRxBuf
  8118  001B34  20F4               	addwfc	prodh,w,c
  8119  001B36  6EDA               	movwf	fsr2h,c
  8120  001B38  50DF               	movf	indf2,w,c
  8121  001B3A  6FC3               	movwf	_smsMsgIndex& (0+255),b
  8122                           
  8123                           ; BSR set to: 0
  8124                           ;sms.c: 230: return 1;
  8125  001B3C  0E01               	movlw	1
  8126                           
  8127                           ; BSR set to: 0
  8128  001B3E  0012               	return	
  8129  001B40                     l830:
  8130                           
  8131                           ; BSR set to: 0
  8132                           ;sms.c: 232: else
  8133                           ;sms.c: 233: return 4;
  8134                           
  8135                           ; BSR set to: 0
  8136  001B40  0E04               	movlw	4
  8137                           
  8138                           ; BSR set to: 0
  8139  001B42  0012               	return	
  8140  001B44                     u9140:
  8141                           
  8142                           ; BSR set to: 0
  8143                           ;sms.c: 234: }
  8144                           ;sms.c: 235: return 4;
  8145                           
  8146                           ; BSR set to: 0
  8147  001B44  0E04               	movlw	4
  8148  001B46  0012               	return	
  8149  001B48                     __end_of_parse_cmgl:
  8150                           	opt stack 0
  8151                           tblptru	equ	0xFF8
  8152                           tblptrh	equ	0xFF7
  8153                           tblptrl	equ	0xFF6
  8154                           tablat	equ	0xFF5
  8155                           prodh	equ	0xFF4
  8156                           prodl	equ	0xFF3
  8157                           intcon	equ	0xFF2
  8158                           postinc0	equ	0xFEE
  8159                           wreg	equ	0xFE8
  8160                           indf1	equ	0xFE7
  8161                           postdec1	equ	0xFE5
  8162                           plusw1	equ	0xFE3
  8163                           fsr1h	equ	0xFE2
  8164                           fsr1l	equ	0xFE1
  8165                           indf2	equ	0xFDF
  8166                           postinc2	equ	0xFDE
  8167                           plusw2	equ	0xFDB
  8168                           fsr2h	equ	0xFDA
  8169                           fsr2l	equ	0xFD9
  8170                           status	equ	0xFD8
  8171                           
  8172 ;; *************** function _md_uart_write_str_ok *****************
  8173 ;; Defined at:
  8174 ;;		line 102 in file "uart.c"
  8175 ;; Parameters:    Size  Location     Type
  8176 ;;  data            2    1[BANK0 ] PTR unsigned char 
  8177 ;;		 -> startup_ok@csq(9), startup_ok@cereg(12), startup_ok@creg(11), startup_ok@cpin(11), 
  8178 ;;		 -> startup_ok@queryVersion(10), startup_ok@ledpattern(12), startup_ok@ledCfg(16), startup_ok@baud(16), 
  8179 ;;		 -> startup_ok@cmee(12), startup_ok@ate(7), startup_ok@at(5), sms_buf(40), 
  8180 ;;		 -> send_sms_ok@msgIndex(3), send_sms_ok@cmgs(9), ph_num(9), RAM(3895), 
  8181 ;;		 -> read_sms@cmgd(9), read_sms@msgIndex(3), read_sms@cmgr(9), read_sms@cmgl(16), 
  8182 ;;		 -> start_sms_ok@cnmi(14), start_sms_ok@cpms(25), start_sms_ok@cmgf(12), 
  8183 ;;  len1            1    3[BANK0 ] unsigned char 
  8184 ;;  wantOk          1    4[BANK0 ] unsigned char 
  8185 ;;  waitToSendMo    1    5[BANK0 ] unsigned char 
  8186 ;; Auto vars:     Size  Location     Type
  8187 ;;  index           1    7[BANK0 ] unsigned char 
  8188 ;;  pos             1    6[BANK0 ] unsigned char 
  8189 ;; Return value:  Size  Location     Type
  8190 ;;                  1    wreg      unsigned char 
  8191 ;; Registers used:
  8192 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8193 ;; Tracked objects:
  8194 ;;		On entry : 0/0
  8195 ;;		On exit  : 0/0
  8196 ;;		Unchanged: 0/0
  8197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8198 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8199 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8201 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8202 ;;Total ram usage:        7 bytes
  8203 ;; Hardware stack levels used:    1
  8204 ;; Hardware stack levels required when called:    4
  8205 ;; This function calls:
  8206 ;;		_disable_tmr5
  8207 ;;		_enable_md_rxint
  8208 ;;		_md_uart_send
  8209 ;;		_reload_tmr5_pt25s
  8210 ;; This function is called by:
  8211 ;;		_start_sms_ok
  8212 ;;		_read_sms
  8213 ;;		_send_sms_ok
  8214 ;;		_startup_ok
  8215 ;; This function uses a non-reentrant model
  8216 ;;
  8217                           
  8218                           	psect	text28
  8219  0012DA                     __ptext28:
  8220                           	opt stack 0
  8221  0012DA                     _md_uart_write_str_ok:
  8222                           	opt stack 23
  8223                           
  8224                           ;uart.c: 105: if (!waiting_uart && !waiting_carrot)
  8225                           
  8226                           ; BSR set to: 0
  8227                           ;incstack = 0
  8228  0012DA  5006               	movf	_waiting_uart,w,c
  8229  0012DC  A4D8               	btfss	status,2,c
  8230  0012DE  D052               	goto	u7500
  8231  0012E0  5005               	movf	_waiting_carrot,w,c
  8232  0012E2  A4D8               	btfss	status,2,c
  8233  0012E4  D04F               	goto	u7500
  8234                           
  8235                           ;uart.c: 106: {
  8236                           ;uart.c: 107: uint8_t index = 0, pos = 0;
  8237  0012E6  0E00               	movlw	0
  8238  0012E8  0100               	movlb	0	; () banked
  8239  0012EA  6F67               	movwf	md_uart_write_str_ok@index& (0+255),b
  8240  0012EC  0E00               	movlw	0
  8241  0012EE  6F66               	movwf	md_uart_write_str_ok@pos& (0+255),b
  8242                           
  8243                           ; BSR set to: 0
  8244                           ;uart.c: 108: CREN1 = 0;
  8245  0012F0  98AB               	bcf	4011,4,c	;volatile
  8246                           
  8247                           ;uart.c: 109: tmr5_cnt = 0;
  8248  0012F2  0E00               	movlw	0
  8249  0012F4  6E1B               	movwf	_tmr5_cnt,c
  8250                           
  8251                           ;uart.c: 110: receivedOK = 0;
  8252  0012F6  0E00               	movlw	0
  8253  0012F8  6E0A               	movwf	_receivedOK,c
  8254                           
  8255                           ;uart.c: 111: receivedERR = 0;
  8256  0012FA  0E00               	movlw	0
  8257  0012FC  6E09               	movwf	_receivedERR,c
  8258                           
  8259                           ;uart.c: 112: timedOut = 0;
  8260  0012FE  0E00               	movlw	0
  8261  001300  6E07               	movwf	_timedOut,c
  8262                           
  8263                           ;uart.c: 113: while (numUartRetries-- > 0 && !receivedOK)
  8264  001302  D039               	goto	l1506
  8265  001304                     
  8266                           ;uart.c: 114: {
  8267                           ;uart.c: 115: timedOut = 0;
  8268                           
  8269                           ; BSR set to: 0
  8270  001304  0E00               	movlw	0
  8271  001306  6E07               	movwf	_timedOut,c
  8272                           
  8273                           ;uart.c: 116: for (index = 0; index < len1; index++)
  8274  001308  0E00               	movlw	0
  8275  00130A  0100               	movlb	0	; () banked
  8276  00130C  6F67               	movwf	md_uart_write_str_ok@index& (0+255),b
  8277  00130E  D01B               	goto	l1501
  8278  001310                     
  8279                           ; BSR set to: 0
  8280                           ;uart.c: 117: {
  8281                           ;uart.c: 118: referenceBuf[index] = *data;
  8282                           
  8283                           ; BSR set to: 0
  8284  001310  C061  FFD9         	movff	md_uart_write_str_ok@data,fsr2l
  8285  001314  C062  FFDA         	movff	md_uart_write_str_ok@data+1,fsr2h
  8286  001318  5167               	movf	md_uart_write_str_ok@index& (0+255),w,b
  8287  00131A  0D01               	mullw	1
  8288  00131C  0E40               	movlw	low _referenceBuf
  8289  00131E  24F3               	addwf	prodl,w,c
  8290  001320  6EE1               	movwf	fsr1l,c
  8291  001322  0E03               	movlw	high _referenceBuf
  8292  001324  20F4               	addwfc	prodh,w,c
  8293  001326  6EE2               	movwf	fsr1h,c
  8294  001328  CFDF FFE7          	movff	indf2,indf1
  8295                           
  8296                           ; BSR set to: 0
  8297                           ;uart.c: 119: currentChar = *data;
  8298  00132C  C061  FFD9         	movff	md_uart_write_str_ok@data,fsr2l
  8299  001330  C062  FFDA         	movff	md_uart_write_str_ok@data+1,fsr2h
  8300  001334  50DF               	movf	indf2,w,c
  8301  001336  6E16               	movwf	_currentChar,c
  8302                           
  8303                           ; BSR set to: 0
  8304                           ;uart.c: 120: md_uart_send(currentChar);
  8305  001338  5016               	movf	_currentChar,w,c
  8306  00133A  EC65  F012         	call	_md_uart_send
  8307                           
  8308                           ;uart.c: 121: data++;
  8309  00133E  0100               	movlb	0	; () banked
  8310  001340  4B61               	infsnz	md_uart_write_str_ok@data& (0+255),f,b
  8311  001342  2B62               	incf	(md_uart_write_str_ok@data+1)& (0+255),f,b
  8312                           
  8313                           ; BSR set to: 0
  8314  001344  2B67               	incf	md_uart_write_str_ok@index& (0+255),f,b
  8315  001346                     l1501:
  8316                           
  8317                           ; BSR set to: 0
  8318                           
  8319                           ; BSR set to: 0
  8320  001346  5163               	movf	md_uart_write_str_ok@len1& (0+255),w,b
  8321  001348  5D67               	subwf	md_uart_write_str_ok@index& (0+255),w,b
  8322  00134A  A0D8               	btfss	status,0,c
  8323  00134C  D7E1               	goto	l1502
  8324                           
  8325                           ; BSR set to: 0
  8326                           ;uart.c: 122: }
  8327                           ;uart.c: 123: if (!waitToSendMoreData && wantOk)
  8328                           
  8329                           ; BSR set to: 0
  8330  00134E  5165               	movf	md_uart_write_str_ok@waitToSendMoreData& (0+255),w,b
  8331  001350  A4D8               	btfss	status,2,c
  8332  001352  D00B               	goto	l1504
  8333                           
  8334                           ; BSR set to: 0
  8335  001354  5164               	movf	md_uart_write_str_ok@wantOk& (0+255),w,b
  8336  001356  B4D8               	btfsc	status,2,c
  8337  001358  D008               	goto	l1504
  8338                           
  8339                           ; BSR set to: 0
  8340                           ;uart.c: 124: {
  8341                           ;uart.c: 125: CREN1 = 1;
  8342  00135A  88AB               	bsf	4011,4,c	;volatile
  8343                           
  8344                           ; BSR set to: 0
  8345                           ;uart.c: 126: enable_md_rxint();
  8346  00135C  EC7A  F012         	call	_enable_md_rxint	;wreg free
  8347                           
  8348                           ;uart.c: 127: reload_tmr5_pt25s();
  8349  001360  EC25  F012         	call	_reload_tmr5_pt25s	;wreg free
  8350                           
  8351                           ;uart.c: 128: waiting_uart = 1;
  8352  001364  0E01               	movlw	1
  8353  001366  6E06               	movwf	_waiting_uart,c
  8354                           
  8355                           ;uart.c: 129: }
  8356  001368  D006               	goto	l1506
  8357  00136A                     l1504:
  8358                           
  8359                           ;uart.c: 130: else if (waitToSendMoreData)
  8360  00136A  0100               	movlb	0	; () banked
  8361  00136C  5165               	movf	md_uart_write_str_ok@waitToSendMoreData& (0+255),w,b
  8362  00136E  B4D8               	btfsc	status,2,c
  8363  001370  D002               	goto	l1506
  8364                           
  8365                           ; BSR set to: 0
  8366                           ;uart.c: 131: waiting_carrot = 1;
  8367  001372  0E01               	movlw	1
  8368  001374  6E05               	movwf	_waiting_carrot,c
  8369  001376                     l1506:
  8370                           
  8371                           ; BSR set to: 0
  8372                           
  8373                           ; BSR set to: 0
  8374                           
  8375                           ; BSR set to: 0
  8376  001376  0644               	decf	_numUartRetries,f,c
  8377  001378  2844               	incf	_numUartRetries,w,c
  8378  00137A  B4D8               	btfsc	status,2,c
  8379  00137C  D003               	goto	u7500
  8380  00137E  500A               	movf	_receivedOK,w,c
  8381  001380  B4D8               	btfsc	status,2,c
  8382  001382  D7C0               	goto	l1500
  8383  001384                     u7500:
  8384                           
  8385                           ;uart.c: 132: }
  8386                           ;uart.c: 133: }
  8387                           ;uart.c: 135: if (waitToSendMoreData && waiting_carrot)
  8388  001384  0100               	movlb	0	; () banked
  8389  001386  5165               	movf	md_uart_write_str_ok@waitToSendMoreData& (0+255),w,b
  8390  001388  B4D8               	btfsc	status,2,c
  8391  00138A  D014               	goto	l1516
  8392                           
  8393                           ; BSR set to: 0
  8394  00138C  5005               	movf	_waiting_carrot,w,c
  8395  00138E  B4D8               	btfsc	status,2,c
  8396  001390  D011               	goto	l1516
  8397                           
  8398                           ; BSR set to: 0
  8399                           ;uart.c: 136: {
  8400                           ;uart.c: 137: CREN1 = 1;
  8401  001392  88AB               	bsf	4011,4,c	;volatile
  8402  001394                     
  8403                           ; BSR set to: 0
  8404  001394  AA9E               	btfss	3998,5,c	;volatile
  8405  001396  D7FE               	goto	l1512
  8406                           
  8407                           ;uart.c: 139: currentChar = RC1REG;
  8408  001398  CFAE F016          	movff	4014,_currentChar	;volatile
  8409                           
  8410                           ;uart.c: 140: if (currentChar == '<')
  8411  00139C  0E3C               	movlw	60
  8412  00139E  1816               	xorwf	_currentChar,w,c
  8413  0013A0  A4D8               	btfss	status,2,c
  8414  0013A2  D004               	goto	l1514
  8415                           
  8416                           ;uart.c: 141: {
  8417                           ;uart.c: 142: waiting_carrot = 0;
  8418  0013A4  0E00               	movlw	0
  8419  0013A6  6E05               	movwf	_waiting_carrot,c
  8420                           
  8421                           ;uart.c: 143: return 1;
  8422  0013A8  0E01               	movlw	1
  8423  0013AA  0012               	return	
  8424  0013AC                     l1514:
  8425                           
  8426                           ;uart.c: 145: else
  8427                           ;uart.c: 146: {
  8428                           ;uart.c: 147: waiting_carrot = 0;
  8429  0013AC  0E00               	movlw	0
  8430  0013AE  6E05               	movwf	_waiting_carrot,c
  8431                           
  8432                           ;uart.c: 148: return 4;
  8433  0013B0  0E04               	movlw	4
  8434  0013B2  0012               	return	
  8435  0013B4                     l1516:
  8436                           
  8437                           ;uart.c: 149: }
  8438                           ;uart.c: 150: }
  8439                           ;uart.c: 151: if (wantOk && waiting_uart)
  8440  0013B4  0100               	movlb	0	; () banked
  8441  0013B6  5164               	movf	md_uart_write_str_ok@wantOk& (0+255),w,b
  8442  0013B8  B4D8               	btfsc	status,2,c
  8443  0013BA  D023               	goto	l1517
  8444                           
  8445                           ; BSR set to: 0
  8446  0013BC  5006               	movf	_waiting_uart,w,c
  8447  0013BE  B4D8               	btfsc	status,2,c
  8448  0013C0  D020               	goto	l1517
  8449                           
  8450                           ; BSR set to: 0
  8451                           ;uart.c: 152: {
  8452                           ;uart.c: 153: if (receivedOK)
  8453  0013C2  500A               	movf	_receivedOK,w,c
  8454  0013C4  B4D8               	btfsc	status,2,c
  8455  0013C6  D007               	goto	l1518
  8456                           
  8457                           ; BSR set to: 0
  8458                           ;uart.c: 154: {
  8459                           ;uart.c: 155: disable_tmr5();
  8460  0013C8  EC80  F012         	call	_disable_tmr5	;wreg free
  8461                           
  8462                           ;uart.c: 156: CREN1 = 0;
  8463  0013CC  98AB               	bcf	4011,4,c	;volatile
  8464                           
  8465                           ;uart.c: 157: waiting_uart = 0;
  8466  0013CE  0E00               	movlw	0
  8467  0013D0  6E06               	movwf	_waiting_uart,c
  8468                           
  8469                           ;uart.c: 158: return 1;
  8470  0013D2  0E01               	movlw	1
  8471  0013D4  0012               	return	
  8472  0013D6                     l1518:
  8473                           
  8474                           ;uart.c: 160: else if (receivedERR)
  8475  0013D6  5009               	movf	_receivedERR,w,c
  8476  0013D8  B4D8               	btfsc	status,2,c
  8477  0013DA  D007               	goto	l1520
  8478                           
  8479                           ;uart.c: 161: {
  8480                           ;uart.c: 162: disable_tmr5();
  8481  0013DC  EC80  F012         	call	_disable_tmr5	;wreg free
  8482                           
  8483                           ;uart.c: 163: CREN1 = 0;
  8484  0013E0  98AB               	bcf	4011,4,c	;volatile
  8485                           
  8486                           ;uart.c: 164: waiting_uart = 0;
  8487  0013E2  0E00               	movlw	0
  8488  0013E4  6E06               	movwf	_waiting_uart,c
  8489                           
  8490                           ;uart.c: 165: return 4;
  8491  0013E6  0E04               	movlw	4
  8492  0013E8  0012               	return	
  8493  0013EA                     l1520:
  8494                           
  8495                           ;uart.c: 167: else if (timedOut)
  8496  0013EA  5007               	movf	_timedOut,w,c
  8497  0013EC  B4D8               	btfsc	status,2,c
  8498  0013EE  D007               	goto	l1522
  8499                           
  8500                           ;uart.c: 168: {
  8501                           ;uart.c: 169: disable_tmr5();
  8502  0013F0  EC80  F012         	call	_disable_tmr5	;wreg free
  8503                           
  8504                           ;uart.c: 170: CREN1 = 0;
  8505  0013F4  98AB               	bcf	4011,4,c	;volatile
  8506                           
  8507                           ;uart.c: 171: waiting_uart = 0;
  8508  0013F6  0E00               	movlw	0
  8509  0013F8  6E06               	movwf	_waiting_uart,c
  8510                           
  8511                           ;uart.c: 172: return 5;
  8512  0013FA  0E05               	movlw	5
  8513  0013FC  0012               	return	
  8514  0013FE                     l1522:
  8515                           
  8516                           ;uart.c: 174: else
  8517                           ;uart.c: 175: return 3;
  8518  0013FE  0E03               	movlw	3
  8519  001400  0012               	return	
  8520  001402                     l1517:
  8521                           
  8522                           ;uart.c: 177: else if (!wantOk)
  8523  001402  0100               	movlb	0	; () banked
  8524  001404  5164               	movf	md_uart_write_str_ok@wantOk& (0+255),w,b
  8525  001406  A4D8               	btfss	status,2,c
  8526  001408  D004               	goto	l1525
  8527                           
  8528                           ; BSR set to: 0
  8529                           ;uart.c: 178: {
  8530                           ;uart.c: 179: receivedOK = 1;
  8531  00140A  0E01               	movlw	1
  8532  00140C  6E0A               	movwf	_receivedOK,c
  8533                           
  8534                           ; BSR set to: 0
  8535                           ;uart.c: 180: return 1;
  8536  00140E  0E01               	movlw	1
  8537                           
  8538                           ; BSR set to: 0
  8539  001410  0012               	return	
  8540  001412                     l1525:
  8541                           
  8542                           ;uart.c: 181: }
  8543                           ;uart.c: 194: return 4;
  8544                           
  8545                           ; BSR set to: 0
  8546                           
  8547                           ; BSR set to: 0
  8548  001412  0E04               	movlw	4
  8549  001414  0012               	return	
  8550  001416                     __end_of_md_uart_write_str_ok:
  8551                           	opt stack 0
  8552                           tblptru	equ	0xFF8
  8553                           tblptrh	equ	0xFF7
  8554                           tblptrl	equ	0xFF6
  8555                           tablat	equ	0xFF5
  8556                           prodh	equ	0xFF4
  8557                           prodl	equ	0xFF3
  8558                           intcon	equ	0xFF2
  8559                           postinc0	equ	0xFEE
  8560                           wreg	equ	0xFE8
  8561                           indf1	equ	0xFE7
  8562                           postdec1	equ	0xFE5
  8563                           plusw1	equ	0xFE3
  8564                           fsr1h	equ	0xFE2
  8565                           fsr1l	equ	0xFE1
  8566                           indf2	equ	0xFDF
  8567                           postinc2	equ	0xFDE
  8568                           plusw2	equ	0xFDB
  8569                           fsr2h	equ	0xFDA
  8570                           fsr2l	equ	0xFD9
  8571                           status	equ	0xFD8
  8572                           
  8573 ;; *************** function _reload_tmr5_pt25s *****************
  8574 ;; Defined at:
  8575 ;;		line 260 in file "io.c"
  8576 ;; Parameters:    Size  Location     Type
  8577 ;;		None
  8578 ;; Auto vars:     Size  Location     Type
  8579 ;;		None
  8580 ;; Return value:  Size  Location     Type
  8581 ;;                  1    wreg      void 
  8582 ;; Registers used:
  8583 ;;		wreg, status,2
  8584 ;; Tracked objects:
  8585 ;;		On entry : 0/0
  8586 ;;		On exit  : 0/0
  8587 ;;		Unchanged: 0/0
  8588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8592 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8593 ;;Total ram usage:        0 bytes
  8594 ;; Hardware stack levels used:    1
  8595 ;; Hardware stack levels required when called:    3
  8596 ;; This function calls:
  8597 ;;		Nothing
  8598 ;; This function is called by:
  8599 ;;		_start_md_boot_timer
  8600 ;;		_md_uart_write_str_ok
  8601 ;; This function uses a non-reentrant model
  8602 ;;
  8603                           
  8604                           	psect	text29
  8605  00244A                     __ptext29:
  8606                           	opt stack 0
  8607  00244A                     _reload_tmr5_pt25s:
  8608                           	opt stack 23
  8609                           
  8610                           ;io.c: 262: INTCONbits.GIE = 0;
  8611                           
  8612                           ;incstack = 0
  8613  00244A  9EF2               	bcf	intcon,7,c	;volatile
  8614                           
  8615                           ;io.c: 263: T5CON = 0b00110101;
  8616  00244C  0E35               	movlw	53
  8617  00244E  010F               	movlb	15	; () banked
  8618  002450  6F4E               	movwf	78,b	;volatile
  8619                           
  8620                           ; BSR set to: 15
  8621                           ;io.c: 265: PIE5bits.TMR5IE = 1;
  8622  002452  827D               	bsf	3965,1,c	;volatile
  8623                           
  8624                           ; BSR set to: 15
  8625                           ;io.c: 266: INTCONbits.PEIE = 1;
  8626  002454  8CF2               	bsf	intcon,6,c	;volatile
  8627                           
  8628                           ; BSR set to: 15
  8629                           ;io.c: 267: PIR5bits.TMR5IF = 0;
  8630  002456  927E               	bcf	3966,1,c	;volatile
  8631                           
  8632                           ;io.c: 268: TMR5H = 0x0B;
  8633  002458  0E0B               	movlw	11
  8634  00245A  6F50               	movwf	80,b	;volatile
  8635                           
  8636                           ;io.c: 269: TMR5L = 0x45;
  8637  00245C  0E45               	movlw	69
  8638  00245E  6F4F               	movwf	79,b	;volatile
  8639                           
  8640                           ; BSR set to: 15
  8641                           ;io.c: 270: INTCONbits.GIE = 1;
  8642  002460  8EF2               	bsf	intcon,7,c	;volatile
  8643                           
  8644                           ; BSR set to: 15
  8645  002462  0012               	return		;funcret
  8646  002464                     __end_of_reload_tmr5_pt25s:
  8647                           	opt stack 0
  8648                           tblptru	equ	0xFF8
  8649                           tblptrh	equ	0xFF7
  8650                           tblptrl	equ	0xFF6
  8651                           tablat	equ	0xFF5
  8652                           prodh	equ	0xFF4
  8653                           prodl	equ	0xFF3
  8654                           intcon	equ	0xFF2
  8655                           postinc0	equ	0xFEE
  8656                           wreg	equ	0xFE8
  8657                           indf1	equ	0xFE7
  8658                           postdec1	equ	0xFE5
  8659                           plusw1	equ	0xFE3
  8660                           fsr1h	equ	0xFE2
  8661                           fsr1l	equ	0xFE1
  8662                           indf2	equ	0xFDF
  8663                           postinc2	equ	0xFDE
  8664                           plusw2	equ	0xFDB
  8665                           fsr2h	equ	0xFDA
  8666                           fsr2l	equ	0xFD9
  8667                           status	equ	0xFD8
  8668                           
  8669 ;; *************** function _md_uart_send *****************
  8670 ;; Defined at:
  8671 ;;		line 93 in file "uart.c"
  8672 ;; Parameters:    Size  Location     Type
  8673 ;;  data            1    wreg     unsigned char 
  8674 ;; Auto vars:     Size  Location     Type
  8675 ;;  data            1    0[BANK0 ] unsigned char 
  8676 ;; Return value:  Size  Location     Type
  8677 ;;                  1    wreg      void 
  8678 ;; Registers used:
  8679 ;;		wreg
  8680 ;; Tracked objects:
  8681 ;;		On entry : 0/0
  8682 ;;		On exit  : 0/0
  8683 ;;		Unchanged: 0/0
  8684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8686 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8688 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8689 ;;Total ram usage:        1 bytes
  8690 ;; Hardware stack levels used:    1
  8691 ;; Hardware stack levels required when called:    3
  8692 ;; This function calls:
  8693 ;;		Nothing
  8694 ;; This function is called by:
  8695 ;;		_md_uart_write_str_ok
  8696 ;; This function uses a non-reentrant model
  8697 ;;
  8698                           
  8699                           	psect	text30
  8700  0024CA                     __ptext30:
  8701                           	opt stack 0
  8702  0024CA                     _md_uart_send:
  8703                           	opt stack 23
  8704                           
  8705                           ; BSR set to: 15
  8706                           ;incstack = 0
  8707                           ;md_uart_send@data stored from wreg
  8708  0024CA  0100               	movlb	0	; () banked
  8709  0024CC  6F60               	movwf	md_uart_send@data& (0+255),b
  8710  0024CE                     
  8711                           ;uart.c: 95: while (!TRMT1);
  8712  0024CE  A2AC               	btfss	4012,1,c	;volatile
  8713  0024D0  D7FE               	goto	l6456
  8714                           
  8715                           ;uart.c: 96: TX1REG = data;
  8716  0024D2  C060  FFAD         	movff	md_uart_send@data,4013	;volatile
  8717  0024D6  0012               	return		;funcret
  8718  0024D8                     __end_of_md_uart_send:
  8719                           	opt stack 0
  8720                           tblptru	equ	0xFF8
  8721                           tblptrh	equ	0xFF7
  8722                           tblptrl	equ	0xFF6
  8723                           tablat	equ	0xFF5
  8724                           prodh	equ	0xFF4
  8725                           prodl	equ	0xFF3
  8726                           intcon	equ	0xFF2
  8727                           postinc0	equ	0xFEE
  8728                           wreg	equ	0xFE8
  8729                           indf1	equ	0xFE7
  8730                           postdec1	equ	0xFE5
  8731                           plusw1	equ	0xFE3
  8732                           fsr1h	equ	0xFE2
  8733                           fsr1l	equ	0xFE1
  8734                           indf2	equ	0xFDF
  8735                           postinc2	equ	0xFDE
  8736                           plusw2	equ	0xFDB
  8737                           fsr2h	equ	0xFDA
  8738                           fsr2l	equ	0xFD9
  8739                           status	equ	0xFD8
  8740                           
  8741 ;; *************** function _enable_md_rxint *****************
  8742 ;; Defined at:
  8743 ;;		line 65 in file "uart.c"
  8744 ;; Parameters:    Size  Location     Type
  8745 ;;		None
  8746 ;; Auto vars:     Size  Location     Type
  8747 ;;		None
  8748 ;; Return value:  Size  Location     Type
  8749 ;;                  1    wreg      void 
  8750 ;; Registers used:
  8751 ;;		None
  8752 ;; Tracked objects:
  8753 ;;		On entry : 0/0
  8754 ;;		On exit  : 0/0
  8755 ;;		Unchanged: 0/0
  8756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8760 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8761 ;;Total ram usage:        0 bytes
  8762 ;; Hardware stack levels used:    1
  8763 ;; Hardware stack levels required when called:    3
  8764 ;; This function calls:
  8765 ;;		Nothing
  8766 ;; This function is called by:
  8767 ;;		_md_uart_write_str_ok
  8768 ;; This function uses a non-reentrant model
  8769 ;;
  8770                           
  8771                           	psect	text31
  8772  0024F4                     __ptext31:
  8773                           	opt stack 0
  8774  0024F4                     _enable_md_rxint:
  8775                           	opt stack 23
  8776                           
  8777                           ;uart.c: 67: GIE = 0;
  8778                           
  8779                           ;incstack = 0
  8780  0024F4  9EF2               	bcf	intcon,7,c	;volatile
  8781                           
  8782                           ;uart.c: 68: PIE1bits.RC1IE = 1;
  8783  0024F6  8A9D               	bsf	3997,5,c	;volatile
  8784                           
  8785                           ;uart.c: 69: PIR1bits.RC1IF = 0;
  8786  0024F8  9A9E               	bcf	3998,5,c	;volatile
  8787                           
  8788                           ;uart.c: 70: INTCONbits.PEIE = 1;
  8789  0024FA  8CF2               	bsf	intcon,6,c	;volatile
  8790                           
  8791                           ;uart.c: 71: GIE = 1;
  8792  0024FC  8EF2               	bsf	intcon,7,c	;volatile
  8793  0024FE  0012               	return		;funcret
  8794  002500                     __end_of_enable_md_rxint:
  8795                           	opt stack 0
  8796                           tblptru	equ	0xFF8
  8797                           tblptrh	equ	0xFF7
  8798                           tblptrl	equ	0xFF6
  8799                           tablat	equ	0xFF5
  8800                           prodh	equ	0xFF4
  8801                           prodl	equ	0xFF3
  8802                           intcon	equ	0xFF2
  8803                           postinc0	equ	0xFEE
  8804                           wreg	equ	0xFE8
  8805                           indf1	equ	0xFE7
  8806                           postdec1	equ	0xFE5
  8807                           plusw1	equ	0xFE3
  8808                           fsr1h	equ	0xFE2
  8809                           fsr1l	equ	0xFE1
  8810                           indf2	equ	0xFDF
  8811                           postinc2	equ	0xFDE
  8812                           plusw2	equ	0xFDB
  8813                           fsr2h	equ	0xFDA
  8814                           fsr2l	equ	0xFD9
  8815                           status	equ	0xFD8
  8816                           
  8817 ;; *************** function _disable_tmr5 *****************
  8818 ;; Defined at:
  8819 ;;		line 273 in file "io.c"
  8820 ;; Parameters:    Size  Location     Type
  8821 ;;		None
  8822 ;; Auto vars:     Size  Location     Type
  8823 ;;		None
  8824 ;; Return value:  Size  Location     Type
  8825 ;;                  1    wreg      void 
  8826 ;; Registers used:
  8827 ;;		wreg, status,2
  8828 ;; Tracked objects:
  8829 ;;		On entry : 0/0
  8830 ;;		On exit  : 0/0
  8831 ;;		Unchanged: 0/0
  8832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8836 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8837 ;;Total ram usage:        0 bytes
  8838 ;; Hardware stack levels used:    1
  8839 ;; Hardware stack levels required when called:    3
  8840 ;; This function calls:
  8841 ;;		Nothing
  8842 ;; This function is called by:
  8843 ;;		_check_md_state
  8844 ;;		_md_uart_write_str_ok
  8845 ;; This function uses a non-reentrant model
  8846 ;;
  8847                           
  8848                           	psect	text32
  8849  002500                     __ptext32:
  8850                           	opt stack 0
  8851  002500                     _disable_tmr5:
  8852                           	opt stack 23
  8853                           
  8854                           ;io.c: 275: tmr5_cnt = 0;
  8855                           
  8856                           ;incstack = 0
  8857  002500  0E00               	movlw	0
  8858  002502  6E1B               	movwf	_tmr5_cnt,c
  8859                           
  8860                           ;io.c: 276: T5CONbits.TMR5ON = 0;
  8861  002504  010F               	movlb	15	; () banked
  8862  002506  914E               	bcf	78,0,b	;volatile
  8863                           
  8864                           ; BSR set to: 15
  8865                           ;io.c: 277: PIE5bits.TMR5IE = 0;
  8866  002508  927D               	bcf	3965,1,c	;volatile
  8867                           
  8868                           ; BSR set to: 15
  8869  00250A  0012               	return		;funcret
  8870  00250C                     __end_of_disable_tmr5:
  8871                           	opt stack 0
  8872                           tblptru	equ	0xFF8
  8873                           tblptrh	equ	0xFF7
  8874                           tblptrl	equ	0xFF6
  8875                           tablat	equ	0xFF5
  8876                           prodh	equ	0xFF4
  8877                           prodl	equ	0xFF3
  8878                           intcon	equ	0xFF2
  8879                           postinc0	equ	0xFEE
  8880                           wreg	equ	0xFE8
  8881                           indf1	equ	0xFE7
  8882                           postdec1	equ	0xFE5
  8883                           plusw1	equ	0xFE3
  8884                           fsr1h	equ	0xFE2
  8885                           fsr1l	equ	0xFE1
  8886                           indf2	equ	0xFDF
  8887                           postinc2	equ	0xFDE
  8888                           plusw2	equ	0xFDB
  8889                           fsr2h	equ	0xFDA
  8890                           fsr2l	equ	0xFD9
  8891                           status	equ	0xFD8
  8892                           
  8893 ;; *************** function _clear_at_ok *****************
  8894 ;; Defined at:
  8895 ;;		line 244 in file "io.c"
  8896 ;; Parameters:    Size  Location     Type
  8897 ;;		None
  8898 ;; Auto vars:     Size  Location     Type
  8899 ;;		None
  8900 ;; Return value:  Size  Location     Type
  8901 ;;                  1    wreg      void 
  8902 ;; Registers used:
  8903 ;;		wreg, status,2
  8904 ;; Tracked objects:
  8905 ;;		On entry : 0/0
  8906 ;;		On exit  : 0/0
  8907 ;;		Unchanged: 0/0
  8908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8910 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8912 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8913 ;;Total ram usage:        0 bytes
  8914 ;; Hardware stack levels used:    1
  8915 ;; Hardware stack levels required when called:    3
  8916 ;; This function calls:
  8917 ;;		Nothing
  8918 ;; This function is called by:
  8919 ;;		_init_pic
  8920 ;;		_start_sms_ok
  8921 ;;		_read_sms
  8922 ;;		_send_sms_ok
  8923 ;;		_startup_ok
  8924 ;; This function uses a non-reentrant model
  8925 ;;
  8926                           
  8927                           	psect	text33
  8928  00223C                     __ptext33:
  8929                           	opt stack 0
  8930  00223C                     _clear_at_ok:
  8931                           	opt stack 26
  8932                           
  8933                           ;io.c: 246: at1 = 0;
  8934                           
  8935                           ; BSR set to: 15
  8936                           ;incstack = 0
  8937  00223C  0E00               	movlw	0
  8938  00223E  0100               	movlb	0	; () banked
  8939  002240  6FC0               	movwf	_at1& (0+255),b
  8940                           
  8941                           ;io.c: 247: at2 = 0;
  8942  002242  0E00               	movlw	0
  8943  002244  6FBF               	movwf	_at2& (0+255),b
  8944                           
  8945                           ;io.c: 248: at3 = 0;
  8946  002246  0E00               	movlw	0
  8947  002248  6FBE               	movwf	_at3& (0+255),b
  8948                           
  8949                           ;io.c: 249: at4 = 0;
  8950  00224A  0E00               	movlw	0
  8951  00224C  6FBD               	movwf	_at4& (0+255),b
  8952                           
  8953                           ;io.c: 250: at5 = 0;
  8954  00224E  0E00               	movlw	0
  8955  002250  6FBC               	movwf	_at5& (0+255),b
  8956                           
  8957                           ;io.c: 251: at6 = 0;
  8958  002252  0E00               	movlw	0
  8959  002254  6FBB               	movwf	_at6& (0+255),b
  8960                           
  8961                           ;io.c: 252: at7 = 0;
  8962  002256  0E00               	movlw	0
  8963  002258  6FBA               	movwf	_at7& (0+255),b
  8964                           
  8965                           ;io.c: 253: at8 = 0;
  8966  00225A  0E00               	movlw	0
  8967  00225C  6FB9               	movwf	_at8& (0+255),b
  8968                           
  8969                           ;io.c: 254: at9 = 0;
  8970  00225E  0E00               	movlw	0
  8971  002260  6FB8               	movwf	_at9& (0+255),b
  8972                           
  8973                           ;io.c: 255: at10 = 0;
  8974  002262  0E00               	movlw	0
  8975  002264  6FB7               	movwf	_at10& (0+255),b
  8976                           
  8977                           ;io.c: 256: at11 = 0;
  8978  002266  0E00               	movlw	0
  8979  002268  6FB6               	movwf	_at11& (0+255),b
  8980                           
  8981                           ;io.c: 257: at12 = 0;
  8982  00226A  0E00               	movlw	0
  8983  00226C  6FB5               	movwf	_at12& (0+255),b
  8984                           
  8985                           ; BSR set to: 0
  8986  00226E  0012               	return		;funcret
  8987  002270                     __end_of_clear_at_ok:
  8988                           	opt stack 0
  8989                           tblptru	equ	0xFF8
  8990                           tblptrh	equ	0xFF7
  8991                           tblptrl	equ	0xFF6
  8992                           tablat	equ	0xFF5
  8993                           prodh	equ	0xFF4
  8994                           prodl	equ	0xFF3
  8995                           intcon	equ	0xFF2
  8996                           postinc0	equ	0xFEE
  8997                           wreg	equ	0xFE8
  8998                           indf1	equ	0xFE7
  8999                           postdec1	equ	0xFE5
  9000                           plusw1	equ	0xFE3
  9001                           fsr1h	equ	0xFE2
  9002                           fsr1l	equ	0xFE1
  9003                           indf2	equ	0xFDF
  9004                           postinc2	equ	0xFDE
  9005                           plusw2	equ	0xFDB
  9006                           fsr2h	equ	0xFDA
  9007                           fsr2l	equ	0xFD9
  9008                           status	equ	0xFD8
  9009                           
  9010 ;; *************** function _check_sms_timer *****************
  9011 ;; Defined at:
  9012 ;;		line 58 in file "sms.c"
  9013 ;; Parameters:    Size  Location     Type
  9014 ;;		None
  9015 ;; Auto vars:     Size  Location     Type
  9016 ;;  sms_duration    1    6[BANK0 ] unsigned char 
  9017 ;; Return value:  Size  Location     Type
  9018 ;;                  1    wreg      void 
  9019 ;; Registers used:
  9020 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9021 ;; Tracked objects:
  9022 ;;		On entry : 0/0
  9023 ;;		On exit  : 0/0
  9024 ;;		Unchanged: 0/0
  9025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9027 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9029 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9030 ;;Total ram usage:        1 bytes
  9031 ;; Hardware stack levels used:    1
  9032 ;; Hardware stack levels required when called:    5
  9033 ;; This function calls:
  9034 ;;		_ee_read_ascii_to_value
  9035 ;;		_stop_sms_timer
  9036 ;; This function is called by:
  9037 ;;		_listen_sms
  9038 ;; This function uses a non-reentrant model
  9039 ;;
  9040                           
  9041                           	psect	text34
  9042  001ED8                     __ptext34:
  9043                           	opt stack 0
  9044  001ED8                     _check_sms_timer:
  9045                           	opt stack 23
  9046                           
  9047                           ;sms.c: 60: uint8_t sms_duration = (uint8_t)(ee_read_ascii_to_value(0x00, 0xB8) * 20);
  9048                           
  9049                           ; BSR set to: 0
  9050                           ;incstack = 0
  9051  001ED8  0EB8               	movlw	184
  9052  001EDA  0100               	movlb	0	; () banked
  9053  001EDC  6F63               	movwf	ee_read_ascii_to_value@addr& (0+255),b
  9054  001EDE  0E00               	movlw	0
  9055  001EE0  EC68  F011         	call	_ee_read_ascii_to_value
  9056  001EE4  0D14               	mullw	20
  9057  001EE6  CFF3 F066          	movff	prodl,check_sms_timer@sms_duration
  9058                           
  9059                           ;sms.c: 61: switch(SMS_TMR_STATE)
  9060  001EEA  D022               	goto	l765
  9061  001EEC                     
  9062                           ;sms.c: 66: if (t2_tick >= 31)
  9063  001EEC  0E1E               	movlw	30
  9064  001EEE  6417               	cpfsgt	_t2_tick,c
  9065  001EF0  D005               	goto	l769
  9066                           
  9067                           ;sms.c: 67: {
  9068                           ;sms.c: 68: t2_tick = 0;
  9069  001EF2  0E00               	movlw	0
  9070  001EF4  6E17               	movwf	_t2_tick,c
  9071                           
  9072                           ;sms.c: 69: sms_tmr_tick++;
  9073  001EF6  2A18               	incf	_sms_tmr_tick,f,c
  9074                           
  9075                           ;sms.c: 70: SMS_TMR_STATE = NEXT_SMS_READY;
  9076  001EF8  0E02               	movlw	2
  9077  001EFA  6E10               	movwf	_SMS_TMR_STATE,c
  9078  001EFC                     l769:
  9079                           
  9080                           ;sms.c: 71: }
  9081                           ;sms.c: 72: if (sms_tmr_tick >= sms_duration)
  9082  001EFC  0100               	movlb	0	; () banked
  9083  001EFE  5166               	movf	check_sms_timer@sms_duration& (0+255),w,b
  9084  001F00  5C18               	subwf	_sms_tmr_tick,w,c
  9085  001F02  A0D8               	btfss	status,0,c
  9086  001F04  0012               	return	
  9087                           
  9088                           ; BSR set to: 0
  9089                           ;sms.c: 73: {
  9090                           ;sms.c: 74: sms_tmr_tick = 0;
  9091  001F06  0E00               	movlw	0
  9092  001F08  6E18               	movwf	_sms_tmr_tick,c
  9093                           
  9094                           ;sms.c: 75: SMS_TMR_STATE = LISTEN_MODE_DONE;
  9095  001F0A  0E03               	movlw	3
  9096  001F0C  6E10               	movwf	_SMS_TMR_STATE,c
  9097                           
  9098                           ; BSR set to: 0
  9099                           ;sms.c: 76: }
  9100                           ;sms.c: 77: break;
  9101  001F0E  0012               	return	
  9102  001F10                     
  9103                           ;sms.c: 79: sms_timer_ready = 1;
  9104                           
  9105                           ; BSR set to: 0
  9106  001F10  0E01               	movlw	1
  9107  001F12  0100               	movlb	0	; () banked
  9108  001F14  6FC8               	movwf	_sms_timer_ready& (0+255),b
  9109                           
  9110                           ;sms.c: 80: SMS_TMR_STATE = RUNNING;
  9111  001F16  0E01               	movlw	1
  9112  001F18  6E10               	movwf	_SMS_TMR_STATE,c
  9113                           
  9114                           ;sms.c: 81: break;
  9115  001F1A  0012               	return	
  9116  001F1C                     
  9117                           ;sms.c: 83: stop_sms_timer();
  9118                           
  9119                           ; BSR set to: 0
  9120  001F1C  ECAB  F012         	call	_stop_sms_timer	;wreg free
  9121                           
  9122                           ;sms.c: 84: modem_ready_sms = 0;
  9123  001F20  0E00               	movlw	0
  9124  001F22  0100               	movlb	0	; () banked
  9125  001F24  6FC1               	movwf	_modem_ready_sms& (0+255),b
  9126                           
  9127                           ; BSR set to: 0
  9128                           ;sms.c: 85: STATE = PREV_STATE;
  9129  001F26  C0C9  F01E         	movff	_PREV_STATE,_STATE
  9130                           
  9131                           ; BSR set to: 0
  9132                           ;sms.c: 86: SMS_TMR_STATE = 0;
  9133  001F2A  0E00               	movlw	0
  9134  001F2C  6E10               	movwf	_SMS_TMR_STATE,c
  9135                           
  9136                           ; BSR set to: 0
  9137                           ;sms.c: 88: }
  9138                           
  9139                           ;sms.c: 87: break;
  9140  001F2E  0012               	return	
  9141  001F30                     l765:
  9142                           
  9143                           ; BSR set to: 0
  9144  001F30  5010               	movf	_SMS_TMR_STATE,w,c
  9145                           
  9146                           ; Switch size 1, requested type "space"
  9147                           ; Number of cases is 4, Range of values is 0 to 3
  9148                           ; switch strategies available:
  9149                           ; Name         Instructions Cycles
  9150                           ; simple_byte           13     7 (average)
  9151                           ;	Chosen strategy is simple_byte
  9152  001F32  0A00               	xorlw	0	; case 0
  9153  001F34  B4D8               	btfsc	status,2,c
  9154  001F36  0012               	return	
  9155  001F38  0A01               	xorlw	1	; case 1
  9156  001F3A  B4D8               	btfsc	status,2,c
  9157  001F3C  D7D7               	goto	l768
  9158  001F3E  0A03               	xorlw	3	; case 2
  9159  001F40  B4D8               	btfsc	status,2,c
  9160  001F42  D7E6               	goto	l771
  9161  001F44  0A01               	xorlw	1	; case 3
  9162  001F46  A4D8               	btfss	status,2,c
  9163  001F48  0012               	return	
  9164  001F4A  D7E8               	goto	l772
  9165  001F4C                     __end_of_check_sms_timer:
  9166                           	opt stack 0
  9167                           tblptru	equ	0xFF8
  9168                           tblptrh	equ	0xFF7
  9169                           tblptrl	equ	0xFF6
  9170                           tablat	equ	0xFF5
  9171                           prodh	equ	0xFF4
  9172                           prodl	equ	0xFF3
  9173                           intcon	equ	0xFF2
  9174                           postinc0	equ	0xFEE
  9175                           wreg	equ	0xFE8
  9176                           indf1	equ	0xFE7
  9177                           postdec1	equ	0xFE5
  9178                           plusw1	equ	0xFE3
  9179                           fsr1h	equ	0xFE2
  9180                           fsr1l	equ	0xFE1
  9181                           indf2	equ	0xFDF
  9182                           postinc2	equ	0xFDE
  9183                           plusw2	equ	0xFDB
  9184                           fsr2h	equ	0xFDA
  9185                           fsr2l	equ	0xFD9
  9186                           status	equ	0xFD8
  9187                           
  9188 ;; *************** function _stop_sms_timer *****************
  9189 ;; Defined at:
  9190 ;;		line 101 in file "sms.c"
  9191 ;; Parameters:    Size  Location     Type
  9192 ;;		None
  9193 ;; Auto vars:     Size  Location     Type
  9194 ;;		None
  9195 ;; Return value:  Size  Location     Type
  9196 ;;                  1    wreg      void 
  9197 ;; Registers used:
  9198 ;;		None
  9199 ;; Tracked objects:
  9200 ;;		On entry : 0/0
  9201 ;;		On exit  : 0/0
  9202 ;;		Unchanged: 0/0
  9203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9207 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9208 ;;Total ram usage:        0 bytes
  9209 ;; Hardware stack levels used:    1
  9210 ;; Hardware stack levels required when called:    3
  9211 ;; This function calls:
  9212 ;;		Nothing
  9213 ;; This function is called by:
  9214 ;;		_check_sms_timer
  9215 ;; This function uses a non-reentrant model
  9216 ;;
  9217                           
  9218                           	psect	text35
  9219  002556                     __ptext35:
  9220                           	opt stack 0
  9221  002556                     _stop_sms_timer:
  9222                           	opt stack 24
  9223                           
  9224                           ;sms.c: 103: T2CONbits.TMR2ON = 0;
  9225                           
  9226                           ;incstack = 0
  9227  002556  94BA               	bcf	4026,2,c	;volatile
  9228                           
  9229                           ;sms.c: 104: PIE1bits.TMR2IE = 0;
  9230  002558  929D               	bcf	3997,1,c	;volatile
  9231  00255A  0012               	return		;funcret
  9232  00255C                     __end_of_stop_sms_timer:
  9233                           	opt stack 0
  9234                           tblptru	equ	0xFF8
  9235                           tblptrh	equ	0xFF7
  9236                           tblptrl	equ	0xFF6
  9237                           tablat	equ	0xFF5
  9238                           prodh	equ	0xFF4
  9239                           prodl	equ	0xFF3
  9240                           intcon	equ	0xFF2
  9241                           postinc0	equ	0xFEE
  9242                           wreg	equ	0xFE8
  9243                           indf1	equ	0xFE7
  9244                           postdec1	equ	0xFE5
  9245                           plusw1	equ	0xFE3
  9246                           fsr1h	equ	0xFE2
  9247                           fsr1l	equ	0xFE1
  9248                           indf2	equ	0xFDF
  9249                           postinc2	equ	0xFDE
  9250                           plusw2	equ	0xFDB
  9251                           fsr2h	equ	0xFDA
  9252                           fsr2l	equ	0xFD9
  9253                           status	equ	0xFD8
  9254                           
  9255 ;; *************** function _ee_read_ascii_to_value *****************
  9256 ;; Defined at:
  9257 ;;		line 39 in file "ee.c"
  9258 ;; Parameters:    Size  Location     Type
  9259 ;;  page            1    wreg     unsigned char 
  9260 ;;  addr            1    3[BANK0 ] unsigned char 
  9261 ;; Auto vars:     Size  Location     Type
  9262 ;;  page            1    4[BANK0 ] unsigned char 
  9263 ;;  data            1    5[BANK0 ] unsigned char 
  9264 ;; Return value:  Size  Location     Type
  9265 ;;                  1    wreg      unsigned char 
  9266 ;; Registers used:
  9267 ;;		wreg, status,2, status,0, cstack
  9268 ;; Tracked objects:
  9269 ;;		On entry : 0/0
  9270 ;;		On exit  : 0/0
  9271 ;;		Unchanged: 0/0
  9272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9273 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9274 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9276 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9277 ;;Total ram usage:        3 bytes
  9278 ;; Hardware stack levels used:    1
  9279 ;; Hardware stack levels required when called:    4
  9280 ;; This function calls:
  9281 ;;		_ee_read
  9282 ;; This function is called by:
  9283 ;;		_check_sms_timer
  9284 ;; This function uses a non-reentrant model
  9285 ;;
  9286                           
  9287                           	psect	text36
  9288  0022D0                     __ptext36:
  9289                           	opt stack 0
  9290  0022D0                     _ee_read_ascii_to_value:
  9291                           	opt stack 23
  9292                           
  9293                           ;incstack = 0
  9294                           ;ee_read_ascii_to_value@page stored from wreg
  9295  0022D0  0100               	movlb	0	; () banked
  9296  0022D2  6F64               	movwf	ee_read_ascii_to_value@page& (0+255),b
  9297                           
  9298                           ;ee.c: 41: uint8_t data;
  9299                           ;ee.c: 42: data = ee_read(page, addr);
  9300  0022D4  C063  F060         	movff	ee_read_ascii_to_value@addr,ee_read@addr
  9301  0022D8  0100               	movlb	0	; () banked
  9302  0022DA  5164               	movf	ee_read_ascii_to_value@page& (0+255),w,b
  9303  0022DC  ECEB  F011         	call	_ee_read
  9304  0022E0  0100               	movlb	0	; () banked
  9305  0022E2  6F65               	movwf	ee_read_ascii_to_value@data& (0+255),b
  9306                           
  9307                           ; BSR set to: 0
  9308                           ;ee.c: 43: if (data >= 'A')
  9309  0022E4  0E40               	movlw	64
  9310  0022E6  6565               	cpfsgt	ee_read_ascii_to_value@data& (0+255),b
  9311  0022E8  D003               	goto	l1208
  9312                           
  9313                           ; BSR set to: 0
  9314                           ;ee.c: 44: data = (uint8_t)((data - 0x41) + 0x0A);
  9315  0022EA  5165               	movf	ee_read_ascii_to_value@data& (0+255),w,b
  9316  0022EC  0FC9               	addlw	201
  9317  0022EE  D002               	goto	L26
  9318  0022F0                     l1208:
  9319                           
  9320                           ; BSR set to: 0
  9321                           ;ee.c: 45: else
  9322                           ;ee.c: 46: data = (uint8_t)(data - 0x30);
  9323                           
  9324                           ; BSR set to: 0
  9325  0022F0  5165               	movf	ee_read_ascii_to_value@data& (0+255),w,b
  9326  0022F2  0FD0               	addlw	208
  9327  0022F4                     L26:
  9328  0022F4  6F65               	movwf	ee_read_ascii_to_value@data& (0+255),b
  9329                           
  9330                           ; BSR set to: 0
  9331                           ;ee.c: 48: return data;
  9332                           
  9333                           ; BSR set to: 0
  9334  0022F6  5165               	movf	ee_read_ascii_to_value@data& (0+255),w,b
  9335  0022F8  0012               	return	
  9336  0022FA                     __end_of_ee_read_ascii_to_value:
  9337                           	opt stack 0
  9338                           tblptru	equ	0xFF8
  9339                           tblptrh	equ	0xFF7
  9340                           tblptrl	equ	0xFF6
  9341                           tablat	equ	0xFF5
  9342                           prodh	equ	0xFF4
  9343                           prodl	equ	0xFF3
  9344                           intcon	equ	0xFF2
  9345                           postinc0	equ	0xFEE
  9346                           wreg	equ	0xFE8
  9347                           indf1	equ	0xFE7
  9348                           postdec1	equ	0xFE5
  9349                           plusw1	equ	0xFE3
  9350                           fsr1h	equ	0xFE2
  9351                           fsr1l	equ	0xFE1
  9352                           indf2	equ	0xFDF
  9353                           postinc2	equ	0xFDE
  9354                           plusw2	equ	0xFDB
  9355                           fsr2h	equ	0xFDA
  9356                           fsr2l	equ	0xFD9
  9357                           status	equ	0xFD8
  9358                           
  9359 ;; *************** function _del_sensor *****************
  9360 ;; Defined at:
  9361 ;;		line 184 in file "io.c"
  9362 ;; Parameters:    Size  Location     Type
  9363 ;;  sensorID        2   11[BANK0 ] PTR unsigned char 
  9364 ;;		 -> rx2_buf(5), 
  9365 ;; Auto vars:     Size  Location     Type
  9366 ;;  i               1   15[BANK0 ] unsigned char 
  9367 ;;  sensorIndex     1   14[BANK0 ] unsigned char 
  9368 ;;  j               1   13[BANK0 ] unsigned char 
  9369 ;; Return value:  Size  Location     Type
  9370 ;;                  1    wreg      void 
  9371 ;; Registers used:
  9372 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9373 ;; Tracked objects:
  9374 ;;		On entry : 0/0
  9375 ;;		On exit  : 0/0
  9376 ;;		Unchanged: 0/0
  9377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9378 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9379 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9381 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9382 ;;Total ram usage:        5 bytes
  9383 ;; Hardware stack levels used:    1
  9384 ;; Hardware stack levels required when called:    7
  9385 ;; This function calls:
  9386 ;;		_ee_read
  9387 ;;		_ee_write
  9388 ;;		_getIndexOfLearnedSensor
  9389 ;; This function is called by:
  9390 ;;		_check_state
  9391 ;; This function uses a non-reentrant model
  9392 ;;
  9393                           
  9394                           	psect	text37
  9395  001DC2                     __ptext37:
  9396                           	opt stack 0
  9397  001DC2                     _del_sensor:
  9398                           	opt stack 22
  9399                           
  9400                           ;io.c: 186: if (receivedSensor)
  9401                           
  9402                           ; BSR set to: 0
  9403                           ;incstack = 0
  9404  001DC2  0100               	movlb	0	; () banked
  9405  001DC4  51C7               	movf	_receivedSensor& (0+255),w,b
  9406  001DC6  B4D8               	btfsc	status,2,c
  9407  001DC8  0012               	return	
  9408                           
  9409                           ; BSR set to: 0
  9410                           ;io.c: 187: {
  9411                           ;io.c: 188: uint8_t sensorIndex = getIndexOfLearnedSensor(sensorID);
  9412  001DCA  C06B  F061         	movff	del_sensor@sensorID,getIndexOfLearnedSensor@sensorID
  9413  001DCE  C06C  F062         	movff	del_sensor@sensorID+1,getIndexOfLearnedSensor@sensorID+1
  9414  001DD2  EC96  F00E         	call	_getIndexOfLearnedSensor	;wreg free
  9415  001DD6  0100               	movlb	0	; () banked
  9416  001DD8  6F6E               	movwf	del_sensor@sensorIndex& (0+255),b
  9417                           
  9418                           ; BSR set to: 0
  9419                           ;io.c: 189: uint8_t i, j;
  9420                           ;io.c: 190: if (sensorIndex != 0xFF)
  9421  001DDA  296E               	incf	del_sensor@sensorIndex& (0+255),w,b
  9422  001DDC  B4D8               	btfsc	status,2,c
  9423  001DDE  0012               	return	
  9424                           
  9425                           ; BSR set to: 0
  9426                           ;io.c: 191: {
  9427                           ;io.c: 192: for (i = 0; i < 4; i++)
  9428  001DE0  0E00               	movlw	0
  9429  001DE2  6F6F               	movwf	del_sensor@i& (0+255),b
  9430  001DE4                     l7958:
  9431                           
  9432                           ; BSR set to: 0
  9433  001DE4  0E03               	movlw	3
  9434  001DE6  656F               	cpfsgt	del_sensor@i& (0+255),b
  9435  001DE8  D001               	goto	l493
  9436  001DEA  D00E               	goto	u10470
  9437  001DEC                     l493:
  9438                           
  9439                           ; BSR set to: 0
  9440                           ;io.c: 193: ee_write(0x01, (uint8_t)(0x80 + (sensorIndex * 4) + i), 0x00);
  9441                           
  9442                           ; BSR set to: 0
  9443  001DEC  516E               	movf	del_sensor@sensorIndex& (0+255),w,b
  9444  001DEE  0D04               	mullw	4
  9445  001DF0  50F3               	movf	prodl,w,c
  9446  001DF2  256F               	addwf	del_sensor@i& (0+255),w,b
  9447  001DF4  0F80               	addlw	128
  9448  001DF6  6F63               	movwf	ee_write@addr& (0+255),b
  9449  001DF8  0E00               	movlw	0
  9450  001DFA  6F64               	movwf	ee_write@data& (0+255),b
  9451  001DFC  0E01               	movlw	1
  9452  001DFE  EC50  F011         	call	_ee_write
  9453  001E02  0100               	movlb	0	; () banked
  9454  001E04  2B6F               	incf	del_sensor@i& (0+255),f,b
  9455  001E06  D7EE               	goto	l7958
  9456  001E08                     u10470:
  9457                           
  9458                           ; BSR set to: 0
  9459                           ;io.c: 194: for (i = sensorIndex; i < (16 - 1); i++)
  9460  001E08  C06E  F06F         	movff	del_sensor@sensorIndex,del_sensor@i
  9461  001E0C                     l7968:
  9462                           
  9463                           ; BSR set to: 0
  9464  001E0C  0E0E               	movlw	14
  9465  001E0E  656F               	cpfsgt	del_sensor@i& (0+255),b
  9466  001E10  D001               	goto	l495
  9467  001E12  0012               	return	
  9468  001E14                     l495:
  9469                           
  9470                           ; BSR set to: 0
  9471                           ;io.c: 195: {
  9472                           ;io.c: 196: for (j = 0; j < 4; j++)
  9473                           
  9474                           ; BSR set to: 0
  9475  001E14  0E00               	movlw	0
  9476  001E16  6F6D               	movwf	del_sensor@j& (0+255),b
  9477  001E18                     l7974:
  9478                           
  9479                           ; BSR set to: 0
  9480  001E18  0E03               	movlw	3
  9481  001E1A  656D               	cpfsgt	del_sensor@j& (0+255),b
  9482  001E1C  D001               	goto	l497
  9483  001E1E  D017               	goto	u10500
  9484  001E20                     l497:
  9485                           
  9486                           ; BSR set to: 0
  9487                           ;io.c: 197: ee_write(0x01, (uint8_t)(0x80 + (sensorIndex * 4) + i), (ee_read(0x01, (uint
      +                          8_t)(0x80 + (sensorIndex * (4 + 1)) + j))));
  9488                           
  9489                           ; BSR set to: 0
  9490  001E20  516E               	movf	del_sensor@sensorIndex& (0+255),w,b
  9491  001E22  0D04               	mullw	4
  9492  001E24  50F3               	movf	prodl,w,c
  9493  001E26  256F               	addwf	del_sensor@i& (0+255),w,b
  9494  001E28  0F80               	addlw	128
  9495  001E2A  6F63               	movwf	ee_write@addr& (0+255),b
  9496  001E2C  516E               	movf	del_sensor@sensorIndex& (0+255),w,b
  9497  001E2E  0D05               	mullw	5
  9498  001E30  50F3               	movf	prodl,w,c
  9499  001E32  256D               	addwf	del_sensor@j& (0+255),w,b
  9500  001E34  0F80               	addlw	128
  9501  001E36  6F60               	movwf	ee_read@addr& (0+255),b
  9502  001E38  0E01               	movlw	1
  9503  001E3A  ECEB  F011         	call	_ee_read
  9504  001E3E  0100               	movlb	0	; () banked
  9505  001E40  6F64               	movwf	ee_write@data& (0+255),b
  9506  001E42  0E01               	movlw	1
  9507  001E44  EC50  F011         	call	_ee_write
  9508  001E48  0100               	movlb	0	; () banked
  9509  001E4A  2B6D               	incf	del_sensor@j& (0+255),f,b
  9510  001E4C  D7E5               	goto	l7974
  9511  001E4E                     u10500:
  9512                           
  9513                           ; BSR set to: 0
  9514                           
  9515                           ; BSR set to: 0
  9516  001E4E  2B6F               	incf	del_sensor@i& (0+255),f,b
  9517  001E50  D7DD               	goto	l7968
  9518  001E52                     __end_of_del_sensor:
  9519                           	opt stack 0
  9520                           tblptru	equ	0xFF8
  9521                           tblptrh	equ	0xFF7
  9522                           tblptrl	equ	0xFF6
  9523                           tablat	equ	0xFF5
  9524                           prodh	equ	0xFF4
  9525                           prodl	equ	0xFF3
  9526                           intcon	equ	0xFF2
  9527                           postinc0	equ	0xFEE
  9528                           wreg	equ	0xFE8
  9529                           indf1	equ	0xFE7
  9530                           postdec1	equ	0xFE5
  9531                           plusw1	equ	0xFE3
  9532                           fsr1h	equ	0xFE2
  9533                           fsr1l	equ	0xFE1
  9534                           indf2	equ	0xFDF
  9535                           postinc2	equ	0xFDE
  9536                           plusw2	equ	0xFDB
  9537                           fsr2h	equ	0xFDA
  9538                           fsr2l	equ	0xFD9
  9539                           status	equ	0xFD8
  9540                           
  9541 ;; *************** function _ee_read *****************
  9542 ;; Defined at:
  9543 ;;		line 4 in file "ee.c"
  9544 ;; Parameters:    Size  Location     Type
  9545 ;;  page            1    wreg     unsigned char 
  9546 ;;  addr            1    0[BANK0 ] unsigned char 
  9547 ;; Auto vars:     Size  Location     Type
  9548 ;;  page            1    1[BANK0 ] unsigned char 
  9549 ;;  data            1    2[BANK0 ] unsigned char 
  9550 ;; Return value:  Size  Location     Type
  9551 ;;                  1    wreg      unsigned char 
  9552 ;; Registers used:
  9553 ;;		wreg, status,2
  9554 ;; Tracked objects:
  9555 ;;		On entry : 0/0
  9556 ;;		On exit  : 0/0
  9557 ;;		Unchanged: 0/0
  9558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9559 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9560 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9562 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9563 ;;Total ram usage:        3 bytes
  9564 ;; Hardware stack levels used:    1
  9565 ;; Hardware stack levels required when called:    3
  9566 ;; This function calls:
  9567 ;;		Nothing
  9568 ;; This function is called by:
  9569 ;;		_del_sensor
  9570 ;;		_load_ID
  9571 ;;		_parse_cmgr
  9572 ;;		_ee_read_ascii_to_value
  9573 ;; This function uses a non-reentrant model
  9574 ;;
  9575                           
  9576                           	psect	text38
  9577  0023D6                     __ptext38:
  9578                           	opt stack 0
  9579  0023D6                     _ee_read:
  9580                           	opt stack 26
  9581                           
  9582                           ; BSR set to: 0
  9583                           ;incstack = 0
  9584                           ;ee_read@page stored from wreg
  9585  0023D6  0100               	movlb	0	; () banked
  9586  0023D8  6F61               	movwf	ee_read@page& (0+255),b
  9587                           
  9588                           ;ee.c: 6: uint8_t data;
  9589                           ;ee.c: 7: GIE = 0;
  9590  0023DA  9EF2               	bcf	intcon,7,c	;volatile
  9591                           
  9592                           ;ee.c: 8: EEADRH = page;
  9593  0023DC  C061  FFAA         	movff	ee_read@page,4010	;volatile
  9594                           
  9595                           ;ee.c: 9: EEADR = addr;
  9596  0023E0  C060  FFA9         	movff	ee_read@addr,4009	;volatile
  9597                           
  9598                           ;ee.c: 10: CFGS = 0;
  9599  0023E4  9CA6               	bcf	4006,6,c	;volsfr
  9600                           
  9601                           ;ee.c: 11: EEPGD = 0;
  9602  0023E6  9EA6               	bcf	4006,7,c	;volsfr
  9603                           
  9604                           ;ee.c: 12: RD = 1;
  9605  0023E8  80A6               	bsf	4006,0,c	;volsfr
  9606                           
  9607                           ;ee.c: 13: data = EEDATA;
  9608  0023EA  CFA8 F062          	movff	4008,ee_read@data	;volatile
  9609                           
  9610                           ;ee.c: 14: GIE = 1;
  9611  0023EE  8EF2               	bsf	intcon,7,c	;volatile
  9612                           
  9613                           ;ee.c: 15: return(data);
  9614  0023F0  0100               	movlb	0	; () banked
  9615  0023F2  5162               	movf	ee_read@data& (0+255),w,b
  9616  0023F4  0012               	return	
  9617  0023F6                     __end_of_ee_read:
  9618                           	opt stack 0
  9619                           tblptru	equ	0xFF8
  9620                           tblptrh	equ	0xFF7
  9621                           tblptrl	equ	0xFF6
  9622                           tablat	equ	0xFF5
  9623                           prodh	equ	0xFF4
  9624                           prodl	equ	0xFF3
  9625                           intcon	equ	0xFF2
  9626                           postinc0	equ	0xFEE
  9627                           wreg	equ	0xFE8
  9628                           indf1	equ	0xFE7
  9629                           postdec1	equ	0xFE5
  9630                           plusw1	equ	0xFE3
  9631                           fsr1h	equ	0xFE2
  9632                           fsr1l	equ	0xFE1
  9633                           indf2	equ	0xFDF
  9634                           postinc2	equ	0xFDE
  9635                           plusw2	equ	0xFDB
  9636                           fsr2h	equ	0xFDA
  9637                           fsr2l	equ	0xFD9
  9638                           status	equ	0xFD8
  9639                           
  9640 ;; *************** function _check_test *****************
  9641 ;; Defined at:
  9642 ;;		line 93 in file "io.c"
  9643 ;; Parameters:    Size  Location     Type
  9644 ;;		None
  9645 ;; Auto vars:     Size  Location     Type
  9646 ;;		None
  9647 ;; Return value:  Size  Location     Type
  9648 ;;                  1    wreg      void 
  9649 ;; Registers used:
  9650 ;;		wreg, status,2, status,0, cstack
  9651 ;; Tracked objects:
  9652 ;;		On entry : 0/0
  9653 ;;		On exit  : 0/0
  9654 ;;		Unchanged: 0/0
  9655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9658 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9659 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9660 ;;Total ram usage:        1 bytes
  9661 ;; Hardware stack levels used:    1
  9662 ;; Hardware stack levels required when called:    4
  9663 ;; This function calls:
  9664 ;;		_reload_tmr3_pt25s
  9665 ;; This function is called by:
  9666 ;;		_check_state
  9667 ;; This function uses a non-reentrant model
  9668 ;;
  9669                           
  9670                           	psect	text39
  9671  002096                     __ptext39:
  9672                           	opt stack 0
  9673  002096                     _check_test:
  9674                           	opt stack 25
  9675                           
  9676                           ;io.c: 96: if (PORTBbits.RB4 && !buttonStillPressed)
  9677                           
  9678                           ; BSR set to: 0
  9679                           ;incstack = 0
  9680  002096  A881               	btfss	3969,4,c	;volatile
  9681  002098  D014               	goto	l470
  9682  00209A  5001               	movf	_buttonStillPressed,w,c
  9683  00209C  A4D8               	btfss	status,2,c
  9684  00209E  D011               	goto	l470
  9685                           
  9686                           ;io.c: 97: {
  9687                           ;io.c: 98: _delay((unsigned long)((30)*(8000000/4000.0)));
  9688  0020A0  0E4E               	movlw	78
  9689  0020A2  0100               	movlb	0	; () banked
  9690  0020A4  6F60               	movwf	??_check_test& (0+255),b
  9691  0020A6  0EEB               	movlw	235
  9692  0020A8                     u10667:
  9693  0020A8  2EE8               	decfsz	wreg,f,c
  9694  0020AA  D7FE               	bra	u10667
  9695  0020AC  2F60               	decfsz	??_check_test& (0+255),f,b
  9696  0020AE  D7FC               	bra	u10667
  9697                           
  9698                           ;io.c: 99: if (PORTBbits.RB4)
  9699  0020B0  A881               	btfss	3969,4,c	;volatile
  9700  0020B2  D005               	goto	l471
  9701                           
  9702                           ;io.c: 100: {
  9703                           ;io.c: 101: buttonPressCount++;
  9704  0020B4  2A14               	incf	_buttonPressCount,f,c
  9705                           
  9706                           ;io.c: 102: reload_tmr3_pt25s();
  9707  0020B6  EC56  F012         	call	_reload_tmr3_pt25s	;wreg free
  9708                           
  9709                           ;io.c: 103: tmr3_cnt = 0;
  9710  0020BA  0E00               	movlw	0
  9711  0020BC  6E11               	movwf	_tmr3_cnt,c
  9712  0020BE                     l471:
  9713                           
  9714                           ;io.c: 104: }
  9715                           ;io.c: 105: buttonStillPressed = 1;
  9716  0020BE  0E01               	movlw	1
  9717  0020C0  D00B               	goto	L27
  9718  0020C2                     l470:
  9719                           
  9720                           ;io.c: 107: else
  9721                           ;io.c: 108: {
  9722                           ;io.c: 109: _delay((unsigned long)((30)*(8000000/4000.0)));
  9723  0020C2  0E4E               	movlw	78
  9724  0020C4  0100               	movlb	0	; () banked
  9725  0020C6  6F60               	movwf	??_check_test& (0+255),b
  9726  0020C8  0EEB               	movlw	235
  9727  0020CA                     u10677:
  9728  0020CA  2EE8               	decfsz	wreg,f,c
  9729  0020CC  D7FE               	bra	u10677
  9730  0020CE  2F60               	decfsz	??_check_test& (0+255),f,b
  9731  0020D0  D7FC               	bra	u10677
  9732                           
  9733                           ;io.c: 110: if (!PORTBbits.RB4)
  9734  0020D2  B881               	btfsc	3969,4,c	;volatile
  9735  0020D4  D002               	goto	l473
  9736                           
  9737                           ;io.c: 111: {
  9738                           ;io.c: 112: buttonStillPressed = 0;
  9739  0020D6  0E00               	movlw	0
  9740  0020D8                     L27:
  9741  0020D8  6E01               	movwf	_buttonStillPressed,c
  9742  0020DA                     l473:
  9743                           
  9744                           ;io.c: 113: }
  9745                           ;io.c: 114: }
  9746                           ;io.c: 115: if (inButtonMenu && buttonPressCount == 0)
  9747  0020DA  5015               	movf	_inButtonMenu,w,c
  9748  0020DC  B4D8               	btfsc	status,2,c
  9749  0020DE  D006               	goto	l474
  9750  0020E0  5014               	movf	_buttonPressCount,w,c
  9751  0020E2  A4D8               	btfss	status,2,c
  9752  0020E4  D003               	goto	l474
  9753                           
  9754                           ;io.c: 116: {
  9755                           ;io.c: 117: LATB3=0;
  9756  0020E6  968A               	bcf	3978,3,c	;volatile
  9757                           
  9758                           ;io.c: 118: LATC4=0;
  9759  0020E8  988B               	bcf	3979,4,c	;volatile
  9760                           
  9761                           ;io.c: 119: }
  9762  0020EA  D002               	goto	l475
  9763  0020EC                     l474:
  9764                           
  9765                           ;io.c: 120: else
  9766                           ;io.c: 121: {
  9767                           ;io.c: 122: LATB3=1;
  9768  0020EC  868A               	bsf	3978,3,c	;volatile
  9769                           
  9770                           ;io.c: 123: LATC4=1;
  9771  0020EE  888B               	bsf	3979,4,c	;volatile
  9772  0020F0                     l475:
  9773                           
  9774                           ;io.c: 124: }
  9775                           ;io.c: 125: bled_tmr0_tick = 0;
  9776  0020F0  0E00               	movlw	0
  9777  0020F2  6E12               	movwf	_bled_tmr0_tick,c
  9778                           
  9779                           ;io.c: 126: gled_tmr0_tick = 0;
  9780  0020F4  0E00               	movlw	0
  9781  0020F6  6E13               	movwf	_gled_tmr0_tick,c
  9782  0020F8  0012               	return		;funcret
  9783  0020FA                     __end_of_check_test:
  9784                           	opt stack 0
  9785                           tblptru	equ	0xFF8
  9786                           tblptrh	equ	0xFF7
  9787                           tblptrl	equ	0xFF6
  9788                           tablat	equ	0xFF5
  9789                           prodh	equ	0xFF4
  9790                           prodl	equ	0xFF3
  9791                           intcon	equ	0xFF2
  9792                           postinc0	equ	0xFEE
  9793                           wreg	equ	0xFE8
  9794                           indf1	equ	0xFE7
  9795                           postdec1	equ	0xFE5
  9796                           plusw1	equ	0xFE3
  9797                           fsr1h	equ	0xFE2
  9798                           fsr1l	equ	0xFE1
  9799                           indf2	equ	0xFDF
  9800                           postinc2	equ	0xFDE
  9801                           plusw2	equ	0xFDB
  9802                           fsr2h	equ	0xFDA
  9803                           fsr2l	equ	0xFD9
  9804                           status	equ	0xFD8
  9805                           
  9806 ;; *************** function _reload_tmr3_pt25s *****************
  9807 ;; Defined at:
  9808 ;;		line 350 in file "io.c"
  9809 ;; Parameters:    Size  Location     Type
  9810 ;;		None
  9811 ;; Auto vars:     Size  Location     Type
  9812 ;;		None
  9813 ;; Return value:  Size  Location     Type
  9814 ;;                  1    wreg      void 
  9815 ;; Registers used:
  9816 ;;		wreg, status,2
  9817 ;; Tracked objects:
  9818 ;;		On entry : 0/0
  9819 ;;		On exit  : 0/0
  9820 ;;		Unchanged: 0/0
  9821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9825 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9826 ;;Total ram usage:        0 bytes
  9827 ;; Hardware stack levels used:    1
  9828 ;; Hardware stack levels required when called:    3
  9829 ;; This function calls:
  9830 ;;		Nothing
  9831 ;; This function is called by:
  9832 ;;		_check_test
  9833 ;; This function uses a non-reentrant model
  9834 ;;
  9835                           
  9836                           	psect	text40
  9837  0024AC                     __ptext40:
  9838                           	opt stack 0
  9839  0024AC                     _reload_tmr3_pt25s:
  9840                           	opt stack 25
  9841                           
  9842                           ;io.c: 352: T3CONbits.TMR3ON = 1;
  9843                           
  9844                           ;incstack = 0
  9845  0024AC  80B1               	bsf	4017,0,c	;volatile
  9846                           
  9847                           ;io.c: 353: PIE2bits.TMR3IE = 1;
  9848  0024AE  82A0               	bsf	4000,1,c	;volatile
  9849                           
  9850                           ;io.c: 354: PIR2bits.TMR3IF = 0;
  9851  0024B0  92A1               	bcf	4001,1,c	;volatile
  9852                           
  9853                           ;io.c: 355: TMR3H = 0x0B;
  9854  0024B2  0E0B               	movlw	11
  9855  0024B4  6EB3               	movwf	4019,c	;volatile
  9856                           
  9857                           ;io.c: 356: TMR3L = 0x45;
  9858  0024B6  0E45               	movlw	69
  9859  0024B8  6EB2               	movwf	4018,c	;volatile
  9860  0024BA  0012               	return		;funcret
  9861  0024BC                     __end_of_reload_tmr3_pt25s:
  9862                           	opt stack 0
  9863                           tblptru	equ	0xFF8
  9864                           tblptrh	equ	0xFF7
  9865                           tblptrl	equ	0xFF6
  9866                           tablat	equ	0xFF5
  9867                           prodh	equ	0xFF4
  9868                           prodl	equ	0xFF3
  9869                           intcon	equ	0xFF2
  9870                           postinc0	equ	0xFEE
  9871                           wreg	equ	0xFE8
  9872                           indf1	equ	0xFE7
  9873                           postdec1	equ	0xFE5
  9874                           plusw1	equ	0xFE3
  9875                           fsr1h	equ	0xFE2
  9876                           fsr1l	equ	0xFE1
  9877                           indf2	equ	0xFDF
  9878                           postinc2	equ	0xFDE
  9879                           plusw2	equ	0xFDB
  9880                           fsr2h	equ	0xFDA
  9881                           fsr2l	equ	0xFD9
  9882                           status	equ	0xFD8
  9883                           
  9884 ;; *************** function _check_tamper *****************
  9885 ;; Defined at:
  9886 ;;		line 303 in file "io.c"
  9887 ;; Parameters:    Size  Location     Type
  9888 ;;		None
  9889 ;; Auto vars:     Size  Location     Type
  9890 ;;		None
  9891 ;; Return value:  Size  Location     Type
  9892 ;;                  1    wreg      void 
  9893 ;; Registers used:
  9894 ;;		None
  9895 ;; Tracked objects:
  9896 ;;		On entry : 0/0
  9897 ;;		On exit  : 0/0
  9898 ;;		Unchanged: 0/0
  9899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9903 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9904 ;;Total ram usage:        0 bytes
  9905 ;; Hardware stack levels used:    1
  9906 ;; Hardware stack levels required when called:    3
  9907 ;; This function calls:
  9908 ;;		Nothing
  9909 ;; This function is called by:
  9910 ;;		_check_state
  9911 ;; This function uses a non-reentrant model
  9912 ;;
  9913                           
  9914                           	psect	text41
  9915  002562                     __ptext41:
  9916                           	opt stack 0
  9917  002562                     _check_tamper:
  9918                           	opt stack 26
  9919                           
  9920                           ;incstack = 0
  9921  002562  0012               	return		;funcret
  9922  002564                     __end_of_check_tamper:
  9923                           	opt stack 0
  9924                           tblptru	equ	0xFF8
  9925                           tblptrh	equ	0xFF7
  9926                           tblptrl	equ	0xFF6
  9927                           tablat	equ	0xFF5
  9928                           prodh	equ	0xFF4
  9929                           prodl	equ	0xFF3
  9930                           intcon	equ	0xFF2
  9931                           postinc0	equ	0xFEE
  9932                           wreg	equ	0xFE8
  9933                           indf1	equ	0xFE7
  9934                           postdec1	equ	0xFE5
  9935                           plusw1	equ	0xFE3
  9936                           fsr1h	equ	0xFE2
  9937                           fsr1l	equ	0xFE1
  9938                           indf2	equ	0xFDF
  9939                           postinc2	equ	0xFDE
  9940                           plusw2	equ	0xFDB
  9941                           fsr2h	equ	0xFDA
  9942                           fsr2l	equ	0xFD9
  9943                           status	equ	0xFD8
  9944                           
  9945 ;; *************** function _check_super *****************
  9946 ;; Defined at:
  9947 ;;		line 298 in file "io.c"
  9948 ;; Parameters:    Size  Location     Type
  9949 ;;		None
  9950 ;; Auto vars:     Size  Location     Type
  9951 ;;		None
  9952 ;; Return value:  Size  Location     Type
  9953 ;;                  1    wreg      void 
  9954 ;; Registers used:
  9955 ;;		None
  9956 ;; Tracked objects:
  9957 ;;		On entry : 0/0
  9958 ;;		On exit  : 0/0
  9959 ;;		Unchanged: 0/0
  9960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9964 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9965 ;;Total ram usage:        0 bytes
  9966 ;; Hardware stack levels used:    1
  9967 ;; Hardware stack levels required when called:    3
  9968 ;; This function calls:
  9969 ;;		Nothing
  9970 ;; This function is called by:
  9971 ;;		_check_state
  9972 ;; This function uses a non-reentrant model
  9973 ;;
  9974                           
  9975                           	psect	text42
  9976  002564                     __ptext42:
  9977                           	opt stack 0
  9978  002564                     _check_super:
  9979                           	opt stack 26
  9980                           
  9981                           ;incstack = 0
  9982  002564  0012               	return		;funcret
  9983  002566                     __end_of_check_super:
  9984                           	opt stack 0
  9985                           tblptru	equ	0xFF8
  9986                           tblptrh	equ	0xFF7
  9987                           tblptrl	equ	0xFF6
  9988                           tablat	equ	0xFF5
  9989                           prodh	equ	0xFF4
  9990                           prodl	equ	0xFF3
  9991                           intcon	equ	0xFF2
  9992                           postinc0	equ	0xFEE
  9993                           wreg	equ	0xFE8
  9994                           indf1	equ	0xFE7
  9995                           postdec1	equ	0xFE5
  9996                           plusw1	equ	0xFE3
  9997                           fsr1h	equ	0xFE2
  9998                           fsr1l	equ	0xFE1
  9999                           indf2	equ	0xFDF
 10000                           postinc2	equ	0xFDE
 10001                           plusw2	equ	0xFDB
 10002                           fsr2h	equ	0xFDA
 10003                           fsr2l	equ	0xFD9
 10004                           status	equ	0xFD8
 10005                           
 10006 ;; *************** function _check_sensor *****************
 10007 ;; Defined at:
 10008 ;;		line 77 in file "io.c"
 10009 ;; Parameters:    Size  Location     Type
 10010 ;;		None
 10011 ;; Auto vars:     Size  Location     Type
 10012 ;;  sensorIndex     1   12[BANK0 ] unsigned char 
 10013 ;;  zone            1   11[BANK0 ] unsigned char 
 10014 ;; Return value:  Size  Location     Type
 10015 ;;                  1    wreg      void 
 10016 ;; Registers used:
 10017 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10018 ;; Tracked objects:
 10019 ;;		On entry : 0/0
 10020 ;;		On exit  : 0/0
 10021 ;;		Unchanged: 0/0
 10022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10024 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10026 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10027 ;;Total ram usage:        2 bytes
 10028 ;; Hardware stack levels used:    1
 10029 ;; Hardware stack levels required when called:    7
 10030 ;; This function calls:
 10031 ;;		_add_event
 10032 ;;		_getIndexOfLearnedSensor
 10033 ;; This function is called by:
 10034 ;;		_check_state
 10035 ;; This function uses a non-reentrant model
 10036 ;;
 10037                           
 10038                           	psect	text43
 10039  0021B0                     __ptext43:
 10040                           	opt stack 0
 10041  0021B0                     _check_sensor:
 10042                           	opt stack 22
 10043                           
 10044                           ;io.c: 79: if (receivedSensor)
 10045                           
 10046                           ;incstack = 0
 10047  0021B0  0100               	movlb	0	; () banked
 10048  0021B2  51C7               	movf	_receivedSensor& (0+255),w,b
 10049  0021B4  B4D8               	btfsc	status,2,c
 10050  0021B6  0012               	return	
 10051                           
 10052                           ; BSR set to: 0
 10053                           ;io.c: 80: {
 10054                           ;io.c: 81: uint8_t sensorIndex = getIndexOfLearnedSensor(rx2_buf);
 10055  0021B8  0E1F               	movlw	low _rx2_buf
 10056  0021BA  6F61               	movwf	getIndexOfLearnedSensor@sensorID& (0+255),b
 10057  0021BC  0E00               	movlw	high _rx2_buf
 10058  0021BE  6F62               	movwf	(getIndexOfLearnedSensor@sensorID+1)& (0+255),b
 10059  0021C0  EC96  F00E         	call	_getIndexOfLearnedSensor	;wreg free
 10060  0021C4  0100               	movlb	0	; () banked
 10061  0021C6  6F6C               	movwf	check_sensor@sensorIndex& (0+255),b
 10062                           
 10063                           ; BSR set to: 0
 10064                           ;io.c: 82: uint8_t zone;
 10065                           ;io.c: 83: receivedSensor = 0;
 10066  0021C8  0E00               	movlw	0
 10067  0021CA  6FC7               	movwf	_receivedSensor& (0+255),b
 10068                           
 10069                           ; BSR set to: 0
 10070                           ;io.c: 84: if (sensorIndex != 0xFF)
 10071  0021CC  296C               	incf	check_sensor@sensorIndex& (0+255),w,b
 10072  0021CE  B4D8               	btfsc	status,2,c
 10073  0021D0  0012               	return	
 10074                           
 10075                           ; BSR set to: 0
 10076                           ;io.c: 85: {
 10077                           ;io.c: 86: zone = ID[sensorIndex][3];
 10078  0021D2  516C               	movf	check_sensor@sensorIndex& (0+255),w,b
 10079  0021D4  0D04               	mullw	4
 10080  0021D6  0E03               	movlw	3
 10081  0021D8  26F3               	addwf	prodl,f,c
 10082  0021DA  0E00               	movlw	0
 10083  0021DC  22F4               	addwfc	prodh,f,c
 10084  0021DE  0E00               	movlw	low _ID
 10085  0021E0  24F3               	addwf	prodl,w,c
 10086  0021E2  6ED9               	movwf	fsr2l,c
 10087  0021E4  0E03               	movlw	high _ID
 10088  0021E6  20F4               	addwfc	prodh,w,c
 10089  0021E8  6EDA               	movwf	fsr2h,c
 10090  0021EA  50DF               	movf	indf2,w,c
 10091  0021EC  6F6B               	movwf	check_sensor@zone& (0+255),b
 10092                           
 10093                           ; BSR set to: 0
 10094                           ;io.c: 87: add_event(sensorIndex, zone);
 10095  0021EE  C06B  F060         	movff	check_sensor@zone,add_event@zone
 10096  0021F2  516C               	movf	check_sensor@sensorIndex& (0+255),w,b
 10097  0021F4  ECFC  F00D         	call	_add_event
 10098  0021F8  0012               	return	
 10099  0021FA                     __end_of_check_sensor:
 10100                           	opt stack 0
 10101                           tblptru	equ	0xFF8
 10102                           tblptrh	equ	0xFF7
 10103                           tblptrl	equ	0xFF6
 10104                           tablat	equ	0xFF5
 10105                           prodh	equ	0xFF4
 10106                           prodl	equ	0xFF3
 10107                           intcon	equ	0xFF2
 10108                           postinc0	equ	0xFEE
 10109                           wreg	equ	0xFE8
 10110                           indf1	equ	0xFE7
 10111                           postdec1	equ	0xFE5
 10112                           plusw1	equ	0xFE3
 10113                           fsr1h	equ	0xFE2
 10114                           fsr1l	equ	0xFE1
 10115                           indf2	equ	0xFDF
 10116                           postinc2	equ	0xFDE
 10117                           plusw2	equ	0xFDB
 10118                           fsr2h	equ	0xFDA
 10119                           fsr2l	equ	0xFD9
 10120                           status	equ	0xFD8
 10121                           
 10122 ;; *************** function _getIndexOfLearnedSensor *****************
 10123 ;; Defined at:
 10124 ;;		line 217 in file "io.c"
 10125 ;; Parameters:    Size  Location     Type
 10126 ;;  sensorID        2    1[BANK0 ] PTR unsigned char 
 10127 ;;		 -> rx2_buf(5), 
 10128 ;; Auto vars:     Size  Location     Type
 10129 ;;  j               1   10[BANK0 ] unsigned char 
 10130 ;;  i               1    9[BANK0 ] unsigned char 
 10131 ;;  isLearnedIn     1    8[BANK0 ] unsigned char 
 10132 ;;  sensorIndex     1    7[BANK0 ] unsigned char 
 10133 ;; Return value:  Size  Location     Type
 10134 ;;                  1    wreg      unsigned char 
 10135 ;; Registers used:
 10136 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10137 ;; Tracked objects:
 10138 ;;		On entry : 0/0
 10139 ;;		On exit  : 0/0
 10140 ;;		Unchanged: 0/0
 10141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10142 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10143 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10144 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10145 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10146 ;;Total ram usage:       10 bytes
 10147 ;; Hardware stack levels used:    1
 10148 ;; Hardware stack levels required when called:    6
 10149 ;; This function calls:
 10150 ;;		_send_uart_ack
 10151 ;; This function is called by:
 10152 ;;		_check_sensor
 10153 ;;		_del_sensor
 10154 ;; This function uses a non-reentrant model
 10155 ;;
 10156                           
 10157                           	psect	text44
 10158  001D2C                     __ptext44:
 10159                           	opt stack 0
 10160  001D2C                     _getIndexOfLearnedSensor:
 10161                           	opt stack 22
 10162                           
 10163                           ;io.c: 219: bool isLearnedIn = 0;
 10164                           
 10165                           ;incstack = 0
 10166  001D2C  0E00               	movlw	0
 10167  001D2E  0100               	movlb	0	; () banked
 10168  001D30  6F68               	movwf	getIndexOfLearnedSensor@isLearnedIn& (0+255),b
 10169                           
 10170                           ;io.c: 220: uint8_t i = 0, sensorIndex;
 10171  001D32  0E00               	movlw	0
 10172  001D34  6F69               	movwf	getIndexOfLearnedSensor@i& (0+255),b
 10173                           
 10174                           ;io.c: 221: if (receivedSensor)
 10175  001D36  51C7               	movf	_receivedSensor& (0+255),w,b
 10176  001D38  B4D8               	btfsc	status,2,c
 10177  001D3A  D041               	goto	u9570
 10178                           
 10179                           ; BSR set to: 0
 10180                           ;io.c: 222: {
 10181                           ;io.c: 223: receivedSensor = 0;
 10182  001D3C  0E00               	movlw	0
 10183  001D3E  6FC7               	movwf	_receivedSensor& (0+255),b
 10184                           
 10185                           ; BSR set to: 0
 10186                           ;io.c: 224: send_uart_ack();
 10187  001D40  ECFB  F011         	call	_send_uart_ack	;wreg free
 10188                           
 10189                           ;io.c: 225: while (i < 16 && !isLearnedIn)
 10190  001D44  D035               	goto	l511
 10191  001D46                     
 10192                           ;io.c: 226: {
 10193                           ;io.c: 227: isLearnedIn = 1;
 10194  001D46  0E01               	movlw	1
 10195  001D48  0100               	movlb	0	; () banked
 10196  001D4A  6F68               	movwf	getIndexOfLearnedSensor@isLearnedIn& (0+255),b
 10197                           
 10198                           ;io.c: 228: for (uint8_t j = 0; j < 4 - 1; j++)
 10199  001D4C  0E00               	movlw	0
 10200  001D4E  6F6A               	movwf	getIndexOfLearnedSensor@j& (0+255),b
 10201  001D50                     l7472:
 10202                           
 10203                           ; BSR set to: 0
 10204  001D50  0E02               	movlw	2
 10205  001D52  656A               	cpfsgt	getIndexOfLearnedSensor@j& (0+255),b
 10206  001D54  D001               	goto	l513
 10207  001D56  D024               	goto	u9540
 10208  001D58                     l513:
 10209                           
 10210                           ; BSR set to: 0
 10211                           ;io.c: 229: {
 10212                           ;io.c: 230: isLearnedIn &= (bool)(rx2_buf[j] == ID[i][j]);
 10213                           
 10214                           ; BSR set to: 0
 10215  001D58  5169               	movf	getIndexOfLearnedSensor@i& (0+255),w,b
 10216  001D5A  0D04               	mullw	4
 10217  001D5C  0E00               	movlw	low _ID
 10218  001D5E  6F63               	movwf	??_getIndexOfLearnedSensor& (0+255),b
 10219  001D60  0E03               	movlw	high _ID
 10220  001D62  6F64               	movwf	(??_getIndexOfLearnedSensor+1)& (0+255),b
 10221  001D64  50F3               	movf	prodl,w,c
 10222  001D66  2763               	addwf	??_getIndexOfLearnedSensor& (0+255),f,b
 10223  001D68  50F4               	movf	prodh,w,c
 10224  001D6A  2364               	addwfc	(??_getIndexOfLearnedSensor+1)& (0+255),f,b
 10225  001D6C  516A               	movf	getIndexOfLearnedSensor@j& (0+255),w,b
 10226  001D6E  0D01               	mullw	1
 10227  001D70  50F3               	movf	prodl,w,c
 10228  001D72  2563               	addwf	??_getIndexOfLearnedSensor& (0+255),w,b
 10229  001D74  6ED9               	movwf	fsr2l,c
 10230  001D76  50F4               	movf	prodh,w,c
 10231  001D78  2164               	addwfc	(??_getIndexOfLearnedSensor+1)& (0+255),w,b
 10232  001D7A  6EDA               	movwf	fsr2h,c
 10233  001D7C  516A               	movf	getIndexOfLearnedSensor@j& (0+255),w,b
 10234  001D7E  0D01               	mullw	1
 10235  001D80  0E1F               	movlw	low _rx2_buf
 10236  001D82  24F3               	addwf	prodl,w,c
 10237  001D84  6EE1               	movwf	fsr1l,c
 10238  001D86  0E00               	movlw	high _rx2_buf
 10239  001D88  20F4               	addwfc	prodh,w,c
 10240  001D8A  6EE2               	movwf	fsr1h,c
 10241  001D8C  50DE               	movf	postinc2,w,c
 10242  001D8E  18E6               	xorwf	postinc1,w,c
 10243  001D90  A4D8               	btfss	status,2,c
 10244  001D92  D002               	goto	u9520
 10245  001D94  0E01               	movlw	1
 10246  001D96  D001               	goto	u9530
 10247  001D98                     u9520:
 10248  001D98  0E00               	movlw	0
 10249  001D9A                     u9530:
 10250  001D9A  1768               	andwf	getIndexOfLearnedSensor@isLearnedIn& (0+255),f,b
 10251                           
 10252                           ; BSR set to: 0
 10253  001D9C  2B6A               	incf	getIndexOfLearnedSensor@j& (0+255),f,b
 10254  001D9E  D7D8               	goto	l7472
 10255  001DA0                     u9540:
 10256                           
 10257                           ; BSR set to: 0
 10258                           ;io.c: 231: }
 10259                           ;io.c: 232: if (isLearnedIn)
 10260                           
 10261                           ; BSR set to: 0
 10262  001DA0  5168               	movf	getIndexOfLearnedSensor@isLearnedIn& (0+255),w,b
 10263  001DA2  B4D8               	btfsc	status,2,c
 10264  001DA4  D004               	goto	l515
 10265                           
 10266                           ; BSR set to: 0
 10267                           ;io.c: 233: {
 10268                           ;io.c: 234: sensorIndex = i;
 10269  001DA6  C069  F067         	movff	getIndexOfLearnedSensor@i,getIndexOfLearnedSensor@sensorIndex
 10270                           
 10271                           ; BSR set to: 0
 10272                           ;io.c: 235: return sensorIndex;
 10273  001DAA  5167               	movf	getIndexOfLearnedSensor@sensorIndex& (0+255),w,b
 10274                           
 10275                           ; BSR set to: 0
 10276  001DAC  0012               	return	
 10277  001DAE                     l515:
 10278                           
 10279                           ; BSR set to: 0
 10280                           ;io.c: 236: }
 10281                           ;io.c: 237: i++;
 10282                           
 10283                           ; BSR set to: 0
 10284  001DAE  2B69               	incf	getIndexOfLearnedSensor@i& (0+255),f,b
 10285  001DB0                     l511:
 10286                           
 10287                           ; BSR set to: 0
 10288  001DB0  0E10               	movlw	16
 10289  001DB2  0100               	movlb	0	; () banked
 10290  001DB4  6169               	cpfslt	getIndexOfLearnedSensor@i& (0+255),b
 10291  001DB6  D003               	goto	u9570
 10292                           
 10293                           ; BSR set to: 0
 10294  001DB8  5168               	movf	getIndexOfLearnedSensor@isLearnedIn& (0+255),w,b
 10295  001DBA  B4D8               	btfsc	status,2,c
 10296  001DBC  D7C4               	goto	l512
 10297  001DBE                     u9570:
 10298                           
 10299                           ; BSR set to: 0
 10300                           ;io.c: 238: }
 10301                           ;io.c: 239: }
 10302                           ;io.c: 240: return 0xFF;
 10303                           
 10304                           ; BSR set to: 0
 10305                           
 10306                           ; BSR set to: 0
 10307                           
 10308                           ; BSR set to: 0
 10309  001DBE  0EFF               	movlw	255
 10310  001DC0  0012               	return	
 10311  001DC2                     __end_of_getIndexOfLearnedSensor:
 10312                           	opt stack 0
 10313                           tblptru	equ	0xFF8
 10314                           tblptrh	equ	0xFF7
 10315                           tblptrl	equ	0xFF6
 10316                           tablat	equ	0xFF5
 10317                           prodh	equ	0xFF4
 10318                           prodl	equ	0xFF3
 10319                           intcon	equ	0xFF2
 10320                           postinc0	equ	0xFEE
 10321                           wreg	equ	0xFE8
 10322                           indf1	equ	0xFE7
 10323                           postinc1	equ	0xFE6
 10324                           postdec1	equ	0xFE5
 10325                           plusw1	equ	0xFE3
 10326                           fsr1h	equ	0xFE2
 10327                           fsr1l	equ	0xFE1
 10328                           indf2	equ	0xFDF
 10329                           postinc2	equ	0xFDE
 10330                           plusw2	equ	0xFDB
 10331                           fsr2h	equ	0xFDA
 10332                           fsr2l	equ	0xFD9
 10333                           status	equ	0xFD8
 10334                           
 10335 ;; *************** function _add_event *****************
 10336 ;; Defined at:
 10337 ;;		line 19 in file "queue.c"
 10338 ;; Parameters:    Size  Location     Type
 10339 ;;  event           1    wreg     enum E6758
 10340 ;;  zone            1    0[BANK0 ] unsigned char 
 10341 ;; Auto vars:     Size  Location     Type
 10342 ;;  event           1    2[BANK0 ] enum E6758
 10343 ;;  i               1    3[BANK0 ] unsigned char 
 10344 ;; Return value:  Size  Location     Type
 10345 ;;                  1    wreg      unsigned char 
 10346 ;; Registers used:
 10347 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10348 ;; Tracked objects:
 10349 ;;		On entry : 0/0
 10350 ;;		On exit  : 0/0
 10351 ;;		Unchanged: 0/0
 10352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10353 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10354 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10355 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10356 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10357 ;;Total ram usage:        4 bytes
 10358 ;; Hardware stack levels used:    1
 10359 ;; Hardware stack levels required when called:    3
 10360 ;; This function calls:
 10361 ;;		Nothing
 10362 ;; This function is called by:
 10363 ;;		_check_sensor
 10364 ;; This function uses a non-reentrant model
 10365 ;;
 10366                           
 10367                           	psect	text45
 10368  001BF8                     __ptext45:
 10369                           	opt stack 0
 10370  001BF8                     _add_event:
 10371                           	opt stack 25
 10372                           
 10373                           ; BSR set to: 0
 10374                           ;incstack = 0
 10375                           ;add_event@event stored from wreg
 10376  001BF8  0100               	movlb	0	; () banked
 10377  001BFA  6F62               	movwf	add_event@event& (0+255),b
 10378                           
 10379                           ;queue.c: 21: if (queue_end_ptr == 0)
 10380  001BFC  5002               	movf	_queue_end_ptr,w,c
 10381  001BFE  A4D8               	btfss	status,2,c
 10382  001C00  D004               	goto	l1273
 10383                           
 10384                           ;queue.c: 22: {
 10385                           ;queue.c: 23: event_queue[0][0] = event;
 10386  001C02  C062  F1C1         	movff	add_event@event,_event_queue
 10387                           
 10388                           ;queue.c: 24: queue_end_ptr++;
 10389  001C06  2A02               	incf	_queue_end_ptr,f,c
 10390                           
 10391                           ;queue.c: 25: }
 10392  001C08  0012               	return	
 10393  001C0A                     l1273:
 10394                           
 10395                           ;queue.c: 26: else
 10396                           ;queue.c: 27: {
 10397                           ;queue.c: 28: for (uint8_t i = 0; i < queue_end_ptr; i++)
 10398  001C0A  0E00               	movlw	0
 10399  001C0C  0100               	movlb	0	; () banked
 10400  001C0E  6F63               	movwf	add_event@i& (0+255),b
 10401  001C10  D01D               	goto	l1275
 10402  001C12                     
 10403                           ; BSR set to: 0
 10404                           ;queue.c: 29: {
 10405                           ;queue.c: 30: if (event_queue[i][0] == event && event_queue[i][1] == zone)
 10406                           
 10407                           ; BSR set to: 0
 10408  001C12  5163               	movf	add_event@i& (0+255),w,b
 10409  001C14  0D02               	mullw	2
 10410  001C16  0EC1               	movlw	low _event_queue
 10411  001C18  24F3               	addwf	prodl,w,c
 10412  001C1A  6ED9               	movwf	fsr2l,c
 10413  001C1C  0E01               	movlw	high _event_queue
 10414  001C1E  20F4               	addwfc	prodh,w,c
 10415  001C20  6EDA               	movwf	fsr2h,c
 10416  001C22  5162               	movf	add_event@event& (0+255),w,b
 10417  001C24  18DE               	xorwf	postinc2,w,c
 10418  001C26  A4D8               	btfss	status,2,c
 10419  001C28  D010               	goto	l1277
 10420                           
 10421                           ; BSR set to: 0
 10422  001C2A  5163               	movf	add_event@i& (0+255),w,b
 10423  001C2C  0D02               	mullw	2
 10424  001C2E  0E01               	movlw	1
 10425  001C30  26F3               	addwf	prodl,f,c
 10426  001C32  0E00               	movlw	0
 10427  001C34  22F4               	addwfc	prodh,f,c
 10428  001C36  0EC1               	movlw	low _event_queue
 10429  001C38  24F3               	addwf	prodl,w,c
 10430  001C3A  6ED9               	movwf	fsr2l,c
 10431  001C3C  0E01               	movlw	high _event_queue
 10432  001C3E  20F4               	addwfc	prodh,w,c
 10433  001C40  6EDA               	movwf	fsr2h,c
 10434  001C42  5160               	movf	add_event@zone& (0+255),w,b
 10435  001C44  18DE               	xorwf	postinc2,w,c
 10436  001C46  B4D8               	btfsc	status,2,c
 10437  001C48  0012               	return	
 10438  001C4A                     l1277:
 10439                           
 10440                           ; BSR set to: 0
 10441                           
 10442                           ; BSR set to: 0
 10443  001C4A  2B63               	incf	add_event@i& (0+255),f,b
 10444  001C4C                     l1275:
 10445                           
 10446                           ; BSR set to: 0
 10447                           
 10448                           ; BSR set to: 0
 10449  001C4C  5002               	movf	_queue_end_ptr,w,c
 10450  001C4E  5D63               	subwf	add_event@i& (0+255),w,b
 10451  001C50  A0D8               	btfss	status,0,c
 10452  001C52  D7DF               	goto	l1276
 10453                           
 10454                           ; BSR set to: 0
 10455                           ;queue.c: 32: }
 10456                           ;queue.c: 35: event_queue[queue_end_ptr][0] = event;
 10457                           
 10458                           ; BSR set to: 0
 10459  001C54  5002               	movf	_queue_end_ptr,w,c
 10460  001C56  0D02               	mullw	2
 10461  001C58  0EC1               	movlw	low _event_queue
 10462  001C5A  24F3               	addwf	prodl,w,c
 10463  001C5C  6ED9               	movwf	fsr2l,c
 10464  001C5E  0E01               	movlw	high _event_queue
 10465  001C60  20F4               	addwfc	prodh,w,c
 10466  001C62  6EDA               	movwf	fsr2h,c
 10467  001C64  C062  FFDF         	movff	add_event@event,indf2
 10468                           
 10469                           ;queue.c: 36: event_queue[queue_end_ptr][1] = zone;
 10470  001C68  5002               	movf	_queue_end_ptr,w,c
 10471  001C6A  0D02               	mullw	2
 10472  001C6C  0E01               	movlw	1
 10473  001C6E  26F3               	addwf	prodl,f,c
 10474  001C70  0E00               	movlw	0
 10475  001C72  22F4               	addwfc	prodh,f,c
 10476  001C74  0EC1               	movlw	low _event_queue
 10477  001C76  24F3               	addwf	prodl,w,c
 10478  001C78  6ED9               	movwf	fsr2l,c
 10479  001C7A  0E01               	movlw	high _event_queue
 10480  001C7C  20F4               	addwfc	prodh,w,c
 10481  001C7E  6EDA               	movwf	fsr2h,c
 10482  001C80  C060  FFDF         	movff	add_event@zone,indf2
 10483                           
 10484                           ; BSR set to: 0
 10485                           ;queue.c: 37: if (queue_end_ptr++ >= sizeof(event_queue))
 10486  001C84  2A02               	incf	_queue_end_ptr,f,c
 10487  001C86  0402               	decf	_queue_end_ptr,w,c
 10488  001C88  6F61               	movwf	??_add_event& (0+255),b
 10489  001C8A  0E27               	movlw	39
 10490  001C8C  6561               	cpfsgt	??_add_event& (0+255),b
 10491  001C8E  0012               	return	
 10492                           
 10493                           ; BSR set to: 0
 10494                           ;queue.c: 38: queue_end_ptr--;
 10495  001C90  0602               	decf	_queue_end_ptr,f,c
 10496                           
 10497                           ; BSR set to: 0
 10498                           
 10499                           ; BSR set to: 0
 10500  001C92  0012               	return	
 10501  001C94                     __end_of_add_event:
 10502                           	opt stack 0
 10503                           tblptru	equ	0xFF8
 10504                           tblptrh	equ	0xFF7
 10505                           tblptrl	equ	0xFF6
 10506                           tablat	equ	0xFF5
 10507                           prodh	equ	0xFF4
 10508                           prodl	equ	0xFF3
 10509                           intcon	equ	0xFF2
 10510                           postinc0	equ	0xFEE
 10511                           wreg	equ	0xFE8
 10512                           indf1	equ	0xFE7
 10513                           postinc1	equ	0xFE6
 10514                           postdec1	equ	0xFE5
 10515                           plusw1	equ	0xFE3
 10516                           fsr1h	equ	0xFE2
 10517                           fsr1l	equ	0xFE1
 10518                           indf2	equ	0xFDF
 10519                           postinc2	equ	0xFDE
 10520                           plusw2	equ	0xFDB
 10521                           fsr2h	equ	0xFDA
 10522                           fsr2l	equ	0xFD9
 10523                           status	equ	0xFD8
 10524                           
 10525 ;; *************** function _check_alarm *****************
 10526 ;; Defined at:
 10527 ;;		line 308 in file "io.c"
 10528 ;; Parameters:    Size  Location     Type
 10529 ;;		None
 10530 ;; Auto vars:     Size  Location     Type
 10531 ;;		None
 10532 ;; Return value:  Size  Location     Type
 10533 ;;                  1    wreg      void 
 10534 ;; Registers used:
 10535 ;;		None
 10536 ;; Tracked objects:
 10537 ;;		On entry : 0/0
 10538 ;;		On exit  : 0/0
 10539 ;;		Unchanged: 0/0
 10540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10542 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10544 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10545 ;;Total ram usage:        0 bytes
 10546 ;; Hardware stack levels used:    1
 10547 ;; Hardware stack levels required when called:    3
 10548 ;; This function calls:
 10549 ;;		Nothing
 10550 ;; This function is called by:
 10551 ;;		_check_state
 10552 ;; This function uses a non-reentrant model
 10553 ;;
 10554                           
 10555                           	psect	text46
 10556  002566                     __ptext46:
 10557                           	opt stack 0
 10558  002566                     _check_alarm:
 10559                           	opt stack 26
 10560                           
 10561                           ;incstack = 0
 10562  002566  0012               	return		;funcret
 10563  002568                     __end_of_check_alarm:
 10564                           	opt stack 0
 10565                           tblptru	equ	0xFF8
 10566                           tblptrh	equ	0xFF7
 10567                           tblptrl	equ	0xFF6
 10568                           tablat	equ	0xFF5
 10569                           prodh	equ	0xFF4
 10570                           prodl	equ	0xFF3
 10571                           intcon	equ	0xFF2
 10572                           postinc0	equ	0xFEE
 10573                           wreg	equ	0xFE8
 10574                           indf1	equ	0xFE7
 10575                           postinc1	equ	0xFE6
 10576                           postdec1	equ	0xFE5
 10577                           plusw1	equ	0xFE3
 10578                           fsr1h	equ	0xFE2
 10579                           fsr1l	equ	0xFE1
 10580                           indf2	equ	0xFDF
 10581                           postinc2	equ	0xFDE
 10582                           plusw2	equ	0xFDB
 10583                           fsr2h	equ	0xFDA
 10584                           fsr2l	equ	0xFD9
 10585                           status	equ	0xFD8
 10586                           
 10587 ;; *************** function _add_sensor *****************
 10588 ;; Defined at:
 10589 ;;		line 152 in file "io.c"
 10590 ;; Parameters:    Size  Location     Type
 10591 ;;  sensorID        2    6[BANK0 ] PTR unsigned char 
 10592 ;;		 -> rx2_buf(5), 
 10593 ;; Auto vars:     Size  Location     Type
 10594 ;;  i               1   16[BANK0 ] unsigned char 
 10595 ;;  i               1   15[BANK0 ] unsigned char 
 10596 ;;  zone            1   13[BANK0 ] unsigned char 
 10597 ;;  isUnique        1   12[BANK0 ] unsigned char 
 10598 ;;  dev_type_exi    1   11[BANK0 ] unsigned char 
 10599 ;;  dev_type_new    1   10[BANK0 ] unsigned char 
 10600 ;; Return value:  Size  Location     Type
 10601 ;;                  1    wreg      void 
 10602 ;; Registers used:
 10603 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10604 ;; Tracked objects:
 10605 ;;		On entry : 0/0
 10606 ;;		On exit  : 0/0
 10607 ;;		Unchanged: 0/0
 10608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10609 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10610 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10611 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10612 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10613 ;;Total ram usage:       11 bytes
 10614 ;; Hardware stack levels used:    1
 10615 ;; Hardware stack levels required when called:    6
 10616 ;; This function calls:
 10617 ;;		_ee_write
 10618 ;;		_send_uart_ack
 10619 ;; This function is called by:
 10620 ;;		_check_state
 10621 ;; This function uses a non-reentrant model
 10622 ;;
 10623                           
 10624                           	psect	text47
 10625  000E5C                     __ptext47:
 10626                           	opt stack 0
 10627  000E5C                     _add_sensor:
 10628                           	opt stack 23
 10629                           
 10630                           ;io.c: 154: bool isUnique = 1;
 10631                           
 10632                           ;incstack = 0
 10633  000E5C  0E01               	movlw	1
 10634  000E5E  0100               	movlb	0	; () banked
 10635  000E60  6F6C               	movwf	add_sensor@isUnique& (0+255),b
 10636                           
 10637                           ;io.c: 155: uint8_t zone = 1, dev_type_new, dev_type_existing;
 10638  000E62  0E01               	movlw	1
 10639  000E64  6F6D               	movwf	add_sensor@zone& (0+255),b
 10640                           
 10641                           ;io.c: 156: if (receivedSensor && (idEndPtr < (4 - 1)))
 10642  000E66  51C7               	movf	_receivedSensor& (0+255),w,b
 10643  000E68  B4D8               	btfsc	status,2,c
 10644  000E6A  0012               	return	
 10645                           
 10646                           ; BSR set to: 0
 10647  000E6C  0E03               	movlw	3
 10648  000E6E  61CA               	cpfslt	_idEndPtr& (0+255),b
 10649  000E70  0012               	return	
 10650                           
 10651                           ; BSR set to: 0
 10652                           ;io.c: 157: {
 10653                           ;io.c: 158: receivedSensor = 0;
 10654  000E72  0E00               	movlw	0
 10655  000E74  6FC7               	movwf	_receivedSensor& (0+255),b
 10656                           
 10657                           ; BSR set to: 0
 10658                           ;io.c: 159: send_uart_ack();
 10659  000E76  ECFB  F011         	call	_send_uart_ack	;wreg free
 10660                           
 10661                           ;io.c: 160: for (uint8_t i = 0; i < 16; i++)
 10662  000E7A  0E00               	movlw	0
 10663  000E7C  0100               	movlb	0	; () banked
 10664  000E7E  6F6F               	movwf	add_sensor@i& (0+255),b
 10665  000E80                     l7900:
 10666                           
 10667                           ; BSR set to: 0
 10668  000E80  0E0F               	movlw	15
 10669  000E82  656F               	cpfsgt	add_sensor@i& (0+255),b
 10670  000E84  D001               	goto	l480
 10671  000E86  D04A               	goto	u10400
 10672  000E88                     l480:
 10673                           
 10674                           ; BSR set to: 0
 10675                           ;io.c: 161: {
 10676                           ;io.c: 162: isUnique &= (bool)((bool)(rx2_buf[0] != ID[i][0]) || (bool)(rx2_buf[1] != ID
      +                          [i][1]) || (bool)(rx2_buf[2] != ID[i][2]));
 10677                           
 10678                           ; BSR set to: 0
 10679  000E88  0E01               	movlw	1
 10680  000E8A  6F6E               	movwf	_add_sensor$1162& (0+255),b
 10681                           
 10682                           ; BSR set to: 0
 10683  000E8C  516F               	movf	add_sensor@i& (0+255),w,b
 10684  000E8E  0D04               	mullw	4
 10685  000E90  0E00               	movlw	low _ID
 10686  000E92  24F3               	addwf	prodl,w,c
 10687  000E94  6ED9               	movwf	fsr2l,c
 10688  000E96  0E03               	movlw	high _ID
 10689  000E98  20F4               	addwfc	prodh,w,c
 10690  000E9A  6EDA               	movwf	fsr2h,c
 10691  000E9C  501F               	movf	_rx2_buf,w,c
 10692  000E9E  18DE               	xorwf	postinc2,w,c
 10693  000EA0  A4D8               	btfss	status,2,c
 10694  000EA2  D022               	goto	l483
 10695                           
 10696                           ; BSR set to: 0
 10697  000EA4  516F               	movf	add_sensor@i& (0+255),w,b
 10698  000EA6  0D04               	mullw	4
 10699  000EA8  0E01               	movlw	1
 10700  000EAA  26F3               	addwf	prodl,f,c
 10701  000EAC  0E00               	movlw	0
 10702  000EAE  22F4               	addwfc	prodh,f,c
 10703  000EB0  0E00               	movlw	low _ID
 10704  000EB2  24F3               	addwf	prodl,w,c
 10705  000EB4  6ED9               	movwf	fsr2l,c
 10706  000EB6  0E03               	movlw	high _ID
 10707  000EB8  20F4               	addwfc	prodh,w,c
 10708  000EBA  6EDA               	movwf	fsr2h,c
 10709  000EBC  50DE               	movf	postinc2,w,c
 10710  000EBE  1820               	xorwf	_rx2_buf+1,w,c
 10711  000EC0  A4D8               	btfss	status,2,c
 10712  000EC2  D012               	goto	l483
 10713                           
 10714                           ; BSR set to: 0
 10715  000EC4  516F               	movf	add_sensor@i& (0+255),w,b
 10716  000EC6  0D04               	mullw	4
 10717  000EC8  0E02               	movlw	2
 10718  000ECA  26F3               	addwf	prodl,f,c
 10719  000ECC  0E00               	movlw	0
 10720  000ECE  22F4               	addwfc	prodh,f,c
 10721  000ED0  0E00               	movlw	low _ID
 10722  000ED2  24F3               	addwf	prodl,w,c
 10723  000ED4  6ED9               	movwf	fsr2l,c
 10724  000ED6  0E03               	movlw	high _ID
 10725  000ED8  20F4               	addwfc	prodh,w,c
 10726  000EDA  6EDA               	movwf	fsr2h,c
 10727  000EDC  50DE               	movf	postinc2,w,c
 10728  000EDE  1821               	xorwf	_rx2_buf+2,w,c
 10729  000EE0  A4D8               	btfss	status,2,c
 10730  000EE2  D002               	goto	l483
 10731                           
 10732                           ; BSR set to: 0
 10733  000EE4  0E00               	movlw	0
 10734  000EE6  6F6E               	movwf	_add_sensor$1162& (0+255),b
 10735  000EE8                     l483:
 10736                           
 10737                           ; BSR set to: 0
 10738                           
 10739                           ; BSR set to: 0
 10740  000EE8  516E               	movf	_add_sensor$1162& (0+255),w,b
 10741  000EEA  176C               	andwf	add_sensor@isUnique& (0+255),f,b
 10742                           
 10743                           ; BSR set to: 0
 10744                           ;io.c: 164: dev_type_new = (uint8_t)((rx2_buf[0] >> 4) & 0x0F);
 10745  000EEC  381F               	swapf	_rx2_buf,w,c
 10746  000EEE  0B0F               	andlw	15
 10747  000EF0  0B0F               	andlw	15
 10748  000EF2  6F6A               	movwf	add_sensor@dev_type_new& (0+255),b
 10749                           
 10750                           ; BSR set to: 0
 10751                           ;io.c: 165: dev_type_existing = (uint8_t)((ID[i][0] >> 4) & 0x0F);
 10752  000EF4  516F               	movf	add_sensor@i& (0+255),w,b
 10753  000EF6  0D04               	mullw	4
 10754  000EF8  0E00               	movlw	low _ID
 10755  000EFA  24F3               	addwf	prodl,w,c
 10756  000EFC  6ED9               	movwf	fsr2l,c
 10757  000EFE  0E03               	movlw	high _ID
 10758  000F00  20F4               	addwfc	prodh,w,c
 10759  000F02  6EDA               	movwf	fsr2h,c
 10760  000F04  50DF               	movf	indf2,w,c
 10761  000F06  6F68               	movwf	??_add_sensor& (0+255),b
 10762  000F08  3968               	swapf	??_add_sensor& (0+255),w,b
 10763  000F0A  0B0F               	andlw	15
 10764  000F0C  0B0F               	andlw	15
 10765  000F0E  6F6B               	movwf	add_sensor@dev_type_existing& (0+255),b
 10766                           
 10767                           ; BSR set to: 0
 10768                           ;io.c: 166: if (dev_type_existing == dev_type_new)
 10769  000F10  516A               	movf	add_sensor@dev_type_new& (0+255),w,b
 10770  000F12  196B               	xorwf	add_sensor@dev_type_existing& (0+255),w,b
 10771  000F14  B4D8               	btfsc	status,2,c
 10772                           
 10773                           ; BSR set to: 0
 10774                           ;io.c: 167: zone++;
 10775  000F16  2B6D               	incf	add_sensor@zone& (0+255),f,b
 10776                           
 10777                           ; BSR set to: 0
 10778  000F18  2B6F               	incf	add_sensor@i& (0+255),f,b
 10779  000F1A  D7B2               	goto	l7900
 10780  000F1C                     u10400:
 10781                           
 10782                           ; BSR set to: 0
 10783                           ;io.c: 168: }
 10784                           ;io.c: 169: if (isUnique)
 10785                           
 10786                           ; BSR set to: 0
 10787  000F1C  516C               	movf	add_sensor@isUnique& (0+255),w,b
 10788  000F1E  B4D8               	btfsc	status,2,c
 10789  000F20  0012               	return	
 10790                           
 10791                           ; BSR set to: 0
 10792                           ;io.c: 170: {
 10793                           ;io.c: 171: for (uint8_t i = 0; i < 4 - 1; i++)
 10794  000F22  0E00               	movlw	0
 10795  000F24  6F70               	movwf	add_sensor@i_1163& (0+255),b
 10796  000F26                     l7930:
 10797                           
 10798                           ; BSR set to: 0
 10799  000F26  0E02               	movlw	2
 10800  000F28  6570               	cpfsgt	add_sensor@i_1163& (0+255),b
 10801  000F2A  D001               	goto	l486
 10802  000F2C  D03C               	goto	u10430
 10803  000F2E                     l486:
 10804                           
 10805                           ; BSR set to: 0
 10806                           ;io.c: 172: {
 10807                           ;io.c: 173: ID[idEndPtr][i] = rx2_buf[i];
 10808                           
 10809                           ; BSR set to: 0
 10810  000F2E  5170               	movf	add_sensor@i_1163& (0+255),w,b
 10811  000F30  0D01               	mullw	1
 10812  000F32  0E1F               	movlw	low _rx2_buf
 10813  000F34  24F3               	addwf	prodl,w,c
 10814  000F36  6ED9               	movwf	fsr2l,c
 10815  000F38  0E00               	movlw	high _rx2_buf
 10816  000F3A  20F4               	addwfc	prodh,w,c
 10817  000F3C  6EDA               	movwf	fsr2h,c
 10818  000F3E  51CA               	movf	_idEndPtr& (0+255),w,b
 10819  000F40  0D04               	mullw	4
 10820  000F42  0E00               	movlw	low _ID
 10821  000F44  6F68               	movwf	??_add_sensor& (0+255),b
 10822  000F46  0E03               	movlw	high _ID
 10823  000F48  6F69               	movwf	(??_add_sensor+1)& (0+255),b
 10824  000F4A  50F3               	movf	prodl,w,c
 10825  000F4C  2768               	addwf	??_add_sensor& (0+255),f,b
 10826  000F4E  50F4               	movf	prodh,w,c
 10827  000F50  2369               	addwfc	(??_add_sensor+1)& (0+255),f,b
 10828  000F52  5170               	movf	add_sensor@i_1163& (0+255),w,b
 10829  000F54  0D01               	mullw	1
 10830  000F56  50F3               	movf	prodl,w,c
 10831  000F58  2568               	addwf	??_add_sensor& (0+255),w,b
 10832  000F5A  6EE1               	movwf	fsr1l,c
 10833  000F5C  50F4               	movf	prodh,w,c
 10834  000F5E  2169               	addwfc	(??_add_sensor+1)& (0+255),w,b
 10835  000F60  6EE2               	movwf	fsr1h,c
 10836  000F62  CFDF FFE7          	movff	indf2,indf1
 10837                           
 10838                           ; BSR set to: 0
 10839                           ;io.c: 174: ee_write(0x01, (uint8_t)(0x80 + (4 * idEndPtr) + i), ID[idEndPtr][i]);
 10840  000F66  51CA               	movf	_idEndPtr& (0+255),w,b
 10841  000F68  0D04               	mullw	4
 10842  000F6A  50F3               	movf	prodl,w,c
 10843  000F6C  2570               	addwf	add_sensor@i_1163& (0+255),w,b
 10844  000F6E  0F80               	addlw	128
 10845  000F70  6F63               	movwf	ee_write@addr& (0+255),b
 10846  000F72  51CA               	movf	_idEndPtr& (0+255),w,b
 10847  000F74  0D04               	mullw	4
 10848  000F76  0E00               	movlw	low _ID
 10849  000F78  6F68               	movwf	??_add_sensor& (0+255),b
 10850  000F7A  0E03               	movlw	high _ID
 10851  000F7C  6F69               	movwf	(??_add_sensor+1)& (0+255),b
 10852  000F7E  50F3               	movf	prodl,w,c
 10853  000F80  2768               	addwf	??_add_sensor& (0+255),f,b
 10854  000F82  50F4               	movf	prodh,w,c
 10855  000F84  2369               	addwfc	(??_add_sensor+1)& (0+255),f,b
 10856  000F86  5170               	movf	add_sensor@i_1163& (0+255),w,b
 10857  000F88  0D01               	mullw	1
 10858  000F8A  50F3               	movf	prodl,w,c
 10859  000F8C  2568               	addwf	??_add_sensor& (0+255),w,b
 10860  000F8E  6ED9               	movwf	fsr2l,c
 10861  000F90  50F4               	movf	prodh,w,c
 10862  000F92  2169               	addwfc	(??_add_sensor+1)& (0+255),w,b
 10863  000F94  6EDA               	movwf	fsr2h,c
 10864  000F96  50DF               	movf	indf2,w,c
 10865  000F98  6F64               	movwf	ee_write@data& (0+255),b
 10866  000F9A  0E01               	movlw	1
 10867  000F9C  EC50  F011         	call	_ee_write
 10868  000FA0  0100               	movlb	0	; () banked
 10869  000FA2  2B70               	incf	add_sensor@i_1163& (0+255),f,b
 10870  000FA4  D7C0               	goto	l7930
 10871  000FA6                     u10430:
 10872                           
 10873                           ; BSR set to: 0
 10874                           ;io.c: 175: }
 10875                           ;io.c: 176: ID[idEndPtr][3] = zone;
 10876                           
 10877                           ; BSR set to: 0
 10878  000FA6  51CA               	movf	_idEndPtr& (0+255),w,b
 10879  000FA8  0D04               	mullw	4
 10880  000FAA  0E03               	movlw	3
 10881  000FAC  26F3               	addwf	prodl,f,c
 10882  000FAE  0E00               	movlw	0
 10883  000FB0  22F4               	addwfc	prodh,f,c
 10884  000FB2  0E00               	movlw	low _ID
 10885  000FB4  24F3               	addwf	prodl,w,c
 10886  000FB6  6ED9               	movwf	fsr2l,c
 10887  000FB8  0E03               	movlw	high _ID
 10888  000FBA  20F4               	addwfc	prodh,w,c
 10889  000FBC  6EDA               	movwf	fsr2h,c
 10890  000FBE  C06D  FFDF         	movff	add_sensor@zone,indf2
 10891                           
 10892                           ; BSR set to: 0
 10893                           ;io.c: 177: ee_write(0x01, (uint8_t)(0x80 + (4 * idEndPtr) + 3), ID[idEndPtr][3]);
 10894  000FC2  51CA               	movf	_idEndPtr& (0+255),w,b
 10895  000FC4  0D04               	mullw	4
 10896  000FC6  50F3               	movf	prodl,w,c
 10897  000FC8  0F83               	addlw	131
 10898  000FCA  6F63               	movwf	ee_write@addr& (0+255),b
 10899  000FCC  51CA               	movf	_idEndPtr& (0+255),w,b
 10900  000FCE  0D04               	mullw	4
 10901  000FD0  0E03               	movlw	3
 10902  000FD2  26F3               	addwf	prodl,f,c
 10903  000FD4  0E00               	movlw	0
 10904  000FD6  22F4               	addwfc	prodh,f,c
 10905  000FD8  0E00               	movlw	low _ID
 10906  000FDA  24F3               	addwf	prodl,w,c
 10907  000FDC  6ED9               	movwf	fsr2l,c
 10908  000FDE  0E03               	movlw	high _ID
 10909  000FE0  20F4               	addwfc	prodh,w,c
 10910  000FE2  6EDA               	movwf	fsr2h,c
 10911  000FE4  50DF               	movf	indf2,w,c
 10912  000FE6  6F64               	movwf	ee_write@data& (0+255),b
 10913  000FE8  0E01               	movlw	1
 10914  000FEA  EC50  F011         	call	_ee_write
 10915                           
 10916                           ;io.c: 178: idEndPtr++;
 10917  000FEE  0100               	movlb	0	; () banked
 10918  000FF0  2BCA               	incf	_idEndPtr& (0+255),f,b
 10919                           
 10920                           ; BSR set to: 0
 10921  000FF2  0012               	return	
 10922  000FF4                     __end_of_add_sensor:
 10923                           	opt stack 0
 10924                           tblptru	equ	0xFF8
 10925                           tblptrh	equ	0xFF7
 10926                           tblptrl	equ	0xFF6
 10927                           tablat	equ	0xFF5
 10928                           prodh	equ	0xFF4
 10929                           prodl	equ	0xFF3
 10930                           intcon	equ	0xFF2
 10931                           postinc0	equ	0xFEE
 10932                           wreg	equ	0xFE8
 10933                           indf1	equ	0xFE7
 10934                           postinc1	equ	0xFE6
 10935                           postdec1	equ	0xFE5
 10936                           plusw1	equ	0xFE3
 10937                           fsr1h	equ	0xFE2
 10938                           fsr1l	equ	0xFE1
 10939                           indf2	equ	0xFDF
 10940                           postinc2	equ	0xFDE
 10941                           plusw2	equ	0xFDB
 10942                           fsr2h	equ	0xFDA
 10943                           fsr2l	equ	0xFD9
 10944                           status	equ	0xFD8
 10945                           
 10946 ;; *************** function _send_uart_ack *****************
 10947 ;; Defined at:
 10948 ;;		line 300 in file "uart.c"
 10949 ;; Parameters:    Size  Location     Type
 10950 ;;		None
 10951 ;; Auto vars:     Size  Location     Type
 10952 ;;		None
 10953 ;; Return value:  Size  Location     Type
 10954 ;;                  1    wreg      void 
 10955 ;; Registers used:
 10956 ;;		wreg, status,2, cstack
 10957 ;; Tracked objects:
 10958 ;;		On entry : 0/0
 10959 ;;		On exit  : 0/0
 10960 ;;		Unchanged: 0/0
 10961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10965 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10966 ;;Total ram usage:        0 bytes
 10967 ;; Hardware stack levels used:    1
 10968 ;; Hardware stack levels required when called:    5
 10969 ;; This function calls:
 10970 ;;		_init_uart
 10971 ;;		_rf_uart_send
 10972 ;; This function is called by:
 10973 ;;		_add_sensor
 10974 ;;		_getIndexOfLearnedSensor
 10975 ;; This function uses a non-reentrant model
 10976 ;;
 10977                           
 10978                           	psect	text48
 10979  0023F6                     __ptext48:
 10980                           	opt stack 0
 10981  0023F6                     _send_uart_ack:
 10982                           	opt stack 22
 10983                           
 10984                           ;uart.c: 302: init_uart();
 10985                           
 10986                           ; BSR set to: 0
 10987                           ;incstack = 0
 10988  0023F6  ECA3  F011         	call	_init_uart	;wreg free
 10989                           
 10990                           ;uart.c: 304: rf_uart_send('$');
 10991  0023FA  0E24               	movlw	36
 10992  0023FC  EC6C  F012         	call	_rf_uart_send
 10993                           
 10994                           ;uart.c: 305: rf_uart_send('A');
 10995  002400  0E41               	movlw	65
 10996  002402  EC6C  F012         	call	_rf_uart_send
 10997                           
 10998                           ;uart.c: 306: rf_uart_send('\r');
 10999  002406  0E0D               	movlw	13
 11000  002408  EC6C  F012         	call	_rf_uart_send
 11001                           
 11002                           ;uart.c: 307: rf_uart_send('\n');
 11003  00240C  0E0A               	movlw	10
 11004  00240E  EC6C  F012         	call	_rf_uart_send
 11005  002412  0012               	return		;funcret
 11006  002414                     __end_of_send_uart_ack:
 11007                           	opt stack 0
 11008                           tblptru	equ	0xFF8
 11009                           tblptrh	equ	0xFF7
 11010                           tblptrl	equ	0xFF6
 11011                           tablat	equ	0xFF5
 11012                           prodh	equ	0xFF4
 11013                           prodl	equ	0xFF3
 11014                           intcon	equ	0xFF2
 11015                           postinc0	equ	0xFEE
 11016                           wreg	equ	0xFE8
 11017                           indf1	equ	0xFE7
 11018                           postinc1	equ	0xFE6
 11019                           postdec1	equ	0xFE5
 11020                           plusw1	equ	0xFE3
 11021                           fsr1h	equ	0xFE2
 11022                           fsr1l	equ	0xFE1
 11023                           indf2	equ	0xFDF
 11024                           postinc2	equ	0xFDE
 11025                           plusw2	equ	0xFDB
 11026                           fsr2h	equ	0xFDA
 11027                           fsr2l	equ	0xFD9
 11028                           status	equ	0xFD8
 11029                           
 11030 ;; *************** function _rf_uart_send *****************
 11031 ;; Defined at:
 11032 ;;		line 293 in file "uart.c"
 11033 ;; Parameters:    Size  Location     Type
 11034 ;;  data            1    wreg     unsigned char 
 11035 ;; Auto vars:     Size  Location     Type
 11036 ;;  data            1    0[BANK0 ] unsigned char 
 11037 ;; Return value:  Size  Location     Type
 11038 ;;                  1    wreg      void 
 11039 ;; Registers used:
 11040 ;;		wreg
 11041 ;; Tracked objects:
 11042 ;;		On entry : 0/0
 11043 ;;		On exit  : 0/0
 11044 ;;		Unchanged: 0/0
 11045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11047 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11049 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11050 ;;Total ram usage:        1 bytes
 11051 ;; Hardware stack levels used:    1
 11052 ;; Hardware stack levels required when called:    3
 11053 ;; This function calls:
 11054 ;;		Nothing
 11055 ;; This function is called by:
 11056 ;;		_send_uart_ack
 11057 ;; This function uses a non-reentrant model
 11058 ;;
 11059                           
 11060                           	psect	text49
 11061  0024D8                     __ptext49:
 11062                           	opt stack 0
 11063  0024D8                     _rf_uart_send:
 11064                           	opt stack 23
 11065                           
 11066                           ;incstack = 0
 11067                           ;rf_uart_send@data stored from wreg
 11068  0024D8  0100               	movlb	0	; () banked
 11069  0024DA  6F60               	movwf	rf_uart_send@data& (0+255),b
 11070  0024DC                     
 11071                           ;uart.c: 295: while (!TRMT2);
 11072  0024DC  A272               	btfss	3954,1,c	;volatile
 11073  0024DE  D7FE               	goto	l7216
 11074                           
 11075                           ;uart.c: 296: TX2REG = data;
 11076  0024E0  C060  FF73         	movff	rf_uart_send@data,3955	;volatile
 11077  0024E4  0012               	return		;funcret
 11078  0024E6                     __end_of_rf_uart_send:
 11079                           	opt stack 0
 11080                           tblptru	equ	0xFF8
 11081                           tblptrh	equ	0xFF7
 11082                           tblptrl	equ	0xFF6
 11083                           tablat	equ	0xFF5
 11084                           prodh	equ	0xFF4
 11085                           prodl	equ	0xFF3
 11086                           intcon	equ	0xFF2
 11087                           postinc0	equ	0xFEE
 11088                           wreg	equ	0xFE8
 11089                           indf1	equ	0xFE7
 11090                           postinc1	equ	0xFE6
 11091                           postdec1	equ	0xFE5
 11092                           plusw1	equ	0xFE3
 11093                           fsr1h	equ	0xFE2
 11094                           fsr1l	equ	0xFE1
 11095                           indf2	equ	0xFDF
 11096                           postinc2	equ	0xFDE
 11097                           plusw2	equ	0xFDB
 11098                           fsr2h	equ	0xFDA
 11099                           fsr2l	equ	0xFD9
 11100                           status	equ	0xFD8
 11101                           
 11102 ;; *************** function _init_uart *****************
 11103 ;; Defined at:
 11104 ;;		line 8 in file "uart.c"
 11105 ;; Parameters:    Size  Location     Type
 11106 ;;		None
 11107 ;; Auto vars:     Size  Location     Type
 11108 ;;		None
 11109 ;; Return value:  Size  Location     Type
 11110 ;;                  1    wreg      void 
 11111 ;; Registers used:
 11112 ;;		wreg, status,2, cstack
 11113 ;; Tracked objects:
 11114 ;;		On entry : 0/0
 11115 ;;		On exit  : 0/0
 11116 ;;		Unchanged: 0/0
 11117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11121 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11122 ;;Total ram usage:        0 bytes
 11123 ;; Hardware stack levels used:    1
 11124 ;; Hardware stack levels required when called:    4
 11125 ;; This function calls:
 11126 ;;		_init_md_uart
 11127 ;; This function is called by:
 11128 ;;		_init_pic
 11129 ;;		_send_uart_ack
 11130 ;; This function uses a non-reentrant model
 11131 ;;
 11132                           
 11133                           	psect	text50
 11134  002346                     __ptext50:
 11135                           	opt stack 0
 11136  002346                     _init_uart:
 11137                           	opt stack 25
 11138                           
 11139                           ;uart.c: 10: TRISBbits.TRISB7 = 1;
 11140                           
 11141                           ;incstack = 0
 11142  002346  8E93               	bsf	3987,7,c	;volatile
 11143                           
 11144                           ;uart.c: 11: TRISBbits.TRISB6 = 0;
 11145  002348  9C93               	bcf	3987,6,c	;volatile
 11146                           
 11147                           ;uart.c: 14: TRISBbits.TRISB5 = 1;
 11148  00234A  8A93               	bsf	3987,5,c	;volatile
 11149                           
 11150                           ;uart.c: 22: TX2STA = 0x26;
 11151  00234C  0E26               	movlw	38
 11152  00234E  6E72               	movwf	3954,c	;volatile
 11153                           
 11154                           ;uart.c: 23: RC2STA = 0x90;
 11155  002350  0E90               	movlw	144
 11156  002352  6E71               	movwf	3953,c	;volatile
 11157                           
 11158                           ;uart.c: 24: BAUDCON2 = 0xc8;
 11159  002354  0EC8               	movlw	200
 11160  002356  6E70               	movwf	3952,c	;volatile
 11161                           
 11162                           ;uart.c: 25: SPBRG2 = 207;
 11163  002358  0ECF               	movlw	207
 11164  00235A  6E75               	movwf	3957,c	;volatile
 11165                           
 11166                           ;uart.c: 26: SPBRGH2 = 0;
 11167  00235C  0E00               	movlw	0
 11168  00235E  6E76               	movwf	3958,c	;volatile
 11169                           
 11170                           ;uart.c: 27: WPUB5 = 1;
 11171  002360  8A61               	bsf	3937,5,c	;volatile
 11172                           
 11173                           ;uart.c: 28: RC2IE = 1;
 11174  002362  8AA3               	bsf	4003,5,c	;volatile
 11175                           
 11176                           ;uart.c: 30: init_md_uart();
 11177  002364  ECB5  F011         	call	_init_md_uart	;wreg free
 11178  002368  0012               	return		;funcret
 11179  00236A                     __end_of_init_uart:
 11180                           	opt stack 0
 11181                           tblptru	equ	0xFF8
 11182                           tblptrh	equ	0xFF7
 11183                           tblptrl	equ	0xFF6
 11184                           tablat	equ	0xFF5
 11185                           prodh	equ	0xFF4
 11186                           prodl	equ	0xFF3
 11187                           intcon	equ	0xFF2
 11188                           postinc0	equ	0xFEE
 11189                           wreg	equ	0xFE8
 11190                           indf1	equ	0xFE7
 11191                           postinc1	equ	0xFE6
 11192                           postdec1	equ	0xFE5
 11193                           plusw1	equ	0xFE3
 11194                           fsr1h	equ	0xFE2
 11195                           fsr1l	equ	0xFE1
 11196                           indf2	equ	0xFDF
 11197                           postinc2	equ	0xFDE
 11198                           plusw2	equ	0xFDB
 11199                           fsr2h	equ	0xFDA
 11200                           fsr2l	equ	0xFD9
 11201                           status	equ	0xFD8
 11202                           
 11203 ;; *************** function _init_md_uart *****************
 11204 ;; Defined at:
 11205 ;;		line 34 in file "uart.c"
 11206 ;; Parameters:    Size  Location     Type
 11207 ;;		None
 11208 ;; Auto vars:     Size  Location     Type
 11209 ;;		None
 11210 ;; Return value:  Size  Location     Type
 11211 ;;                  1    wreg      void 
 11212 ;; Registers used:
 11213 ;;		wreg, status,2
 11214 ;; Tracked objects:
 11215 ;;		On entry : 0/0
 11216 ;;		On exit  : 0/0
 11217 ;;		Unchanged: 0/0
 11218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11222 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11223 ;;Total ram usage:        0 bytes
 11224 ;; Hardware stack levels used:    1
 11225 ;; Hardware stack levels required when called:    3
 11226 ;; This function calls:
 11227 ;;		Nothing
 11228 ;; This function is called by:
 11229 ;;		_start_sms_ok
 11230 ;;		_read_sms
 11231 ;;		_send_sms_ok
 11232 ;;		_startup_ok
 11233 ;;		_init_uart
 11234 ;; This function uses a non-reentrant model
 11235 ;;
 11236                           
 11237                           	psect	text51
 11238  00236A                     __ptext51:
 11239                           	opt stack 0
 11240  00236A                     _init_md_uart:
 11241                           	opt stack 25
 11242                           
 11243                           ;uart.c: 36: BAUDCON1bits.BRG16 = 1;
 11244                           
 11245                           ;incstack = 0
 11246  00236A  86B8               	bsf	4024,3,c	;volatile
 11247                           
 11248                           ;uart.c: 37: BAUDCON1bits.RCIDL = 1;
 11249  00236C  8CB8               	bsf	4024,6,c	;volatile
 11250                           
 11251                           ;uart.c: 38: BAUDCONbits.CKTXP = 0;
 11252  00236E  98B8               	bcf	4024,4,c	;volatile
 11253                           
 11254                           ;uart.c: 39: BAUDCONbits.WUE = 0;
 11255  002370  92B8               	bcf	4024,1,c	;volatile
 11256                           
 11257                           ;uart.c: 40: BAUDCONbits.ABDEN = 0;
 11258  002372  90B8               	bcf	4024,0,c	;volatile
 11259                           
 11260                           ;uart.c: 41: TXSTA1bits.BRGH = 1;
 11261  002374  84AC               	bsf	4012,2,c	;volatile
 11262                           
 11263                           ;uart.c: 42: TXSTA1bits.SYNC = 0;
 11264  002376  98AC               	bcf	4012,4,c	;volatile
 11265                           
 11266                           ;uart.c: 43: SPBRGH1 = 0;
 11267  002378  0E00               	movlw	0
 11268  00237A  6EB0               	movwf	4016,c	;volatile
 11269                           
 11270                           ;uart.c: 44: SPBRG1 = 16;
 11271  00237C  0E10               	movlw	16
 11272  00237E  6EAF               	movwf	4015,c	;volatile
 11273                           
 11274                           ;uart.c: 46: RC1STAbits.SPEN = 1;
 11275  002380  8EAB               	bsf	4011,7,c	;volatile
 11276                           
 11277                           ;uart.c: 47: TRISCbits.TRISC7 = 1;
 11278  002382  8E94               	bsf	3988,7,c	;volatile
 11279                           
 11280                           ;uart.c: 48: TRISCbits.TRISC6 = 0;
 11281  002384  9C94               	bcf	3988,6,c	;volatile
 11282                           
 11283                           ;uart.c: 51: RCSTA1bits.CREN = 1;
 11284  002386  88AB               	bsf	4011,4,c	;volatile
 11285                           
 11286                           ;uart.c: 52: TXSTA1bits.TXEN = 1;
 11287  002388  8AAC               	bsf	4012,5,c	;volatile
 11288                           
 11289                           ;uart.c: 54: PIR1bits.RC1IF = 0;
 11290  00238A  9A9E               	bcf	3998,5,c	;volatile
 11291  00238C  0012               	return		;funcret
 11292  00238E                     __end_of_init_md_uart:
 11293                           	opt stack 0
 11294                           tblptru	equ	0xFF8
 11295                           tblptrh	equ	0xFF7
 11296                           tblptrl	equ	0xFF6
 11297                           tablat	equ	0xFF5
 11298                           prodh	equ	0xFF4
 11299                           prodl	equ	0xFF3
 11300                           intcon	equ	0xFF2
 11301                           postinc0	equ	0xFEE
 11302                           wreg	equ	0xFE8
 11303                           indf1	equ	0xFE7
 11304                           postinc1	equ	0xFE6
 11305                           postdec1	equ	0xFE5
 11306                           plusw1	equ	0xFE3
 11307                           fsr1h	equ	0xFE2
 11308                           fsr1l	equ	0xFE1
 11309                           indf2	equ	0xFDF
 11310                           postinc2	equ	0xFDE
 11311                           plusw2	equ	0xFDB
 11312                           fsr2h	equ	0xFDA
 11313                           fsr2l	equ	0xFD9
 11314                           status	equ	0xFD8
 11315                           
 11316 ;; *************** function _ee_write *****************
 11317 ;; Defined at:
 11318 ;;		line 19 in file "ee.c"
 11319 ;; Parameters:    Size  Location     Type
 11320 ;;  page            1    wreg     unsigned char 
 11321 ;;  addr            1    3[BANK0 ] unsigned char 
 11322 ;;  data            1    4[BANK0 ] unsigned char 
 11323 ;; Auto vars:     Size  Location     Type
 11324 ;;  page            1    5[BANK0 ] unsigned char 
 11325 ;; Return value:  Size  Location     Type
 11326 ;;                  1    wreg      void 
 11327 ;; Registers used:
 11328 ;;		wreg, status,2
 11329 ;; Tracked objects:
 11330 ;;		On entry : 0/0
 11331 ;;		On exit  : 0/0
 11332 ;;		Unchanged: 0/0
 11333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11334 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11335 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11337 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11338 ;;Total ram usage:        3 bytes
 11339 ;; Hardware stack levels used:    1
 11340 ;; Hardware stack levels required when called:    3
 11341 ;; This function calls:
 11342 ;;		Nothing
 11343 ;; This function is called by:
 11344 ;;		_add_sensor
 11345 ;;		_del_sensor
 11346 ;;		_program_field
 11347 ;; This function uses a non-reentrant model
 11348 ;;
 11349                           
 11350                           	psect	text52
 11351  0022A0                     __ptext52:
 11352                           	opt stack 0
 11353  0022A0                     _ee_write:
 11354                           	opt stack 22
 11355                           
 11356                           ;incstack = 0
 11357                           ;ee_write@page stored from wreg
 11358  0022A0  0100               	movlb	0	; () banked
 11359  0022A2  6F65               	movwf	ee_write@page& (0+255),b
 11360                           
 11361                           ;ee.c: 21: GIE = 0;
 11362  0022A4  9EF2               	bcf	intcon,7,c	;volatile
 11363                           
 11364                           ;ee.c: 22: EEADRH = page;
 11365  0022A6  C065  FFAA         	movff	ee_write@page,4010	;volatile
 11366                           
 11367                           ;ee.c: 23: EEADR = addr;
 11368  0022AA  C063  FFA9         	movff	ee_write@addr,4009	;volatile
 11369                           
 11370                           ;ee.c: 24: EEDATA = data;
 11371  0022AE  C064  FFA8         	movff	ee_write@data,4008	;volatile
 11372                           
 11373                           ;ee.c: 25: CFGS = 0;
 11374  0022B2  9CA6               	bcf	4006,6,c	;volsfr
 11375                           
 11376                           ;ee.c: 26: EEPGD = 0;
 11377  0022B4  9EA6               	bcf	4006,7,c	;volsfr
 11378                           
 11379                           ;ee.c: 27: WREN = 1;
 11380  0022B6  84A6               	bsf	4006,2,c	;volsfr
 11381                           
 11382                           ;ee.c: 28: GIE = 0;
 11383  0022B8  9EF2               	bcf	intcon,7,c	;volatile
 11384                           
 11385                           ;ee.c: 29: EECON2 = 0x55;
 11386  0022BA  0E55               	movlw	85
 11387  0022BC  6EA7               	movwf	4007,c	;volsfr
 11388                           
 11389                           ;ee.c: 30: EECON2 = 0xaa;
 11390  0022BE  0EAA               	movlw	170
 11391  0022C0  6EA7               	movwf	4007,c	;volsfr
 11392                           
 11393                           ;ee.c: 31: WR = 1;
 11394  0022C2  82A6               	bsf	4006,1,c	;volsfr
 11395                           
 11396                           ;ee.c: 32: GIE = 1;
 11397  0022C4  8EF2               	bsf	intcon,7,c	;volatile
 11398                           
 11399                           ;ee.c: 33: WREN = 0;
 11400  0022C6  94A6               	bcf	4006,2,c	;volsfr
 11401  0022C8  B2A6               	btfsc	4006,1,c	;volsfr
 11402  0022CA  D7FE               	goto	l1203
 11403                           
 11404                           ;ee.c: 35: GIE = 1;
 11405  0022CC  8EF2               	bsf	intcon,7,c	;volatile
 11406  0022CE  0012               	return		;funcret
 11407  0022D0                     __end_of_ee_write:
 11408                           	opt stack 0
 11409                           tblptru	equ	0xFF8
 11410                           tblptrh	equ	0xFF7
 11411                           tblptrl	equ	0xFF6
 11412                           tablat	equ	0xFF5
 11413                           prodh	equ	0xFF4
 11414                           prodl	equ	0xFF3
 11415                           intcon	equ	0xFF2
 11416                           postinc0	equ	0xFEE
 11417                           wreg	equ	0xFE8
 11418                           indf1	equ	0xFE7
 11419                           postinc1	equ	0xFE6
 11420                           postdec1	equ	0xFE5
 11421                           plusw1	equ	0xFE3
 11422                           fsr1h	equ	0xFE2
 11423                           fsr1l	equ	0xFE1
 11424                           indf2	equ	0xFDF
 11425                           postinc2	equ	0xFDE
 11426                           plusw2	equ	0xFDB
 11427                           fsr2h	equ	0xFDA
 11428                           fsr2l	equ	0xFD9
 11429                           status	equ	0xFD8
 11430                           
 11431 ;; *************** function _isr *****************
 11432 ;; Defined at:
 11433 ;;		line 92 in file "main.c"
 11434 ;; Parameters:    Size  Location     Type
 11435 ;;		None
 11436 ;; Auto vars:     Size  Location     Type
 11437 ;;  temp            1   27[COMRAM] unsigned char 
 11438 ;; Return value:  Size  Location     Type
 11439 ;;                  1    wreg      void 
 11440 ;; Registers used:
 11441 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11442 ;; Tracked objects:
 11443 ;;		On entry : 0/0
 11444 ;;		On exit  : 0/0
 11445 ;;		Unchanged: 0/0
 11446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11448 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11449 ;;      Temps:         20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11450 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11451 ;;Total ram usage:       21 bytes
 11452 ;; Hardware stack levels used:    1
 11453 ;; Hardware stack levels required when called:    2
 11454 ;; This function calls:
 11455 ;;		_control_leds
 11456 ;;		_disable_tmr3
 11457 ;;		_reload_timer0
 11458 ;;		_start_sensor_tmr
 11459 ;;		i2_add_event
 11460 ;;		i2_disable_md_rxint
 11461 ;;		i2_disable_tmr5
 11462 ;;		i2_ee_read
 11463 ;;		i2_init_uart
 11464 ;;		i2_reload_tmr5_pt25s
 11465 ;; This function is called by:
 11466 ;;		Interrupt level 2
 11467 ;; This function uses a non-reentrant model
 11468 ;;
 11469                           
 11470                           	psect	intcode
 11471  000008                     __pintcode:
 11472                           	opt stack 0
 11473  000008                     _isr:
 11474                           	opt stack 21
 11475                           
 11476                           ;incstack = 0
 11477  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 11478  00000A  CFFA F02D          	movff	pclath,??_isr+2
 11479  00000E  CFFB F02E          	movff	pclatu,??_isr+3
 11480  000012  CFE9 F02F          	movff	fsr0l,??_isr+4
 11481  000016  CFEA F030          	movff	fsr0h,??_isr+5
 11482  00001A  CFE1 F031          	movff	fsr1l,??_isr+6
 11483  00001E  CFE2 F032          	movff	fsr1h,??_isr+7
 11484  000022  CFD9 F033          	movff	fsr2l,??_isr+8
 11485  000026  CFDA F034          	movff	fsr2h,??_isr+9
 11486  00002A  CFF3 F035          	movff	prodl,??_isr+10
 11487  00002E  CFF4 F036          	movff	prodh,??_isr+11
 11488  000032  CFF6 F037          	movff	tblptrl,??_isr+12
 11489  000036  CFF7 F038          	movff	tblptrh,??_isr+13
 11490  00003A  CFF8 F039          	movff	tblptru,??_isr+14
 11491  00003E  CFF5 F03A          	movff	tablat,??_isr+15
 11492  000042  C045  F03B         	movff	btemp,??_isr+16
 11493  000046  C046  F03C         	movff	btemp+1,??_isr+17
 11494  00004A  C047  F03D         	movff	btemp+2,??_isr+18
 11495  00004E  C048  F03E         	movff	btemp+3,??_isr+19
 11496                           
 11497                           ;main.c: 94: uint8_t temp;
 11498                           ;main.c: 95: if (INTCONbits.RBIF)
 11499  000052  A0F2               	btfss	intcon,0,c	;volatile
 11500  000054  D003               	goto	i2l222
 11501                           
 11502                           ;main.c: 96: {
 11503                           ;main.c: 97: INTCONbits.RBIF = 0;
 11504  000056  90F2               	bcf	intcon,0,c	;volatile
 11505                           
 11506                           ;main.c: 98: init_uart();
 11507  000058  ECC7  F011         	call	i2_init_uart	;wreg free
 11508  00005C                     i2l222:
 11509                           
 11510                           ;main.c: 99: }
 11511                           ;main.c: 100: if (PIR3bits.RC2IF && PIE3bits.RC2IE)
 11512  00005C  BAA4               	btfsc	4004,5,c	;volatile
 11513  00005E  AAA3               	btfss	4003,5,c	;volatile
 11514  000060  D01C               	goto	i2l225
 11515                           
 11516                           ;main.c: 101: {
 11517                           ;main.c: 102: PIR3bits.RC2IF = 0;
 11518  000062  9AA4               	bcf	4004,5,c	;volatile
 11519                           
 11520                           ;main.c: 103: temp = RC2REG;
 11521  000064  CF74 F03F          	movff	3956,isr@temp	;volatile
 11522                           
 11523                           ;main.c: 104: rx2_buf[rx2pos++] = temp;
 11524  000068  501A               	movf	_rx2pos,w,c
 11525  00006A  0D01               	mullw	1
 11526  00006C  0E1F               	movlw	low _rx2_buf
 11527  00006E  24F3               	addwf	prodl,w,c
 11528  000070  6ED9               	movwf	fsr2l,c
 11529  000072  0E00               	movlw	high _rx2_buf
 11530  000074  20F4               	addwfc	prodh,w,c
 11531  000076  6EDA               	movwf	fsr2h,c
 11532  000078  C03F  FFDF         	movff	isr@temp,indf2
 11533  00007C  2A1A               	incf	_rx2pos,f,c
 11534                           
 11535                           ;main.c: 105: if (rx2pos >= sizeof(rx2_buf)) rx2pos--;
 11536  00007E  0E04               	movlw	4
 11537  000080  641A               	cpfsgt	_rx2pos,c
 11538  000082  D001               	goto	i2l224
 11539  000084  061A               	decf	_rx2pos,f,c
 11540  000086                     i2l224:
 11541                           
 11542                           ;main.c: 106: if (rx2pos >= sizeof(rx2_buf) && rx2_buf[4] == '\n')
 11543  000086  0E04               	movlw	4
 11544  000088  641A               	cpfsgt	_rx2pos,c
 11545  00008A  D007               	goto	i2l225
 11546  00008C  0E0A               	movlw	10
 11547  00008E  1823               	xorwf	_rx2_buf+4,w,c
 11548  000090  A4D8               	btfss	status,2,c
 11549  000092  D003               	goto	i2l225
 11550                           
 11551                           ;main.c: 107: receivedSensor = 1;
 11552  000094  0E01               	movlw	1
 11553  000096  0100               	movlb	0	; () banked
 11554  000098  6FC7               	movwf	_receivedSensor& (0+255),b
 11555  00009A                     i2l225:
 11556                           
 11557                           ;main.c: 108: }
 11558                           ;main.c: 109: if (RC1IF && PIE1bits.RCIE)
 11559                           
 11560                           ; BSR set to: 0
 11561                           
 11562                           ; BSR set to: 0
 11563  00009A  BA9E               	btfsc	3998,5,c	;volatile
 11564  00009C  AA9D               	btfss	3997,5,c	;volatile
 11565  00009E  D0B7               	goto	i2l233
 11566                           
 11567                           ;main.c: 110: {
 11568                           ;main.c: 111: RC1IF = 0;
 11569  0000A0  9A9E               	bcf	3998,5,c	;volatile
 11570                           
 11571                           ;main.c: 112: currentChar = RC1REG;
 11572  0000A2  CFAE F016          	movff	4014,_currentChar	;volatile
 11573                           
 11574                           ;main.c: 113: mdRxBuf[endPtr++] = currentChar;
 11575  0000A6  5003               	movf	_endPtr,w,c
 11576  0000A8  0D01               	mullw	1
 11577  0000AA  0E00               	movlw	low _mdRxBuf
 11578  0000AC  24F3               	addwf	prodl,w,c
 11579  0000AE  6ED9               	movwf	fsr2l,c
 11580  0000B0  0E02               	movlw	high _mdRxBuf
 11581  0000B2  20F4               	addwfc	prodh,w,c
 11582  0000B4  6EDA               	movwf	fsr2h,c
 11583  0000B6  C016  FFDF         	movff	_currentChar,indf2
 11584  0000BA  2A03               	incf	_endPtr,f,c
 11585                           
 11586                           ;main.c: 114: if (endPtr >= sizeof(mdRxBuf))
 11587  0000BC  0E9F               	movlw	159
 11588  0000BE  6403               	cpfsgt	_endPtr,c
 11589  0000C0  D001               	goto	i2l227
 11590                           
 11591                           ;main.c: 115: endPtr--;
 11592  0000C2  0603               	decf	_endPtr,f,c
 11593  0000C4                     i2l227:
 11594                           
 11595                           ;main.c: 116: if (endPtr > 2)
 11596  0000C4  0E02               	movlw	2
 11597  0000C6  6403               	cpfsgt	_endPtr,c
 11598  0000C8  D0A2               	goto	i2l233
 11599                           
 11600                           ;main.c: 117: {
 11601                           ;main.c: 119: if (mdRxBuf[(uint8_t)(endPtr - 2)] == 'O' && mdRxBuf[(uint8_t)(endPtr - 1)
      +                          ] == 'K' && (mdRxBuf[endPtr] == '\r' || mdRxBuf[endPtr] == '\n'))
 11602  0000CA  C003  F02B         	movff	_endPtr,??_isr
 11603  0000CE  0EFE               	movlw	254
 11604  0000D0  262B               	addwf	??_isr,f,c
 11605  0000D2  502B               	movf	??_isr,w,c
 11606  0000D4  0D01               	mullw	1
 11607  0000D6  0E00               	movlw	low _mdRxBuf
 11608  0000D8  24F3               	addwf	prodl,w,c
 11609  0000DA  6ED9               	movwf	fsr2l,c
 11610  0000DC  0E02               	movlw	high _mdRxBuf
 11611  0000DE  20F4               	addwfc	prodh,w,c
 11612  0000E0  6EDA               	movwf	fsr2h,c
 11613  0000E2  0E4F               	movlw	79
 11614  0000E4  18DE               	xorwf	postinc2,w,c
 11615  0000E6  A4D8               	btfss	status,2,c
 11616  0000E8  D036               	goto	i2l229
 11617  0000EA  C003  F02B         	movff	_endPtr,??_isr
 11618  0000EE  0EFF               	movlw	255
 11619  0000F0  262B               	addwf	??_isr,f,c
 11620  0000F2  502B               	movf	??_isr,w,c
 11621  0000F4  0D01               	mullw	1
 11622  0000F6  0E00               	movlw	low _mdRxBuf
 11623  0000F8  24F3               	addwf	prodl,w,c
 11624  0000FA  6ED9               	movwf	fsr2l,c
 11625  0000FC  0E02               	movlw	high _mdRxBuf
 11626  0000FE  20F4               	addwfc	prodh,w,c
 11627  000100  6EDA               	movwf	fsr2h,c
 11628  000102  0E4B               	movlw	75
 11629  000104  18DE               	xorwf	postinc2,w,c
 11630  000106  A4D8               	btfss	status,2,c
 11631  000108  D026               	goto	i2l229
 11632  00010A  5003               	movf	_endPtr,w,c
 11633  00010C  0D01               	mullw	1
 11634  00010E  0E00               	movlw	low _mdRxBuf
 11635  000110  24F3               	addwf	prodl,w,c
 11636  000112  6ED9               	movwf	fsr2l,c
 11637  000114  0E02               	movlw	high _mdRxBuf
 11638  000116  20F4               	addwfc	prodh,w,c
 11639  000118  6EDA               	movwf	fsr2h,c
 11640  00011A  0E0D               	movlw	13
 11641  00011C  18DE               	xorwf	postinc2,w,c
 11642  00011E  B4D8               	btfsc	status,2,c
 11643  000120  D00C               	goto	i2u713_40
 11644  000122  5003               	movf	_endPtr,w,c
 11645  000124  0D01               	mullw	1
 11646  000126  0E00               	movlw	low _mdRxBuf
 11647  000128  24F3               	addwf	prodl,w,c
 11648  00012A  6ED9               	movwf	fsr2l,c
 11649  00012C  0E02               	movlw	high _mdRxBuf
 11650  00012E  20F4               	addwfc	prodh,w,c
 11651  000130  6EDA               	movwf	fsr2h,c
 11652  000132  0E0A               	movlw	10
 11653  000134  18DE               	xorwf	postinc2,w,c
 11654  000136  A4D8               	btfss	status,2,c
 11655  000138  D00E               	goto	i2l229
 11656  00013A                     i2u713_40:
 11657                           
 11658                           ;main.c: 121: {
 11659                           ;main.c: 122: tmr5_cnt = 0;
 11660  00013A  0E00               	movlw	0
 11661  00013C  6E1B               	movwf	_tmr5_cnt,c
 11662                           
 11663                           ;main.c: 123: disable_tmr5();
 11664  00013E  EC86  F012         	call	i2_disable_tmr5	;wreg free
 11665                           
 11666                           ;main.c: 124: TMR5IF = 0;
 11667  000142  927E               	bcf	3966,1,c	;volatile
 11668                           
 11669                           ;main.c: 125: receivedOK = 1;
 11670  000144  0E01               	movlw	1
 11671  000146  6E0A               	movwf	_receivedOK,c
 11672                           
 11673                           ;main.c: 126: receivedERR = 0;
 11674  000148  0E00               	movlw	0
 11675  00014A  6E09               	movwf	_receivedERR,c
 11676                           
 11677                           ;main.c: 127: timedOut = 0;
 11678  00014C  0E00               	movlw	0
 11679  00014E  6E07               	movwf	_timedOut,c
 11680                           
 11681                           ;main.c: 128: disable_md_rxint();
 11682  000150  EC96  F012         	call	i2_disable_md_rxint	;wreg free
 11683                           
 11684                           ;main.c: 129: }
 11685  000154  D05C               	goto	i2l233
 11686  000156                     i2l229:
 11687                           
 11688                           ;main.c: 130: else if (endPtr >= 5 && mdRxBuf[(uint8_t)(endPtr - 4)] == 'E' && mdRxBuf[(
      +                          uint8_t)(endPtr - 3)] == 'R' && mdRxBuf[(uint8_t)(endPtr - 2)] == 'R' && mdRxBuf[(uint8_
      +                          t)(endPtr - 1)] == 'O' && mdRxBuf[endPtr] == 'R')
 11689  000156  0E04               	movlw	4
 11690  000158  6403               	cpfsgt	_endPtr,c
 11691  00015A  D059               	goto	i2l233
 11692  00015C  C003  F02B         	movff	_endPtr,??_isr
 11693  000160  0EFC               	movlw	252
 11694  000162  262B               	addwf	??_isr,f,c
 11695  000164  502B               	movf	??_isr,w,c
 11696  000166  0D01               	mullw	1
 11697  000168  0E00               	movlw	low _mdRxBuf
 11698  00016A  24F3               	addwf	prodl,w,c
 11699  00016C  6ED9               	movwf	fsr2l,c
 11700  00016E  0E02               	movlw	high _mdRxBuf
 11701  000170  20F4               	addwfc	prodh,w,c
 11702  000172  6EDA               	movwf	fsr2h,c
 11703  000174  0E45               	movlw	69
 11704  000176  18DE               	xorwf	postinc2,w,c
 11705  000178  A4D8               	btfss	status,2,c
 11706  00017A  D049               	goto	i2l233
 11707  00017C  C003  F02B         	movff	_endPtr,??_isr
 11708  000180  0EFD               	movlw	253
 11709  000182  262B               	addwf	??_isr,f,c
 11710  000184  502B               	movf	??_isr,w,c
 11711  000186  0D01               	mullw	1
 11712  000188  0E00               	movlw	low _mdRxBuf
 11713  00018A  24F3               	addwf	prodl,w,c
 11714  00018C  6ED9               	movwf	fsr2l,c
 11715  00018E  0E02               	movlw	high _mdRxBuf
 11716  000190  20F4               	addwfc	prodh,w,c
 11717  000192  6EDA               	movwf	fsr2h,c
 11718  000194  0E52               	movlw	82
 11719  000196  18DE               	xorwf	postinc2,w,c
 11720  000198  A4D8               	btfss	status,2,c
 11721  00019A  D039               	goto	i2l233
 11722  00019C  C003  F02B         	movff	_endPtr,??_isr
 11723  0001A0  0EFE               	movlw	254
 11724  0001A2  262B               	addwf	??_isr,f,c
 11725  0001A4  502B               	movf	??_isr,w,c
 11726  0001A6  0D01               	mullw	1
 11727  0001A8  0E00               	movlw	low _mdRxBuf
 11728  0001AA  24F3               	addwf	prodl,w,c
 11729  0001AC  6ED9               	movwf	fsr2l,c
 11730  0001AE  0E02               	movlw	high _mdRxBuf
 11731  0001B0  20F4               	addwfc	prodh,w,c
 11732  0001B2  6EDA               	movwf	fsr2h,c
 11733  0001B4  0E52               	movlw	82
 11734  0001B6  18DE               	xorwf	postinc2,w,c
 11735  0001B8  A4D8               	btfss	status,2,c
 11736  0001BA  D029               	goto	i2l233
 11737  0001BC  C003  F02B         	movff	_endPtr,??_isr
 11738  0001C0  0EFF               	movlw	255
 11739  0001C2  262B               	addwf	??_isr,f,c
 11740  0001C4  502B               	movf	??_isr,w,c
 11741  0001C6  0D01               	mullw	1
 11742  0001C8  0E00               	movlw	low _mdRxBuf
 11743  0001CA  24F3               	addwf	prodl,w,c
 11744  0001CC  6ED9               	movwf	fsr2l,c
 11745  0001CE  0E02               	movlw	high _mdRxBuf
 11746  0001D0  20F4               	addwfc	prodh,w,c
 11747  0001D2  6EDA               	movwf	fsr2h,c
 11748  0001D4  0E4F               	movlw	79
 11749  0001D6  18DE               	xorwf	postinc2,w,c
 11750  0001D8  A4D8               	btfss	status,2,c
 11751  0001DA  D019               	goto	i2l233
 11752  0001DC  5003               	movf	_endPtr,w,c
 11753  0001DE  0D01               	mullw	1
 11754  0001E0  0E00               	movlw	low _mdRxBuf
 11755  0001E2  24F3               	addwf	prodl,w,c
 11756  0001E4  6ED9               	movwf	fsr2l,c
 11757  0001E6  0E02               	movlw	high _mdRxBuf
 11758  0001E8  20F4               	addwfc	prodh,w,c
 11759  0001EA  6EDA               	movwf	fsr2h,c
 11760  0001EC  0E52               	movlw	82
 11761  0001EE  18DE               	xorwf	postinc2,w,c
 11762  0001F0  A4D8               	btfss	status,2,c
 11763  0001F2  D00D               	goto	i2l233
 11764                           
 11765                           ;main.c: 133: {
 11766                           ;main.c: 134: tmr5_cnt = 0;
 11767  0001F4  0E00               	movlw	0
 11768  0001F6  6E1B               	movwf	_tmr5_cnt,c
 11769                           
 11770                           ;main.c: 135: disable_tmr5();
 11771  0001F8  EC86  F012         	call	i2_disable_tmr5	;wreg free
 11772                           
 11773                           ;main.c: 136: TMR5IF = 0;
 11774  0001FC  927E               	bcf	3966,1,c	;volatile
 11775                           
 11776                           ;main.c: 137: receivedOK = 0;
 11777  0001FE  0E00               	movlw	0
 11778  000200  6E0A               	movwf	_receivedOK,c
 11779                           
 11780                           ;main.c: 138: receivedERR = 1;
 11781  000202  0E01               	movlw	1
 11782  000204  6E09               	movwf	_receivedERR,c
 11783                           
 11784                           ;main.c: 139: timedOut = 0;
 11785  000206  0E00               	movlw	0
 11786  000208  6E07               	movwf	_timedOut,c
 11787                           
 11788                           ;main.c: 140: disable_md_rxint();
 11789  00020A  EC96  F012         	call	i2_disable_md_rxint	;wreg free
 11790  00020E                     i2l233:
 11791                           
 11792                           ;main.c: 141: }
 11793                           ;main.c: 142: }
 11794                           ;main.c: 143: }
 11795                           ;main.c: 145: if (TMR5IF)
 11796  00020E  A27E               	btfss	3966,1,c	;volatile
 11797  000210  D004               	goto	i2l234
 11798                           
 11799                           ;main.c: 146: {
 11800                           ;main.c: 148: tmr5_cnt++;
 11801  000212  2A1B               	incf	_tmr5_cnt,f,c
 11802                           
 11803                           ;main.c: 149: TMR5IF = 0;
 11804  000214  927E               	bcf	3966,1,c	;volatile
 11805                           
 11806                           ;main.c: 150: reload_tmr5_pt25s();
 11807  000216  EC32  F012         	call	i2_reload_tmr5_pt25s	;wreg free
 11808  00021A                     i2l234:
 11809                           
 11810                           ;main.c: 153: }
 11811                           ;main.c: 155: if (TMR0IF)
 11812  00021A  A4F2               	btfss	intcon,2,c	;volatile
 11813  00021C  D007               	goto	i2l235
 11814                           
 11815                           ;main.c: 156: {
 11816                           ;main.c: 157: TMR0IF = 0;
 11817  00021E  94F2               	bcf	intcon,2,c	;volatile
 11818                           
 11819                           ;main.c: 158: reload_timer0();
 11820  000220  EC9B  F012         	call	_reload_timer0	;wreg free
 11821                           
 11822                           ;main.c: 159: gled_tmr0_tick++;
 11823  000224  2A13               	incf	_gled_tmr0_tick,f,c
 11824                           
 11825                           ;main.c: 160: bled_tmr0_tick++;
 11826  000226  2A12               	incf	_bled_tmr0_tick,f,c
 11827                           
 11828                           ;main.c: 161: control_leds();
 11829  000228  EC80  F00C         	call	_control_leds	;wreg free
 11830  00022C                     i2l235:
 11831                           
 11832                           ;main.c: 162: }
 11833                           ;main.c: 163: if (TMR3IF)
 11834  00022C  A2A1               	btfss	4001,1,c	;volatile
 11835  00022E  D072               	goto	i2l252
 11836                           
 11837                           ;main.c: 164: {
 11838                           ;main.c: 165: tmr3_cnt++;
 11839  000230  2A11               	incf	_tmr3_cnt,f,c
 11840                           
 11841                           ;main.c: 166: TMR3IF = 0;
 11842  000232  92A1               	bcf	4001,1,c	;volatile
 11843                           
 11844                           ;main.c: 168: if (tmr3_cnt >= 8 && ((inButtonMenu && buttonPressCount > 0) || !inButtonM
      +                          enu))
 11845  000234  0E07               	movlw	7
 11846  000236  6411               	cpfsgt	_tmr3_cnt,c
 11847  000238  D05E               	goto	i2l237
 11848  00023A  5015               	movf	_inButtonMenu,w,c
 11849  00023C  B4D8               	btfsc	status,2,c
 11850  00023E  D003               	goto	i2u725_40
 11851  000240  5014               	movf	_buttonPressCount,w,c
 11852  000242  A4D8               	btfss	status,2,c
 11853  000244  D003               	goto	i2u726_40
 11854  000246                     i2u725_40:
 11855  000246  5015               	movf	_inButtonMenu,w,c
 11856  000248  A4D8               	btfss	status,2,c
 11857  00024A  D055               	goto	i2l237
 11858  00024C                     i2u726_40:
 11859                           
 11860                           ;main.c: 169: {
 11861                           ;main.c: 170: tmr3_cnt = 0;
 11862  00024C  0E00               	movlw	0
 11863  00024E  6E11               	movwf	_tmr3_cnt,c
 11864                           
 11865                           ;main.c: 171: if (inButtonMenu && buttonPressCount == 1)
 11866  000250  5015               	movf	_inButtonMenu,w,c
 11867  000252  B4D8               	btfsc	status,2,c
 11868  000254  D00B               	goto	i2l242
 11869  000256  0414               	decf	_buttonPressCount,w,c
 11870  000258  A4D8               	btfss	status,2,c
 11871  00025A  D008               	goto	i2l242
 11872                           
 11873                           ;main.c: 172: {
 11874                           ;main.c: 173: inButtonMenu = 0;
 11875  00025C  0E00               	movlw	0
 11876  00025E  6E15               	movwf	_inButtonMenu,c
 11877                           
 11878                           ;main.c: 174: disable_tmr3();
 11879  000260  EC73  F012         	call	_disable_tmr3	;wreg free
 11880                           
 11881                           ;main.c: 175: PREV_STATE = STATE;
 11882  000264  C01E  F0C9         	movff	_STATE,_PREV_STATE
 11883                           
 11884                           ;main.c: 176: STATE = LISTEN_SMS;
 11885  000268  0E02               	movlw	2
 11886  00026A  D041               	goto	L28
 11887  00026C                     i2l242:
 11888                           
 11889                           ;main.c: 178: else if (inButtonMenu && buttonPressCount == 2)
 11890  00026C  5015               	movf	_inButtonMenu,w,c
 11891  00026E  B4D8               	btfsc	status,2,c
 11892  000270  D00F               	goto	i2l244
 11893  000272  0E02               	movlw	2
 11894  000274  1814               	xorwf	_buttonPressCount,w,c
 11895  000276  A4D8               	btfss	status,2,c
 11896  000278  D00B               	goto	i2l244
 11897                           
 11898                           ;main.c: 179: {
 11899                           ;main.c: 180: inButtonMenu = 0;
 11900  00027A  0E00               	movlw	0
 11901  00027C  6E15               	movwf	_inButtonMenu,c
 11902                           
 11903                           ;main.c: 181: disable_tmr3();
 11904  00027E  EC73  F012         	call	_disable_tmr3	;wreg free
 11905                           
 11906                           ;main.c: 182: PREV_STATE = STATE;
 11907  000282  C01E  F0C9         	movff	_STATE,_PREV_STATE
 11908                           
 11909                           ;main.c: 183: STATE = LEARN_SENSOR;
 11910  000286  0E03               	movlw	3
 11911  000288  6E1E               	movwf	_STATE,c
 11912                           
 11913                           ;main.c: 184: start_sensor_tmr();
 11914  00028A  EC90  F011         	call	_start_sensor_tmr	;wreg free
 11915                           
 11916                           ;main.c: 185: }
 11917  00028E  D030               	goto	i2l250
 11918  000290                     i2l244:
 11919                           
 11920                           ;main.c: 186: else if (inButtonMenu && buttonPressCount == 3)
 11921  000290  5015               	movf	_inButtonMenu,w,c
 11922  000292  B4D8               	btfsc	status,2,c
 11923  000294  D00F               	goto	i2l246
 11924  000296  0E03               	movlw	3
 11925  000298  1814               	xorwf	_buttonPressCount,w,c
 11926  00029A  A4D8               	btfss	status,2,c
 11927  00029C  D00B               	goto	i2l246
 11928                           
 11929                           ;main.c: 187: {
 11930                           ;main.c: 188: inButtonMenu = 0;
 11931  00029E  0E00               	movlw	0
 11932  0002A0  6E15               	movwf	_inButtonMenu,c
 11933                           
 11934                           ;main.c: 189: disable_tmr3();
 11935  0002A2  EC73  F012         	call	_disable_tmr3	;wreg free
 11936                           
 11937                           ;main.c: 190: PREV_STATE = STATE;
 11938  0002A6  C01E  F0C9         	movff	_STATE,_PREV_STATE
 11939                           
 11940                           ;main.c: 191: STATE = DEL_SENSOR;
 11941  0002AA  0E04               	movlw	4
 11942  0002AC  6E1E               	movwf	_STATE,c
 11943                           
 11944                           ;main.c: 192: start_sensor_tmr();
 11945  0002AE  EC90  F011         	call	_start_sensor_tmr	;wreg free
 11946                           
 11947                           ;main.c: 193: }
 11948  0002B2  D01E               	goto	i2l250
 11949  0002B4                     i2l246:
 11950                           
 11951                           ;main.c: 194: else if (inButtonMenu && buttonPressCount == 4)
 11952  0002B4  5015               	movf	_inButtonMenu,w,c
 11953  0002B6  B4D8               	btfsc	status,2,c
 11954  0002B8  D012               	goto	i2l248
 11955  0002BA  0E04               	movlw	4
 11956  0002BC  1814               	xorwf	_buttonPressCount,w,c
 11957  0002BE  A4D8               	btfss	status,2,c
 11958  0002C0  D00E               	goto	i2l248
 11959                           
 11960                           ;main.c: 195: {
 11961                           ;main.c: 196: inButtonMenu = 0;
 11962  0002C2  0E00               	movlw	0
 11963  0002C4  6E15               	movwf	_inButtonMenu,c
 11964                           
 11965                           ;main.c: 197: disable_tmr3();
 11966  0002C6  EC73  F012         	call	_disable_tmr3	;wreg free
 11967                           
 11968                           ;main.c: 198: add_event(TEST_PIN, (uint8_t)(ee_read(0x00, 0xB9)));
 11969  0002CA  0EB9               	movlw	185
 11970  0002CC  6E24               	movwf	i2ee_read@addr,c
 11971  0002CE  0E00               	movlw	0
 11972  0002D0  EC0A  F012         	call	i2_ee_read
 11973  0002D4  6E27               	movwf	i2add_event@zone,c
 11974  0002D6  0E03               	movlw	3
 11975  0002D8  EC4A  F00E         	call	i2_add_event
 11976                           
 11977                           ;main.c: 199: }
 11978  0002DC  D009               	goto	i2l250
 11979  0002DE                     i2l248:
 11980                           
 11981                           ;main.c: 200: else if (buttonPressCount == 5)
 11982  0002DE  0E05               	movlw	5
 11983  0002E0  1814               	xorwf	_buttonPressCount,w,c
 11984  0002E2  A4D8               	btfss	status,2,c
 11985  0002E4  D005               	goto	i2l250
 11986                           
 11987                           ;main.c: 201: {
 11988                           ;main.c: 202: inButtonMenu = (bool)(~inButtonMenu);
 11989  0002E6  1E15               	comf	_inButtonMenu,f,c
 11990                           
 11991                           ;main.c: 203: tmr3_cnt = 0;
 11992  0002E8  0E00               	movlw	0
 11993  0002EA  6E11               	movwf	_tmr3_cnt,c
 11994                           
 11995                           ;main.c: 204: STATE = IDLE;
 11996  0002EC  0E00               	movlw	0
 11997  0002EE                     L28:
 11998  0002EE  6E1E               	movwf	_STATE,c
 11999  0002F0                     i2l250:
 12000                           
 12001                           ;main.c: 205: }
 12002                           ;main.c: 207: buttonPressCount = 0;
 12003  0002F0  0E00               	movlw	0
 12004  0002F2  6E14               	movwf	_buttonPressCount,c
 12005                           
 12006                           ;main.c: 208: }
 12007  0002F4  D00F               	goto	i2l252
 12008  0002F6                     i2l237:
 12009                           
 12010                           ;main.c: 209: else if (tmr3_cnt >= 40 && inButtonMenu && buttonPressCount == 0)
 12011  0002F6  0E27               	movlw	39
 12012  0002F8  6411               	cpfsgt	_tmr3_cnt,c
 12013  0002FA  D00C               	goto	i2l252
 12014  0002FC  5015               	movf	_inButtonMenu,w,c
 12015  0002FE  B4D8               	btfsc	status,2,c
 12016  000300  D009               	goto	i2l252
 12017  000302  5014               	movf	_buttonPressCount,w,c
 12018  000304  A4D8               	btfss	status,2,c
 12019  000306  D006               	goto	i2l252
 12020                           
 12021                           ;main.c: 210: {
 12022                           ;main.c: 211: inButtonMenu = 0;
 12023  000308  0E00               	movlw	0
 12024  00030A  6E15               	movwf	_inButtonMenu,c
 12025                           
 12026                           ;main.c: 212: tmr3_cnt = 0;
 12027  00030C  0E00               	movlw	0
 12028  00030E  6E11               	movwf	_tmr3_cnt,c
 12029                           
 12030                           ;main.c: 213: disable_tmr3();
 12031  000310  EC73  F012         	call	_disable_tmr3	;wreg free
 12032  000314                     i2l252:
 12033  000314  C03E  F048         	movff	??_isr+19,btemp+3
 12034  000318  C03D  F047         	movff	??_isr+18,btemp+2
 12035  00031C  C03C  F046         	movff	??_isr+17,btemp+1
 12036  000320  C03B  F045         	movff	??_isr+16,btemp
 12037  000324  C03A  FFF5         	movff	??_isr+15,tablat
 12038  000328  C039  FFF8         	movff	??_isr+14,tblptru
 12039  00032C  C038  FFF7         	movff	??_isr+13,tblptrh
 12040  000330  C037  FFF6         	movff	??_isr+12,tblptrl
 12041  000334  C036  FFF4         	movff	??_isr+11,prodh
 12042  000338  C035  FFF3         	movff	??_isr+10,prodl
 12043  00033C  C034  FFDA         	movff	??_isr+9,fsr2h
 12044  000340  C033  FFD9         	movff	??_isr+8,fsr2l
 12045  000344  C032  FFE2         	movff	??_isr+7,fsr1h
 12046  000348  C031  FFE1         	movff	??_isr+6,fsr1l
 12047  00034C  C030  FFEA         	movff	??_isr+5,fsr0h
 12048  000350  C02F  FFE9         	movff	??_isr+4,fsr0l
 12049  000354  C02E  FFFB         	movff	??_isr+3,pclatu
 12050  000358  C02D  FFFA         	movff	??_isr+2,pclath
 12051  00035C  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 12052  00035E  0011               	retfie		f
 12053  000360                     __end_of_isr:
 12054                           	opt stack 0
 12055                           pclatu	equ	0xFFB
 12056                           pclath	equ	0xFFA
 12057                           tblptru	equ	0xFF8
 12058                           tblptrh	equ	0xFF7
 12059                           tblptrl	equ	0xFF6
 12060                           tablat	equ	0xFF5
 12061                           prodh	equ	0xFF4
 12062                           prodl	equ	0xFF3
 12063                           intcon	equ	0xFF2
 12064                           postinc0	equ	0xFEE
 12065                           fsr0h	equ	0xFEA
 12066                           fsr0l	equ	0xFE9
 12067                           wreg	equ	0xFE8
 12068                           indf1	equ	0xFE7
 12069                           postinc1	equ	0xFE6
 12070                           postdec1	equ	0xFE5
 12071                           plusw1	equ	0xFE3
 12072                           fsr1h	equ	0xFE2
 12073                           fsr1l	equ	0xFE1
 12074                           indf2	equ	0xFDF
 12075                           postinc2	equ	0xFDE
 12076                           plusw2	equ	0xFDB
 12077                           fsr2h	equ	0xFDA
 12078                           fsr2l	equ	0xFD9
 12079                           status	equ	0xFD8
 12080                           
 12081 ;; *************** function i2_reload_tmr5_pt25s *****************
 12082 ;; Defined at:
 12083 ;;		line 260 in file "io.c"
 12084 ;; Parameters:    Size  Location     Type
 12085 ;;		None
 12086 ;; Auto vars:     Size  Location     Type
 12087 ;;		None
 12088 ;; Return value:  Size  Location     Type
 12089 ;;                  1    wreg      void 
 12090 ;; Registers used:
 12091 ;;		wreg, status,2
 12092 ;; Tracked objects:
 12093 ;;		On entry : 0/0
 12094 ;;		On exit  : 0/0
 12095 ;;		Unchanged: 0/0
 12096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12100 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12101 ;;Total ram usage:        0 bytes
 12102 ;; Hardware stack levels used:    1
 12103 ;; This function calls:
 12104 ;;		Nothing
 12105 ;; This function is called by:
 12106 ;;		_isr
 12107 ;; This function uses a non-reentrant model
 12108 ;;
 12109                           
 12110                           	psect	text54
 12111  002464                     __ptext54:
 12112                           	opt stack 0
 12113  002464                     i2_reload_tmr5_pt25s:
 12114                           	opt stack 22
 12115                           
 12116                           ;io.c: 262: INTCONbits.GIE = 0;
 12117                           
 12118                           ;incstack = 0
 12119  002464  9EF2               	bcf	intcon,7,c	;volatile
 12120                           
 12121                           ;io.c: 263: T5CON = 0b00110101;
 12122  002466  0E35               	movlw	53
 12123  002468  010F               	movlb	15	; () banked
 12124  00246A  6F4E               	movwf	78,b	;volatile
 12125                           
 12126                           ; BSR set to: 15
 12127                           ;io.c: 265: PIE5bits.TMR5IE = 1;
 12128  00246C  827D               	bsf	3965,1,c	;volatile
 12129                           
 12130                           ; BSR set to: 15
 12131                           ;io.c: 266: INTCONbits.PEIE = 1;
 12132  00246E  8CF2               	bsf	intcon,6,c	;volatile
 12133                           
 12134                           ; BSR set to: 15
 12135                           ;io.c: 267: PIR5bits.TMR5IF = 0;
 12136  002470  927E               	bcf	3966,1,c	;volatile
 12137                           
 12138                           ;io.c: 268: TMR5H = 0x0B;
 12139  002472  0E0B               	movlw	11
 12140  002474  6F50               	movwf	80,b	;volatile
 12141                           
 12142                           ;io.c: 269: TMR5L = 0x45;
 12143  002476  0E45               	movlw	69
 12144  002478  6F4F               	movwf	79,b	;volatile
 12145                           
 12146                           ; BSR set to: 15
 12147                           ;io.c: 270: INTCONbits.GIE = 1;
 12148  00247A  8EF2               	bsf	intcon,7,c	;volatile
 12149                           
 12150                           ; BSR set to: 15
 12151  00247C  0012               	return		;funcret
 12152  00247E                     __end_ofi2_reload_tmr5_pt25s:
 12153                           	opt stack 0
 12154                           pclatu	equ	0xFFB
 12155                           pclath	equ	0xFFA
 12156                           tblptru	equ	0xFF8
 12157                           tblptrh	equ	0xFF7
 12158                           tblptrl	equ	0xFF6
 12159                           tablat	equ	0xFF5
 12160                           prodh	equ	0xFF4
 12161                           prodl	equ	0xFF3
 12162                           intcon	equ	0xFF2
 12163                           postinc0	equ	0xFEE
 12164                           fsr0h	equ	0xFEA
 12165                           fsr0l	equ	0xFE9
 12166                           wreg	equ	0xFE8
 12167                           indf1	equ	0xFE7
 12168                           postinc1	equ	0xFE6
 12169                           postdec1	equ	0xFE5
 12170                           plusw1	equ	0xFE3
 12171                           fsr1h	equ	0xFE2
 12172                           fsr1l	equ	0xFE1
 12173                           indf2	equ	0xFDF
 12174                           postinc2	equ	0xFDE
 12175                           plusw2	equ	0xFDB
 12176                           fsr2h	equ	0xFDA
 12177                           fsr2l	equ	0xFD9
 12178                           status	equ	0xFD8
 12179                           
 12180 ;; *************** function i2_init_uart *****************
 12181 ;; Defined at:
 12182 ;;		line 8 in file "uart.c"
 12183 ;; Parameters:    Size  Location     Type
 12184 ;;		None
 12185 ;; Auto vars:     Size  Location     Type
 12186 ;;		None
 12187 ;; Return value:  Size  Location     Type
 12188 ;;                  1    wreg      void 
 12189 ;; Registers used:
 12190 ;;		wreg, status,2, cstack
 12191 ;; Tracked objects:
 12192 ;;		On entry : 0/0
 12193 ;;		On exit  : 0/0
 12194 ;;		Unchanged: 0/0
 12195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12199 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12200 ;;Total ram usage:        0 bytes
 12201 ;; Hardware stack levels used:    1
 12202 ;; Hardware stack levels required when called:    1
 12203 ;; This function calls:
 12204 ;;		i2_init_md_uart
 12205 ;; This function is called by:
 12206 ;;		_isr
 12207 ;; This function uses a non-reentrant model
 12208 ;;
 12209                           
 12210                           	psect	text55
 12211  00238E                     __ptext55:
 12212                           	opt stack 0
 12213  00238E                     i2_init_uart:
 12214                           	opt stack 21
 12215                           
 12216                           ;uart.c: 10: TRISBbits.TRISB7 = 1;
 12217                           
 12218                           ; BSR set to: 15
 12219                           ;incstack = 0
 12220  00238E  8E93               	bsf	3987,7,c	;volatile
 12221                           
 12222                           ;uart.c: 11: TRISBbits.TRISB6 = 0;
 12223  002390  9C93               	bcf	3987,6,c	;volatile
 12224                           
 12225                           ;uart.c: 14: TRISBbits.TRISB5 = 1;
 12226  002392  8A93               	bsf	3987,5,c	;volatile
 12227                           
 12228                           ;uart.c: 22: TX2STA = 0x26;
 12229  002394  0E26               	movlw	38
 12230  002396  6E72               	movwf	3954,c	;volatile
 12231                           
 12232                           ;uart.c: 23: RC2STA = 0x90;
 12233  002398  0E90               	movlw	144
 12234  00239A  6E71               	movwf	3953,c	;volatile
 12235                           
 12236                           ;uart.c: 24: BAUDCON2 = 0xc8;
 12237  00239C  0EC8               	movlw	200
 12238  00239E  6E70               	movwf	3952,c	;volatile
 12239                           
 12240                           ;uart.c: 25: SPBRG2 = 207;
 12241  0023A0  0ECF               	movlw	207
 12242  0023A2  6E75               	movwf	3957,c	;volatile
 12243                           
 12244                           ;uart.c: 26: SPBRGH2 = 0;
 12245  0023A4  0E00               	movlw	0
 12246  0023A6  6E76               	movwf	3958,c	;volatile
 12247                           
 12248                           ;uart.c: 27: WPUB5 = 1;
 12249  0023A8  8A61               	bsf	3937,5,c	;volatile
 12250                           
 12251                           ;uart.c: 28: RC2IE = 1;
 12252  0023AA  8AA3               	bsf	4003,5,c	;volatile
 12253                           
 12254                           ;uart.c: 30: init_md_uart();
 12255  0023AC  ECD9  F011         	call	i2_init_md_uart	;wreg free
 12256  0023B0  0012               	return		;funcret
 12257  0023B2                     __end_ofi2_init_uart:
 12258                           	opt stack 0
 12259                           pclatu	equ	0xFFB
 12260                           pclath	equ	0xFFA
 12261                           tblptru	equ	0xFF8
 12262                           tblptrh	equ	0xFF7
 12263                           tblptrl	equ	0xFF6
 12264                           tablat	equ	0xFF5
 12265                           prodh	equ	0xFF4
 12266                           prodl	equ	0xFF3
 12267                           intcon	equ	0xFF2
 12268                           postinc0	equ	0xFEE
 12269                           fsr0h	equ	0xFEA
 12270                           fsr0l	equ	0xFE9
 12271                           wreg	equ	0xFE8
 12272                           indf1	equ	0xFE7
 12273                           postinc1	equ	0xFE6
 12274                           postdec1	equ	0xFE5
 12275                           plusw1	equ	0xFE3
 12276                           fsr1h	equ	0xFE2
 12277                           fsr1l	equ	0xFE1
 12278                           indf2	equ	0xFDF
 12279                           postinc2	equ	0xFDE
 12280                           plusw2	equ	0xFDB
 12281                           fsr2h	equ	0xFDA
 12282                           fsr2l	equ	0xFD9
 12283                           status	equ	0xFD8
 12284                           
 12285 ;; *************** function i2_init_md_uart *****************
 12286 ;; Defined at:
 12287 ;;		line 34 in file "uart.c"
 12288 ;; Parameters:    Size  Location     Type
 12289 ;;		None
 12290 ;; Auto vars:     Size  Location     Type
 12291 ;;		None
 12292 ;; Return value:  Size  Location     Type
 12293 ;;                  1    wreg      void 
 12294 ;; Registers used:
 12295 ;;		wreg, status,2
 12296 ;; Tracked objects:
 12297 ;;		On entry : 0/0
 12298 ;;		On exit  : 0/0
 12299 ;;		Unchanged: 0/0
 12300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12304 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12305 ;;Total ram usage:        0 bytes
 12306 ;; Hardware stack levels used:    1
 12307 ;; This function calls:
 12308 ;;		Nothing
 12309 ;; This function is called by:
 12310 ;;		i2_init_uart
 12311 ;; This function uses a non-reentrant model
 12312 ;;
 12313                           
 12314                           	psect	text56
 12315  0023B2                     __ptext56:
 12316                           	opt stack 0
 12317  0023B2                     i2_init_md_uart:
 12318                           	opt stack 21
 12319                           
 12320                           ;uart.c: 36: BAUDCON1bits.BRG16 = 1;
 12321                           
 12322                           ;incstack = 0
 12323  0023B2  86B8               	bsf	4024,3,c	;volatile
 12324                           
 12325                           ;uart.c: 37: BAUDCON1bits.RCIDL = 1;
 12326  0023B4  8CB8               	bsf	4024,6,c	;volatile
 12327                           
 12328                           ;uart.c: 38: BAUDCONbits.CKTXP = 0;
 12329  0023B6  98B8               	bcf	4024,4,c	;volatile
 12330                           
 12331                           ;uart.c: 39: BAUDCONbits.WUE = 0;
 12332  0023B8  92B8               	bcf	4024,1,c	;volatile
 12333                           
 12334                           ;uart.c: 40: BAUDCONbits.ABDEN = 0;
 12335  0023BA  90B8               	bcf	4024,0,c	;volatile
 12336                           
 12337                           ;uart.c: 41: TXSTA1bits.BRGH = 1;
 12338  0023BC  84AC               	bsf	4012,2,c	;volatile
 12339                           
 12340                           ;uart.c: 42: TXSTA1bits.SYNC = 0;
 12341  0023BE  98AC               	bcf	4012,4,c	;volatile
 12342                           
 12343                           ;uart.c: 43: SPBRGH1 = 0;
 12344  0023C0  0E00               	movlw	0
 12345  0023C2  6EB0               	movwf	4016,c	;volatile
 12346                           
 12347                           ;uart.c: 44: SPBRG1 = 16;
 12348  0023C4  0E10               	movlw	16
 12349  0023C6  6EAF               	movwf	4015,c	;volatile
 12350                           
 12351                           ;uart.c: 46: RC1STAbits.SPEN = 1;
 12352  0023C8  8EAB               	bsf	4011,7,c	;volatile
 12353                           
 12354                           ;uart.c: 47: TRISCbits.TRISC7 = 1;
 12355  0023CA  8E94               	bsf	3988,7,c	;volatile
 12356                           
 12357                           ;uart.c: 48: TRISCbits.TRISC6 = 0;
 12358  0023CC  9C94               	bcf	3988,6,c	;volatile
 12359                           
 12360                           ;uart.c: 51: RCSTA1bits.CREN = 1;
 12361  0023CE  88AB               	bsf	4011,4,c	;volatile
 12362                           
 12363                           ;uart.c: 52: TXSTA1bits.TXEN = 1;
 12364  0023D0  8AAC               	bsf	4012,5,c	;volatile
 12365                           
 12366                           ;uart.c: 54: PIR1bits.RC1IF = 0;
 12367  0023D2  9A9E               	bcf	3998,5,c	;volatile
 12368  0023D4  0012               	return		;funcret
 12369  0023D6                     __end_ofi2_init_md_uart:
 12370                           	opt stack 0
 12371                           pclatu	equ	0xFFB
 12372                           pclath	equ	0xFFA
 12373                           tblptru	equ	0xFF8
 12374                           tblptrh	equ	0xFF7
 12375                           tblptrl	equ	0xFF6
 12376                           tablat	equ	0xFF5
 12377                           prodh	equ	0xFF4
 12378                           prodl	equ	0xFF3
 12379                           intcon	equ	0xFF2
 12380                           postinc0	equ	0xFEE
 12381                           fsr0h	equ	0xFEA
 12382                           fsr0l	equ	0xFE9
 12383                           wreg	equ	0xFE8
 12384                           indf1	equ	0xFE7
 12385                           postinc1	equ	0xFE6
 12386                           postdec1	equ	0xFE5
 12387                           plusw1	equ	0xFE3
 12388                           fsr1h	equ	0xFE2
 12389                           fsr1l	equ	0xFE1
 12390                           indf2	equ	0xFDF
 12391                           postinc2	equ	0xFDE
 12392                           plusw2	equ	0xFDB
 12393                           fsr2h	equ	0xFDA
 12394                           fsr2l	equ	0xFD9
 12395                           status	equ	0xFD8
 12396                           
 12397 ;; *************** function i2_ee_read *****************
 12398 ;; Defined at:
 12399 ;;		line 4 in file "ee.c"
 12400 ;; Parameters:    Size  Location     Type
 12401 ;;  page            1    wreg     unsigned char 
 12402 ;;  addr            1    0[COMRAM] unsigned char 
 12403 ;; Auto vars:     Size  Location     Type
 12404 ;;  page            1    1[COMRAM] unsigned char 
 12405 ;;  ee_read         1    2[COMRAM] unsigned char 
 12406 ;; Return value:  Size  Location     Type
 12407 ;;                  1    wreg      unsigned char 
 12408 ;; Registers used:
 12409 ;;		wreg, status,2
 12410 ;; Tracked objects:
 12411 ;;		On entry : 0/0
 12412 ;;		On exit  : 0/0
 12413 ;;		Unchanged: 0/0
 12414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12415 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12416 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12418 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12419 ;;Total ram usage:        3 bytes
 12420 ;; Hardware stack levels used:    1
 12421 ;; This function calls:
 12422 ;;		Nothing
 12423 ;; This function is called by:
 12424 ;;		_isr
 12425 ;; This function uses a non-reentrant model
 12426 ;;
 12427                           
 12428                           	psect	text57
 12429  002414                     __ptext57:
 12430                           	opt stack 0
 12431  002414                     i2_ee_read:
 12432                           	opt stack 22
 12433                           
 12434                           ;incstack = 0
 12435                           ;i2ee_read@page stored from wreg
 12436  002414  6E25               	movwf	i2ee_read@page,c
 12437                           
 12438                           ;ee.c: 6: uint8_t data;
 12439                           ;ee.c: 7: GIE = 0;
 12440  002416  9EF2               	bcf	intcon,7,c	;volatile
 12441                           
 12442                           ;ee.c: 8: EEADRH = page;
 12443  002418  C025  FFAA         	movff	i2ee_read@page,4010	;volatile
 12444                           
 12445                           ;ee.c: 9: EEADR = addr;
 12446  00241C  C024  FFA9         	movff	i2ee_read@addr,4009	;volatile
 12447                           
 12448                           ;ee.c: 10: CFGS = 0;
 12449  002420  9CA6               	bcf	4006,6,c	;volsfr
 12450                           
 12451                           ;ee.c: 11: EEPGD = 0;
 12452  002422  9EA6               	bcf	4006,7,c	;volsfr
 12453                           
 12454                           ;ee.c: 12: RD = 1;
 12455  002424  80A6               	bsf	4006,0,c	;volsfr
 12456                           
 12457                           ;ee.c: 13: data = EEDATA;
 12458  002426  CFA8 F026          	movff	4008,i2ee_read@data	;volatile
 12459                           
 12460                           ;ee.c: 14: GIE = 1;
 12461  00242A  8EF2               	bsf	intcon,7,c	;volatile
 12462                           
 12463                           ;ee.c: 15: return(data);
 12464  00242C  5026               	movf	i2ee_read@data,w,c
 12465  00242E  0012               	return	
 12466  002430                     __end_ofi2_ee_read:
 12467                           	opt stack 0
 12468                           pclatu	equ	0xFFB
 12469                           pclath	equ	0xFFA
 12470                           tblptru	equ	0xFF8
 12471                           tblptrh	equ	0xFF7
 12472                           tblptrl	equ	0xFF6
 12473                           tablat	equ	0xFF5
 12474                           prodh	equ	0xFF4
 12475                           prodl	equ	0xFF3
 12476                           intcon	equ	0xFF2
 12477                           postinc0	equ	0xFEE
 12478                           fsr0h	equ	0xFEA
 12479                           fsr0l	equ	0xFE9
 12480                           wreg	equ	0xFE8
 12481                           indf1	equ	0xFE7
 12482                           postinc1	equ	0xFE6
 12483                           postdec1	equ	0xFE5
 12484                           plusw1	equ	0xFE3
 12485                           fsr1h	equ	0xFE2
 12486                           fsr1l	equ	0xFE1
 12487                           indf2	equ	0xFDF
 12488                           postinc2	equ	0xFDE
 12489                           plusw2	equ	0xFDB
 12490                           fsr2h	equ	0xFDA
 12491                           fsr2l	equ	0xFD9
 12492                           status	equ	0xFD8
 12493                           
 12494 ;; *************** function i2_disable_tmr5 *****************
 12495 ;; Defined at:
 12496 ;;		line 273 in file "io.c"
 12497 ;; Parameters:    Size  Location     Type
 12498 ;;		None
 12499 ;; Auto vars:     Size  Location     Type
 12500 ;;		None
 12501 ;; Return value:  Size  Location     Type
 12502 ;;                  1    wreg      void 
 12503 ;; Registers used:
 12504 ;;		wreg, status,2
 12505 ;; Tracked objects:
 12506 ;;		On entry : 0/0
 12507 ;;		On exit  : 0/0
 12508 ;;		Unchanged: 0/0
 12509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12513 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12514 ;;Total ram usage:        0 bytes
 12515 ;; Hardware stack levels used:    1
 12516 ;; This function calls:
 12517 ;;		Nothing
 12518 ;; This function is called by:
 12519 ;;		_isr
 12520 ;; This function uses a non-reentrant model
 12521 ;;
 12522                           
 12523                           	psect	text58
 12524  00250C                     __ptext58:
 12525                           	opt stack 0
 12526  00250C                     i2_disable_tmr5:
 12527                           	opt stack 22
 12528                           
 12529                           ;io.c: 275: tmr5_cnt = 0;
 12530                           
 12531                           ;incstack = 0
 12532  00250C  0E00               	movlw	0
 12533  00250E  6E1B               	movwf	_tmr5_cnt,c
 12534                           
 12535                           ;io.c: 276: T5CONbits.TMR5ON = 0;
 12536  002510  010F               	movlb	15	; () banked
 12537  002512  914E               	bcf	78,0,b	;volatile
 12538                           
 12539                           ; BSR set to: 15
 12540                           ;io.c: 277: PIE5bits.TMR5IE = 0;
 12541  002514  927D               	bcf	3965,1,c	;volatile
 12542                           
 12543                           ; BSR set to: 15
 12544  002516  0012               	return		;funcret
 12545  002518                     __end_ofi2_disable_tmr5:
 12546                           	opt stack 0
 12547                           pclatu	equ	0xFFB
 12548                           pclath	equ	0xFFA
 12549                           tblptru	equ	0xFF8
 12550                           tblptrh	equ	0xFF7
 12551                           tblptrl	equ	0xFF6
 12552                           tablat	equ	0xFF5
 12553                           prodh	equ	0xFF4
 12554                           prodl	equ	0xFF3
 12555                           intcon	equ	0xFF2
 12556                           postinc0	equ	0xFEE
 12557                           fsr0h	equ	0xFEA
 12558                           fsr0l	equ	0xFE9
 12559                           wreg	equ	0xFE8
 12560                           indf1	equ	0xFE7
 12561                           postinc1	equ	0xFE6
 12562                           postdec1	equ	0xFE5
 12563                           plusw1	equ	0xFE3
 12564                           fsr1h	equ	0xFE2
 12565                           fsr1l	equ	0xFE1
 12566                           indf2	equ	0xFDF
 12567                           postinc2	equ	0xFDE
 12568                           plusw2	equ	0xFDB
 12569                           fsr2h	equ	0xFDA
 12570                           fsr2l	equ	0xFD9
 12571                           status	equ	0xFD8
 12572                           
 12573 ;; *************** function i2_disable_md_rxint *****************
 12574 ;; Defined at:
 12575 ;;		line 74 in file "uart.c"
 12576 ;; Parameters:    Size  Location     Type
 12577 ;;		None
 12578 ;; Auto vars:     Size  Location     Type
 12579 ;;		None
 12580 ;; Return value:  Size  Location     Type
 12581 ;;                  1    wreg      void 
 12582 ;; Registers used:
 12583 ;;		None
 12584 ;; Tracked objects:
 12585 ;;		On entry : 0/0
 12586 ;;		On exit  : 0/0
 12587 ;;		Unchanged: 0/0
 12588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12592 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12593 ;;Total ram usage:        0 bytes
 12594 ;; Hardware stack levels used:    1
 12595 ;; This function calls:
 12596 ;;		Nothing
 12597 ;; This function is called by:
 12598 ;;		_isr
 12599 ;; This function uses a non-reentrant model
 12600 ;;
 12601                           
 12602                           	psect	text59
 12603  00252C                     __ptext59:
 12604                           	opt stack 0
 12605  00252C                     i2_disable_md_rxint:
 12606                           	opt stack 22
 12607                           
 12608                           ;uart.c: 76: CREN1 = 0;
 12609                           
 12610                           ; BSR set to: 15
 12611                           ;incstack = 0
 12612  00252C  98AB               	bcf	4011,4,c	;volatile
 12613                           
 12614                           ;uart.c: 77: GIE = 0;
 12615  00252E  9EF2               	bcf	intcon,7,c	;volatile
 12616                           
 12617                           ;uart.c: 78: PIE1bits.RC1IE = 0;
 12618  002530  9A9D               	bcf	3997,5,c	;volatile
 12619                           
 12620                           ;uart.c: 79: GIE = 1;
 12621  002532  8EF2               	bsf	intcon,7,c	;volatile
 12622  002534  0012               	return		;funcret
 12623  002536                     __end_ofi2_disable_md_rxint:
 12624                           	opt stack 0
 12625                           pclatu	equ	0xFFB
 12626                           pclath	equ	0xFFA
 12627                           tblptru	equ	0xFF8
 12628                           tblptrh	equ	0xFF7
 12629                           tblptrl	equ	0xFF6
 12630                           tablat	equ	0xFF5
 12631                           prodh	equ	0xFF4
 12632                           prodl	equ	0xFF3
 12633                           intcon	equ	0xFF2
 12634                           postinc0	equ	0xFEE
 12635                           fsr0h	equ	0xFEA
 12636                           fsr0l	equ	0xFE9
 12637                           wreg	equ	0xFE8
 12638                           indf1	equ	0xFE7
 12639                           postinc1	equ	0xFE6
 12640                           postdec1	equ	0xFE5
 12641                           plusw1	equ	0xFE3
 12642                           fsr1h	equ	0xFE2
 12643                           fsr1l	equ	0xFE1
 12644                           indf2	equ	0xFDF
 12645                           postinc2	equ	0xFDE
 12646                           plusw2	equ	0xFDB
 12647                           fsr2h	equ	0xFDA
 12648                           fsr2l	equ	0xFD9
 12649                           status	equ	0xFD8
 12650                           
 12651 ;; *************** function i2_add_event *****************
 12652 ;; Defined at:
 12653 ;;		line 19 in file "queue.c"
 12654 ;; Parameters:    Size  Location     Type
 12655 ;;  event           1    wreg     enum E6758
 12656 ;;  zone            1    3[COMRAM] unsigned char 
 12657 ;; Auto vars:     Size  Location     Type
 12658 ;;  event           1    5[COMRAM] enum E6758
 12659 ;;  add_event       1    6[COMRAM] unsigned char 
 12660 ;; Return value:  Size  Location     Type
 12661 ;;                  1    wreg      unsigned char 
 12662 ;; Registers used:
 12663 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12664 ;; Tracked objects:
 12665 ;;		On entry : 0/0
 12666 ;;		On exit  : 0/0
 12667 ;;		Unchanged: 0/0
 12668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12669 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12670 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12671 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12672 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12673 ;;Total ram usage:        4 bytes
 12674 ;; Hardware stack levels used:    1
 12675 ;; This function calls:
 12676 ;;		Nothing
 12677 ;; This function is called by:
 12678 ;;		_isr
 12679 ;; This function uses a non-reentrant model
 12680 ;;
 12681                           
 12682                           	psect	text60
 12683  001C94                     __ptext60:
 12684                           	opt stack 0
 12685  001C94                     i2_add_event:
 12686                           	opt stack 22
 12687                           
 12688                           ;incstack = 0
 12689                           ;i2add_event@event stored from wreg
 12690  001C94  6E29               	movwf	i2add_event@event,c
 12691                           
 12692                           ;queue.c: 21: if (queue_end_ptr == 0)
 12693  001C96  5002               	movf	_queue_end_ptr,w,c
 12694  001C98  A4D8               	btfss	status,2,c
 12695  001C9A  D004               	goto	i2l1273
 12696                           
 12697                           ;queue.c: 22: {
 12698                           ;queue.c: 23: event_queue[0][0] = event;
 12699  001C9C  C029  F1C1         	movff	i2add_event@event,_event_queue
 12700                           
 12701                           ;queue.c: 24: queue_end_ptr++;
 12702  001CA0  2A02               	incf	_queue_end_ptr,f,c
 12703                           
 12704                           ;queue.c: 25: }
 12705  001CA2  0012               	return	
 12706  001CA4                     i2l1273:
 12707                           
 12708                           ;queue.c: 26: else
 12709                           ;queue.c: 27: {
 12710                           ;queue.c: 28: for (uint8_t i = 0; i < queue_end_ptr; i++)
 12711  001CA4  0E00               	movlw	0
 12712  001CA6  6E2A               	movwf	i2add_event@i,c
 12713  001CA8  D01D               	goto	i2l1275
 12714  001CAA                     
 12715                           ;queue.c: 29: {
 12716                           ;queue.c: 30: if (event_queue[i][0] == event && event_queue[i][1] == zone)
 12717  001CAA  502A               	movf	i2add_event@i,w,c
 12718  001CAC  0D02               	mullw	2
 12719  001CAE  0EC1               	movlw	low _event_queue
 12720  001CB0  24F3               	addwf	prodl,w,c
 12721  001CB2  6ED9               	movwf	fsr2l,c
 12722  001CB4  0E01               	movlw	high _event_queue
 12723  001CB6  20F4               	addwfc	prodh,w,c
 12724  001CB8  6EDA               	movwf	fsr2h,c
 12725  001CBA  5029               	movf	i2add_event@event,w,c
 12726  001CBC  18DE               	xorwf	postinc2,w,c
 12727  001CBE  A4D8               	btfss	status,2,c
 12728  001CC0  D010               	goto	i2l1277
 12729  001CC2  502A               	movf	i2add_event@i,w,c
 12730  001CC4  0D02               	mullw	2
 12731  001CC6  0E01               	movlw	1
 12732  001CC8  26F3               	addwf	prodl,f,c
 12733  001CCA  0E00               	movlw	0
 12734  001CCC  22F4               	addwfc	prodh,f,c
 12735  001CCE  0EC1               	movlw	low _event_queue
 12736  001CD0  24F3               	addwf	prodl,w,c
 12737  001CD2  6ED9               	movwf	fsr2l,c
 12738  001CD4  0E01               	movlw	high _event_queue
 12739  001CD6  20F4               	addwfc	prodh,w,c
 12740  001CD8  6EDA               	movwf	fsr2h,c
 12741  001CDA  5027               	movf	i2add_event@zone,w,c
 12742  001CDC  18DE               	xorwf	postinc2,w,c
 12743  001CDE  B4D8               	btfsc	status,2,c
 12744  001CE0  0012               	return	
 12745  001CE2                     i2l1277:
 12746  001CE2  2A2A               	incf	i2add_event@i,f,c
 12747  001CE4                     i2l1275:
 12748  001CE4  5002               	movf	_queue_end_ptr,w,c
 12749  001CE6  5C2A               	subwf	i2add_event@i,w,c
 12750  001CE8  A0D8               	btfss	status,0,c
 12751  001CEA  D7DF               	goto	i2l1276
 12752                           
 12753                           ;queue.c: 32: }
 12754                           ;queue.c: 35: event_queue[queue_end_ptr][0] = event;
 12755  001CEC  5002               	movf	_queue_end_ptr,w,c
 12756  001CEE  0D02               	mullw	2
 12757  001CF0  0EC1               	movlw	low _event_queue
 12758  001CF2  24F3               	addwf	prodl,w,c
 12759  001CF4  6ED9               	movwf	fsr2l,c
 12760  001CF6  0E01               	movlw	high _event_queue
 12761  001CF8  20F4               	addwfc	prodh,w,c
 12762  001CFA  6EDA               	movwf	fsr2h,c
 12763  001CFC  C029  FFDF         	movff	i2add_event@event,indf2
 12764                           
 12765                           ;queue.c: 36: event_queue[queue_end_ptr][1] = zone;
 12766  001D00  5002               	movf	_queue_end_ptr,w,c
 12767  001D02  0D02               	mullw	2
 12768  001D04  0E01               	movlw	1
 12769  001D06  26F3               	addwf	prodl,f,c
 12770  001D08  0E00               	movlw	0
 12771  001D0A  22F4               	addwfc	prodh,f,c
 12772  001D0C  0EC1               	movlw	low _event_queue
 12773  001D0E  24F3               	addwf	prodl,w,c
 12774  001D10  6ED9               	movwf	fsr2l,c
 12775  001D12  0E01               	movlw	high _event_queue
 12776  001D14  20F4               	addwfc	prodh,w,c
 12777  001D16  6EDA               	movwf	fsr2h,c
 12778  001D18  C027  FFDF         	movff	i2add_event@zone,indf2
 12779                           
 12780                           ;queue.c: 37: if (queue_end_ptr++ >= sizeof(event_queue))
 12781  001D1C  2A02               	incf	_queue_end_ptr,f,c
 12782  001D1E  0402               	decf	_queue_end_ptr,w,c
 12783  001D20  6E28               	movwf	??i2_add_event& (0+255),c
 12784  001D22  0E27               	movlw	39
 12785  001D24  6428               	cpfsgt	??i2_add_event,c
 12786  001D26  0012               	return	
 12787                           
 12788                           ;queue.c: 38: queue_end_ptr--;
 12789  001D28  0602               	decf	_queue_end_ptr,f,c
 12790  001D2A  0012               	return	
 12791  001D2C                     __end_ofi2_add_event:
 12792                           	opt stack 0
 12793                           pclatu	equ	0xFFB
 12794                           pclath	equ	0xFFA
 12795                           tblptru	equ	0xFF8
 12796                           tblptrh	equ	0xFF7
 12797                           tblptrl	equ	0xFF6
 12798                           tablat	equ	0xFF5
 12799                           prodh	equ	0xFF4
 12800                           prodl	equ	0xFF3
 12801                           intcon	equ	0xFF2
 12802                           postinc0	equ	0xFEE
 12803                           fsr0h	equ	0xFEA
 12804                           fsr0l	equ	0xFE9
 12805                           wreg	equ	0xFE8
 12806                           indf1	equ	0xFE7
 12807                           postinc1	equ	0xFE6
 12808                           postdec1	equ	0xFE5
 12809                           plusw1	equ	0xFE3
 12810                           fsr1h	equ	0xFE2
 12811                           fsr1l	equ	0xFE1
 12812                           indf2	equ	0xFDF
 12813                           postinc2	equ	0xFDE
 12814                           plusw2	equ	0xFDB
 12815                           fsr2h	equ	0xFDA
 12816                           fsr2l	equ	0xFD9
 12817                           status	equ	0xFD8
 12818                           
 12819 ;; *************** function _start_sensor_tmr *****************
 12820 ;; Defined at:
 12821 ;;		line 280 in file "io.c"
 12822 ;; Parameters:    Size  Location     Type
 12823 ;;		None
 12824 ;; Auto vars:     Size  Location     Type
 12825 ;;		None
 12826 ;; Return value:  Size  Location     Type
 12827 ;;                  1    wreg      void 
 12828 ;; Registers used:
 12829 ;;		wreg, status,2
 12830 ;; Tracked objects:
 12831 ;;		On entry : 0/0
 12832 ;;		On exit  : 0/0
 12833 ;;		Unchanged: 0/0
 12834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12838 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12839 ;;Total ram usage:        0 bytes
 12840 ;; Hardware stack levels used:    1
 12841 ;; This function calls:
 12842 ;;		Nothing
 12843 ;; This function is called by:
 12844 ;;		_isr
 12845 ;; This function uses a non-reentrant model
 12846 ;;
 12847                           
 12848                           	psect	text61
 12849  002320                     __ptext61:
 12850                           	opt stack 0
 12851  002320                     _start_sensor_tmr:
 12852                           	opt stack 22
 12853                           
 12854                           ;io.c: 282: t4_tick = 0;
 12855                           
 12856                           ;incstack = 0
 12857  002320  0E00               	movlw	0
 12858  002322  0100               	movlb	0	; () banked
 12859  002324  6FB2               	movwf	(_t4_tick+1)& (0+255),b
 12860  002326  0E00               	movlw	0
 12861  002328  6FB1               	movwf	_t4_tick& (0+255),b
 12862                           
 12863                           ;io.c: 283: T4CONbits.T4CKPS = 0b10;
 12864  00232A  010F               	movlb	15	; () banked
 12865  00232C  5151               	movf	81,w,b	;volatile
 12866  00232E  0BFC               	andlw	-4
 12867  002330  0902               	iorlw	2
 12868  002332  6F51               	movwf	81,b	;volatile
 12869                           
 12870                           ; BSR set to: 15
 12871                           ;io.c: 284: T4CONbits.T4OUTPS = 0b1111;
 12872  002334  8751               	bsf	81,3,b	;volatile
 12873  002336  8951               	bsf	81,4,b	;volatile
 12874  002338  8B51               	bsf	81,5,b	;volatile
 12875  00233A  8D51               	bsf	81,6,b	;volatile
 12876                           
 12877                           ; BSR set to: 15
 12878                           ;io.c: 285: T4CONbits.TMR4ON = 1;
 12879  00233C  8551               	bsf	81,2,b	;volatile
 12880                           
 12881                           ; BSR set to: 15
 12882                           ;io.c: 286: PIE5bits.TMR4IE = 1;
 12883  00233E  807D               	bsf	3965,0,c	;volatile
 12884                           
 12885                           ; BSR set to: 15
 12886                           ;io.c: 287: INTCONbits.PEIE = 1;
 12887  002340  8CF2               	bsf	intcon,6,c	;volatile
 12888                           
 12889                           ; BSR set to: 15
 12890                           ;io.c: 288: INTCONbits.GIE = 1;
 12891  002342  8EF2               	bsf	intcon,7,c	;volatile
 12892                           
 12893                           ; BSR set to: 15
 12894  002344  0012               	return		;funcret
 12895  002346                     __end_of_start_sensor_tmr:
 12896                           	opt stack 0
 12897                           pclatu	equ	0xFFB
 12898                           pclath	equ	0xFFA
 12899                           tblptru	equ	0xFF8
 12900                           tblptrh	equ	0xFF7
 12901                           tblptrl	equ	0xFF6
 12902                           tablat	equ	0xFF5
 12903                           prodh	equ	0xFF4
 12904                           prodl	equ	0xFF3
 12905                           intcon	equ	0xFF2
 12906                           postinc0	equ	0xFEE
 12907                           fsr0h	equ	0xFEA
 12908                           fsr0l	equ	0xFE9
 12909                           wreg	equ	0xFE8
 12910                           indf1	equ	0xFE7
 12911                           postinc1	equ	0xFE6
 12912                           postdec1	equ	0xFE5
 12913                           plusw1	equ	0xFE3
 12914                           fsr1h	equ	0xFE2
 12915                           fsr1l	equ	0xFE1
 12916                           indf2	equ	0xFDF
 12917                           postinc2	equ	0xFDE
 12918                           plusw2	equ	0xFDB
 12919                           fsr2h	equ	0xFDA
 12920                           fsr2l	equ	0xFD9
 12921                           status	equ	0xFD8
 12922                           
 12923 ;; *************** function _reload_timer0 *****************
 12924 ;; Defined at:
 12925 ;;		line 378 in file "io.c"
 12926 ;; Parameters:    Size  Location     Type
 12927 ;;		None
 12928 ;; Auto vars:     Size  Location     Type
 12929 ;;		None
 12930 ;; Return value:  Size  Location     Type
 12931 ;;                  1    wreg      void 
 12932 ;; Registers used:
 12933 ;;		wreg, status,2
 12934 ;; Tracked objects:
 12935 ;;		On entry : 0/0
 12936 ;;		On exit  : 0/0
 12937 ;;		Unchanged: 0/0
 12938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12940 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12942 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12943 ;;Total ram usage:        0 bytes
 12944 ;; Hardware stack levels used:    1
 12945 ;; This function calls:
 12946 ;;		Nothing
 12947 ;; This function is called by:
 12948 ;;		_isr
 12949 ;; This function uses a non-reentrant model
 12950 ;;
 12951                           
 12952                           	psect	text62
 12953  002536                     __ptext62:
 12954                           	opt stack 0
 12955  002536                     _reload_timer0:
 12956                           	opt stack 22
 12957                           
 12958                           ;io.c: 380: TMR0L = ((65535-781)%256);
 12959                           
 12960                           ; BSR set to: 15
 12961                           ;incstack = 0
 12962  002536  0EF2               	movlw	242
 12963  002538  6ED6               	movwf	4054,c	;volatile
 12964                           
 12965                           ;io.c: 381: TMR0H = ((65535-781)/256);
 12966  00253A  0EFC               	movlw	252
 12967  00253C  6ED7               	movwf	4055,c	;volatile
 12968  00253E  0012               	return		;funcret
 12969  002540                     __end_of_reload_timer0:
 12970                           	opt stack 0
 12971                           pclatu	equ	0xFFB
 12972                           pclath	equ	0xFFA
 12973                           tblptru	equ	0xFF8
 12974                           tblptrh	equ	0xFF7
 12975                           tblptrl	equ	0xFF6
 12976                           tablat	equ	0xFF5
 12977                           prodh	equ	0xFF4
 12978                           prodl	equ	0xFF3
 12979                           intcon	equ	0xFF2
 12980                           postinc0	equ	0xFEE
 12981                           fsr0h	equ	0xFEA
 12982                           fsr0l	equ	0xFE9
 12983                           wreg	equ	0xFE8
 12984                           indf1	equ	0xFE7
 12985                           postinc1	equ	0xFE6
 12986                           postdec1	equ	0xFE5
 12987                           plusw1	equ	0xFE3
 12988                           fsr1h	equ	0xFE2
 12989                           fsr1l	equ	0xFE1
 12990                           indf2	equ	0xFDF
 12991                           postinc2	equ	0xFDE
 12992                           plusw2	equ	0xFDB
 12993                           fsr2h	equ	0xFDA
 12994                           fsr2l	equ	0xFD9
 12995                           status	equ	0xFD8
 12996                           
 12997 ;; *************** function _disable_tmr3 *****************
 12998 ;; Defined at:
 12999 ;;		line 359 in file "io.c"
 13000 ;; Parameters:    Size  Location     Type
 13001 ;;		None
 13002 ;; Auto vars:     Size  Location     Type
 13003 ;;		None
 13004 ;; Return value:  Size  Location     Type
 13005 ;;                  1    wreg      void 
 13006 ;; Registers used:
 13007 ;;		wreg, status,2
 13008 ;; Tracked objects:
 13009 ;;		On entry : 0/0
 13010 ;;		On exit  : 0/0
 13011 ;;		Unchanged: 0/0
 13012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13016 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13017 ;;Total ram usage:        0 bytes
 13018 ;; Hardware stack levels used:    1
 13019 ;; This function calls:
 13020 ;;		Nothing
 13021 ;; This function is called by:
 13022 ;;		_isr
 13023 ;; This function uses a non-reentrant model
 13024 ;;
 13025                           
 13026                           	psect	text63
 13027  0024E6                     __ptext63:
 13028                           	opt stack 0
 13029  0024E6                     _disable_tmr3:
 13030                           	opt stack 22
 13031                           
 13032                           ;io.c: 361: buttonPressCount = 0;
 13033                           
 13034                           ;incstack = 0
 13035  0024E6  0E00               	movlw	0
 13036  0024E8  6E14               	movwf	_buttonPressCount,c
 13037                           
 13038                           ;io.c: 362: tmr3_cnt = 0;
 13039  0024EA  0E00               	movlw	0
 13040  0024EC  6E11               	movwf	_tmr3_cnt,c
 13041                           
 13042                           ;io.c: 363: T3CONbits.TMR3ON = 0;
 13043  0024EE  90B1               	bcf	4017,0,c	;volatile
 13044                           
 13045                           ;io.c: 364: PIE2bits.TMR3IE = 0;
 13046  0024F0  92A0               	bcf	4000,1,c	;volatile
 13047  0024F2  0012               	return		;funcret
 13048  0024F4                     __end_of_disable_tmr3:
 13049                           	opt stack 0
 13050                           pclatu	equ	0xFFB
 13051                           pclath	equ	0xFFA
 13052                           tblptru	equ	0xFF8
 13053                           tblptrh	equ	0xFF7
 13054                           tblptrl	equ	0xFF6
 13055                           tablat	equ	0xFF5
 13056                           prodh	equ	0xFF4
 13057                           prodl	equ	0xFF3
 13058                           intcon	equ	0xFF2
 13059                           postinc0	equ	0xFEE
 13060                           fsr0h	equ	0xFEA
 13061                           fsr0l	equ	0xFE9
 13062                           wreg	equ	0xFE8
 13063                           indf1	equ	0xFE7
 13064                           postinc1	equ	0xFE6
 13065                           postdec1	equ	0xFE5
 13066                           plusw1	equ	0xFE3
 13067                           fsr1h	equ	0xFE2
 13068                           fsr1l	equ	0xFE1
 13069                           indf2	equ	0xFDF
 13070                           postinc2	equ	0xFDE
 13071                           plusw2	equ	0xFDB
 13072                           fsr2h	equ	0xFDA
 13073                           fsr2l	equ	0xFD9
 13074                           status	equ	0xFD8
 13075                           
 13076 ;; *************** function _control_leds *****************
 13077 ;; Defined at:
 13078 ;;		line 386 in file "io.c"
 13079 ;; Parameters:    Size  Location     Type
 13080 ;;		None
 13081 ;; Auto vars:     Size  Location     Type
 13082 ;;		None
 13083 ;; Return value:  Size  Location     Type
 13084 ;;                  1    wreg      void 
 13085 ;; Registers used:
 13086 ;;		wreg, status,2, status,0
 13087 ;; Tracked objects:
 13088 ;;		On entry : 0/0
 13089 ;;		On exit  : 0/0
 13090 ;;		Unchanged: 0/0
 13091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13093 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13095 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13096 ;;Total ram usage:        0 bytes
 13097 ;; Hardware stack levels used:    1
 13098 ;; This function calls:
 13099 ;;		Nothing
 13100 ;; This function is called by:
 13101 ;;		_isr
 13102 ;; This function uses a non-reentrant model
 13103 ;;
 13104                           
 13105                           	psect	text64
 13106  001900                     __ptext64:
 13107                           	opt stack 0
 13108  001900                     _control_leds:
 13109                           	opt stack 22
 13110                           
 13111                           ;io.c: 388: switch (STATE)
 13112                           
 13113                           ;incstack = 0
 13114  001900  D054               	goto	i2l561
 13115  001902                     
 13116                           ;io.c: 391: if (waiting)
 13117  001902  5043               	movf	_waiting,w,c
 13118  001904  B4D8               	btfsc	status,2,c
 13119  001906  0012               	return	
 13120  001908  D007               	goto	i2l564
 13121  00190A                     i2l565:
 13122                           
 13123                           ;io.c: 396: LATB3=0;
 13124  00190A  968A               	bcf	3978,3,c	;volatile
 13125                           
 13126                           ;io.c: 397: break;
 13127  00190C  D00F               	goto	i2l566
 13128  00190E                     i2l567:
 13129                           
 13130                           ;io.c: 399: LATB3=1;
 13131  00190E  868A               	bsf	3978,3,c	;volatile
 13132                           
 13133                           ;io.c: 400: break;
 13134  001910  D00D               	goto	i2l566
 13135  001912                     
 13136                           ;io.c: 402: gled_tmr0_tick = 0;
 13137  001912  0E00               	movlw	0
 13138  001914  6E13               	movwf	_gled_tmr0_tick,c
 13139                           
 13140                           ;io.c: 404: }
 13141                           
 13142                           ;io.c: 403: break;
 13143  001916  D00A               	goto	i2l566
 13144  001918                     i2l564:
 13145  001918  5013               	movf	_gled_tmr0_tick,w,c
 13146                           
 13147                           ; Switch size 1, requested type "space"
 13148                           ; Number of cases is 3, Range of values is 1 to 20
 13149                           ; switch strategies available:
 13150                           ; Name         Instructions Cycles
 13151                           ; simple_byte           10     6 (average)
 13152                           ;	Chosen strategy is simple_byte
 13153  00191A  0A01               	xorlw	1	; case 1
 13154  00191C  B4D8               	btfsc	status,2,c
 13155  00191E  D7F5               	goto	i2l565
 13156  001920  0A04               	xorlw	4	; case 5
 13157  001922  B4D8               	btfsc	status,2,c
 13158  001924  D7F4               	goto	i2l567
 13159  001926  0A11               	xorlw	17	; case 20
 13160  001928  B4D8               	btfsc	status,2,c
 13161  00192A  D7F3               	goto	i2l568
 13162  00192C                     i2l566:
 13163                           
 13164                           ;io.c: 405: LATC4=1;
 13165  00192C  888B               	bsf	3979,4,c	;volatile
 13166                           
 13167                           ;io.c: 406: bled_tmr0_tick = 0;
 13168  00192E  0E00               	movlw	0
 13169  001930  6E12               	movwf	_bled_tmr0_tick,c
 13170                           
 13171                           ;io.c: 407: }
 13172                           ;io.c: 408: break;
 13173  001932  0012               	return	
 13174  001934                     i2l572:
 13175                           
 13176                           ;io.c: 414: LATC4=0;
 13177  001934  988B               	bcf	3979,4,c	;volatile
 13178                           
 13179                           ;io.c: 415: break;
 13180  001936  D00B               	goto	i2l573
 13181  001938                     i2l574:
 13182                           
 13183                           ;io.c: 417: LATC4=1;
 13184  001938  888B               	bsf	3979,4,c	;volatile
 13185                           
 13186                           ;io.c: 418: bled_tmr0_tick = 0;
 13187  00193A  0E00               	movlw	0
 13188  00193C  6E12               	movwf	_bled_tmr0_tick,c
 13189                           
 13190                           ;io.c: 420: }
 13191                           
 13192                           ;io.c: 419: break;
 13193  00193E  D007               	goto	i2l573
 13194  001940  5012               	movf	_bled_tmr0_tick,w,c
 13195                           
 13196                           ; Switch size 1, requested type "space"
 13197                           ; Number of cases is 2, Range of values is 1 to 2
 13198                           ; switch strategies available:
 13199                           ; Name         Instructions Cycles
 13200                           ; simple_byte            7     4 (average)
 13201                           ;	Chosen strategy is simple_byte
 13202  001942  0A01               	xorlw	1	; case 1
 13203  001944  B4D8               	btfsc	status,2,c
 13204  001946  D7F6               	goto	i2l572
 13205  001948  0A03               	xorlw	3	; case 2
 13206  00194A  B4D8               	btfsc	status,2,c
 13207  00194C  D7F5               	goto	i2l574
 13208  00194E                     i2l573:
 13209                           
 13210                           ;io.c: 421: LATB3=1;
 13211  00194E  868A               	bsf	3978,3,c	;volatile
 13212                           
 13213                           ;io.c: 422: gled_tmr0_tick = 0;
 13214  001950  0E00               	movlw	0
 13215  001952  6E13               	movwf	_gled_tmr0_tick,c
 13216                           
 13217                           ;io.c: 423: break;
 13218  001954  0012               	return	
 13219  001956                     i2l577:
 13220                           
 13221                           ;io.c: 429: LATC4=0;
 13222  001956  988B               	bcf	3979,4,c	;volatile
 13223                           
 13224                           ;io.c: 430: break;
 13225  001958  D00F               	goto	i2l578
 13226  00195A                     i2l579:
 13227                           
 13228                           ;io.c: 432: LATC4=1;
 13229  00195A  888B               	bsf	3979,4,c	;volatile
 13230                           
 13231                           ;io.c: 433: break;
 13232  00195C  D00D               	goto	i2l578
 13233  00195E                     
 13234                           ;io.c: 435: bled_tmr0_tick = 0;
 13235  00195E  0E00               	movlw	0
 13236  001960  6E12               	movwf	_bled_tmr0_tick,c
 13237                           
 13238                           ;io.c: 437: }
 13239                           
 13240                           ;io.c: 436: break;
 13241  001962  D00A               	goto	i2l578
 13242  001964  5012               	movf	_bled_tmr0_tick,w,c
 13243                           
 13244                           ; Switch size 1, requested type "space"
 13245                           ; Number of cases is 3, Range of values is 1 to 20
 13246                           ; switch strategies available:
 13247                           ; Name         Instructions Cycles
 13248                           ; simple_byte           10     6 (average)
 13249                           ;	Chosen strategy is simple_byte
 13250  001966  0A01               	xorlw	1	; case 1
 13251  001968  B4D8               	btfsc	status,2,c
 13252  00196A  D7F5               	goto	i2l577
 13253  00196C  0A04               	xorlw	4	; case 5
 13254  00196E  B4D8               	btfsc	status,2,c
 13255  001970  D7F4               	goto	i2l579
 13256  001972  0A11               	xorlw	17	; case 20
 13257  001974  B4D8               	btfsc	status,2,c
 13258  001976  D7F3               	goto	i2l580
 13259  001978                     i2l578:
 13260                           
 13261                           ;io.c: 438: LATB3=0;
 13262  001978  968A               	bcf	3978,3,c	;volatile
 13263                           
 13264                           ;io.c: 439: gled_tmr0_tick = 0;
 13265  00197A  0E00               	movlw	0
 13266  00197C  6E13               	movwf	_gled_tmr0_tick,c
 13267                           
 13268                           ;io.c: 440: break;
 13269  00197E  0012               	return	
 13270  001980                     i2l583:
 13271                           
 13272                           ;io.c: 446: LATB3=0;
 13273  001980  968A               	bcf	3978,3,c	;volatile
 13274                           
 13275                           ;io.c: 447: break;
 13276  001982  D00F               	goto	i2l584
 13277  001984                     i2l585:
 13278                           
 13279                           ;io.c: 449: LATB3=1;
 13280  001984  868A               	bsf	3978,3,c	;volatile
 13281                           
 13282                           ;io.c: 450: break;
 13283  001986  D00D               	goto	i2l584
 13284  001988                     
 13285                           ;io.c: 452: gled_tmr0_tick = 0;
 13286  001988  0E00               	movlw	0
 13287  00198A  6E13               	movwf	_gled_tmr0_tick,c
 13288                           
 13289                           ;io.c: 454: }
 13290                           
 13291                           ;io.c: 453: break;
 13292  00198C  D00A               	goto	i2l584
 13293  00198E  5013               	movf	_gled_tmr0_tick,w,c
 13294                           
 13295                           ; Switch size 1, requested type "space"
 13296                           ; Number of cases is 3, Range of values is 1 to 20
 13297                           ; switch strategies available:
 13298                           ; Name         Instructions Cycles
 13299                           ; simple_byte           10     6 (average)
 13300                           ;	Chosen strategy is simple_byte
 13301  001990  0A01               	xorlw	1	; case 1
 13302  001992  B4D8               	btfsc	status,2,c
 13303  001994  D7F5               	goto	i2l583
 13304  001996  0A04               	xorlw	4	; case 5
 13305  001998  B4D8               	btfsc	status,2,c
 13306  00199A  D7F4               	goto	i2l585
 13307  00199C  0A11               	xorlw	17	; case 20
 13308  00199E  B4D8               	btfsc	status,2,c
 13309  0019A0  D7F3               	goto	i2l586
 13310  0019A2                     i2l584:
 13311                           
 13312                           ;io.c: 455: LATC4=0;
 13313  0019A2  988B               	bcf	3979,4,c	;volatile
 13314                           
 13315                           ;io.c: 456: bled_tmr0_tick = 0;
 13316  0019A4  0E00               	movlw	0
 13317  0019A6  6E12               	movwf	_bled_tmr0_tick,c
 13318                           
 13319                           ;io.c: 458: }
 13320                           
 13321                           ;io.c: 457: break;
 13322  0019A8  0012               	return	
 13323  0019AA                     i2l561:
 13324  0019AA  501E               	movf	_STATE,w,c
 13325                           
 13326                           ; Switch size 1, requested type "space"
 13327                           ; Number of cases is 4, Range of values is 0 to 4
 13328                           ; switch strategies available:
 13329                           ; Name         Instructions Cycles
 13330                           ; simple_byte           13     7 (average)
 13331                           ;	Chosen strategy is simple_byte
 13332  0019AC  0A00               	xorlw	0	; case 0
 13333  0019AE  B4D8               	btfsc	status,2,c
 13334  0019B0  D7A8               	goto	i2l562
 13335  0019B2  0A02               	xorlw	2	; case 2
 13336  0019B4  B4D8               	btfsc	status,2,c
 13337  0019B6  D7C4               	goto	i2l571
 13338  0019B8  0A01               	xorlw	1	; case 3
 13339  0019BA  B4D8               	btfsc	status,2,c
 13340  0019BC  D7D3               	goto	i2l576
 13341  0019BE  0A07               	xorlw	7	; case 4
 13342  0019C0  A4D8               	btfss	status,2,c
 13343  0019C2  0012               	return	
 13344  0019C4  D7E4               	goto	i2l582
 13345  0019C6                     __end_of_control_leds:
 13346                           	opt stack 0
 13347  0000                     pclatu	equ	0xFFB
 13348                           pclath	equ	0xFFA
 13349                           tblptru	equ	0xFF8
 13350                           tblptrh	equ	0xFF7
 13351                           tblptrl	equ	0xFF6
 13352                           tablat	equ	0xFF5
 13353                           prodh	equ	0xFF4
 13354                           prodl	equ	0xFF3
 13355                           intcon	equ	0xFF2
 13356                           postinc0	equ	0xFEE
 13357                           fsr0h	equ	0xFEA
 13358                           fsr0l	equ	0xFE9
 13359                           wreg	equ	0xFE8
 13360                           indf1	equ	0xFE7
 13361                           postinc1	equ	0xFE6
 13362                           postdec1	equ	0xFE5
 13363                           plusw1	equ	0xFE3
 13364                           fsr1h	equ	0xFE2
 13365                           fsr1l	equ	0xFE1
 13366                           indf2	equ	0xFDF
 13367                           postinc2	equ	0xFDE
 13368                           plusw2	equ	0xFDB
 13369                           fsr2h	equ	0xFDA
 13370                           fsr2l	equ	0xFD9
 13371                           status	equ	0xFD8
 13372                           pclatu	equ	0xFFB
 13373                           pclath	equ	0xFFA
 13374                           tblptru	equ	0xFF8
 13375                           tblptrh	equ	0xFF7
 13376                           tblptrl	equ	0xFF6
 13377                           tablat	equ	0xFF5
 13378                           prodh	equ	0xFF4
 13379                           prodl	equ	0xFF3
 13380                           intcon	equ	0xFF2
 13381                           postinc0	equ	0xFEE
 13382                           fsr0h	equ	0xFEA
 13383                           fsr0l	equ	0xFE9
 13384                           wreg	equ	0xFE8
 13385                           indf1	equ	0xFE7
 13386                           postinc1	equ	0xFE6
 13387                           postdec1	equ	0xFE5
 13388                           plusw1	equ	0xFE3
 13389                           fsr1h	equ	0xFE2
 13390                           fsr1l	equ	0xFE1
 13391                           indf2	equ	0xFDF
 13392                           postinc2	equ	0xFDE
 13393                           plusw2	equ	0xFDB
 13394                           fsr2h	equ	0xFDA
 13395                           fsr2l	equ	0xFD9
 13396                           status	equ	0xFD8
 13397                           
 13398                           	psect	rparam
 13399  0000                     pclatu	equ	0xFFB
 13400                           pclath	equ	0xFFA
 13401                           tblptru	equ	0xFF8
 13402                           tblptrh	equ	0xFF7
 13403                           tblptrl	equ	0xFF6
 13404                           tablat	equ	0xFF5
 13405                           prodh	equ	0xFF4
 13406                           prodl	equ	0xFF3
 13407                           intcon	equ	0xFF2
 13408                           postinc0	equ	0xFEE
 13409                           fsr0h	equ	0xFEA
 13410                           fsr0l	equ	0xFE9
 13411                           wreg	equ	0xFE8
 13412                           indf1	equ	0xFE7
 13413                           postinc1	equ	0xFE6
 13414                           postdec1	equ	0xFE5
 13415                           plusw1	equ	0xFE3
 13416                           fsr1h	equ	0xFE2
 13417                           fsr1l	equ	0xFE1
 13418                           indf2	equ	0xFDF
 13419                           postinc2	equ	0xFDE
 13420                           plusw2	equ	0xFDB
 13421                           fsr2h	equ	0xFDA
 13422                           fsr2l	equ	0xFD9
 13423                           status	equ	0xFD8
 13424                           
 13425                           	psect	temp
 13426  000045                     btemp:
 13427                           	opt stack 0
 13428  000045                     	ds	1
 13429  0000                     int$flags	set	btemp
 13430  0000                     wtemp6	set	btemp+1
 13431                           pclatu	equ	0xFFB
 13432                           pclath	equ	0xFFA
 13433                           tblptru	equ	0xFF8
 13434                           tblptrh	equ	0xFF7
 13435                           tblptrl	equ	0xFF6
 13436                           tablat	equ	0xFF5
 13437                           prodh	equ	0xFF4
 13438                           prodl	equ	0xFF3
 13439                           intcon	equ	0xFF2
 13440                           postinc0	equ	0xFEE
 13441                           fsr0h	equ	0xFEA
 13442                           fsr0l	equ	0xFE9
 13443                           wreg	equ	0xFE8
 13444                           indf1	equ	0xFE7
 13445                           postinc1	equ	0xFE6
 13446                           postdec1	equ	0xFE5
 13447                           plusw1	equ	0xFE3
 13448                           fsr1h	equ	0xFE2
 13449                           fsr1l	equ	0xFE1
 13450                           indf2	equ	0xFDF
 13451                           postinc2	equ	0xFDE
 13452                           plusw2	equ	0xFDB
 13453                           fsr2h	equ	0xFDA
 13454                           fsr2l	equ	0xFD9
 13455                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        271
    BSS         433
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     28      68
    BANK0           160     81     107
    BANK1           256      0     242
    BANK2           256      0     248
    BANK3           256      0     149
    BANK4           256    132     132
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    getIndexOfLearnedSensor@sensorID	PTR unsigned char  size(2) Largest target is 5
		 -> rx2_buf(COMRAM[5]), 

    add_sensor@sensorID	PTR unsigned char  size(2) Largest target is 5
		 -> rx2_buf(COMRAM[5]), 

    program_field@data_buf	PTR unsigned char  size(2) Largest target is 60
		 -> referenceBuf(BANK3[60]), 

    md_uart_write_str_ok@data	PTR unsigned char  size(2) Largest target is 3895
		 -> startup_ok@csq(BANK4[9]), startup_ok@cereg(BANK4[12]), startup_ok@creg(BANK4[11]), startup_ok@cpin(BANK4[11]), 
		 -> startup_ok@queryVersion(BANK4[10]), startup_ok@ledpattern(BANK4[12]), startup_ok@ledCfg(BANK4[16]), startup_ok@baud(BANK4[16]), 
		 -> startup_ok@cmee(BANK4[12]), startup_ok@ate(BANK4[7]), startup_ok@at(BANK4[5]), sms_buf(BANK2[40]), 
		 -> send_sms_ok@msgIndex(BANK0[3]), send_sms_ok@cmgs(BANK0[9]), ph_num(BANK1[9]), RAM(DATA[3895]), 
		 -> read_sms@cmgd(BANK0[9]), read_sms@msgIndex(BANK0[3]), read_sms@cmgr(BANK0[9]), read_sms@cmgl(BANK0[16]), 
		 -> start_sms_ok@cnmi(BANK0[14]), start_sms_ok@cpms(BANK0[25]), start_sms_ok@cmgf(BANK0[12]), 

    del_sensor@sensorID	PTR unsigned char  size(2) Largest target is 5
		 -> rx2_buf(COMRAM[5]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->i2_add_event
    i2_add_event->i2_ee_read

Critical Paths under _main in BANK0

    _load_ID->_ee_read
    _check_state->_listen_sms
    _listen_sms->_read_sms
    _start_sms_ok->_md_uart_write_str_ok
    _start_modem->_check_md_state
    _startup_ok->_parse_csq_ok
    _send_sms_ok->_md_uart_write_str_ok
    _read_sms->_parse_cmgr
    _parse_cmgr->_program_field
    _program_field->___awdiv
    _md_uart_write_str_ok->_md_uart_send
    _check_sms_timer->_ee_read_ascii_to_value
    _ee_read_ascii_to_value->_ee_read
    _del_sensor->_getIndexOfLearnedSensor
    _check_sensor->_getIndexOfLearnedSensor
    _add_sensor->_ee_write
    _send_uart_ack->_rf_uart_send
    _ee_write->_ee_read

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    _check_md_state->_startup_ok

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   56900
                        _check_state
                   _disable_md_rxint
               _event_queue_is_empty
                           _init_pic
                            _load_ID
                  _terminate_md_uart
                  _terminate_rf_uart
 ---------------------------------------------------------------------------------
 (1) _terminate_rf_uart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _terminate_md_uart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _load_ID                                              4     4      0    1100
                                              3 BANK0      4     4      0
                            _ee_read
 ---------------------------------------------------------------------------------
 (1) _init_pic                                             0     0      0       0
                        _clear_at_ok
                        _enable_ints
                          _init_uart
 ---------------------------------------------------------------------------------
 (2) _enable_ints                                          0     0      0       0
                       _start_timer0
 ---------------------------------------------------------------------------------
 (3) _start_timer0                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _event_queue_is_empty                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _disable_md_rxint                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _check_state                                          0     0      0   55800
                         _add_sensor
                        _check_alarm
                       _check_sensor
                        _check_super
                       _check_tamper
                         _check_test
                         _del_sensor
                         _listen_sms
                    _stop_sensor_tmr
 ---------------------------------------------------------------------------------
 (2) _stop_sensor_tmr                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _listen_sms                                           1     1      0   50064
                                             80 BANK0      1     1      0
                    _check_sms_timer
                           _read_sms
                        _send_sms_ok
                        _start_modem
                       _start_sms_ok
                    _start_sms_timer
 ---------------------------------------------------------------------------------
 (3) _start_sms_timer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _start_sms_ok                                        51    51      0    9867
                                              8 BANK0     51    51      0
                        _clear_at_ok
                       _init_md_uart
               _md_uart_write_str_ok
 ---------------------------------------------------------------------------------
 (3) _start_modem                                          2     2      0   12353
                                             17 BANK0      2     2      0
                     _check_md_state
                _start_md_boot_timer
 ---------------------------------------------------------------------------------
 (4) _start_md_boot_timer                                  0     0      0       0
                  _reload_tmr5_pt25s
 ---------------------------------------------------------------------------------
 (4) _check_md_state                                       1     1      0   12353
                                             16 BANK0      1     1      0
                       _disable_tmr5
                         _startup_ok
 ---------------------------------------------------------------------------------
 (5) _startup_ok                                         132   132      0   12254
                                              0 BANK4    132   132      0
                        _clear_at_ok
                       _init_md_uart
               _md_uart_write_str_ok
                     _parse_cereg_ok
                      _parse_creg_ok
                       _parse_csq_ok
 ---------------------------------------------------------------------------------
 (6) _parse_csq_ok                                        16    16      0     891
                                              0 BANK0     16    16      0
 ---------------------------------------------------------------------------------
 (6) _parse_creg_ok                                       12    12      0     554
                                              0 BANK0     12    12      0
 ---------------------------------------------------------------------------------
 (6) _parse_cereg_ok                                      13    13      0     619
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (3) _send_sms_ok                                         17    17      0   10065
                                              8 BANK0     17    17      0
                        _clear_at_ok
                       _init_md_uart
               _md_uart_write_str_ok
 ---------------------------------------------------------------------------------
 (3) _read_sms                                            39    39      0   16589
                                             41 BANK0     39    39      0
                        _clear_at_ok
                       _init_md_uart
               _md_uart_write_str_ok
                         _parse_cmgl
                         _parse_cmgr
 ---------------------------------------------------------------------------------
 (4) _parse_cmgr                                          24    24      0    6292
                                             17 BANK0     24    24      0
                            _ee_read
                      _program_field
 ---------------------------------------------------------------------------------
 (5) _program_field                                        9     6      3    3704
                                              8 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                           _ee_write
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     613
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     625
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (4) _parse_cmgl                                           8     8      0     359
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (4) _md_uart_write_str_ok                                 7     2      5    9747
                                              1 BANK0      7     2      5
                       _disable_tmr5
                    _enable_md_rxint
                       _md_uart_send
                  _reload_tmr5_pt25s
 ---------------------------------------------------------------------------------
 (5) _reload_tmr5_pt25s                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _md_uart_send                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _enable_md_rxint                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _disable_tmr5                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _clear_at_ok                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _check_sms_timer                                      1     1      0    1190
                                              6 BANK0      1     1      0
             _ee_read_ascii_to_value
                     _stop_sms_timer
 ---------------------------------------------------------------------------------
 (4) _stop_sms_timer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ee_read_ascii_to_value                               3     2      1    1156
                                              3 BANK0      3     2      1
                            _ee_read
 ---------------------------------------------------------------------------------
 (2) _del_sensor                                           5     3      2    2985
                                             11 BANK0      5     3      2
                            _ee_read
                           _ee_write
            _getIndexOfLearnedSensor
 ---------------------------------------------------------------------------------
 (2) _ee_read                                              3     2      1     871
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _check_test                                           1     1      0       0
                                              0 BANK0      1     1      0
                  _reload_tmr3_pt25s
 ---------------------------------------------------------------------------------
 (3) _reload_tmr3_pt25s                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _check_tamper                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _check_super                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _check_sensor                                         2     2      0    1074
                                             11 BANK0      2     2      0
                          _add_event
            _getIndexOfLearnedSensor
 ---------------------------------------------------------------------------------
 (3) _getIndexOfLearnedSensor                             10     8      2     545
                                              1 BANK0     10     8      2
                      _send_uart_ack
 ---------------------------------------------------------------------------------
 (3) _add_event                                            4     3      1     399
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _check_alarm                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _add_sensor                                          11     9      2    1677
                                              6 BANK0     11     9      2
                           _ee_write
                      _send_uart_ack
 ---------------------------------------------------------------------------------
 (4) _send_uart_ack                                        0     0      0      31
                          _init_uart
                       _rf_uart_send
 ---------------------------------------------------------------------------------
 (5) _rf_uart_send                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _init_uart                                            0     0      0       0
                       _init_md_uart
 ---------------------------------------------------------------------------------
 (3) _init_md_uart                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _ee_write                                             3     1      2     993
                                              3 BANK0      3     1      2
                            _ee_read (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _isr                                                 21    21      0     320
                                              7 COMRAM    21    21      0
                       _control_leds
                       _disable_tmr3
                      _reload_timer0
                   _start_sensor_tmr
                        i2_add_event
                 i2_disable_md_rxint
                     i2_disable_tmr5
                          i2_ee_read
                        i2_init_uart
                i2_reload_tmr5_pt25s
 ---------------------------------------------------------------------------------
 (9) i2_reload_tmr5_pt25s                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (9) i2_init_uart                                          0     0      0       0
                     i2_init_md_uart
 ---------------------------------------------------------------------------------
 (10) i2_init_md_uart                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) i2_ee_read                                            3     2      1      93
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (9) i2_disable_tmr5                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (9) i2_disable_md_rxint                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (9) i2_add_event                                          4     3      1     204
                                              3 COMRAM     4     3      1
                          i2_ee_read (ARG)
 ---------------------------------------------------------------------------------
 (9) _start_sensor_tmr                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _reload_timer0                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _disable_tmr3                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _control_leds                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _check_state
     _add_sensor
       _ee_write
         _ee_read (ARG)
       _send_uart_ack
         _init_uart
           _init_md_uart
         _rf_uart_send
     _check_alarm
     _check_sensor
       _add_event
       _getIndexOfLearnedSensor
         _send_uart_ack
           _init_uart
             _init_md_uart
           _rf_uart_send
     _check_super
     _check_tamper
     _check_test
       _reload_tmr3_pt25s
     _del_sensor
       _ee_read
       _ee_write
         _ee_read (ARG)
       _getIndexOfLearnedSensor
         _send_uart_ack
           _init_uart
             _init_md_uart
           _rf_uart_send
     _listen_sms
       _check_sms_timer
         _ee_read_ascii_to_value
           _ee_read
         _stop_sms_timer
       _read_sms
         _clear_at_ok
         _init_md_uart
         _md_uart_write_str_ok
           _disable_tmr5
           _enable_md_rxint
           _md_uart_send
           _reload_tmr5_pt25s
         _parse_cmgl
         _parse_cmgr
           _ee_read
           _program_field
             ___awdiv
             ___awmod
             _ee_write
               _ee_read (ARG)
       _send_sms_ok
         _clear_at_ok
         _init_md_uart
         _md_uart_write_str_ok
           _disable_tmr5
           _enable_md_rxint
           _md_uart_send
           _reload_tmr5_pt25s
       _start_modem
         _check_md_state
           _disable_tmr5
           _startup_ok
             _clear_at_ok
             _init_md_uart
             _md_uart_write_str_ok
               _disable_tmr5
               _enable_md_rxint
               _md_uart_send
               _reload_tmr5_pt25s
             _parse_cereg_ok
             _parse_creg_ok
             _parse_csq_ok
         _start_md_boot_timer
           _reload_tmr5_pt25s
       _start_sms_ok
         _clear_at_ok
         _init_md_uart
         _md_uart_write_str_ok
           _disable_tmr5
           _enable_md_rxint
           _md_uart_send
           _reload_tmr5_pt25s
       _start_sms_timer
     _stop_sensor_tmr
   _disable_md_rxint
   _event_queue_is_empty
   _init_pic
     _clear_at_ok
     _enable_ints
       _start_timer0
     _init_uart
       _init_md_uart
   _load_ID
     _ee_read
   _terminate_md_uart
   _terminate_rf_uart

 _isr (ROOT)
   _control_leds
   _disable_tmr3
   _reload_timer0
   _start_sensor_tmr
   i2_add_event
     i2_ee_read (ARG)
   i2_disable_md_rxint
   i2_disable_tmr5
   i2_ee_read
   i2_init_uart
     i2_init_md_uart
   i2_reload_tmr5_pt25s

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100     84      84      14       51.6%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      95      11       58.2%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      F8       9       96.9%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      F2       7       94.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     51      6B       5       66.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     1C      44       1       72.3%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     3B2      12        0.0%
DATA                 0      0     3B2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Sep 16 11:34:22 2018

                        ??_disable_tmr3 0024                          ??_disable_tmr5 0060  
                 __size_of_start_timer0 0014                   __size_of_start_sms_ok 010C  
                           __CFG_CP0$ON 000000                             __CFG_CP1$ON 000000  
                           __CFG_CP2$ON 000000                             __CFG_CP3$ON 000000  
                                    _ID 0300                             __CFG_CPB$ON 000000  
                                    _RD 007D30                             __CFG_CPD$ON 000000  
                 __end_of_parse_creg_ok 1656                                      _WR 007D31  
                          ___awdiv@sign 0065                  __end_of_parse_cereg_ok 1546  
                     ?_disable_md_rxint 0024                            _sms_tmr_tick 0018  
                                   l200 2236                                     l211 1B60  
                                   l212 1B78                                     l213 1B9E  
                                   l215 1BB4                                     l208 1BDC  
                                   l209 1B4A                                     l502 208C  
                                   l511 1DB0                                     l503 2044  
                                   l512 1D46                                     l504 2050  
                                   l513 1D58                                     l515 1DAE  
                                   l470 20C2                                     l471 20BE  
                                   l199 2202                                     l480 0E88  
                                   l473 20DA                                     l474 20EC  
                                   l483 0EE8                                     l475 20F0  
                                   l811 0D3C                                     l820 0E3A  
                                   l493 1DEC                                     l486 0F2E  
                                   l830 1B40                                     l822 0E4E  
                                   l814 0D4A                                     l495 1E14  
                                   l760 1824                                     l497 1E20  
                                   l841 0804                                     l761 1830  
                                   l818 0DCE                                     l754 17C4  
                                   l746 1770                                     l771 1F10  
                                   l851 0A50                                     l755 17FC  
                                   l772 1F1C                                     l828 1AA8  
                                   l860 0A94                                     l852 0A26  
                                   l756 17EE                                     l748 17A4  
                                   l765 1F30                                     l861 0A92  
                                   l845 09C6                                     l837 07A0  
                                   l749 1794                                     l854 0A54  
                                   l846 0940                                     l863 0ABC  
                                   l791 16F0                                     l768 1EEC  
                                   l856 0A64                                     l848 099E  
                                   l769 1EFC                                     l881 1260  
                                   l873 1216                                     l793 1722  
                                   l890 12CA                                     l882 12A0  
                                   l794 1742                                     l859 0A8C  
                                   l883 129E                                     l892 12D6  
                                   l789 16BE                                     l878 123A  
                                   l887 12BC                                     l799 175E  
                                   _GIE 007F97                  _ee_read_ascii_to_value 22D0  
                         _queue_end_ptr 0002                                     _at1 00C0  
                                   _at2 00BF                                     _at3 00BE  
                                   _at4 00BD                                     _at5 00BC  
                                   _at6 00BB                                     _at7 00BA  
                                   _at8 00B9                                     _at9 00B8  
                  __end_of_check_tamper 2564                             _start_modem 20FA  
                                   _isr 0008                    __end_of_check_sensor 21FA  
                        _check_md_state 1FBE                            ___awmod@sign 0065  
                    ??_disable_md_rxint 0060                                     prod 000FF3  
                        ?_program_field 0068                                     wreg 000FE8  
                            _TXSTA1bits 000FAC                              _TXSTA2bits 000F72  
                          __CFG_LVP$OFF 000000                             i2_add_event 1C94  
                                  l1101 0536                                    l1103 0568  
                                  l1112 0614                                    l1105 059A  
                                  l1114 0644                                    l1042 2010  
                                  l1203 22C8                                    l1123 073C  
                                  l1107 05CC                                    l1043 1FC6  
                                  l1116 0674                                    l1060 2140  
                                  l1117 068A                                    l1045 1FCA  
                                  l1118 06EA                                    l1047 1FF6  
                                  l1208 22F0                                    l1049 2002  
                                  l1500 1304                                    l1501 1346  
                                  l1093 046E                                    l1502 1310  
                                  l1095 04A0                                    l1520 13EA  
                                  l1512 1394                                    l1504 136A  
                                  l1273 1C0A                                    l1097 04D2  
                                  l1522 13FE                                    l1514 13AC  
                                  l1506 1376                                    l1530 1566  
                                  l1275 1C4C                                    l1099 0504  
                                  l1276 1C12                                    l1516 13B4  
                                  l1540 1436                                    l1277 1C4A  
                                  l1525 1412                                    l1517 1402  
                                  l1701 0B18                                    l1533 164A  
                                  l1518 13D6                                    l1550 101C  
                                  l1711 0B54                                    l1703 0B24  
                                  l1543 153A                                    l1535 164E  
                                  l1560 1156                                    l1721 0B90  
                                  l1713 0B60                                    l1705 0B30  
                                  l1545 153E                                    l1731 0BE2  
                                  l1723 0B9C                                    l1715 0B6C  
                                  l1707 0B3C                                    l1555 115A  
                                  l1732 0CB8                                    l1556 110E  
                                  l1733 0C2C                                    l1725 0BA8  
                                  l1717 0B78                                    l1709 0B48  
                                  l1565 1182                                    l1910 1E8E  
                                  l1734 0C36                                    l1558 113E  
                                  l1735 0C90                                    l1727 0BB4  
                                  l1719 0B84                                    l1920 1F6E  
                                  l1736 0C42                                    l1913 1EB6  
                                  l1729 0BC2                                    l1914 1EC0  
                                  l1906 1E68                                    l1922 1F84  
                                  l1915 1ECE                                    l1907 1E78  
                                  l1923 1F7C                                    l1691 0ADC  
                                  l1909 1E96                                    l1693 0AE8  
                                  l1926 1F9C                                    l1927 1FA6  
                                  l1919 1F62                                    l1695 0AF4  
                                  l1928 1FB4                                    l1697 0B00  
                                  l1699 0B0C                                    l7216 24DC  
                                  l7312 07FC                                    l8046 2048  
                                  l6456 24CE                                    l6632 155E  
                                  ?_isr 0024                                    l7374 0A5C  
                                  l6726 1014                                    l7472 1D50  
                                  l7296 0798                                    l7900 0E80  
                                  l7652 0DC6                                    l6676 142E  
                                  l7718 1232                                    l7930 0F26  
                                  l7974 1E18                                    l7958 1DE4  
                                  l7968 1E0C                                    _CFGS 007D36  
                                  u8010 1E9A                                    u7500 1384  
                                  u8070 1F88                                    u8401 03C8  
                                  u9210 0832                                    u7611 1550  
                                  u8411 03DA                                    u9140 1B44  
                                  u8421 03EC                                    u7710 1652  
                                  u9151 074A                                    u8431 03FE  
                                  u8351 036E                                    u9081 1A92  
                                  u7721 1420                                    u8441 0410  
                                  u8361 0380                                    u9330 0A58  
                                  u8451 0422                                    u8371 0392  
                                  u8461 0434                                    u8381 03A4  
                                  u7830 1542                                    u8391 03B6  
                                  u9520 1D98                                    u9360 0A82  
                                  u7920 10E6                                    u9600 2110  
                                  u7841 0FFE                                    u9530 1D9A  
                                  u8730 05E4                                    u9540 1DA0  
                                  u7870 103A                                    u9631 1660  
                                  u7960 1152                                    u9801 0CC6  
                                  u9641 1672                                    u9570 1DBE  
                                  u8930 06E2                                    u9811 0CD8  
                                  u9651 1684                                    u9821 0CF6  
                                  u9760 173A                                    u9921 1194  
                                  u9950 1222                                    _WREN 007D32  
                                  _at10 00B7                                    _at11 00B6  
                                  _at12 00B5                                    _main 21FA  
                    _buttonStillPressed 0001                                    fsr0h 000FEA  
                                  fsr1h 000FE2                                    fsr2h 000FDA  
                                  fsr0l 000FE9                                    indf1 000FE7  
                                  indf2 000FDF                                    fsr1l 000FE1  
                                  fsr2l 000FD9                                    btemp 0045  
                          _start_timer0 2498                           __CFG_BORV$190 000000  
                          _start_sms_ok 1656                                    prodh 000FF4  
                                  prodl 000FF3                                    start 0360  
                         __CFG_IESO$OFF 000000                __size_of_start_sms_timer 001A  
                    _ready_to_read_text 00C4                            ___param_bank 000000  
          __size_of_start_md_boot_timer 0006                                   ??_isr 002B  
                          _BAUDCON1bits 000FB8                         ?_parse_cereg_ok 0024  
                         ?_control_leds 0024                  __end_of_check_md_state 202E  
                                 ?_main 0024                         __end_of___awdiv 1ED8  
                                 _EEADR 000FA9                           ?_md_uart_send 0024  
                       __end_of___awmod 1FBE                                   _EEPGD 007D37  
                                 _CREN1 007D5C                                   u10010 1264  
                                 u10030 12AE                                   u10400 0F1C  
                                 u10500 1E4E                                   u10430 0FA6  
                                 _T0CON 000FD5                                   u10530 208A  
                       ___awdiv@divisor 0062                                   u10470 1E08  
                                 u10590 24C6                                   u10657 211E  
                                 u10667 20A8                                   u10677 20CA  
                                 _LATB3 007C53                                   _LATC4 007C5C  
                                 _RC1IE 007CED                                   _RC1IF 007CF5  
                                 _LATC7 007C5F                                   _RC2IE 007D1D  
                                 _T5CON 000F4E                                   i2l222 005C  
                                 i2l224 0086                                   i2l233 020E  
                                 i2l225 009A                                   i2l250 02F0  
                                 i2l242 026C                                   i2l234 021A  
                                 i2l235 022C                                   i2l227 00C4  
                                 i2l252 0314                                   i2l244 0290  
                                 i2l237 02F6                                   i2l229 0156  
                                 i2l246 02B4                                   i2l248 02DE  
                                 i2l561 19AA                                   i2l562 1902  
                                 i2l571 1940                                   i2l580 195E  
                                 i2l572 1934                                   i2l564 1918  
                                 i2l573 194E                                   i2l565 190A  
                                 i2l582 198E                                   i2l574 1938  
                                 i2l566 192C                                   i2l583 1980  
                                 i2l567 190E                                   i2l584 19A2  
                                 i2l576 1964                                   i2l568 1912  
                                 i2l585 1984                                   i2l577 1956  
                                 i2l586 1988                                   i2l578 1978  
                                 i2l579 195A                         ___awdiv@counter 0064  
                                 _TMR0H 000FD7                                   _TMR0L 000FD6  
                                 _TMR3H 000FB3                                   _TMR3L 000FB2  
                                 _TMR5H 000F50                                   _TMR5L 000F4F  
                                 _STATE 001E                                   _TRISA 000F92  
                                 _TRISB 000F93                                   _TRMT1 007D61  
                                 _TRISC 000F94                                   _TRMT2 007B91  
                                 _WPUB5 007B0D                         __end_of_ee_read 23F6  
                         __CFG_WRT0$OFF 000000                           __CFG_WRT1$OFF 000000  
                         __CFG_WRT2$OFF 000000                           __CFG_WRT3$OFF 000000  
                        __CFG_EBTR0$OFF 000000                          __CFG_FCMEN$OFF 000000  
                        __CFG_EBTR1$OFF 000000                          __CFG_EBTR2$OFF 000000  
                        __CFG_EBTR3$OFF 000000                           __CFG_WRTB$OFF 000000  
                  __size_of_check_alarm 0002                           __CFG_WRTC$OFF 000000  
                         __CFG_WRTD$OFF 000000                         _stop_sensor_tmr 2548  
                     _modem_network_err 000C                          __CFG_EBTRB$OFF 000000  
                       __end_of_load_ID 2096                    __size_of_check_state 00B0  
                    __CFG_MCLRE$INTMCLR 000000                    __size_of_check_super 0002  
                           i2_init_uart 238E                         _check_sms_timer 1ED8  
                       i2add_event@zone 0027                          __CFG_BOREN$OFF 000000  
                                 pclath 000FFA                                   tablat 000FF5  
                                 plusw1 000FE3                                   plusw2 000FDB  
                      add_sensor@i_1163 0070                                   status 000FD8  
                                 wtemp6 0046                          __CFG_HFOFST$ON 000000  
                       _sms_timer_ready 00C8                __end_of_start_sensor_tmr 2346  
                       _enable_md_rxint 24F4                          startup_ok@baud 040B  
                        startup_ok@cmee 042B                          startup_ok@creg 045A  
                        startup_ok@cpin 044F                          startup_ok@gprs 0400  
                    __size_ofi2_ee_read 001C                         __initialization 1836  
              parse_cmgr@field_num_ones 0083                parse_cmgr@field_num_tens 0082  
                          __end_of_main 223C                            i2add_event@i 002A  
                 __end_of_reload_timer0 2540                    __size_of_clear_at_ok 0034  
                        ??_control_leds 0024                 _getIndexOfLearnedSensor 1D2C  
                        ??_md_uart_send 0060                          _bled_tmr0_tick 0012  
                                ??_main 00B1                         ?_check_md_state 0024  
                       ??_program_field 006B                           __activetblptr 000002  
          __end_of_event_queue_is_empty 24CA                   parse_creg_ok@creg_rsp 0062  
                     _terminate_md_uart 2518                   del_sensor@sensorIndex 006E  
                     _terminate_rf_uart 2540                    __size_of_enable_ints 0026  
                    ?_terminate_md_uart 0024                    __end_of_disable_tmr3 24F4  
                  __end_of_disable_tmr5 250C                                  _EEADRH 000FAA  
                                _EEDATA 000FA8                                  _EECON2 000FA7  
                      ___awdiv@dividend 0060                                  _ANSELA 000F38  
                                _ANSELB 000F39                                  _ANSELC 000F3A  
                 __end_of_send_uart_ack 2414                                  _RC1REG 000FAE  
                                _RC2REG 000F74                      ?_terminate_rf_uart 0024  
                                _RC2STA 000F71                            ?_send_sms_ok 0024  
                                i2l1273 1CA4                                  i2l1275 1CE4  
                                i2l1276 1CAA                                  i2l1277 1CE2  
                         ?_init_md_uart 0024                                  _TMR0IE 007F95  
                                _SPBRG1 000FAF                                  _TMR0IF 007F92  
                                _SPBRG2 000F75                                  _TMR3IF 007D09  
                                _TMR5IF 007BF1                                  _TX1REG 000FAD  
                                _TX2REG 000F73                                  _TX2STA 000F72  
               parse_csq_ok@comma_index 006C                     ??_terminate_md_uart 0060  
                      __end_of_ee_write 22D0                     ??_terminate_rf_uart 0060  
                        __CFG_XINST$OFF 000000                 parse_csq_ok@colon_index 006D  
                             ??___awdiv 0064                          __CFG_STVREN$ON 000000  
                             ??___awmod 0064            __size_ofi2_reload_tmr5_pt25s 001A  
                                _endPtr 0003                   __size_of_check_tamper 0002  
                 __size_of_check_sensor 004A                                  _rx2pos 001A  
                      __end_of_init_pic 21B0           __size_of_md_uart_write_str_ok 013C  
                     ??_start_sms_timer 0060                                  _ph_num 01E9  
                             ??_ee_read 0061                                  clear_0 18BC  
                                clear_1 18C8                                  clear_2 18D4  
                                clear_3 18E0                                  clear_4 18EC  
                      ___awdiv@quotient 0066                        __end_of_read_sms 0E5C  
                       ___awmod@divisor 0062                         ___awmod@counter 0064  
               __end_of_stop_sensor_tmr 2550                        i2add_event@event 0029  
             __end_of_terminate_md_uart 2522                               ??_load_ID 0063  
                          __pdataCOMRAM 0040                 __end_of_check_sms_timer 1F4C  
             __end_of_terminate_rf_uart 2548                                  tblptrh 000FF7  
                                tblptrl 000FF6                                  tblptru 000FF8  
                     __end_ofi2_ee_read 2430                       program_field@page 006C  
                       startup_ok@F6830 01B4                         startup_ok@F6832 01AD  
                       startup_ok@F6840 011A                         startup_ok@F6842 015F  
                       startup_ok@F6850 013E                         startup_ok@F6834 0126  
                       startup_ok@F6836 02D8                         startup_ok@F6852 0172  
                       startup_ok@F6844 0154                         startup_ok@F6838 02C8  
                       startup_ok@F6846 0149                         startup_ok@F6848 010E  
                      ??i2_init_md_uart 0024                       program_field@size 006A  
                         parse_csq_ok@i 006E                          _md_timeout_cnt 0004  
               __end_of_enable_md_rxint 2500                          ??_init_md_uart 0060  
           __size_ofi2_disable_md_rxint 000A                              __accesstop 0060  
               __end_of__initialization 18F2                         __CFG_PBADEN$OFF 000000  
                    __size_of_add_event 009C                           ___rparam_used 000001  
                       startup_ok@cereg 0443                            _check_tamper 2562  
                          _check_sensor 21B0                          __pcstackCOMRAM 0024  
                          __pidataBANK1 19C6                            __pidataBANK2 2270  
                          __pidataBANK3 247E               ??_getIndexOfLearnedSensor 0063  
                         ?_parse_csq_ok 0024                 ?_ee_read_ascii_to_value 0063  
                            _add_sensor 0E5C                            startup_ok@at 047F  
                         ?_rf_uart_send 0024                            ?_start_modem 0024  
                          ?i2_add_event 0027                     _start_md_boot_timer 2550  
                           parse_cmgl@i 0067                         send_sms_ok@cmgs 0069  
                           parse_cmgr@i 0088                             parse_cmgr@j 0087  
                           parse_cmgr@k 007D                             parse_cmgr@l 0086  
                            __pbssBANK0 00B1                              __pbssBANK1 01C1  
                            __pbssBANK2 0200                              __pbssBANK3 0300  
                            _check_test 2096                         __CFG_PLLCFG$OFF 000000  
             __size_of_disable_md_rxint 000A                    __end_of_control_leds 19C6  
                  __end_of_md_uart_send 24D8                      __size_of_init_uart 0024  
                            _del_sensor 1DC2                    _event_queue_is_empty 24BC  
                    __CFG_CCP2MX$PORTC1 000000                              add_event@i 0063  
                      ??_parse_cereg_ok 0060                          ??_parse_csq_ok 0060  
        __end_of_ee_read_ascii_to_value 22FA                    ?_start_md_boot_timer 0024  
                    __CFG_CCP3MX$PORTB5 000000                      parse_cmgr@cmgr_rsp 0073  
                        ??_rf_uart_send 0060          parse_cereg_ok@registration_num 006B  
                      ?_stop_sensor_tmr 0024              __size_of_terminate_md_uart 000A  
                            _ledPattern 001D                    startup_ok@ledpattern 0437  
                 __size_of_disable_tmr3 000E                   __size_of_disable_tmr5 000C  
                     __end_of_add_event 1C94                         __CFG_WDTEN$SWON 000000  
                      ?_check_sms_timer 0024              __size_of_terminate_rf_uart 0008  
               __size_of_stop_sms_timer 0006                               ?_ee_write 0063  
                               _SPBRGH1 000FB0                                 _SPBRGH2 000F76  
               program_field@start_addr 006F         __end_of_getIndexOfLearnedSensor 1DC2  
                          ?i2_init_uart 0024                        ?_enable_md_rxint 0024  
                        add_event@event 0062                            _inButtonMenu 0015  
                __size_of_parse_creg_ok 0110                               ?_init_pic 0024  
                             ?_read_sms 0024                    __size_of_send_sms_ok 0154  
                 ?_event_queue_is_empty 0024                         __CFG_PWRTEN$OFF 000000  
            md_uart_write_str_ok@wantOk 0064                      del_sensor@sensorID 006B  
                               __Hparam 0000                       ?_start_sensor_tmr 0024  
                               __Lparam 0000               md_uart_write_str_ok@index 0067  
                 ??_start_md_boot_timer 0060                      ??_start_sensor_tmr 0024  
                               _t2_tick 0017                          program_field@i 006E  
                      ??_check_md_state 0070                                 _t4_tick 00B1  
                               ___awdiv 1E52                                 ___awmod 1F4C  
                          _disable_tmr3 24E6                            _disable_tmr5 2500  
                           ?_add_sensor 0066                                 _ee_read 23D6  
                               __pcinit 1836                                 __ramtop 1000  
                  __end_of_init_md_uart 238E                                 _mdRxBuf 0200  
                               __ptext0 21FA                                 __ptext1 2540  
                               __ptext2 2518                                 __ptext3 202E  
                               __ptext4 215A                                 __ptext5 22FA  
                               __ptext6 2498                                 __ptext7 24BC  
                               __ptext8 2522                                 __ptext9 1B48  
               __size_ofi2_disable_tmr5 000C                         _ledPatternCount 001C  
                         ??_check_alarm 0060                                 _load_ID 202E  
                               _rx2_buf 001F                               _T2CONbits 000FBA  
                        _numUartRetries 0044                            __size_of_isr 0358  
                             _T3CONbits 000FB1                       __end_of_init_uart 236A  
                      ___awmod@dividend 0060                              _receivedOK 000A  
                         ??_check_state 00B1               program_field@field_number 0070  
                         ??_check_super 0060                               _T4CONbits 000F51  
                             _T5CONbits 000F4E                           i2ee_read@addr 0024  
                         i2ee_read@data 0026                              ??_ee_write 0065  
                         i2ee_read@page 0025                              _parse_cmgl 1A88  
                            _parse_cmgr 0740                                 _waiting 0043  
                               _sms_buf 02A0                        rf_uart_send@data 0060  
                   i2_reload_tmr5_pt25s 2464                              _listen_sms 1762  
                  end_of_initialization 18F2                             ?_check_test 0024  
                               isr@temp 003F                     parse_csq_ok@csq_rsp 0064  
                         __Lmediumconst 0000                 md_uart_write_str_ok@pos 0066  
                            ??_init_pic 0060                              ??_read_sms 0089  
                       _start_sms_timer 2430                             ?_del_sensor 006B  
                         ??_clear_at_ok 0060                          parse_creg_ok@i 006B  
                               postdec1 000FE5                    ?i2_reload_tmr5_pt25s 0024  
                               postinc0 000FEE                                 postinc1 000FE6  
                               postinc2 000FDE                        _buttonPressCount 0014  
                         _parse_creg_ok 1546                               _PORTBbits 000F81  
                            _test_count 0019                            read_sms@cmgd 00A4  
                          read_sms@cmgl 008B                            read_sms@cmgr 009B  
                         ??_enable_ints 0060                   __end_of_program_field 0CBC  
                             _TRISBbits 000F93                      parse_creg_ok@F6836 0196  
                             _TRISCbits 000F94                    __size_of_start_modem 0060  
                 __size_of_control_leds 00C6                   __size_of_md_uart_send 000E  
                  __end_of_parse_csq_ok 1186                  add_sensor@dev_type_new 006A  
                   __end_of_check_alarm 2568            __end_of_md_uart_write_str_ok 1416  
                __size_of_reload_timer0 000A                     __end_of_check_state 1BF8  
                  __size_ofi2_add_event 0098                               i2_ee_read 2414  
                   __end_of_check_super 2566         getIndexOfLearnedSensor@sensorID 0061  
                      _disable_md_rxint 2522                              _startup_ok 0364  
                   __size_of_add_sensor 0198                        startup_ok@ledCfg 041B  
                ??_event_queue_is_empty 0060                    __end_of_rf_uart_send 24E6  
                      _modem_ready_data 000D                          add_sensor@zone 006D  
                 ??i2_reload_tmr5_pt25s 0024                  send_sms_ok@smsEndIndex 0076  
                    add_sensor@isUnique 006C                          ?_parse_creg_ok 0024  
                   __end_of_clear_at_ok 2270                        check_sensor@zone 006B  
                           _BAUDCONbits 000FB8  md_uart_write_str_ok@waitToSendMoreData 0065  
                         __pidataCOMRAM 255C                  __size_of_send_uart_ack 001E  
                   __size_of_check_test 0064                            _control_leds 1900  
                          _md_uart_send 24CA                      add_sensor@sensorID 0066  
                   start_initialization 1836                          _stop_sms_timer 2556  
                         startup_ok@ate 0478                           startup_ok@csq 046F  
                   __size_of_del_sensor 0090                             ?_parse_cmgl 0024  
                           ?_parse_cmgr 0024                             __end_of_isr 0360  
            __end_ofi2_disable_md_rxint 2536                             ?_listen_sms 0024  
               __end_of_start_sms_timer 244A                     __end_of_enable_ints 2320  
                   parse_cereg_ok@F6846 0169                              ?i2_ee_read 0024  
               parse_cereg_ok@cereg_rsp 0062                    __size_ofi2_init_uart 0024  
                         ?_start_timer0 0024                           ?_start_sms_ok 0024  
                      send_sms_ok@F6905 017B                        send_sms_ok@F6907 01BE  
                 __size_of_init_md_uart 0024                           _reload_timer0 2536  
                           __pdataBANK1 0100                             __pdataBANK2 02C8  
                           __pdataBANK3 037C                check_md_state@tempStatus 0070  
                        i2_disable_tmr5 250C                  __end_of_stop_sms_timer 255C  
                           _check_alarm 2566                   parse_cmgr@access_code 007E  
                           __pbssCOMRAM 0001                             _check_state 1B48  
                         __pcstackBANK0 0060                           __pcstackBANK4 0400  
                           _check_super 2564                               _add_event 1BF8  
                     __size_of_ee_write 0030                           _send_uart_ack 23F6  
                        ??_start_timer0 0060                          ??_start_sms_ok 0068  
                           ?_startup_ok 0024                            _init_md_uart 236A  
                     parse_cmgl@rec_msg 0062                               __pnvBANK0 00CA  
              ?_getIndexOfLearnedSensor 0061                       __size_of_init_pic 0056  
                           _clear_at_ok 223C                 __size_ofi2_init_md_uart 0024  
                     __size_of_read_sms 01A0      getIndexOfLearnedSensor@isLearnedIn 0068  
                             __pintcode 0008                         ??_parse_creg_ok 0060  
                   __size_of_parse_cmgl 00C0                     __size_of_parse_cmgr 0380  
                        ?_reload_timer0 0024                                ?___awdiv 0060  
                              ?___awmod 0060                  __end_ofi2_disable_tmr5 2518  
                          ??_add_sensor 0068                     __size_of_listen_sms 00D4  
                  _md_uart_write_str_ok 12DA                   send_sms_ok@isValidCmd 0075  
                parse_csq_ok@ones_digit 006B                                ?_ee_read 0060  
                      __CFG_PRICLKEN$ON 000000                         ?_stop_sms_timer 0024  
                              ?_load_ID 0024                             add_sensor@i 006F  
                              _BAUDCON2 000F70               __size_of_start_sensor_tmr 0026  
                         add_event@zone 0060                   __size_of_parse_csq_ok 0192  
                           _enable_ints 22FA                  parse_csq_ok@tens_digit 006F  
                            ?_add_event 0060                __size_of_stop_sensor_tmr 0008  
                             _init_uart 2346                   __size_of_rf_uart_send 000E  
                      ?_start_sms_timer 0024                           ??_send_sms_ok 0068  
                        ?_send_uart_ack 0024                          _waiting_carrot 0005  
                           ??i2_ee_read 0025                            ??_check_test 0060  
                          _receivedRESP 0008                __size_of_check_sms_timer 0074  
                              _IOCBbits 000F62                                _LATAbits 000F89  
              getIndexOfLearnedSensor@i 0069             __end_of_start_md_boot_timer 2556  
              getIndexOfLearnedSensor@j 006A                      __end_of_add_sensor 0FF4  
                          _ph_num_index 00B3                                _PIE1bits 000F9D  
                              _PIE2bits 000FA0                                _PIE3bits 000FA3  
                              _PIE5bits 000F7D                            ??_del_sensor 006D  
                              _MD_STATE 000F                                _PIR1bits 000F9E  
                              _PIR2bits 000FA1                                _PIR3bits 000FA4  
                              i2u713_40 013A                                _PIR5bits 000F7E  
                              i2u725_40 0246                                i2u726_40 024C  
              __size_of_enable_md_rxint 000C                        __CFG_WDTPS$32768 000000  
                     _reload_tmr3_pt25s 24AC                       _reload_tmr5_pt25s 244A  
                          _parse_csq_ok 0FF4                         ?i2_disable_tmr5 0024  
         parse_creg_ok@registration_num 006A                   ?_md_uart_write_str_ok 0061  
                    ?_reload_tmr3_pt25s 0024                      ?_reload_tmr5_pt25s 0024  
                          _referenceBuf 0340                __end_of_disable_md_rxint 252C  
                   __size_of_startup_ok 03DC                      __end_of_check_test 20FA  
                          _rf_uart_send 24D8                 __size_of_parse_cereg_ok 0130  
                   ??_reload_tmr3_pt25s 0060                         _modem_ready_sms 00C1  
                   ??_reload_tmr5_pt25s 0060                      __end_of_del_sensor 1E52  
                            ?_init_uart 0024                               copy_data0 184A  
                             copy_data1 186A                               copy_data2 188A  
                             copy_data3 18AA                             _md_timer_up 000E  
           check_sms_timer@sms_duration 0066                 check_sensor@sensorIndex 006C  
                          send_sms_ok@i 0078                ??_ee_read_ascii_to_value 0064  
           add_sensor@dev_type_existing 006B                           ?_check_tamper 0024  
                 send_sms_ok@poundCount 0077                           ?_check_sensor 0024  
                 program_field@data_buf 0068                     __end_of_send_sms_ok 12DA  
                              __Hrparam 0000                            ee_write@addr 0063  
             __end_of_reload_tmr3_pt25s 24BC                            ee_write@data 0064  
                       ??_reload_timer0 0024                            ee_write@page 0065  
             __end_of_reload_tmr5_pt25s 2464                                __Lrparam 0000  
                     __CFG_P2BMX$PORTB5 000000                   parse_cmgr@colon_index 007B  
               parse_cmgr@newline_index 007C                        __size_of___awdiv 0086  
                      __size_of___awmod 0072                             _event_queue 01C1  
                 program_field@max_size 006D                        __size_of_ee_read 0020  
                  __end_of_start_timer0 24AC                                _idEndPtr 00CA  
                  __end_of_start_sms_ok 1762                           ??_start_modem 0071  
                           _currentChar 0016                             ee_read@addr 0060  
                           ee_read@data 0062                          _gled_tmr0_tick 0013  
                      __size_of_load_ID 0068                             ee_read@page 0061  
               __size_of_check_md_state 0070                                _ee_write 22A0  
                          ??_parse_cmgl 0060                            ??_parse_cmgr 0071  
                         ??i2_add_event 0028                                __ptext10 2548  
                              __ptext11 1762                                __ptext20 1416  
                              __ptext12 2430                                __ptext21 1186  
                              __ptext13 1656                                __ptext30 24CA  
                              __ptext22 0CBC                                __ptext14 20FA  
                              __ptext31 24F4                                __ptext23 0740  
                              __ptext15 2550                         ??_send_uart_ack 0061  
                              __ptext40 24AC                                __ptext32 2500  
                              __ptext24 0AC0                                __ptext16 1FBE  
                              __ptext41 2562                                __ptext33 223C  
                              __ptext25 1F4C                                __ptext17 0364  
                              __ptext50 2346                                __ptext42 2564  
                              __ptext34 1ED8                                __ptext26 1E52  
                              __ptext18 0FF4                                __ptext51 236A  
                              __ptext43 21B0                                __ptext35 2556  
                              __ptext27 1A88                                __ptext19 1546  
                              __ptext60 1C94                                __ptext52 22A0  
                              __ptext44 1D2C                                __ptext36 22D0  
                              __ptext28 12DA                                __ptext61 2320  
                              __ptext45 1BF8                                __ptext37 1DC2  
                              __ptext29 244A                                __ptext62 2536  
                              __ptext54 2464                                __ptext46 2566  
                              __ptext38 23D6                                __ptext63 24E6  
                              __ptext55 238E                                __ptext47 0E5C  
                              __ptext39 2096                                __ptext64 1900  
                              __ptext56 23B2                                __ptext48 23F6  
                              __ptext57 2414                                __ptext49 24D8  
                              __ptext58 250C                                __ptext59 252C  
                           ??_add_event 0061                       parse_csq_ok@F6857 01A6  
                          ??_listen_sms 00B0                           __size_of_main 0042  
                              _init_pic 215A                                _read_sms 0CBC  
           __end_ofi2_reload_tmr5_pt25s 247E                          ??_check_tamper 0060  
                        ??_check_sensor 006B                             _receivedERR 0009  
                           _modem_awake 00C2                       ??_stop_sensor_tmr 0060  
           parse_cmgr@final_field_index 0085           __size_of_event_queue_is_empty 000E  
                        i2_init_md_uart 23B2                                _tmr3_cnt 0011  
                              _tmr5_cnt 001B                              _RC1STAbits 000FAB  
                     ??_check_sms_timer 0066                      i2_disable_md_rxint 252C  
                __size_of_program_field 01FC                                _timedOut 0007  
                              _retryCnt 00B4                  ??_md_uart_write_str_ok 0066  
                              int$flags 0045                          _receivedSensor 00C7  
                    __end_of_parse_cmgl 1B48                      __end_of_parse_cmgr 0AC0  
                           del_sensor@i 006F                             del_sensor@j 006D  
                   ?i2_disable_md_rxint 0024                      __end_of_listen_sms 1836  
                     ??_enable_md_rxint 0060                         parse_cmgl@F6856 01B9  
                          ?_check_alarm 0024                                load_ID@i 0065  
                              load_ID@j 0066                        _start_sensor_tmr 2320  
                            _INTCONbits 000FF2                          _modem_retrying 000B  
                      read_sms@msgIndex 00AD                         parse_cmgr@F6863 019E  
                          ?_check_state 0024                            ?_check_super 0024  
    getIndexOfLearnedSensor@sensorIndex 0067                          _sms_echo_ready 00C6  
              md_uart_write_str_ok@data 0061                md_uart_write_str_ok@len1 0063  
                startup_ok@queryVersion 0465                           ??i2_init_uart 0024  
                           ??_init_uart 0060                     __end_of_start_modem 215A  
                              intlevel2 0000                         parse_cereg_ok@i 006C  
                           _send_sms_ok 1186                    ??i2_disable_md_rxint 0024  
                          ??_startup_ok 0070                  __end_ofi2_init_md_uart 23D6  
                   __end_ofi2_add_event 1D2C                              _RCSTA1bits 000FAB  
                            _RCSTA2bits 000F71         __size_of_ee_read_ascii_to_value 002A  
                          ?_clear_at_ok 0024                            _waiting_uart 0006  
                            _OSCCONbits 000FD3              __size_of_reload_tmr3_pt25s 0010  
            parse_cmgr@final_field_term 0084                     send_sms_ok@msgIndex 0072  
            __size_of_reload_tmr5_pt25s 001A                       start_sms_ok@F6832 0132  
                     start_sms_ok@F6834 037C                       start_sms_ok@F6836 0100  
                      md_uart_send@data 0060                           ?_disable_tmr3 0024  
                         ?_disable_tmr5 0024                        ??_stop_sms_timer 0060  
      __size_of_getIndexOfLearnedSensor 0096                          _parse_cereg_ok 1416  
                           _smsMsgIndex 00C3                      __end_of_startup_ok 0740  
                          ?_enable_ints 0024                              _PREV_STATE 00C9  
                         read_sms@F6841 02E8                           read_sms@F6843 018D  
                         read_sms@F6845 0040                           read_sms@F6847 0184  
                         _program_field 0AC0                       __CFG_T3CMX$PORTC0 000000  
                       _add_sensor$1162 006E                        start_sms_ok@cmgf 008F  
                      start_sms_ok@cnmi 0081                        start_sms_ok@cpms 0068  
                     __CFG_FOSC$INTIO67 000000                         ?i2_init_md_uart 0024  
                         _sms_err_ready 00C5                     __end_ofi2_init_uart 23B2  
            ee_read_ascii_to_value@addr 0063              ee_read_ascii_to_value@data 0065  
                      ??i2_disable_tmr5 0024              ee_read_ascii_to_value@page 0064  
                         _SMS_TMR_STATE 0010  
