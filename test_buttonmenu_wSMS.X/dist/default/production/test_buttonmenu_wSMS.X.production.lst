

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Oct 16 16:47:09 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F26K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     9                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    18                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    19                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    21                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    22                           	psect	text0,global,reloc=2,class=CODE,delta=1
    23                           	psect	text1,global,reloc=2,class=CODE,delta=1
    24                           	psect	text2,global,reloc=2,class=CODE,delta=1
    25                           	psect	text3,global,reloc=2,class=CODE,delta=1
    26                           	psect	text4,global,reloc=2,class=CODE,delta=1
    27                           	psect	text5,global,reloc=2,class=CODE,delta=1
    28                           	psect	text6,global,reloc=2,class=CODE,delta=1
    29                           	psect	text7,global,reloc=2,class=CODE,delta=1
    30                           	psect	text8,global,reloc=2,class=CODE,delta=1
    31                           	psect	text9,global,reloc=2,class=CODE,delta=1
    32                           	psect	text10,global,reloc=2,class=CODE,delta=1
    33                           	psect	text11,global,reloc=2,class=CODE,delta=1
    34                           	psect	text12,global,reloc=2,class=CODE,delta=1
    35                           	psect	text13,global,reloc=2,class=CODE,delta=1
    36                           	psect	text14,global,reloc=2,class=CODE,delta=1
    37                           	psect	text15,global,reloc=2,class=CODE,delta=1
    38                           	psect	text16,global,reloc=2,class=CODE,delta=1
    39                           	psect	text17,global,reloc=2,class=CODE,delta=1
    40                           	psect	text18,global,reloc=2,class=CODE,delta=1
    41                           	psect	text19,global,reloc=2,class=CODE,delta=1
    42                           	psect	text20,global,reloc=2,class=CODE,delta=1
    43                           	psect	text21,global,reloc=2,class=CODE,delta=1
    44                           	psect	text22,global,reloc=2,class=CODE,delta=1
    45                           	psect	text23,global,reloc=2,class=CODE,delta=1
    46                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text26,global,reloc=2,class=CODE,delta=1
    49                           	psect	text27,global,reloc=2,class=CODE,delta=1
    50                           	psect	text28,global,reloc=2,class=CODE,delta=1
    51                           	psect	text29,global,reloc=2,class=CODE,delta=1
    52                           	psect	text30,global,reloc=2,class=CODE,delta=1
    53                           	psect	text31,global,reloc=2,class=CODE,delta=1
    54                           	psect	text32,global,reloc=2,class=CODE,delta=1
    55                           	psect	text33,global,reloc=2,class=CODE,delta=1
    56                           	psect	text34,global,reloc=2,class=CODE,delta=1
    57                           	psect	text35,global,reloc=2,class=CODE,delta=1
    58                           	psect	text36,global,reloc=2,class=CODE,delta=1
    59                           	psect	text37,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    61                           	psect	text39,global,reloc=2,class=CODE,delta=1
    62                           	psect	text40,global,reloc=2,class=CODE,delta=1
    63                           	psect	text41,global,reloc=2,class=CODE,delta=1
    64                           	psect	text42,global,reloc=2,class=CODE,delta=1
    65                           	psect	text43,global,reloc=2,class=CODE,delta=1
    66                           	psect	text44,global,reloc=2,class=CODE,delta=1
    67                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    68                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    69                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    70  0000                     
    71                           ; Version 1.45
    72                           ; Generated 16/11/2017 GMT
    73                           ; 
    74                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    75                           ; All rights reserved.
    76                           ; 
    77                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    78                           ; 
    79                           ; Redistribution and use in source and binary forms, with or without modification, are
    80                           ; permitted provided that the following conditions are met:
    81                           ; 
    82                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    83                           ;        conditions and the following disclaimer.
    84                           ; 
    85                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    86                           ;        of conditions and the following disclaimer in the documentation and/or other
    87                           ;        materials provided with the distribution.
    88                           ; 
    89                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    90                           ;        software without specific prior written permission.
    91                           ; 
    92                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    93                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    94                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    95                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    96                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    97                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    98                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    99                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   100                           ; 
   101                           ; 
   102                           ; Code-generator required, PIC18F26K22 Definitions
   103                           ; 
   104                           ; SFR Addresses
   105  0000                     
   106                           	psect	idataCOMRAM
   107  0030D2                     __pidataCOMRAM:
   108                           	opt stack 0
   109                           
   110                           ;initializer for _waiting
   111  0030D2  01                 	db	1
   112                           
   113                           ;initializer for _numUartRetries
   114  0030D3  0F                 	db	15
   115                           
   116                           	psect	idataBANK0
   117  0030C0                     __pidataBANK0:
   118                           	opt stack 0
   119                           
   120                           ;initializer for _VERSION
   121  0030C0  32                 	db	50
   122  0030C1  30                 	db	48
   123  0030C2  32                 	db	50
   124  0030C3  30                 	db	48
   125  0030C4  00                 	db	0
   126                           
   127                           ;initializer for _toggleLED
   128  0030C5  01                 	db	1
   129                           
   130                           	psect	idataBANK1
   131  0026EE                     __pidataBANK1:
   132                           	opt stack 0
   133                           
   134                           ;initializer for read_sms@F6841
   135  0026EE  41                 	db	65
   136  0026EF  54                 	db	84
   137  0026F0  2B                 	db	43
   138  0026F1  43                 	db	67
   139  0026F2  4D                 	db	77
   140  0026F3  47                 	db	71
   141  0026F4  4C                 	db	76
   142  0026F5  3D                 	db	61
   143  0026F6  22                 	db	34
   144  0026F7  41                 	db	65
   145  0026F8  4C                 	db	76
   146  0026F9  4C                 	db	76
   147  0026FA  22                 	db	34
   148  0026FB  0D                 	db	13
   149  0026FC  0A                 	db	10
   150  0026FD  00                 	db	0
   151                           
   152                           ;initializer for startup_ok@F6832
   153  0026FE  41                 	db	65
   154  0026FF  54                 	db	84
   155  002700  23                 	db	35
   156  002701  47                 	db	71
   157  002702  50                 	db	80
   158  002703  49                 	db	73
   159  002704  4F                 	db	79
   160  002705  3D                 	db	61
   161  002706  37                 	db	55
   162  002707  2C                 	db	44
   163  002708  30                 	db	48
   164  002709  2C                 	db	44
   165  00270A  32                 	db	50
   166  00270B  0D                 	db	13
   167  00270C  0A                 	db	10
   168  00270D  00                 	db	0
   169                           
   170                           ;initializer for startup_ok@F6830
   171  00270E  41                 	db	65
   172  00270F  54                 	db	84
   173  002710  2B                 	db	43
   174  002711  49                 	db	73
   175  002712  50                 	db	80
   176  002713  52                 	db	82
   177  002714  3D                 	db	61
   178  002715  31                 	db	49
   179  002716  31                 	db	49
   180  002717  35                 	db	53
   181  002718  32                 	db	50
   182  002719  30                 	db	48
   183  00271A  30                 	db	48
   184  00271B  0D                 	db	13
   185  00271C  0A                 	db	10
   186  00271D  00                 	db	0
   187                           
   188                           ;initializer for start_sms_ok@F6836
   189  00271E  41                 	db	65
   190  00271F  54                 	db	84
   191  002720  2B                 	db	43
   192  002721  43                 	db	67
   193  002722  4E                 	db	78
   194  002723  4D                 	db	77
   195  002724  49                 	db	73
   196  002725  3D                 	db	61
   197  002726  31                 	db	49
   198  002727  2C                 	db	44
   199  002728  31                 	db	49
   200  002729  0D                 	db	13
   201  00272A  0A                 	db	10
   202  00272B  00                 	db	0
   203                           
   204                           ;initializer for start_sms_ok@F6832
   205  00272C  41                 	db	65
   206  00272D  54                 	db	84
   207  00272E  2B                 	db	43
   208  00272F  43                 	db	67
   209  002730  4D                 	db	77
   210  002731  47                 	db	71
   211  002732  46                 	db	70
   212  002733  3D                 	db	61
   213  002734  31                 	db	49
   214  002735  0D                 	db	13
   215  002736  0A                 	db	10
   216  002737  00                 	db	0
   217                           
   218                           ;initializer for startup_ok@F6842
   219  002738  41                 	db	65
   220  002739  54                 	db	84
   221  00273A  2B                 	db	43
   222  00273B  43                 	db	67
   223  00273C  45                 	db	69
   224  00273D  52                 	db	82
   225  00273E  45                 	db	69
   226  00273F  47                 	db	71
   227  002740  3F                 	db	63
   228  002741  0D                 	db	13
   229  002742  0A                 	db	10
   230  002743  00                 	db	0
   231                           
   232                           ;initializer for startup_ok@F6834
   233  002744  41                 	db	65
   234  002745  54                 	db	84
   235  002746  23                 	db	35
   236  002747  53                 	db	83
   237  002748  4C                 	db	76
   238  002749  45                 	db	69
   239  00274A  44                 	db	68
   240  00274B  3D                 	db	61
   241  00274C  34                 	db	52
   242  00274D  0D                 	db	13
   243  00274E  0A                 	db	10
   244  00274F  00                 	db	0
   245                           
   246                           ;initializer for startup_ok@F6828
   247  002750  41                 	db	65
   248  002751  54                 	db	84
   249  002752  2B                 	db	43
   250  002753  43                 	db	67
   251  002754  4D                 	db	77
   252  002755  45                 	db	69
   253  002756  45                 	db	69
   254  002757  3D                 	db	61
   255  002758  32                 	db	50
   256  002759  0D                 	db	13
   257  00275A  0A                 	db	10
   258  00275B  00                 	db	0
   259                           
   260                           ;initializer for startup_ok@F6844
   261  00275C  41                 	db	65
   262  00275D  54                 	db	84
   263  00275E  23                 	db	35
   264  00275F  47                 	db	71
   265  002760  50                 	db	80
   266  002761  52                 	db	82
   267  002762  53                 	db	83
   268  002763  3F                 	db	63
   269  002764  0D                 	db	13
   270  002765  0A                 	db	10
   271  002766  00                 	db	0
   272                           
   273                           ;initializer for startup_ok@F6840
   274  002767  41                 	db	65
   275  002768  54                 	db	84
   276  002769  2B                 	db	43
   277  00276A  43                 	db	67
   278  00276B  52                 	db	82
   279  00276C  45                 	db	69
   280  00276D  47                 	db	71
   281  00276E  3F                 	db	63
   282  00276F  0D                 	db	13
   283  002770  0A                 	db	10
   284  002771  00                 	db	0
   285                           
   286                           ;initializer for startup_ok@F6838
   287  002772  41                 	db	65
   288  002773  54                 	db	84
   289  002774  2B                 	db	43
   290  002775  43                 	db	67
   291  002776  50                 	db	80
   292  002777  49                 	db	73
   293  002778  4E                 	db	78
   294  002779  3F                 	db	63
   295  00277A  0D                 	db	13
   296  00277B  0A                 	db	10
   297  00277C  00                 	db	0
   298                           
   299                           ;initializer for startup_ok@F6836
   300  00277D  41                 	db	65
   301  00277E  54                 	db	84
   302  00277F  23                 	db	35
   303  002780  43                 	db	67
   304  002781  47                 	db	71
   305  002782  4D                 	db	77
   306  002783  52                 	db	82
   307  002784  0D                 	db	13
   308  002785  0A                 	db	10
   309  002786  00                 	db	0
   310                           
   311                           ;initializer for send_sms_ok@F6857
   312  002787  41                 	db	65
   313  002788  54                 	db	84
   314  002789  2B                 	db	43
   315  00278A  43                 	db	67
   316  00278B  4D                 	db	77
   317  00278C  47                 	db	71
   318  00278D  53                 	db	83
   319  00278E  3D                 	db	61
   320  00278F  00                 	db	0
   321                           
   322                           ;initializer for read_sms@F6847
   323  002790  41                 	db	65
   324  002791  54                 	db	84
   325  002792  2B                 	db	43
   326  002793  43                 	db	67
   327  002794  4D                 	db	77
   328  002795  47                 	db	71
   329  002796  44                 	db	68
   330  002797  3D                 	db	61
   331  002798  00                 	db	0
   332                           
   333                           ;initializer for read_sms@F6843
   334  002799  41                 	db	65
   335  00279A  54                 	db	84
   336  00279B  2B                 	db	43
   337  00279C  43                 	db	67
   338  00279D  4D                 	db	77
   339  00279E  47                 	db	71
   340  00279F  52                 	db	82
   341  0027A0  3D                 	db	61
   342  0027A1  00                 	db	0
   343                           
   344                           ;initializer for parse_cereg_ok@F6846
   345  0027A2  2B                 	db	43
   346  0027A3  43                 	db	67
   347  0027A4  45                 	db	69
   348  0027A5  52                 	db	82
   349  0027A6  45                 	db	69
   350  0027A7  47                 	db	71
   351  0027A8  3A                 	db	58
   352  0027A9  20                 	db	32
   353  0027AA  00                 	db	0
   354                           
   355                           ;initializer for startup_ok@F6846
   356  0027AB  41                 	db	65
   357  0027AC  54                 	db	84
   358  0027AD  2B                 	db	43
   359  0027AE  43                 	db	67
   360  0027AF  53                 	db	83
   361  0027B0  51                 	db	81
   362  0027B1  0D                 	db	13
   363  0027B2  0A                 	db	10
   364  0027B3  00                 	db	0
   365                           
   366                           ;initializer for parse_cmgr@F6877
   367  0027B4  2B                 	db	43
   368  0027B5  43                 	db	67
   369  0027B6  4D                 	db	77
   370  0027B7  47                 	db	71
   371  0027B8  52                 	db	82
   372  0027B9  3A                 	db	58
   373  0027BA  20                 	db	32
   374  0027BB  00                 	db	0
   375                           
   376                           ;initializer for parse_creg_ok@F6836
   377  0027BC  2B                 	db	43
   378  0027BD  43                 	db	67
   379  0027BE  52                 	db	82
   380  0027BF  45                 	db	69
   381  0027C0  47                 	db	71
   382  0027C1  3A                 	db	58
   383  0027C2  20                 	db	32
   384  0027C3  00                 	db	0
   385                           
   386                           ;initializer for parse_csq_ok@F6857
   387  0027C4  2B                 	db	43
   388  0027C5  43                 	db	67
   389  0027C6  53                 	db	83
   390  0027C7  51                 	db	81
   391  0027C8  3A                 	db	58
   392  0027C9  20                 	db	32
   393  0027CA  00                 	db	0
   394                           
   395                           ;initializer for startup_ok@F6826
   396  0027CB  41                 	db	65
   397  0027CC  54                 	db	84
   398  0027CD  45                 	db	69
   399  0027CE  31                 	db	49
   400  0027CF  0D                 	db	13
   401  0027D0  0A                 	db	10
   402  0027D1  00                 	db	0
   403                           
   404                           ;initializer for parse_cmgl@F6870
   405  0027D2  52                 	db	82
   406  0027D3  45                 	db	69
   407  0027D4  43                 	db	67
   408  0027D5  20                 	db	32
   409  0027D6  00                 	db	0
   410                           
   411                           ;initializer for startup_ok@F6824
   412  0027D7  41                 	db	65
   413  0027D8  54                 	db	84
   414  0027D9  0D                 	db	13
   415  0027DA  0A                 	db	10
   416  0027DB  00                 	db	0
   417                           
   418                           ;initializer for send_sms_ok@F6859
   419  0027DC  0D                 	db	13
   420  0027DD  0A                 	db	10
   421  0027DE  00                 	db	0
   422                           
   423                           ;initializer for read_sms@F6845
   424  0027DF  0D                 	db	13
   425  0027E0  0A                 	db	10
   426  0027E1  00                 	db	0
   427                           
   428                           	psect	idataBANK2
   429  003002                     __pidataBANK2:
   430                           	opt stack 0
   431                           
   432                           ;initializer for start_sms_ok@F6834
   433  003002  41                 	db	65
   434  003003  54                 	db	84
   435  003004  2B                 	db	43
   436  003005  43                 	db	67
   437  003006  50                 	db	80
   438  003007  4D                 	db	77
   439  003008  53                 	db	83
   440  003009  3D                 	db	61
   441  00300A  22                 	db	34
   442  00300B  4D                 	db	77
   443  00300C  45                 	db	69
   444  00300D  22                 	db	34
   445  00300E  2C                 	db	44
   446  00300F  22                 	db	34
   447  003010  4D                 	db	77
   448  003011  45                 	db	69
   449  003012  22                 	db	34
   450  003013  2C                 	db	44
   451  003014  22                 	db	34
   452  003015  4D                 	db	77
   453  003016  45                 	db	69
   454  003017  22                 	db	34
   455  003018  0D                 	db	13
   456  003019  0A                 	db	10
   457  00301A  00                 	db	0
   458                           
   459                           	psect	smallconst
   460  001000                     __psmallconst:
   461                           	opt stack 0
   462  001000  00                 	db	0
   463  001001                     _default_ACCT:
   464                           	opt stack 0
   465  001001  30                 	db	48
   466  001002  30                 	db	48
   467  001003  30                 	db	48
   468  001004  30                 	db	48
   469  001005  23                 	db	35
   470  001006  00                 	db	0
   471  001007                     __end_of_default_ACCT:
   472                           	opt stack 0
   473  001007                     _default_ACCESS_CODE:
   474                           	opt stack 0
   475  001007  31                 	db	49
   476  001008  31                 	db	49
   477  001009  31                 	db	49
   478  00100A  31                 	db	49
   479  00100B  23                 	db	35
   480  00100C  00                 	db	0
   481  00100D                     __end_of_default_ACCESS_CODE:
   482                           	opt stack 0
   483  00100D                     _default_LINE_CARD:
   484                           	opt stack 0
   485  00100D  31                 	db	49
   486  00100E  23                 	db	35
   487  00100F  00                 	db	0
   488  001010                     __end_of_default_LINE_CARD:
   489                           	opt stack 0
   490  001010                     _default_PORT4:
   491                           	opt stack 0
   492  001010  07E4               	dw	2020
   493  001012                     __end_of_default_PORT4:
   494                           	opt stack 0
   495  001012                     _default_PORT3:
   496                           	opt stack 0
   497  001012  07E4               	dw	2020
   498  001014                     __end_of_default_PORT3:
   499                           	opt stack 0
   500  001014                     _default_PORT2:
   501                           	opt stack 0
   502  001014  07E4               	dw	2020
   503  001016                     __end_of_default_PORT2:
   504                           	opt stack 0
   505  001016                     _default_PORT1:
   506                           	opt stack 0
   507  001016  07E4               	dw	2020
   508  001018                     __end_of_default_PORT1:
   509                           	opt stack 0
   510  001018                     _default_IP4:
   511                           	opt stack 0
   512  001018  23                 	db	35
   513  001019  00                 	db	0
   514  00101A                     __end_of_default_IP4:
   515                           	opt stack 0
   516  00101A                     _default_IP3:
   517                           	opt stack 0
   518  00101A  23                 	db	35
   519  00101B  00                 	db	0
   520  00101C                     __end_of_default_IP3:
   521                           	opt stack 0
   522  00101C                     _default_IP2:
   523                           	opt stack 0
   524  00101C  23                 	db	35
   525  00101D  00                 	db	0
   526  00101E                     __end_of_default_IP2:
   527                           	opt stack 0
   528  00101E                     _default_IP1:
   529                           	opt stack 0
   530  00101E  23                 	db	35
   531  00101F  00                 	db	0
   532  001020                     __end_of_default_IP1:
   533                           	opt stack 0
   534  001020                     _default_APN:
   535                           	opt stack 0
   536  001020  23                 	db	35
   537  001021  00                 	db	0
   538  001022                     __end_of_default_APN:
   539                           	opt stack 0
   540  001022                     _default_ENCRYPTION:
   541                           	opt stack 0
   542  001022  01                 	db	1
   543  001023                     __end_of_default_ENCRYPTION:
   544                           	opt stack 0
   545  001023                     _default_SMS_WAIT_TIME:
   546                           	opt stack 0
   547  001023  0A                 	db	10
   548  001024                     __end_of_default_SMS_WAIT_TIME:
   549                           	opt stack 0
   550  001024                     _default_RETRY:
   551                           	opt stack 0
   552  001024  0A                 	db	10
   553  001025                     __end_of_default_RETRY:
   554                           	opt stack 0
   555  001025                     _default_CYCLE:
   556                           	opt stack 0
   557  001025  02                 	db	2
   558  001026                     __end_of_default_CYCLE:
   559                           	opt stack 0
   560  001026                     _default_TP_PIN:
   561                           	opt stack 0
   562  001026  00                 	db	0
   563  001027                     __end_of_default_TP_PIN:
   564                           	opt stack 0
   565  001027                     _default_ZONE2:
   566                           	opt stack 0
   567  001027  14                 	db	20
   568  001028                     __end_of_default_ZONE2:
   569                           	opt stack 0
   570  001028                     _default_ZONE1:
   571                           	opt stack 0
   572  001028  01                 	db	1
   573  001029                     __end_of_default_ZONE1:
   574                           	opt stack 0
   575  001029                     _default_SERVER_ACK_TIME:
   576                           	opt stack 0
   577  001029  2D                 	db	45
   578  00102A                     __end_of_default_SERVER_ACK_TIME:
   579                           	opt stack 0
   580  00102A                     _default_TEST_FREQ:
   581                           	opt stack 0
   582  00102A  0F                 	db	15
   583  00102B                     __end_of_default_TEST_FREQ:
   584                           	opt stack 0
   585  00102B                     _default_PROGRAM_ACK:
   586                           	opt stack 0
   587  00102B  01                 	db	1
   588  00102C                     __end_of_default_PROGRAM_ACK:
   589                           	opt stack 0
   590  0000                     _TMR5L	set	3919
   591  0000                     _TMR5H	set	3920
   592  0000                     _T5CON	set	3918
   593  0000                     _T5CONbits	set	3918
   594  0000                     _T4CONbits	set	3921
   595  0000                     _TMR4	set	3923
   596  0000                     _ANSELB	set	3897
   597  0000                     _ANSELC	set	3898
   598  0000                     _ANSELA	set	3896
   599  0000                     _INTCON	set	4082
   600  0000                     _T2CONbits	set	4026
   601  0000                     _PIE5bits	set	3965
   602  0000                     _EECON2	set	4007
   603  0000                     _EEDATA	set	4008
   604  0000                     _EEADR	set	4009
   605  0000                     _EEADRH	set	4010
   606  0000                     _RC1REG	set	4014
   607  0000                     _TX1REG	set	4013
   608  0000                     _T3CON	set	4017
   609  0000                     _PIE1bits	set	3997
   610  0000                     _PIR1bits	set	3998
   611  0000                     _RCSTA1bits	set	4011
   612  0000                     _RC1STAbits	set	4011
   613  0000                     _SPBRG1	set	4015
   614  0000                     _SPBRGH1	set	4016
   615  0000                     _TXSTA1bits	set	4012
   616  0000                     _BAUDCONbits	set	4024
   617  0000                     _BAUDCON1bits	set	4024
   618  0000                     _TMR0H	set	4055
   619  0000                     _TMR0L	set	4054
   620  0000                     _T0CON	set	4053
   621  0000                     _TMR3L	set	4018
   622  0000                     _TMR3H	set	4019
   623  0000                     _PIR2bits	set	4001
   624  0000                     _PIE2bits	set	4000
   625  0000                     _T3CONbits	set	4017
   626  0000                     _INTCONbits	set	4082
   627  0000                     _PORTBbits	set	3969
   628  0000                     _LATCbits	set	3979
   629  0000                     _TRISCbits	set	3988
   630  0000                     _PORTCbits	set	3970
   631  0000                     _TRISBbits	set	3987
   632  0000                     _LATBbits	set	3978
   633  0000                     _LATAbits	set	3977
   634  0000                     _TRISAbits	set	3986
   635  0000                     _OSCCONbits	set	4051
   636  0000                     _PIR5bits	set	3966
   637  0000                     _WR	set	32049
   638  0000                     _WREN	set	32050
   639  0000                     _RD	set	32048
   640  0000                     _EEPGD	set	32055
   641  0000                     _CFGS	set	32054
   642  0000                     _RC1IF	set	31989
   643  0000                     _TRMT1	set	32097
   644  0000                     _CREN1	set	32092
   645  0000                     _GIE	set	32663
   646  0000                     _TMR0IE	set	32661
   647  0000                     _TMR3IF	set	32009
   648  0000                     _TMR0IF	set	32658
   649                           
   650                           ; #config settings
   651  00102C  00                 	db	0	; dummy byte at the end
   652  0000                     
   653                           	psect	cinit
   654  00297C                     __pcinit:
   655                           	opt stack 0
   656  00297C                     start_initialization:
   657                           	opt stack 0
   658  00297C                     __initialization:
   659                           	opt stack 0
   660                           
   661                           ; Initialize objects allocated to BANK2 (25 bytes)
   662                           ; load TBLPTR registers with __pidataBANK2
   663  00297C  0E02               	movlw	low __pidataBANK2
   664  00297E  6EF6               	movwf	tblptrl,c
   665  002980  0E30               	movlw	high __pidataBANK2
   666  002982  6EF7               	movwf	tblptrh,c
   667  002984  0E00               	movlw	low (__pidataBANK2 shr (0+16))
   668  002986  6EF8               	movwf	tblptru,c
   669  002988  EE02  F0C8         	lfsr	0,__pdataBANK2
   670  00298C  EE10 F019          	lfsr	1,25
   671  002990                     copy_data0:
   672  002990  0009               	tblrd		*+
   673  002992  CFF5 FFEE          	movff	tablat,postinc0
   674  002996  50E5               	movf	postdec1,w,c
   675  002998  50E1               	movf	fsr1l,w,c
   676  00299A  E1FA               	bnz	copy_data0
   677                           
   678                           ; Initialize objects allocated to BANK1 (244 bytes)
   679                           ; load TBLPTR registers with __pidataBANK1
   680  00299C  0EEE               	movlw	low __pidataBANK1
   681  00299E  6EF6               	movwf	tblptrl,c
   682  0029A0  0E26               	movlw	high __pidataBANK1
   683  0029A2  6EF7               	movwf	tblptrh,c
   684  0029A4  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   685  0029A6  6EF8               	movwf	tblptru,c
   686  0029A8  EE01  F000         	lfsr	0,__pdataBANK1
   687  0029AC  EE10 F0F4          	lfsr	1,244
   688  0029B0                     copy_data1:
   689  0029B0  0009               	tblrd		*+
   690  0029B2  CFF5 FFEE          	movff	tablat,postinc0
   691  0029B6  50E5               	movf	postdec1,w,c
   692  0029B8  50E1               	movf	fsr1l,w,c
   693  0029BA  E1FA               	bnz	copy_data1
   694                           
   695                           ; Initialize objects allocated to BANK0 (6 bytes)
   696                           ; load TBLPTR registers with __pidataBANK0
   697  0029BC  0EC0               	movlw	low __pidataBANK0
   698  0029BE  6EF6               	movwf	tblptrl,c
   699  0029C0  0E30               	movlw	high __pidataBANK0
   700  0029C2  6EF7               	movwf	tblptrh,c
   701  0029C4  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   702  0029C6  6EF8               	movwf	tblptru,c
   703  0029C8  EE00  F0FA         	lfsr	0,__pdataBANK0
   704  0029CC  EE10 F006          	lfsr	1,6
   705  0029D0                     copy_data2:
   706  0029D0  0009               	tblrd		*+
   707  0029D2  CFF5 FFEE          	movff	tablat,postinc0
   708  0029D6  50E5               	movf	postdec1,w,c
   709  0029D8  50E1               	movf	fsr1l,w,c
   710  0029DA  E1FA               	bnz	copy_data2
   711                           
   712                           ; Initialize objects allocated to COMRAM (2 bytes)
   713                           ; load TBLPTR registers with __pidataCOMRAM
   714  0029DC  0ED2               	movlw	low __pidataCOMRAM
   715  0029DE  6EF6               	movwf	tblptrl,c
   716  0029E0  0E30               	movlw	high __pidataCOMRAM
   717  0029E2  6EF7               	movwf	tblptrh,c
   718  0029E4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   719  0029E6  6EF8               	movwf	tblptru,c
   720  0029E8  0009               	tblrd		*+	;fetch initializer
   721  0029EA  CFF5 F049          	movff	tablat,__pdataCOMRAM
   722  0029EE  0009               	tblrd		*+	;fetch initializer
   723  0029F0  CFF5 F04A          	movff	tablat,__pdataCOMRAM+1
   724                           
   725                           ; Clear objects allocated to BANK3 (160 bytes)
   726  0029F4  EE03  F000         	lfsr	0,__pbssBANK3
   727  0029F8  0EA0               	movlw	160
   728  0029FA                     clear_0:
   729  0029FA  6AEE               	clrf	postinc0,c
   730  0029FC  06E8               	decf	wreg,f,c
   731  0029FE  E1FD               	bnz	clear_0
   732                           
   733                           ; Clear objects allocated to BANK2 (200 bytes)
   734  002A00  EE02  F000         	lfsr	0,__pbssBANK2
   735  002A04  0EC8               	movlw	200
   736  002A06                     clear_1:
   737  002A06  6AEE               	clrf	postinc0,c
   738  002A08  06E8               	decf	wreg,f,c
   739  002A0A  E1FD               	bnz	clear_1
   740                           
   741                           ; Clear objects allocated to BANK1 (9 bytes)
   742  002A0C  EE01  F0F4         	lfsr	0,__pbssBANK1
   743  002A10  0E09               	movlw	9
   744  002A12                     clear_2:
   745  002A12  6AEE               	clrf	postinc0,c
   746  002A14  06E8               	decf	wreg,f,c
   747  002A16  E1FD               	bnz	clear_2
   748                           
   749                           ; Clear objects allocated to BANK0 (20 bytes)
   750  002A18  EE00  F0E6         	lfsr	0,__pbssBANK0
   751  002A1C  0E14               	movlw	20
   752  002A1E                     clear_3:
   753  002A1E  6AEE               	clrf	postinc0,c
   754  002A20  06E8               	decf	wreg,f,c
   755  002A22  E1FD               	bnz	clear_3
   756                           
   757                           ; Clear objects allocated to COMRAM (26 bytes)
   758  002A24  EE00  F02F         	lfsr	0,__pbssCOMRAM
   759  002A28  0E1A               	movlw	26
   760  002A2A                     clear_4:
   761  002A2A  6AEE               	clrf	postinc0,c
   762  002A2C  06E8               	decf	wreg,f,c
   763  002A2E  E1FD               	bnz	clear_4
   764  002A30                     end_of_initialization:
   765                           	opt stack 0
   766  002A30                     __end_of__initialization:
   767                           	opt stack 0
   768  002A30  904B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   769  002A32  924B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   770  002A34  0E00               	movlw	low (__Lmediumconst shr (0+16))
   771  002A36  6EF8               	movwf	tblptru,c
   772  002A38  0100               	movlb	0
   773  002A3A  EF34  F018         	goto	_main	;jump to C main() function
   774                           tblptru	equ	0xFF8
   775                           tblptrh	equ	0xFF7
   776                           tblptrl	equ	0xFF6
   777                           tablat	equ	0xFF5
   778                           postinc0	equ	0xFEE
   779                           wreg	equ	0xFE8
   780                           postdec1	equ	0xFE5
   781                           fsr1l	equ	0xFE1
   782                           
   783                           	psect	bssCOMRAM
   784  00002F                     __pbssCOMRAM:
   785                           	opt stack 0
   786  00002F                     _buttonStillPressed:
   787                           	opt stack 0
   788  00002F                     	ds	1
   789  000030                     _prev_state:
   790                           	opt stack 0
   791  000030                     	ds	1
   792  000031                     _state:
   793                           	opt stack 0
   794  000031                     	ds	1
   795  000032                     _md_timeout_cnt:
   796                           	opt stack 0
   797  000032                     	ds	1
   798  000033                     _retryCnt:
   799                           	opt stack 0
   800  000033                     	ds	1
   801  000034                     _waiting_carrot:
   802                           	opt stack 0
   803  000034                     	ds	1
   804  000035                     _waiting_uart:
   805                           	opt stack 0
   806  000035                     	ds	1
   807  000036                     _timedOut:
   808                           	opt stack 0
   809  000036                     	ds	1
   810  000037                     _receivedERR:
   811                           	opt stack 0
   812  000037                     	ds	1
   813  000038                     _receivedOK:
   814                           	opt stack 0
   815  000038                     	ds	1
   816  000039                     _modem_ready_sms:
   817                           	opt stack 0
   818  000039                     	ds	1
   819  00003A                     _modem_awake:
   820                           	opt stack 0
   821  00003A                     	ds	1
   822  00003B                     _MD_STATE:
   823                           	opt stack 0
   824  00003B                     	ds	1
   825  00003C                     _SMS_TMR_STATE:
   826                           	opt stack 0
   827  00003C                     	ds	1
   828  00003D                     _currentChar:
   829                           	opt stack 0
   830  00003D                     	ds	1
   831  00003E                     _tmr5_cnt:
   832                           	opt stack 0
   833  00003E                     	ds	1
   834  00003F                     _tmr3_cnt:
   835                           	opt stack 0
   836  00003F                     	ds	1
   837  000040                     _bled_tmr0_tick:
   838                           	opt stack 0
   839  000040                     	ds	1
   840  000041                     _gled_tmr0_tick:
   841                           	opt stack 0
   842  000041                     	ds	1
   843  000042                     _buttonPressCount:
   844                           	opt stack 0
   845  000042                     	ds	1
   846  000043                     _t2_tick:
   847                           	opt stack 0
   848  000043                     	ds	1
   849  000044                     _sms_tmr_tick:
   850                           	opt stack 0
   851  000044                     	ds	1
   852  000045                     _inButtonMenu:
   853                           	opt stack 0
   854  000045                     	ds	1
   855  000046                     _sms_err_ready:
   856                           	opt stack 0
   857  000046                     	ds	1
   858  000047                     _sms_echo_ready:
   859                           	opt stack 0
   860  000047                     	ds	1
   861  000048                     _sms_timer_ready:
   862                           	opt stack 0
   863  000048                     	ds	1
   864                           tblptru	equ	0xFF8
   865                           tblptrh	equ	0xFF7
   866                           tblptrl	equ	0xFF6
   867                           tablat	equ	0xFF5
   868                           postinc0	equ	0xFEE
   869                           wreg	equ	0xFE8
   870                           postdec1	equ	0xFE5
   871                           fsr1l	equ	0xFE1
   872                           
   873                           	psect	dataCOMRAM
   874  000049                     __pdataCOMRAM:
   875                           	opt stack 0
   876  000049                     _waiting:
   877                           	opt stack 0
   878  000049                     	ds	1
   879  00004A                     _numUartRetries:
   880                           	opt stack 0
   881  00004A                     	ds	1
   882                           tblptru	equ	0xFF8
   883                           tblptrh	equ	0xFF7
   884                           tblptrl	equ	0xFF6
   885                           tablat	equ	0xFF5
   886                           postinc0	equ	0xFEE
   887                           wreg	equ	0xFE8
   888                           postdec1	equ	0xFE5
   889                           fsr1l	equ	0xFE1
   890                           
   891                           	psect	bssBANK0
   892  0000E6                     __pbssBANK0:
   893                           	opt stack 0
   894  0000E6                     _t4_tick:
   895                           	opt stack 0
   896  0000E6                     	ds	2
   897  0000E8                     _saveINTCONbits:
   898                           	opt stack 0
   899  0000E8                     	ds	1
   900  0000E9                     _ph_num_index:
   901                           	opt stack 0
   902  0000E9                     	ds	1
   903  0000EA                     _at12:
   904                           	opt stack 0
   905  0000EA                     	ds	1
   906  0000EB                     _at11:
   907                           	opt stack 0
   908  0000EB                     	ds	1
   909  0000EC                     _at10:
   910                           	opt stack 0
   911  0000EC                     	ds	1
   912  0000ED                     _at9:
   913                           	opt stack 0
   914  0000ED                     	ds	1
   915  0000EE                     _at8:
   916                           	opt stack 0
   917  0000EE                     	ds	1
   918  0000EF                     _at7:
   919                           	opt stack 0
   920  0000EF                     	ds	1
   921  0000F0                     _at6:
   922                           	opt stack 0
   923  0000F0                     	ds	1
   924  0000F1                     _at5:
   925                           	opt stack 0
   926  0000F1                     	ds	1
   927  0000F2                     _at4:
   928                           	opt stack 0
   929  0000F2                     	ds	1
   930  0000F3                     _at3:
   931                           	opt stack 0
   932  0000F3                     	ds	1
   933  0000F4                     _at2:
   934                           	opt stack 0
   935  0000F4                     	ds	1
   936  0000F5                     _at1:
   937                           	opt stack 0
   938  0000F5                     	ds	1
   939  0000F6                     _receivedRESP:
   940                           	opt stack 0
   941  0000F6                     	ds	1
   942  0000F7                     _smsMsgIndex:
   943                           	opt stack 0
   944  0000F7                     	ds	1
   945  0000F8                     _ready_to_read_text:
   946                           	opt stack 0
   947  0000F8                     	ds	1
   948  0000F9                     _receivedSensor:
   949                           	opt stack 0
   950  0000F9                     	ds	1
   951                           tblptru	equ	0xFF8
   952                           tblptrh	equ	0xFF7
   953                           tblptrl	equ	0xFF6
   954                           tablat	equ	0xFF5
   955                           postinc0	equ	0xFEE
   956                           wreg	equ	0xFE8
   957                           postdec1	equ	0xFE5
   958                           fsr1l	equ	0xFE1
   959                           
   960                           	psect	dataBANK0
   961  0000FA                     __pdataBANK0:
   962                           	opt stack 0
   963  0000FA                     _VERSION:
   964                           	opt stack 0
   965  0000FA                     	ds	5
   966  0000FF                     _toggleLED:
   967                           	opt stack 0
   968  0000FF                     	ds	1
   969                           tblptru	equ	0xFF8
   970                           tblptrh	equ	0xFF7
   971                           tblptrl	equ	0xFF6
   972                           tablat	equ	0xFF5
   973                           postinc0	equ	0xFEE
   974                           wreg	equ	0xFE8
   975                           postdec1	equ	0xFE5
   976                           fsr1l	equ	0xFE1
   977                           
   978                           	psect	bssBANK1
   979  0001F4                     __pbssBANK1:
   980                           	opt stack 0
   981  0001F4                     _ph_num:
   982                           	opt stack 0
   983  0001F4                     	ds	9
   984                           tblptru	equ	0xFF8
   985                           tblptrh	equ	0xFF7
   986                           tblptrl	equ	0xFF6
   987                           tablat	equ	0xFF5
   988                           postinc0	equ	0xFEE
   989                           wreg	equ	0xFE8
   990                           postdec1	equ	0xFE5
   991                           fsr1l	equ	0xFE1
   992                           
   993                           	psect	dataBANK1
   994  000100                     __pdataBANK1:
   995                           	opt stack 0
   996  000100                     read_sms@F6841:
   997                           	opt stack 0
   998  000100                     	ds	16
   999  000110                     startup_ok@F6832:
  1000                           	opt stack 0
  1001  000110                     	ds	16
  1002  000120                     startup_ok@F6830:
  1003                           	opt stack 0
  1004  000120                     	ds	16
  1005  000130                     start_sms_ok@F6836:
  1006                           	opt stack 0
  1007  000130                     	ds	14
  1008  00013E                     start_sms_ok@F6832:
  1009                           	opt stack 0
  1010  00013E                     	ds	12
  1011  00014A                     startup_ok@F6842:
  1012                           	opt stack 0
  1013  00014A                     	ds	12
  1014  000156                     startup_ok@F6834:
  1015                           	opt stack 0
  1016  000156                     	ds	12
  1017  000162                     startup_ok@F6828:
  1018                           	opt stack 0
  1019  000162                     	ds	12
  1020  00016E                     startup_ok@F6844:
  1021                           	opt stack 0
  1022  00016E                     	ds	11
  1023  000179                     startup_ok@F6840:
  1024                           	opt stack 0
  1025  000179                     	ds	11
  1026  000184                     startup_ok@F6838:
  1027                           	opt stack 0
  1028  000184                     	ds	11
  1029  00018F                     startup_ok@F6836:
  1030                           	opt stack 0
  1031  00018F                     	ds	10
  1032  000199                     send_sms_ok@F6857:
  1033                           	opt stack 0
  1034  000199                     	ds	9
  1035  0001A2                     read_sms@F6847:
  1036                           	opt stack 0
  1037  0001A2                     	ds	9
  1038  0001AB                     read_sms@F6843:
  1039                           	opt stack 0
  1040  0001AB                     	ds	9
  1041  0001B4                     parse_cereg_ok@F6846:
  1042                           	opt stack 0
  1043  0001B4                     	ds	9
  1044  0001BD                     startup_ok@F6846:
  1045                           	opt stack 0
  1046  0001BD                     	ds	9
  1047  0001C6                     parse_cmgr@F6877:
  1048                           	opt stack 0
  1049  0001C6                     	ds	8
  1050  0001CE                     parse_creg_ok@F6836:
  1051                           	opt stack 0
  1052  0001CE                     	ds	8
  1053  0001D6                     parse_csq_ok@F6857:
  1054                           	opt stack 0
  1055  0001D6                     	ds	7
  1056  0001DD                     startup_ok@F6826:
  1057                           	opt stack 0
  1058  0001DD                     	ds	7
  1059  0001E4                     parse_cmgl@F6870:
  1060                           	opt stack 0
  1061  0001E4                     	ds	5
  1062  0001E9                     startup_ok@F6824:
  1063                           	opt stack 0
  1064  0001E9                     	ds	5
  1065  0001EE                     send_sms_ok@F6859:
  1066                           	opt stack 0
  1067  0001EE                     	ds	3
  1068  0001F1                     read_sms@F6845:
  1069                           	opt stack 0
  1070  0001F1                     	ds	3
  1071                           tblptru	equ	0xFF8
  1072                           tblptrh	equ	0xFF7
  1073                           tblptrl	equ	0xFF6
  1074                           tablat	equ	0xFF5
  1075                           postinc0	equ	0xFEE
  1076                           wreg	equ	0xFE8
  1077                           postdec1	equ	0xFE5
  1078                           fsr1l	equ	0xFE1
  1079                           
  1080                           	psect	bssBANK2
  1081  000200                     __pbssBANK2:
  1082                           	opt stack 0
  1083  000200                     _mdRxBuf:
  1084                           	opt stack 0
  1085  000200                     	ds	160
  1086  0002A0                     _sms_buf:
  1087                           	opt stack 0
  1088  0002A0                     	ds	40
  1089                           tblptru	equ	0xFF8
  1090                           tblptrh	equ	0xFF7
  1091                           tblptrl	equ	0xFF6
  1092                           tablat	equ	0xFF5
  1093                           postinc0	equ	0xFEE
  1094                           wreg	equ	0xFE8
  1095                           postdec1	equ	0xFE5
  1096                           fsr1l	equ	0xFE1
  1097                           
  1098                           	psect	dataBANK2
  1099  0002C8                     __pdataBANK2:
  1100                           	opt stack 0
  1101  0002C8                     start_sms_ok@F6834:
  1102                           	opt stack 0
  1103  0002C8                     	ds	25
  1104                           tblptru	equ	0xFF8
  1105                           tblptrh	equ	0xFF7
  1106                           tblptrl	equ	0xFF6
  1107                           tablat	equ	0xFF5
  1108                           postinc0	equ	0xFEE
  1109                           wreg	equ	0xFE8
  1110                           postdec1	equ	0xFE5
  1111                           fsr1l	equ	0xFE1
  1112                           
  1113                           	psect	bssBANK3
  1114  000300                     __pbssBANK3:
  1115                           	opt stack 0
  1116  000300                     _returnStr:
  1117                           	opt stack 0
  1118  000300                     	ds	100
  1119  000364                     _referenceBuf:
  1120                           	opt stack 0
  1121  000364                     	ds	60
  1122                           tblptru	equ	0xFF8
  1123                           tblptrh	equ	0xFF7
  1124                           tblptrl	equ	0xFF6
  1125                           tablat	equ	0xFF5
  1126                           postinc0	equ	0xFEE
  1127                           wreg	equ	0xFE8
  1128                           postdec1	equ	0xFE5
  1129                           fsr1l	equ	0xFE1
  1130                           
  1131                           	psect	cstackBANK0
  1132  000060                     __pcstackBANK0:
  1133                           	opt stack 0
  1134  000060                     parse_cmgr@cmgr_rsp:
  1135                           	opt stack 0
  1136  000060                     startup_ok@gprs:
  1137                           	opt stack 0
  1138  000060                     start_sms_ok@cpms:
  1139                           	opt stack 0
  1140                           
  1141                           ; 25 bytes @ 0x0
  1142  000060                     	ds	8
  1143  000068                     parse_cmgr@colon_index:
  1144                           	opt stack 0
  1145                           
  1146                           ; 1 bytes @ 0x8
  1147  000068                     	ds	1
  1148  000069                     parse_cmgr@newline_index:
  1149                           	opt stack 0
  1150                           
  1151                           ; 1 bytes @ 0x9
  1152  000069                     	ds	1
  1153  00006A                     parse_cmgr@k:
  1154                           	opt stack 0
  1155                           
  1156                           ; 1 bytes @ 0xA
  1157  00006A                     	ds	1
  1158  00006B                     parse_cmgr@access_code:
  1159                           	opt stack 0
  1160  00006B                     startup_ok@baud:
  1161                           	opt stack 0
  1162                           
  1163                           ; 16 bytes @ 0xB
  1164  00006B                     	ds	4
  1165  00006F                     parse_cmgr@field_num_tens:
  1166                           	opt stack 0
  1167                           
  1168                           ; 1 bytes @ 0xF
  1169  00006F                     	ds	1
  1170  000070                     parse_cmgr@field_num_ones:
  1171                           	opt stack 0
  1172                           
  1173                           ; 1 bytes @ 0x10
  1174  000070                     	ds	1
  1175  000071                     parse_cmgr@final_field_term:
  1176                           	opt stack 0
  1177                           
  1178                           ; 1 bytes @ 0x11
  1179  000071                     	ds	1
  1180  000072                     parse_cmgr@final_field_index:
  1181                           	opt stack 0
  1182                           
  1183                           ; 1 bytes @ 0x12
  1184  000072                     	ds	1
  1185  000073                     parse_cmgr@l:
  1186                           	opt stack 0
  1187                           
  1188                           ; 1 bytes @ 0x13
  1189  000073                     	ds	1
  1190  000074                     parse_cmgr@j:
  1191                           	opt stack 0
  1192                           
  1193                           ; 1 bytes @ 0x14
  1194  000074                     	ds	1
  1195  000075                     parse_cmgr@i:
  1196                           	opt stack 0
  1197                           
  1198                           ; 1 bytes @ 0x15
  1199  000075                     	ds	1
  1200  000076                     read_sms@cmgl:
  1201                           	opt stack 0
  1202                           
  1203                           ; 16 bytes @ 0x16
  1204  000076                     	ds	3
  1205  000079                     start_sms_ok@cnmi:
  1206                           	opt stack 0
  1207                           
  1208                           ; 14 bytes @ 0x19
  1209  000079                     	ds	2
  1210  00007B                     startup_ok@ledCfg:
  1211                           	opt stack 0
  1212                           
  1213                           ; 16 bytes @ 0x1B
  1214  00007B                     	ds	11
  1215  000086                     read_sms@cmgr:
  1216                           	opt stack 0
  1217                           
  1218                           ; 9 bytes @ 0x26
  1219  000086                     	ds	1
  1220  000087                     start_sms_ok@cmgf:
  1221                           	opt stack 0
  1222                           
  1223                           ; 12 bytes @ 0x27
  1224  000087                     	ds	4
  1225  00008B                     startup_ok@cmee:
  1226                           	opt stack 0
  1227                           
  1228                           ; 12 bytes @ 0x2B
  1229  00008B                     	ds	4
  1230  00008F                     read_sms@cmgd:
  1231                           	opt stack 0
  1232                           
  1233                           ; 9 bytes @ 0x2F
  1234  00008F                     	ds	8
  1235  000097                     startup_ok@ledpattern:
  1236                           	opt stack 0
  1237                           
  1238                           ; 12 bytes @ 0x37
  1239  000097                     	ds	1
  1240  000098                     read_sms@msgIndex:
  1241                           	opt stack 0
  1242                           
  1243                           ; 3 bytes @ 0x38
  1244  000098                     	ds	11
  1245  0000A3                     startup_ok@cereg:
  1246                           	opt stack 0
  1247                           
  1248                           ; 12 bytes @ 0x43
  1249  0000A3                     	ds	12
  1250  0000AF                     startup_ok@cpin:
  1251                           	opt stack 0
  1252                           
  1253                           ; 11 bytes @ 0x4F
  1254  0000AF                     	ds	11
  1255  0000BA                     startup_ok@creg:
  1256                           	opt stack 0
  1257                           
  1258                           ; 11 bytes @ 0x5A
  1259  0000BA                     	ds	11
  1260  0000C5                     startup_ok@queryVersion:
  1261                           	opt stack 0
  1262                           
  1263                           ; 10 bytes @ 0x65
  1264  0000C5                     	ds	10
  1265  0000CF                     startup_ok@csq:
  1266                           	opt stack 0
  1267                           
  1268                           ; 9 bytes @ 0x6F
  1269  0000CF                     	ds	9
  1270  0000D8                     startup_ok@ate:
  1271                           	opt stack 0
  1272                           
  1273                           ; 7 bytes @ 0x78
  1274  0000D8                     	ds	7
  1275  0000DF                     startup_ok@at:
  1276                           	opt stack 0
  1277                           
  1278                           ; 5 bytes @ 0x7F
  1279  0000DF                     	ds	5
  1280  0000E4                     listen_sms@start_ok:
  1281                           	opt stack 0
  1282                           
  1283                           ; 1 bytes @ 0x84
  1284  0000E4                     	ds	1
  1285  0000E5                     ??_check_state:
  1286                           
  1287                           ; 1 bytes @ 0x85
  1288  0000E5                     	ds	1
  1289                           tblptru	equ	0xFF8
  1290                           tblptrh	equ	0xFF7
  1291                           tblptrl	equ	0xFF6
  1292                           tablat	equ	0xFF5
  1293                           postinc0	equ	0xFEE
  1294                           wreg	equ	0xFE8
  1295                           postdec1	equ	0xFE5
  1296                           fsr1l	equ	0xFE1
  1297                           
  1298                           	psect	cstackCOMRAM
  1299  000001                     __pcstackCOMRAM:
  1300                           	opt stack 0
  1301  000001                     ??_check_state_timeout:
  1302  000001                     
  1303                           ; 1 bytes @ 0x0
  1304  000001                     	ds	2
  1305  000003                     ??_isr:
  1306                           
  1307                           ; 1 bytes @ 0x2
  1308  000003                     	ds	18
  1309  000015                     ??_parse_creg_ok:
  1310  000015                     ??_parse_cereg_ok:
  1311  000015                     ??_parse_csq_ok:
  1312  000015                     ??_parse_cmgl:
  1313  000015                     ?___awdiv:
  1314                           	opt stack 0
  1315  000015                     ?___awmod:
  1316                           	opt stack 0
  1317  000015                     md_uart_send@data:
  1318                           	opt stack 0
  1319  000015                     ee_read@addr:
  1320                           	opt stack 0
  1321  000015                     ee_write@addr:
  1322                           	opt stack 0
  1323  000015                     ___awdiv@dividend:
  1324                           	opt stack 0
  1325  000015                     ___awmod@dividend:
  1326                           	opt stack 0
  1327                           
  1328                           ; 2 bytes @ 0x14
  1329  000015                     	ds	1
  1330  000016                     ee_read@page:
  1331                           	opt stack 0
  1332  000016                     ee_write@data:
  1333                           	opt stack 0
  1334  000016                     md_uart_write_str_ok@data:
  1335                           	opt stack 0
  1336                           
  1337                           ; 2 bytes @ 0x15
  1338  000016                     	ds	1
  1339  000017                     ee_read@data:
  1340                           	opt stack 0
  1341  000017                     ee_write@page:
  1342                           	opt stack 0
  1343  000017                     ___awdiv@divisor:
  1344                           	opt stack 0
  1345  000017                     ___awmod@divisor:
  1346                           	opt stack 0
  1347  000017                     parse_cmgl@rec_msg:
  1348                           	opt stack 0
  1349  000017                     parse_creg_ok@creg_rsp:
  1350                           	opt stack 0
  1351  000017                     parse_cereg_ok@cereg_rsp:
  1352                           	opt stack 0
  1353                           
  1354                           ; 9 bytes @ 0x16
  1355  000017                     	ds	1
  1356  000018                     ??_write_defaults:
  1357  000018                     md_uart_write_str_ok@len1:
  1358                           	opt stack 0
  1359  000018                     ee_read_ascii_to_value@addr:
  1360                           	opt stack 0
  1361                           
  1362                           ; 1 bytes @ 0x17
  1363  000018                     	ds	1
  1364  000019                     md_uart_write_str_ok@wantOk:
  1365                           	opt stack 0
  1366  000019                     ee_read_ascii_to_value@page:
  1367                           	opt stack 0
  1368  000019                     ___awdiv@counter:
  1369                           	opt stack 0
  1370  000019                     ___awmod@counter:
  1371                           	opt stack 0
  1372  000019                     parse_csq_ok@csq_rsp:
  1373                           	opt stack 0
  1374                           
  1375                           ; 7 bytes @ 0x18
  1376  000019                     	ds	1
  1377  00001A                     md_uart_write_str_ok@waitToSendMoreData:
  1378                           	opt stack 0
  1379  00001A                     ee_read_ascii_to_value@data:
  1380                           	opt stack 0
  1381  00001A                     write_defaults@page:
  1382                           	opt stack 0
  1383  00001A                     ___awdiv@sign:
  1384                           	opt stack 0
  1385  00001A                     ___awmod@sign:
  1386                           	opt stack 0
  1387                           
  1388                           ; 1 bytes @ 0x19
  1389  00001A                     	ds	1
  1390  00001B                     md_uart_write_str_ok@pos:
  1391                           	opt stack 0
  1392  00001B                     check_sms_timer@sms_duration:
  1393                           	opt stack 0
  1394  00001B                     write_defaults@addr:
  1395                           	opt stack 0
  1396  00001B                     ___awdiv@quotient:
  1397                           	opt stack 0
  1398                           
  1399                           ; 2 bytes @ 0x1A
  1400  00001B                     	ds	1
  1401  00001C                     md_uart_write_str_ok@index:
  1402                           	opt stack 0
  1403  00001C                     parse_cmgl@i:
  1404                           	opt stack 0
  1405  00001C                     write_defaults@temp:
  1406                           	opt stack 0
  1407                           
  1408                           ; 1 bytes @ 0x1B
  1409  00001C                     	ds	1
  1410  00001D                     write_defaults@i:
  1411                           	opt stack 0
  1412  00001D                     program_field@data_buf:
  1413                           	opt stack 0
  1414                           
  1415                           ; 2 bytes @ 0x1C
  1416  00001D                     	ds	1
  1417  00001E                     send_sms_ok@cmgs:
  1418                           	opt stack 0
  1419                           
  1420                           ; 9 bytes @ 0x1D
  1421  00001E                     	ds	1
  1422  00001F                     parse_creg_ok@registration_num:
  1423                           	opt stack 0
  1424  00001F                     program_field@size:
  1425                           	opt stack 0
  1426                           
  1427                           ; 1 bytes @ 0x1E
  1428  00001F                     	ds	1
  1429  000020                     ??_program_field:
  1430  000020                     parse_creg_ok@i:
  1431                           	opt stack 0
  1432  000020                     parse_cereg_ok@registration_num:
  1433                           	opt stack 0
  1434  000020                     parse_csq_ok@ones_digit:
  1435                           	opt stack 0
  1436                           
  1437                           ; 1 bytes @ 0x1F
  1438  000020                     	ds	1
  1439  000021                     parse_cereg_ok@i:
  1440                           	opt stack 0
  1441  000021                     parse_csq_ok@comma_index:
  1442                           	opt stack 0
  1443  000021                     program_field@page:
  1444                           	opt stack 0
  1445                           
  1446                           ; 1 bytes @ 0x20
  1447  000021                     	ds	1
  1448  000022                     parse_csq_ok@colon_index:
  1449                           	opt stack 0
  1450  000022                     program_field@max_size:
  1451                           	opt stack 0
  1452                           
  1453                           ; 1 bytes @ 0x21
  1454  000022                     	ds	1
  1455  000023                     parse_csq_ok@i:
  1456                           	opt stack 0
  1457  000023                     program_field@i:
  1458                           	opt stack 0
  1459                           
  1460                           ; 1 bytes @ 0x22
  1461  000023                     	ds	1
  1462  000024                     parse_csq_ok@tens_digit:
  1463                           	opt stack 0
  1464  000024                     program_field@start_addr:
  1465                           	opt stack 0
  1466                           
  1467                           ; 1 bytes @ 0x23
  1468  000024                     	ds	1
  1469  000025                     check_md_state@tempStatus:
  1470                           	opt stack 0
  1471  000025                     program_field@field_number:
  1472                           	opt stack 0
  1473                           
  1474                           ; 1 bytes @ 0x24
  1475  000025                     	ds	1
  1476  000026                     ??_parse_cmgr:
  1477  000026                     ??_start_modem:
  1478                           
  1479                           ; 1 bytes @ 0x25
  1480  000026                     	ds	1
  1481  000027                     send_sms_ok@msgIndex:
  1482                           	opt stack 0
  1483                           
  1484                           ; 3 bytes @ 0x26
  1485  000027                     	ds	1
  1486  000028                     ??_read_sms:
  1487                           
  1488                           ; 1 bytes @ 0x27
  1489  000028                     	ds	2
  1490  00002A                     send_sms_ok@isValidCmd:
  1491                           	opt stack 0
  1492                           
  1493                           ; 1 bytes @ 0x29
  1494  00002A                     	ds	1
  1495  00002B                     send_sms_ok@smsEndIndex:
  1496                           	opt stack 0
  1497                           
  1498                           ; 1 bytes @ 0x2A
  1499  00002B                     	ds	1
  1500  00002C                     send_sms_ok@poundCount:
  1501                           	opt stack 0
  1502                           
  1503                           ; 1 bytes @ 0x2B
  1504  00002C                     	ds	1
  1505  00002D                     send_sms_ok@i:
  1506                           	opt stack 0
  1507                           
  1508                           ; 1 bytes @ 0x2C
  1509  00002D                     	ds	1
  1510  00002E                     ??_listen_sms:
  1511                           
  1512                           ; 1 bytes @ 0x2D
  1513  00002E                     	ds	1
  1514  00002F                     tblptru	equ	0xFF8
  1515                           tblptrh	equ	0xFF7
  1516                           tblptrl	equ	0xFF6
  1517                           tablat	equ	0xFF5
  1518                           postinc0	equ	0xFEE
  1519                           wreg	equ	0xFE8
  1520                           postdec1	equ	0xFE5
  1521                           fsr1l	equ	0xFE1
  1522                           
  1523                           ; 1 bytes @ 0x2E
  1524 ;;
  1525 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1526 ;;
  1527 ;; *************** function _main *****************
  1528 ;; Defined at:
  1529 ;;		line 89 in file "main.c"
  1530 ;; Parameters:    Size  Location     Type
  1531 ;;		None
  1532 ;; Auto vars:     Size  Location     Type
  1533 ;;		None
  1534 ;; Return value:  Size  Location     Type
  1535 ;;                  1    wreg      void 
  1536 ;; Registers used:
  1537 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1538 ;; Tracked objects:
  1539 ;;		On entry : 0/0
  1540 ;;		On exit  : 0/0
  1541 ;;		Unchanged: 0/0
  1542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1546 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1547 ;;Total ram usage:        0 bytes
  1548 ;; Hardware stack levels required when called:   10
  1549 ;; This function calls:
  1550 ;;		_check_state
  1551 ;;		_init_md_uart
  1552 ;;		_init_pic
  1553 ;; This function is called by:
  1554 ;;		Startup code after reset
  1555 ;; This function uses a non-reentrant model
  1556 ;;
  1557                           
  1558                           	psect	text0
  1559  003068                     __ptext0:
  1560                           	opt stack 0
  1561  003068                     _main:
  1562                           	opt stack 21
  1563                           
  1564                           ;main.c: 91: init_pic();
  1565                           
  1566                           ;incstack = 0
  1567  003068  EC31  F017         	call	_init_pic	;wreg free
  1568                           
  1569                           ;main.c: 92: init_md_uart();
  1570  00306C  ECA3  F017         	call	_init_md_uart	;wreg free
  1571  003070                     
  1572                           ;main.c: 95: {
  1573                           ;main.c: 96: check_state();
  1574  003070  ECCD  F015         	call	_check_state	;wreg free
  1575  003074  D7FD               	goto	l241
  1576  003076                     __end_of_main:
  1577                           	opt stack 0
  1578                           tblptru	equ	0xFF8
  1579                           tblptrh	equ	0xFF7
  1580                           tblptrl	equ	0xFF6
  1581                           tablat	equ	0xFF5
  1582                           postinc0	equ	0xFEE
  1583                           wreg	equ	0xFE8
  1584                           postdec1	equ	0xFE5
  1585                           fsr1l	equ	0xFE1
  1586                           
  1587 ;; *************** function _init_pic *****************
  1588 ;; Defined at:
  1589 ;;		line 107 in file "main.c"
  1590 ;; Parameters:    Size  Location     Type
  1591 ;;		None
  1592 ;; Auto vars:     Size  Location     Type
  1593 ;;		None
  1594 ;; Return value:  Size  Location     Type
  1595 ;;                  1    wreg      void 
  1596 ;; Registers used:
  1597 ;;		wreg, status,2, cstack
  1598 ;; Tracked objects:
  1599 ;;		On entry : 0/0
  1600 ;;		On exit  : 0/0
  1601 ;;		Unchanged: 0/0
  1602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1606 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1607 ;;Total ram usage:        0 bytes
  1608 ;; Hardware stack levels used:    1
  1609 ;; Hardware stack levels required when called:    5
  1610 ;; This function calls:
  1611 ;;		_enable_ints
  1612 ;; This function is called by:
  1613 ;;		_main
  1614 ;; This function uses a non-reentrant model
  1615 ;;
  1616                           
  1617                           	psect	text1
  1618  002E62                     __ptext1:
  1619                           	opt stack 0
  1620  002E62                     _init_pic:
  1621                           	opt stack 25
  1622                           
  1623                           ;main.c: 110: OSCCONbits.IDLEN = 0;
  1624                           
  1625                           ;incstack = 0
  1626  002E62  9ED3               	bcf	4051,7,c	;volatile
  1627                           
  1628                           ;main.c: 111: OSCCONbits.IRCF = 0b110;
  1629  002E64  50D3               	movf	4051,w,c	;volatile
  1630  002E66  0B8F               	andlw	-113
  1631  002E68  0960               	iorlw	96
  1632  002E6A  6ED3               	movwf	4051,c	;volatile
  1633                           
  1634                           ;main.c: 112: OSCCONbits.OSTS = 1;
  1635  002E6C  86D3               	bsf	4051,3,c	;volatile
  1636                           
  1637                           ;main.c: 116: ANSELA = 0x01;
  1638  002E6E  0E01               	movlw	1
  1639  002E70  010F               	movlb	15	; () banked
  1640  002E72  6F38               	movwf	56,b	;volatile
  1641                           
  1642                           ; BSR set to: 15
  1643                           ;main.c: 117: TRISAbits.TRISA0 = 1;
  1644  002E74  8092               	bsf	3986,0,c	;volatile
  1645                           
  1646                           ; BSR set to: 15
  1647                           ;main.c: 118: TRISAbits.TRISA3 = 0;
  1648  002E76  9692               	bcf	3986,3,c	;volatile
  1649                           
  1650                           ; BSR set to: 15
  1651                           ;main.c: 119: LATAbits.LATA3 = 0;
  1652  002E78  9689               	bcf	3977,3,c	;volatile
  1653                           
  1654                           ;main.c: 122: ANSELC = 0x00;
  1655  002E7A  0E00               	movlw	0
  1656  002E7C  6F3A               	movwf	58,b	;volatile
  1657                           
  1658                           ; BSR set to: 15
  1659                           ;main.c: 123: LATBbits.LB3 = 1;
  1660  002E7E  868A               	bsf	3978,3,c	;volatile
  1661                           
  1662                           ; BSR set to: 15
  1663                           ;main.c: 124: TRISBbits.TRISB3 = 0;
  1664  002E80  9693               	bcf	3987,3,c	;volatile
  1665                           
  1666                           ; BSR set to: 15
  1667                           ;main.c: 125: PORTCbits.RC6 = 1;
  1668  002E82  8C82               	bsf	3970,6,c	;volatile
  1669                           
  1670                           ; BSR set to: 15
  1671                           ;main.c: 126: TRISCbits.TRISC6 = 0;
  1672  002E84  9C94               	bcf	3988,6,c	;volatile
  1673                           
  1674                           ; BSR set to: 15
  1675                           ;main.c: 127: LATCbits.LATC7 = 1;
  1676  002E86  8E8B               	bsf	3979,7,c	;volatile
  1677                           
  1678                           ; BSR set to: 15
  1679                           ;main.c: 128: TRISCbits.TRISC7 = 1;
  1680  002E88  8E94               	bsf	3988,7,c	;volatile
  1681                           
  1682                           ;main.c: 131: ANSELB = 0x00;
  1683  002E8A  0E00               	movlw	0
  1684  002E8C  6F39               	movwf	57,b	;volatile
  1685                           
  1686                           ; BSR set to: 15
  1687                           ;main.c: 132: TRISBbits.TRISB0 = 1;
  1688  002E8E  8093               	bsf	3987,0,c	;volatile
  1689                           
  1690                           ; BSR set to: 15
  1691                           ;main.c: 133: TRISCbits.TRISC1 = 1;
  1692  002E90  8294               	bsf	3988,1,c	;volatile
  1693                           
  1694                           ; BSR set to: 15
  1695                           ;main.c: 134: LATBbits.LB1 = 1;
  1696  002E92  828A               	bsf	3978,1,c	;volatile
  1697                           
  1698                           ; BSR set to: 15
  1699                           ;main.c: 135: TRISBbits.TRISB1 = 1;
  1700  002E94  8293               	bsf	3987,1,c	;volatile
  1701                           
  1702                           ; BSR set to: 15
  1703                           ;main.c: 136: LATBbits.LATB2 = 1;
  1704  002E96  848A               	bsf	3978,2,c	;volatile
  1705                           
  1706                           ; BSR set to: 15
  1707                           ;main.c: 137: TRISBbits.TRISB2 = 1;
  1708  002E98  8493               	bsf	3987,2,c	;volatile
  1709                           
  1710                           ; BSR set to: 15
  1711                           ;main.c: 138: LATCbits.LC4 = 1;
  1712  002E9A  888B               	bsf	3979,4,c	;volatile
  1713                           
  1714                           ; BSR set to: 15
  1715                           ;main.c: 139: TRISCbits.TRISC4 = 0;
  1716  002E9C  9894               	bcf	3988,4,c	;volatile
  1717                           
  1718                           ; BSR set to: 15
  1719                           ;main.c: 140: PORTBbits.RB4 = 1;
  1720  002E9E  8881               	bsf	3969,4,c	;volatile
  1721                           
  1722                           ; BSR set to: 15
  1723                           ;main.c: 141: TRISBbits.TRISB4 = 1;
  1724  002EA0  8893               	bsf	3987,4,c	;volatile
  1725                           
  1726                           ; BSR set to: 15
  1727                           ;main.c: 142: PORTBbits.RB5 = 1;
  1728  002EA2  8A81               	bsf	3969,5,c	;volatile
  1729                           
  1730                           ; BSR set to: 15
  1731                           ;main.c: 143: TRISBbits.TRISB5 = 1;
  1732  002EA4  8A93               	bsf	3987,5,c	;volatile
  1733                           
  1734                           ; BSR set to: 15
  1735                           ;main.c: 144: PORTBbits.RB6 = 1;
  1736  002EA6  8C81               	bsf	3969,6,c	;volatile
  1737                           
  1738                           ; BSR set to: 15
  1739                           ;main.c: 145: TRISBbits.TRISB6 = 0;
  1740  002EA8  9C93               	bcf	3987,6,c	;volatile
  1741                           
  1742                           ; BSR set to: 15
  1743                           ;main.c: 146: PORTBbits.RB7 = 1;
  1744  002EAA  8E81               	bsf	3969,7,c	;volatile
  1745                           
  1746                           ; BSR set to: 15
  1747                           ;main.c: 147: TRISBbits.TRISB7 = 1;
  1748  002EAC  8E93               	bsf	3987,7,c	;volatile
  1749                           
  1750                           ; BSR set to: 15
  1751                           ;main.c: 149: LATAbits.LATA1 = 0;
  1752  002EAE  9289               	bcf	3977,1,c	;volatile
  1753                           
  1754                           ; BSR set to: 15
  1755                           ;main.c: 150: TRISAbits.TRISA1 = 0;
  1756  002EB0  9292               	bcf	3986,1,c	;volatile
  1757                           
  1758                           ; BSR set to: 15
  1759                           ;main.c: 152: enable_ints();
  1760  002EB2  EC90  F017         	call	_enable_ints	;wreg free
  1761                           
  1762                           ;main.c: 153: state = OPERATIONAL;
  1763  002EB6  0E00               	movlw	0
  1764  002EB8  6E31               	movwf	_state,c
  1765  002EBA  0012               	return		;funcret
  1766  002EBC                     __end_of_init_pic:
  1767                           	opt stack 0
  1768                           tblptru	equ	0xFF8
  1769                           tblptrh	equ	0xFF7
  1770                           tblptrl	equ	0xFF6
  1771                           tablat	equ	0xFF5
  1772                           postinc0	equ	0xFEE
  1773                           wreg	equ	0xFE8
  1774                           postdec1	equ	0xFE5
  1775                           fsr1l	equ	0xFE1
  1776                           
  1777 ;; *************** function _enable_ints *****************
  1778 ;; Defined at:
  1779 ;;		line 156 in file "main.c"
  1780 ;; Parameters:    Size  Location     Type
  1781 ;;		None
  1782 ;; Auto vars:     Size  Location     Type
  1783 ;;		None
  1784 ;; Return value:  Size  Location     Type
  1785 ;;                  1    wreg      void 
  1786 ;; Registers used:
  1787 ;;		wreg, status,2, cstack
  1788 ;; Tracked objects:
  1789 ;;		On entry : 0/0
  1790 ;;		On exit  : 0/0
  1791 ;;		Unchanged: 0/0
  1792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1796 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1797 ;;Total ram usage:        0 bytes
  1798 ;; Hardware stack levels used:    1
  1799 ;; Hardware stack levels required when called:    4
  1800 ;; This function calls:
  1801 ;;		_start_timer0
  1802 ;; This function is called by:
  1803 ;;		_init_pic
  1804 ;; This function uses a non-reentrant model
  1805 ;;
  1806                           
  1807                           	psect	text2
  1808  002F20                     __ptext2:
  1809                           	opt stack 0
  1810  002F20                     _enable_ints:
  1811                           	opt stack 25
  1812                           
  1813                           ;main.c: 158: INTCONbits.GIE = 0;
  1814                           
  1815                           ;incstack = 0
  1816  002F20  9EF2               	bcf	intcon,7,c	;volatile
  1817                           
  1818                           ;main.c: 165: start_timer0();
  1819  002F22  EC1A  F018         	call	_start_timer0	;wreg free
  1820                           
  1821                           ;main.c: 168: T3CONbits.T3CKPS = 0b11;
  1822  002F26  0E30               	movlw	48
  1823  002F28  12B1               	iorwf	4017,f,c	;volatile
  1824                           
  1825                           ;main.c: 169: T3CONbits.TMR3CS = 0b00;
  1826  002F2A  0E3F               	movlw	-193
  1827  002F2C  16B1               	andwf	4017,f,c	;volatile
  1828                           
  1829                           ;main.c: 170: T3CONbits.nT3SYNC = 1;
  1830  002F2E  84B1               	bsf	4017,2,c	;volatile
  1831                           
  1832                           ;main.c: 172: T3CONbits.TMR3ON = 1;
  1833  002F30  80B1               	bsf	4017,0,c	;volatile
  1834                           
  1835                           ;main.c: 173: PIE2bits.TMR3IE = 1;
  1836  002F32  82A0               	bsf	4000,1,c	;volatile
  1837                           
  1838                           ;main.c: 174: PIR2bits.TMR3IF = 0;
  1839  002F34  92A1               	bcf	4001,1,c	;volatile
  1840                           
  1841                           ;main.c: 175: TMR3H = 0x60;
  1842  002F36  0E60               	movlw	96
  1843  002F38  6EB3               	movwf	4019,c	;volatile
  1844                           
  1845                           ;main.c: 176: TMR3L = 0;
  1846  002F3A  0E00               	movlw	0
  1847  002F3C  6EB2               	movwf	4018,c	;volatile
  1848                           
  1849                           ;main.c: 178: INTCONbits.GIE = 0;
  1850  002F3E  9EF2               	bcf	intcon,7,c	;volatile
  1851                           
  1852                           ;main.c: 179: INTCONbits.PEIE = 1;
  1853  002F40  8CF2               	bsf	intcon,6,c	;volatile
  1854                           
  1855                           ;main.c: 181: INTCONbits.GIE = 1;
  1856  002F42  8EF2               	bsf	intcon,7,c	;volatile
  1857  002F44  0012               	return		;funcret
  1858  002F46                     __end_of_enable_ints:
  1859                           	opt stack 0
  1860                           tblptru	equ	0xFF8
  1861                           tblptrh	equ	0xFF7
  1862                           tblptrl	equ	0xFF6
  1863                           tablat	equ	0xFF5
  1864                           intcon	equ	0xFF2
  1865                           postinc0	equ	0xFEE
  1866                           wreg	equ	0xFE8
  1867                           postdec1	equ	0xFE5
  1868                           fsr1l	equ	0xFE1
  1869                           
  1870 ;; *************** function _start_timer0 *****************
  1871 ;; Defined at:
  1872 ;;		line 210 in file "main.c"
  1873 ;; Parameters:    Size  Location     Type
  1874 ;;		None
  1875 ;; Auto vars:     Size  Location     Type
  1876 ;;		None
  1877 ;; Return value:  Size  Location     Type
  1878 ;;                  1    wreg      void 
  1879 ;; Registers used:
  1880 ;;		wreg, status,2
  1881 ;; Tracked objects:
  1882 ;;		On entry : 0/0
  1883 ;;		On exit  : 0/0
  1884 ;;		Unchanged: 0/0
  1885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1887 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1889 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1890 ;;Total ram usage:        0 bytes
  1891 ;; Hardware stack levels used:    1
  1892 ;; Hardware stack levels required when called:    3
  1893 ;; This function calls:
  1894 ;;		Nothing
  1895 ;; This function is called by:
  1896 ;;		_enable_ints
  1897 ;; This function uses a non-reentrant model
  1898 ;;
  1899                           
  1900                           	psect	text3
  1901  003034                     __ptext3:
  1902                           	opt stack 0
  1903  003034                     _start_timer0:
  1904                           	opt stack 25
  1905                           
  1906                           ;main.c: 212: T0CON = 0x87;
  1907                           
  1908                           ;incstack = 0
  1909  003034  0E87               	movlw	135
  1910  003036  6ED5               	movwf	4053,c	;volatile
  1911                           
  1912                           ;main.c: 213: TMR0L = ((65535-781)%256);
  1913  003038  0EF2               	movlw	242
  1914  00303A  6ED6               	movwf	4054,c	;volatile
  1915                           
  1916                           ;main.c: 214: TMR0H = ((65535-781)/256);
  1917  00303C  0EFC               	movlw	252
  1918  00303E  6ED7               	movwf	4055,c	;volatile
  1919                           
  1920                           ;main.c: 215: TMR0IF = 0;
  1921  003040  94F2               	bcf	intcon,2,c	;volatile
  1922                           
  1923                           ;main.c: 216: TMR0IE = 1;
  1924  003042  8AF2               	bsf	intcon,5,c	;volatile
  1925                           
  1926                           ;main.c: 217: INTCONbits.GIE = 1;
  1927  003044  8EF2               	bsf	intcon,7,c	;volatile
  1928  003046  0012               	return		;funcret
  1929  003048                     __end_of_start_timer0:
  1930                           	opt stack 0
  1931                           tblptru	equ	0xFF8
  1932                           tblptrh	equ	0xFF7
  1933                           tblptrl	equ	0xFF6
  1934                           tablat	equ	0xFF5
  1935                           intcon	equ	0xFF2
  1936                           postinc0	equ	0xFEE
  1937                           wreg	equ	0xFE8
  1938                           postdec1	equ	0xFE5
  1939                           fsr1l	equ	0xFE1
  1940                           
  1941 ;; *************** function _check_state *****************
  1942 ;; Defined at:
  1943 ;;		line 13 in file "state.c"
  1944 ;; Parameters:    Size  Location     Type
  1945 ;;		None
  1946 ;; Auto vars:     Size  Location     Type
  1947 ;;		None
  1948 ;; Return value:  Size  Location     Type
  1949 ;;                  1    wreg      void 
  1950 ;; Registers used:
  1951 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1952 ;; Tracked objects:
  1953 ;;		On entry : 0/0
  1954 ;;		On exit  : 0/0
  1955 ;;		Unchanged: 0/0
  1956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1959 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1960 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1961 ;;Total ram usage:        1 bytes
  1962 ;; Hardware stack levels used:    1
  1963 ;; Hardware stack levels required when called:    9
  1964 ;; This function calls:
  1965 ;;		_listen_sms
  1966 ;;		_reload_tmr3_pt25s
  1967 ;; This function is called by:
  1968 ;;		_main
  1969 ;; This function uses a non-reentrant model
  1970 ;;
  1971                           
  1972                           	psect	text4
  1973  002B9A                     __ptext4:
  1974                           	opt stack 0
  1975  002B9A                     _check_state:
  1976                           	opt stack 21
  1977                           
  1978                           ;state.c: 15: switch (state)
  1979                           
  1980                           ;incstack = 0
  1981  002B9A  D037               	goto	l938
  1982  002B9C                     
  1983                           ;state.c: 18: waiting = 0;
  1984  002B9C  0E00               	movlw	0
  1985  002B9E  6E49               	movwf	_waiting,c
  1986                           
  1987                           ;state.c: 20: if (PORTBbits.RB4 && !buttonStillPressed)
  1988  002BA0  A881               	btfss	3969,4,c	;volatile
  1989  002BA2  D014               	goto	l940
  1990  002BA4  502F               	movf	_buttonStillPressed,w,c
  1991  002BA6  A4D8               	btfss	status,2,c
  1992  002BA8  D011               	goto	l940
  1993                           
  1994                           ;state.c: 21: {
  1995                           ;state.c: 22: _delay((unsigned long)((30)*(8000000/4000.0)));
  1996  002BAA  0E4E               	movlw	78
  1997  002BAC  0100               	movlb	0	; () banked
  1998  002BAE  6FE5               	movwf	??_check_state& (0+255),b
  1999  002BB0  0EEB               	movlw	235
  2000  002BB2                     u9317:
  2001  002BB2  2EE8               	decfsz	wreg,f,c
  2002  002BB4  D7FE               	bra	u9317
  2003  002BB6  2FE5               	decfsz	??_check_state& (0+255),f,b
  2004  002BB8  D7FC               	bra	u9317
  2005                           
  2006                           ;state.c: 23: if (PORTBbits.RB4)
  2007  002BBA  A881               	btfss	3969,4,c	;volatile
  2008  002BBC  D005               	goto	l941
  2009                           
  2010                           ;state.c: 24: {
  2011                           ;state.c: 25: buttonPressCount++;
  2012  002BBE  2A42               	incf	_buttonPressCount,f,c
  2013                           
  2014                           ;state.c: 26: reload_tmr3_pt25s();
  2015  002BC0  EC24  F018         	call	_reload_tmr3_pt25s	;wreg free
  2016                           
  2017                           ;state.c: 27: tmr3_cnt = 0;
  2018  002BC4  0E00               	movlw	0
  2019  002BC6  6E3F               	movwf	_tmr3_cnt,c
  2020  002BC8                     l941:
  2021                           
  2022                           ;state.c: 28: }
  2023                           ;state.c: 29: buttonStillPressed = 1;
  2024  002BC8  0E01               	movlw	1
  2025  002BCA  D00B               	goto	L1
  2026  002BCC                     l940:
  2027                           
  2028                           ;state.c: 31: else
  2029                           ;state.c: 32: {
  2030                           ;state.c: 33: _delay((unsigned long)((30)*(8000000/4000.0)));
  2031  002BCC  0E4E               	movlw	78
  2032  002BCE  0100               	movlb	0	; () banked
  2033  002BD0  6FE5               	movwf	??_check_state& (0+255),b
  2034  002BD2  0EEB               	movlw	235
  2035  002BD4                     u9327:
  2036  002BD4  2EE8               	decfsz	wreg,f,c
  2037  002BD6  D7FE               	bra	u9327
  2038  002BD8  2FE5               	decfsz	??_check_state& (0+255),f,b
  2039  002BDA  D7FC               	bra	u9327
  2040                           
  2041                           ;state.c: 34: if (!PORTBbits.RB4)
  2042  002BDC  B881               	btfsc	3969,4,c	;volatile
  2043  002BDE  D002               	goto	l943
  2044                           
  2045                           ;state.c: 35: {
  2046                           ;state.c: 36: buttonStillPressed = 0;
  2047  002BE0  0E00               	movlw	0
  2048  002BE2                     L1:
  2049  002BE2  6E2F               	movwf	_buttonStillPressed,c
  2050  002BE4                     l943:
  2051                           
  2052                           ;state.c: 37: }
  2053                           ;state.c: 38: }
  2054                           ;state.c: 39: if (inButtonMenu && buttonPressCount == 0)
  2055  002BE4  5045               	movf	_inButtonMenu,w,c
  2056  002BE6  B4D8               	btfsc	status,2,c
  2057  002BE8  D006               	goto	l944
  2058  002BEA  5042               	movf	_buttonPressCount,w,c
  2059  002BEC  A4D8               	btfss	status,2,c
  2060  002BEE  D003               	goto	l944
  2061                           
  2062                           ;state.c: 40: {
  2063                           ;state.c: 41: LATBbits.LB3=0;
  2064  002BF0  968A               	bcf	3978,3,c	;volatile
  2065                           
  2066                           ;state.c: 42: LATCbits.LC4=0;
  2067  002BF2  988B               	bcf	3979,4,c	;volatile
  2068                           
  2069                           ;state.c: 43: }
  2070  002BF4  D002               	goto	l945
  2071  002BF6                     l944:
  2072                           
  2073                           ;state.c: 44: else
  2074                           ;state.c: 45: {
  2075                           ;state.c: 46: LATBbits.LB3=1;
  2076  002BF6  868A               	bsf	3978,3,c	;volatile
  2077                           
  2078                           ;state.c: 47: LATCbits.LC4=1;
  2079  002BF8  888B               	bsf	3979,4,c	;volatile
  2080  002BFA                     l945:
  2081                           
  2082                           ;state.c: 48: }
  2083                           ;state.c: 49: bled_tmr0_tick = 0;
  2084  002BFA  0E00               	movlw	0
  2085  002BFC  6E40               	movwf	_bled_tmr0_tick,c
  2086                           
  2087                           ;state.c: 50: gled_tmr0_tick = 0;
  2088  002BFE  0E00               	movlw	0
  2089  002C00  6E41               	movwf	_gled_tmr0_tick,c
  2090                           
  2091                           ;state.c: 51: break;
  2092  002C02  0012               	return	
  2093  002C04                     
  2094                           ;state.c: 54: listen_sms();
  2095  002C04  EC58  F014         	call	_listen_sms	;wreg free
  2096                           
  2097                           ;state.c: 65: }
  2098                           
  2099                           ;state.c: 64: break;
  2100                           
  2101                           ;state.c: 63: case SEND_TEST:
  2102                           
  2103                           ;state.c: 61: break;
  2104                           
  2105                           ;state.c: 60: case DEL_SENSOR:
  2106                           
  2107                           ;state.c: 58: break;
  2108                           
  2109                           ;state.c: 57: case LEARN_SENSOR:
  2110                           
  2111                           ;state.c: 55: break;
  2112  002C08  0012               	return	
  2113  002C0A                     l938:
  2114  002C0A  5031               	movf	_state,w,c
  2115                           
  2116                           ; Switch size 1, requested type "space"
  2117                           ; Number of cases is 5, Range of values is 0 to 4
  2118                           ; switch strategies available:
  2119                           ; Name         Instructions Cycles
  2120                           ; simple_byte           16     9 (average)
  2121                           ;	Chosen strategy is simple_byte
  2122  002C0C  0A00               	xorlw	0	; case 0
  2123  002C0E  B4D8               	btfsc	status,2,c
  2124  002C10  D7C5               	goto	l939
  2125  002C12  0A01               	xorlw	1	; case 1
  2126  002C14  B4D8               	btfsc	status,2,c
  2127  002C16  D7F6               	goto	l947
  2128  002C18  0A03               	xorlw	3	; case 2
  2129  002C1A  B4D8               	btfsc	status,2,c
  2130  002C1C  0012               	return	
  2131  002C1E  0A01               	xorlw	1	; case 3
  2132  002C20  B4D8               	btfsc	status,2,c
  2133  002C22  0012               	return	
  2134  002C24  0A07               	xorlw	7	; case 4
  2135  002C26  0012               	return	
  2136  002C28                     __end_of_check_state:
  2137                           	opt stack 0
  2138                           tblptru	equ	0xFF8
  2139                           tblptrh	equ	0xFF7
  2140                           tblptrl	equ	0xFF6
  2141                           tablat	equ	0xFF5
  2142                           intcon	equ	0xFF2
  2143                           postinc0	equ	0xFEE
  2144                           wreg	equ	0xFE8
  2145                           postdec1	equ	0xFE5
  2146                           fsr1l	equ	0xFE1
  2147                           status	equ	0xFD8
  2148                           
  2149 ;; *************** function _reload_tmr3_pt25s *****************
  2150 ;; Defined at:
  2151 ;;		line 193 in file "main.c"
  2152 ;; Parameters:    Size  Location     Type
  2153 ;;		None
  2154 ;; Auto vars:     Size  Location     Type
  2155 ;;		None
  2156 ;; Return value:  Size  Location     Type
  2157 ;;                  1    wreg      void 
  2158 ;; Registers used:
  2159 ;;		wreg, status,2
  2160 ;; Tracked objects:
  2161 ;;		On entry : 0/0
  2162 ;;		On exit  : 0/0
  2163 ;;		Unchanged: 0/0
  2164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2168 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2169 ;;Total ram usage:        0 bytes
  2170 ;; Hardware stack levels used:    1
  2171 ;; Hardware stack levels required when called:    3
  2172 ;; This function calls:
  2173 ;;		Nothing
  2174 ;; This function is called by:
  2175 ;;		_check_state
  2176 ;; This function uses a non-reentrant model
  2177 ;;
  2178                           
  2179                           	psect	text5
  2180  003048                     __ptext5:
  2181                           	opt stack 0
  2182  003048                     _reload_tmr3_pt25s:
  2183                           	opt stack 26
  2184                           
  2185                           ;main.c: 195: T3CONbits.TMR3ON = 1;
  2186                           
  2187                           ;incstack = 0
  2188  003048  80B1               	bsf	4017,0,c	;volatile
  2189                           
  2190                           ;main.c: 196: PIE2bits.TMR3IE = 1;
  2191  00304A  82A0               	bsf	4000,1,c	;volatile
  2192                           
  2193                           ;main.c: 197: PIR2bits.TMR3IF = 0;
  2194  00304C  92A1               	bcf	4001,1,c	;volatile
  2195                           
  2196                           ;main.c: 198: TMR3H = 0x0B;
  2197  00304E  0E0B               	movlw	11
  2198  003050  6EB3               	movwf	4019,c	;volatile
  2199                           
  2200                           ;main.c: 199: TMR3L = 0x45;
  2201  003052  0E45               	movlw	69
  2202  003054  6EB2               	movwf	4018,c	;volatile
  2203  003056  0012               	return		;funcret
  2204  003058                     __end_of_reload_tmr3_pt25s:
  2205                           	opt stack 0
  2206                           tblptru	equ	0xFF8
  2207                           tblptrh	equ	0xFF7
  2208                           tblptrl	equ	0xFF6
  2209                           tablat	equ	0xFF5
  2210                           intcon	equ	0xFF2
  2211                           postinc0	equ	0xFEE
  2212                           wreg	equ	0xFE8
  2213                           postdec1	equ	0xFE5
  2214                           fsr1l	equ	0xFE1
  2215                           status	equ	0xFD8
  2216                           
  2217 ;; *************** function _listen_sms *****************
  2218 ;; Defined at:
  2219 ;;		line 10 in file "C:/Users/Scott/InstantCare/Engineering/7102-10 - 906GN-SmokeGSMHub/Firmware/ic_hubCode_jvolk/test_b
      +uttonmenu_wSMS.X/sms.c"
  2220 ;; Parameters:    Size  Location     Type
  2221 ;;		None
  2222 ;; Auto vars:     Size  Location     Type
  2223 ;;  start_ok        1  132[BANK0 ] unsigned char 
  2224 ;; Return value:  Size  Location     Type
  2225 ;;                  1    wreg      void 
  2226 ;; Registers used:
  2227 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2228 ;; Tracked objects:
  2229 ;;		On entry : 0/0
  2230 ;;		On exit  : 0/0
  2231 ;;		Unchanged: 0/0
  2232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2234 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2235 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2236 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2237 ;;Total ram usage:        2 bytes
  2238 ;; Hardware stack levels used:    1
  2239 ;; Hardware stack levels required when called:    8
  2240 ;; This function calls:
  2241 ;;		_check_sms_timer
  2242 ;;		_read_sms
  2243 ;;		_send_sms_ok
  2244 ;;		_start_modem
  2245 ;;		_start_sms_ok
  2246 ;;		_start_sms_timer
  2247 ;; This function is called by:
  2248 ;;		_check_state
  2249 ;; This function uses a non-reentrant model
  2250 ;;
  2251                           
  2252                           	psect	text6
  2253  0028B0                     __ptext6:
  2254                           	opt stack 0
  2255  0028B0                     _listen_sms:
  2256                           	opt stack 21
  2257                           
  2258                           ;sms.c: 12: uint8_t start_ok = start_sms_ok();
  2259                           
  2260                           ;incstack = 0
  2261  0028B0  ECF1  F012         	call	_start_sms_ok	;wreg free
  2262  0028B4  0100               	movlb	0	; () banked
  2263  0028B6  6FE4               	movwf	listen_sms@start_ok& (0+255),b
  2264                           
  2265                           ; BSR set to: 0
  2266                           ;sms.c: 13: if (!modem_awake)
  2267  0028B8  503A               	movf	_modem_awake,w,c
  2268  0028BA  A4D8               	btfss	status,2,c
  2269  0028BC  D003               	goto	l1350
  2270                           
  2271                           ; BSR set to: 0
  2272                           ;sms.c: 14: start_modem();
  2273  0028BE  EC56  F016         	call	_start_modem	;wreg free
  2274  0028C2  0012               	return	
  2275  0028C4                     l1350:
  2276                           
  2277                           ;sms.c: 15: else if (modem_awake && !modem_ready_sms)
  2278  0028C4  503A               	movf	_modem_awake,w,c
  2279  0028C6  B4D8               	btfsc	status,2,c
  2280  0028C8  D014               	goto	l1352
  2281  0028CA  5039               	movf	_modem_ready_sms,w,c
  2282  0028CC  A4D8               	btfss	status,2,c
  2283  0028CE  D011               	goto	l1352
  2284                           
  2285                           ;sms.c: 16: {
  2286                           ;sms.c: 17: if (start_ok == 1)
  2287  0028D0  0100               	movlb	0	; () banked
  2288  0028D2  05E4               	decf	listen_sms@start_ok& (0+255),w,b
  2289  0028D4  A4D8               	btfss	status,2,c
  2290  0028D6  D005               	goto	l1353
  2291                           
  2292                           ; BSR set to: 0
  2293                           ;sms.c: 18: {
  2294                           ;sms.c: 19: start_sms_timer();
  2295  0028D8  ECE7  F017         	call	_start_sms_timer	;wreg free
  2296                           
  2297                           ;sms.c: 20: modem_ready_sms = 1;
  2298  0028DC  0E01               	movlw	1
  2299  0028DE  6E39               	movwf	_modem_ready_sms,c
  2300                           
  2301                           ;sms.c: 21: }
  2302  0028E0  0012               	return	
  2303  0028E2                     l1353:
  2304                           
  2305                           ;sms.c: 22: else if (start_ok == 5)
  2306  0028E2  0E05               	movlw	5
  2307  0028E4  0100               	movlb	0	; () banked
  2308  0028E6  19E4               	xorwf	listen_sms@start_ok& (0+255),w,b
  2309  0028E8  A4D8               	btfss	status,2,c
  2310  0028EA  0012               	return	
  2311                           
  2312                           ; BSR set to: 0
  2313                           ;sms.c: 23: start_modem();
  2314  0028EC  EC56  F016         	call	_start_modem	;wreg free
  2315                           
  2316                           ;sms.c: 24: }
  2317  0028F0  0012               	return	
  2318  0028F2                     l1352:
  2319                           
  2320                           ;sms.c: 25: else if (modem_ready_sms)
  2321  0028F2  5039               	movf	_modem_ready_sms,w,c
  2322  0028F4  B4D8               	btfsc	status,2,c
  2323  0028F6  0012               	return	
  2324                           
  2325                           ;sms.c: 26: {
  2326                           ;sms.c: 27: if (sms_timer_ready && !sms_echo_ready)
  2327  0028F8  5048               	movf	_sms_timer_ready,w,c
  2328  0028FA  B4D8               	btfsc	status,2,c
  2329  0028FC  D009               	goto	l1358
  2330  0028FE  5047               	movf	_sms_echo_ready,w,c
  2331  002900  A4D8               	btfss	status,2,c
  2332  002902  D006               	goto	l1358
  2333                           
  2334                           ;sms.c: 28: {
  2335                           ;sms.c: 29: retryCnt = 0;
  2336  002904  0E00               	movlw	0
  2337  002906  6E33               	movwf	_retryCnt,c
  2338                           
  2339                           ;sms.c: 30: sms_timer_ready = 0;
  2340  002908  0E00               	movlw	0
  2341  00290A  6E48               	movwf	_sms_timer_ready,c
  2342                           
  2343                           ;sms.c: 31: read_sms();
  2344  00290C  ECFF  F00E         	call	_read_sms	;wreg free
  2345  002910                     l1358:
  2346                           
  2347                           ;sms.c: 32: }
  2348                           ;sms.c: 33: if (sms_echo_ready)
  2349  002910  5047               	movf	_sms_echo_ready,w,c
  2350  002912  B4D8               	btfsc	status,2,c
  2351  002914  D018               	goto	l1359
  2352                           
  2353                           ;sms.c: 34: {
  2354                           ;sms.c: 35: if (send_sms_ok(1) == 1 && retryCnt++ < 5)
  2355  002916  0E01               	movlw	1
  2356  002918  EC94  F010         	call	_send_sms_ok
  2357  00291C  06E8               	decf	wreg,f,c
  2358  00291E  A4D8               	btfss	status,2,c
  2359  002920  D00A               	goto	l1360
  2360  002922  2A33               	incf	_retryCnt,f,c
  2361  002924  0433               	decf	_retryCnt,w,c
  2362  002926  6E2E               	movwf	??_listen_sms& (0+255),c
  2363  002928  0E05               	movlw	5
  2364  00292A  602E               	cpfslt	??_listen_sms,c
  2365  00292C  D004               	goto	l1360
  2366                           
  2367                           ;sms.c: 36: {
  2368                           ;sms.c: 37: retryCnt = 0;
  2369  00292E  0E00               	movlw	0
  2370  002930  6E33               	movwf	_retryCnt,c
  2371                           
  2372                           ;sms.c: 38: sms_echo_ready = 0;
  2373  002932  0E00               	movlw	0
  2374  002934  6E47               	movwf	_sms_echo_ready,c
  2375  002936                     l1360:
  2376                           
  2377                           ;sms.c: 39: }
  2378                           ;sms.c: 40: if (retryCnt >= 5)
  2379  002936  0E04               	movlw	4
  2380  002938  6433               	cpfsgt	_retryCnt,c
  2381  00293A  D01D               	goto	l1365
  2382                           
  2383                           ;sms.c: 41: {
  2384                           ;sms.c: 42: retryCnt = 0;
  2385  00293C  0E00               	movlw	0
  2386  00293E  6E33               	movwf	_retryCnt,c
  2387                           
  2388                           ;sms.c: 43: sms_echo_ready = 0;
  2389  002940  0E00               	movlw	0
  2390  002942  6E47               	movwf	_sms_echo_ready,c
  2391                           
  2392                           ;sms.c: 44: }
  2393                           ;sms.c: 45: }
  2394  002944  D018               	goto	l1365
  2395  002946                     l1359:
  2396                           
  2397                           ;sms.c: 46: else if (sms_err_ready)
  2398  002946  5046               	movf	_sms_err_ready,w,c
  2399  002948  B4D8               	btfsc	status,2,c
  2400  00294A  D015               	goto	l1365
  2401                           
  2402                           ;sms.c: 47: {
  2403                           ;sms.c: 48: if (send_sms_ok(0) == 1 && retryCnt++ < 5)
  2404  00294C  0E00               	movlw	0
  2405  00294E  EC94  F010         	call	_send_sms_ok
  2406  002952  06E8               	decf	wreg,f,c
  2407  002954  A4D8               	btfss	status,2,c
  2408  002956  D00A               	goto	l1364
  2409  002958  2A33               	incf	_retryCnt,f,c
  2410  00295A  0433               	decf	_retryCnt,w,c
  2411  00295C  6E2E               	movwf	??_listen_sms& (0+255),c
  2412  00295E  0E05               	movlw	5
  2413  002960  602E               	cpfslt	??_listen_sms,c
  2414  002962  D004               	goto	l1364
  2415                           
  2416                           ;sms.c: 49: {
  2417                           ;sms.c: 50: retryCnt = 0;
  2418  002964  0E00               	movlw	0
  2419  002966  6E33               	movwf	_retryCnt,c
  2420                           
  2421                           ;sms.c: 51: sms_err_ready = 0;
  2422  002968  0E00               	movlw	0
  2423  00296A  6E46               	movwf	_sms_err_ready,c
  2424  00296C                     l1364:
  2425                           
  2426                           ;sms.c: 52: }
  2427                           ;sms.c: 53: if (retryCnt >= 5)
  2428  00296C  0E04               	movlw	4
  2429  00296E  6433               	cpfsgt	_retryCnt,c
  2430  002970  D002               	goto	l1365
  2431                           
  2432                           ;sms.c: 54: sms_err_ready = 0;
  2433  002972  0E00               	movlw	0
  2434  002974  6E46               	movwf	_sms_err_ready,c
  2435  002976                     l1365:
  2436                           
  2437                           ;sms.c: 55: }
  2438                           ;sms.c: 56: check_sms_timer();
  2439  002976  ECC6  F016         	call	_check_sms_timer	;wreg free
  2440  00297A  0012               	return	
  2441  00297C                     __end_of_listen_sms:
  2442                           	opt stack 0
  2443                           tblptru	equ	0xFF8
  2444                           tblptrh	equ	0xFF7
  2445                           tblptrl	equ	0xFF6
  2446                           tablat	equ	0xFF5
  2447                           intcon	equ	0xFF2
  2448                           postinc0	equ	0xFEE
  2449                           wreg	equ	0xFE8
  2450                           postdec1	equ	0xFE5
  2451                           fsr1l	equ	0xFE1
  2452                           status	equ	0xFD8
  2453                           
  2454 ;; *************** function _start_sms_timer *****************
  2455 ;; Defined at:
  2456 ;;		line 349 in file "C:/Users/Scott/InstantCare/Engineering/7102-10 - 906GN-SmokeGSMHub/Firmware/ic_hubCode_jvolk/test_
      +buttonmenu_wSMS.X/sms.c"
  2457 ;; Parameters:    Size  Location     Type
  2458 ;;		None
  2459 ;; Auto vars:     Size  Location     Type
  2460 ;;		None
  2461 ;; Return value:  Size  Location     Type
  2462 ;;                  1    wreg      void 
  2463 ;; Registers used:
  2464 ;;		wreg, status,2
  2465 ;; Tracked objects:
  2466 ;;		On entry : 0/0
  2467 ;;		On exit  : 0/0
  2468 ;;		Unchanged: 0/0
  2469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2471 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2472 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2473 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2474 ;;Total ram usage:        0 bytes
  2475 ;; Hardware stack levels used:    1
  2476 ;; Hardware stack levels required when called:    3
  2477 ;; This function calls:
  2478 ;;		Nothing
  2479 ;; This function is called by:
  2480 ;;		_listen_sms
  2481 ;; This function uses a non-reentrant model
  2482 ;;
  2483                           
  2484                           	psect	text7
  2485  002FCE                     __ptext7:
  2486                           	opt stack 0
  2487  002FCE                     _start_sms_timer:
  2488                           	opt stack 25
  2489                           
  2490                           ;sms.c: 351: T2CONbits.T2CKPS = 0b10;
  2491                           
  2492                           ;incstack = 0
  2493  002FCE  50BA               	movf	4026,w,c	;volatile
  2494  002FD0  0BFC               	andlw	-4
  2495  002FD2  0902               	iorlw	2
  2496  002FD4  6EBA               	movwf	4026,c	;volatile
  2497                           
  2498                           ;sms.c: 352: T2CONbits.T2OUTPS = 0b1111;
  2499  002FD6  86BA               	bsf	4026,3,c	;volatile
  2500  002FD8  88BA               	bsf	4026,4,c	;volatile
  2501  002FDA  8ABA               	bsf	4026,5,c	;volatile
  2502  002FDC  8CBA               	bsf	4026,6,c	;volatile
  2503                           
  2504                           ;sms.c: 353: T2CONbits.TMR2ON = 1;
  2505  002FDE  84BA               	bsf	4026,2,c	;volatile
  2506                           
  2507                           ;sms.c: 354: PIE1bits.TMR2IE = 1;
  2508  002FE0  829D               	bsf	3997,1,c	;volatile
  2509                           
  2510                           ;sms.c: 355: INTCONbits.PEIE = 1;
  2511  002FE2  8CF2               	bsf	intcon,6,c	;volatile
  2512                           
  2513                           ;sms.c: 356: INTCONbits.GIE = 1;
  2514  002FE4  8EF2               	bsf	intcon,7,c	;volatile
  2515  002FE6  0012               	return		;funcret
  2516  002FE8                     __end_of_start_sms_timer:
  2517                           	opt stack 0
  2518                           tblptru	equ	0xFF8
  2519                           tblptrh	equ	0xFF7
  2520                           tblptrl	equ	0xFF6
  2521                           tablat	equ	0xFF5
  2522                           intcon	equ	0xFF2
  2523                           postinc0	equ	0xFEE
  2524                           wreg	equ	0xFE8
  2525                           postdec1	equ	0xFE5
  2526                           fsr1l	equ	0xFE1
  2527                           status	equ	0xFD8
  2528                           
  2529 ;; *************** function _start_sms_ok *****************
  2530 ;; Defined at:
  2531 ;;		line 64 in file "C:/Users/Scott/InstantCare/Engineering/7102-10 - 906GN-SmokeGSMHub/Firmware/ic_hubCode_jvolk/test_b
      +uttonmenu_wSMS.X/sms.c"
  2532 ;; Parameters:    Size  Location     Type
  2533 ;;		None
  2534 ;; Auto vars:     Size  Location     Type
  2535 ;;  cpms           25    0[BANK0 ] unsigned char [25]
  2536 ;;  cnmi           14   25[BANK0 ] unsigned char [14]
  2537 ;;  cmgf           12   39[BANK0 ] unsigned char [12]
  2538 ;; Return value:  Size  Location     Type
  2539 ;;                  1    wreg      unsigned char 
  2540 ;; Registers used:
  2541 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2542 ;; Tracked objects:
  2543 ;;		On entry : 0/0
  2544 ;;		On exit  : 0/0
  2545 ;;		Unchanged: 0/0
  2546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2548 ;;      Locals:         0      51       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2550 ;;      Totals:         0      51       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2551 ;;Total ram usage:       51 bytes
  2552 ;; Hardware stack levels used:    1
  2553 ;; Hardware stack levels required when called:    5
  2554 ;; This function calls:
  2555 ;;		_clear_at_ok
  2556 ;;		_init_md_uart
  2557 ;;		_md_uart_write_str_ok
  2558 ;; This function is called by:
  2559 ;;		_listen_sms
  2560 ;; This function uses a non-reentrant model
  2561 ;;
  2562                           
  2563                           	psect	text8
  2564  0025E2                     __ptext8:
  2565                           	opt stack 0
  2566  0025E2                     _start_sms_ok:
  2567                           	opt stack 23
  2568                           
  2569                           ;sms.c: 66: uint8_t cmgf[] = "AT+CMGF=1\r\n";
  2570                           
  2571                           ;incstack = 0
  2572  0025E2  EE21  F03E         	lfsr	2,start_sms_ok@F6832
  2573  0025E6  EE10  F087         	lfsr	1,start_sms_ok@cmgf
  2574  0025EA  0E0B               	movlw	11
  2575  0025EC                     u8621:
  2576  0025EC  CFDB FFE3          	movff	plusw2,plusw1
  2577  0025F0  06E8               	decf	wreg,f,c
  2578  0025F2  E2FC               	bc	u8621
  2579                           
  2580                           ;sms.c: 67: uint8_t cpms[]="AT+CPMS=\"ME\",\"ME\",\"ME\"\r\n";
  2581  0025F4  EE22  F0C8         	lfsr	2,start_sms_ok@F6834
  2582  0025F8  EE10  F060         	lfsr	1,start_sms_ok@cpms
  2583  0025FC  0E18               	movlw	24
  2584  0025FE                     u8631:
  2585  0025FE  CFDB FFE3          	movff	plusw2,plusw1
  2586  002602  06E8               	decf	wreg,f,c
  2587  002604  E2FC               	bc	u8631
  2588                           
  2589                           ;sms.c: 68: uint8_t cnmi[]="AT+CNMI=1,1\r\n";
  2590  002606  EE21  F030         	lfsr	2,start_sms_ok@F6836
  2591  00260A  EE10  F079         	lfsr	1,start_sms_ok@cnmi
  2592  00260E  0E0D               	movlw	13
  2593  002610                     u8641:
  2594  002610  CFDB FFE3          	movff	plusw2,plusw1
  2595  002614  06E8               	decf	wreg,f,c
  2596  002616  E2FC               	bc	u8641
  2597                           
  2598                           ;sms.c: 70: init_md_uart();
  2599  002618  ECA3  F017         	call	_init_md_uart	;wreg free
  2600                           
  2601                           ;sms.c: 72: if (at1 != 1)
  2602  00261C  0100               	movlb	0	; () banked
  2603  00261E  05F5               	decf	_at1& (0+255),w,b
  2604  002620  B4D8               	btfsc	status,2,c
  2605  002622  D013               	goto	l1376
  2606                           
  2607                           ; BSR set to: 0
  2608                           ;sms.c: 73: {
  2609                           ;sms.c: 74: at1 = md_uart_write_str_ok((uint8_t *)&cmgf[0], sizeof(cmgf), 1, 0);
  2610  002624  0E87               	movlw	low start_sms_ok@cmgf
  2611  002626  6E16               	movwf	md_uart_write_str_ok@data,c
  2612  002628  0E00               	movlw	high start_sms_ok@cmgf
  2613  00262A  6E17               	movwf	md_uart_write_str_ok@data+1,c
  2614  00262C  0E0C               	movlw	12
  2615  00262E  6E18               	movwf	md_uart_write_str_ok@len1,c
  2616  002630  0E01               	movlw	1
  2617  002632  6E19               	movwf	md_uart_write_str_ok@wantOk,c
  2618  002634  0E00               	movlw	0
  2619  002636  6E1A               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  2620  002638  ECD3  F011         	call	_md_uart_write_str_ok	;wreg free
  2621  00263C  0100               	movlb	0	; () banked
  2622  00263E  6FF5               	movwf	_at1& (0+255),b
  2623                           
  2624                           ; BSR set to: 0
  2625                           ;sms.c: 75: if (at1 == 1)
  2626  002640  05F5               	decf	_at1& (0+255),w,b
  2627  002642  A4D8               	btfss	status,2,c
  2628  002644  D002               	goto	l1376
  2629                           
  2630                           ; BSR set to: 0
  2631                           ;sms.c: 76: numUartRetries = 15;
  2632  002646  0E0F               	movlw	15
  2633  002648  6E4A               	movwf	_numUartRetries,c
  2634  00264A                     l1376:
  2635                           
  2636                           ; BSR set to: 0
  2637                           ;sms.c: 77: }
  2638                           ;sms.c: 78: if (at1 == 1 && at2 != 1)
  2639                           
  2640                           ; BSR set to: 0
  2641                           
  2642                           ; BSR set to: 0
  2643  00264A  05F5               	decf	_at1& (0+255),w,b
  2644  00264C  A4D8               	btfss	status,2,c
  2645  00264E  D016               	goto	l1378
  2646                           
  2647                           ; BSR set to: 0
  2648  002650  05F4               	decf	_at2& (0+255),w,b
  2649  002652  B4D8               	btfsc	status,2,c
  2650  002654  D013               	goto	l1378
  2651                           
  2652                           ; BSR set to: 0
  2653                           ;sms.c: 79: {
  2654                           ;sms.c: 80: at2 = md_uart_write_str_ok((uint8_t *)&cpms[0], sizeof(cpms), 1, 0);
  2655  002656  0E60               	movlw	low start_sms_ok@cpms
  2656  002658  6E16               	movwf	md_uart_write_str_ok@data,c
  2657  00265A  0E00               	movlw	high start_sms_ok@cpms
  2658  00265C  6E17               	movwf	md_uart_write_str_ok@data+1,c
  2659  00265E  0E19               	movlw	25
  2660  002660  6E18               	movwf	md_uart_write_str_ok@len1,c
  2661  002662  0E01               	movlw	1
  2662  002664  6E19               	movwf	md_uart_write_str_ok@wantOk,c
  2663  002666  0E00               	movlw	0
  2664  002668  6E1A               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  2665  00266A  ECD3  F011         	call	_md_uart_write_str_ok	;wreg free
  2666  00266E  0100               	movlb	0	; () banked
  2667  002670  6FF4               	movwf	_at2& (0+255),b
  2668                           
  2669                           ; BSR set to: 0
  2670                           ;sms.c: 81: if (at2 == 1)
  2671  002672  05F4               	decf	_at2& (0+255),w,b
  2672  002674  A4D8               	btfss	status,2,c
  2673  002676  D002               	goto	l1378
  2674                           
  2675                           ; BSR set to: 0
  2676                           ;sms.c: 82: numUartRetries = 15;
  2677  002678  0E0F               	movlw	15
  2678  00267A  6E4A               	movwf	_numUartRetries,c
  2679  00267C                     l1378:
  2680                           
  2681                           ; BSR set to: 0
  2682                           ;sms.c: 83: }
  2683                           ;sms.c: 84: if (at2 == 1 && at3 != 1)
  2684                           
  2685                           ; BSR set to: 0
  2686                           
  2687                           ; BSR set to: 0
  2688  00267C  05F4               	decf	_at2& (0+255),w,b
  2689  00267E  A4D8               	btfss	status,2,c
  2690  002680  D016               	goto	l1380
  2691                           
  2692                           ; BSR set to: 0
  2693  002682  05F3               	decf	_at3& (0+255),w,b
  2694  002684  B4D8               	btfsc	status,2,c
  2695  002686  D013               	goto	l1380
  2696                           
  2697                           ; BSR set to: 0
  2698                           ;sms.c: 85: {
  2699                           ;sms.c: 86: at3 = md_uart_write_str_ok((uint8_t *)&cnmi[0], sizeof(cnmi), 1, 0);
  2700  002688  0E79               	movlw	low start_sms_ok@cnmi
  2701  00268A  6E16               	movwf	md_uart_write_str_ok@data,c
  2702  00268C  0E00               	movlw	high start_sms_ok@cnmi
  2703  00268E  6E17               	movwf	md_uart_write_str_ok@data+1,c
  2704  002690  0E0E               	movlw	14
  2705  002692  6E18               	movwf	md_uart_write_str_ok@len1,c
  2706  002694  0E01               	movlw	1
  2707  002696  6E19               	movwf	md_uart_write_str_ok@wantOk,c
  2708  002698  0E00               	movlw	0
  2709  00269A  6E1A               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  2710  00269C  ECD3  F011         	call	_md_uart_write_str_ok	;wreg free
  2711  0026A0  0100               	movlb	0	; () banked
  2712  0026A2  6FF3               	movwf	_at3& (0+255),b
  2713                           
  2714                           ; BSR set to: 0
  2715                           ;sms.c: 87: if (at3 == 1)
  2716  0026A4  05F3               	decf	_at3& (0+255),w,b
  2717  0026A6  A4D8               	btfss	status,2,c
  2718  0026A8  D002               	goto	l1380
  2719                           
  2720                           ; BSR set to: 0
  2721                           ;sms.c: 88: numUartRetries = 15;
  2722  0026AA  0E0F               	movlw	15
  2723  0026AC  6E4A               	movwf	_numUartRetries,c
  2724  0026AE                     l1380:
  2725                           
  2726                           ; BSR set to: 0
  2727                           ;sms.c: 89: }
  2728                           ;sms.c: 90: if (at1 == 5 || at2 == 5 || at3 == 5)
  2729                           
  2730                           ; BSR set to: 0
  2731                           
  2732                           ; BSR set to: 0
  2733  0026AE  0E05               	movlw	5
  2734  0026B0  19F5               	xorwf	_at1& (0+255),w,b
  2735  0026B2  B4D8               	btfsc	status,2,c
  2736  0026B4  D008               	goto	u8750
  2737                           
  2738                           ; BSR set to: 0
  2739  0026B6  0E05               	movlw	5
  2740  0026B8  19F4               	xorwf	_at2& (0+255),w,b
  2741  0026BA  B4D8               	btfsc	status,2,c
  2742  0026BC  D004               	goto	u8750
  2743                           
  2744                           ; BSR set to: 0
  2745  0026BE  0E05               	movlw	5
  2746  0026C0  19F3               	xorwf	_at3& (0+255),w,b
  2747  0026C2  A4D8               	btfss	status,2,c
  2748  0026C4  D004               	goto	l1381
  2749  0026C6                     u8750:
  2750                           
  2751                           ; BSR set to: 0
  2752                           ;sms.c: 91: {
  2753                           ;sms.c: 92: clear_at_ok();
  2754                           
  2755                           ; BSR set to: 0
  2756  0026C6  EC5E  F017         	call	_clear_at_ok	;wreg free
  2757                           
  2758                           ;sms.c: 93: return 5;
  2759  0026CA  0E05               	movlw	5
  2760                           
  2761                           ;sms.c: 94: }
  2762  0026CC  0012               	return	
  2763  0026CE                     l1381:
  2764                           
  2765                           ;sms.c: 95: else if (at1 == 1 && at2 == 1 && at3 == 1)
  2766  0026CE  0100               	movlb	0	; () banked
  2767  0026D0  05F5               	decf	_at1& (0+255),w,b
  2768  0026D2  A4D8               	btfss	status,2,c
  2769  0026D4  D00A               	goto	l1386
  2770                           
  2771                           ; BSR set to: 0
  2772  0026D6  05F4               	decf	_at2& (0+255),w,b
  2773  0026D8  A4D8               	btfss	status,2,c
  2774  0026DA  D007               	goto	l1386
  2775                           
  2776                           ; BSR set to: 0
  2777  0026DC  05F3               	decf	_at3& (0+255),w,b
  2778  0026DE  A4D8               	btfss	status,2,c
  2779  0026E0  D004               	goto	l1386
  2780                           
  2781                           ; BSR set to: 0
  2782                           ;sms.c: 96: {
  2783                           ;sms.c: 97: clear_at_ok();
  2784  0026E2  EC5E  F017         	call	_clear_at_ok	;wreg free
  2785                           
  2786                           ;sms.c: 98: return 1;
  2787  0026E6  0E01               	movlw	1
  2788                           
  2789                           ;sms.c: 99: }
  2790  0026E8  0012               	return	
  2791  0026EA                     l1386:
  2792                           
  2793                           ;sms.c: 100: else
  2794                           ;sms.c: 101: return 2;
  2795  0026EA  0E02               	movlw	2
  2796  0026EC  0012               	return	
  2797  0026EE                     __end_of_start_sms_ok:
  2798                           	opt stack 0
  2799                           tblptru	equ	0xFF8
  2800                           tblptrh	equ	0xFF7
  2801                           tblptrl	equ	0xFF6
  2802                           tablat	equ	0xFF5
  2803                           intcon	equ	0xFF2
  2804                           postinc0	equ	0xFEE
  2805                           wreg	equ	0xFE8
  2806                           postdec1	equ	0xFE5
  2807                           plusw1	equ	0xFE3
  2808                           fsr1l	equ	0xFE1
  2809                           plusw2	equ	0xFDB
  2810                           status	equ	0xFD8
  2811                           
  2812 ;; *************** function _start_modem *****************
  2813 ;; Defined at:
  2814 ;;		line 60 in file "modem.c"
  2815 ;; Parameters:    Size  Location     Type
  2816 ;;		None
  2817 ;; Auto vars:     Size  Location     Type
  2818 ;;		None
  2819 ;; Return value:  Size  Location     Type
  2820 ;;                  1    wreg      void 
  2821 ;; Registers used:
  2822 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2823 ;; Tracked objects:
  2824 ;;		On entry : 0/0
  2825 ;;		On exit  : 0/0
  2826 ;;		Unchanged: 0/0
  2827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2830 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2831 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2832 ;;Total ram usage:        2 bytes
  2833 ;; Hardware stack levels used:    1
  2834 ;; Hardware stack levels required when called:    7
  2835 ;; This function calls:
  2836 ;;		_check_md_state
  2837 ;;		_is_first_run
  2838 ;;		_save_first_run
  2839 ;;		_start_md_boot_timer
  2840 ;;		_write_defaults
  2841 ;; This function is called by:
  2842 ;;		_listen_sms
  2843 ;; This function uses a non-reentrant model
  2844 ;;
  2845                           
  2846                           	psect	text9
  2847  002CAC                     __ptext9:
  2848                           	opt stack 0
  2849  002CAC                     _start_modem:
  2850                           	opt stack 21
  2851                           
  2852                           ;modem.c: 62: if (is_first_run())
  2853                           
  2854                           ;incstack = 0
  2855  002CAC  EC0E  F018         	call	_is_first_run	;wreg free
  2856  002CB0  0900               	iorlw	0
  2857  002CB2  B4D8               	btfsc	status,2,c
  2858  002CB4  D004               	goto	l452
  2859                           
  2860                           ;modem.c: 63: {
  2861                           ;modem.c: 64: write_defaults();
  2862  002CB6  EC17  F008         	call	_write_defaults	;wreg free
  2863                           
  2864                           ;modem.c: 67: save_first_run();
  2865  002CBA  EC2C  F018         	call	_save_first_run	;wreg free
  2866  002CBE                     l452:
  2867                           
  2868                           ;modem.c: 68: }
  2869                           ;modem.c: 69: check_md_state();
  2870  002CBE  ECFC  F016         	call	_check_md_state	;wreg free
  2871                           
  2872                           ;modem.c: 70: if (MD_STATE != WAITING || (MD_STATE == WAITING && md_timeout_cnt >= 2))
  2873  002CC2  043B               	decf	_MD_STATE,w,c
  2874  002CC4  A4D8               	btfss	status,2,c
  2875  002CC6  D006               	goto	u8590
  2876  002CC8  043B               	decf	_MD_STATE,w,c
  2877  002CCA  A4D8               	btfss	status,2,c
  2878  002CCC  D01A               	goto	l453
  2879  002CCE  0E01               	movlw	1
  2880  002CD0  6432               	cpfsgt	_md_timeout_cnt,c
  2881  002CD2  D017               	goto	l453
  2882  002CD4                     u8590:
  2883                           
  2884                           ;modem.c: 71: {
  2885                           ;modem.c: 72: LATAbits.LATA3 = 0;
  2886  002CD4  9689               	bcf	3977,3,c	;volatile
  2887                           
  2888                           ;modem.c: 75: _delay((unsigned long)((200)*(8000000/4000.0)));
  2889  002CD6  0E03               	movlw	3
  2890  002CD8  6E27               	movwf	(??_start_modem+1)& (0+255),c
  2891  002CDA  0E08               	movlw	8
  2892  002CDC  6E26               	movwf	??_start_modem& (0+255),c
  2893  002CDE  0E77               	movlw	119
  2894  002CE0                     u9337:
  2895  002CE0  2EE8               	decfsz	wreg,f,c
  2896  002CE2  D7FE               	bra	u9337
  2897  002CE4  2E26               	decfsz	??_start_modem& (0+255),f,c
  2898  002CE6  D7FC               	bra	u9337
  2899  002CE8  2E27               	decfsz	(??_start_modem+1)& (0+255),f,c
  2900  002CEA  D7FA               	bra	u9337
  2901  002CEC  F000               	nop	
  2902                           
  2903                           ;modem.c: 76: LATAbits.LATA3 = 1;
  2904  002CEE  8689               	bsf	3977,3,c	;volatile
  2905                           
  2906                           ;modem.c: 77: MD_STATE = WAITING;
  2907  002CF0  0E01               	movlw	1
  2908  002CF2  6E3B               	movwf	_MD_STATE,c
  2909                           
  2910                           ;modem.c: 78: modem_awake = 0;
  2911  002CF4  0E00               	movlw	0
  2912  002CF6  6E3A               	movwf	_modem_awake,c
  2913                           
  2914                           ;modem.c: 79: md_timeout_cnt = 0;
  2915  002CF8  0E00               	movlw	0
  2916  002CFA  6E32               	movwf	_md_timeout_cnt,c
  2917                           
  2918                           ;modem.c: 82: numUartRetries = 15;
  2919  002CFC  0E0F               	movlw	15
  2920  002CFE  6E4A               	movwf	_numUartRetries,c
  2921                           
  2922                           ;modem.c: 83: }
  2923  002D00  0012               	return	
  2924  002D02                     l453:
  2925                           
  2926                           ;modem.c: 84: else if (MD_STATE == WAITING && (md_timeout_cnt == 1))
  2927  002D02  043B               	decf	_MD_STATE,w,c
  2928  002D04  A4D8               	btfss	status,2,c
  2929  002D06  0012               	return	
  2930  002D08  0432               	decf	_md_timeout_cnt,w,c
  2931  002D0A  A4D8               	btfss	status,2,c
  2932  002D0C  0012               	return	
  2933                           
  2934                           ;modem.c: 85: {
  2935                           ;modem.c: 86: MD_STATE = WAITING;
  2936  002D0E  0E01               	movlw	1
  2937  002D10  6E3B               	movwf	_MD_STATE,c
  2938                           
  2939                           ;modem.c: 87: start_md_boot_timer();
  2940  002D12  EC63  F018         	call	_start_md_boot_timer	;wreg free
  2941                           
  2942                           ;modem.c: 88: numUartRetries = 15;
  2943  002D16  0E0F               	movlw	15
  2944  002D18  6E4A               	movwf	_numUartRetries,c
  2945  002D1A  0012               	return	
  2946  002D1C                     __end_of_start_modem:
  2947                           	opt stack 0
  2948                           tblptru	equ	0xFF8
  2949                           tblptrh	equ	0xFF7
  2950                           tblptrl	equ	0xFF6
  2951                           tablat	equ	0xFF5
  2952                           intcon	equ	0xFF2
  2953                           postinc0	equ	0xFEE
  2954                           wreg	equ	0xFE8
  2955                           postdec1	equ	0xFE5
  2956                           plusw1	equ	0xFE3
  2957                           fsr1l	equ	0xFE1
  2958                           plusw2	equ	0xFDB
  2959                           status	equ	0xFD8
  2960                           
  2961 ;; *************** function _write_defaults *****************
  2962 ;; Defined at:
  2963 ;;		line 14 in file "cell_settings.c"
  2964 ;; Parameters:    Size  Location     Type
  2965 ;;		None
  2966 ;; Auto vars:     Size  Location     Type
  2967 ;;  i               1   28[COMRAM] unsigned char 
  2968 ;;  temp            1   27[COMRAM] unsigned char 
  2969 ;;  addr            1   26[COMRAM] unsigned char 
  2970 ;;  page            1   25[COMRAM] unsigned char 
  2971 ;; Return value:  Size  Location     Type
  2972 ;;                  1    wreg      void 
  2973 ;; Registers used:
  2974 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2975 ;; Tracked objects:
  2976 ;;		On entry : 0/0
  2977 ;;		On exit  : 0/0
  2978 ;;		Unchanged: 0/0
  2979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2981 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2982 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2983 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2984 ;;Total ram usage:        6 bytes
  2985 ;; Hardware stack levels used:    1
  2986 ;; Hardware stack levels required when called:    4
  2987 ;; This function calls:
  2988 ;;		_ee_read
  2989 ;;		_ee_write
  2990 ;; This function is called by:
  2991 ;;		_start_modem
  2992 ;; This function uses a non-reentrant model
  2993 ;;
  2994                           
  2995                           	psect	text10
  2996  00102E                     __ptext10:
  2997                           	opt stack 0
  2998  00102E                     _write_defaults:
  2999                           	opt stack 23
  3000                           
  3001                           ;cell_settings.c: 16: saveINTCONbits = INTCON;
  3002                           
  3003                           ;incstack = 0
  3004  00102E  CFF2 F0E8          	movff	intcon,_saveINTCONbits	;volatile
  3005                           
  3006                           ;cell_settings.c: 17: INTCONbits.GIE = 0;
  3007  001032  9EF2               	bcf	intcon,7,c	;volatile
  3008                           
  3009                           ;cell_settings.c: 18: INTCONbits.GIEH = 0;
  3010  001034  9EF2               	bcf	intcon,7,c	;volatile
  3011                           
  3012                           ;cell_settings.c: 19: INTCONbits.GIEL = 0;
  3013  001036  9CF2               	bcf	intcon,6,c	;volatile
  3014                           
  3015                           ;cell_settings.c: 21: uint8_t page, addr, i, temp;
  3016                           ;cell_settings.c: 23: if( ee_read(0, 0x00)==VERSION[0] )
  3017  001038  0E00               	movlw	0
  3018  00103A  6E15               	movwf	ee_read@addr,c
  3019  00103C  0E00               	movlw	0
  3020  00103E  ECD9  F017         	call	_ee_read
  3021  001042  0100               	movlb	0	; () banked
  3022  001044  19FA               	xorwf	_VERSION& (0+255),w,b
  3023  001046  A4D8               	btfss	status,2,c
  3024  001048  D012               	goto	l1645
  3025                           
  3026                           ; BSR set to: 0
  3027                           ;cell_settings.c: 24: {
  3028                           ;cell_settings.c: 25: if( ee_read(0, 0x01)==VERSION[1] )
  3029  00104A  0E01               	movlw	1
  3030  00104C  6E15               	movwf	ee_read@addr,c
  3031  00104E  0E00               	movlw	0
  3032  001050  ECD9  F017         	call	_ee_read
  3033  001054  0100               	movlb	0	; () banked
  3034  001056  19FB               	xorwf	(_VERSION+1)& (0+255),w,b
  3035  001058  A4D8               	btfss	status,2,c
  3036  00105A  D009               	goto	l1645
  3037                           
  3038                           ; BSR set to: 0
  3039                           ;cell_settings.c: 26: {
  3040                           ;cell_settings.c: 27: if( ee_read(0, 0x02)==VERSION[2] )
  3041  00105C  0E02               	movlw	2
  3042  00105E  6E15               	movwf	ee_read@addr,c
  3043  001060  0E00               	movlw	0
  3044  001062  ECD9  F017         	call	_ee_read
  3045  001066  0100               	movlb	0	; () banked
  3046  001068  19FC               	xorwf	(_VERSION+2)& (0+255),w,b
  3047  00106A  B4D8               	btfsc	status,2,c
  3048  00106C  0012               	return	
  3049  00106E                     l1645:
  3050                           
  3051                           ; BSR set to: 0
  3052                           ;cell_settings.c: 29: }
  3053                           ;cell_settings.c: 30: }
  3054                           ;cell_settings.c: 33: page = 0x00;
  3055                           
  3056                           ; BSR set to: 0
  3057                           
  3058                           ; BSR set to: 0
  3059                           
  3060                           ; BSR set to: 0
  3061  00106E  0E00               	movlw	0
  3062  001070  6E1A               	movwf	write_defaults@page,c
  3063                           
  3064                           ;cell_settings.c: 34: addr = 0x10;
  3065  001072  0E10               	movlw	16
  3066  001074  6E1B               	movwf	write_defaults@addr,c
  3067                           
  3068                           ;cell_settings.c: 35: i = 0;
  3069  001076  0E00               	movlw	0
  3070  001078  6E1D               	movwf	write_defaults@i,c
  3071                           
  3072                           ;cell_settings.c: 36: while (i++ < 0x20 && temp != '#')
  3073  00107A  D013               	goto	l1647
  3074  00107C                     
  3075                           ;cell_settings.c: 37: {
  3076                           ;cell_settings.c: 38: temp = default_APN[i];
  3077                           
  3078                           ; BSR set to: 0
  3079  00107C  501D               	movf	write_defaults@i,w,c
  3080  00107E  0D01               	mullw	1
  3081  001080  0E20               	movlw	low _default_APN
  3082  001082  24F3               	addwf	prodl,w,c
  3083  001084  6EF6               	movwf	tblptrl,c
  3084  001086  0E10               	movlw	high _default_APN
  3085  001088  20F4               	addwfc	prodh,w,c
  3086  00108A  6EF7               	movwf	tblptrh,c
  3087  00108C                     	if	0	;There are less than 3 active tblptr bytes
  3088  00108C                     	endif
  3089  00108C  0008               	tblrd		*
  3090  00108E  CFF5 F01C          	movff	tablat,write_defaults@temp
  3091                           
  3092                           ;cell_settings.c: 39: ee_write(page, (uint8_t)(addr + i), temp);
  3093  001092  501B               	movf	write_defaults@addr,w,c
  3094  001094  241D               	addwf	write_defaults@i,w,c
  3095  001096  6E15               	movwf	ee_write@addr,c
  3096  001098  C01C  F016         	movff	write_defaults@temp,ee_write@data
  3097  00109C  501A               	movf	write_defaults@page,w,c
  3098  00109E  EC78  F017         	call	_ee_write
  3099  0010A2                     l1647:
  3100  0010A2  2A1D               	incf	write_defaults@i,f,c
  3101  0010A4  041D               	decf	write_defaults@i,w,c
  3102  0010A6  6E18               	movwf	??_write_defaults& (0+255),c
  3103  0010A8  0E20               	movlw	32
  3104  0010AA  6018               	cpfslt	??_write_defaults,c
  3105  0010AC  D004               	goto	u8150
  3106  0010AE  0E23               	movlw	35
  3107  0010B0  181C               	xorwf	write_defaults@temp,w,c
  3108  0010B2  A4D8               	btfss	status,2,c
  3109  0010B4  D7E3               	goto	l1648
  3110  0010B6                     u8150:
  3111                           
  3112                           ;cell_settings.c: 40: }
  3113                           ;cell_settings.c: 42: page = 0x00;
  3114  0010B6  0E00               	movlw	0
  3115  0010B8  6E1A               	movwf	write_defaults@page,c
  3116                           
  3117                           ;cell_settings.c: 43: addr = 0x30;
  3118  0010BA  0E30               	movlw	48
  3119  0010BC  6E1B               	movwf	write_defaults@addr,c
  3120                           
  3121                           ;cell_settings.c: 44: temp = 0x00;
  3122  0010BE  0E00               	movlw	0
  3123  0010C0  6E1C               	movwf	write_defaults@temp,c
  3124                           
  3125                           ;cell_settings.c: 45: i = 0;
  3126  0010C2  0E00               	movlw	0
  3127  0010C4  6E1D               	movwf	write_defaults@i,c
  3128                           
  3129                           ;cell_settings.c: 46: while (temp != '#')
  3130  0010C6  D014               	goto	l1652
  3131  0010C8                     
  3132                           ;cell_settings.c: 47: {
  3133                           ;cell_settings.c: 48: temp = default_IP1[i];
  3134  0010C8  501D               	movf	write_defaults@i,w,c
  3135  0010CA  0D01               	mullw	1
  3136  0010CC  0E1E               	movlw	low _default_IP1
  3137  0010CE  24F3               	addwf	prodl,w,c
  3138  0010D0  6EF6               	movwf	tblptrl,c
  3139  0010D2  0E10               	movlw	high _default_IP1
  3140  0010D4  20F4               	addwfc	prodh,w,c
  3141  0010D6  6EF7               	movwf	tblptrh,c
  3142  0010D8                     	if	0	;There are less than 3 active tblptr bytes
  3143  0010D8                     	endif
  3144  0010D8  0008               	tblrd		*
  3145  0010DA  CFF5 F01C          	movff	tablat,write_defaults@temp
  3146                           
  3147                           ;cell_settings.c: 49: ee_write(page, (uint8_t)(addr + i), temp);
  3148  0010DE  501B               	movf	write_defaults@addr,w,c
  3149  0010E0  241D               	addwf	write_defaults@i,w,c
  3150  0010E2  6E15               	movwf	ee_write@addr,c
  3151  0010E4  C01C  F016         	movff	write_defaults@temp,ee_write@data
  3152  0010E8  501A               	movf	write_defaults@page,w,c
  3153  0010EA  EC78  F017         	call	_ee_write
  3154                           
  3155                           ;cell_settings.c: 50: i++;
  3156  0010EE  2A1D               	incf	write_defaults@i,f,c
  3157  0010F0                     l1652:
  3158  0010F0  0E23               	movlw	35
  3159  0010F2  181C               	xorwf	write_defaults@temp,w,c
  3160  0010F4  A4D8               	btfss	status,2,c
  3161  0010F6  D7E8               	goto	l1653
  3162                           
  3163                           ;cell_settings.c: 51: }
  3164                           ;cell_settings.c: 53: page = 0x00;
  3165  0010F8  0E00               	movlw	0
  3166  0010FA  6E1A               	movwf	write_defaults@page,c
  3167                           
  3168                           ;cell_settings.c: 54: addr = 0x50;
  3169  0010FC  0E50               	movlw	80
  3170  0010FE  6E1B               	movwf	write_defaults@addr,c
  3171                           
  3172                           ;cell_settings.c: 55: temp = 0x00;
  3173  001100  0E00               	movlw	0
  3174  001102  6E1C               	movwf	write_defaults@temp,c
  3175                           
  3176                           ;cell_settings.c: 56: i = 0;
  3177  001104  0E00               	movlw	0
  3178  001106  6E1D               	movwf	write_defaults@i,c
  3179                           
  3180                           ;cell_settings.c: 57: while (temp != '#')
  3181  001108  D014               	goto	l1655
  3182  00110A                     
  3183                           ;cell_settings.c: 58: {
  3184                           ;cell_settings.c: 59: temp = default_IP2[i];
  3185  00110A  501D               	movf	write_defaults@i,w,c
  3186  00110C  0D01               	mullw	1
  3187  00110E  0E1C               	movlw	low _default_IP2
  3188  001110  24F3               	addwf	prodl,w,c
  3189  001112  6EF6               	movwf	tblptrl,c
  3190  001114  0E10               	movlw	high _default_IP2
  3191  001116  20F4               	addwfc	prodh,w,c
  3192  001118  6EF7               	movwf	tblptrh,c
  3193  00111A                     	if	0	;There are less than 3 active tblptr bytes
  3194  00111A                     	endif
  3195  00111A  0008               	tblrd		*
  3196  00111C  CFF5 F01C          	movff	tablat,write_defaults@temp
  3197                           
  3198                           ;cell_settings.c: 60: ee_write(page, (uint8_t)(addr + i), temp);
  3199  001120  501B               	movf	write_defaults@addr,w,c
  3200  001122  241D               	addwf	write_defaults@i,w,c
  3201  001124  6E15               	movwf	ee_write@addr,c
  3202  001126  C01C  F016         	movff	write_defaults@temp,ee_write@data
  3203  00112A  501A               	movf	write_defaults@page,w,c
  3204  00112C  EC78  F017         	call	_ee_write
  3205                           
  3206                           ;cell_settings.c: 61: i++;
  3207  001130  2A1D               	incf	write_defaults@i,f,c
  3208  001132                     l1655:
  3209  001132  0E23               	movlw	35
  3210  001134  181C               	xorwf	write_defaults@temp,w,c
  3211  001136  A4D8               	btfss	status,2,c
  3212  001138  D7E8               	goto	l1656
  3213                           
  3214                           ;cell_settings.c: 62: }
  3215                           ;cell_settings.c: 64: page = 0x00;
  3216  00113A  0E00               	movlw	0
  3217  00113C  6E1A               	movwf	write_defaults@page,c
  3218                           
  3219                           ;cell_settings.c: 65: addr = 0x70;
  3220  00113E  0E70               	movlw	112
  3221  001140  6E1B               	movwf	write_defaults@addr,c
  3222                           
  3223                           ;cell_settings.c: 66: temp = 0x00;
  3224  001142  0E00               	movlw	0
  3225  001144  6E1C               	movwf	write_defaults@temp,c
  3226                           
  3227                           ;cell_settings.c: 67: i = 0;
  3228  001146  0E00               	movlw	0
  3229  001148  6E1D               	movwf	write_defaults@i,c
  3230                           
  3231                           ;cell_settings.c: 68: while (temp != '#')
  3232  00114A  D014               	goto	l1658
  3233  00114C                     
  3234                           ;cell_settings.c: 69: {
  3235                           ;cell_settings.c: 70: temp = default_IP3[i];
  3236  00114C  501D               	movf	write_defaults@i,w,c
  3237  00114E  0D01               	mullw	1
  3238  001150  0E1A               	movlw	low _default_IP3
  3239  001152  24F3               	addwf	prodl,w,c
  3240  001154  6EF6               	movwf	tblptrl,c
  3241  001156  0E10               	movlw	high _default_IP3
  3242  001158  20F4               	addwfc	prodh,w,c
  3243  00115A  6EF7               	movwf	tblptrh,c
  3244  00115C                     	if	0	;There are less than 3 active tblptr bytes
  3245  00115C                     	endif
  3246  00115C  0008               	tblrd		*
  3247  00115E  CFF5 F01C          	movff	tablat,write_defaults@temp
  3248                           
  3249                           ;cell_settings.c: 71: ee_write(page, (uint8_t)(addr + i), temp);
  3250  001162  501B               	movf	write_defaults@addr,w,c
  3251  001164  241D               	addwf	write_defaults@i,w,c
  3252  001166  6E15               	movwf	ee_write@addr,c
  3253  001168  C01C  F016         	movff	write_defaults@temp,ee_write@data
  3254  00116C  501A               	movf	write_defaults@page,w,c
  3255  00116E  EC78  F017         	call	_ee_write
  3256                           
  3257                           ;cell_settings.c: 72: i++;
  3258  001172  2A1D               	incf	write_defaults@i,f,c
  3259  001174                     l1658:
  3260  001174  0E23               	movlw	35
  3261  001176  181C               	xorwf	write_defaults@temp,w,c
  3262  001178  A4D8               	btfss	status,2,c
  3263  00117A  D7E8               	goto	l1659
  3264                           
  3265                           ;cell_settings.c: 73: }
  3266                           ;cell_settings.c: 75: page = 0x00;
  3267  00117C  0E00               	movlw	0
  3268  00117E  6E1A               	movwf	write_defaults@page,c
  3269                           
  3270                           ;cell_settings.c: 76: addr = 0x90;
  3271  001180  0E90               	movlw	144
  3272  001182  6E1B               	movwf	write_defaults@addr,c
  3273                           
  3274                           ;cell_settings.c: 77: temp = 0x00;
  3275  001184  0E00               	movlw	0
  3276  001186  6E1C               	movwf	write_defaults@temp,c
  3277                           
  3278                           ;cell_settings.c: 78: i = 0;
  3279  001188  0E00               	movlw	0
  3280  00118A  6E1D               	movwf	write_defaults@i,c
  3281                           
  3282                           ;cell_settings.c: 79: while (temp != '#')
  3283  00118C  D014               	goto	l1661
  3284  00118E                     
  3285                           ;cell_settings.c: 80: {
  3286                           ;cell_settings.c: 81: temp = default_IP4[i];
  3287  00118E  501D               	movf	write_defaults@i,w,c
  3288  001190  0D01               	mullw	1
  3289  001192  0E18               	movlw	low _default_IP4
  3290  001194  24F3               	addwf	prodl,w,c
  3291  001196  6EF6               	movwf	tblptrl,c
  3292  001198  0E10               	movlw	high _default_IP4
  3293  00119A  20F4               	addwfc	prodh,w,c
  3294  00119C  6EF7               	movwf	tblptrh,c
  3295  00119E                     	if	0	;There are less than 3 active tblptr bytes
  3296  00119E                     	endif
  3297  00119E  0008               	tblrd		*
  3298  0011A0  CFF5 F01C          	movff	tablat,write_defaults@temp
  3299                           
  3300                           ;cell_settings.c: 82: ee_write(page, (uint8_t)(addr + i), temp);
  3301  0011A4  501B               	movf	write_defaults@addr,w,c
  3302  0011A6  241D               	addwf	write_defaults@i,w,c
  3303  0011A8  6E15               	movwf	ee_write@addr,c
  3304  0011AA  C01C  F016         	movff	write_defaults@temp,ee_write@data
  3305  0011AE  501A               	movf	write_defaults@page,w,c
  3306  0011B0  EC78  F017         	call	_ee_write
  3307                           
  3308                           ;cell_settings.c: 83: i++;
  3309  0011B4  2A1D               	incf	write_defaults@i,f,c
  3310  0011B6                     l1661:
  3311  0011B6  0E23               	movlw	35
  3312  0011B8  181C               	xorwf	write_defaults@temp,w,c
  3313  0011BA  A4D8               	btfss	status,2,c
  3314  0011BC  D7E8               	goto	l1662
  3315                           
  3316                           ;cell_settings.c: 84: }
  3317                           ;cell_settings.c: 87: page = 0x00;
  3318  0011BE  0E00               	movlw	0
  3319  0011C0  6E1A               	movwf	write_defaults@page,c
  3320                           
  3321                           ;cell_settings.c: 88: addr = 0xB0;
  3322  0011C2  0EB0               	movlw	176
  3323  0011C4  6E1B               	movwf	write_defaults@addr,c
  3324                           
  3325                           ;cell_settings.c: 89: ee_write(page, addr, (default_PORT1 >> 8));
  3326  0011C6  C01B  F015         	movff	write_defaults@addr,ee_write@addr
  3327  0011CA  0E16               	movlw	low _default_PORT1
  3328  0011CC  6EF6               	movwf	tblptrl,c
  3329  0011CE                     	if	1	;There is more than 1 active tblptr byte
  3330  0011CE  0E10               	movlw	high _default_PORT1
  3331  0011D0  6EF7               	movwf	tblptrh,c
  3332  0011D2                     	endif
  3333  0011D2                     	if	0	;There are less than 3 active tblptr bytes
  3334  0011D2                     	endif
  3335  0011D2  0009               	tblrd		*+
  3336  0011D4  CFF5 F018          	movff	tablat,??_write_defaults
  3337  0011D8  0009               	tblrd		*+
  3338  0011DA  CFF5 F019          	movff	tablat,??_write_defaults+1
  3339  0011DE  C019  F018         	movff	??_write_defaults+1,??_write_defaults
  3340  0011E2  6A19               	clrf	??_write_defaults+1,c
  3341  0011E4  5018               	movf	??_write_defaults,w,c
  3342  0011E6  6E16               	movwf	ee_write@data,c
  3343  0011E8  501A               	movf	write_defaults@page,w,c
  3344  0011EA  EC78  F017         	call	_ee_write
  3345                           
  3346                           ;cell_settings.c: 90: ee_write(page, (uint8_t)(addr + 1), (default_PORT1 & 0x00FF));
  3347  0011EE  281B               	incf	write_defaults@addr,w,c
  3348  0011F0  6E15               	movwf	ee_write@addr,c
  3349  0011F2  0E16               	movlw	low _default_PORT1
  3350  0011F4  6EF6               	movwf	tblptrl,c
  3351  0011F6                     	if	1	;There is more than 1 active tblptr byte
  3352  0011F6  0E10               	movlw	high _default_PORT1
  3353  0011F8  6EF7               	movwf	tblptrh,c
  3354  0011FA                     	endif
  3355  0011FA                     	if	0	;There are less than 3 active tblptr bytes
  3356  0011FA                     	endif
  3357  0011FA  0008               	tblrd		*
  3358  0011FC  CFF5 F016          	movff	tablat,ee_write@data
  3359  001200  501A               	movf	write_defaults@page,w,c
  3360  001202  EC78  F017         	call	_ee_write
  3361                           
  3362                           ;cell_settings.c: 92: page = 0x00;
  3363  001206  0E00               	movlw	0
  3364  001208  6E1A               	movwf	write_defaults@page,c
  3365                           
  3366                           ;cell_settings.c: 93: addr = 0xB2;
  3367  00120A  0EB2               	movlw	178
  3368  00120C  6E1B               	movwf	write_defaults@addr,c
  3369                           
  3370                           ;cell_settings.c: 94: ee_write(page, addr, (default_PORT2 >> 8));
  3371  00120E  C01B  F015         	movff	write_defaults@addr,ee_write@addr
  3372  001212  0E14               	movlw	low _default_PORT2
  3373  001214  6EF6               	movwf	tblptrl,c
  3374  001216                     	if	1	;There is more than 1 active tblptr byte
  3375  001216  0E10               	movlw	high _default_PORT2
  3376  001218  6EF7               	movwf	tblptrh,c
  3377  00121A                     	endif
  3378  00121A                     	if	0	;There are less than 3 active tblptr bytes
  3379  00121A                     	endif
  3380  00121A  0009               	tblrd		*+
  3381  00121C  CFF5 F018          	movff	tablat,??_write_defaults
  3382  001220  0009               	tblrd		*+
  3383  001222  CFF5 F019          	movff	tablat,??_write_defaults+1
  3384  001226  C019  F018         	movff	??_write_defaults+1,??_write_defaults
  3385  00122A  6A19               	clrf	??_write_defaults+1,c
  3386  00122C  5018               	movf	??_write_defaults,w,c
  3387  00122E  6E16               	movwf	ee_write@data,c
  3388  001230  501A               	movf	write_defaults@page,w,c
  3389  001232  EC78  F017         	call	_ee_write
  3390                           
  3391                           ;cell_settings.c: 95: ee_write(page, (uint8_t)(addr + 1), (default_PORT2 & 0x00FF));
  3392  001236  281B               	incf	write_defaults@addr,w,c
  3393  001238  6E15               	movwf	ee_write@addr,c
  3394  00123A  0E14               	movlw	low _default_PORT2
  3395  00123C  6EF6               	movwf	tblptrl,c
  3396  00123E                     	if	1	;There is more than 1 active tblptr byte
  3397  00123E  0E10               	movlw	high _default_PORT2
  3398  001240  6EF7               	movwf	tblptrh,c
  3399  001242                     	endif
  3400  001242                     	if	0	;There are less than 3 active tblptr bytes
  3401  001242                     	endif
  3402  001242  0008               	tblrd		*
  3403  001244  CFF5 F016          	movff	tablat,ee_write@data
  3404  001248  501A               	movf	write_defaults@page,w,c
  3405  00124A  EC78  F017         	call	_ee_write
  3406                           
  3407                           ;cell_settings.c: 97: page = 0x00;
  3408  00124E  0E00               	movlw	0
  3409  001250  6E1A               	movwf	write_defaults@page,c
  3410                           
  3411                           ;cell_settings.c: 98: addr = 0xB4;
  3412  001252  0EB4               	movlw	180
  3413  001254  6E1B               	movwf	write_defaults@addr,c
  3414                           
  3415                           ;cell_settings.c: 99: ee_write(page, addr, (default_PORT3 >> 8));
  3416  001256  C01B  F015         	movff	write_defaults@addr,ee_write@addr
  3417  00125A  0E12               	movlw	low _default_PORT3
  3418  00125C  6EF6               	movwf	tblptrl,c
  3419  00125E                     	if	1	;There is more than 1 active tblptr byte
  3420  00125E  0E10               	movlw	high _default_PORT3
  3421  001260  6EF7               	movwf	tblptrh,c
  3422  001262                     	endif
  3423  001262                     	if	0	;There are less than 3 active tblptr bytes
  3424  001262                     	endif
  3425  001262  0009               	tblrd		*+
  3426  001264  CFF5 F018          	movff	tablat,??_write_defaults
  3427  001268  0009               	tblrd		*+
  3428  00126A  CFF5 F019          	movff	tablat,??_write_defaults+1
  3429  00126E  C019  F018         	movff	??_write_defaults+1,??_write_defaults
  3430  001272  6A19               	clrf	??_write_defaults+1,c
  3431  001274  5018               	movf	??_write_defaults,w,c
  3432  001276  6E16               	movwf	ee_write@data,c
  3433  001278  501A               	movf	write_defaults@page,w,c
  3434  00127A  EC78  F017         	call	_ee_write
  3435                           
  3436                           ;cell_settings.c: 100: ee_write(page, (uint8_t)(addr + 1), (default_PORT3 & 0x00FF));
  3437  00127E  281B               	incf	write_defaults@addr,w,c
  3438  001280  6E15               	movwf	ee_write@addr,c
  3439  001282  0E12               	movlw	low _default_PORT3
  3440  001284  6EF6               	movwf	tblptrl,c
  3441  001286                     	if	1	;There is more than 1 active tblptr byte
  3442  001286  0E10               	movlw	high _default_PORT3
  3443  001288  6EF7               	movwf	tblptrh,c
  3444  00128A                     	endif
  3445  00128A                     	if	0	;There are less than 3 active tblptr bytes
  3446  00128A                     	endif
  3447  00128A  0008               	tblrd		*
  3448  00128C  CFF5 F016          	movff	tablat,ee_write@data
  3449  001290  501A               	movf	write_defaults@page,w,c
  3450  001292  EC78  F017         	call	_ee_write
  3451                           
  3452                           ;cell_settings.c: 102: page = 0x00;
  3453  001296  0E00               	movlw	0
  3454  001298  6E1A               	movwf	write_defaults@page,c
  3455                           
  3456                           ;cell_settings.c: 103: addr = 0xB6;
  3457  00129A  0EB6               	movlw	182
  3458  00129C  6E1B               	movwf	write_defaults@addr,c
  3459                           
  3460                           ;cell_settings.c: 104: ee_write(page, addr, (default_PORT4 >> 8));
  3461  00129E  C01B  F015         	movff	write_defaults@addr,ee_write@addr
  3462  0012A2  0E10               	movlw	low _default_PORT4
  3463  0012A4  6EF6               	movwf	tblptrl,c
  3464  0012A6                     	if	1	;There is more than 1 active tblptr byte
  3465  0012A6  0E10               	movlw	high _default_PORT4
  3466  0012A8  6EF7               	movwf	tblptrh,c
  3467  0012AA                     	endif
  3468  0012AA                     	if	0	;There are less than 3 active tblptr bytes
  3469  0012AA                     	endif
  3470  0012AA  0009               	tblrd		*+
  3471  0012AC  CFF5 F018          	movff	tablat,??_write_defaults
  3472  0012B0  0009               	tblrd		*+
  3473  0012B2  CFF5 F019          	movff	tablat,??_write_defaults+1
  3474  0012B6  C019  F018         	movff	??_write_defaults+1,??_write_defaults
  3475  0012BA  6A19               	clrf	??_write_defaults+1,c
  3476  0012BC  5018               	movf	??_write_defaults,w,c
  3477  0012BE  6E16               	movwf	ee_write@data,c
  3478  0012C0  501A               	movf	write_defaults@page,w,c
  3479  0012C2  EC78  F017         	call	_ee_write
  3480                           
  3481                           ;cell_settings.c: 105: ee_write(page, (uint8_t)(addr + 1), (default_PORT4 & 0x00FF));
  3482  0012C6  281B               	incf	write_defaults@addr,w,c
  3483  0012C8  6E15               	movwf	ee_write@addr,c
  3484  0012CA  0E10               	movlw	low _default_PORT4
  3485  0012CC  6EF6               	movwf	tblptrl,c
  3486  0012CE                     	if	1	;There is more than 1 active tblptr byte
  3487  0012CE  0E10               	movlw	high _default_PORT4
  3488  0012D0  6EF7               	movwf	tblptrh,c
  3489  0012D2                     	endif
  3490  0012D2                     	if	0	;There are less than 3 active tblptr bytes
  3491  0012D2                     	endif
  3492  0012D2  0008               	tblrd		*
  3493  0012D4  CFF5 F016          	movff	tablat,ee_write@data
  3494  0012D8  501A               	movf	write_defaults@page,w,c
  3495  0012DA  EC78  F017         	call	_ee_write
  3496                           
  3497                           ;cell_settings.c: 108: page = 0x00;
  3498  0012DE  0E00               	movlw	0
  3499  0012E0  6E1A               	movwf	write_defaults@page,c
  3500                           
  3501                           ;cell_settings.c: 109: addr = 0xC0;
  3502  0012E2  0EC0               	movlw	192
  3503  0012E4  6E1B               	movwf	write_defaults@addr,c
  3504                           
  3505                           ;cell_settings.c: 110: temp = 0x00;
  3506  0012E6  0E00               	movlw	0
  3507  0012E8  6E1C               	movwf	write_defaults@temp,c
  3508                           
  3509                           ;cell_settings.c: 111: i = 0;
  3510  0012EA  0E00               	movlw	0
  3511  0012EC  6E1D               	movwf	write_defaults@i,c
  3512                           
  3513                           ;cell_settings.c: 112: while (temp != '#')
  3514  0012EE  D014               	goto	l1664
  3515  0012F0                     
  3516                           ;cell_settings.c: 113: {
  3517                           ;cell_settings.c: 114: temp = default_ACCESS_CODE[i];
  3518  0012F0  501D               	movf	write_defaults@i,w,c
  3519  0012F2  0D01               	mullw	1
  3520  0012F4  0E07               	movlw	low _default_ACCESS_CODE
  3521  0012F6  24F3               	addwf	prodl,w,c
  3522  0012F8  6EF6               	movwf	tblptrl,c
  3523  0012FA  0E10               	movlw	high _default_ACCESS_CODE
  3524  0012FC  20F4               	addwfc	prodh,w,c
  3525  0012FE  6EF7               	movwf	tblptrh,c
  3526  001300                     	if	0	;There are less than 3 active tblptr bytes
  3527  001300                     	endif
  3528  001300  0008               	tblrd		*
  3529  001302  CFF5 F01C          	movff	tablat,write_defaults@temp
  3530                           
  3531                           ;cell_settings.c: 115: ee_write(page, (uint8_t)(addr + i), temp);
  3532  001306  501B               	movf	write_defaults@addr,w,c
  3533  001308  241D               	addwf	write_defaults@i,w,c
  3534  00130A  6E15               	movwf	ee_write@addr,c
  3535  00130C  C01C  F016         	movff	write_defaults@temp,ee_write@data
  3536  001310  501A               	movf	write_defaults@page,w,c
  3537  001312  EC78  F017         	call	_ee_write
  3538                           
  3539                           ;cell_settings.c: 116: i ++;
  3540  001316  2A1D               	incf	write_defaults@i,f,c
  3541  001318                     l1664:
  3542  001318  0E23               	movlw	35
  3543  00131A  181C               	xorwf	write_defaults@temp,w,c
  3544  00131C  A4D8               	btfss	status,2,c
  3545  00131E  D7E8               	goto	l1665
  3546                           
  3547                           ;cell_settings.c: 117: }
  3548                           ;cell_settings.c: 120: ee_write(0x00, 0xC7, default_PROGRAM_ACK);
  3549  001320  0EC7               	movlw	199
  3550  001322  6E15               	movwf	ee_write@addr,c
  3551  001324  0E2B               	movlw	low _default_PROGRAM_ACK
  3552  001326  6EF6               	movwf	tblptrl,c
  3553  001328                     	if	1	;There is more than 1 active tblptr byte
  3554  001328  0E10               	movlw	high _default_PROGRAM_ACK
  3555  00132A  6EF7               	movwf	tblptrh,c
  3556  00132C                     	endif
  3557  00132C                     	if	0	;There are less than 3 active tblptr bytes
  3558  00132C                     	endif
  3559  00132C  0008               	tblrd		*
  3560  00132E  CFF5 F016          	movff	tablat,ee_write@data
  3561  001332  0E00               	movlw	0
  3562  001334  EC78  F017         	call	_ee_write
  3563                           
  3564                           ;cell_settings.c: 122: ee_write(0x00, 0xC8, default_TEST_FREQ);
  3565  001338  0EC8               	movlw	200
  3566  00133A  6E15               	movwf	ee_write@addr,c
  3567  00133C  0E2A               	movlw	low _default_TEST_FREQ
  3568  00133E  6EF6               	movwf	tblptrl,c
  3569  001340                     	if	1	;There is more than 1 active tblptr byte
  3570  001340  0E10               	movlw	high _default_TEST_FREQ
  3571  001342  6EF7               	movwf	tblptrh,c
  3572  001344                     	endif
  3573  001344                     	if	0	;There are less than 3 active tblptr bytes
  3574  001344                     	endif
  3575  001344  0008               	tblrd		*
  3576  001346  CFF5 F016          	movff	tablat,ee_write@data
  3577  00134A  0E00               	movlw	0
  3578  00134C  EC78  F017         	call	_ee_write
  3579                           
  3580                           ;cell_settings.c: 124: ee_write(0x00, 0xC9, default_SERVER_ACK_TIME);
  3581  001350  0EC9               	movlw	201
  3582  001352  6E15               	movwf	ee_write@addr,c
  3583  001354  0E29               	movlw	low _default_SERVER_ACK_TIME
  3584  001356  6EF6               	movwf	tblptrl,c
  3585  001358                     	if	1	;There is more than 1 active tblptr byte
  3586  001358  0E10               	movlw	high _default_SERVER_ACK_TIME
  3587  00135A  6EF7               	movwf	tblptrh,c
  3588  00135C                     	endif
  3589  00135C                     	if	0	;There are less than 3 active tblptr bytes
  3590  00135C                     	endif
  3591  00135C  0008               	tblrd		*
  3592  00135E  CFF5 F016          	movff	tablat,ee_write@data
  3593  001362  0E00               	movlw	0
  3594  001364  EC78  F017         	call	_ee_write
  3595                           
  3596                           ;cell_settings.c: 126: ee_write(0x00, 0xB8, default_SMS_WAIT_TIME);
  3597  001368  0EB8               	movlw	184
  3598  00136A  6E15               	movwf	ee_write@addr,c
  3599  00136C  0E23               	movlw	low _default_SMS_WAIT_TIME
  3600  00136E  6EF6               	movwf	tblptrl,c
  3601  001370                     	if	1	;There is more than 1 active tblptr byte
  3602  001370  0E10               	movlw	high _default_SMS_WAIT_TIME
  3603  001372  6EF7               	movwf	tblptrh,c
  3604  001374                     	endif
  3605  001374                     	if	0	;There are less than 3 active tblptr bytes
  3606  001374                     	endif
  3607  001374  0008               	tblrd		*
  3608  001376  CFF5 F016          	movff	tablat,ee_write@data
  3609  00137A  0E00               	movlw	0
  3610  00137C  EC78  F017         	call	_ee_write
  3611                           
  3612                           ;cell_settings.c: 128: page = 0x00;
  3613  001380  0E00               	movlw	0
  3614  001382  6E1A               	movwf	write_defaults@page,c
  3615                           
  3616                           ;cell_settings.c: 129: addr = 0xCA;
  3617  001384  0ECA               	movlw	202
  3618  001386  6E1B               	movwf	write_defaults@addr,c
  3619                           
  3620                           ;cell_settings.c: 130: temp = 0x00;
  3621  001388  0E00               	movlw	0
  3622  00138A  6E1C               	movwf	write_defaults@temp,c
  3623                           
  3624                           ;cell_settings.c: 131: i = 0;
  3625  00138C  0E00               	movlw	0
  3626  00138E  6E1D               	movwf	write_defaults@i,c
  3627                           
  3628                           ;cell_settings.c: 132: while (temp != '#')
  3629  001390  D014               	goto	l1667
  3630  001392                     
  3631                           ;cell_settings.c: 133: {
  3632                           ;cell_settings.c: 134: temp = default_ACCT[i];
  3633  001392  501D               	movf	write_defaults@i,w,c
  3634  001394  0D01               	mullw	1
  3635  001396  0E01               	movlw	low _default_ACCT
  3636  001398  24F3               	addwf	prodl,w,c
  3637  00139A  6EF6               	movwf	tblptrl,c
  3638  00139C  0E10               	movlw	high _default_ACCT
  3639  00139E  20F4               	addwfc	prodh,w,c
  3640  0013A0  6EF7               	movwf	tblptrh,c
  3641  0013A2                     	if	0	;There are less than 3 active tblptr bytes
  3642  0013A2                     	endif
  3643  0013A2  0008               	tblrd		*
  3644  0013A4  CFF5 F01C          	movff	tablat,write_defaults@temp
  3645                           
  3646                           ;cell_settings.c: 135: ee_write(page, (uint8_t)(addr + i), temp);
  3647  0013A8  501B               	movf	write_defaults@addr,w,c
  3648  0013AA  241D               	addwf	write_defaults@i,w,c
  3649  0013AC  6E15               	movwf	ee_write@addr,c
  3650  0013AE  C01C  F016         	movff	write_defaults@temp,ee_write@data
  3651  0013B2  501A               	movf	write_defaults@page,w,c
  3652  0013B4  EC78  F017         	call	_ee_write
  3653                           
  3654                           ;cell_settings.c: 136: i ++;
  3655  0013B8  2A1D               	incf	write_defaults@i,f,c
  3656  0013BA                     l1667:
  3657  0013BA  0E23               	movlw	35
  3658  0013BC  181C               	xorwf	write_defaults@temp,w,c
  3659  0013BE  A4D8               	btfss	status,2,c
  3660  0013C0  D7E8               	goto	l1668
  3661                           
  3662                           ;cell_settings.c: 137: }
  3663                           ;cell_settings.c: 139: page = 0x00;
  3664  0013C2  0E00               	movlw	0
  3665  0013C4  6E1A               	movwf	write_defaults@page,c
  3666                           
  3667                           ;cell_settings.c: 140: addr = 0xD0;
  3668  0013C6  0ED0               	movlw	208
  3669  0013C8  6E1B               	movwf	write_defaults@addr,c
  3670                           
  3671                           ;cell_settings.c: 141: temp = 0x00;
  3672  0013CA  0E00               	movlw	0
  3673  0013CC  6E1C               	movwf	write_defaults@temp,c
  3674                           
  3675                           ;cell_settings.c: 142: i = 0;
  3676  0013CE  0E00               	movlw	0
  3677  0013D0  6E1D               	movwf	write_defaults@i,c
  3678                           
  3679                           ;cell_settings.c: 143: while (temp != '#')
  3680  0013D2  D014               	goto	l1670
  3681  0013D4                     
  3682                           ;cell_settings.c: 144: {
  3683                           ;cell_settings.c: 145: temp = default_LINE_CARD[i];
  3684  0013D4  501D               	movf	write_defaults@i,w,c
  3685  0013D6  0D01               	mullw	1
  3686  0013D8  0E0D               	movlw	low _default_LINE_CARD
  3687  0013DA  24F3               	addwf	prodl,w,c
  3688  0013DC  6EF6               	movwf	tblptrl,c
  3689  0013DE  0E10               	movlw	high _default_LINE_CARD
  3690  0013E0  20F4               	addwfc	prodh,w,c
  3691  0013E2  6EF7               	movwf	tblptrh,c
  3692  0013E4                     	if	0	;There are less than 3 active tblptr bytes
  3693  0013E4                     	endif
  3694  0013E4  0008               	tblrd		*
  3695  0013E6  CFF5 F01C          	movff	tablat,write_defaults@temp
  3696                           
  3697                           ;cell_settings.c: 146: ee_write(page, (uint8_t)(addr + i), temp);
  3698  0013EA  501B               	movf	write_defaults@addr,w,c
  3699  0013EC  241D               	addwf	write_defaults@i,w,c
  3700  0013EE  6E15               	movwf	ee_write@addr,c
  3701  0013F0  C01C  F016         	movff	write_defaults@temp,ee_write@data
  3702  0013F4  501A               	movf	write_defaults@page,w,c
  3703  0013F6  EC78  F017         	call	_ee_write
  3704                           
  3705                           ;cell_settings.c: 147: i ++;
  3706  0013FA  2A1D               	incf	write_defaults@i,f,c
  3707  0013FC                     l1670:
  3708  0013FC  0E23               	movlw	35
  3709  0013FE  181C               	xorwf	write_defaults@temp,w,c
  3710  001400  A4D8               	btfss	status,2,c
  3711  001402  D7E8               	goto	l1671
  3712                           
  3713                           ;cell_settings.c: 148: }
  3714                           ;cell_settings.c: 150: ee_write(0, 0xB9, default_ZONE1);
  3715  001404  0EB9               	movlw	185
  3716  001406  6E15               	movwf	ee_write@addr,c
  3717  001408  0E28               	movlw	low _default_ZONE1
  3718  00140A  6EF6               	movwf	tblptrl,c
  3719  00140C                     	if	1	;There is more than 1 active tblptr byte
  3720  00140C  0E10               	movlw	high _default_ZONE1
  3721  00140E  6EF7               	movwf	tblptrh,c
  3722  001410                     	endif
  3723  001410                     	if	0	;There are less than 3 active tblptr bytes
  3724  001410                     	endif
  3725  001410  0008               	tblrd		*
  3726  001412  CFF5 F016          	movff	tablat,ee_write@data
  3727  001416  0E00               	movlw	0
  3728  001418  EC78  F017         	call	_ee_write
  3729                           
  3730                           ;cell_settings.c: 152: ee_write(0, 0xBB, default_TP_PIN);
  3731  00141C  0EBB               	movlw	187
  3732  00141E  6E15               	movwf	ee_write@addr,c
  3733  001420  0E26               	movlw	low _default_TP_PIN
  3734  001422  6EF6               	movwf	tblptrl,c
  3735  001424                     	if	1	;There is more than 1 active tblptr byte
  3736  001424  0E10               	movlw	high _default_TP_PIN
  3737  001426  6EF7               	movwf	tblptrh,c
  3738  001428                     	endif
  3739  001428                     	if	0	;There are less than 3 active tblptr bytes
  3740  001428                     	endif
  3741  001428  0008               	tblrd		*
  3742  00142A  CFF5 F016          	movff	tablat,ee_write@data
  3743  00142E  0E00               	movlw	0
  3744  001430  EC78  F017         	call	_ee_write
  3745                           
  3746                           ;cell_settings.c: 153: ee_write(0, 0xBC, default_CYCLE);
  3747  001434  0EBC               	movlw	188
  3748  001436  6E15               	movwf	ee_write@addr,c
  3749  001438  0E25               	movlw	low _default_CYCLE
  3750  00143A  6EF6               	movwf	tblptrl,c
  3751  00143C                     	if	1	;There is more than 1 active tblptr byte
  3752  00143C  0E10               	movlw	high _default_CYCLE
  3753  00143E  6EF7               	movwf	tblptrh,c
  3754  001440                     	endif
  3755  001440                     	if	0	;There are less than 3 active tblptr bytes
  3756  001440                     	endif
  3757  001440  0008               	tblrd		*
  3758  001442  CFF5 F016          	movff	tablat,ee_write@data
  3759  001446  0E00               	movlw	0
  3760  001448  EC78  F017         	call	_ee_write
  3761                           
  3762                           ;cell_settings.c: 154: ee_write(0, 0xBD, default_RETRY);
  3763  00144C  0EBD               	movlw	189
  3764  00144E  6E15               	movwf	ee_write@addr,c
  3765  001450  0E24               	movlw	low _default_RETRY
  3766  001452  6EF6               	movwf	tblptrl,c
  3767  001454                     	if	1	;There is more than 1 active tblptr byte
  3768  001454  0E10               	movlw	high _default_RETRY
  3769  001456  6EF7               	movwf	tblptrh,c
  3770  001458                     	endif
  3771  001458                     	if	0	;There are less than 3 active tblptr bytes
  3772  001458                     	endif
  3773  001458  0008               	tblrd		*
  3774  00145A  CFF5 F016          	movff	tablat,ee_write@data
  3775  00145E  0E00               	movlw	0
  3776  001460  EC78  F017         	call	_ee_write
  3777                           
  3778                           ;cell_settings.c: 156: ee_write(0, 0xE0,default_ENCRYPTION);
  3779  001464  0EE0               	movlw	224
  3780  001466  6E15               	movwf	ee_write@addr,c
  3781  001468  0E22               	movlw	low _default_ENCRYPTION
  3782  00146A  6EF6               	movwf	tblptrl,c
  3783  00146C                     	if	1	;There is more than 1 active tblptr byte
  3784  00146C  0E10               	movlw	high _default_ENCRYPTION
  3785  00146E  6EF7               	movwf	tblptrh,c
  3786  001470                     	endif
  3787  001470                     	if	0	;There are less than 3 active tblptr bytes
  3788  001470                     	endif
  3789  001470  0008               	tblrd		*
  3790  001472  CFF5 F016          	movff	tablat,ee_write@data
  3791  001476  0E00               	movlw	0
  3792  001478  EC78  F017         	call	_ee_write
  3793                           
  3794                           ;cell_settings.c: 158: ee_write(0, 0x0F, 0x00);
  3795  00147C  0E0F               	movlw	15
  3796  00147E  6E15               	movwf	ee_write@addr,c
  3797  001480  0E00               	movlw	0
  3798  001482  6E16               	movwf	ee_write@data,c
  3799  001484  0E00               	movlw	0
  3800  001486  EC78  F017         	call	_ee_write
  3801                           
  3802                           ;cell_settings.c: 160: ee_write(0, 0x00, VERSION[0]);
  3803  00148A  0E00               	movlw	0
  3804  00148C  6E15               	movwf	ee_write@addr,c
  3805  00148E  C0FA  F016         	movff	_VERSION,ee_write@data
  3806  001492  0E00               	movlw	0
  3807  001494  EC78  F017         	call	_ee_write
  3808                           
  3809                           ;cell_settings.c: 161: ee_write(0, 0x01, VERSION[1]);
  3810  001498  0E01               	movlw	1
  3811  00149A  6E15               	movwf	ee_write@addr,c
  3812  00149C  C0FB  F016         	movff	_VERSION+1,ee_write@data
  3813  0014A0  0E00               	movlw	0
  3814  0014A2  EC78  F017         	call	_ee_write
  3815                           
  3816                           ;cell_settings.c: 162: ee_write(0, 0x02, VERSION[2]);
  3817  0014A6  0E02               	movlw	2
  3818  0014A8  6E15               	movwf	ee_write@addr,c
  3819  0014AA  C0FC  F016         	movff	_VERSION+2,ee_write@data
  3820  0014AE  0E00               	movlw	0
  3821  0014B0  EC78  F017         	call	_ee_write
  3822  0014B4  0012               	return		;funcret
  3823  0014B6                     __end_of_write_defaults:
  3824                           	opt stack 0
  3825                           tblptru	equ	0xFF8
  3826                           tblptrh	equ	0xFF7
  3827                           tblptrl	equ	0xFF6
  3828                           tablat	equ	0xFF5
  3829                           prodh	equ	0xFF4
  3830                           prodl	equ	0xFF3
  3831                           intcon	equ	0xFF2
  3832                           postinc0	equ	0xFEE
  3833                           wreg	equ	0xFE8
  3834                           postdec1	equ	0xFE5
  3835                           plusw1	equ	0xFE3
  3836                           fsr1l	equ	0xFE1
  3837                           plusw2	equ	0xFDB
  3838                           status	equ	0xFD8
  3839                           
  3840 ;; *************** function _start_md_boot_timer *****************
  3841 ;; Defined at:
  3842 ;;		line 289 in file "modem.c"
  3843 ;; Parameters:    Size  Location     Type
  3844 ;;		None
  3845 ;; Auto vars:     Size  Location     Type
  3846 ;;		None
  3847 ;; Return value:  Size  Location     Type
  3848 ;;                  1    wreg      void 
  3849 ;; Registers used:
  3850 ;;		wreg, status,2, cstack
  3851 ;; Tracked objects:
  3852 ;;		On entry : 0/0
  3853 ;;		On exit  : 0/0
  3854 ;;		Unchanged: 0/0
  3855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3857 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3859 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3860 ;;Total ram usage:        0 bytes
  3861 ;; Hardware stack levels used:    1
  3862 ;; Hardware stack levels required when called:    4
  3863 ;; This function calls:
  3864 ;;		_reload_tmr5_pt25s
  3865 ;; This function is called by:
  3866 ;;		_start_modem
  3867 ;; This function uses a non-reentrant model
  3868 ;;
  3869                           
  3870                           	psect	text11
  3871  0030C6                     __ptext11:
  3872                           	opt stack 0
  3873  0030C6                     _start_md_boot_timer:
  3874                           	opt stack 23
  3875                           
  3876                           ;modem.c: 291: reload_tmr5_pt25s();
  3877                           
  3878                           ;incstack = 0
  3879  0030C6  ECF4  F017         	call	_reload_tmr5_pt25s	;wreg free
  3880  0030CA  0012               	return		;funcret
  3881  0030CC                     __end_of_start_md_boot_timer:
  3882                           	opt stack 0
  3883                           tblptru	equ	0xFF8
  3884                           tblptrh	equ	0xFF7
  3885                           tblptrl	equ	0xFF6
  3886                           tablat	equ	0xFF5
  3887                           prodh	equ	0xFF4
  3888                           prodl	equ	0xFF3
  3889                           intcon	equ	0xFF2
  3890                           postinc0	equ	0xFEE
  3891                           wreg	equ	0xFE8
  3892                           postdec1	equ	0xFE5
  3893                           plusw1	equ	0xFE3
  3894                           fsr1l	equ	0xFE1
  3895                           plusw2	equ	0xFDB
  3896                           status	equ	0xFD8
  3897                           
  3898 ;; *************** function _save_first_run *****************
  3899 ;; Defined at:
  3900 ;;		line 171 in file "cell_settings.c"
  3901 ;; Parameters:    Size  Location     Type
  3902 ;;		None
  3903 ;; Auto vars:     Size  Location     Type
  3904 ;;		None
  3905 ;; Return value:  Size  Location     Type
  3906 ;;                  1    wreg      void 
  3907 ;; Registers used:
  3908 ;;		wreg, status,2, cstack
  3909 ;; Tracked objects:
  3910 ;;		On entry : 0/0
  3911 ;;		On exit  : 0/0
  3912 ;;		Unchanged: 0/0
  3913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3917 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3918 ;;Total ram usage:        0 bytes
  3919 ;; Hardware stack levels used:    1
  3920 ;; Hardware stack levels required when called:    4
  3921 ;; This function calls:
  3922 ;;		_ee_write
  3923 ;; This function is called by:
  3924 ;;		_start_modem
  3925 ;; This function uses a non-reentrant model
  3926 ;;
  3927                           
  3928                           	psect	text12
  3929  003058                     __ptext12:
  3930                           	opt stack 0
  3931  003058                     _save_first_run:
  3932                           	opt stack 23
  3933                           
  3934                           ;cell_settings.c: 173: ee_write(0, 0xF0, 0x57);
  3935                           
  3936                           ;incstack = 0
  3937  003058  0EF0               	movlw	240
  3938  00305A  6E15               	movwf	ee_write@addr,c
  3939  00305C  0E57               	movlw	87
  3940  00305E  6E16               	movwf	ee_write@data,c
  3941  003060  0E00               	movlw	0
  3942  003062  EC78  F017         	call	_ee_write
  3943  003066  0012               	return		;funcret
  3944  003068                     __end_of_save_first_run:
  3945                           	opt stack 0
  3946                           tblptru	equ	0xFF8
  3947                           tblptrh	equ	0xFF7
  3948                           tblptrl	equ	0xFF6
  3949                           tablat	equ	0xFF5
  3950                           prodh	equ	0xFF4
  3951                           prodl	equ	0xFF3
  3952                           intcon	equ	0xFF2
  3953                           postinc0	equ	0xFEE
  3954                           wreg	equ	0xFE8
  3955                           postdec1	equ	0xFE5
  3956                           plusw1	equ	0xFE3
  3957                           fsr1l	equ	0xFE1
  3958                           plusw2	equ	0xFDB
  3959                           status	equ	0xFD8
  3960                           
  3961 ;; *************** function _is_first_run *****************
  3962 ;; Defined at:
  3963 ;;		line 166 in file "cell_settings.c"
  3964 ;; Parameters:    Size  Location     Type
  3965 ;;		None
  3966 ;; Auto vars:     Size  Location     Type
  3967 ;;		None
  3968 ;; Return value:  Size  Location     Type
  3969 ;;                  1    wreg      unsigned char 
  3970 ;; Registers used:
  3971 ;;		wreg, status,2, cstack
  3972 ;; Tracked objects:
  3973 ;;		On entry : 0/0
  3974 ;;		On exit  : 0/0
  3975 ;;		Unchanged: 0/0
  3976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3980 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3981 ;;Total ram usage:        0 bytes
  3982 ;; Hardware stack levels used:    1
  3983 ;; Hardware stack levels required when called:    4
  3984 ;; This function calls:
  3985 ;;		_ee_read
  3986 ;; This function is called by:
  3987 ;;		_start_modem
  3988 ;; This function uses a non-reentrant model
  3989 ;;
  3990                           
  3991                           	psect	text13
  3992  00301C                     __ptext13:
  3993                           	opt stack 0
  3994  00301C                     _is_first_run:
  3995                           	opt stack 23
  3996                           
  3997                           ;cell_settings.c: 168: return (bool)(ee_read(0, 0xF0) != 0x57);
  3998                           
  3999                           ;incstack = 0
  4000  00301C  0EF0               	movlw	240
  4001  00301E  6E15               	movwf	ee_read@addr,c
  4002  003020  0E00               	movlw	0
  4003  003022  ECD9  F017         	call	_ee_read
  4004  003026  0A57               	xorlw	87
  4005  003028  B4D8               	btfsc	status,2,c
  4006  00302A  D002               	goto	u8090
  4007  00302C  0E01               	movlw	1
  4008  00302E  0012               	return	
  4009  003030                     u8090:
  4010  003030  0E00               	movlw	0
  4011  003032  0012               	return	
  4012  003034                     __end_of_is_first_run:
  4013                           	opt stack 0
  4014                           tblptru	equ	0xFF8
  4015                           tblptrh	equ	0xFF7
  4016                           tblptrl	equ	0xFF6
  4017                           tablat	equ	0xFF5
  4018                           prodh	equ	0xFF4
  4019                           prodl	equ	0xFF3
  4020                           intcon	equ	0xFF2
  4021                           postinc0	equ	0xFEE
  4022                           wreg	equ	0xFE8
  4023                           postdec1	equ	0xFE5
  4024                           plusw1	equ	0xFE3
  4025                           fsr1l	equ	0xFE1
  4026                           plusw2	equ	0xFDB
  4027                           status	equ	0xFD8
  4028                           
  4029 ;; *************** function _check_md_state *****************
  4030 ;; Defined at:
  4031 ;;		line 14 in file "modem.c"
  4032 ;; Parameters:    Size  Location     Type
  4033 ;;		None
  4034 ;; Auto vars:     Size  Location     Type
  4035 ;;  tempStatus      1   36[COMRAM] unsigned char 
  4036 ;; Return value:  Size  Location     Type
  4037 ;;                  1    wreg      void 
  4038 ;; Registers used:
  4039 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4040 ;; Tracked objects:
  4041 ;;		On entry : 0/0
  4042 ;;		On exit  : 0/0
  4043 ;;		Unchanged: 0/0
  4044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4046 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4048 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4049 ;;Total ram usage:        1 bytes
  4050 ;; Hardware stack levels used:    1
  4051 ;; Hardware stack levels required when called:    6
  4052 ;; This function calls:
  4053 ;;		_disable_tmr5
  4054 ;;		_startup_ok
  4055 ;; This function is called by:
  4056 ;;		_start_modem
  4057 ;; This function uses a non-reentrant model
  4058 ;;
  4059                           
  4060                           	psect	text14
  4061  002DF8                     __ptext14:
  4062                           	opt stack 0
  4063  002DF8                     _check_md_state:
  4064                           	opt stack 21
  4065                           
  4066                           ;modem.c: 16: uint8_t tempStatus = 0;
  4067                           
  4068                           ;incstack = 0
  4069  002DF8  0E00               	movlw	0
  4070  002DFA  6E25               	movwf	check_md_state@tempStatus,c
  4071                           
  4072                           ;modem.c: 17: switch (MD_STATE)
  4073  002DFC  D023               	goto	l434
  4074  002DFE                     l435:
  4075                           
  4076                           ;modem.c: 20: LATAbits.LATA3 = 0;
  4077  002DFE  9689               	bcf	3977,3,c	;volatile
  4078                           
  4079                           ;modem.c: 21: break;
  4080  002E00  0012               	return	
  4081  002E02                     
  4082                           ;modem.c: 23: if (tmr5_cnt >= (4*45) && !modem_awake)
  4083  002E02  0EB3               	movlw	179
  4084  002E04  643E               	cpfsgt	_tmr5_cnt,c
  4085  002E06  0012               	return	
  4086  002E08  503A               	movf	_modem_awake,w,c
  4087  002E0A  A4D8               	btfss	status,2,c
  4088  002E0C  0012               	return	
  4089                           
  4090                           ;modem.c: 24: {
  4091                           ;modem.c: 25: disable_tmr5();
  4092  002E0E  EC55  F018         	call	_disable_tmr5	;wreg free
  4093                           
  4094                           ;modem.c: 26: tempStatus = (uint8_t)(startup_ok());
  4095  002E12  EC5B  F00A         	call	_startup_ok	;wreg free
  4096  002E16  6E25               	movwf	check_md_state@tempStatus,c
  4097                           
  4098                           ;modem.c: 27: if (tempStatus == 1)
  4099  002E18  0425               	decf	check_md_state@tempStatus,w,c
  4100  002E1A  A4D8               	btfss	status,2,c
  4101  002E1C  D007               	goto	l439
  4102                           
  4103                           ;modem.c: 28: {
  4104                           ;modem.c: 30: md_timeout_cnt = 0;
  4105  002E1E  0E00               	movlw	0
  4106  002E20  6E32               	movwf	_md_timeout_cnt,c
  4107                           
  4108                           ;modem.c: 31: modem_awake = 1;
  4109  002E22  0E01               	movlw	1
  4110  002E24  6E3A               	movwf	_modem_awake,c
  4111                           
  4112                           ;modem.c: 32: MD_STATE = AWAKE_IDLE;
  4113  002E26  0E02               	movlw	2
  4114  002E28  6E3B               	movwf	_MD_STATE,c
  4115                           
  4116                           ;modem.c: 33: }
  4117  002E2A  0012               	return	
  4118  002E2C                     l439:
  4119                           
  4120                           ;modem.c: 34: else if (tempStatus == 2)
  4121  002E2C  0E02               	movlw	2
  4122  002E2E  1825               	xorwf	check_md_state@tempStatus,w,c
  4123  002E30  A4D8               	btfss	status,2,c
  4124  002E32  D002               	goto	l441
  4125                           
  4126                           ;modem.c: 35: __nop();
  4127  002E34  F000               	nop	
  4128  002E36  0012               	return	
  4129  002E38                     l441:
  4130                           
  4131                           ;modem.c: 36: else if (tempStatus == 3)
  4132  002E38  0E03               	movlw	3
  4133  002E3A  1825               	xorwf	check_md_state@tempStatus,w,c
  4134  002E3C  A4D8               	btfss	status,2,c
  4135  002E3E  0012               	return	
  4136                           
  4137                           ;modem.c: 37: md_timeout_cnt++;
  4138  002E40  2A32               	incf	_md_timeout_cnt,f,c
  4139                           
  4140                           ;modem.c: 57: }
  4141                           
  4142                           ;modem.c: 56: break;
  4143                           
  4144                           ;modem.c: 48: case RETRY_IP:
  4145                           
  4146                           ;modem.c: 47: break;
  4147                           
  4148                           ;modem.c: 46: case CONNECTED:
  4149                           
  4150                           ;modem.c: 45: break;
  4151                           
  4152                           ;modem.c: 44: case AWAKE_IDLE:
  4153                           
  4154                           ;modem.c: 42: }
  4155                           ;modem.c: 43: break;
  4156                           
  4157                           ;modem.c: 40: {
  4158                           
  4159                           ;modem.c: 38: }
  4160  002E42  0012               	return	
  4161  002E44                     l434:
  4162  002E44  503B               	movf	_MD_STATE,w,c
  4163                           
  4164                           ; Switch size 1, requested type "space"
  4165                           ; Number of cases is 5, Range of values is 0 to 4
  4166                           ; switch strategies available:
  4167                           ; Name         Instructions Cycles
  4168                           ; simple_byte           16     9 (average)
  4169                           ;	Chosen strategy is simple_byte
  4170  002E46  0A00               	xorlw	0	; case 0
  4171  002E48  B4D8               	btfsc	status,2,c
  4172  002E4A  D7D9               	goto	l435
  4173  002E4C  0A01               	xorlw	1	; case 1
  4174  002E4E  B4D8               	btfsc	status,2,c
  4175  002E50  D7D8               	goto	l437
  4176  002E52  0A03               	xorlw	3	; case 2
  4177  002E54  B4D8               	btfsc	status,2,c
  4178  002E56  0012               	return	
  4179  002E58  0A01               	xorlw	1	; case 3
  4180  002E5A  B4D8               	btfsc	status,2,c
  4181  002E5C  0012               	return	
  4182  002E5E  0A07               	xorlw	7	; case 4
  4183  002E60  0012               	return	
  4184  002E62                     __end_of_check_md_state:
  4185                           	opt stack 0
  4186                           tblptru	equ	0xFF8
  4187                           tblptrh	equ	0xFF7
  4188                           tblptrl	equ	0xFF6
  4189                           tablat	equ	0xFF5
  4190                           prodh	equ	0xFF4
  4191                           prodl	equ	0xFF3
  4192                           intcon	equ	0xFF2
  4193                           postinc0	equ	0xFEE
  4194                           wreg	equ	0xFE8
  4195                           postdec1	equ	0xFE5
  4196                           plusw1	equ	0xFE3
  4197                           fsr1l	equ	0xFE1
  4198                           plusw2	equ	0xFDB
  4199                           status	equ	0xFD8
  4200                           
  4201 ;; *************** function _startup_ok *****************
  4202 ;; Defined at:
  4203 ;;		line 136 in file "modem.c"
  4204 ;; Parameters:    Size  Location     Type
  4205 ;;		None
  4206 ;; Auto vars:     Size  Location     Type
  4207 ;;  ledCfg         16   27[BANK0 ] unsigned char [16]
  4208 ;;  baud           16   11[BANK0 ] unsigned char [16]
  4209 ;;  cereg          12   67[BANK0 ] unsigned char [12]
  4210 ;;  ledpattern     12   55[BANK0 ] unsigned char [12]
  4211 ;;  cmee           12   43[BANK0 ] unsigned char [12]
  4212 ;;  creg           11   90[BANK0 ] unsigned char [11]
  4213 ;;  cpin           11   79[BANK0 ] unsigned char [11]
  4214 ;;  gprs           11    0[BANK0 ] unsigned char [11]
  4215 ;;  queryVersion   10  101[BANK0 ] unsigned char [10]
  4216 ;;  csq             9  111[BANK0 ] unsigned char [9]
  4217 ;;  ate             7  120[BANK0 ] unsigned char [7]
  4218 ;;  at              5  127[BANK0 ] unsigned char [5]
  4219 ;; Return value:  Size  Location     Type
  4220 ;;                  1    wreg      unsigned char 
  4221 ;; Registers used:
  4222 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4223 ;; Tracked objects:
  4224 ;;		On entry : 0/0
  4225 ;;		On exit  : 0/0
  4226 ;;		Unchanged: 0/0
  4227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4229 ;;      Locals:         0     132       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4231 ;;      Totals:         0     132       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4232 ;;Total ram usage:      132 bytes
  4233 ;; Hardware stack levels used:    1
  4234 ;; Hardware stack levels required when called:    5
  4235 ;; This function calls:
  4236 ;;		_clear_at_ok
  4237 ;;		_init_md_uart
  4238 ;;		_md_uart_write_str_ok
  4239 ;;		_parse_cereg_ok
  4240 ;;		_parse_creg_ok
  4241 ;;		_parse_csq_ok
  4242 ;; This function is called by:
  4243 ;;		_check_md_state
  4244 ;; This function uses a non-reentrant model
  4245 ;;
  4246                           
  4247                           	psect	text15
  4248  0014B6                     __ptext15:
  4249                           	opt stack 0
  4250  0014B6                     _startup_ok:
  4251                           	opt stack 21
  4252                           
  4253                           ;modem.c: 138: uint8_t at[] = "AT\r\n";
  4254                           
  4255                           ;incstack = 0
  4256  0014B6  EE21  F0E9         	lfsr	2,startup_ok@F6824
  4257  0014BA  EE10  F0DF         	lfsr	1,startup_ok@at
  4258  0014BE  0E04               	movlw	4
  4259  0014C0                     u7081:
  4260  0014C0  CFDB FFE3          	movff	plusw2,plusw1
  4261  0014C4  06E8               	decf	wreg,f,c
  4262  0014C6  E2FC               	bc	u7081
  4263                           
  4264                           ;modem.c: 139: uint8_t ate[] = "ATE1\r\n";
  4265  0014C8  EE21  F0DD         	lfsr	2,startup_ok@F6826
  4266  0014CC  EE10  F0D8         	lfsr	1,startup_ok@ate
  4267  0014D0  0E06               	movlw	6
  4268  0014D2                     u7091:
  4269  0014D2  CFDB FFE3          	movff	plusw2,plusw1
  4270  0014D6  06E8               	decf	wreg,f,c
  4271  0014D8  E2FC               	bc	u7091
  4272                           
  4273                           ;modem.c: 140: uint8_t cmee[] = "AT+CMEE=2\r\n";
  4274  0014DA  EE21  F062         	lfsr	2,startup_ok@F6828
  4275  0014DE  EE10  F08B         	lfsr	1,startup_ok@cmee
  4276  0014E2  0E0B               	movlw	11
  4277  0014E4                     u7101:
  4278  0014E4  CFDB FFE3          	movff	plusw2,plusw1
  4279  0014E8  06E8               	decf	wreg,f,c
  4280  0014EA  E2FC               	bc	u7101
  4281                           
  4282                           ;modem.c: 141: uint8_t baud[] = "AT+IPR=115200\r\n";
  4283  0014EC  EE21  F020         	lfsr	2,startup_ok@F6830
  4284  0014F0  EE10  F06B         	lfsr	1,startup_ok@baud
  4285  0014F4  0E0F               	movlw	15
  4286  0014F6                     u7111:
  4287  0014F6  CFDB FFE3          	movff	plusw2,plusw1
  4288  0014FA  06E8               	decf	wreg,f,c
  4289  0014FC  E2FC               	bc	u7111
  4290                           
  4291                           ;modem.c: 142: uint8_t ledCfg[] = "AT#GPIO=7,0,2\r\n";
  4292  0014FE  EE21  F010         	lfsr	2,startup_ok@F6832
  4293  001502  EE10  F07B         	lfsr	1,startup_ok@ledCfg
  4294  001506  0E0F               	movlw	15
  4295  001508                     u7121:
  4296  001508  CFDB FFE3          	movff	plusw2,plusw1
  4297  00150C  06E8               	decf	wreg,f,c
  4298  00150E  E2FC               	bc	u7121
  4299                           
  4300                           ;modem.c: 143: uint8_t ledpattern[] = "AT#SLED=4\r\n";
  4301  001510  EE21  F056         	lfsr	2,startup_ok@F6834
  4302  001514  EE10  F097         	lfsr	1,startup_ok@ledpattern
  4303  001518  0E0B               	movlw	11
  4304  00151A                     u7131:
  4305  00151A  CFDB FFE3          	movff	plusw2,plusw1
  4306  00151E  06E8               	decf	wreg,f,c
  4307  001520  E2FC               	bc	u7131
  4308                           
  4309                           ;modem.c: 144: uint8_t queryVersion[] = "AT#CGMR\r\n";
  4310  001522  EE21  F08F         	lfsr	2,startup_ok@F6836
  4311  001526  EE10  F0C5         	lfsr	1,startup_ok@queryVersion
  4312  00152A  0E09               	movlw	9
  4313  00152C                     u7141:
  4314  00152C  CFDB FFE3          	movff	plusw2,plusw1
  4315  001530  06E8               	decf	wreg,f,c
  4316  001532  E2FC               	bc	u7141
  4317                           
  4318                           ;modem.c: 145: uint8_t cpin[] = "AT+CPIN?\r\n";
  4319  001534  EE21  F084         	lfsr	2,startup_ok@F6838
  4320  001538  EE10  F0AF         	lfsr	1,startup_ok@cpin
  4321  00153C  0E0A               	movlw	10
  4322  00153E                     u7151:
  4323  00153E  CFDB FFE3          	movff	plusw2,plusw1
  4324  001542  06E8               	decf	wreg,f,c
  4325  001544  E2FC               	bc	u7151
  4326                           
  4327                           ;modem.c: 146: uint8_t creg[] = "AT+CREG?\r\n";
  4328  001546  EE21  F079         	lfsr	2,startup_ok@F6840
  4329  00154A  EE10  F0BA         	lfsr	1,startup_ok@creg
  4330  00154E  0E0A               	movlw	10
  4331  001550                     u7161:
  4332  001550  CFDB FFE3          	movff	plusw2,plusw1
  4333  001554  06E8               	decf	wreg,f,c
  4334  001556  E2FC               	bc	u7161
  4335                           
  4336                           ;modem.c: 147: uint8_t cereg[] = "AT+CEREG?\r\n";
  4337  001558  EE21  F04A         	lfsr	2,startup_ok@F6842
  4338  00155C  EE10  F0A3         	lfsr	1,startup_ok@cereg
  4339  001560  0E0B               	movlw	11
  4340  001562                     u7171:
  4341  001562  CFDB FFE3          	movff	plusw2,plusw1
  4342  001566  06E8               	decf	wreg,f,c
  4343  001568  E2FC               	bc	u7171
  4344                           
  4345                           ;modem.c: 148: uint8_t gprs[] = "AT#GPRS?\r\n";
  4346  00156A  EE21  F06E         	lfsr	2,startup_ok@F6844
  4347  00156E  EE10  F060         	lfsr	1,startup_ok@gprs
  4348  001572  0E0A               	movlw	10
  4349  001574                     u7181:
  4350  001574  CFDB FFE3          	movff	plusw2,plusw1
  4351  001578  06E8               	decf	wreg,f,c
  4352  00157A  E2FC               	bc	u7181
  4353                           
  4354                           ;modem.c: 149: uint8_t csq[] = "AT+CSQ\r\n";
  4355  00157C  EE21  F0BD         	lfsr	2,startup_ok@F6846
  4356  001580  EE10  F0CF         	lfsr	1,startup_ok@csq
  4357  001584  0E08               	movlw	8
  4358  001586                     u7191:
  4359  001586  CFDB FFE3          	movff	plusw2,plusw1
  4360  00158A  06E8               	decf	wreg,f,c
  4361  00158C  E2FC               	bc	u7191
  4362                           
  4363                           ;modem.c: 152: init_md_uart();
  4364  00158E  ECA3  F017         	call	_init_md_uart	;wreg free
  4365                           
  4366                           ;modem.c: 155: if (at1 != 1)
  4367  001592  0100               	movlb	0	; () banked
  4368  001594  05F5               	decf	_at1& (0+255),w,b
  4369  001596  B4D8               	btfsc	status,2,c
  4370  001598  D013               	goto	l498
  4371                           
  4372                           ; BSR set to: 0
  4373                           ;modem.c: 156: {
  4374                           ;modem.c: 157: at1 = md_uart_write_str_ok((uint8_t *)&at[0], sizeof(at), 1, 0);
  4375  00159A  0EDF               	movlw	low startup_ok@at
  4376  00159C  6E16               	movwf	md_uart_write_str_ok@data,c
  4377  00159E  0E00               	movlw	high startup_ok@at
  4378  0015A0  6E17               	movwf	md_uart_write_str_ok@data+1,c
  4379  0015A2  0E05               	movlw	5
  4380  0015A4  6E18               	movwf	md_uart_write_str_ok@len1,c
  4381  0015A6  0E01               	movlw	1
  4382  0015A8  6E19               	movwf	md_uart_write_str_ok@wantOk,c
  4383  0015AA  0E00               	movlw	0
  4384  0015AC  6E1A               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  4385  0015AE  ECD3  F011         	call	_md_uart_write_str_ok	;wreg free
  4386  0015B2  0100               	movlb	0	; () banked
  4387  0015B4  6FF5               	movwf	_at1& (0+255),b
  4388                           
  4389                           ; BSR set to: 0
  4390                           ;modem.c: 158: if (at1 == 1)
  4391  0015B6  05F5               	decf	_at1& (0+255),w,b
  4392  0015B8  A4D8               	btfss	status,2,c
  4393  0015BA  D002               	goto	l498
  4394                           
  4395                           ; BSR set to: 0
  4396                           ;modem.c: 159: numUartRetries = 15;
  4397  0015BC  0E0F               	movlw	15
  4398  0015BE  6E4A               	movwf	_numUartRetries,c
  4399  0015C0                     l498:
  4400                           
  4401                           ; BSR set to: 0
  4402                           ;modem.c: 160: }
  4403                           ;modem.c: 161: if (at1 == 1 && at2 != 1)
  4404                           
  4405                           ; BSR set to: 0
  4406                           
  4407                           ; BSR set to: 0
  4408  0015C0  05F5               	decf	_at1& (0+255),w,b
  4409  0015C2  A4D8               	btfss	status,2,c
  4410  0015C4  D016               	goto	l500
  4411                           
  4412                           ; BSR set to: 0
  4413  0015C6  05F4               	decf	_at2& (0+255),w,b
  4414  0015C8  B4D8               	btfsc	status,2,c
  4415  0015CA  D013               	goto	l500
  4416                           
  4417                           ; BSR set to: 0
  4418                           ;modem.c: 162: {
  4419                           ;modem.c: 163: at2 = md_uart_write_str_ok((uint8_t *)&ate[0], sizeof(ate), 1, 0);
  4420  0015CC  0ED8               	movlw	low startup_ok@ate
  4421  0015CE  6E16               	movwf	md_uart_write_str_ok@data,c
  4422  0015D0  0E00               	movlw	high startup_ok@ate
  4423  0015D2  6E17               	movwf	md_uart_write_str_ok@data+1,c
  4424  0015D4  0E07               	movlw	7
  4425  0015D6  6E18               	movwf	md_uart_write_str_ok@len1,c
  4426  0015D8  0E01               	movlw	1
  4427  0015DA  6E19               	movwf	md_uart_write_str_ok@wantOk,c
  4428  0015DC  0E00               	movlw	0
  4429  0015DE  6E1A               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  4430  0015E0  ECD3  F011         	call	_md_uart_write_str_ok	;wreg free
  4431  0015E4  0100               	movlb	0	; () banked
  4432  0015E6  6FF4               	movwf	_at2& (0+255),b
  4433                           
  4434                           ; BSR set to: 0
  4435                           ;modem.c: 164: if (at2 == 1)
  4436  0015E8  05F4               	decf	_at2& (0+255),w,b
  4437  0015EA  A4D8               	btfss	status,2,c
  4438  0015EC  D002               	goto	l500
  4439                           
  4440                           ; BSR set to: 0
  4441                           ;modem.c: 165: numUartRetries = 15;
  4442  0015EE  0E0F               	movlw	15
  4443  0015F0  6E4A               	movwf	_numUartRetries,c
  4444  0015F2                     l500:
  4445                           
  4446                           ; BSR set to: 0
  4447                           ;modem.c: 166: }
  4448                           ;modem.c: 167: if (at2 == 1 && at3 != 1)
  4449                           
  4450                           ; BSR set to: 0
  4451                           
  4452                           ; BSR set to: 0
  4453  0015F2  05F4               	decf	_at2& (0+255),w,b
  4454  0015F4  A4D8               	btfss	status,2,c
  4455  0015F6  D016               	goto	l502
  4456                           
  4457                           ; BSR set to: 0
  4458  0015F8  05F3               	decf	_at3& (0+255),w,b
  4459  0015FA  B4D8               	btfsc	status,2,c
  4460  0015FC  D013               	goto	l502
  4461                           
  4462                           ; BSR set to: 0
  4463                           ;modem.c: 168: {
  4464                           ;modem.c: 169: at3 = md_uart_write_str_ok((uint8_t *)&cmee[0], sizeof(cmee), 1, 0);
  4465  0015FE  0E8B               	movlw	low startup_ok@cmee
  4466  001600  6E16               	movwf	md_uart_write_str_ok@data,c
  4467  001602  0E00               	movlw	high startup_ok@cmee
  4468  001604  6E17               	movwf	md_uart_write_str_ok@data+1,c
  4469  001606  0E0C               	movlw	12
  4470  001608  6E18               	movwf	md_uart_write_str_ok@len1,c
  4471  00160A  0E01               	movlw	1
  4472  00160C  6E19               	movwf	md_uart_write_str_ok@wantOk,c
  4473  00160E  0E00               	movlw	0
  4474  001610  6E1A               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  4475  001612  ECD3  F011         	call	_md_uart_write_str_ok	;wreg free
  4476  001616  0100               	movlb	0	; () banked
  4477  001618  6FF3               	movwf	_at3& (0+255),b
  4478                           
  4479                           ; BSR set to: 0
  4480                           ;modem.c: 170: if (at3 == 1)
  4481  00161A  05F3               	decf	_at3& (0+255),w,b
  4482  00161C  A4D8               	btfss	status,2,c
  4483  00161E  D002               	goto	l502
  4484                           
  4485                           ; BSR set to: 0
  4486                           ;modem.c: 171: numUartRetries = 15;
  4487  001620  0E0F               	movlw	15
  4488  001622  6E4A               	movwf	_numUartRetries,c
  4489  001624                     l502:
  4490                           
  4491                           ; BSR set to: 0
  4492                           ;modem.c: 172: }
  4493                           ;modem.c: 173: if (at3 == 1 && at4 != 1)
  4494                           
  4495                           ; BSR set to: 0
  4496                           
  4497                           ; BSR set to: 0
  4498  001624  05F3               	decf	_at3& (0+255),w,b
  4499  001626  A4D8               	btfss	status,2,c
  4500  001628  D016               	goto	l504
  4501                           
  4502                           ; BSR set to: 0
  4503  00162A  05F2               	decf	_at4& (0+255),w,b
  4504  00162C  B4D8               	btfsc	status,2,c
  4505  00162E  D013               	goto	l504
  4506                           
  4507                           ; BSR set to: 0
  4508                           ;modem.c: 174: {
  4509                           ;modem.c: 175: at4 = md_uart_write_str_ok((uint8_t *)&baud[0], sizeof(baud), 1, 0);
  4510  001630  0E6B               	movlw	low startup_ok@baud
  4511  001632  6E16               	movwf	md_uart_write_str_ok@data,c
  4512  001634  0E00               	movlw	high startup_ok@baud
  4513  001636  6E17               	movwf	md_uart_write_str_ok@data+1,c
  4514  001638  0E10               	movlw	16
  4515  00163A  6E18               	movwf	md_uart_write_str_ok@len1,c
  4516  00163C  0E01               	movlw	1
  4517  00163E  6E19               	movwf	md_uart_write_str_ok@wantOk,c
  4518  001640  0E00               	movlw	0
  4519  001642  6E1A               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  4520  001644  ECD3  F011         	call	_md_uart_write_str_ok	;wreg free
  4521  001648  0100               	movlb	0	; () banked
  4522  00164A  6FF2               	movwf	_at4& (0+255),b
  4523                           
  4524                           ; BSR set to: 0
  4525                           ;modem.c: 176: if (at4 == 1)
  4526  00164C  05F2               	decf	_at4& (0+255),w,b
  4527  00164E  A4D8               	btfss	status,2,c
  4528  001650  D002               	goto	l504
  4529                           
  4530                           ; BSR set to: 0
  4531                           ;modem.c: 177: numUartRetries = 15;
  4532  001652  0E0F               	movlw	15
  4533  001654  6E4A               	movwf	_numUartRetries,c
  4534  001656                     l504:
  4535                           
  4536                           ; BSR set to: 0
  4537                           ;modem.c: 178: }
  4538                           ;modem.c: 179: if (at4 == 1 && at5 != 1)
  4539                           
  4540                           ; BSR set to: 0
  4541                           
  4542                           ; BSR set to: 0
  4543  001656  05F2               	decf	_at4& (0+255),w,b
  4544  001658  A4D8               	btfss	status,2,c
  4545  00165A  D016               	goto	l506
  4546                           
  4547                           ; BSR set to: 0
  4548  00165C  05F1               	decf	_at5& (0+255),w,b
  4549  00165E  B4D8               	btfsc	status,2,c
  4550  001660  D013               	goto	l506
  4551                           
  4552                           ; BSR set to: 0
  4553                           ;modem.c: 180: {
  4554                           ;modem.c: 181: at5 = md_uart_write_str_ok((uint8_t *)&ledCfg[0], sizeof(ledCfg), 1, 0);
  4555  001662  0E7B               	movlw	low startup_ok@ledCfg
  4556  001664  6E16               	movwf	md_uart_write_str_ok@data,c
  4557  001666  0E00               	movlw	high startup_ok@ledCfg
  4558  001668  6E17               	movwf	md_uart_write_str_ok@data+1,c
  4559  00166A  0E10               	movlw	16
  4560  00166C  6E18               	movwf	md_uart_write_str_ok@len1,c
  4561  00166E  0E01               	movlw	1
  4562  001670  6E19               	movwf	md_uart_write_str_ok@wantOk,c
  4563  001672  0E00               	movlw	0
  4564  001674  6E1A               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  4565  001676  ECD3  F011         	call	_md_uart_write_str_ok	;wreg free
  4566  00167A  0100               	movlb	0	; () banked
  4567  00167C  6FF1               	movwf	_at5& (0+255),b
  4568                           
  4569                           ; BSR set to: 0
  4570                           ;modem.c: 182: if (at5 == 1)
  4571  00167E  05F1               	decf	_at5& (0+255),w,b
  4572  001680  A4D8               	btfss	status,2,c
  4573  001682  D002               	goto	l506
  4574                           
  4575                           ; BSR set to: 0
  4576                           ;modem.c: 183: numUartRetries = 15;
  4577  001684  0E0F               	movlw	15
  4578  001686  6E4A               	movwf	_numUartRetries,c
  4579  001688                     l506:
  4580                           
  4581                           ; BSR set to: 0
  4582                           ;modem.c: 184: }
  4583                           ;modem.c: 185: if (at5 == 1 && at6 != 1)
  4584                           
  4585                           ; BSR set to: 0
  4586                           
  4587                           ; BSR set to: 0
  4588  001688  05F1               	decf	_at5& (0+255),w,b
  4589  00168A  A4D8               	btfss	status,2,c
  4590  00168C  D016               	goto	l508
  4591                           
  4592                           ; BSR set to: 0
  4593  00168E  05F0               	decf	_at6& (0+255),w,b
  4594  001690  B4D8               	btfsc	status,2,c
  4595  001692  D013               	goto	l508
  4596                           
  4597                           ; BSR set to: 0
  4598                           ;modem.c: 186: {
  4599                           ;modem.c: 187: at6 = md_uart_write_str_ok((uint8_t *)&ledpattern[0], sizeof(ledpattern),
      +                           1, 0);
  4600  001694  0E97               	movlw	low startup_ok@ledpattern
  4601  001696  6E16               	movwf	md_uart_write_str_ok@data,c
  4602  001698  0E00               	movlw	high startup_ok@ledpattern
  4603  00169A  6E17               	movwf	md_uart_write_str_ok@data+1,c
  4604  00169C  0E0C               	movlw	12
  4605  00169E  6E18               	movwf	md_uart_write_str_ok@len1,c
  4606  0016A0  0E01               	movlw	1
  4607  0016A2  6E19               	movwf	md_uart_write_str_ok@wantOk,c
  4608  0016A4  0E00               	movlw	0
  4609  0016A6  6E1A               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  4610  0016A8  ECD3  F011         	call	_md_uart_write_str_ok	;wreg free
  4611  0016AC  0100               	movlb	0	; () banked
  4612  0016AE  6FF0               	movwf	_at6& (0+255),b
  4613                           
  4614                           ; BSR set to: 0
  4615                           ;modem.c: 188: if (at6 == 1)
  4616  0016B0  05F0               	decf	_at6& (0+255),w,b
  4617  0016B2  A4D8               	btfss	status,2,c
  4618  0016B4  D002               	goto	l508
  4619                           
  4620                           ; BSR set to: 0
  4621                           ;modem.c: 189: numUartRetries = 15;
  4622  0016B6  0E0F               	movlw	15
  4623  0016B8  6E4A               	movwf	_numUartRetries,c
  4624  0016BA                     l508:
  4625                           
  4626                           ; BSR set to: 0
  4627                           ;modem.c: 190: }
  4628                           ;modem.c: 191: if (at6 == 1 && at7 != 1)
  4629                           
  4630                           ; BSR set to: 0
  4631                           
  4632                           ; BSR set to: 0
  4633  0016BA  05F0               	decf	_at6& (0+255),w,b
  4634  0016BC  A4D8               	btfss	status,2,c
  4635  0016BE  D016               	goto	l510
  4636                           
  4637                           ; BSR set to: 0
  4638  0016C0  05EF               	decf	_at7& (0+255),w,b
  4639  0016C2  B4D8               	btfsc	status,2,c
  4640  0016C4  D013               	goto	l510
  4641                           
  4642                           ; BSR set to: 0
  4643                           ;modem.c: 192: {
  4644                           ;modem.c: 193: at7 = md_uart_write_str_ok((uint8_t *)&queryVersion[0], sizeof(queryVersi
      +                          on), 1, 0);
  4645  0016C6  0EC5               	movlw	low startup_ok@queryVersion
  4646  0016C8  6E16               	movwf	md_uart_write_str_ok@data,c
  4647  0016CA  0E00               	movlw	high startup_ok@queryVersion
  4648  0016CC  6E17               	movwf	md_uart_write_str_ok@data+1,c
  4649  0016CE  0E0A               	movlw	10
  4650  0016D0  6E18               	movwf	md_uart_write_str_ok@len1,c
  4651  0016D2  0E01               	movlw	1
  4652  0016D4  6E19               	movwf	md_uart_write_str_ok@wantOk,c
  4653  0016D6  0E00               	movlw	0
  4654  0016D8  6E1A               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  4655  0016DA  ECD3  F011         	call	_md_uart_write_str_ok	;wreg free
  4656  0016DE  0100               	movlb	0	; () banked
  4657  0016E0  6FEF               	movwf	_at7& (0+255),b
  4658                           
  4659                           ; BSR set to: 0
  4660                           ;modem.c: 194: if (at7 == 1)
  4661  0016E2  05EF               	decf	_at7& (0+255),w,b
  4662  0016E4  A4D8               	btfss	status,2,c
  4663  0016E6  D002               	goto	l510
  4664                           
  4665                           ; BSR set to: 0
  4666                           ;modem.c: 195: numUartRetries = 15;
  4667  0016E8  0E0F               	movlw	15
  4668  0016EA  6E4A               	movwf	_numUartRetries,c
  4669  0016EC                     l510:
  4670                           
  4671                           ; BSR set to: 0
  4672                           ;modem.c: 196: }
  4673                           ;modem.c: 197: if (at7 == 1 && at8 != 1)
  4674                           
  4675                           ; BSR set to: 0
  4676                           
  4677                           ; BSR set to: 0
  4678  0016EC  05EF               	decf	_at7& (0+255),w,b
  4679  0016EE  A4D8               	btfss	status,2,c
  4680  0016F0  D016               	goto	l512
  4681                           
  4682                           ; BSR set to: 0
  4683  0016F2  05EE               	decf	_at8& (0+255),w,b
  4684  0016F4  B4D8               	btfsc	status,2,c
  4685  0016F6  D013               	goto	l512
  4686                           
  4687                           ; BSR set to: 0
  4688                           ;modem.c: 198: {
  4689                           ;modem.c: 199: at8 = md_uart_write_str_ok((uint8_t *)&cpin[0], sizeof(cpin), 1, 0);
  4690  0016F8  0EAF               	movlw	low startup_ok@cpin
  4691  0016FA  6E16               	movwf	md_uart_write_str_ok@data,c
  4692  0016FC  0E00               	movlw	high startup_ok@cpin
  4693  0016FE  6E17               	movwf	md_uart_write_str_ok@data+1,c
  4694  001700  0E0B               	movlw	11
  4695  001702  6E18               	movwf	md_uart_write_str_ok@len1,c
  4696  001704  0E01               	movlw	1
  4697  001706  6E19               	movwf	md_uart_write_str_ok@wantOk,c
  4698  001708  0E00               	movlw	0
  4699  00170A  6E1A               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  4700  00170C  ECD3  F011         	call	_md_uart_write_str_ok	;wreg free
  4701  001710  0100               	movlb	0	; () banked
  4702  001712  6FEE               	movwf	_at8& (0+255),b
  4703                           
  4704                           ; BSR set to: 0
  4705                           ;modem.c: 200: if (at8 == 1)
  4706  001714  05EE               	decf	_at8& (0+255),w,b
  4707  001716  A4D8               	btfss	status,2,c
  4708  001718  D002               	goto	l512
  4709                           
  4710                           ; BSR set to: 0
  4711                           ;modem.c: 201: {
  4712                           ;modem.c: 203: numUartRetries = 30;
  4713  00171A  0E1E               	movlw	30
  4714  00171C  6E4A               	movwf	_numUartRetries,c
  4715  00171E                     l512:
  4716                           
  4717                           ; BSR set to: 0
  4718                           ;modem.c: 204: }
  4719                           ;modem.c: 205: }
  4720                           ;modem.c: 208: if (at8 == 1 && (at9 != 1 || at10 != 1 || at11 != 1))
  4721                           
  4722                           ; BSR set to: 0
  4723                           
  4724                           ; BSR set to: 0
  4725  00171E  05EE               	decf	_at8& (0+255),w,b
  4726  001720  A4D8               	btfss	status,2,c
  4727  001722  D05C               	goto	l522
  4728                           
  4729                           ; BSR set to: 0
  4730  001724  05ED               	decf	_at9& (0+255),w,b
  4731  001726  A4D8               	btfss	status,2,c
  4732  001728  D006               	goto	u7460
  4733                           
  4734                           ; BSR set to: 0
  4735  00172A  05EC               	decf	_at10& (0+255),w,b
  4736  00172C  A4D8               	btfss	status,2,c
  4737  00172E  D003               	goto	u7460
  4738                           
  4739                           ; BSR set to: 0
  4740  001730  05EB               	decf	_at11& (0+255),w,b
  4741  001732  B4D8               	btfsc	status,2,c
  4742  001734  D053               	goto	l522
  4743  001736                     u7460:
  4744                           
  4745                           ; BSR set to: 0
  4746                           ;modem.c: 209: {
  4747                           ;modem.c: 210: if (at9 != 1)
  4748                           
  4749                           ; BSR set to: 0
  4750  001736  05ED               	decf	_at9& (0+255),w,b
  4751  001738  B4D8               	btfsc	status,2,c
  4752  00173A  D015               	goto	l517
  4753                           
  4754                           ; BSR set to: 0
  4755                           ;modem.c: 211: {
  4756                           ;modem.c: 212: at9 = md_uart_write_str_ok((uint8_t *)&creg[0], sizeof(creg), 1, 0);
  4757  00173C  0EBA               	movlw	low startup_ok@creg
  4758  00173E  6E16               	movwf	md_uart_write_str_ok@data,c
  4759  001740  0E00               	movlw	high startup_ok@creg
  4760  001742  6E17               	movwf	md_uart_write_str_ok@data+1,c
  4761  001744  0E0B               	movlw	11
  4762  001746  6E18               	movwf	md_uart_write_str_ok@len1,c
  4763  001748  0E01               	movlw	1
  4764  00174A  6E19               	movwf	md_uart_write_str_ok@wantOk,c
  4765  00174C  0E00               	movlw	0
  4766  00174E  6E1A               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  4767  001750  ECD3  F011         	call	_md_uart_write_str_ok	;wreg free
  4768  001754  0100               	movlb	0	; () banked
  4769  001756  6FED               	movwf	_at9& (0+255),b
  4770                           
  4771                           ; BSR set to: 0
  4772                           ;modem.c: 213: if (at9 == 1)
  4773  001758  05ED               	decf	_at9& (0+255),w,b
  4774  00175A  A4D8               	btfss	status,2,c
  4775  00175C  D004               	goto	l517
  4776                           
  4777                           ; BSR set to: 0
  4778                           ;modem.c: 214: at9 = parse_creg_ok();
  4779  00175E  EC6A  F012         	call	_parse_creg_ok	;wreg free
  4780  001762  0100               	movlb	0	; () banked
  4781  001764  6FED               	movwf	_at9& (0+255),b
  4782  001766                     l517:
  4783                           
  4784                           ; BSR set to: 0
  4785                           ;modem.c: 215: }
  4786                           ;modem.c: 216: if (at10 != 1)
  4787                           
  4788                           ; BSR set to: 0
  4789                           
  4790                           ; BSR set to: 0
  4791  001766  05EC               	decf	_at10& (0+255),w,b
  4792  001768  B4D8               	btfsc	status,2,c
  4793  00176A  D015               	goto	l519
  4794                           
  4795                           ; BSR set to: 0
  4796                           ;modem.c: 217: {
  4797                           ;modem.c: 218: at10 = md_uart_write_str_ok((uint8_t *)&cereg[0], sizeof(cereg), 1, 0);
  4798  00176C  0EA3               	movlw	low startup_ok@cereg
  4799  00176E  6E16               	movwf	md_uart_write_str_ok@data,c
  4800  001770  0E00               	movlw	high startup_ok@cereg
  4801  001772  6E17               	movwf	md_uart_write_str_ok@data+1,c
  4802  001774  0E0C               	movlw	12
  4803  001776  6E18               	movwf	md_uart_write_str_ok@len1,c
  4804  001778  0E01               	movlw	1
  4805  00177A  6E19               	movwf	md_uart_write_str_ok@wantOk,c
  4806  00177C  0E00               	movlw	0
  4807  00177E  6E1A               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  4808  001780  ECD3  F011         	call	_md_uart_write_str_ok	;wreg free
  4809  001784  0100               	movlb	0	; () banked
  4810  001786  6FEC               	movwf	_at10& (0+255),b
  4811                           
  4812                           ; BSR set to: 0
  4813                           ;modem.c: 219: if (at10 == 1)
  4814  001788  05EC               	decf	_at10& (0+255),w,b
  4815  00178A  A4D8               	btfss	status,2,c
  4816  00178C  D004               	goto	l519
  4817                           
  4818                           ; BSR set to: 0
  4819                           ;modem.c: 220: at10 = parse_cereg_ok();
  4820  00178E  EC3C  F011         	call	_parse_cereg_ok	;wreg free
  4821  001792  0100               	movlb	0	; () banked
  4822  001794  6FEC               	movwf	_at10& (0+255),b
  4823  001796                     l519:
  4824                           
  4825                           ; BSR set to: 0
  4826                           ;modem.c: 221: }
  4827                           ;modem.c: 222: if (at11 != 1)
  4828                           
  4829                           ; BSR set to: 0
  4830                           
  4831                           ; BSR set to: 0
  4832  001796  05EB               	decf	_at11& (0+255),w,b
  4833  001798  B4D8               	btfsc	status,2,c
  4834  00179A  D015               	goto	l521
  4835                           
  4836                           ; BSR set to: 0
  4837                           ;modem.c: 223: {
  4838                           ;modem.c: 224: at11 = md_uart_write_str_ok((uint8_t *)&csq[0], sizeof(csq), 1, 0);
  4839  00179C  0ECF               	movlw	low startup_ok@csq
  4840  00179E  6E16               	movwf	md_uart_write_str_ok@data,c
  4841  0017A0  0E00               	movlw	high startup_ok@csq
  4842  0017A2  6E17               	movwf	md_uart_write_str_ok@data+1,c
  4843  0017A4  0E09               	movlw	9
  4844  0017A6  6E18               	movwf	md_uart_write_str_ok@len1,c
  4845  0017A8  0E01               	movlw	1
  4846  0017AA  6E19               	movwf	md_uart_write_str_ok@wantOk,c
  4847  0017AC  0E00               	movlw	0
  4848  0017AE  6E1A               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  4849  0017B0  ECD3  F011         	call	_md_uart_write_str_ok	;wreg free
  4850  0017B4  0100               	movlb	0	; () banked
  4851  0017B6  6FEB               	movwf	_at11& (0+255),b
  4852                           
  4853                           ; BSR set to: 0
  4854                           ;modem.c: 225: if (at11 == 1)
  4855  0017B8  05EB               	decf	_at11& (0+255),w,b
  4856  0017BA  A4D8               	btfss	status,2,c
  4857  0017BC  D004               	goto	l521
  4858                           
  4859                           ; BSR set to: 0
  4860                           ;modem.c: 226: at11 = parse_csq_ok();
  4861  0017BE  ECCC  F00F         	call	_parse_csq_ok	;wreg free
  4862  0017C2  0100               	movlb	0	; () banked
  4863  0017C4  6FEB               	movwf	_at11& (0+255),b
  4864  0017C6                     l521:
  4865                           
  4866                           ; BSR set to: 0
  4867                           ;modem.c: 227: }
  4868                           ;modem.c: 229: if (at9 == 1 && at10 == 1 && at11 == 1)
  4869                           
  4870                           ; BSR set to: 0
  4871                           
  4872                           ; BSR set to: 0
  4873  0017C6  05ED               	decf	_at9& (0+255),w,b
  4874  0017C8  A4D8               	btfss	status,2,c
  4875  0017CA  D008               	goto	l522
  4876                           
  4877                           ; BSR set to: 0
  4878  0017CC  05EC               	decf	_at10& (0+255),w,b
  4879  0017CE  A4D8               	btfss	status,2,c
  4880  0017D0  D005               	goto	l522
  4881                           
  4882                           ; BSR set to: 0
  4883  0017D2  05EB               	decf	_at11& (0+255),w,b
  4884  0017D4  A4D8               	btfss	status,2,c
  4885  0017D6  D002               	goto	l522
  4886                           
  4887                           ; BSR set to: 0
  4888                           ;modem.c: 230: numUartRetries = 15;
  4889  0017D8  0E0F               	movlw	15
  4890  0017DA  6E4A               	movwf	_numUartRetries,c
  4891  0017DC                     l522:
  4892                           
  4893                           ; BSR set to: 0
  4894                           ;modem.c: 231: }
  4895                           ;modem.c: 237: if (at1 == 5 || at2 == 5 || at3 == 5 || at4 == 5 || at5 == 5 || at6 == 5 
      +                          || at7 == 5 || at8 == 5 || at9 == 5 || at10 == 5 || at11 == 5)
  4896                           
  4897                           ; BSR set to: 0
  4898                           
  4899                           ; BSR set to: 0
  4900  0017DC  0E05               	movlw	5
  4901  0017DE  19F5               	xorwf	_at1& (0+255),w,b
  4902  0017E0  B4D8               	btfsc	status,2,c
  4903  0017E2  D028               	goto	u7660
  4904                           
  4905                           ; BSR set to: 0
  4906  0017E4  0E05               	movlw	5
  4907  0017E6  19F4               	xorwf	_at2& (0+255),w,b
  4908  0017E8  B4D8               	btfsc	status,2,c
  4909  0017EA  D024               	goto	u7660
  4910                           
  4911                           ; BSR set to: 0
  4912  0017EC  0E05               	movlw	5
  4913  0017EE  19F3               	xorwf	_at3& (0+255),w,b
  4914  0017F0  B4D8               	btfsc	status,2,c
  4915  0017F2  D020               	goto	u7660
  4916                           
  4917                           ; BSR set to: 0
  4918  0017F4  0E05               	movlw	5
  4919  0017F6  19F2               	xorwf	_at4& (0+255),w,b
  4920  0017F8  B4D8               	btfsc	status,2,c
  4921  0017FA  D01C               	goto	u7660
  4922                           
  4923                           ; BSR set to: 0
  4924  0017FC  0E05               	movlw	5
  4925  0017FE  19F1               	xorwf	_at5& (0+255),w,b
  4926  001800  B4D8               	btfsc	status,2,c
  4927  001802  D018               	goto	u7660
  4928                           
  4929                           ; BSR set to: 0
  4930  001804  0E05               	movlw	5
  4931  001806  19F0               	xorwf	_at6& (0+255),w,b
  4932  001808  B4D8               	btfsc	status,2,c
  4933  00180A  D014               	goto	u7660
  4934                           
  4935                           ; BSR set to: 0
  4936  00180C  0E05               	movlw	5
  4937  00180E  19EF               	xorwf	_at7& (0+255),w,b
  4938  001810  B4D8               	btfsc	status,2,c
  4939  001812  D010               	goto	u7660
  4940                           
  4941                           ; BSR set to: 0
  4942  001814  0E05               	movlw	5
  4943  001816  19EE               	xorwf	_at8& (0+255),w,b
  4944  001818  B4D8               	btfsc	status,2,c
  4945  00181A  D00C               	goto	u7660
  4946                           
  4947                           ; BSR set to: 0
  4948  00181C  0E05               	movlw	5
  4949  00181E  19ED               	xorwf	_at9& (0+255),w,b
  4950  001820  B4D8               	btfsc	status,2,c
  4951  001822  D008               	goto	u7660
  4952                           
  4953                           ; BSR set to: 0
  4954  001824  0E05               	movlw	5
  4955  001826  19EC               	xorwf	_at10& (0+255),w,b
  4956  001828  B4D8               	btfsc	status,2,c
  4957  00182A  D004               	goto	u7660
  4958                           
  4959                           ; BSR set to: 0
  4960  00182C  0E05               	movlw	5
  4961  00182E  19EB               	xorwf	_at11& (0+255),w,b
  4962  001830  A4D8               	btfss	status,2,c
  4963  001832  D004               	goto	l523
  4964  001834                     u7660:
  4965                           
  4966                           ; BSR set to: 0
  4967                           ;modem.c: 239: {
  4968                           ;modem.c: 240: clear_at_ok();
  4969                           
  4970                           ; BSR set to: 0
  4971  001834  EC5E  F017         	call	_clear_at_ok	;wreg free
  4972                           
  4973                           ;modem.c: 241: return 5;
  4974  001838  0E05               	movlw	5
  4975  00183A  0012               	return	
  4976  00183C                     l523:
  4977                           
  4978                           ;modem.c: 243: else if (at1 == 1 && at2 == 1 && at3 == 1 && at4 == 1 && at5 == 1 && at6 
      +                          == 1 && at7 == 1 && at8 == 1 && at9 == 1 && at10 == 1 && at11 == 1 && at12 == 1)
  4979  00183C  0100               	movlb	0	; () banked
  4980  00183E  05F5               	decf	_at1& (0+255),w,b
  4981  001840  A4D8               	btfss	status,2,c
  4982  001842  D025               	goto	l528
  4983                           
  4984                           ; BSR set to: 0
  4985  001844  05F4               	decf	_at2& (0+255),w,b
  4986  001846  A4D8               	btfss	status,2,c
  4987  001848  D022               	goto	l528
  4988                           
  4989                           ; BSR set to: 0
  4990  00184A  05F3               	decf	_at3& (0+255),w,b
  4991  00184C  A4D8               	btfss	status,2,c
  4992  00184E  D01F               	goto	l528
  4993                           
  4994                           ; BSR set to: 0
  4995  001850  05F2               	decf	_at4& (0+255),w,b
  4996  001852  A4D8               	btfss	status,2,c
  4997  001854  D01C               	goto	l528
  4998                           
  4999                           ; BSR set to: 0
  5000  001856  05F1               	decf	_at5& (0+255),w,b
  5001  001858  A4D8               	btfss	status,2,c
  5002  00185A  D019               	goto	l528
  5003                           
  5004                           ; BSR set to: 0
  5005  00185C  05F0               	decf	_at6& (0+255),w,b
  5006  00185E  A4D8               	btfss	status,2,c
  5007  001860  D016               	goto	l528
  5008                           
  5009                           ; BSR set to: 0
  5010  001862  05EF               	decf	_at7& (0+255),w,b
  5011  001864  A4D8               	btfss	status,2,c
  5012  001866  D013               	goto	l528
  5013                           
  5014                           ; BSR set to: 0
  5015  001868  05EE               	decf	_at8& (0+255),w,b
  5016  00186A  A4D8               	btfss	status,2,c
  5017  00186C  D010               	goto	l528
  5018                           
  5019                           ; BSR set to: 0
  5020  00186E  05ED               	decf	_at9& (0+255),w,b
  5021  001870  A4D8               	btfss	status,2,c
  5022  001872  D00D               	goto	l528
  5023                           
  5024                           ; BSR set to: 0
  5025  001874  05EC               	decf	_at10& (0+255),w,b
  5026  001876  A4D8               	btfss	status,2,c
  5027  001878  D00A               	goto	l528
  5028                           
  5029                           ; BSR set to: 0
  5030  00187A  05EB               	decf	_at11& (0+255),w,b
  5031  00187C  A4D8               	btfss	status,2,c
  5032  00187E  D007               	goto	l528
  5033                           
  5034                           ; BSR set to: 0
  5035  001880  05EA               	decf	_at12& (0+255),w,b
  5036  001882  A4D8               	btfss	status,2,c
  5037  001884  D004               	goto	l528
  5038                           
  5039                           ; BSR set to: 0
  5040                           ;modem.c: 245: {
  5041                           ;modem.c: 246: clear_at_ok();
  5042  001886  EC5E  F017         	call	_clear_at_ok	;wreg free
  5043                           
  5044                           ;modem.c: 247: return 1;
  5045  00188A  0E01               	movlw	1
  5046  00188C  0012               	return	
  5047  00188E                     l528:
  5048                           
  5049                           ;modem.c: 248: }
  5050                           ;modem.c: 249: return 2;
  5051  00188E  0E02               	movlw	2
  5052  001890  0012               	return	
  5053  001892                     __end_of_startup_ok:
  5054                           	opt stack 0
  5055                           tblptru	equ	0xFF8
  5056                           tblptrh	equ	0xFF7
  5057                           tblptrl	equ	0xFF6
  5058                           tablat	equ	0xFF5
  5059                           prodh	equ	0xFF4
  5060                           prodl	equ	0xFF3
  5061                           intcon	equ	0xFF2
  5062                           postinc0	equ	0xFEE
  5063                           wreg	equ	0xFE8
  5064                           postdec1	equ	0xFE5
  5065                           plusw1	equ	0xFE3
  5066                           fsr1l	equ	0xFE1
  5067                           plusw2	equ	0xFDB
  5068                           status	equ	0xFD8
  5069                           
  5070 ;; *************** function _parse_csq_ok *****************
  5071 ;; Defined at:
  5072 ;;		line 305 in file "uart.c"
  5073 ;; Parameters:    Size  Location     Type
  5074 ;;		None
  5075 ;; Auto vars:     Size  Location     Type
  5076 ;;  i               1   34[COMRAM] unsigned char 
  5077 ;;  csq_rsp         7   24[COMRAM] unsigned char [7]
  5078 ;;  tens_digit      1   35[COMRAM] unsigned char 
  5079 ;;  colon_index     1   33[COMRAM] unsigned char 
  5080 ;;  comma_index     1   32[COMRAM] unsigned char 
  5081 ;;  ones_digit      1   31[COMRAM] unsigned char 
  5082 ;; Return value:  Size  Location     Type
  5083 ;;                  1    wreg      unsigned char 
  5084 ;; Registers used:
  5085 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5086 ;; Tracked objects:
  5087 ;;		On entry : 0/0
  5088 ;;		On exit  : 0/0
  5089 ;;		Unchanged: 0/0
  5090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5092 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5093 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5094 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5095 ;;Total ram usage:       16 bytes
  5096 ;; Hardware stack levels used:    1
  5097 ;; Hardware stack levels required when called:    3
  5098 ;; This function calls:
  5099 ;;		Nothing
  5100 ;; This function is called by:
  5101 ;;		_startup_ok
  5102 ;; This function uses a non-reentrant model
  5103 ;;
  5104                           
  5105                           	psect	text16
  5106  001F98                     __ptext16:
  5107                           	opt stack 0
  5108  001F98                     _parse_csq_ok:
  5109                           	opt stack 22
  5110                           
  5111                           ;uart.c: 307: uint8_t csq_rsp[] = "+CSQ: ";
  5112                           
  5113                           ;incstack = 0
  5114  001F98  EE21  F0D6         	lfsr	2,parse_csq_ok@F6857
  5115  001F9C  EE10  F019         	lfsr	1,parse_csq_ok@csq_rsp
  5116  001FA0  0E06               	movlw	6
  5117  001FA2                     u6811:
  5118  001FA2  CFDB FFE3          	movff	plusw2,plusw1
  5119  001FA6  06E8               	decf	wreg,f,c
  5120  001FA8  E2FC               	bc	u6811
  5121                           
  5122                           ;uart.c: 308: uint8_t colon_index = 0, comma_index = 0;
  5123  001FAA  0E00               	movlw	0
  5124  001FAC  6E22               	movwf	parse_csq_ok@colon_index,c
  5125  001FAE  0E00               	movlw	0
  5126  001FB0  6E21               	movwf	parse_csq_ok@comma_index,c
  5127                           
  5128                           ;uart.c: 309: uint8_t tens_digit, ones_digit;
  5129                           ;uart.c: 310: for (uint8_t i = 0; i < sizeof(mdRxBuf); i++)
  5130  001FB2  0E00               	movlw	0
  5131  001FB4  6E23               	movwf	parse_csq_ok@i,c
  5132  001FB6                     l6094:
  5133  001FB6  0E9F               	movlw	159
  5134  001FB8  6423               	cpfsgt	parse_csq_ok@i,c
  5135  001FBA  D001               	goto	l798
  5136  001FBC  D00F               	goto	u6840
  5137  001FBE                     l798:
  5138                           
  5139                           ;uart.c: 311: {
  5140                           ;uart.c: 312: if (mdRxBuf[i] == csq_rsp[4])
  5141  001FBE  5023               	movf	parse_csq_ok@i,w,c
  5142  001FC0  0D01               	mullw	1
  5143  001FC2  0E00               	movlw	low _mdRxBuf
  5144  001FC4  24F3               	addwf	prodl,w,c
  5145  001FC6  6ED9               	movwf	fsr2l,c
  5146  001FC8  0E02               	movlw	high _mdRxBuf
  5147  001FCA  20F4               	addwfc	prodh,w,c
  5148  001FCC  6EDA               	movwf	fsr2h,c
  5149  001FCE  501D               	movf	parse_csq_ok@csq_rsp+4,w,c
  5150  001FD0  18DE               	xorwf	postinc2,w,c
  5151  001FD2  B4D8               	btfsc	status,2,c
  5152                           
  5153                           ;uart.c: 313: colon_index = i;
  5154  001FD4  C023  F022         	movff	parse_csq_ok@i,parse_csq_ok@colon_index
  5155  001FD8  2A23               	incf	parse_csq_ok@i,f,c
  5156  001FDA  D7ED               	goto	l6094
  5157  001FDC                     u6840:
  5158                           
  5159                           ;uart.c: 316: }
  5160                           ;uart.c: 317: if (mdRxBuf[(uint8_t)(colon_index - 4)] == csq_rsp[0] && mdRxBuf[(uint8_t)
      +                          (colon_index - 3)] == csq_rsp[1] && mdRxBuf[(uint8_t)(colon_index - 2)] == csq_rsp[2] &&
      +                           mdRxBuf[(uint8_t)(colon_index - 1)] == csq_rsp[3])
  5161  001FDC  C022  F015         	movff	parse_csq_ok@colon_index,??_parse_csq_ok
  5162  001FE0  0EFC               	movlw	252
  5163  001FE2  2615               	addwf	??_parse_csq_ok,f,c
  5164  001FE4  5015               	movf	??_parse_csq_ok,w,c
  5165  001FE6  0D01               	mullw	1
  5166  001FE8  0E00               	movlw	low _mdRxBuf
  5167  001FEA  24F3               	addwf	prodl,w,c
  5168  001FEC  6ED9               	movwf	fsr2l,c
  5169  001FEE  0E02               	movlw	high _mdRxBuf
  5170  001FF0  20F4               	addwfc	prodh,w,c
  5171  001FF2  6EDA               	movwf	fsr2h,c
  5172  001FF4  5019               	movf	parse_csq_ok@csq_rsp,w,c
  5173  001FF6  18DE               	xorwf	postinc2,w,c
  5174  001FF8  A4D8               	btfss	status,2,c
  5175  001FFA  D094               	goto	l813
  5176  001FFC  C022  F015         	movff	parse_csq_ok@colon_index,??_parse_csq_ok
  5177  002000  0EFD               	movlw	253
  5178  002002  2615               	addwf	??_parse_csq_ok,f,c
  5179  002004  5015               	movf	??_parse_csq_ok,w,c
  5180  002006  0D01               	mullw	1
  5181  002008  0E00               	movlw	low _mdRxBuf
  5182  00200A  24F3               	addwf	prodl,w,c
  5183  00200C  6ED9               	movwf	fsr2l,c
  5184  00200E  0E02               	movlw	high _mdRxBuf
  5185  002010  20F4               	addwfc	prodh,w,c
  5186  002012  6EDA               	movwf	fsr2h,c
  5187  002014  501A               	movf	parse_csq_ok@csq_rsp+1,w,c
  5188  002016  18DE               	xorwf	postinc2,w,c
  5189  002018  A4D8               	btfss	status,2,c
  5190  00201A  D084               	goto	l813
  5191  00201C  C022  F015         	movff	parse_csq_ok@colon_index,??_parse_csq_ok
  5192  002020  0EFE               	movlw	254
  5193  002022  2615               	addwf	??_parse_csq_ok,f,c
  5194  002024  5015               	movf	??_parse_csq_ok,w,c
  5195  002026  0D01               	mullw	1
  5196  002028  0E00               	movlw	low _mdRxBuf
  5197  00202A  24F3               	addwf	prodl,w,c
  5198  00202C  6ED9               	movwf	fsr2l,c
  5199  00202E  0E02               	movlw	high _mdRxBuf
  5200  002030  20F4               	addwfc	prodh,w,c
  5201  002032  6EDA               	movwf	fsr2h,c
  5202  002034  501B               	movf	parse_csq_ok@csq_rsp+2,w,c
  5203  002036  18DE               	xorwf	postinc2,w,c
  5204  002038  A4D8               	btfss	status,2,c
  5205  00203A  D074               	goto	l813
  5206  00203C  C022  F015         	movff	parse_csq_ok@colon_index,??_parse_csq_ok
  5207  002040  0EFF               	movlw	255
  5208  002042  2615               	addwf	??_parse_csq_ok,f,c
  5209  002044  5015               	movf	??_parse_csq_ok,w,c
  5210  002046  0D01               	mullw	1
  5211  002048  0E00               	movlw	low _mdRxBuf
  5212  00204A  24F3               	addwf	prodl,w,c
  5213  00204C  6ED9               	movwf	fsr2l,c
  5214  00204E  0E02               	movlw	high _mdRxBuf
  5215  002050  20F4               	addwfc	prodh,w,c
  5216  002052  6EDA               	movwf	fsr2h,c
  5217  002054  501C               	movf	parse_csq_ok@csq_rsp+3,w,c
  5218  002056  18DE               	xorwf	postinc2,w,c
  5219  002058  A4D8               	btfss	status,2,c
  5220  00205A  D064               	goto	l813
  5221                           
  5222                           ;uart.c: 319: {
  5223                           ;uart.c: 320: if (comma_index - colon_index > 3)
  5224  00205C  5022               	movf	parse_csq_ok@colon_index,w,c
  5225  00205E  6E15               	movwf	??_parse_csq_ok& (0+255),c
  5226  002060  6A16               	clrf	(??_parse_csq_ok+1)& (0+255),c
  5227  002062  1E15               	comf	??_parse_csq_ok,f,c
  5228  002064  1E16               	comf	??_parse_csq_ok+1,f,c
  5229  002066  4A15               	infsnz	??_parse_csq_ok,f,c
  5230  002068  2A16               	incf	??_parse_csq_ok+1,f,c
  5231  00206A  5021               	movf	parse_csq_ok@comma_index,w,c
  5232  00206C  6E17               	movwf	(??_parse_csq_ok+2)& (0+255),c
  5233  00206E  6A18               	clrf	(??_parse_csq_ok+3)& (0+255),c
  5234  002070  5015               	movf	??_parse_csq_ok,w,c
  5235  002072  2617               	addwf	??_parse_csq_ok+2,f,c
  5236  002074  5016               	movf	??_parse_csq_ok+1,w,c
  5237  002076  2218               	addwfc	??_parse_csq_ok+3,f,c
  5238  002078  BE18               	btfsc	??_parse_csq_ok+3,7,c
  5239  00207A  D040               	goto	l803
  5240  00207C  5018               	movf	??_parse_csq_ok+3,w,c
  5241  00207E  E104               	bnz	u6890
  5242  002080  0E04               	movlw	4
  5243  002082  5C17               	subwf	??_parse_csq_ok+2,w,c
  5244  002084  A0D8               	btfss	status,0,c
  5245  002086  D03A               	goto	l803
  5246  002088                     u6890:
  5247                           
  5248                           ;uart.c: 321: {
  5249                           ;uart.c: 322: tens_digit = (mdRxBuf[(uint8_t)(comma_index - 2)]);
  5250  002088  C021  F015         	movff	parse_csq_ok@comma_index,??_parse_csq_ok
  5251  00208C  0EFE               	movlw	254
  5252  00208E  2615               	addwf	??_parse_csq_ok,f,c
  5253  002090  5015               	movf	??_parse_csq_ok,w,c
  5254  002092  0D01               	mullw	1
  5255  002094  0E00               	movlw	low _mdRxBuf
  5256  002096  24F3               	addwf	prodl,w,c
  5257  002098  6ED9               	movwf	fsr2l,c
  5258  00209A  0E02               	movlw	high _mdRxBuf
  5259  00209C  20F4               	addwfc	prodh,w,c
  5260  00209E  6EDA               	movwf	fsr2h,c
  5261  0020A0  50DF               	movf	indf2,w,c
  5262  0020A2  6E24               	movwf	parse_csq_ok@tens_digit,c
  5263                           
  5264                           ;uart.c: 323: if (tens_digit >= 0x41)
  5265  0020A4  0E40               	movlw	64
  5266  0020A6  6424               	cpfsgt	parse_csq_ok@tens_digit,c
  5267  0020A8  D003               	goto	l804
  5268                           
  5269                           ;uart.c: 324: tens_digit = (uint8_t)((tens_digit - 0x41 + 0x0A) * 10);
  5270  0020AA  5024               	movf	parse_csq_ok@tens_digit,w,c
  5271  0020AC  0FC9               	addlw	201
  5272  0020AE  D002               	goto	L3
  5273  0020B0                     l804:
  5274                           
  5275                           ;uart.c: 325: else
  5276                           ;uart.c: 326: tens_digit = (uint8_t)((tens_digit - 0x30) * 10);
  5277  0020B0  5024               	movf	parse_csq_ok@tens_digit,w,c
  5278  0020B2  0FD0               	addlw	208
  5279  0020B4                     L3:
  5280  0020B4  0D0A               	mullw	10
  5281  0020B6  CFF3 F024          	movff	prodl,parse_csq_ok@tens_digit
  5282                           
  5283                           ;uart.c: 327: ones_digit = (mdRxBuf[(uint8_t)(comma_index - 1)]);
  5284  0020BA  C021  F015         	movff	parse_csq_ok@comma_index,??_parse_csq_ok
  5285  0020BE  0EFF               	movlw	255
  5286  0020C0  2615               	addwf	??_parse_csq_ok,f,c
  5287  0020C2  5015               	movf	??_parse_csq_ok,w,c
  5288  0020C4  0D01               	mullw	1
  5289  0020C6  0E00               	movlw	low _mdRxBuf
  5290  0020C8  24F3               	addwf	prodl,w,c
  5291  0020CA  6ED9               	movwf	fsr2l,c
  5292  0020CC  0E02               	movlw	high _mdRxBuf
  5293  0020CE  20F4               	addwfc	prodh,w,c
  5294  0020D0  6EDA               	movwf	fsr2h,c
  5295  0020D2  50DF               	movf	indf2,w,c
  5296  0020D4  6E20               	movwf	parse_csq_ok@ones_digit,c
  5297                           
  5298                           ;uart.c: 328: if (ones_digit >= 0x41)
  5299  0020D6  0E40               	movlw	64
  5300  0020D8  6420               	cpfsgt	parse_csq_ok@ones_digit,c
  5301  0020DA  D002               	goto	l806
  5302                           
  5303                           ;uart.c: 329: ones_digit -= 0x41;
  5304  0020DC  0E41               	movlw	65
  5305  0020DE  D001               	goto	L2
  5306  0020E0                     l806:
  5307                           
  5308                           ;uart.c: 330: else
  5309                           ;uart.c: 331: ones_digit -= 0x30;
  5310  0020E0  0E30               	movlw	48
  5311  0020E2                     L2:
  5312  0020E2  5E20               	subwf	parse_csq_ok@ones_digit,f,c
  5313                           
  5314                           ;uart.c: 332: tens_digit += ones_digit;
  5315  0020E4  5020               	movf	parse_csq_ok@ones_digit,w,c
  5316  0020E6  2624               	addwf	parse_csq_ok@tens_digit,f,c
  5317                           
  5318                           ;uart.c: 333: if (tens_digit > 0 && tens_digit < 99)
  5319  0020E8  5024               	movf	parse_csq_ok@tens_digit,w,c
  5320  0020EA  B4D8               	btfsc	status,2,c
  5321  0020EC  D005               	goto	l808
  5322  0020EE  0E63               	movlw	99
  5323  0020F0  6024               	cpfslt	parse_csq_ok@tens_digit,c
  5324  0020F2  D002               	goto	l808
  5325  0020F4                     u6930:
  5326                           
  5327                           ;uart.c: 334: return 1;
  5328  0020F4  0E01               	movlw	1
  5329  0020F6  0012               	return	
  5330  0020F8                     l808:
  5331                           
  5332                           ;uart.c: 335: else
  5333                           ;uart.c: 336: return 4;
  5334  0020F8  0E04               	movlw	4
  5335  0020FA  0012               	return	
  5336  0020FC                     l803:
  5337                           
  5338                           ;uart.c: 338: else
  5339                           ;uart.c: 339: {
  5340                           ;uart.c: 340: ones_digit = (uint8_t)(mdRxBuf[(uint8_t)(comma_index - 1)] - 0x30);
  5341  0020FC  C021  F015         	movff	parse_csq_ok@comma_index,??_parse_csq_ok
  5342  002100  0EFF               	movlw	255
  5343  002102  2615               	addwf	??_parse_csq_ok,f,c
  5344  002104  5015               	movf	??_parse_csq_ok,w,c
  5345  002106  0D01               	mullw	1
  5346  002108  0E00               	movlw	low _mdRxBuf
  5347  00210A  24F3               	addwf	prodl,w,c
  5348  00210C  6ED9               	movwf	fsr2l,c
  5349  00210E  0E02               	movlw	high _mdRxBuf
  5350  002110  20F4               	addwfc	prodh,w,c
  5351  002112  6EDA               	movwf	fsr2h,c
  5352  002114  50DF               	movf	indf2,w,c
  5353  002116  0FD0               	addlw	208
  5354  002118  6E20               	movwf	parse_csq_ok@ones_digit,c
  5355                           
  5356                           ;uart.c: 341: if (ones_digit > 0)
  5357  00211A  5020               	movf	parse_csq_ok@ones_digit,w,c
  5358  00211C  A4D8               	btfss	status,2,c
  5359  00211E  D7EA               	goto	u6930
  5360                           
  5361                           ;uart.c: 343: else
  5362                           ;uart.c: 344: return 4;
  5363                           
  5364                           ;uart.c: 342: return 1;
  5365  002120  0E04               	movlw	4
  5366  002122  0012               	return	
  5367  002124                     l813:
  5368                           
  5369                           ;uart.c: 345: }
  5370                           ;uart.c: 346: }
  5371                           ;uart.c: 347: return 4;
  5372  002124  0E04               	movlw	4
  5373  002126  0012               	return	
  5374  002128                     __end_of_parse_csq_ok:
  5375                           	opt stack 0
  5376                           tblptru	equ	0xFF8
  5377                           tblptrh	equ	0xFF7
  5378                           tblptrl	equ	0xFF6
  5379                           tablat	equ	0xFF5
  5380                           prodh	equ	0xFF4
  5381                           prodl	equ	0xFF3
  5382                           intcon	equ	0xFF2
  5383                           postinc0	equ	0xFEE
  5384                           wreg	equ	0xFE8
  5385                           postdec1	equ	0xFE5
  5386                           plusw1	equ	0xFE3
  5387                           fsr1l	equ	0xFE1
  5388                           indf2	equ	0xFDF
  5389                           postinc2	equ	0xFDE
  5390                           plusw2	equ	0xFDB
  5391                           fsr2h	equ	0xFDA
  5392                           fsr2l	equ	0xFD9
  5393                           status	equ	0xFD8
  5394                           
  5395 ;; *************** function _parse_creg_ok *****************
  5396 ;; Defined at:
  5397 ;;		line 264 in file "uart.c"
  5398 ;; Parameters:    Size  Location     Type
  5399 ;;		None
  5400 ;; Auto vars:     Size  Location     Type
  5401 ;;  i               1   31[COMRAM] unsigned char 
  5402 ;;  creg_rsp        8   22[COMRAM] unsigned char [8]
  5403 ;;  registration    1   30[COMRAM] unsigned char 
  5404 ;; Return value:  Size  Location     Type
  5405 ;;                  1    wreg      unsigned char 
  5406 ;; Registers used:
  5407 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5408 ;; Tracked objects:
  5409 ;;		On entry : 0/0
  5410 ;;		On exit  : 0/0
  5411 ;;		Unchanged: 0/0
  5412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5414 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5415 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5416 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5417 ;;Total ram usage:       12 bytes
  5418 ;; Hardware stack levels used:    1
  5419 ;; Hardware stack levels required when called:    3
  5420 ;; This function calls:
  5421 ;;		Nothing
  5422 ;; This function is called by:
  5423 ;;		_startup_ok
  5424 ;; This function uses a non-reentrant model
  5425 ;;
  5426                           
  5427                           	psect	text17
  5428  0024D4                     __ptext17:
  5429                           	opt stack 0
  5430  0024D4                     _parse_creg_ok:
  5431                           	opt stack 22
  5432                           
  5433                           ;uart.c: 266: uint8_t creg_rsp[] = "+CREG: ";
  5434                           
  5435                           ;incstack = 0
  5436  0024D4  EE21  F0CE         	lfsr	2,parse_creg_ok@F6836
  5437  0024D8  EE10  F017         	lfsr	1,parse_creg_ok@creg_rsp
  5438  0024DC  0E07               	movlw	7
  5439  0024DE                     u6581:
  5440  0024DE  CFDB FFE3          	movff	plusw2,plusw1
  5441  0024E2  06E8               	decf	wreg,f,c
  5442  0024E4  E2FC               	bc	u6581
  5443                           
  5444                           ;uart.c: 267: uint8_t registration_num;
  5445                           ;uart.c: 268: for (uint8_t i = 0; i < sizeof(mdRxBuf); i++)
  5446  0024E6  0E00               	movlw	0
  5447  0024E8  6E20               	movwf	parse_creg_ok@i,c
  5448  0024EA                     l6000:
  5449  0024EA  0E9F               	movlw	159
  5450  0024EC  6420               	cpfsgt	parse_creg_ok@i,c
  5451  0024EE  D001               	goto	l778
  5452  0024F0  D076               	goto	u6680
  5453  0024F2                     l778:
  5454                           
  5455                           ;uart.c: 269: {
  5456                           ;uart.c: 270: if (mdRxBuf[i] == creg_rsp[0] && mdRxBuf[(uint8_t)(i + 1)] == creg_rsp[1] 
      +                          && mdRxBuf[(uint8_t)(i + 2)] == creg_rsp[2] && mdRxBuf[(uint8_t)(i + 3)] == creg_rsp[3] 
      +                          && mdRxBuf[(uint8_t)(i + 4)] == creg_rsp[4] && mdRxBuf[(uint8_t)(i + 5)] == creg_rsp[5])
  5457  0024F2  5020               	movf	parse_creg_ok@i,w,c
  5458  0024F4  0D01               	mullw	1
  5459  0024F6  0E00               	movlw	low _mdRxBuf
  5460  0024F8  24F3               	addwf	prodl,w,c
  5461  0024FA  6ED9               	movwf	fsr2l,c
  5462  0024FC  0E02               	movlw	high _mdRxBuf
  5463  0024FE  20F4               	addwfc	prodh,w,c
  5464  002500  6EDA               	movwf	fsr2h,c
  5465  002502  5017               	movf	parse_creg_ok@creg_rsp,w,c
  5466  002504  18DE               	xorwf	postinc2,w,c
  5467  002506  A4D8               	btfss	status,2,c
  5468  002508  D068               	goto	l783
  5469  00250A  C020  F015         	movff	parse_creg_ok@i,??_parse_creg_ok
  5470  00250E  0E01               	movlw	1
  5471  002510  2615               	addwf	??_parse_creg_ok,f,c
  5472  002512  5015               	movf	??_parse_creg_ok,w,c
  5473  002514  0D01               	mullw	1
  5474  002516  0E00               	movlw	low _mdRxBuf
  5475  002518  24F3               	addwf	prodl,w,c
  5476  00251A  6ED9               	movwf	fsr2l,c
  5477  00251C  0E02               	movlw	high _mdRxBuf
  5478  00251E  20F4               	addwfc	prodh,w,c
  5479  002520  6EDA               	movwf	fsr2h,c
  5480  002522  5018               	movf	parse_creg_ok@creg_rsp+1,w,c
  5481  002524  18DE               	xorwf	postinc2,w,c
  5482  002526  A4D8               	btfss	status,2,c
  5483  002528  D058               	goto	l783
  5484  00252A  C020  F015         	movff	parse_creg_ok@i,??_parse_creg_ok
  5485  00252E  0E02               	movlw	2
  5486  002530  2615               	addwf	??_parse_creg_ok,f,c
  5487  002532  5015               	movf	??_parse_creg_ok,w,c
  5488  002534  0D01               	mullw	1
  5489  002536  0E00               	movlw	low _mdRxBuf
  5490  002538  24F3               	addwf	prodl,w,c
  5491  00253A  6ED9               	movwf	fsr2l,c
  5492  00253C  0E02               	movlw	high _mdRxBuf
  5493  00253E  20F4               	addwfc	prodh,w,c
  5494  002540  6EDA               	movwf	fsr2h,c
  5495  002542  5019               	movf	parse_creg_ok@creg_rsp+2,w,c
  5496  002544  18DE               	xorwf	postinc2,w,c
  5497  002546  A4D8               	btfss	status,2,c
  5498  002548  D048               	goto	l783
  5499  00254A  C020  F015         	movff	parse_creg_ok@i,??_parse_creg_ok
  5500  00254E  0E03               	movlw	3
  5501  002550  2615               	addwf	??_parse_creg_ok,f,c
  5502  002552  5015               	movf	??_parse_creg_ok,w,c
  5503  002554  0D01               	mullw	1
  5504  002556  0E00               	movlw	low _mdRxBuf
  5505  002558  24F3               	addwf	prodl,w,c
  5506  00255A  6ED9               	movwf	fsr2l,c
  5507  00255C  0E02               	movlw	high _mdRxBuf
  5508  00255E  20F4               	addwfc	prodh,w,c
  5509  002560  6EDA               	movwf	fsr2h,c
  5510  002562  501A               	movf	parse_creg_ok@creg_rsp+3,w,c
  5511  002564  18DE               	xorwf	postinc2,w,c
  5512  002566  A4D8               	btfss	status,2,c
  5513  002568  D038               	goto	l783
  5514  00256A  C020  F015         	movff	parse_creg_ok@i,??_parse_creg_ok
  5515  00256E  0E04               	movlw	4
  5516  002570  2615               	addwf	??_parse_creg_ok,f,c
  5517  002572  5015               	movf	??_parse_creg_ok,w,c
  5518  002574  0D01               	mullw	1
  5519  002576  0E00               	movlw	low _mdRxBuf
  5520  002578  24F3               	addwf	prodl,w,c
  5521  00257A  6ED9               	movwf	fsr2l,c
  5522  00257C  0E02               	movlw	high _mdRxBuf
  5523  00257E  20F4               	addwfc	prodh,w,c
  5524  002580  6EDA               	movwf	fsr2h,c
  5525  002582  501B               	movf	parse_creg_ok@creg_rsp+4,w,c
  5526  002584  18DE               	xorwf	postinc2,w,c
  5527  002586  A4D8               	btfss	status,2,c
  5528  002588  D028               	goto	l783
  5529  00258A  C020  F015         	movff	parse_creg_ok@i,??_parse_creg_ok
  5530  00258E  0E05               	movlw	5
  5531  002590  2615               	addwf	??_parse_creg_ok,f,c
  5532  002592  5015               	movf	??_parse_creg_ok,w,c
  5533  002594  0D01               	mullw	1
  5534  002596  0E00               	movlw	low _mdRxBuf
  5535  002598  24F3               	addwf	prodl,w,c
  5536  00259A  6ED9               	movwf	fsr2l,c
  5537  00259C  0E02               	movlw	high _mdRxBuf
  5538  00259E  20F4               	addwfc	prodh,w,c
  5539  0025A0  6EDA               	movwf	fsr2h,c
  5540  0025A2  501C               	movf	parse_creg_ok@creg_rsp+5,w,c
  5541  0025A4  18DE               	xorwf	postinc2,w,c
  5542  0025A6  A4D8               	btfss	status,2,c
  5543  0025A8  D018               	goto	l783
  5544                           
  5545                           ;uart.c: 273: {
  5546                           ;uart.c: 274: registration_num = mdRxBuf[(uint8_t)(i + 9)];
  5547  0025AA  C020  F015         	movff	parse_creg_ok@i,??_parse_creg_ok
  5548  0025AE  0E09               	movlw	9
  5549  0025B0  2615               	addwf	??_parse_creg_ok,f,c
  5550  0025B2  5015               	movf	??_parse_creg_ok,w,c
  5551  0025B4  0D01               	mullw	1
  5552  0025B6  0E00               	movlw	low _mdRxBuf
  5553  0025B8  24F3               	addwf	prodl,w,c
  5554  0025BA  6ED9               	movwf	fsr2l,c
  5555  0025BC  0E02               	movlw	high _mdRxBuf
  5556  0025BE  20F4               	addwfc	prodh,w,c
  5557  0025C0  6EDA               	movwf	fsr2h,c
  5558  0025C2  50DF               	movf	indf2,w,c
  5559  0025C4  6E1F               	movwf	parse_creg_ok@registration_num,c
  5560                           
  5561                           ;uart.c: 275: if (registration_num > '0' && registration_num < '6')
  5562  0025C6  0E30               	movlw	48
  5563  0025C8  641F               	cpfsgt	parse_creg_ok@registration_num,c
  5564  0025CA  D005               	goto	l781
  5565  0025CC  0E36               	movlw	54
  5566  0025CE  601F               	cpfslt	parse_creg_ok@registration_num,c
  5567  0025D0  D002               	goto	l781
  5568                           
  5569                           ;uart.c: 276: return 1;
  5570  0025D2  0E01               	movlw	1
  5571  0025D4  0012               	return	
  5572  0025D6                     l781:
  5573                           
  5574                           ;uart.c: 277: else
  5575                           ;uart.c: 278: return 4;
  5576  0025D6  0E04               	movlw	4
  5577  0025D8  0012               	return	
  5578  0025DA                     l783:
  5579  0025DA  2A20               	incf	parse_creg_ok@i,f,c
  5580  0025DC  D786               	goto	l6000
  5581  0025DE                     u6680:
  5582                           
  5583                           ;uart.c: 279: }
  5584                           ;uart.c: 280: }
  5585                           ;uart.c: 281: return 4;
  5586  0025DE  0E04               	movlw	4
  5587  0025E0  0012               	return	
  5588  0025E2                     __end_of_parse_creg_ok:
  5589                           	opt stack 0
  5590                           tblptru	equ	0xFF8
  5591                           tblptrh	equ	0xFF7
  5592                           tblptrl	equ	0xFF6
  5593                           tablat	equ	0xFF5
  5594                           prodh	equ	0xFF4
  5595                           prodl	equ	0xFF3
  5596                           intcon	equ	0xFF2
  5597                           postinc0	equ	0xFEE
  5598                           wreg	equ	0xFE8
  5599                           postdec1	equ	0xFE5
  5600                           plusw1	equ	0xFE3
  5601                           fsr1l	equ	0xFE1
  5602                           indf2	equ	0xFDF
  5603                           postinc2	equ	0xFDE
  5604                           plusw2	equ	0xFDB
  5605                           fsr2h	equ	0xFDA
  5606                           fsr2l	equ	0xFD9
  5607                           status	equ	0xFD8
  5608                           
  5609 ;; *************** function _parse_cereg_ok *****************
  5610 ;; Defined at:
  5611 ;;		line 284 in file "uart.c"
  5612 ;; Parameters:    Size  Location     Type
  5613 ;;		None
  5614 ;; Auto vars:     Size  Location     Type
  5615 ;;  i               1   32[COMRAM] unsigned char 
  5616 ;;  cereg_rsp       9   22[COMRAM] unsigned char [9]
  5617 ;;  registration    1   31[COMRAM] unsigned char 
  5618 ;; Return value:  Size  Location     Type
  5619 ;;                  1    wreg      unsigned char 
  5620 ;; Registers used:
  5621 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5622 ;; Tracked objects:
  5623 ;;		On entry : 0/0
  5624 ;;		On exit  : 0/0
  5625 ;;		Unchanged: 0/0
  5626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5628 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5629 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5630 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5631 ;;Total ram usage:       13 bytes
  5632 ;; Hardware stack levels used:    1
  5633 ;; Hardware stack levels required when called:    3
  5634 ;; This function calls:
  5635 ;;		Nothing
  5636 ;; This function is called by:
  5637 ;;		_startup_ok
  5638 ;; This function uses a non-reentrant model
  5639 ;;
  5640                           
  5641                           	psect	text18
  5642  002278                     __ptext18:
  5643                           	opt stack 0
  5644  002278                     _parse_cereg_ok:
  5645                           	opt stack 22
  5646                           
  5647                           ;uart.c: 286: uint8_t cereg_rsp[] = "+CEREG: ";
  5648                           
  5649                           ;incstack = 0
  5650  002278  EE21  F0B4         	lfsr	2,parse_cereg_ok@F6846
  5651  00227C  EE10  F017         	lfsr	1,parse_cereg_ok@cereg_rsp
  5652  002280  0E08               	movlw	8
  5653  002282                     u6691:
  5654  002282  CFDB FFE3          	movff	plusw2,plusw1
  5655  002286  06E8               	decf	wreg,f,c
  5656  002288  E2FC               	bc	u6691
  5657                           
  5658                           ;uart.c: 287: uint8_t registration_num;
  5659                           ;uart.c: 288: for (uint8_t i = 0; i < sizeof(mdRxBuf); i++)
  5660  00228A  0E00               	movlw	0
  5661  00228C  6E21               	movwf	parse_cereg_ok@i,c
  5662  00228E                     l6044:
  5663  00228E  0E9F               	movlw	159
  5664  002290  6421               	cpfsgt	parse_cereg_ok@i,c
  5665  002292  D001               	goto	l788
  5666  002294  D086               	goto	u6800
  5667  002296                     l788:
  5668                           
  5669                           ;uart.c: 289: {
  5670                           ;uart.c: 290: if (mdRxBuf[i] == cereg_rsp[0] && mdRxBuf[(uint8_t)(i + 1)] == cereg_rsp[1
      +                          ] && mdRxBuf[(uint8_t)(i + 2)] == cereg_rsp[2] && mdRxBuf[(uint8_t)(i + 3)] == cereg_rsp
      +                          [3] && mdRxBuf[(uint8_t)(i + 4)] == cereg_rsp[4] && mdRxBuf[(uint8_t)(i + 5)] == cereg_r
  5671  002296  5021               	movf	parse_cereg_ok@i,w,c
  5672  002298  0D01               	mullw	1
  5673  00229A  0E00               	movlw	low _mdRxBuf
  5674  00229C  24F3               	addwf	prodl,w,c
  5675  00229E  6ED9               	movwf	fsr2l,c
  5676  0022A0  0E02               	movlw	high _mdRxBuf
  5677  0022A2  20F4               	addwfc	prodh,w,c
  5678  0022A4  6EDA               	movwf	fsr2h,c
  5679  0022A6  5017               	movf	parse_cereg_ok@cereg_rsp,w,c
  5680  0022A8  18DE               	xorwf	postinc2,w,c
  5681  0022AA  A4D8               	btfss	status,2,c
  5682  0022AC  D078               	goto	l793
  5683  0022AE  C021  F015         	movff	parse_cereg_ok@i,??_parse_cereg_ok
  5684  0022B2  0E01               	movlw	1
  5685  0022B4  2615               	addwf	??_parse_cereg_ok,f,c
  5686  0022B6  5015               	movf	??_parse_cereg_ok,w,c
  5687  0022B8  0D01               	mullw	1
  5688  0022BA  0E00               	movlw	low _mdRxBuf
  5689  0022BC  24F3               	addwf	prodl,w,c
  5690  0022BE  6ED9               	movwf	fsr2l,c
  5691  0022C0  0E02               	movlw	high _mdRxBuf
  5692  0022C2  20F4               	addwfc	prodh,w,c
  5693  0022C4  6EDA               	movwf	fsr2h,c
  5694  0022C6  5018               	movf	parse_cereg_ok@cereg_rsp+1,w,c
  5695  0022C8  18DE               	xorwf	postinc2,w,c
  5696  0022CA  A4D8               	btfss	status,2,c
  5697  0022CC  D068               	goto	l793
  5698  0022CE  C021  F015         	movff	parse_cereg_ok@i,??_parse_cereg_ok
  5699  0022D2  0E02               	movlw	2
  5700  0022D4  2615               	addwf	??_parse_cereg_ok,f,c
  5701  0022D6  5015               	movf	??_parse_cereg_ok,w,c
  5702  0022D8  0D01               	mullw	1
  5703  0022DA  0E00               	movlw	low _mdRxBuf
  5704  0022DC  24F3               	addwf	prodl,w,c
  5705  0022DE  6ED9               	movwf	fsr2l,c
  5706  0022E0  0E02               	movlw	high _mdRxBuf
  5707  0022E2  20F4               	addwfc	prodh,w,c
  5708  0022E4  6EDA               	movwf	fsr2h,c
  5709  0022E6  5019               	movf	parse_cereg_ok@cereg_rsp+2,w,c
  5710  0022E8  18DE               	xorwf	postinc2,w,c
  5711  0022EA  A4D8               	btfss	status,2,c
  5712  0022EC  D058               	goto	l793
  5713  0022EE  C021  F015         	movff	parse_cereg_ok@i,??_parse_cereg_ok
  5714  0022F2  0E03               	movlw	3
  5715  0022F4  2615               	addwf	??_parse_cereg_ok,f,c
  5716  0022F6  5015               	movf	??_parse_cereg_ok,w,c
  5717  0022F8  0D01               	mullw	1
  5718  0022FA  0E00               	movlw	low _mdRxBuf
  5719  0022FC  24F3               	addwf	prodl,w,c
  5720  0022FE  6ED9               	movwf	fsr2l,c
  5721  002300  0E02               	movlw	high _mdRxBuf
  5722  002302  20F4               	addwfc	prodh,w,c
  5723  002304  6EDA               	movwf	fsr2h,c
  5724  002306  501A               	movf	parse_cereg_ok@cereg_rsp+3,w,c
  5725  002308  18DE               	xorwf	postinc2,w,c
  5726  00230A  A4D8               	btfss	status,2,c
  5727  00230C  D048               	goto	l793
  5728  00230E  C021  F015         	movff	parse_cereg_ok@i,??_parse_cereg_ok
  5729  002312  0E04               	movlw	4
  5730  002314  2615               	addwf	??_parse_cereg_ok,f,c
  5731  002316  5015               	movf	??_parse_cereg_ok,w,c
  5732  002318  0D01               	mullw	1
  5733  00231A  0E00               	movlw	low _mdRxBuf
  5734  00231C  24F3               	addwf	prodl,w,c
  5735  00231E  6ED9               	movwf	fsr2l,c
  5736  002320  0E02               	movlw	high _mdRxBuf
  5737  002322  20F4               	addwfc	prodh,w,c
  5738  002324  6EDA               	movwf	fsr2h,c
  5739  002326  501B               	movf	parse_cereg_ok@cereg_rsp+4,w,c
  5740  002328  18DE               	xorwf	postinc2,w,c
  5741  00232A  A4D8               	btfss	status,2,c
  5742  00232C  D038               	goto	l793
  5743  00232E  C021  F015         	movff	parse_cereg_ok@i,??_parse_cereg_ok
  5744  002332  0E05               	movlw	5
  5745  002334  2615               	addwf	??_parse_cereg_ok,f,c
  5746  002336  5015               	movf	??_parse_cereg_ok,w,c
  5747  002338  0D01               	mullw	1
  5748  00233A  0E00               	movlw	low _mdRxBuf
  5749  00233C  24F3               	addwf	prodl,w,c
  5750  00233E  6ED9               	movwf	fsr2l,c
  5751  002340  0E02               	movlw	high _mdRxBuf
  5752  002342  20F4               	addwfc	prodh,w,c
  5753  002344  6EDA               	movwf	fsr2h,c
  5754  002346  501C               	movf	parse_cereg_ok@cereg_rsp+5,w,c
  5755  002348  18DE               	xorwf	postinc2,w,c
  5756  00234A  A4D8               	btfss	status,2,c
  5757  00234C  D028               	goto	l793
  5758  00234E  C021  F015         	movff	parse_cereg_ok@i,??_parse_cereg_ok
  5759  002352  0E06               	movlw	6
  5760  002354  2615               	addwf	??_parse_cereg_ok,f,c
  5761  002356  5015               	movf	??_parse_cereg_ok,w,c
  5762  002358  0D01               	mullw	1
  5763  00235A  0E00               	movlw	low _mdRxBuf
  5764  00235C  24F3               	addwf	prodl,w,c
  5765  00235E  6ED9               	movwf	fsr2l,c
  5766  002360  0E02               	movlw	high _mdRxBuf
  5767  002362  20F4               	addwfc	prodh,w,c
  5768  002364  6EDA               	movwf	fsr2h,c
  5769  002366  501D               	movf	parse_cereg_ok@cereg_rsp+6,w,c
  5770  002368  18DE               	xorwf	postinc2,w,c
  5771  00236A  A4D8               	btfss	status,2,c
  5772  00236C  D018               	goto	l793
  5773                           
  5774                           ;uart.c: 294: {
  5775                           ;uart.c: 295: registration_num = mdRxBuf[(uint8_t)(i + 10)];
  5776  00236E  C021  F015         	movff	parse_cereg_ok@i,??_parse_cereg_ok
  5777  002372  0E0A               	movlw	10
  5778  002374  2615               	addwf	??_parse_cereg_ok,f,c
  5779  002376  5015               	movf	??_parse_cereg_ok,w,c
  5780  002378  0D01               	mullw	1
  5781  00237A  0E00               	movlw	low _mdRxBuf
  5782  00237C  24F3               	addwf	prodl,w,c
  5783  00237E  6ED9               	movwf	fsr2l,c
  5784  002380  0E02               	movlw	high _mdRxBuf
  5785  002382  20F4               	addwfc	prodh,w,c
  5786  002384  6EDA               	movwf	fsr2h,c
  5787  002386  50DF               	movf	indf2,w,c
  5788  002388  6E20               	movwf	parse_cereg_ok@registration_num,c
  5789                           
  5790                           ;uart.c: 296: if (registration_num > '0' && registration_num < '9')
  5791  00238A  0E30               	movlw	48
  5792  00238C  6420               	cpfsgt	parse_cereg_ok@registration_num,c
  5793  00238E  D005               	goto	l791
  5794  002390  0E39               	movlw	57
  5795  002392  6020               	cpfslt	parse_cereg_ok@registration_num,c
  5796  002394  D002               	goto	l791
  5797                           
  5798                           ;uart.c: 297: return 1;
  5799  002396  0E01               	movlw	1
  5800  002398  0012               	return	
  5801  00239A                     l791:
  5802                           
  5803                           ;uart.c: 298: else
  5804                           ;uart.c: 299: return 4;
  5805  00239A  0E04               	movlw	4
  5806  00239C  0012               	return	
  5807  00239E                     l793:
  5808  00239E  2A21               	incf	parse_cereg_ok@i,f,c
  5809  0023A0  D776               	goto	l6044
  5810  0023A2                     u6800:
  5811                           
  5812                           ;uart.c: 300: }
  5813                           ;uart.c: 301: }
  5814                           ;uart.c: 302: return 4;
  5815  0023A2  0E04               	movlw	4
  5816  0023A4  0012               	return	
  5817  0023A6                     __end_of_parse_cereg_ok:
  5818                           	opt stack 0
  5819                           tblptru	equ	0xFF8
  5820                           tblptrh	equ	0xFF7
  5821                           tblptrl	equ	0xFF6
  5822                           tablat	equ	0xFF5
  5823                           prodh	equ	0xFF4
  5824                           prodl	equ	0xFF3
  5825                           intcon	equ	0xFF2
  5826                           postinc0	equ	0xFEE
  5827                           wreg	equ	0xFE8
  5828                           postdec1	equ	0xFE5
  5829                           plusw1	equ	0xFE3
  5830                           fsr1l	equ	0xFE1
  5831                           indf2	equ	0xFDF
  5832                           postinc2	equ	0xFDE
  5833                           plusw2	equ	0xFDB
  5834                           fsr2h	equ	0xFDA
  5835                           fsr2l	equ	0xFD9
  5836                           status	equ	0xFD8
  5837                           
  5838 ;; *************** function _send_sms_ok *****************
  5839 ;; Defined at:
  5840 ;;		line 175 in file "C:/Users/Scott/InstantCare/Engineering/7102-10 - 906GN-SmokeGSMHub/Firmware/ic_hubCode_jvolk/test_
      +buttonmenu_wSMS.X/sms.c"
  5841 ;; Parameters:    Size  Location     Type
  5842 ;;  isValidCmd      1    wreg     unsigned char 
  5843 ;; Auto vars:     Size  Location     Type
  5844 ;;  isValidCmd      1   41[COMRAM] unsigned char 
  5845 ;;  cmgs            9   29[COMRAM] unsigned char [9]
  5846 ;;  msgIndex        3   38[COMRAM] unsigned char [3]
  5847 ;;  i               1   44[COMRAM] unsigned char 
  5848 ;;  poundCount      1   43[COMRAM] unsigned char 
  5849 ;;  smsEndIndex     1   42[COMRAM] unsigned char 
  5850 ;; Return value:  Size  Location     Type
  5851 ;;                  1    wreg      unsigned char 
  5852 ;; Registers used:
  5853 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5854 ;; Tracked objects:
  5855 ;;		On entry : 0/0
  5856 ;;		On exit  : 0/0
  5857 ;;		Unchanged: 0/0
  5858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5860 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5861 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5862 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5863 ;;Total ram usage:       17 bytes
  5864 ;; Hardware stack levels used:    1
  5865 ;; Hardware stack levels required when called:    5
  5866 ;; This function calls:
  5867 ;;		_clear_at_ok
  5868 ;;		_init_md_uart
  5869 ;;		_md_uart_write_str_ok
  5870 ;; This function is called by:
  5871 ;;		_listen_sms
  5872 ;; This function uses a non-reentrant model
  5873 ;;
  5874                           
  5875                           	psect	text19
  5876  002128                     __ptext19:
  5877                           	opt stack 0
  5878  002128                     _send_sms_ok:
  5879                           	opt stack 23
  5880                           
  5881                           ;incstack = 0
  5882                           ;send_sms_ok@isValidCmd stored from wreg
  5883  002128  6E2A               	movwf	send_sms_ok@isValidCmd,c
  5884                           
  5885                           ;sms.c: 177: uint8_t cmgs[] = "AT+CMGS=";
  5886  00212A  EE21  F099         	lfsr	2,send_sms_ok@F6857
  5887  00212E  EE10  F01E         	lfsr	1,send_sms_ok@cmgs
  5888  002132  0E08               	movlw	8
  5889  002134                     u8911:
  5890  002134  CFDB FFE3          	movff	plusw2,plusw1
  5891  002138  06E8               	decf	wreg,f,c
  5892  00213A  E2FC               	bc	u8911
  5893                           
  5894                           ;sms.c: 178: uint8_t msgIndex[] = "\r\n";
  5895  00213C  C1EE  F027         	movff	send_sms_ok@F6859,send_sms_ok@msgIndex
  5896  002140  C1EF  F028         	movff	send_sms_ok@F6859+1,send_sms_ok@msgIndex+1
  5897  002144  C1F0  F029         	movff	send_sms_ok@F6859+2,send_sms_ok@msgIndex+2
  5898                           
  5899                           ;sms.c: 179: uint8_t poundCount = 0, i = 0, smsEndIndex;
  5900  002148  0E00               	movlw	0
  5901  00214A  6E2C               	movwf	send_sms_ok@poundCount,c
  5902  00214C  0E00               	movlw	0
  5903  00214E  6E2D               	movwf	send_sms_ok@i,c
  5904                           
  5905                           ;sms.c: 181: init_md_uart();
  5906  002150  ECA3  F017         	call	_init_md_uart	;wreg free
  5907                           
  5908                           ;sms.c: 183: if (at1 != 1)
  5909  002154  0100               	movlb	0	; () banked
  5910  002156  05F5               	decf	_at1& (0+255),w,b
  5911  002158  B4D8               	btfsc	status,2,c
  5912  00215A  D08C               	goto	l1438
  5913                           
  5914                           ; BSR set to: 0
  5915                           ;sms.c: 184: {
  5916                           ;sms.c: 185: at1 = md_uart_write_str_ok((uint8_t *)&cmgs[0], sizeof(cmgs), 0, 0);
  5917  00215C  0E1E               	movlw	low send_sms_ok@cmgs
  5918  00215E  6E16               	movwf	md_uart_write_str_ok@data,c
  5919  002160  0E00               	movlw	high send_sms_ok@cmgs
  5920  002162  6E17               	movwf	md_uart_write_str_ok@data+1,c
  5921  002164  0E09               	movlw	9
  5922  002166  6E18               	movwf	md_uart_write_str_ok@len1,c
  5923  002168  0E00               	movlw	0
  5924  00216A  6E19               	movwf	md_uart_write_str_ok@wantOk,c
  5925  00216C  0E00               	movlw	0
  5926  00216E  6E1A               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  5927  002170  ECD3  F011         	call	_md_uart_write_str_ok	;wreg free
  5928  002174  0100               	movlb	0	; () banked
  5929  002176  6FF5               	movwf	_at1& (0+255),b
  5930                           
  5931                           ;sms.c: 186: at1 = md_uart_write_str_ok((uint8_t *)&ph_num[0], sizeof(ph_num), 0, 0);
  5932  002178  0EF4               	movlw	low _ph_num
  5933  00217A  6E16               	movwf	md_uart_write_str_ok@data,c
  5934  00217C  0E01               	movlw	high _ph_num
  5935  00217E  6E17               	movwf	md_uart_write_str_ok@data+1,c
  5936  002180  0E09               	movlw	9
  5937  002182  6E18               	movwf	md_uart_write_str_ok@len1,c
  5938  002184  0E00               	movlw	0
  5939  002186  6E19               	movwf	md_uart_write_str_ok@wantOk,c
  5940  002188  0E00               	movlw	0
  5941  00218A  6E1A               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  5942  00218C  ECD3  F011         	call	_md_uart_write_str_ok	;wreg free
  5943  002190  0100               	movlb	0	; () banked
  5944  002192  6FF5               	movwf	_at1& (0+255),b
  5945                           
  5946                           ; BSR set to: 0
  5947                           ;sms.c: 187: at1 = 0;
  5948  002194  0E00               	movlw	0
  5949  002196  6FF5               	movwf	_at1& (0+255),b
  5950                           
  5951                           ; BSR set to: 0
  5952                           ;sms.c: 188: at1 = md_uart_write_str_ok((uint8_t *)&msgIndex[0], sizeof(msgIndex), 0, 1)
      +                          ;
  5953  002198  0E27               	movlw	low send_sms_ok@msgIndex
  5954  00219A  6E16               	movwf	md_uart_write_str_ok@data,c
  5955  00219C  0E00               	movlw	high send_sms_ok@msgIndex
  5956  00219E  6E17               	movwf	md_uart_write_str_ok@data+1,c
  5957  0021A0  0E03               	movlw	3
  5958  0021A2  6E18               	movwf	md_uart_write_str_ok@len1,c
  5959  0021A4  0E00               	movlw	0
  5960  0021A6  6E19               	movwf	md_uart_write_str_ok@wantOk,c
  5961  0021A8  0E01               	movlw	1
  5962  0021AA  6E1A               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  5963  0021AC  ECD3  F011         	call	_md_uart_write_str_ok	;wreg free
  5964  0021B0  0100               	movlb	0	; () banked
  5965  0021B2  6FF5               	movwf	_at1& (0+255),b
  5966  0021B4                     
  5967                           ; BSR set to: 0
  5968                           
  5969                           ; BSR set to: 0
  5970                           
  5971                           ; BSR set to: 0
  5972  0021B4  05F5               	decf	_at1& (0+255),w,b
  5973  0021B6  B4D8               	btfsc	status,2,c
  5974  0021B8  D003               	goto	u8940
  5975                           
  5976                           ; BSR set to: 0
  5977  0021BA  5036               	movf	_timedOut,w,c
  5978  0021BC  B4D8               	btfsc	status,2,c
  5979  0021BE  D7FA               	goto	l1419
  5980  0021C0                     u8940:
  5981                           
  5982                           ; BSR set to: 0
  5983                           ;sms.c: 190: if (at1 == 1 && isValidCmd)
  5984                           
  5985                           ; BSR set to: 0
  5986                           
  5987                           ; BSR set to: 0
  5988  0021C0  05F5               	decf	_at1& (0+255),w,b
  5989  0021C2  A4D8               	btfss	status,2,c
  5990  0021C4  D043               	goto	u9020
  5991                           
  5992                           ; BSR set to: 0
  5993  0021C6  502A               	movf	send_sms_ok@isValidCmd,w,c
  5994  0021C8  B4D8               	btfsc	status,2,c
  5995  0021CA  D040               	goto	u9020
  5996                           
  5997                           ; BSR set to: 0
  5998                           ;sms.c: 191: {
  5999                           ;sms.c: 192: for (i = 0; i < sizeof(sms_buf); i++)
  6000  0021CC  0E00               	movlw	0
  6001  0021CE  6E2D               	movwf	send_sms_ok@i,c
  6002  0021D0                     l7160:
  6003                           
  6004                           ; BSR set to: 0
  6005  0021D0  0E27               	movlw	39
  6006  0021D2  642D               	cpfsgt	send_sms_ok@i,c
  6007  0021D4  D001               	goto	l1424
  6008  0021D6  D015               	goto	u9000
  6009  0021D8                     l1424:
  6010                           
  6011                           ;sms.c: 193: {
  6012                           ;sms.c: 194: if (sms_buf[i] == '#')
  6013                           
  6014                           ; BSR set to: 0
  6015  0021D8  502D               	movf	send_sms_ok@i,w,c
  6016  0021DA  0D01               	mullw	1
  6017  0021DC  0EA0               	movlw	low _sms_buf
  6018  0021DE  24F3               	addwf	prodl,w,c
  6019  0021E0  6ED9               	movwf	fsr2l,c
  6020  0021E2  0E02               	movlw	high _sms_buf
  6021  0021E4  20F4               	addwfc	prodh,w,c
  6022  0021E6  6EDA               	movwf	fsr2h,c
  6023  0021E8  0E23               	movlw	35
  6024  0021EA  18DE               	xorwf	postinc2,w,c
  6025  0021EC  B4D8               	btfsc	status,2,c
  6026                           
  6027                           ;sms.c: 195: poundCount ++;
  6028  0021EE  2A2C               	incf	send_sms_ok@poundCount,f,c
  6029                           
  6030                           ;sms.c: 196: if (poundCount == 2)
  6031  0021F0  0E02               	movlw	2
  6032  0021F2  182C               	xorwf	send_sms_ok@poundCount,w,c
  6033  0021F4  A4D8               	btfss	status,2,c
  6034  0021F6  D003               	goto	l1427
  6035                           
  6036                           ;sms.c: 197: {
  6037                           ;sms.c: 198: smsEndIndex = (uint8_t)(i + 1);
  6038  0021F8  282D               	incf	send_sms_ok@i,w,c
  6039  0021FA  6E2B               	movwf	send_sms_ok@smsEndIndex,c
  6040                           
  6041                           ;sms.c: 199: poundCount++;
  6042  0021FC  2A2C               	incf	send_sms_ok@poundCount,f,c
  6043  0021FE                     l1427:
  6044  0021FE  2A2D               	incf	send_sms_ok@i,f,c
  6045  002200  D7E7               	goto	l7160
  6046  002202                     u9000:
  6047                           
  6048                           ;sms.c: 200: }
  6049                           ;sms.c: 201: }
  6050                           ;sms.c: 203: at2 = md_uart_write_str_ok((uint8_t *)&sms_buf[0], smsEndIndex, 0, 0);
  6051  002202  0EA0               	movlw	low _sms_buf
  6052  002204  6E16               	movwf	md_uart_write_str_ok@data,c
  6053  002206  0E02               	movlw	high _sms_buf
  6054  002208  6E17               	movwf	md_uart_write_str_ok@data+1,c
  6055  00220A  C02B  F018         	movff	send_sms_ok@smsEndIndex,md_uart_write_str_ok@len1
  6056  00220E  0E00               	movlw	0
  6057  002210  6E19               	movwf	md_uart_write_str_ok@wantOk,c
  6058  002212  0E00               	movlw	0
  6059  002214  6E1A               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  6060  002216  ECD3  F011         	call	_md_uart_write_str_ok	;wreg free
  6061  00221A  0100               	movlb	0	; () banked
  6062  00221C  6FF4               	movwf	_at2& (0+255),b
  6063                           
  6064                           ;sms.c: 204: at2 = md_uart_write_str_ok((uint8_t *)(0x1A), 1, 1, 0);
  6065  00221E  0E1A               	movlw	26
  6066  002220  6E16               	movwf	md_uart_write_str_ok@data,c
  6067  002222  0E00               	movlw	0
  6068  002224  6E17               	movwf	md_uart_write_str_ok@data+1,c
  6069  002226  0E01               	movlw	1
  6070  002228  6E18               	movwf	md_uart_write_str_ok@len1,c
  6071  00222A  0E01               	movlw	1
  6072  00222C  6E19               	movwf	md_uart_write_str_ok@wantOk,c
  6073  00222E  0E00               	movlw	0
  6074  002230  6E1A               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  6075  002232  ECD3  F011         	call	_md_uart_write_str_ok	;wreg free
  6076  002236  0100               	movlb	0	; () banked
  6077  002238  6FF4               	movwf	_at2& (0+255),b
  6078                           
  6079                           ;sms.c: 205: while (at2 != 1 && !timedOut)
  6080  00223A  D001               	goto	l1428
  6081  00223C                     l1429:
  6082                           
  6083                           ; BSR set to: 0
  6084  00223C  0004               	clrwdt		;# 
  6085  00223E                     l1428:
  6086  00223E  0100               	movlb	0	; () banked
  6087  002240  05F4               	decf	_at2& (0+255),w,b
  6088  002242  B4D8               	btfsc	status,2,c
  6089  002244  D003               	goto	u9020
  6090                           
  6091                           ; BSR set to: 0
  6092  002246  5036               	movf	_timedOut,w,c
  6093  002248  B4D8               	btfsc	status,2,c
  6094  00224A  D7F8               	goto	l1429
  6095  00224C                     u9020:
  6096                           
  6097                           ; BSR set to: 0
  6098                           ;sms.c: 207: }
  6099                           ;sms.c: 208: if (at1 == 1)
  6100                           
  6101                           ; BSR set to: 0
  6102                           
  6103                           ; BSR set to: 0
  6104                           
  6105                           ; BSR set to: 0
  6106  00224C  05F5               	decf	_at1& (0+255),w,b
  6107  00224E  A4D8               	btfss	status,2,c
  6108  002250  D004               	goto	l1433
  6109                           
  6110                           ; BSR set to: 0
  6111                           ;sms.c: 209: {
  6112                           ;sms.c: 210: clear_at_ok();
  6113  002252  EC5E  F017         	call	_clear_at_ok	;wreg free
  6114                           
  6115                           ;sms.c: 211: return 1;
  6116  002256  0E01               	movlw	1
  6117  002258  0012               	return	
  6118  00225A                     l1433:
  6119                           
  6120                           ;sms.c: 213: else if (at1 == 4)
  6121  00225A  0E04               	movlw	4
  6122  00225C  0100               	movlb	0	; () banked
  6123  00225E  19F5               	xorwf	_at1& (0+255),w,b
  6124  002260  A4D8               	btfss	status,2,c
  6125  002262  D002               	goto	l1436
  6126                           
  6127                           ; BSR set to: 0
  6128                           ;sms.c: 214: return 4;
  6129  002264  0E04               	movlw	4
  6130                           
  6131                           ; BSR set to: 0
  6132  002266  0012               	return	
  6133  002268                     l1436:
  6134                           
  6135                           ; BSR set to: 0
  6136                           ;sms.c: 215: else if (at1 == 5)
  6137                           
  6138                           ; BSR set to: 0
  6139  002268  0E05               	movlw	5
  6140  00226A  19F5               	xorwf	_at1& (0+255),w,b
  6141  00226C  A4D8               	btfss	status,2,c
  6142  00226E  D002               	goto	l1438
  6143                           
  6144                           ; BSR set to: 0
  6145                           ;sms.c: 216: return 5;
  6146  002270  0E05               	movlw	5
  6147                           
  6148                           ; BSR set to: 0
  6149  002272  0012               	return	
  6150  002274                     l1438:
  6151                           
  6152                           ;sms.c: 217: }
  6153                           ;sms.c: 218: return 2;
  6154                           
  6155                           ; BSR set to: 0
  6156                           
  6157                           ; BSR set to: 0
  6158                           
  6159                           ; BSR set to: 0
  6160                           
  6161                           ; BSR set to: 0
  6162  002274  0E02               	movlw	2
  6163  002276  0012               	return	
  6164  002278                     __end_of_send_sms_ok:
  6165                           	opt stack 0
  6166                           tblptru	equ	0xFF8
  6167                           tblptrh	equ	0xFF7
  6168                           tblptrl	equ	0xFF6
  6169                           tablat	equ	0xFF5
  6170                           prodh	equ	0xFF4
  6171                           prodl	equ	0xFF3
  6172                           intcon	equ	0xFF2
  6173                           postinc0	equ	0xFEE
  6174                           wreg	equ	0xFE8
  6175                           postdec1	equ	0xFE5
  6176                           plusw1	equ	0xFE3
  6177                           fsr1l	equ	0xFE1
  6178                           indf2	equ	0xFDF
  6179                           postinc2	equ	0xFDE
  6180                           plusw2	equ	0xFDB
  6181                           fsr2h	equ	0xFDA
  6182                           fsr2l	equ	0xFD9
  6183                           status	equ	0xFD8
  6184                           
  6185 ;; *************** function _read_sms *****************
  6186 ;; Defined at:
  6187 ;;		line 105 in file "C:/Users/Scott/InstantCare/Engineering/7102-10 - 906GN-SmokeGSMHub/Firmware/ic_hubCode_jvolk/test_
      +buttonmenu_wSMS.X/sms.c"
  6188 ;; Parameters:    Size  Location     Type
  6189 ;;		None
  6190 ;; Auto vars:     Size  Location     Type
  6191 ;;  cmgl           16   22[BANK0 ] unsigned char [16]
  6192 ;;  cmgd            9   47[BANK0 ] unsigned char [9]
  6193 ;;  cmgr            9   38[BANK0 ] unsigned char [9]
  6194 ;;  msgIndex        3   56[BANK0 ] unsigned char [3]
  6195 ;; Return value:  Size  Location     Type
  6196 ;;                  1    wreg      unsigned char 
  6197 ;; Registers used:
  6198 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6199 ;; Tracked objects:
  6200 ;;		On entry : 0/0
  6201 ;;		On exit  : 0/0
  6202 ;;		Unchanged: 0/0
  6203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6205 ;;      Locals:         0      37       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6206 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6207 ;;      Totals:         2      37       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6208 ;;Total ram usage:       39 bytes
  6209 ;; Hardware stack levels used:    1
  6210 ;; Hardware stack levels required when called:    6
  6211 ;; This function calls:
  6212 ;;		_clear_at_ok
  6213 ;;		_init_md_uart
  6214 ;;		_md_uart_write_str_ok
  6215 ;;		_parse_cmgl
  6216 ;;		_parse_cmgr
  6217 ;; This function is called by:
  6218 ;;		_listen_sms
  6219 ;; This function uses a non-reentrant model
  6220 ;;
  6221                           
  6222                           	psect	text20
  6223  001DFE                     __ptext20:
  6224                           	opt stack 0
  6225  001DFE                     _read_sms:
  6226                           	opt stack 22
  6227                           
  6228                           ;sms.c: 107: uint8_t cmgl[] = "AT+CMGL=\"ALL\"\r\n";
  6229                           
  6230                           ;incstack = 0
  6231  001DFE  EE21  F000         	lfsr	2,read_sms@F6841
  6232  001E02  EE10  F076         	lfsr	1,read_sms@cmgl
  6233  001E06  0E0F               	movlw	15
  6234  001E08                     u8791:
  6235  001E08  CFDB FFE3          	movff	plusw2,plusw1
  6236  001E0C  06E8               	decf	wreg,f,c
  6237  001E0E  E2FC               	bc	u8791
  6238                           
  6239                           ;sms.c: 108: uint8_t cmgr[] = "AT+CMGR=";
  6240  001E10  EE21  F0AB         	lfsr	2,read_sms@F6843
  6241  001E14  EE10  F086         	lfsr	1,read_sms@cmgr
  6242  001E18  0E08               	movlw	8
  6243  001E1A                     u8801:
  6244  001E1A  CFDB FFE3          	movff	plusw2,plusw1
  6245  001E1E  06E8               	decf	wreg,f,c
  6246  001E20  E2FC               	bc	u8801
  6247                           
  6248                           ;sms.c: 109: uint8_t msgIndex[] = "\r\n";
  6249  001E22  C1F1  F098         	movff	read_sms@F6845,read_sms@msgIndex
  6250  001E26  C1F2  F099         	movff	read_sms@F6845+1,read_sms@msgIndex+1
  6251  001E2A  C1F3  F09A         	movff	read_sms@F6845+2,read_sms@msgIndex+2
  6252                           
  6253                           ;sms.c: 110: uint8_t cmgd[] = "AT+CMGD=";
  6254  001E2E  EE21  F0A2         	lfsr	2,read_sms@F6847
  6255  001E32  EE10  F08F         	lfsr	1,read_sms@cmgd
  6256  001E36  0E08               	movlw	8
  6257  001E38                     u8811:
  6258  001E38  CFDB FFE3          	movff	plusw2,plusw1
  6259  001E3C  06E8               	decf	wreg,f,c
  6260  001E3E  E2FC               	bc	u8811
  6261                           
  6262                           ;sms.c: 112: init_md_uart();
  6263  001E40  ECA3  F017         	call	_init_md_uart	;wreg free
  6264                           
  6265                           ;sms.c: 115: numUartRetries = 15;
  6266  001E44  0E0F               	movlw	15
  6267  001E46  6E4A               	movwf	_numUartRetries,c
  6268                           
  6269                           ;sms.c: 116: at1 = md_uart_write_str_ok((uint8_t *)&cmgl[0], sizeof(cmgl), 1, 0);
  6270  001E48  0E76               	movlw	low read_sms@cmgl
  6271  001E4A  6E16               	movwf	md_uart_write_str_ok@data,c
  6272  001E4C  0E00               	movlw	high read_sms@cmgl
  6273  001E4E  6E17               	movwf	md_uart_write_str_ok@data+1,c
  6274  001E50  0E10               	movlw	16
  6275  001E52  6E18               	movwf	md_uart_write_str_ok@len1,c
  6276  001E54  0E01               	movlw	1
  6277  001E56  6E19               	movwf	md_uart_write_str_ok@wantOk,c
  6278  001E58  0E00               	movlw	0
  6279  001E5A  6E1A               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  6280  001E5C  ECD3  F011         	call	_md_uart_write_str_ok	;wreg free
  6281  001E60  0100               	movlb	0	; () banked
  6282  001E62  6FF5               	movwf	_at1& (0+255),b
  6283                           
  6284                           ; BSR set to: 0
  6285                           ;sms.c: 117: if (at1 == 1)
  6286  001E64  05F5               	decf	_at1& (0+255),w,b
  6287  001E66  A4D8               	btfss	status,2,c
  6288  001E68  D009               	goto	l1398
  6289                           
  6290                           ; BSR set to: 0
  6291                           ;sms.c: 118: {
  6292                           ;sms.c: 119: if (parse_cmgl() == 1)
  6293  001E6A  EC1F  F015         	call	_parse_cmgl	;wreg free
  6294  001E6E  06E8               	decf	wreg,f,c
  6295  001E70  A4D8               	btfss	status,2,c
  6296  001E72  D00B               	goto	l1401
  6297                           
  6298                           ;sms.c: 120: {
  6299                           ;sms.c: 121: ready_to_read_text = 1;
  6300  001E74  0E01               	movlw	1
  6301  001E76  0100               	movlb	0	; () banked
  6302  001E78  6FF8               	movwf	_ready_to_read_text& (0+255),b
  6303                           
  6304                           ; BSR set to: 0
  6305                           ;sms.c: 122: }
  6306                           ;sms.c: 123: }
  6307  001E7A  D007               	goto	l1401
  6308  001E7C                     l1398:
  6309                           
  6310                           ; BSR set to: 0
  6311                           ;sms.c: 124: else if (at1 == 5)
  6312                           
  6313                           ; BSR set to: 0
  6314  001E7C  0E05               	movlw	5
  6315  001E7E  19F5               	xorwf	_at1& (0+255),w,b
  6316  001E80  A4D8               	btfss	status,2,c
  6317  001E82  D003               	goto	l1401
  6318                           
  6319                           ; BSR set to: 0
  6320                           ;sms.c: 125: {
  6321                           ;sms.c: 126: clear_at_ok();
  6322  001E84  EC5E  F017         	call	_clear_at_ok	;wreg free
  6323                           
  6324                           ;sms.c: 127: return 5;
  6325                           ;	Return value of _read_sms is never used
  6326  001E88  0012               	return	
  6327  001E8A                     l1401:
  6328                           
  6329                           ;sms.c: 128: }
  6330                           ;sms.c: 129: if (ready_to_read_text)
  6331  001E8A  0100               	movlb	0	; () banked
  6332  001E8C  51F8               	movf	_ready_to_read_text& (0+255),w,b
  6333  001E8E  B4D8               	btfsc	status,2,c
  6334  001E90  0012               	return	
  6335                           
  6336                           ; BSR set to: 0
  6337                           ;sms.c: 130: {
  6338                           ;sms.c: 131: at2 = md_uart_write_str_ok((uint8_t *)&cmgr[0], sizeof(cmgr), 0, 0);
  6339  001E92  0E86               	movlw	low read_sms@cmgr
  6340  001E94  6E16               	movwf	md_uart_write_str_ok@data,c
  6341  001E96  0E00               	movlw	high read_sms@cmgr
  6342  001E98  6E17               	movwf	md_uart_write_str_ok@data+1,c
  6343  001E9A  0E09               	movlw	9
  6344  001E9C  6E18               	movwf	md_uart_write_str_ok@len1,c
  6345  001E9E  0E00               	movlw	0
  6346  001EA0  6E19               	movwf	md_uart_write_str_ok@wantOk,c
  6347  001EA2  0E00               	movlw	0
  6348  001EA4  6E1A               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  6349  001EA6  ECD3  F011         	call	_md_uart_write_str_ok	;wreg free
  6350  001EAA  0100               	movlb	0	; () banked
  6351  001EAC  6FF4               	movwf	_at2& (0+255),b
  6352                           
  6353                           ;sms.c: 132: at2 = md_uart_write_str_ok((uint8_t *)smsMsgIndex, 1, 0, 0);
  6354  001EAE  51F7               	movf	_smsMsgIndex& (0+255),w,b
  6355  001EB0  6E28               	movwf	??_read_sms& (0+255),c
  6356  001EB2  6A29               	clrf	(??_read_sms+1)& (0+255),c
  6357  001EB4  C028  F016         	movff	??_read_sms,md_uart_write_str_ok@data
  6358  001EB8  C029  F017         	movff	??_read_sms+1,md_uart_write_str_ok@data+1
  6359  001EBC  0E01               	movlw	1
  6360  001EBE  6E18               	movwf	md_uart_write_str_ok@len1,c
  6361  001EC0  0E00               	movlw	0
  6362  001EC2  6E19               	movwf	md_uart_write_str_ok@wantOk,c
  6363  001EC4  0E00               	movlw	0
  6364  001EC6  6E1A               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  6365  001EC8  ECD3  F011         	call	_md_uart_write_str_ok	;wreg free
  6366  001ECC  0100               	movlb	0	; () banked
  6367  001ECE  6FF4               	movwf	_at2& (0+255),b
  6368                           
  6369                           ;sms.c: 133: at2 = md_uart_write_str_ok((uint8_t *)&msgIndex[0], sizeof(msgIndex), 1, 0)
      +                          ;
  6370  001ED0  0E98               	movlw	low read_sms@msgIndex
  6371  001ED2  6E16               	movwf	md_uart_write_str_ok@data,c
  6372  001ED4  0E00               	movlw	high read_sms@msgIndex
  6373  001ED6  6E17               	movwf	md_uart_write_str_ok@data+1,c
  6374  001ED8  0E03               	movlw	3
  6375  001EDA  6E18               	movwf	md_uart_write_str_ok@len1,c
  6376  001EDC  0E01               	movlw	1
  6377  001EDE  6E19               	movwf	md_uart_write_str_ok@wantOk,c
  6378  001EE0  0E00               	movlw	0
  6379  001EE2  6E1A               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  6380  001EE4  ECD3  F011         	call	_md_uart_write_str_ok	;wreg free
  6381  001EE8  0100               	movlb	0	; () banked
  6382  001EEA  6FF4               	movwf	_at2& (0+255),b
  6383                           
  6384                           ; BSR set to: 0
  6385                           ;sms.c: 135: if (at2 == 1)
  6386  001EEC  05F4               	decf	_at2& (0+255),w,b
  6387  001EEE  A4D8               	btfss	status,2,c
  6388  001EF0  D04C               	goto	l1409
  6389                           
  6390                           ; BSR set to: 0
  6391                           ;sms.c: 136: {
  6392                           ;sms.c: 137: if (parse_cmgr() == 1)
  6393  001EF2  EC49  F00C         	call	_parse_cmgr	;wreg free
  6394  001EF6  06E8               	decf	wreg,f,c
  6395  001EF8  A4D8               	btfss	status,2,c
  6396  001EFA  D008               	goto	l1405
  6397                           
  6398                           ;sms.c: 138: {
  6399                           ;sms.c: 139: sms_echo_ready = 1;
  6400  001EFC  0E01               	movlw	1
  6401  001EFE  6E47               	movwf	_sms_echo_ready,c
  6402                           
  6403                           ;sms.c: 140: clear_at_ok();
  6404  001F00  EC5E  F017         	call	_clear_at_ok	;wreg free
  6405  001F04                     l7094:
  6406                           
  6407                           ;sms.c: 141: ready_to_read_text = 0;
  6408  001F04  0E00               	movlw	0
  6409  001F06  0100               	movlb	0	; () banked
  6410  001F08  6FF8               	movwf	_ready_to_read_text& (0+255),b
  6411                           
  6412                           ; BSR set to: 0
  6413                           ;sms.c: 142: return 1;
  6414                           ;	Return value of _read_sms is never used
  6415  001F0A  0012               	return	
  6416  001F0C                     l1405:
  6417                           
  6418                           ;sms.c: 144: else
  6419                           ;sms.c: 145: {
  6420                           ;sms.c: 146: sms_err_ready = 1;
  6421                           
  6422                           ; BSR set to: 0
  6423  001F0C  0E01               	movlw	1
  6424  001F0E  6E46               	movwf	_sms_err_ready,c
  6425                           
  6426                           ;sms.c: 147: at3 = md_uart_write_str_ok((uint8_t *)&cmgd[0], sizeof(cmgd), 0, 0);
  6427  001F10  0E8F               	movlw	low read_sms@cmgd
  6428  001F12  6E16               	movwf	md_uart_write_str_ok@data,c
  6429  001F14  0E00               	movlw	high read_sms@cmgd
  6430  001F16  6E17               	movwf	md_uart_write_str_ok@data+1,c
  6431  001F18  0E09               	movlw	9
  6432  001F1A  6E18               	movwf	md_uart_write_str_ok@len1,c
  6433  001F1C  0E00               	movlw	0
  6434  001F1E  6E19               	movwf	md_uart_write_str_ok@wantOk,c
  6435  001F20  0E00               	movlw	0
  6436  001F22  6E1A               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  6437  001F24  ECD3  F011         	call	_md_uart_write_str_ok	;wreg free
  6438  001F28  0100               	movlb	0	; () banked
  6439  001F2A  6FF3               	movwf	_at3& (0+255),b
  6440                           
  6441                           ; BSR set to: 0
  6442                           ;sms.c: 148: at3 = md_uart_write_str_ok((uint8_t *)smsMsgIndex, 1, 0, 0);
  6443  001F2C  51F7               	movf	_smsMsgIndex& (0+255),w,b
  6444  001F2E  6E28               	movwf	??_read_sms& (0+255),c
  6445  001F30  6A29               	clrf	(??_read_sms+1)& (0+255),c
  6446  001F32  C028  F016         	movff	??_read_sms,md_uart_write_str_ok@data
  6447  001F36  C029  F017         	movff	??_read_sms+1,md_uart_write_str_ok@data+1
  6448  001F3A  0E01               	movlw	1
  6449  001F3C  6E18               	movwf	md_uart_write_str_ok@len1,c
  6450  001F3E  0E00               	movlw	0
  6451  001F40  6E19               	movwf	md_uart_write_str_ok@wantOk,c
  6452  001F42  0E00               	movlw	0
  6453  001F44  6E1A               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  6454  001F46  ECD3  F011         	call	_md_uart_write_str_ok	;wreg free
  6455  001F4A  0100               	movlb	0	; () banked
  6456  001F4C  6FF3               	movwf	_at3& (0+255),b
  6457                           
  6458                           ; BSR set to: 0
  6459                           ;sms.c: 149: at3 = md_uart_write_str_ok((uint8_t *)&msgIndex[0], sizeof(msgIndex), 1, 0)
      +                          ;
  6460  001F4E  0E98               	movlw	low read_sms@msgIndex
  6461  001F50  6E16               	movwf	md_uart_write_str_ok@data,c
  6462  001F52  0E00               	movlw	high read_sms@msgIndex
  6463  001F54  6E17               	movwf	md_uart_write_str_ok@data+1,c
  6464  001F56  0E03               	movlw	3
  6465  001F58  6E18               	movwf	md_uart_write_str_ok@len1,c
  6466  001F5A  0E01               	movlw	1
  6467  001F5C  6E19               	movwf	md_uart_write_str_ok@wantOk,c
  6468  001F5E  0E00               	movlw	0
  6469  001F60  6E1A               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  6470  001F62  ECD3  F011         	call	_md_uart_write_str_ok	;wreg free
  6471  001F66  0100               	movlb	0	; () banked
  6472  001F68  6FF3               	movwf	_at3& (0+255),b
  6473                           
  6474                           ; BSR set to: 0
  6475                           ;sms.c: 150: if (at3 == 1)
  6476  001F6A  05F3               	decf	_at3& (0+255),w,b
  6477  001F6C  A4D8               	btfss	status,2,c
  6478  001F6E  D003               	goto	l1407
  6479                           
  6480                           ; BSR set to: 0
  6481                           ;sms.c: 151: {
  6482                           ;sms.c: 152: clear_at_ok();
  6483  001F70  EC5E  F017         	call	_clear_at_ok	;wreg free
  6484  001F74  D7C7               	goto	l7094
  6485  001F76                     l1407:
  6486                           
  6487                           ; BSR set to: 0
  6488                           ;sms.c: 156: else if (at3 == 5)
  6489                           
  6490                           ; BSR set to: 0
  6491  001F76  0E05               	movlw	5
  6492  001F78  19F3               	xorwf	_at3& (0+255),w,b
  6493  001F7A  A4D8               	btfss	status,2,c
  6494  001F7C  D006               	goto	l1409
  6495                           
  6496                           ; BSR set to: 0
  6497                           ;sms.c: 157: {
  6498                           ;sms.c: 158: clear_at_ok();
  6499  001F7E  EC5E  F017         	call	_clear_at_ok	;wreg free
  6500                           
  6501                           ;sms.c: 159: ready_to_read_text = 0;
  6502  001F82  0E00               	movlw	0
  6503  001F84  0100               	movlb	0	; () banked
  6504  001F86  6FF8               	movwf	_ready_to_read_text& (0+255),b
  6505                           
  6506                           ; BSR set to: 0
  6507                           ;sms.c: 160: return 5;
  6508                           ;	Return value of _read_sms is never used
  6509  001F88  0012               	return	
  6510  001F8A                     l1409:
  6511                           
  6512                           ; BSR set to: 0
  6513                           ;sms.c: 161: }
  6514                           ;sms.c: 162: }
  6515                           ;sms.c: 163: }
  6516                           ;sms.c: 164: if (at2 == 5)
  6517                           
  6518                           ; BSR set to: 0
  6519                           
  6520                           ; BSR set to: 0
  6521                           
  6522                           ; BSR set to: 0
  6523                           
  6524                           ; BSR set to: 0
  6525  001F8A  0E05               	movlw	5
  6526  001F8C  19F4               	xorwf	_at2& (0+255),w,b
  6527  001F8E  A4D8               	btfss	status,2,c
  6528  001F90  0012               	return	
  6529                           
  6530                           ; BSR set to: 0
  6531                           ;sms.c: 165: {
  6532                           ;sms.c: 166: ready_to_read_text = 0;
  6533  001F92  0E00               	movlw	0
  6534  001F94  6FF8               	movwf	_ready_to_read_text& (0+255),b
  6535                           
  6536                           ; BSR set to: 0
  6537                           
  6538                           ; BSR set to: 0
  6539                           ;sms.c: 167: return 5;
  6540                           ;	Return value of _read_sms is never used
  6541  001F96  0012               	return	
  6542  001F98                     __end_of_read_sms:
  6543                           	opt stack 0
  6544                           tblptru	equ	0xFF8
  6545                           tblptrh	equ	0xFF7
  6546                           tblptrl	equ	0xFF6
  6547                           tablat	equ	0xFF5
  6548                           prodh	equ	0xFF4
  6549                           prodl	equ	0xFF3
  6550                           intcon	equ	0xFF2
  6551                           postinc0	equ	0xFEE
  6552                           wreg	equ	0xFE8
  6553                           postdec1	equ	0xFE5
  6554                           plusw1	equ	0xFE3
  6555                           fsr1l	equ	0xFE1
  6556                           indf2	equ	0xFDF
  6557                           postinc2	equ	0xFDE
  6558                           plusw2	equ	0xFDB
  6559                           fsr2h	equ	0xFDA
  6560                           fsr2l	equ	0xFD9
  6561                           status	equ	0xFD8
  6562                           
  6563 ;; *************** function _parse_cmgr *****************
  6564 ;; Defined at:
  6565 ;;		line 241 in file "C:/Users/Scott/InstantCare/Engineering/7102-10 - 906GN-SmokeGSMHub/Firmware/ic_hubCode_jvolk/test_
      +buttonmenu_wSMS.X/sms.c"
  6566 ;; Parameters:    Size  Location     Type
  6567 ;;		None
  6568 ;; Auto vars:     Size  Location     Type
  6569 ;;  l               1   19[BANK0 ] unsigned char 
  6570 ;;  k               1   10[BANK0 ] unsigned char 
  6571 ;;  j               1   20[BANK0 ] unsigned char 
  6572 ;;  i               1   21[BANK0 ] unsigned char 
  6573 ;;  cmgr_rsp        8    0[BANK0 ] unsigned char [8]
  6574 ;;  access_code     4   11[BANK0 ] unsigned char [4]
  6575 ;;  final_field_    1   18[BANK0 ] unsigned char 
  6576 ;;  final_field_    1   17[BANK0 ] unsigned char 
  6577 ;;  field_num_on    1   16[BANK0 ] unsigned char 
  6578 ;;  field_num_te    1   15[BANK0 ] unsigned char 
  6579 ;;  newline_inde    1    9[BANK0 ] unsigned char 
  6580 ;;  colon_index     1    8[BANK0 ] unsigned char 
  6581 ;; Return value:  Size  Location     Type
  6582 ;;                  1    wreg      unsigned char 
  6583 ;; Registers used:
  6584 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6585 ;; Tracked objects:
  6586 ;;		On entry : 0/0
  6587 ;;		On exit  : 0/0
  6588 ;;		Unchanged: 0/0
  6589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6591 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6592 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6593 ;;      Totals:         2      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6594 ;;Total ram usage:       24 bytes
  6595 ;; Hardware stack levels used:    1
  6596 ;; Hardware stack levels required when called:    5
  6597 ;; This function calls:
  6598 ;;		_ee_read
  6599 ;;		_program_field
  6600 ;; This function is called by:
  6601 ;;		_read_sms
  6602 ;; This function uses a non-reentrant model
  6603 ;;
  6604                           
  6605                           	psect	text21
  6606  001892                     __ptext21:
  6607                           	opt stack 0
  6608  001892                     _parse_cmgr:
  6609                           	opt stack 22
  6610                           
  6611                           ;sms.c: 243: uint8_t cmgr_rsp[] = "+CMGR: ";
  6612                           
  6613                           ;incstack = 0
  6614  001892  EE21  F0C6         	lfsr	2,parse_cmgr@F6877
  6615  001896  EE10  F060         	lfsr	1,parse_cmgr@cmgr_rsp
  6616  00189A  0E07               	movlw	7
  6617  00189C                     u8311:
  6618  00189C  CFDB FFE3          	movff	plusw2,plusw1
  6619  0018A0  06E8               	decf	wreg,f,c
  6620  0018A2  E2FC               	bc	u8311
  6621                           
  6622                           ;sms.c: 244: uint8_t access_code[4];
  6623                           ;sms.c: 245: uint8_t colon_index, newline_index;
  6624                           ;sms.c: 246: uint8_t field_num_tens, field_num_ones;
  6625                           ;sms.c: 247: uint8_t final_field_index = 0, final_field_term = 0;
  6626  0018A4  0E00               	movlw	0
  6627  0018A6  0100               	movlb	0	; () banked
  6628  0018A8  6F72               	movwf	parse_cmgr@final_field_index& (0+255),b
  6629                           
  6630                           ; BSR set to: 0
  6631  0018AA  0E00               	movlw	0
  6632  0018AC  6F71               	movwf	parse_cmgr@final_field_term& (0+255),b
  6633                           
  6634                           ; BSR set to: 0
  6635                           ;sms.c: 249: access_code[0] = ee_read(0x00, 0xC0);
  6636  0018AE  0EC0               	movlw	192
  6637  0018B0  6E15               	movwf	ee_read@addr,c
  6638  0018B2  0E00               	movlw	0
  6639  0018B4  ECD9  F017         	call	_ee_read
  6640  0018B8  0100               	movlb	0	; () banked
  6641  0018BA  6F6B               	movwf	parse_cmgr@access_code& (0+255),b
  6642                           
  6643                           ; BSR set to: 0
  6644                           ;sms.c: 250: access_code[1] = ee_read(0x00, 0xC1);
  6645  0018BC  0EC1               	movlw	193
  6646  0018BE  6E15               	movwf	ee_read@addr,c
  6647  0018C0  0E00               	movlw	0
  6648  0018C2  ECD9  F017         	call	_ee_read
  6649  0018C6  0100               	movlb	0	; () banked
  6650  0018C8  6F6C               	movwf	(parse_cmgr@access_code+1)& (0+255),b
  6651                           
  6652                           ; BSR set to: 0
  6653                           ;sms.c: 251: access_code[2] = ee_read(0x00, 0xC2);
  6654  0018CA  0EC2               	movlw	194
  6655  0018CC  6E15               	movwf	ee_read@addr,c
  6656  0018CE  0E00               	movlw	0
  6657  0018D0  ECD9  F017         	call	_ee_read
  6658  0018D4  0100               	movlb	0	; () banked
  6659  0018D6  6F6D               	movwf	(parse_cmgr@access_code+2)& (0+255),b
  6660                           
  6661                           ; BSR set to: 0
  6662                           ;sms.c: 252: access_code[3] = ee_read(0x00, 0xC3);
  6663  0018D8  0EC3               	movlw	195
  6664  0018DA  6E15               	movwf	ee_read@addr,c
  6665  0018DC  0E00               	movlw	0
  6666  0018DE  ECD9  F017         	call	_ee_read
  6667  0018E2  0100               	movlb	0	; () banked
  6668  0018E4  6F6E               	movwf	(parse_cmgr@access_code+3)& (0+255),b
  6669                           
  6670                           ; BSR set to: 0
  6671                           ;sms.c: 254: for (uint8_t i = 0; i < sizeof(mdRxBuf); i++)
  6672  0018E6  0E00               	movlw	0
  6673  0018E8  6F75               	movwf	parse_cmgr@i& (0+255),b
  6674  0018EA                     l6834:
  6675                           
  6676                           ; BSR set to: 0
  6677  0018EA  0E9F               	movlw	159
  6678  0018EC  6575               	cpfsgt	parse_cmgr@i& (0+255),b
  6679  0018EE  D001               	goto	l1452
  6680  0018F0  D15C               	goto	u8490
  6681  0018F2                     l1452:
  6682                           
  6683                           ; BSR set to: 0
  6684                           ;sms.c: 255: {
  6685                           ;sms.c: 256: if (mdRxBuf[i] == ':')
  6686                           
  6687                           ; BSR set to: 0
  6688  0018F2  5175               	movf	parse_cmgr@i& (0+255),w,b
  6689  0018F4  0D01               	mullw	1
  6690  0018F6  0E00               	movlw	low _mdRxBuf
  6691  0018F8  24F3               	addwf	prodl,w,c
  6692  0018FA  6ED9               	movwf	fsr2l,c
  6693  0018FC  0E02               	movlw	high _mdRxBuf
  6694  0018FE  20F4               	addwfc	prodh,w,c
  6695  001900  6EDA               	movwf	fsr2h,c
  6696  001902  0E3A               	movlw	58
  6697  001904  18DE               	xorwf	postinc2,w,c
  6698  001906  B4D8               	btfsc	status,2,c
  6699                           
  6700                           ; BSR set to: 0
  6701                           ;sms.c: 257: colon_index = i;
  6702  001908  C075  F068         	movff	parse_cmgr@i,parse_cmgr@colon_index
  6703                           
  6704                           ; BSR set to: 0
  6705                           ;sms.c: 258: if (mdRxBuf[i] == ',' && mdRxBuf[(uint8_t)(i + 2)] == '+')
  6706                           
  6707                           ; BSR set to: 0
  6708  00190C  5175               	movf	parse_cmgr@i& (0+255),w,b
  6709  00190E  0D01               	mullw	1
  6710  001910  0E00               	movlw	low _mdRxBuf
  6711  001912  24F3               	addwf	prodl,w,c
  6712  001914  6ED9               	movwf	fsr2l,c
  6713  001916  0E02               	movlw	high _mdRxBuf
  6714  001918  20F4               	addwfc	prodh,w,c
  6715  00191A  6EDA               	movwf	fsr2h,c
  6716  00191C  0E2C               	movlw	44
  6717  00191E  18DE               	xorwf	postinc2,w,c
  6718  001920  A4D8               	btfss	status,2,c
  6719  001922  D030               	goto	u8370
  6720                           
  6721                           ; BSR set to: 0
  6722  001924  C075  F026         	movff	parse_cmgr@i,??_parse_cmgr
  6723  001928  0E02               	movlw	2
  6724  00192A  2626               	addwf	??_parse_cmgr,f,c
  6725  00192C  5026               	movf	??_parse_cmgr,w,c
  6726  00192E  0D01               	mullw	1
  6727  001930  0E00               	movlw	low _mdRxBuf
  6728  001932  24F3               	addwf	prodl,w,c
  6729  001934  6ED9               	movwf	fsr2l,c
  6730  001936  0E02               	movlw	high _mdRxBuf
  6731  001938  20F4               	addwfc	prodh,w,c
  6732  00193A  6EDA               	movwf	fsr2h,c
  6733  00193C  0E2B               	movlw	43
  6734  00193E  18DE               	xorwf	postinc2,w,c
  6735  001940  A4D8               	btfss	status,2,c
  6736  001942  D020               	goto	u8370
  6737                           
  6738                           ; BSR set to: 0
  6739                           ;sms.c: 259: {
  6740                           ;sms.c: 260: ph_num_index = (uint8_t)(i + 3);
  6741  001944  5175               	movf	parse_cmgr@i& (0+255),w,b
  6742  001946  0F03               	addlw	3
  6743  001948  6FE9               	movwf	_ph_num_index& (0+255),b
  6744                           
  6745                           ; BSR set to: 0
  6746                           ;sms.c: 261: for (uint8_t l = 0; l < sizeof(ph_num); l++)
  6747  00194A  0E00               	movlw	0
  6748  00194C  6F73               	movwf	parse_cmgr@l& (0+255),b
  6749  00194E                     l6850:
  6750                           
  6751                           ; BSR set to: 0
  6752  00194E  0E08               	movlw	8
  6753  001950  6573               	cpfsgt	parse_cmgr@l& (0+255),b
  6754  001952  D001               	goto	l1456
  6755  001954  D017               	goto	u8370
  6756  001956                     l1456:
  6757                           
  6758                           ; BSR set to: 0
  6759                           ;sms.c: 262: ph_num[l] = mdRxBuf[(uint8_t)(ph_num_index + l)];
  6760                           
  6761                           ; BSR set to: 0
  6762  001956  51E9               	movf	_ph_num_index& (0+255),w,b
  6763  001958  2573               	addwf	parse_cmgr@l& (0+255),w,b
  6764  00195A  6E26               	movwf	??_parse_cmgr& (0+255),c
  6765  00195C  5026               	movf	??_parse_cmgr,w,c
  6766  00195E  0D01               	mullw	1
  6767  001960  0E00               	movlw	low _mdRxBuf
  6768  001962  24F3               	addwf	prodl,w,c
  6769  001964  6ED9               	movwf	fsr2l,c
  6770  001966  0E02               	movlw	high _mdRxBuf
  6771  001968  20F4               	addwfc	prodh,w,c
  6772  00196A  6EDA               	movwf	fsr2h,c
  6773  00196C  5173               	movf	parse_cmgr@l& (0+255),w,b
  6774  00196E  0D01               	mullw	1
  6775  001970  0EF4               	movlw	low _ph_num
  6776  001972  24F3               	addwf	prodl,w,c
  6777  001974  6EE1               	movwf	fsr1l,c
  6778  001976  0E01               	movlw	high _ph_num
  6779  001978  20F4               	addwfc	prodh,w,c
  6780  00197A  6EE2               	movwf	fsr1h,c
  6781  00197C  CFDF FFE7          	movff	indf2,indf1
  6782                           
  6783                           ; BSR set to: 0
  6784  001980  2B73               	incf	parse_cmgr@l& (0+255),f,b
  6785  001982  D7E5               	goto	l6850
  6786  001984                     u8370:
  6787                           
  6788                           ; BSR set to: 0
  6789                           ;sms.c: 263: }
  6790                           ;sms.c: 264: if (mdRxBuf[i] == '\n')
  6791                           
  6792                           ; BSR set to: 0
  6793                           
  6794                           ; BSR set to: 0
  6795  001984  5175               	movf	parse_cmgr@i& (0+255),w,b
  6796  001986  0D01               	mullw	1
  6797  001988  0E00               	movlw	low _mdRxBuf
  6798  00198A  24F3               	addwf	prodl,w,c
  6799  00198C  6ED9               	movwf	fsr2l,c
  6800  00198E  0E02               	movlw	high _mdRxBuf
  6801  001990  20F4               	addwfc	prodh,w,c
  6802  001992  6EDA               	movwf	fsr2h,c
  6803  001994  0E0A               	movlw	10
  6804  001996  18DE               	xorwf	postinc2,w,c
  6805  001998  B4D8               	btfsc	status,2,c
  6806                           
  6807                           ; BSR set to: 0
  6808                           ;sms.c: 265: newline_index = i;
  6809  00199A  C075  F069         	movff	parse_cmgr@i,parse_cmgr@newline_index
  6810                           
  6811                           ; BSR set to: 0
  6812                           ;sms.c: 266: if (mdRxBuf[i] == access_code[0] && mdRxBuf[(uint8_t)(i + 1)] == access_cod
      +                          e[1] && mdRxBuf[(uint8_t)(i + 2)] == access_code[2] && mdRxBuf[(uint8_t)(i + 3)] == acce
      +                          ss_code[3] && mdRxBuf[(uint8_t)(i + 4)] == '#')
  6813                           
  6814                           ; BSR set to: 0
  6815  00199E  5175               	movf	parse_cmgr@i& (0+255),w,b
  6816  0019A0  0D01               	mullw	1
  6817  0019A2  0E00               	movlw	low _mdRxBuf
  6818  0019A4  24F3               	addwf	prodl,w,c
  6819  0019A6  6ED9               	movwf	fsr2l,c
  6820  0019A8  0E02               	movlw	high _mdRxBuf
  6821  0019AA  20F4               	addwfc	prodh,w,c
  6822  0019AC  6EDA               	movwf	fsr2h,c
  6823  0019AE  516B               	movf	parse_cmgr@access_code& (0+255),w,b
  6824  0019B0  18DE               	xorwf	postinc2,w,c
  6825  0019B2  A4D8               	btfss	status,2,c
  6826  0019B4  D0F8               	goto	l1469
  6827                           
  6828                           ; BSR set to: 0
  6829  0019B6  C075  F026         	movff	parse_cmgr@i,??_parse_cmgr
  6830  0019BA  0E01               	movlw	1
  6831  0019BC  2626               	addwf	??_parse_cmgr,f,c
  6832  0019BE  5026               	movf	??_parse_cmgr,w,c
  6833  0019C0  0D01               	mullw	1
  6834  0019C2  0E00               	movlw	low _mdRxBuf
  6835  0019C4  24F3               	addwf	prodl,w,c
  6836  0019C6  6ED9               	movwf	fsr2l,c
  6837  0019C8  0E02               	movlw	high _mdRxBuf
  6838  0019CA  20F4               	addwfc	prodh,w,c
  6839  0019CC  6EDA               	movwf	fsr2h,c
  6840  0019CE  516C               	movf	(parse_cmgr@access_code+1)& (0+255),w,b
  6841  0019D0  18DE               	xorwf	postinc2,w,c
  6842  0019D2  A4D8               	btfss	status,2,c
  6843  0019D4  D0E8               	goto	l1469
  6844                           
  6845                           ; BSR set to: 0
  6846  0019D6  C075  F026         	movff	parse_cmgr@i,??_parse_cmgr
  6847  0019DA  0E02               	movlw	2
  6848  0019DC  2626               	addwf	??_parse_cmgr,f,c
  6849  0019DE  5026               	movf	??_parse_cmgr,w,c
  6850  0019E0  0D01               	mullw	1
  6851  0019E2  0E00               	movlw	low _mdRxBuf
  6852  0019E4  24F3               	addwf	prodl,w,c
  6853  0019E6  6ED9               	movwf	fsr2l,c
  6854  0019E8  0E02               	movlw	high _mdRxBuf
  6855  0019EA  20F4               	addwfc	prodh,w,c
  6856  0019EC  6EDA               	movwf	fsr2h,c
  6857  0019EE  516D               	movf	(parse_cmgr@access_code+2)& (0+255),w,b
  6858  0019F0  18DE               	xorwf	postinc2,w,c
  6859  0019F2  A4D8               	btfss	status,2,c
  6860  0019F4  D0D8               	goto	l1469
  6861                           
  6862                           ; BSR set to: 0
  6863  0019F6  C075  F026         	movff	parse_cmgr@i,??_parse_cmgr
  6864  0019FA  0E03               	movlw	3
  6865  0019FC  2626               	addwf	??_parse_cmgr,f,c
  6866  0019FE  5026               	movf	??_parse_cmgr,w,c
  6867  001A00  0D01               	mullw	1
  6868  001A02  0E00               	movlw	low _mdRxBuf
  6869  001A04  24F3               	addwf	prodl,w,c
  6870  001A06  6ED9               	movwf	fsr2l,c
  6871  001A08  0E02               	movlw	high _mdRxBuf
  6872  001A0A  20F4               	addwfc	prodh,w,c
  6873  001A0C  6EDA               	movwf	fsr2h,c
  6874  001A0E  516E               	movf	(parse_cmgr@access_code+3)& (0+255),w,b
  6875  001A10  18DE               	xorwf	postinc2,w,c
  6876  001A12  A4D8               	btfss	status,2,c
  6877  001A14  D0C8               	goto	l1469
  6878                           
  6879                           ; BSR set to: 0
  6880  001A16  C075  F026         	movff	parse_cmgr@i,??_parse_cmgr
  6881  001A1A  0E04               	movlw	4
  6882  001A1C  2626               	addwf	??_parse_cmgr,f,c
  6883  001A1E  5026               	movf	??_parse_cmgr,w,c
  6884  001A20  0D01               	mullw	1
  6885  001A22  0E00               	movlw	low _mdRxBuf
  6886  001A24  24F3               	addwf	prodl,w,c
  6887  001A26  6ED9               	movwf	fsr2l,c
  6888  001A28  0E02               	movlw	high _mdRxBuf
  6889  001A2A  20F4               	addwfc	prodh,w,c
  6890  001A2C  6EDA               	movwf	fsr2h,c
  6891  001A2E  0E23               	movlw	35
  6892  001A30  18DE               	xorwf	postinc2,w,c
  6893  001A32  A4D8               	btfss	status,2,c
  6894  001A34  D0B8               	goto	l1469
  6895                           
  6896                           ; BSR set to: 0
  6897                           ;sms.c: 269: {
  6898                           ;sms.c: 270: if (mdRxBuf[(uint8_t)(i + 7)] == '#')
  6899  001A36  C075  F026         	movff	parse_cmgr@i,??_parse_cmgr
  6900  001A3A  0E07               	movlw	7
  6901  001A3C  2626               	addwf	??_parse_cmgr,f,c
  6902  001A3E  5026               	movf	??_parse_cmgr,w,c
  6903  001A40  0D01               	mullw	1
  6904  001A42  0E00               	movlw	low _mdRxBuf
  6905  001A44  24F3               	addwf	prodl,w,c
  6906  001A46  6ED9               	movwf	fsr2l,c
  6907  001A48  0E02               	movlw	high _mdRxBuf
  6908  001A4A  20F4               	addwfc	prodh,w,c
  6909  001A4C  6EDA               	movwf	fsr2h,c
  6910  001A4E  0E23               	movlw	35
  6911  001A50  18DE               	xorwf	postinc2,w,c
  6912  001A52  A4D8               	btfss	status,2,c
  6913  001A54  D061               	goto	l1460
  6914                           
  6915                           ; BSR set to: 0
  6916                           ;sms.c: 271: {
  6917                           ;sms.c: 272: if (mdRxBuf[(uint8_t)(i + 5)] >= 0x41)
  6918  001A56  C075  F026         	movff	parse_cmgr@i,??_parse_cmgr
  6919  001A5A  0E05               	movlw	5
  6920  001A5C  2626               	addwf	??_parse_cmgr,f,c
  6921  001A5E  5026               	movf	??_parse_cmgr,w,c
  6922  001A60  0D01               	mullw	1
  6923  001A62  0E00               	movlw	low _mdRxBuf
  6924  001A64  24F3               	addwf	prodl,w,c
  6925  001A66  6ED9               	movwf	fsr2l,c
  6926  001A68  0E02               	movlw	high _mdRxBuf
  6927  001A6A  20F4               	addwfc	prodh,w,c
  6928  001A6C  6EDA               	movwf	fsr2h,c
  6929  001A6E  0E40               	movlw	64
  6930  001A70  64DF               	cpfsgt	indf2,c
  6931  001A72  D00F               	goto	l1461
  6932                           
  6933                           ; BSR set to: 0
  6934                           ;sms.c: 273: field_num_tens = (uint8_t)((mdRxBuf[(uint8_t)(i + 5)] - 0x41 + 0x0A) * 10);
  6935  001A74  C075  F026         	movff	parse_cmgr@i,??_parse_cmgr
  6936  001A78  0E05               	movlw	5
  6937  001A7A  2626               	addwf	??_parse_cmgr,f,c
  6938  001A7C  5026               	movf	??_parse_cmgr,w,c
  6939  001A7E  0D01               	mullw	1
  6940  001A80  0E00               	movlw	low _mdRxBuf
  6941  001A82  24F3               	addwf	prodl,w,c
  6942  001A84  6ED9               	movwf	fsr2l,c
  6943  001A86  0E02               	movlw	high _mdRxBuf
  6944  001A88  20F4               	addwfc	prodh,w,c
  6945  001A8A  6EDA               	movwf	fsr2h,c
  6946  001A8C  50DF               	movf	indf2,w,c
  6947  001A8E  0FC9               	addlw	201
  6948  001A90  D00E               	goto	L4
  6949  001A92                     l1461:
  6950                           
  6951                           ; BSR set to: 0
  6952                           ;sms.c: 274: else
  6953                           ;sms.c: 275: field_num_tens = (uint8_t)((mdRxBuf[(uint8_t)(i + 5)] - 0x30) * 10);
  6954                           
  6955                           ; BSR set to: 0
  6956  001A92  C075  F026         	movff	parse_cmgr@i,??_parse_cmgr
  6957  001A96  0E05               	movlw	5
  6958  001A98  2626               	addwf	??_parse_cmgr,f,c
  6959  001A9A  5026               	movf	??_parse_cmgr,w,c
  6960  001A9C  0D01               	mullw	1
  6961  001A9E  0E00               	movlw	low _mdRxBuf
  6962  001AA0  24F3               	addwf	prodl,w,c
  6963  001AA2  6ED9               	movwf	fsr2l,c
  6964  001AA4  0E02               	movlw	high _mdRxBuf
  6965  001AA6  20F4               	addwfc	prodh,w,c
  6966  001AA8  6EDA               	movwf	fsr2h,c
  6967  001AAA  50DF               	movf	indf2,w,c
  6968  001AAC  0FD0               	addlw	208
  6969  001AAE                     L4:
  6970  001AAE  0D0A               	mullw	10
  6971  001AB0  CFF3 F06F          	movff	prodl,parse_cmgr@field_num_tens
  6972                           
  6973                           ; BSR set to: 0
  6974                           ;sms.c: 276: if (mdRxBuf[(uint8_t)(i + 6)] >= 0x41)
  6975  001AB4  C075  F026         	movff	parse_cmgr@i,??_parse_cmgr
  6976  001AB8  0E06               	movlw	6
  6977  001ABA  2626               	addwf	??_parse_cmgr,f,c
  6978  001ABC  5026               	movf	??_parse_cmgr,w,c
  6979  001ABE  0D01               	mullw	1
  6980  001AC0  0E00               	movlw	low _mdRxBuf
  6981  001AC2  24F3               	addwf	prodl,w,c
  6982  001AC4  6ED9               	movwf	fsr2l,c
  6983  001AC6  0E02               	movlw	high _mdRxBuf
  6984  001AC8  20F4               	addwfc	prodh,w,c
  6985  001ACA  6EDA               	movwf	fsr2h,c
  6986  001ACC  0E40               	movlw	64
  6987  001ACE  64DF               	cpfsgt	indf2,c
  6988  001AD0  D00F               	goto	l1463
  6989                           
  6990                           ; BSR set to: 0
  6991                           ;sms.c: 277: field_num_ones = (uint8_t)(mdRxBuf[(uint8_t)(i + 6)] - 0x41 + 0x0A);
  6992  001AD2  C075  F026         	movff	parse_cmgr@i,??_parse_cmgr
  6993  001AD6  0E06               	movlw	6
  6994  001AD8  2626               	addwf	??_parse_cmgr,f,c
  6995  001ADA  5026               	movf	??_parse_cmgr,w,c
  6996  001ADC  0D01               	mullw	1
  6997  001ADE  0E00               	movlw	low _mdRxBuf
  6998  001AE0  24F3               	addwf	prodl,w,c
  6999  001AE2  6ED9               	movwf	fsr2l,c
  7000  001AE4  0E02               	movlw	high _mdRxBuf
  7001  001AE6  20F4               	addwfc	prodh,w,c
  7002  001AE8  6EDA               	movwf	fsr2h,c
  7003  001AEA  50DF               	movf	indf2,w,c
  7004  001AEC  0FC9               	addlw	201
  7005  001AEE  D00E               	goto	L5
  7006  001AF0                     l1463:
  7007                           
  7008                           ; BSR set to: 0
  7009                           ;sms.c: 278: else
  7010                           ;sms.c: 279: field_num_ones = (uint8_t)(mdRxBuf[(uint8_t)(i + 6)] - 0x30);
  7011                           
  7012                           ; BSR set to: 0
  7013  001AF0  C075  F026         	movff	parse_cmgr@i,??_parse_cmgr
  7014  001AF4  0E06               	movlw	6
  7015  001AF6  2626               	addwf	??_parse_cmgr,f,c
  7016  001AF8  5026               	movf	??_parse_cmgr,w,c
  7017  001AFA  0D01               	mullw	1
  7018  001AFC  0E00               	movlw	low _mdRxBuf
  7019  001AFE  24F3               	addwf	prodl,w,c
  7020  001B00  6ED9               	movwf	fsr2l,c
  7021  001B02  0E02               	movlw	high _mdRxBuf
  7022  001B04  20F4               	addwfc	prodh,w,c
  7023  001B06  6EDA               	movwf	fsr2h,c
  7024  001B08  50DF               	movf	indf2,w,c
  7025  001B0A  0FD0               	addlw	208
  7026  001B0C                     L5:
  7027  001B0C  6F70               	movwf	parse_cmgr@field_num_ones& (0+255),b
  7028                           
  7029                           ; BSR set to: 0
  7030                           ;sms.c: 280: field_num_tens += field_num_ones;
  7031                           
  7032                           ; BSR set to: 0
  7033  001B0E  5170               	movf	parse_cmgr@field_num_ones& (0+255),w,b
  7034  001B10  276F               	addwf	parse_cmgr@field_num_tens& (0+255),f,b
  7035                           
  7036                           ; BSR set to: 0
  7037                           ;sms.c: 281: final_field_index = (uint8_t)(i + 8);
  7038  001B12  5175               	movf	parse_cmgr@i& (0+255),w,b
  7039  001B14  0F08               	addlw	8
  7040  001B16  D043               	goto	L6
  7041  001B18                     l1460:
  7042                           
  7043                           ; BSR set to: 0
  7044                           ;sms.c: 283: else if (mdRxBuf[(uint8_t)(i + 6)] == '#')
  7045                           
  7046                           ; BSR set to: 0
  7047  001B18  C075  F026         	movff	parse_cmgr@i,??_parse_cmgr
  7048  001B1C  0E06               	movlw	6
  7049  001B1E  2626               	addwf	??_parse_cmgr,f,c
  7050  001B20  5026               	movf	??_parse_cmgr,w,c
  7051  001B22  0D01               	mullw	1
  7052  001B24  0E00               	movlw	low _mdRxBuf
  7053  001B26  24F3               	addwf	prodl,w,c
  7054  001B28  6ED9               	movwf	fsr2l,c
  7055  001B2A  0E02               	movlw	high _mdRxBuf
  7056  001B2C  20F4               	addwfc	prodh,w,c
  7057  001B2E  6EDA               	movwf	fsr2h,c
  7058  001B30  0E23               	movlw	35
  7059  001B32  18DE               	xorwf	postinc2,w,c
  7060  001B34  A4D8               	btfss	status,2,c
  7061  001B36  D035               	goto	l1466
  7062                           
  7063                           ; BSR set to: 0
  7064                           ;sms.c: 284: {
  7065                           ;sms.c: 285: field_num_tens = 0;
  7066  001B38  0E00               	movlw	0
  7067  001B3A  6F6F               	movwf	parse_cmgr@field_num_tens& (0+255),b
  7068                           
  7069                           ; BSR set to: 0
  7070                           ;sms.c: 286: if (mdRxBuf[(uint8_t)(i + 5)] >= 0x41)
  7071  001B3C  C075  F026         	movff	parse_cmgr@i,??_parse_cmgr
  7072  001B40  0E05               	movlw	5
  7073  001B42  2626               	addwf	??_parse_cmgr,f,c
  7074  001B44  5026               	movf	??_parse_cmgr,w,c
  7075  001B46  0D01               	mullw	1
  7076  001B48  0E00               	movlw	low _mdRxBuf
  7077  001B4A  24F3               	addwf	prodl,w,c
  7078  001B4C  6ED9               	movwf	fsr2l,c
  7079  001B4E  0E02               	movlw	high _mdRxBuf
  7080  001B50  20F4               	addwfc	prodh,w,c
  7081  001B52  6EDA               	movwf	fsr2h,c
  7082  001B54  0E40               	movlw	64
  7083  001B56  64DF               	cpfsgt	indf2,c
  7084  001B58  D00F               	goto	l1467
  7085                           
  7086                           ; BSR set to: 0
  7087                           ;sms.c: 287: field_num_ones = (uint8_t)(mdRxBuf[(uint8_t)(i + 5)] - 0x41 + 0x0A);
  7088  001B5A  C075  F026         	movff	parse_cmgr@i,??_parse_cmgr
  7089  001B5E  0E05               	movlw	5
  7090  001B60  2626               	addwf	??_parse_cmgr,f,c
  7091  001B62  5026               	movf	??_parse_cmgr,w,c
  7092  001B64  0D01               	mullw	1
  7093  001B66  0E00               	movlw	low _mdRxBuf
  7094  001B68  24F3               	addwf	prodl,w,c
  7095  001B6A  6ED9               	movwf	fsr2l,c
  7096  001B6C  0E02               	movlw	high _mdRxBuf
  7097  001B6E  20F4               	addwfc	prodh,w,c
  7098  001B70  6EDA               	movwf	fsr2h,c
  7099  001B72  50DF               	movf	indf2,w,c
  7100  001B74  0FC9               	addlw	201
  7101  001B76  D00E               	goto	L7
  7102  001B78                     l1467:
  7103                           
  7104                           ; BSR set to: 0
  7105                           ;sms.c: 288: else
  7106                           ;sms.c: 289: field_num_ones = (uint8_t)(mdRxBuf[(uint8_t)(i + 5)] - 0x30);
  7107                           
  7108                           ; BSR set to: 0
  7109  001B78  C075  F026         	movff	parse_cmgr@i,??_parse_cmgr
  7110  001B7C  0E05               	movlw	5
  7111  001B7E  2626               	addwf	??_parse_cmgr,f,c
  7112  001B80  5026               	movf	??_parse_cmgr,w,c
  7113  001B82  0D01               	mullw	1
  7114  001B84  0E00               	movlw	low _mdRxBuf
  7115  001B86  24F3               	addwf	prodl,w,c
  7116  001B88  6ED9               	movwf	fsr2l,c
  7117  001B8A  0E02               	movlw	high _mdRxBuf
  7118  001B8C  20F4               	addwfc	prodh,w,c
  7119  001B8E  6EDA               	movwf	fsr2h,c
  7120  001B90  50DF               	movf	indf2,w,c
  7121  001B92  0FD0               	addlw	208
  7122  001B94                     L7:
  7123  001B94  6F70               	movwf	parse_cmgr@field_num_ones& (0+255),b
  7124                           
  7125                           ; BSR set to: 0
  7126                           ;sms.c: 290: field_num_tens += field_num_ones;
  7127                           
  7128                           ; BSR set to: 0
  7129  001B96  5170               	movf	parse_cmgr@field_num_ones& (0+255),w,b
  7130  001B98  276F               	addwf	parse_cmgr@field_num_tens& (0+255),f,b
  7131                           
  7132                           ; BSR set to: 0
  7133                           ;sms.c: 291: final_field_index = (uint8_t)(i + 7);
  7134  001B9A  5175               	movf	parse_cmgr@i& (0+255),w,b
  7135  001B9C  0F07               	addlw	7
  7136  001B9E                     L6:
  7137  001B9E  6F72               	movwf	parse_cmgr@final_field_index& (0+255),b
  7138                           
  7139                           ;sms.c: 292: }
  7140  001BA0  D002               	goto	l1469
  7141  001BA2                     l1466:
  7142                           
  7143                           ; BSR set to: 0
  7144                           ;sms.c: 293: else
  7145                           ;sms.c: 294: return 4;
  7146                           
  7147                           ; BSR set to: 0
  7148  001BA2  0E04               	movlw	4
  7149                           
  7150                           ; BSR set to: 0
  7151  001BA4  0012               	return	
  7152  001BA6                     l1469:
  7153                           
  7154                           ; BSR set to: 0
  7155                           
  7156                           ; BSR set to: 0
  7157                           
  7158                           ; BSR set to: 0
  7159                           
  7160                           ; BSR set to: 0
  7161  001BA6  2B75               	incf	parse_cmgr@i& (0+255),f,b
  7162  001BA8  D6A0               	goto	l6834
  7163  001BAA                     u8490:
  7164                           
  7165                           ; BSR set to: 0
  7166                           ;sms.c: 295: }
  7167                           ;sms.c: 296: }
  7168                           ;sms.c: 297: for (uint8_t j = final_field_index; j < sizeof(mdRxBuf); j++)
  7169  001BAA  C072  F074         	movff	parse_cmgr@final_field_index,parse_cmgr@j
  7170  001BAE                     l6912:
  7171                           
  7172                           ; BSR set to: 0
  7173  001BAE  0E9F               	movlw	159
  7174  001BB0  6574               	cpfsgt	parse_cmgr@j& (0+255),b
  7175  001BB2  D001               	goto	l1471
  7176  001BB4  D00F               	goto	u8520
  7177  001BB6                     l1471:
  7178                           
  7179                           ; BSR set to: 0
  7180                           ;sms.c: 298: {
  7181                           ;sms.c: 299: if (mdRxBuf[j] == '#')
  7182                           
  7183                           ; BSR set to: 0
  7184  001BB6  5174               	movf	parse_cmgr@j& (0+255),w,b
  7185  001BB8  0D01               	mullw	1
  7186  001BBA  0E00               	movlw	low _mdRxBuf
  7187  001BBC  24F3               	addwf	prodl,w,c
  7188  001BBE  6ED9               	movwf	fsr2l,c
  7189  001BC0  0E02               	movlw	high _mdRxBuf
  7190  001BC2  20F4               	addwfc	prodh,w,c
  7191  001BC4  6EDA               	movwf	fsr2h,c
  7192  001BC6  0E23               	movlw	35
  7193  001BC8  18DE               	xorwf	postinc2,w,c
  7194  001BCA  B4D8               	btfsc	status,2,c
  7195                           
  7196                           ; BSR set to: 0
  7197                           ;sms.c: 300: final_field_term = j;
  7198  001BCC  C074  F071         	movff	parse_cmgr@j,parse_cmgr@final_field_term
  7199                           
  7200                           ; BSR set to: 0
  7201                           
  7202                           ; BSR set to: 0
  7203  001BD0  2B74               	incf	parse_cmgr@j& (0+255),f,b
  7204  001BD2  D7ED               	goto	l6912
  7205  001BD4                     u8520:
  7206                           
  7207                           ; BSR set to: 0
  7208                           ;sms.c: 301: }
  7209                           ;sms.c: 302: if (final_field_term == 0)
  7210                           
  7211                           ; BSR set to: 0
  7212  001BD4  5171               	movf	parse_cmgr@final_field_term& (0+255),w,b
  7213  001BD6  A4D8               	btfss	status,2,c
  7214  001BD8  D002               	goto	l1474
  7215                           
  7216                           ; BSR set to: 0
  7217                           ;sms.c: 303: return 4;
  7218  001BDA  0E04               	movlw	4
  7219                           
  7220                           ; BSR set to: 0
  7221  001BDC  0012               	return	
  7222  001BDE                     l1474:
  7223                           
  7224                           ; BSR set to: 0
  7225                           ;sms.c: 304: for (uint8_t k = final_field_index; k < final_field_term; k++)
  7226  001BDE  C072  F06A         	movff	parse_cmgr@final_field_index,parse_cmgr@k
  7227  001BE2  D001               	goto	l1475
  7228  001BE4                     
  7229                           ; BSR set to: 0
  7230                           
  7231                           ; BSR set to: 0
  7232  001BE4  2B6A               	incf	parse_cmgr@k& (0+255),f,b
  7233  001BE6                     l1475:
  7234                           
  7235                           ; BSR set to: 0
  7236                           
  7237                           ; BSR set to: 0
  7238  001BE6  5171               	movf	parse_cmgr@final_field_term& (0+255),w,b
  7239  001BE8  5D6A               	subwf	parse_cmgr@k& (0+255),w,b
  7240  001BEA  A0D8               	btfss	status,0,c
  7241  001BEC  D7FB               	goto	l1476
  7242                           
  7243                           ; BSR set to: 0
  7244                           ;sms.c: 307: }
  7245                           ;sms.c: 308: if (program_field(field_num_tens, referenceBuf, (uint8_t)(final_field_term 
      +                          - final_field_index)))
  7246                           
  7247                           ; BSR set to: 0
  7248  001BEE  0E64               	movlw	low _referenceBuf
  7249  001BF0  6E1D               	movwf	program_field@data_buf,c
  7250  001BF2  0E03               	movlw	high _referenceBuf
  7251  001BF4  6E1E               	movwf	program_field@data_buf+1,c
  7252  001BF6  5172               	movf	parse_cmgr@final_field_index& (0+255),w,b
  7253  001BF8  0800               	sublw	0
  7254  001BFA  2571               	addwf	parse_cmgr@final_field_term& (0+255),w,b
  7255  001BFC  6E1F               	movwf	program_field@size,c
  7256  001BFE  516F               	movf	parse_cmgr@field_num_tens& (0+255),w,b
  7257  001C00  EC09  F00E         	call	_program_field
  7258  001C04  0900               	iorlw	0
  7259  001C06  B4D8               	btfsc	status,2,c
  7260  001C08  D002               	goto	l1478
  7261                           
  7262                           ;sms.c: 309: return 1;
  7263  001C0A  0E01               	movlw	1
  7264  001C0C  0012               	return	
  7265  001C0E                     l1478:
  7266                           
  7267                           ;sms.c: 310: else
  7268                           ;sms.c: 311: return 4;
  7269  001C0E  0E04               	movlw	4
  7270  001C10  0012               	return	
  7271  001C12                     __end_of_parse_cmgr:
  7272                           	opt stack 0
  7273                           tblptru	equ	0xFF8
  7274                           tblptrh	equ	0xFF7
  7275                           tblptrl	equ	0xFF6
  7276                           tablat	equ	0xFF5
  7277                           prodh	equ	0xFF4
  7278                           prodl	equ	0xFF3
  7279                           intcon	equ	0xFF2
  7280                           postinc0	equ	0xFEE
  7281                           wreg	equ	0xFE8
  7282                           indf1	equ	0xFE7
  7283                           postdec1	equ	0xFE5
  7284                           plusw1	equ	0xFE3
  7285                           fsr1h	equ	0xFE2
  7286                           fsr1l	equ	0xFE1
  7287                           indf2	equ	0xFDF
  7288                           postinc2	equ	0xFDE
  7289                           plusw2	equ	0xFDB
  7290                           fsr2h	equ	0xFDA
  7291                           fsr2l	equ	0xFD9
  7292                           status	equ	0xFD8
  7293                           
  7294 ;; *************** function _program_field *****************
  7295 ;; Defined at:
  7296 ;;		line 176 in file "cell_settings.c"
  7297 ;; Parameters:    Size  Location     Type
  7298 ;;  field_number    1    wreg     unsigned char 
  7299 ;;  data_buf        2   28[COMRAM] PTR unsigned char 
  7300 ;;		 -> referenceBuf(60), 
  7301 ;;  size            1   30[COMRAM] unsigned char 
  7302 ;; Auto vars:     Size  Location     Type
  7303 ;;  field_number    1   36[COMRAM] unsigned char 
  7304 ;;  start_addr      1   35[COMRAM] unsigned char 
  7305 ;;  i               1   34[COMRAM] unsigned char 
  7306 ;;  max_size        1   33[COMRAM] unsigned char 
  7307 ;;  page            1   32[COMRAM] unsigned char 
  7308 ;; Return value:  Size  Location     Type
  7309 ;;                  1    wreg      unsigned char 
  7310 ;; Registers used:
  7311 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7312 ;; Tracked objects:
  7313 ;;		On entry : 0/0
  7314 ;;		On exit  : 0/0
  7315 ;;		Unchanged: 0/0
  7316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7317 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7318 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7319 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7320 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7321 ;;Total ram usage:        9 bytes
  7322 ;; Hardware stack levels used:    1
  7323 ;; Hardware stack levels required when called:    4
  7324 ;; This function calls:
  7325 ;;		___awdiv
  7326 ;;		___awmod
  7327 ;;		_ee_write
  7328 ;; This function is called by:
  7329 ;;		_parse_cmgr
  7330 ;; This function uses a non-reentrant model
  7331 ;;
  7332                           
  7333                           	psect	text22
  7334  001C12                     __ptext22:
  7335                           	opt stack 0
  7336  001C12                     _program_field:
  7337                           	opt stack 22
  7338                           
  7339                           ;incstack = 0
  7340                           ;program_field@field_number stored from wreg
  7341  001C12  6E25               	movwf	program_field@field_number,c
  7342                           
  7343                           ;cell_settings.c: 178: uint8_t start_addr;
  7344                           ;cell_settings.c: 179: uint8_t page = 0x00;
  7345  001C14  0E00               	movlw	0
  7346  001C16  6E21               	movwf	program_field@page,c
  7347                           
  7348                           ;cell_settings.c: 180: uint8_t max_size = 40;
  7349  001C18  0E28               	movlw	40
  7350  001C1A  6E22               	movwf	program_field@max_size,c
  7351                           
  7352                           ;cell_settings.c: 181: uint8_t i = 0;
  7353  001C1C  0E00               	movlw	0
  7354  001C1E  6E23               	movwf	program_field@i,c
  7355                           
  7356                           ;cell_settings.c: 182: if (field_number == 1)
  7357  001C20  0425               	decf	program_field@field_number,w,c
  7358  001C22  A4D8               	btfss	status,2,c
  7359  001C24  D002               	goto	l1681
  7360                           
  7361                           ;cell_settings.c: 183: start_addr = 0x30;
  7362  001C26  0E30               	movlw	48
  7363  001C28  D071               	goto	L26
  7364  001C2A                     l1681:
  7365                           
  7366                           ;cell_settings.c: 184: else if (field_number == 2)
  7367  001C2A  0E02               	movlw	2
  7368  001C2C  1825               	xorwf	program_field@field_number,w,c
  7369  001C2E  A4D8               	btfss	status,2,c
  7370  001C30  D002               	goto	l1683
  7371                           
  7372                           ;cell_settings.c: 185: start_addr = 0x50;
  7373  001C32  0E50               	movlw	80
  7374  001C34  D06B               	goto	L26
  7375  001C36                     l1683:
  7376                           
  7377                           ;cell_settings.c: 186: else if (field_number == 3)
  7378  001C36  0E03               	movlw	3
  7379  001C38  1825               	xorwf	program_field@field_number,w,c
  7380  001C3A  A4D8               	btfss	status,2,c
  7381  001C3C  D002               	goto	l1685
  7382                           
  7383                           ;cell_settings.c: 187: start_addr = 0x70;
  7384  001C3E  0E70               	movlw	112
  7385  001C40  D065               	goto	L26
  7386  001C42                     l1685:
  7387                           
  7388                           ;cell_settings.c: 188: else if (field_number == 4)
  7389  001C42  0E04               	movlw	4
  7390  001C44  1825               	xorwf	program_field@field_number,w,c
  7391  001C46  A4D8               	btfss	status,2,c
  7392  001C48  D002               	goto	l1687
  7393                           
  7394                           ;cell_settings.c: 189: start_addr = 0x90;
  7395  001C4A  0E90               	movlw	144
  7396  001C4C  D05F               	goto	L26
  7397  001C4E                     l1687:
  7398                           
  7399                           ;cell_settings.c: 190: else if (field_number == 5)
  7400  001C4E  0E05               	movlw	5
  7401  001C50  1825               	xorwf	program_field@field_number,w,c
  7402  001C52  A4D8               	btfss	status,2,c
  7403  001C54  D002               	goto	l1689
  7404                           
  7405                           ;cell_settings.c: 191: start_addr = 0xC0;
  7406  001C56  0EC0               	movlw	192
  7407  001C58  D059               	goto	L26
  7408  001C5A                     l1689:
  7409                           
  7410                           ;cell_settings.c: 192: else if (field_number == 6)
  7411  001C5A  0E06               	movlw	6
  7412  001C5C  1825               	xorwf	program_field@field_number,w,c
  7413  001C5E  A4D8               	btfss	status,2,c
  7414  001C60  D002               	goto	l1691
  7415                           
  7416                           ;cell_settings.c: 193: start_addr = 0xC7;
  7417  001C62  0EC7               	movlw	199
  7418  001C64  D053               	goto	L26
  7419  001C66                     l1691:
  7420                           
  7421                           ;cell_settings.c: 194: else if (field_number == 7)
  7422  001C66  0E07               	movlw	7
  7423  001C68  1825               	xorwf	program_field@field_number,w,c
  7424  001C6A  A4D8               	btfss	status,2,c
  7425  001C6C  D002               	goto	l1693
  7426                           
  7427                           ;cell_settings.c: 195: start_addr = 0xC8;
  7428  001C6E  0EC8               	movlw	200
  7429  001C70  D04D               	goto	L26
  7430  001C72                     l1693:
  7431                           
  7432                           ;cell_settings.c: 196: else if (field_number == 8)
  7433  001C72  0E08               	movlw	8
  7434  001C74  1825               	xorwf	program_field@field_number,w,c
  7435  001C76  A4D8               	btfss	status,2,c
  7436  001C78  D002               	goto	l1695
  7437                           
  7438                           ;cell_settings.c: 197: start_addr = 0xC9;
  7439  001C7A  0EC9               	movlw	201
  7440  001C7C  D047               	goto	L26
  7441  001C7E                     l1695:
  7442                           
  7443                           ;cell_settings.c: 198: else if (field_number == 9)
  7444  001C7E  0E09               	movlw	9
  7445  001C80  1825               	xorwf	program_field@field_number,w,c
  7446  001C82  A4D8               	btfss	status,2,c
  7447  001C84  D002               	goto	l1697
  7448                           
  7449                           ;cell_settings.c: 199: start_addr = 0xB8;
  7450  001C86  0EB8               	movlw	184
  7451  001C88  D041               	goto	L26
  7452  001C8A                     l1697:
  7453                           
  7454                           ;cell_settings.c: 200: else if (field_number == 10)
  7455  001C8A  0E0A               	movlw	10
  7456  001C8C  1825               	xorwf	program_field@field_number,w,c
  7457  001C8E  A4D8               	btfss	status,2,c
  7458  001C90  D002               	goto	l1699
  7459                           
  7460                           ;cell_settings.c: 201: start_addr = 0xCA;
  7461  001C92  0ECA               	movlw	202
  7462  001C94  D03B               	goto	L26
  7463  001C96                     l1699:
  7464                           
  7465                           ;cell_settings.c: 202: else if (field_number == 11)
  7466  001C96  0E0B               	movlw	11
  7467  001C98  1825               	xorwf	program_field@field_number,w,c
  7468  001C9A  A4D8               	btfss	status,2,c
  7469  001C9C  D002               	goto	l1701
  7470                           
  7471                           ;cell_settings.c: 203: start_addr = 0xD0;
  7472  001C9E  0ED0               	movlw	208
  7473  001CA0  D035               	goto	L26
  7474  001CA2                     l1701:
  7475                           
  7476                           ;cell_settings.c: 204: else if (field_number == 12)
  7477  001CA2  0E0C               	movlw	12
  7478  001CA4  1825               	xorwf	program_field@field_number,w,c
  7479  001CA6  A4D8               	btfss	status,2,c
  7480  001CA8  D002               	goto	l1703
  7481                           
  7482                           ;cell_settings.c: 205: start_addr = 0xB9;
  7483  001CAA  0EB9               	movlw	185
  7484  001CAC  D02F               	goto	L26
  7485  001CAE                     l1703:
  7486                           
  7487                           ;cell_settings.c: 206: else if (field_number == 14)
  7488  001CAE  0E0E               	movlw	14
  7489  001CB0  1825               	xorwf	program_field@field_number,w,c
  7490  001CB2  A4D8               	btfss	status,2,c
  7491  001CB4  D002               	goto	l1705
  7492                           
  7493                           ;cell_settings.c: 207: start_addr = 0xBB;
  7494  001CB6  0EBB               	movlw	187
  7495  001CB8  D029               	goto	L26
  7496  001CBA                     l1705:
  7497                           
  7498                           ;cell_settings.c: 208: else if (field_number == 15)
  7499  001CBA  0E0F               	movlw	15
  7500  001CBC  1825               	xorwf	program_field@field_number,w,c
  7501  001CBE  A4D8               	btfss	status,2,c
  7502  001CC0  D002               	goto	l1707
  7503                           
  7504                           ;cell_settings.c: 209: start_addr = 0xBC;
  7505  001CC2  0EBC               	movlw	188
  7506  001CC4  D023               	goto	L26
  7507  001CC6                     l1707:
  7508                           
  7509                           ;cell_settings.c: 210: else if (field_number == 16)
  7510  001CC6  0E10               	movlw	16
  7511  001CC8  1825               	xorwf	program_field@field_number,w,c
  7512  001CCA  A4D8               	btfss	status,2,c
  7513  001CCC  D002               	goto	l1709
  7514                           
  7515                           ;cell_settings.c: 211: start_addr = 0xBD;
  7516  001CCE  0EBD               	movlw	189
  7517  001CD0  D01D               	goto	L26
  7518  001CD2                     l1709:
  7519                           
  7520                           ;cell_settings.c: 212: else if (field_number == 31)
  7521  001CD2  0E1F               	movlw	31
  7522  001CD4  1825               	xorwf	program_field@field_number,w,c
  7523  001CD6  A4D8               	btfss	status,2,c
  7524  001CD8  D002               	goto	l1711
  7525                           
  7526                           ;cell_settings.c: 213: start_addr = 0xB0;
  7527  001CDA  0EB0               	movlw	176
  7528  001CDC  D017               	goto	L26
  7529  001CDE                     l1711:
  7530                           
  7531                           ;cell_settings.c: 214: else if (field_number == 32)
  7532  001CDE  0E20               	movlw	32
  7533  001CE0  1825               	xorwf	program_field@field_number,w,c
  7534  001CE2  A4D8               	btfss	status,2,c
  7535  001CE4  D002               	goto	l1713
  7536                           
  7537                           ;cell_settings.c: 215: start_addr = 0xB2;
  7538  001CE6  0EB2               	movlw	178
  7539  001CE8  D011               	goto	L26
  7540  001CEA                     l1713:
  7541                           
  7542                           ;cell_settings.c: 216: else if (field_number == 33)
  7543  001CEA  0E21               	movlw	33
  7544  001CEC  1825               	xorwf	program_field@field_number,w,c
  7545  001CEE  A4D8               	btfss	status,2,c
  7546  001CF0  D002               	goto	l1715
  7547                           
  7548                           ;cell_settings.c: 217: start_addr = 0xB4;
  7549  001CF2  0EB4               	movlw	180
  7550  001CF4  D00B               	goto	L26
  7551  001CF6                     l1715:
  7552                           
  7553                           ;cell_settings.c: 218: else if (field_number == 34)
  7554  001CF6  0E22               	movlw	34
  7555  001CF8  1825               	xorwf	program_field@field_number,w,c
  7556  001CFA  A4D8               	btfss	status,2,c
  7557  001CFC  D002               	goto	l1717
  7558                           
  7559                           ;cell_settings.c: 219: start_addr = 0xB6;
  7560  001CFE  0EB6               	movlw	182
  7561  001D00  D005               	goto	L26
  7562  001D02                     l1717:
  7563                           
  7564                           ;cell_settings.c: 220: else if (field_number == 35)
  7565  001D02  0E23               	movlw	35
  7566  001D04  1825               	xorwf	program_field@field_number,w,c
  7567  001D06  A4D8               	btfss	status,2,c
  7568  001D08  D003               	goto	l1719
  7569                           
  7570                           ;cell_settings.c: 221: start_addr = 0x10;
  7571  001D0A  0E10               	movlw	16
  7572  001D0C                     L26:
  7573  001D0C  6E24               	movwf	program_field@start_addr,c
  7574  001D0E  D010               	goto	l1721
  7575  001D10                     l1719:
  7576                           
  7577                           ;cell_settings.c: 222: else if (field_number >= 41 && field_number <= 56)
  7578  001D10  0E28               	movlw	40
  7579  001D12  6425               	cpfsgt	program_field@field_number,c
  7580  001D14  D00D               	goto	l1721
  7581  001D16  0E39               	movlw	57
  7582  001D18  6025               	cpfslt	program_field@field_number,c
  7583  001D1A  D00A               	goto	l1721
  7584                           
  7585                           ;cell_settings.c: 223: {
  7586                           ;cell_settings.c: 224: page = 0x01;
  7587  001D1C  0E01               	movlw	1
  7588  001D1E  6E21               	movwf	program_field@page,c
  7589                           
  7590                           ;cell_settings.c: 225: start_addr = (uint8_t)(0x80 + 6 * (field_number - 41));
  7591  001D20  5025               	movf	program_field@field_number,w,c
  7592  001D22  0FD7               	addlw	215
  7593  001D24  0D06               	mullw	6
  7594  001D26  50F3               	movf	prodl,w,c
  7595  001D28  0F80               	addlw	128
  7596  001D2A  6E24               	movwf	program_field@start_addr,c
  7597                           
  7598                           ;cell_settings.c: 226: max_size = 6;
  7599  001D2C  0E06               	movlw	6
  7600  001D2E  6E22               	movwf	program_field@max_size,c
  7601  001D30                     l1721:
  7602                           
  7603                           ;cell_settings.c: 227: }
  7604                           ;cell_settings.c: 228: if (size <= max_size)
  7605  001D30  501F               	movf	program_field@size,w,c
  7606  001D32  5C22               	subwf	program_field@max_size,w,c
  7607  001D34  A0D8               	btfss	status,0,c
  7608  001D36  D061               	goto	l1722
  7609                           
  7610                           ;cell_settings.c: 229: {
  7611                           ;cell_settings.c: 230: if (field_number >= 10)
  7612  001D38  0E09               	movlw	9
  7613  001D3A  6425               	cpfsgt	program_field@field_number,c
  7614  001D3C  D01B               	goto	l1723
  7615                           
  7616                           ;cell_settings.c: 231: {
  7617                           ;cell_settings.c: 232: sms_buf[0] = (uint8_t)(field_number / 0x0A + 0x41);
  7618  001D3E  C025  F015         	movff	program_field@field_number,___awdiv@dividend
  7619  001D42  6A16               	clrf	___awdiv@dividend+1,c
  7620  001D44  0E00               	movlw	0
  7621  001D46  6E18               	movwf	___awdiv@divisor+1,c
  7622  001D48  0E0A               	movlw	10
  7623  001D4A  6E17               	movwf	___awdiv@divisor,c
  7624  001D4C  EC14  F016         	call	___awdiv	;wreg free
  7625  001D50  5015               	movf	?___awdiv,w,c
  7626  001D52  0F41               	addlw	65
  7627  001D54  0102               	movlb	2	; () banked
  7628  001D56  6FA0               	movwf	_sms_buf& (0+255),b
  7629                           
  7630                           ;cell_settings.c: 233: sms_buf[1] = (uint8_t)(field_number % 0x0A + 0x30);
  7631  001D58  C025  F015         	movff	program_field@field_number,___awmod@dividend
  7632  001D5C  6A16               	clrf	___awmod@dividend+1,c
  7633  001D5E  0E00               	movlw	0
  7634  001D60  6E18               	movwf	___awmod@divisor+1,c
  7635  001D62  0E0A               	movlw	10
  7636  001D64  6E17               	movwf	___awmod@divisor,c
  7637  001D66  EC8E  F016         	call	___awmod	;wreg free
  7638  001D6A  5015               	movf	?___awmod,w,c
  7639  001D6C  0F30               	addlw	48
  7640  001D6E  0102               	movlb	2	; () banked
  7641  001D70  6FA1               	movwf	(_sms_buf+1)& (0+255),b
  7642                           
  7643                           ;cell_settings.c: 234: }
  7644  001D72  D004               	goto	l1724
  7645  001D74                     l1723:
  7646                           
  7647                           ;cell_settings.c: 235: else
  7648                           ;cell_settings.c: 236: sms_buf[0] = (uint8_t)(field_number + 0x30);
  7649                           
  7650                           ; BSR set to: 2
  7651  001D74  5025               	movf	program_field@field_number,w,c
  7652  001D76  0F30               	addlw	48
  7653  001D78  0102               	movlb	2	; () banked
  7654  001D7A  6FA0               	movwf	_sms_buf& (0+255),b
  7655  001D7C                     l1724:
  7656                           
  7657                           ; BSR set to: 2
  7658                           ;cell_settings.c: 237: sms_buf[2] = '#';
  7659                           
  7660                           ; BSR set to: 2
  7661  001D7C  0E23               	movlw	35
  7662  001D7E  6FA2               	movwf	(_sms_buf+2)& (0+255),b
  7663                           
  7664                           ; BSR set to: 2
  7665                           ;cell_settings.c: 238: for (i = 0; i < size; i++)
  7666  001D80  0E00               	movlw	0
  7667  001D82  6E23               	movwf	program_field@i,c
  7668  001D84  D026               	goto	l1725
  7669  001D86                     
  7670                           ;cell_settings.c: 239: {
  7671                           ;cell_settings.c: 240: ee_write(page, start_addr, data_buf[i]);
  7672                           
  7673                           ; BSR set to: 2
  7674  001D86  C024  F015         	movff	program_field@start_addr,ee_write@addr
  7675  001D8A  5023               	movf	program_field@i,w,c
  7676  001D8C  0D01               	mullw	1
  7677  001D8E  50F3               	movf	prodl,w,c
  7678  001D90  241D               	addwf	program_field@data_buf,w,c
  7679  001D92  6ED9               	movwf	fsr2l,c
  7680  001D94  50F4               	movf	prodh,w,c
  7681  001D96  201E               	addwfc	program_field@data_buf+1,w,c
  7682  001D98  6EDA               	movwf	fsr2h,c
  7683  001D9A  50DF               	movf	indf2,w,c
  7684  001D9C  6E16               	movwf	ee_write@data,c
  7685  001D9E  5021               	movf	program_field@page,w,c
  7686  001DA0  EC78  F017         	call	_ee_write
  7687                           
  7688                           ;cell_settings.c: 241: sms_buf[(uint8_t)(i + 3)] = data_buf[i];
  7689  001DA4  5023               	movf	program_field@i,w,c
  7690  001DA6  0D01               	mullw	1
  7691  001DA8  50F3               	movf	prodl,w,c
  7692  001DAA  241D               	addwf	program_field@data_buf,w,c
  7693  001DAC  6ED9               	movwf	fsr2l,c
  7694  001DAE  50F4               	movf	prodh,w,c
  7695  001DB0  201E               	addwfc	program_field@data_buf+1,w,c
  7696  001DB2  6EDA               	movwf	fsr2h,c
  7697  001DB4  C023  F020         	movff	program_field@i,??_program_field
  7698  001DB8  0E03               	movlw	3
  7699  001DBA  2620               	addwf	??_program_field,f,c
  7700  001DBC  5020               	movf	??_program_field,w,c
  7701  001DBE  0D01               	mullw	1
  7702  001DC0  0EA0               	movlw	low _sms_buf
  7703  001DC2  24F3               	addwf	prodl,w,c
  7704  001DC4  6EE1               	movwf	fsr1l,c
  7705  001DC6  0E02               	movlw	high _sms_buf
  7706  001DC8  20F4               	addwfc	prodh,w,c
  7707  001DCA  6EE2               	movwf	fsr1h,c
  7708  001DCC  CFDF FFE7          	movff	indf2,indf1
  7709  001DD0  2A23               	incf	program_field@i,f,c
  7710  001DD2                     l1725:
  7711  001DD2  501F               	movf	program_field@size,w,c
  7712  001DD4  5C23               	subwf	program_field@i,w,c
  7713  001DD6  A0D8               	btfss	status,0,c
  7714  001DD8  D7D6               	goto	l1726
  7715                           
  7716                           ;cell_settings.c: 242: }
  7717                           ;cell_settings.c: 243: sms_buf[(uint8_t)(i + 3)] = '#';
  7718  001DDA  C023  F020         	movff	program_field@i,??_program_field
  7719  001DDE  0E03               	movlw	3
  7720  001DE0  2620               	addwf	??_program_field,f,c
  7721  001DE2  5020               	movf	??_program_field,w,c
  7722  001DE4  0D01               	mullw	1
  7723  001DE6  0EA0               	movlw	low _sms_buf
  7724  001DE8  24F3               	addwf	prodl,w,c
  7725  001DEA  6ED9               	movwf	fsr2l,c
  7726  001DEC  0E02               	movlw	high _sms_buf
  7727  001DEE  20F4               	addwfc	prodh,w,c
  7728  001DF0  6EDA               	movwf	fsr2h,c
  7729  001DF2  0E23               	movlw	35
  7730  001DF4  6EDF               	movwf	indf2,c
  7731                           
  7732                           ;cell_settings.c: 244: return 1;
  7733  001DF6  0E01               	movlw	1
  7734  001DF8  0012               	return	
  7735  001DFA                     l1722:
  7736                           
  7737                           ;cell_settings.c: 245: }
  7738                           ;cell_settings.c: 246: return 0;
  7739  001DFA  0E00               	movlw	0
  7740  001DFC  0012               	return	
  7741  001DFE                     __end_of_program_field:
  7742                           	opt stack 0
  7743                           tblptru	equ	0xFF8
  7744                           tblptrh	equ	0xFF7
  7745                           tblptrl	equ	0xFF6
  7746                           tablat	equ	0xFF5
  7747                           prodh	equ	0xFF4
  7748                           prodl	equ	0xFF3
  7749                           intcon	equ	0xFF2
  7750                           postinc0	equ	0xFEE
  7751                           wreg	equ	0xFE8
  7752                           indf1	equ	0xFE7
  7753                           postdec1	equ	0xFE5
  7754                           plusw1	equ	0xFE3
  7755                           fsr1h	equ	0xFE2
  7756                           fsr1l	equ	0xFE1
  7757                           indf2	equ	0xFDF
  7758                           postinc2	equ	0xFDE
  7759                           plusw2	equ	0xFDB
  7760                           fsr2h	equ	0xFDA
  7761                           fsr2l	equ	0xFD9
  7762                           status	equ	0xFD8
  7763                           
  7764 ;; *************** function _ee_write *****************
  7765 ;; Defined at:
  7766 ;;		line 26 in file "eeprom.c"
  7767 ;; Parameters:    Size  Location     Type
  7768 ;;  page            1    wreg     unsigned char 
  7769 ;;  addr            1   20[COMRAM] unsigned char 
  7770 ;;  data            1   21[COMRAM] unsigned char 
  7771 ;; Auto vars:     Size  Location     Type
  7772 ;;  page            1   22[COMRAM] unsigned char 
  7773 ;; Return value:  Size  Location     Type
  7774 ;;                  1    wreg      void 
  7775 ;; Registers used:
  7776 ;;		wreg, status,2
  7777 ;; Tracked objects:
  7778 ;;		On entry : 0/0
  7779 ;;		On exit  : 0/0
  7780 ;;		Unchanged: 0/0
  7781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7782 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7783 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7785 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7786 ;;Total ram usage:        3 bytes
  7787 ;; Hardware stack levels used:    1
  7788 ;; Hardware stack levels required when called:    3
  7789 ;; This function calls:
  7790 ;;		Nothing
  7791 ;; This function is called by:
  7792 ;;		_write_defaults
  7793 ;;		_save_first_run
  7794 ;;		_program_field
  7795 ;; This function uses a non-reentrant model
  7796 ;;
  7797                           
  7798                           	psect	text23
  7799  002EF0                     __ptext23:
  7800                           	opt stack 0
  7801  002EF0                     _ee_write:
  7802                           	opt stack 23
  7803                           
  7804                           ;incstack = 0
  7805                           ;ee_write@page stored from wreg
  7806  002EF0  6E17               	movwf	ee_write@page,c
  7807                           
  7808                           ;eeprom.c: 28: GIE = 0;
  7809  002EF2  9EF2               	bcf	intcon,7,c	;volatile
  7810                           
  7811                           ;eeprom.c: 29: EEADRH = page;
  7812  002EF4  C017  FFAA         	movff	ee_write@page,4010	;volatile
  7813                           
  7814                           ;eeprom.c: 30: EEADR = addr;
  7815  002EF8  C015  FFA9         	movff	ee_write@addr,4009	;volatile
  7816                           
  7817                           ;eeprom.c: 31: EEDATA = data;
  7818  002EFC  C016  FFA8         	movff	ee_write@data,4008	;volatile
  7819                           
  7820                           ;eeprom.c: 32: CFGS = 0;
  7821  002F00  9CA6               	bcf	4006,6,c	;volsfr
  7822                           
  7823                           ;eeprom.c: 33: EEPGD = 0;
  7824  002F02  9EA6               	bcf	4006,7,c	;volsfr
  7825                           
  7826                           ;eeprom.c: 34: WREN = 1;
  7827  002F04  84A6               	bsf	4006,2,c	;volsfr
  7828                           
  7829                           ;eeprom.c: 35: GIE = 0;
  7830  002F06  9EF2               	bcf	intcon,7,c	;volatile
  7831                           
  7832                           ;eeprom.c: 36: EECON2 = 0x55;
  7833  002F08  0E55               	movlw	85
  7834  002F0A  6EA7               	movwf	4007,c	;volsfr
  7835                           
  7836                           ;eeprom.c: 37: EECON2 = 0xAA;
  7837  002F0C  0EAA               	movlw	170
  7838  002F0E  6EA7               	movwf	4007,c	;volsfr
  7839                           
  7840                           ;eeprom.c: 38: WR = 1;
  7841  002F10  82A6               	bsf	4006,1,c	;volsfr
  7842                           
  7843                           ;eeprom.c: 39: GIE = 1;
  7844  002F12  8EF2               	bsf	intcon,7,c	;volatile
  7845                           
  7846                           ;eeprom.c: 40: WREN = 0;
  7847  002F14  94A6               	bcf	4006,2,c	;volsfr
  7848  002F16  B2A6               	btfsc	4006,1,c	;volsfr
  7849  002F18  D7FE               	goto	l874
  7850                           
  7851                           ;eeprom.c: 42: PIR2bits.EEIF = 0;
  7852  002F1A  98A1               	bcf	4001,4,c	;volatile
  7853                           
  7854                           ;eeprom.c: 43: GIE = 1;
  7855  002F1C  8EF2               	bsf	intcon,7,c	;volatile
  7856  002F1E  0012               	return		;funcret
  7857  002F20                     __end_of_ee_write:
  7858                           	opt stack 0
  7859                           tblptru	equ	0xFF8
  7860                           tblptrh	equ	0xFF7
  7861                           tblptrl	equ	0xFF6
  7862                           tablat	equ	0xFF5
  7863                           prodh	equ	0xFF4
  7864                           prodl	equ	0xFF3
  7865                           intcon	equ	0xFF2
  7866                           postinc0	equ	0xFEE
  7867                           wreg	equ	0xFE8
  7868                           indf1	equ	0xFE7
  7869                           postdec1	equ	0xFE5
  7870                           plusw1	equ	0xFE3
  7871                           fsr1h	equ	0xFE2
  7872                           fsr1l	equ	0xFE1
  7873                           indf2	equ	0xFDF
  7874                           postinc2	equ	0xFDE
  7875                           plusw2	equ	0xFDB
  7876                           fsr2h	equ	0xFDA
  7877                           fsr2l	equ	0xFD9
  7878                           status	equ	0xFD8
  7879                           
  7880 ;; *************** function ___awmod *****************
  7881 ;; Defined at:
  7882 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  7883 ;; Parameters:    Size  Location     Type
  7884 ;;  dividend        2   20[COMRAM] int 
  7885 ;;  divisor         2   22[COMRAM] int 
  7886 ;; Auto vars:     Size  Location     Type
  7887 ;;  sign            1   25[COMRAM] unsigned char 
  7888 ;;  counter         1   24[COMRAM] unsigned char 
  7889 ;; Return value:  Size  Location     Type
  7890 ;;                  2   20[COMRAM] int 
  7891 ;; Registers used:
  7892 ;;		wreg, status,2, status,0
  7893 ;; Tracked objects:
  7894 ;;		On entry : 0/0
  7895 ;;		On exit  : 0/0
  7896 ;;		Unchanged: 0/0
  7897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7898 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7899 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7901 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7902 ;;Total ram usage:        6 bytes
  7903 ;; Hardware stack levels used:    1
  7904 ;; Hardware stack levels required when called:    3
  7905 ;; This function calls:
  7906 ;;		Nothing
  7907 ;; This function is called by:
  7908 ;;		_program_field
  7909 ;; This function uses a non-reentrant model
  7910 ;;
  7911                           
  7912                           	psect	text24
  7913  002D1C                     __ptext24:
  7914                           	opt stack 0
  7915  002D1C                     ___awmod:
  7916                           	opt stack 22
  7917                           
  7918                           ;incstack = 0
  7919  002D1C  0E00               	movlw	0
  7920  002D1E  6E1A               	movwf	___awmod@sign,c
  7921  002D20  AE16               	btfss	___awmod@dividend+1,7,c
  7922  002D22  D006               	goto	l1909
  7923  002D24  6C15               	negf	___awmod@dividend,c
  7924  002D26  1E16               	comf	___awmod@dividend+1,f,c
  7925  002D28  B0D8               	btfsc	status,0,c
  7926  002D2A  2A16               	incf	___awmod@dividend+1,f,c
  7927  002D2C  0E01               	movlw	1
  7928  002D2E  6E1A               	movwf	___awmod@sign,c
  7929  002D30                     l1909:
  7930  002D30  AE18               	btfss	___awmod@divisor+1,7,c
  7931  002D32  D004               	goto	l1910
  7932  002D34  6C17               	negf	___awmod@divisor,c
  7933  002D36  1E18               	comf	___awmod@divisor+1,f,c
  7934  002D38  B0D8               	btfsc	status,0,c
  7935  002D3A  2A18               	incf	___awmod@divisor+1,f,c
  7936  002D3C                     l1910:
  7937  002D3C  5017               	movf	___awmod@divisor,w,c
  7938  002D3E  1018               	iorwf	___awmod@divisor+1,w,c
  7939  002D40  B4D8               	btfsc	status,2,c
  7940  002D42  D018               	goto	l1917
  7941  002D44  0E01               	movlw	1
  7942  002D46  6E19               	movwf	___awmod@counter,c
  7943  002D48  D004               	goto	l1912
  7944  002D4A  90D8               	bcf	status,0,c
  7945  002D4C  3617               	rlcf	___awmod@divisor,f,c
  7946  002D4E  3618               	rlcf	___awmod@divisor+1,f,c
  7947  002D50  2A19               	incf	___awmod@counter,f,c
  7948  002D52                     l1912:
  7949  002D52  AE18               	btfss	___awmod@divisor+1,7,c
  7950  002D54  D7FA               	goto	l1913
  7951  002D56                     u7050:
  7952  002D56  5017               	movf	___awmod@divisor,w,c
  7953  002D58  5C15               	subwf	___awmod@dividend,w,c
  7954  002D5A  5018               	movf	___awmod@divisor+1,w,c
  7955  002D5C  5816               	subwfb	___awmod@dividend+1,w,c
  7956  002D5E  A0D8               	btfss	status,0,c
  7957  002D60  D004               	goto	l1916
  7958  002D62  5017               	movf	___awmod@divisor,w,c
  7959  002D64  5E15               	subwf	___awmod@dividend,f,c
  7960  002D66  5018               	movf	___awmod@divisor+1,w,c
  7961  002D68  5A16               	subwfb	___awmod@dividend+1,f,c
  7962  002D6A                     l1916:
  7963  002D6A  90D8               	bcf	status,0,c
  7964  002D6C  3218               	rrcf	___awmod@divisor+1,f,c
  7965  002D6E  3217               	rrcf	___awmod@divisor,f,c
  7966  002D70  2E19               	decfsz	___awmod@counter,f,c
  7967  002D72  D7F1               	goto	u7050
  7968  002D74                     l1917:
  7969  002D74  501A               	movf	___awmod@sign,w,c
  7970  002D76  B4D8               	btfsc	status,2,c
  7971  002D78  D004               	goto	l1918
  7972  002D7A  6C15               	negf	___awmod@dividend,c
  7973  002D7C  1E16               	comf	___awmod@dividend+1,f,c
  7974  002D7E  B0D8               	btfsc	status,0,c
  7975  002D80  2A16               	incf	___awmod@dividend+1,f,c
  7976  002D82                     l1918:
  7977  002D82  C015  F015         	movff	___awmod@dividend,?___awmod
  7978  002D86  C016  F016         	movff	___awmod@dividend+1,?___awmod+1
  7979  002D8A  0012               	return	
  7980  002D8C                     __end_of___awmod:
  7981                           	opt stack 0
  7982                           tblptru	equ	0xFF8
  7983                           tblptrh	equ	0xFF7
  7984                           tblptrl	equ	0xFF6
  7985                           tablat	equ	0xFF5
  7986                           prodh	equ	0xFF4
  7987                           prodl	equ	0xFF3
  7988                           intcon	equ	0xFF2
  7989                           postinc0	equ	0xFEE
  7990                           wreg	equ	0xFE8
  7991                           indf1	equ	0xFE7
  7992                           postdec1	equ	0xFE5
  7993                           plusw1	equ	0xFE3
  7994                           fsr1h	equ	0xFE2
  7995                           fsr1l	equ	0xFE1
  7996                           indf2	equ	0xFDF
  7997                           postinc2	equ	0xFDE
  7998                           plusw2	equ	0xFDB
  7999                           fsr2h	equ	0xFDA
  8000                           fsr2l	equ	0xFD9
  8001                           status	equ	0xFD8
  8002                           
  8003 ;; *************** function ___awdiv *****************
  8004 ;; Defined at:
  8005 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  8006 ;; Parameters:    Size  Location     Type
  8007 ;;  dividend        2   20[COMRAM] int 
  8008 ;;  divisor         2   22[COMRAM] int 
  8009 ;; Auto vars:     Size  Location     Type
  8010 ;;  quotient        2   26[COMRAM] int 
  8011 ;;  sign            1   25[COMRAM] unsigned char 
  8012 ;;  counter         1   24[COMRAM] unsigned char 
  8013 ;; Return value:  Size  Location     Type
  8014 ;;                  2   20[COMRAM] int 
  8015 ;; Registers used:
  8016 ;;		wreg, status,2, status,0
  8017 ;; Tracked objects:
  8018 ;;		On entry : 0/0
  8019 ;;		On exit  : 0/0
  8020 ;;		Unchanged: 0/0
  8021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8022 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8023 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8025 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8026 ;;Total ram usage:        8 bytes
  8027 ;; Hardware stack levels used:    1
  8028 ;; Hardware stack levels required when called:    3
  8029 ;; This function calls:
  8030 ;;		Nothing
  8031 ;; This function is called by:
  8032 ;;		_program_field
  8033 ;; This function uses a non-reentrant model
  8034 ;;
  8035                           
  8036                           	psect	text25
  8037  002C28                     __ptext25:
  8038                           	opt stack 0
  8039  002C28                     ___awdiv:
  8040                           	opt stack 22
  8041                           
  8042                           ;incstack = 0
  8043  002C28  0E00               	movlw	0
  8044  002C2A  6E1A               	movwf	___awdiv@sign,c
  8045  002C2C  AE18               	btfss	___awdiv@divisor+1,7,c
  8046  002C2E  D006               	goto	l1896
  8047  002C30  6C17               	negf	___awdiv@divisor,c
  8048  002C32  1E18               	comf	___awdiv@divisor+1,f,c
  8049  002C34  B0D8               	btfsc	status,0,c
  8050  002C36  2A18               	incf	___awdiv@divisor+1,f,c
  8051  002C38  0E01               	movlw	1
  8052  002C3A  6E1A               	movwf	___awdiv@sign,c
  8053  002C3C                     l1896:
  8054  002C3C  AE16               	btfss	___awdiv@dividend+1,7,c
  8055  002C3E  D006               	goto	l1897
  8056  002C40  6C15               	negf	___awdiv@dividend,c
  8057  002C42  1E16               	comf	___awdiv@dividend+1,f,c
  8058  002C44  B0D8               	btfsc	status,0,c
  8059  002C46  2A16               	incf	___awdiv@dividend+1,f,c
  8060  002C48  0E01               	movlw	1
  8061  002C4A  1A1A               	xorwf	___awdiv@sign,f,c
  8062  002C4C                     l1897:
  8063  002C4C  0E00               	movlw	0
  8064  002C4E  6E1C               	movwf	___awdiv@quotient+1,c
  8065  002C50  0E00               	movlw	0
  8066  002C52  6E1B               	movwf	___awdiv@quotient,c
  8067  002C54  5017               	movf	___awdiv@divisor,w,c
  8068  002C56  1018               	iorwf	___awdiv@divisor+1,w,c
  8069  002C58  B4D8               	btfsc	status,2,c
  8070  002C5A  D01C               	goto	l1904
  8071  002C5C  0E01               	movlw	1
  8072  002C5E  6E19               	movwf	___awdiv@counter,c
  8073  002C60  D004               	goto	l1899
  8074  002C62  90D8               	bcf	status,0,c
  8075  002C64  3617               	rlcf	___awdiv@divisor,f,c
  8076  002C66  3618               	rlcf	___awdiv@divisor+1,f,c
  8077  002C68  2A19               	incf	___awdiv@counter,f,c
  8078  002C6A                     l1899:
  8079  002C6A  AE18               	btfss	___awdiv@divisor+1,7,c
  8080  002C6C  D7FA               	goto	l1900
  8081  002C6E                     u6990:
  8082  002C6E  90D8               	bcf	status,0,c
  8083  002C70  361B               	rlcf	___awdiv@quotient,f,c
  8084  002C72  361C               	rlcf	___awdiv@quotient+1,f,c
  8085  002C74  5017               	movf	___awdiv@divisor,w,c
  8086  002C76  5C15               	subwf	___awdiv@dividend,w,c
  8087  002C78  5018               	movf	___awdiv@divisor+1,w,c
  8088  002C7A  5816               	subwfb	___awdiv@dividend+1,w,c
  8089  002C7C  A0D8               	btfss	status,0,c
  8090  002C7E  D005               	goto	l1903
  8091  002C80  5017               	movf	___awdiv@divisor,w,c
  8092  002C82  5E15               	subwf	___awdiv@dividend,f,c
  8093  002C84  5018               	movf	___awdiv@divisor+1,w,c
  8094  002C86  5A16               	subwfb	___awdiv@dividend+1,f,c
  8095  002C88  801B               	bsf	___awdiv@quotient,0,c
  8096  002C8A                     l1903:
  8097  002C8A  90D8               	bcf	status,0,c
  8098  002C8C  3218               	rrcf	___awdiv@divisor+1,f,c
  8099  002C8E  3217               	rrcf	___awdiv@divisor,f,c
  8100  002C90  2E19               	decfsz	___awdiv@counter,f,c
  8101  002C92  D7ED               	goto	u6990
  8102  002C94                     l1904:
  8103  002C94  501A               	movf	___awdiv@sign,w,c
  8104  002C96  B4D8               	btfsc	status,2,c
  8105  002C98  D004               	goto	l1905
  8106  002C9A  6C1B               	negf	___awdiv@quotient,c
  8107  002C9C  1E1C               	comf	___awdiv@quotient+1,f,c
  8108  002C9E  B0D8               	btfsc	status,0,c
  8109  002CA0  2A1C               	incf	___awdiv@quotient+1,f,c
  8110  002CA2                     l1905:
  8111  002CA2  C01B  F015         	movff	___awdiv@quotient,?___awdiv
  8112  002CA6  C01C  F016         	movff	___awdiv@quotient+1,?___awdiv+1
  8113  002CAA  0012               	return	
  8114  002CAC                     __end_of___awdiv:
  8115                           	opt stack 0
  8116                           tblptru	equ	0xFF8
  8117                           tblptrh	equ	0xFF7
  8118                           tblptrl	equ	0xFF6
  8119                           tablat	equ	0xFF5
  8120                           prodh	equ	0xFF4
  8121                           prodl	equ	0xFF3
  8122                           intcon	equ	0xFF2
  8123                           postinc0	equ	0xFEE
  8124                           wreg	equ	0xFE8
  8125                           indf1	equ	0xFE7
  8126                           postdec1	equ	0xFE5
  8127                           plusw1	equ	0xFE3
  8128                           fsr1h	equ	0xFE2
  8129                           fsr1l	equ	0xFE1
  8130                           indf2	equ	0xFDF
  8131                           postinc2	equ	0xFDE
  8132                           plusw2	equ	0xFDB
  8133                           fsr2h	equ	0xFDA
  8134                           fsr2l	equ	0xFD9
  8135                           status	equ	0xFD8
  8136                           
  8137 ;; *************** function _parse_cmgl *****************
  8138 ;; Defined at:
  8139 ;;		line 224 in file "C:/Users/Scott/InstantCare/Engineering/7102-10 - 906GN-SmokeGSMHub/Firmware/ic_hubCode_jvolk/test_
      +buttonmenu_wSMS.X/sms.c"
  8140 ;; Parameters:    Size  Location     Type
  8141 ;;		None
  8142 ;; Auto vars:     Size  Location     Type
  8143 ;;  i               1   27[COMRAM] unsigned char 
  8144 ;;  rec_msg         5   22[COMRAM] unsigned char [5]
  8145 ;; Return value:  Size  Location     Type
  8146 ;;                  1    wreg      unsigned char 
  8147 ;; Registers used:
  8148 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8149 ;; Tracked objects:
  8150 ;;		On entry : 0/0
  8151 ;;		On exit  : 0/0
  8152 ;;		Unchanged: 0/0
  8153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8155 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8156 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8157 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8158 ;;Total ram usage:        8 bytes
  8159 ;; Hardware stack levels used:    1
  8160 ;; Hardware stack levels required when called:    3
  8161 ;; This function calls:
  8162 ;;		Nothing
  8163 ;; This function is called by:
  8164 ;;		_read_sms
  8165 ;; This function uses a non-reentrant model
  8166 ;;
  8167                           
  8168                           	psect	text26
  8169  002A3E                     __ptext26:
  8170                           	opt stack 0
  8171  002A3E                     _parse_cmgl:
  8172                           	opt stack 24
  8173                           
  8174                           ;sms.c: 226: uint8_t rec_msg[] = "REC ";
  8175                           
  8176                           ;incstack = 0
  8177  002A3E  EE21  F0E4         	lfsr	2,parse_cmgl@F6870
  8178  002A42  EE10  F017         	lfsr	1,parse_cmgl@rec_msg
  8179  002A46  0E04               	movlw	4
  8180  002A48                     u8241:
  8181  002A48  CFDB FFE3          	movff	plusw2,plusw1
  8182  002A4C  06E8               	decf	wreg,f,c
  8183  002A4E  E2FC               	bc	u8241
  8184                           
  8185                           ;sms.c: 227: for (uint8_t i = 0; i < sizeof(mdRxBuf); i++)
  8186  002A50  0E00               	movlw	0
  8187  002A52  6E1C               	movwf	parse_cmgl@i,c
  8188  002A54  0E9F               	movlw	159
  8189  002A56  641C               	cpfsgt	parse_cmgl@i,c
  8190  002A58  D001               	goto	l1443
  8191  002A5A  D04F               	goto	u8300
  8192  002A5C                     l1443:
  8193                           
  8194                           ;sms.c: 228: {
  8195                           ;sms.c: 229: if (mdRxBuf[i] == rec_msg[0] && mdRxBuf[(uint8_t)(i + 1)] == rec_msg[1] && 
      +                          mdRxBuf[(uint8_t)(i + 2)] == rec_msg[2] && mdRxBuf[(uint8_t)(i + 3)] == rec_msg[3])
  8196  002A5C  501C               	movf	parse_cmgl@i,w,c
  8197  002A5E  0D01               	mullw	1
  8198  002A60  0E00               	movlw	low _mdRxBuf
  8199  002A62  24F3               	addwf	prodl,w,c
  8200  002A64  6ED9               	movwf	fsr2l,c
  8201  002A66  0E02               	movlw	high _mdRxBuf
  8202  002A68  20F4               	addwfc	prodh,w,c
  8203  002A6A  6EDA               	movwf	fsr2h,c
  8204  002A6C  5017               	movf	parse_cmgl@rec_msg,w,c
  8205  002A6E  18DE               	xorwf	postinc2,w,c
  8206  002A70  A4D8               	btfss	status,2,c
  8207  002A72  D041               	goto	l1445
  8208  002A74  C01C  F015         	movff	parse_cmgl@i,??_parse_cmgl
  8209  002A78  0E01               	movlw	1
  8210  002A7A  2615               	addwf	??_parse_cmgl,f,c
  8211  002A7C  5015               	movf	??_parse_cmgl,w,c
  8212  002A7E  0D01               	mullw	1
  8213  002A80  0E00               	movlw	low _mdRxBuf
  8214  002A82  24F3               	addwf	prodl,w,c
  8215  002A84  6ED9               	movwf	fsr2l,c
  8216  002A86  0E02               	movlw	high _mdRxBuf
  8217  002A88  20F4               	addwfc	prodh,w,c
  8218  002A8A  6EDA               	movwf	fsr2h,c
  8219  002A8C  5018               	movf	parse_cmgl@rec_msg+1,w,c
  8220  002A8E  18DE               	xorwf	postinc2,w,c
  8221  002A90  A4D8               	btfss	status,2,c
  8222  002A92  D031               	goto	l1445
  8223  002A94  C01C  F015         	movff	parse_cmgl@i,??_parse_cmgl
  8224  002A98  0E02               	movlw	2
  8225  002A9A  2615               	addwf	??_parse_cmgl,f,c
  8226  002A9C  5015               	movf	??_parse_cmgl,w,c
  8227  002A9E  0D01               	mullw	1
  8228  002AA0  0E00               	movlw	low _mdRxBuf
  8229  002AA2  24F3               	addwf	prodl,w,c
  8230  002AA4  6ED9               	movwf	fsr2l,c
  8231  002AA6  0E02               	movlw	high _mdRxBuf
  8232  002AA8  20F4               	addwfc	prodh,w,c
  8233  002AAA  6EDA               	movwf	fsr2h,c
  8234  002AAC  5019               	movf	parse_cmgl@rec_msg+2,w,c
  8235  002AAE  18DE               	xorwf	postinc2,w,c
  8236  002AB0  A4D8               	btfss	status,2,c
  8237  002AB2  D021               	goto	l1445
  8238  002AB4  C01C  F015         	movff	parse_cmgl@i,??_parse_cmgl
  8239  002AB8  0E03               	movlw	3
  8240  002ABA  2615               	addwf	??_parse_cmgl,f,c
  8241  002ABC  5015               	movf	??_parse_cmgl,w,c
  8242  002ABE  0D01               	mullw	1
  8243  002AC0  0E00               	movlw	low _mdRxBuf
  8244  002AC2  24F3               	addwf	prodl,w,c
  8245  002AC4  6ED9               	movwf	fsr2l,c
  8246  002AC6  0E02               	movlw	high _mdRxBuf
  8247  002AC8  20F4               	addwfc	prodh,w,c
  8248  002ACA  6EDA               	movwf	fsr2h,c
  8249  002ACC  501A               	movf	parse_cmgl@rec_msg+3,w,c
  8250  002ACE  18DE               	xorwf	postinc2,w,c
  8251  002AD0  A4D8               	btfss	status,2,c
  8252  002AD2  D011               	goto	l1445
  8253                           
  8254                           ;sms.c: 231: {
  8255                           ;sms.c: 232: smsMsgIndex = mdRxBuf[(uint8_t)(i - 3)];
  8256  002AD4  C01C  F015         	movff	parse_cmgl@i,??_parse_cmgl
  8257  002AD8  0EFD               	movlw	253
  8258  002ADA  2615               	addwf	??_parse_cmgl,f,c
  8259  002ADC  5015               	movf	??_parse_cmgl,w,c
  8260  002ADE  0D01               	mullw	1
  8261  002AE0  0E00               	movlw	low _mdRxBuf
  8262  002AE2  24F3               	addwf	prodl,w,c
  8263  002AE4  6ED9               	movwf	fsr2l,c
  8264  002AE6  0E02               	movlw	high _mdRxBuf
  8265  002AE8  20F4               	addwfc	prodh,w,c
  8266  002AEA  6EDA               	movwf	fsr2h,c
  8267  002AEC  50DF               	movf	indf2,w,c
  8268  002AEE  0100               	movlb	0	; () banked
  8269  002AF0  6FF7               	movwf	_smsMsgIndex& (0+255),b
  8270                           
  8271                           ; BSR set to: 0
  8272                           ;sms.c: 233: return 1;
  8273  002AF2  0E01               	movlw	1
  8274                           
  8275                           ; BSR set to: 0
  8276  002AF4  0012               	return	
  8277  002AF6                     l1445:
  8278                           
  8279                           ;sms.c: 235: else
  8280                           ;sms.c: 236: return 4;
  8281                           
  8282                           ; BSR set to: 0
  8283  002AF6  0E04               	movlw	4
  8284  002AF8  0012               	return	
  8285  002AFA                     u8300:
  8286                           
  8287                           ;sms.c: 237: }
  8288                           ;sms.c: 238: return 4;
  8289  002AFA  0E04               	movlw	4
  8290  002AFC  0012               	return	
  8291  002AFE                     __end_of_parse_cmgl:
  8292                           	opt stack 0
  8293                           tblptru	equ	0xFF8
  8294                           tblptrh	equ	0xFF7
  8295                           tblptrl	equ	0xFF6
  8296                           tablat	equ	0xFF5
  8297                           prodh	equ	0xFF4
  8298                           prodl	equ	0xFF3
  8299                           intcon	equ	0xFF2
  8300                           postinc0	equ	0xFEE
  8301                           wreg	equ	0xFE8
  8302                           indf1	equ	0xFE7
  8303                           postdec1	equ	0xFE5
  8304                           plusw1	equ	0xFE3
  8305                           fsr1h	equ	0xFE2
  8306                           fsr1l	equ	0xFE1
  8307                           indf2	equ	0xFDF
  8308                           postinc2	equ	0xFDE
  8309                           plusw2	equ	0xFDB
  8310                           fsr2h	equ	0xFDA
  8311                           fsr2l	equ	0xFD9
  8312                           status	equ	0xFD8
  8313                           
  8314 ;; *************** function _md_uart_write_str_ok *****************
  8315 ;; Defined at:
  8316 ;;		line 164 in file "uart.c"
  8317 ;; Parameters:    Size  Location     Type
  8318 ;;  data            2   21[COMRAM] PTR unsigned char 
  8319 ;;		 -> sms_buf(40), ph_num(9), send_sms_ok@msgIndex(3), send_sms_ok@cmgs(9), 
  8320 ;;		 -> RAM(3895), read_sms@cmgd(9), read_sms@msgIndex(3), read_sms@cmgr(9), 
  8321 ;;		 -> read_sms@cmgl(16), start_sms_ok@cnmi(14), start_sms_ok@cpms(25), start_sms_ok@cmgf(12), 
  8322 ;;		 -> startup_ok@csq(9), startup_ok@cereg(12), startup_ok@creg(11), startup_ok@cpin(11), 
  8323 ;;		 -> startup_ok@queryVersion(10), startup_ok@ledpattern(12), startup_ok@ledCfg(16), startup_ok@baud(16), 
  8324 ;;		 -> startup_ok@cmee(12), startup_ok@ate(7), startup_ok@at(5), 
  8325 ;;  len1            1   23[COMRAM] unsigned char 
  8326 ;;  wantOk          1   24[COMRAM] unsigned char 
  8327 ;;  waitToSendMo    1   25[COMRAM] unsigned char 
  8328 ;; Auto vars:     Size  Location     Type
  8329 ;;  index           1   27[COMRAM] unsigned char 
  8330 ;;  pos             1   26[COMRAM] unsigned char 
  8331 ;; Return value:  Size  Location     Type
  8332 ;;                  1    wreg      unsigned char 
  8333 ;; Registers used:
  8334 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8335 ;; Tracked objects:
  8336 ;;		On entry : 0/0
  8337 ;;		On exit  : 0/0
  8338 ;;		Unchanged: 0/0
  8339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8340 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8341 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8343 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8344 ;;Total ram usage:        7 bytes
  8345 ;; Hardware stack levels used:    1
  8346 ;; Hardware stack levels required when called:    4
  8347 ;; This function calls:
  8348 ;;		_disable_tmr5
  8349 ;;		_enable_md_rxint
  8350 ;;		_md_uart_send
  8351 ;;		_reload_tmr5_pt25s
  8352 ;; This function is called by:
  8353 ;;		_startup_ok
  8354 ;;		_start_sms_ok
  8355 ;;		_read_sms
  8356 ;;		_send_sms_ok
  8357 ;; This function uses a non-reentrant model
  8358 ;;
  8359                           
  8360                           	psect	text27
  8361  0023A6                     __ptext27:
  8362                           	opt stack 0
  8363  0023A6                     _md_uart_write_str_ok:
  8364                           	opt stack 23
  8365                           
  8366                           ;uart.c: 167: if (!waiting_uart && !waiting_carrot)
  8367                           
  8368                           ;incstack = 0
  8369  0023A6  5035               	movf	_waiting_uart,w,c
  8370  0023A8  A4D8               	btfss	status,2,c
  8371  0023AA  D04E               	goto	u6470
  8372  0023AC  5034               	movf	_waiting_carrot,w,c
  8373  0023AE  A4D8               	btfss	status,2,c
  8374  0023B0  D04B               	goto	u6470
  8375                           
  8376                           ;uart.c: 168: {
  8377                           ;uart.c: 169: uint8_t index = 0, pos = 0;
  8378  0023B2  0E00               	movlw	0
  8379  0023B4  6E1C               	movwf	md_uart_write_str_ok@index,c
  8380  0023B6  0E00               	movlw	0
  8381  0023B8  6E1B               	movwf	md_uart_write_str_ok@pos,c
  8382                           
  8383                           ;uart.c: 170: CREN1 = 0;
  8384  0023BA  98AB               	bcf	4011,4,c	;volatile
  8385                           
  8386                           ;uart.c: 171: tmr5_cnt = 0;
  8387  0023BC  0E00               	movlw	0
  8388  0023BE  6E3E               	movwf	_tmr5_cnt,c
  8389                           
  8390                           ;uart.c: 172: receivedOK = 0;
  8391  0023C0  0E00               	movlw	0
  8392  0023C2  6E38               	movwf	_receivedOK,c
  8393                           
  8394                           ;uart.c: 173: receivedERR = 0;
  8395  0023C4  0E00               	movlw	0
  8396  0023C6  6E37               	movwf	_receivedERR,c
  8397                           
  8398                           ;uart.c: 174: timedOut = 0;
  8399  0023C8  0E00               	movlw	0
  8400  0023CA  6E36               	movwf	_timedOut,c
  8401                           
  8402                           ;uart.c: 175: while (numUartRetries-- > 0 && !receivedOK)
  8403  0023CC  D036               	goto	l754
  8404  0023CE                     
  8405                           ;uart.c: 176: {
  8406                           ;uart.c: 177: timedOut = 0;
  8407  0023CE  0E00               	movlw	0
  8408  0023D0  6E36               	movwf	_timedOut,c
  8409                           
  8410                           ;uart.c: 178: for (index = 0; index < len1; index++)
  8411  0023D2  0E00               	movlw	0
  8412  0023D4  6E1C               	movwf	md_uart_write_str_ok@index,c
  8413  0023D6  D01A               	goto	l749
  8414  0023D8                     
  8415                           ;uart.c: 179: {
  8416                           ;uart.c: 180: referenceBuf[index] = *data;
  8417  0023D8  C016  FFD9         	movff	md_uart_write_str_ok@data,fsr2l
  8418  0023DC  C017  FFDA         	movff	md_uart_write_str_ok@data+1,fsr2h
  8419  0023E0  501C               	movf	md_uart_write_str_ok@index,w,c
  8420  0023E2  0D01               	mullw	1
  8421  0023E4  0E64               	movlw	low _referenceBuf
  8422  0023E6  24F3               	addwf	prodl,w,c
  8423  0023E8  6EE1               	movwf	fsr1l,c
  8424  0023EA  0E03               	movlw	high _referenceBuf
  8425  0023EC  20F4               	addwfc	prodh,w,c
  8426  0023EE  6EE2               	movwf	fsr1h,c
  8427  0023F0  CFDF FFE7          	movff	indf2,indf1
  8428                           
  8429                           ;uart.c: 181: currentChar = *data;
  8430  0023F4  C016  FFD9         	movff	md_uart_write_str_ok@data,fsr2l
  8431  0023F8  C017  FFDA         	movff	md_uart_write_str_ok@data+1,fsr2h
  8432  0023FC  50DF               	movf	indf2,w,c
  8433  0023FE  6E3D               	movwf	_currentChar,c
  8434                           
  8435                           ;uart.c: 182: md_uart_send(currentChar);
  8436  002400  503D               	movf	_currentChar,w,c
  8437  002402  EC49  F018         	call	_md_uart_send
  8438                           
  8439                           ;uart.c: 183: data++;
  8440  002406  4A16               	infsnz	md_uart_write_str_ok@data,f,c
  8441  002408  2A17               	incf	md_uart_write_str_ok@data+1,f,c
  8442  00240A  2A1C               	incf	md_uart_write_str_ok@index,f,c
  8443  00240C                     l749:
  8444  00240C  5018               	movf	md_uart_write_str_ok@len1,w,c
  8445  00240E  5C1C               	subwf	md_uart_write_str_ok@index,w,c
  8446  002410  A0D8               	btfss	status,0,c
  8447  002412  D7E2               	goto	l750
  8448                           
  8449                           ;uart.c: 184: }
  8450                           ;uart.c: 185: if (!waitToSendMoreData && wantOk)
  8451  002414  501A               	movf	md_uart_write_str_ok@waitToSendMoreData,w,c
  8452  002416  A4D8               	btfss	status,2,c
  8453  002418  D00B               	goto	l752
  8454  00241A  5019               	movf	md_uart_write_str_ok@wantOk,w,c
  8455  00241C  B4D8               	btfsc	status,2,c
  8456  00241E  D008               	goto	l752
  8457                           
  8458                           ;uart.c: 186: {
  8459                           ;uart.c: 187: CREN1 = 1;
  8460  002420  88AB               	bsf	4011,4,c	;volatile
  8461                           
  8462                           ;uart.c: 188: enable_md_rxint();
  8463  002422  EC4F  F018         	call	_enable_md_rxint	;wreg free
  8464                           
  8465                           ;uart.c: 189: reload_tmr5_pt25s();
  8466  002426  ECF4  F017         	call	_reload_tmr5_pt25s	;wreg free
  8467                           
  8468                           ;uart.c: 190: waiting_uart = 1;
  8469  00242A  0E01               	movlw	1
  8470  00242C  6E35               	movwf	_waiting_uart,c
  8471                           
  8472                           ;uart.c: 191: }
  8473  00242E  D005               	goto	l754
  8474  002430                     l752:
  8475                           
  8476                           ;uart.c: 192: else if (waitToSendMoreData)
  8477  002430  501A               	movf	md_uart_write_str_ok@waitToSendMoreData,w,c
  8478  002432  B4D8               	btfsc	status,2,c
  8479  002434  D002               	goto	l754
  8480                           
  8481                           ;uart.c: 193: waiting_carrot = 1;
  8482  002436  0E01               	movlw	1
  8483  002438  6E34               	movwf	_waiting_carrot,c
  8484  00243A                     l754:
  8485  00243A  064A               	decf	_numUartRetries,f,c
  8486  00243C  284A               	incf	_numUartRetries,w,c
  8487  00243E  B4D8               	btfsc	status,2,c
  8488  002440  D003               	goto	u6470
  8489  002442  5038               	movf	_receivedOK,w,c
  8490  002444  B4D8               	btfsc	status,2,c
  8491  002446  D7C3               	goto	l748
  8492  002448                     u6470:
  8493                           
  8494                           ;uart.c: 194: }
  8495                           ;uart.c: 195: }
  8496                           ;uart.c: 197: if (waitToSendMoreData && waiting_carrot)
  8497  002448  501A               	movf	md_uart_write_str_ok@waitToSendMoreData,w,c
  8498  00244A  B4D8               	btfsc	status,2,c
  8499  00244C  D014               	goto	l764
  8500  00244E  5034               	movf	_waiting_carrot,w,c
  8501  002450  B4D8               	btfsc	status,2,c
  8502  002452  D011               	goto	l764
  8503                           
  8504                           ;uart.c: 198: {
  8505                           ;uart.c: 199: CREN1 = 1;
  8506  002454  88AB               	bsf	4011,4,c	;volatile
  8507  002456  AA9E               	btfss	3998,5,c	;volatile
  8508  002458  D7FE               	goto	l760
  8509                           
  8510                           ;uart.c: 201: currentChar = RC1REG;
  8511  00245A  CFAE F03D          	movff	4014,_currentChar	;volatile
  8512                           
  8513                           ;uart.c: 202: if (currentChar == '<')
  8514  00245E  0E3C               	movlw	60
  8515  002460  183D               	xorwf	_currentChar,w,c
  8516  002462  A4D8               	btfss	status,2,c
  8517  002464  D004               	goto	l762
  8518                           
  8519                           ;uart.c: 203: {
  8520                           ;uart.c: 204: waiting_carrot = 0;
  8521  002466  0E00               	movlw	0
  8522  002468  6E34               	movwf	_waiting_carrot,c
  8523                           
  8524                           ;uart.c: 205: return 1;
  8525  00246A  0E01               	movlw	1
  8526  00246C  0012               	return	
  8527  00246E                     l762:
  8528                           
  8529                           ;uart.c: 207: else
  8530                           ;uart.c: 208: {
  8531                           ;uart.c: 209: waiting_carrot = 0;
  8532  00246E  0E00               	movlw	0
  8533  002470  6E34               	movwf	_waiting_carrot,c
  8534                           
  8535                           ;uart.c: 210: return 4;
  8536  002472  0E04               	movlw	4
  8537  002474  0012               	return	
  8538  002476                     l764:
  8539                           
  8540                           ;uart.c: 211: }
  8541                           ;uart.c: 212: }
  8542                           ;uart.c: 213: if (wantOk && waiting_uart)
  8543  002476  5019               	movf	md_uart_write_str_ok@wantOk,w,c
  8544  002478  B4D8               	btfsc	status,2,c
  8545  00247A  D023               	goto	l765
  8546  00247C  5035               	movf	_waiting_uart,w,c
  8547  00247E  B4D8               	btfsc	status,2,c
  8548  002480  D020               	goto	l765
  8549                           
  8550                           ;uart.c: 214: {
  8551                           ;uart.c: 215: if (receivedOK)
  8552  002482  5038               	movf	_receivedOK,w,c
  8553  002484  B4D8               	btfsc	status,2,c
  8554  002486  D007               	goto	l766
  8555                           
  8556                           ;uart.c: 216: {
  8557                           ;uart.c: 217: disable_tmr5();
  8558  002488  EC55  F018         	call	_disable_tmr5	;wreg free
  8559                           
  8560                           ;uart.c: 218: CREN1 = 0;
  8561  00248C  98AB               	bcf	4011,4,c	;volatile
  8562                           
  8563                           ;uart.c: 219: waiting_uart = 0;
  8564  00248E  0E00               	movlw	0
  8565  002490  6E35               	movwf	_waiting_uart,c
  8566                           
  8567                           ;uart.c: 220: return 1;
  8568  002492  0E01               	movlw	1
  8569  002494  0012               	return	
  8570  002496                     l766:
  8571                           
  8572                           ;uart.c: 222: else if (receivedERR)
  8573  002496  5037               	movf	_receivedERR,w,c
  8574  002498  B4D8               	btfsc	status,2,c
  8575  00249A  D007               	goto	l768
  8576                           
  8577                           ;uart.c: 223: {
  8578                           ;uart.c: 224: disable_tmr5();
  8579  00249C  EC55  F018         	call	_disable_tmr5	;wreg free
  8580                           
  8581                           ;uart.c: 225: CREN1 = 0;
  8582  0024A0  98AB               	bcf	4011,4,c	;volatile
  8583                           
  8584                           ;uart.c: 226: waiting_uart = 0;
  8585  0024A2  0E00               	movlw	0
  8586  0024A4  6E35               	movwf	_waiting_uart,c
  8587                           
  8588                           ;uart.c: 227: return 4;
  8589  0024A6  0E04               	movlw	4
  8590  0024A8  0012               	return	
  8591  0024AA                     l768:
  8592                           
  8593                           ;uart.c: 229: else if (timedOut)
  8594  0024AA  5036               	movf	_timedOut,w,c
  8595  0024AC  B4D8               	btfsc	status,2,c
  8596  0024AE  D007               	goto	l770
  8597                           
  8598                           ;uart.c: 230: {
  8599                           ;uart.c: 231: disable_tmr5();
  8600  0024B0  EC55  F018         	call	_disable_tmr5	;wreg free
  8601                           
  8602                           ;uart.c: 232: CREN1 = 0;
  8603  0024B4  98AB               	bcf	4011,4,c	;volatile
  8604                           
  8605                           ;uart.c: 233: waiting_uart = 0;
  8606  0024B6  0E00               	movlw	0
  8607  0024B8  6E35               	movwf	_waiting_uart,c
  8608                           
  8609                           ;uart.c: 234: return 5;
  8610  0024BA  0E05               	movlw	5
  8611  0024BC  0012               	return	
  8612  0024BE                     l770:
  8613                           
  8614                           ;uart.c: 236: else
  8615                           ;uart.c: 237: return 3;
  8616  0024BE  0E03               	movlw	3
  8617  0024C0  0012               	return	
  8618  0024C2                     l765:
  8619                           
  8620                           ;uart.c: 239: else if (!wantOk)
  8621  0024C2  5019               	movf	md_uart_write_str_ok@wantOk,w,c
  8622  0024C4  A4D8               	btfss	status,2,c
  8623  0024C6  D004               	goto	l773
  8624                           
  8625                           ;uart.c: 240: {
  8626                           ;uart.c: 241: receivedOK = 1;
  8627  0024C8  0E01               	movlw	1
  8628  0024CA  6E38               	movwf	_receivedOK,c
  8629                           
  8630                           ;uart.c: 242: return 1;
  8631  0024CC  0E01               	movlw	1
  8632  0024CE  0012               	return	
  8633  0024D0                     l773:
  8634                           
  8635                           ;uart.c: 243: }
  8636                           ;uart.c: 256: return 4;
  8637  0024D0  0E04               	movlw	4
  8638  0024D2  0012               	return	
  8639  0024D4                     __end_of_md_uart_write_str_ok:
  8640                           	opt stack 0
  8641                           tblptru	equ	0xFF8
  8642                           tblptrh	equ	0xFF7
  8643                           tblptrl	equ	0xFF6
  8644                           tablat	equ	0xFF5
  8645                           prodh	equ	0xFF4
  8646                           prodl	equ	0xFF3
  8647                           intcon	equ	0xFF2
  8648                           postinc0	equ	0xFEE
  8649                           wreg	equ	0xFE8
  8650                           indf1	equ	0xFE7
  8651                           postdec1	equ	0xFE5
  8652                           plusw1	equ	0xFE3
  8653                           fsr1h	equ	0xFE2
  8654                           fsr1l	equ	0xFE1
  8655                           indf2	equ	0xFDF
  8656                           postinc2	equ	0xFDE
  8657                           plusw2	equ	0xFDB
  8658                           fsr2h	equ	0xFDA
  8659                           fsr2l	equ	0xFD9
  8660                           status	equ	0xFD8
  8661                           
  8662 ;; *************** function _reload_tmr5_pt25s *****************
  8663 ;; Defined at:
  8664 ;;		line 67 in file "io.c"
  8665 ;; Parameters:    Size  Location     Type
  8666 ;;		None
  8667 ;; Auto vars:     Size  Location     Type
  8668 ;;		None
  8669 ;; Return value:  Size  Location     Type
  8670 ;;                  1    wreg      void 
  8671 ;; Registers used:
  8672 ;;		wreg, status,2
  8673 ;; Tracked objects:
  8674 ;;		On entry : 0/0
  8675 ;;		On exit  : 0/0
  8676 ;;		Unchanged: 0/0
  8677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8681 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8682 ;;Total ram usage:        0 bytes
  8683 ;; Hardware stack levels used:    1
  8684 ;; Hardware stack levels required when called:    3
  8685 ;; This function calls:
  8686 ;;		Nothing
  8687 ;; This function is called by:
  8688 ;;		_start_md_boot_timer
  8689 ;;		_md_uart_write_str_ok
  8690 ;; This function uses a non-reentrant model
  8691 ;;
  8692                           
  8693                           	psect	text28
  8694  002FE8                     __ptext28:
  8695                           	opt stack 0
  8696  002FE8                     _reload_tmr5_pt25s:
  8697                           	opt stack 23
  8698                           
  8699                           ;io.c: 69: INTCONbits.GIE = 0;
  8700                           
  8701                           ;incstack = 0
  8702  002FE8  9EF2               	bcf	intcon,7,c	;volatile
  8703                           
  8704                           ;io.c: 70: T5CON = 0b00110101;
  8705  002FEA  0E35               	movlw	53
  8706  002FEC  010F               	movlb	15	; () banked
  8707  002FEE  6F4E               	movwf	78,b	;volatile
  8708                           
  8709                           ; BSR set to: 15
  8710                           ;io.c: 72: PIE5bits.TMR5IE = 1;
  8711  002FF0  827D               	bsf	3965,1,c	;volatile
  8712                           
  8713                           ; BSR set to: 15
  8714                           ;io.c: 73: INTCONbits.PEIE = 1;
  8715  002FF2  8CF2               	bsf	intcon,6,c	;volatile
  8716                           
  8717                           ; BSR set to: 15
  8718                           ;io.c: 74: PIR5bits.TMR5IF = 0;
  8719  002FF4  927E               	bcf	3966,1,c	;volatile
  8720                           
  8721                           ;io.c: 75: TMR5H = 0x0B;
  8722  002FF6  0E0B               	movlw	11
  8723  002FF8  6F50               	movwf	80,b	;volatile
  8724                           
  8725                           ;io.c: 76: TMR5L = 0x45;
  8726  002FFA  0E45               	movlw	69
  8727  002FFC  6F4F               	movwf	79,b	;volatile
  8728                           
  8729                           ; BSR set to: 15
  8730                           ;io.c: 77: INTCONbits.GIE = 1;
  8731  002FFE  8EF2               	bsf	intcon,7,c	;volatile
  8732                           
  8733                           ; BSR set to: 15
  8734  003000  0012               	return		;funcret
  8735  003002                     __end_of_reload_tmr5_pt25s:
  8736                           	opt stack 0
  8737                           tblptru	equ	0xFF8
  8738                           tblptrh	equ	0xFF7
  8739                           tblptrl	equ	0xFF6
  8740                           tablat	equ	0xFF5
  8741                           prodh	equ	0xFF4
  8742                           prodl	equ	0xFF3
  8743                           intcon	equ	0xFF2
  8744                           postinc0	equ	0xFEE
  8745                           wreg	equ	0xFE8
  8746                           indf1	equ	0xFE7
  8747                           postdec1	equ	0xFE5
  8748                           plusw1	equ	0xFE3
  8749                           fsr1h	equ	0xFE2
  8750                           fsr1l	equ	0xFE1
  8751                           indf2	equ	0xFDF
  8752                           postinc2	equ	0xFDE
  8753                           plusw2	equ	0xFDB
  8754                           fsr2h	equ	0xFDA
  8755                           fsr2l	equ	0xFD9
  8756                           status	equ	0xFD8
  8757                           
  8758 ;; *************** function _md_uart_send *****************
  8759 ;; Defined at:
  8760 ;;		line 126 in file "uart.c"
  8761 ;; Parameters:    Size  Location     Type
  8762 ;;  data            1    wreg     unsigned char 
  8763 ;; Auto vars:     Size  Location     Type
  8764 ;;  data            1   20[COMRAM] unsigned char 
  8765 ;; Return value:  Size  Location     Type
  8766 ;;                  1    wreg      void 
  8767 ;; Registers used:
  8768 ;;		wreg
  8769 ;; Tracked objects:
  8770 ;;		On entry : 0/0
  8771 ;;		On exit  : 0/0
  8772 ;;		Unchanged: 0/0
  8773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8775 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8777 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8778 ;;Total ram usage:        1 bytes
  8779 ;; Hardware stack levels used:    1
  8780 ;; Hardware stack levels required when called:    3
  8781 ;; This function calls:
  8782 ;;		Nothing
  8783 ;; This function is called by:
  8784 ;;		_md_uart_write_str_ok
  8785 ;;		_md_uart_write
  8786 ;; This function uses a non-reentrant model
  8787 ;;
  8788                           
  8789                           	psect	text29
  8790  003092                     __ptext29:
  8791                           	opt stack 0
  8792  003092                     _md_uart_send:
  8793                           	opt stack 23
  8794                           
  8795                           ; BSR set to: 15
  8796                           ;incstack = 0
  8797                           ;md_uart_send@data stored from wreg
  8798  003092  6E15               	movwf	md_uart_send@data,c
  8799  003094                     
  8800                           ;uart.c: 128: while (!TRMT1);
  8801  003094  A2AC               	btfss	4012,1,c	;volatile
  8802  003096  D7FE               	goto	l5850
  8803                           
  8804                           ;uart.c: 129: TX1REG = data;
  8805  003098  C015  FFAD         	movff	md_uart_send@data,4013	;volatile
  8806  00309C  0012               	return		;funcret
  8807  00309E                     __end_of_md_uart_send:
  8808                           	opt stack 0
  8809                           tblptru	equ	0xFF8
  8810                           tblptrh	equ	0xFF7
  8811                           tblptrl	equ	0xFF6
  8812                           tablat	equ	0xFF5
  8813                           prodh	equ	0xFF4
  8814                           prodl	equ	0xFF3
  8815                           intcon	equ	0xFF2
  8816                           postinc0	equ	0xFEE
  8817                           wreg	equ	0xFE8
  8818                           indf1	equ	0xFE7
  8819                           postdec1	equ	0xFE5
  8820                           plusw1	equ	0xFE3
  8821                           fsr1h	equ	0xFE2
  8822                           fsr1l	equ	0xFE1
  8823                           indf2	equ	0xFDF
  8824                           postinc2	equ	0xFDE
  8825                           plusw2	equ	0xFDB
  8826                           fsr2h	equ	0xFDA
  8827                           fsr2l	equ	0xFD9
  8828                           status	equ	0xFD8
  8829                           
  8830 ;; *************** function _enable_md_rxint *****************
  8831 ;; Defined at:
  8832 ;;		line 36 in file "uart.c"
  8833 ;; Parameters:    Size  Location     Type
  8834 ;;		None
  8835 ;; Auto vars:     Size  Location     Type
  8836 ;;		None
  8837 ;; Return value:  Size  Location     Type
  8838 ;;                  1    wreg      void 
  8839 ;; Registers used:
  8840 ;;		None
  8841 ;; Tracked objects:
  8842 ;;		On entry : 0/0
  8843 ;;		On exit  : 0/0
  8844 ;;		Unchanged: 0/0
  8845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8849 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8850 ;;Total ram usage:        0 bytes
  8851 ;; Hardware stack levels used:    1
  8852 ;; Hardware stack levels required when called:    3
  8853 ;; This function calls:
  8854 ;;		Nothing
  8855 ;; This function is called by:
  8856 ;;		_md_uart_write_str_ok
  8857 ;; This function uses a non-reentrant model
  8858 ;;
  8859                           
  8860                           	psect	text30
  8861  00309E                     __ptext30:
  8862                           	opt stack 0
  8863  00309E                     _enable_md_rxint:
  8864                           	opt stack 23
  8865                           
  8866                           ;uart.c: 38: GIE = 0;
  8867                           
  8868                           ;incstack = 0
  8869  00309E  9EF2               	bcf	intcon,7,c	;volatile
  8870                           
  8871                           ;uart.c: 39: PIE1bits.RC1IE = 1;
  8872  0030A0  8A9D               	bsf	3997,5,c	;volatile
  8873                           
  8874                           ;uart.c: 40: PIR1bits.RC1IF = 0;
  8875  0030A2  9A9E               	bcf	3998,5,c	;volatile
  8876                           
  8877                           ;uart.c: 41: INTCONbits.PEIE = 1;
  8878  0030A4  8CF2               	bsf	intcon,6,c	;volatile
  8879                           
  8880                           ;uart.c: 42: GIE = 1;
  8881  0030A6  8EF2               	bsf	intcon,7,c	;volatile
  8882  0030A8  0012               	return		;funcret
  8883  0030AA                     __end_of_enable_md_rxint:
  8884                           	opt stack 0
  8885                           tblptru	equ	0xFF8
  8886                           tblptrh	equ	0xFF7
  8887                           tblptrl	equ	0xFF6
  8888                           tablat	equ	0xFF5
  8889                           prodh	equ	0xFF4
  8890                           prodl	equ	0xFF3
  8891                           intcon	equ	0xFF2
  8892                           postinc0	equ	0xFEE
  8893                           wreg	equ	0xFE8
  8894                           indf1	equ	0xFE7
  8895                           postdec1	equ	0xFE5
  8896                           plusw1	equ	0xFE3
  8897                           fsr1h	equ	0xFE2
  8898                           fsr1l	equ	0xFE1
  8899                           indf2	equ	0xFDF
  8900                           postinc2	equ	0xFDE
  8901                           plusw2	equ	0xFDB
  8902                           fsr2h	equ	0xFDA
  8903                           fsr2l	equ	0xFD9
  8904                           status	equ	0xFD8
  8905                           
  8906 ;; *************** function _disable_tmr5 *****************
  8907 ;; Defined at:
  8908 ;;		line 59 in file "io.c"
  8909 ;; Parameters:    Size  Location     Type
  8910 ;;		None
  8911 ;; Auto vars:     Size  Location     Type
  8912 ;;		None
  8913 ;; Return value:  Size  Location     Type
  8914 ;;                  1    wreg      void 
  8915 ;; Registers used:
  8916 ;;		wreg, status,2
  8917 ;; Tracked objects:
  8918 ;;		On entry : 0/0
  8919 ;;		On exit  : 0/0
  8920 ;;		Unchanged: 0/0
  8921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8925 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8926 ;;Total ram usage:        0 bytes
  8927 ;; Hardware stack levels used:    1
  8928 ;; Hardware stack levels required when called:    3
  8929 ;; This function calls:
  8930 ;;		Nothing
  8931 ;; This function is called by:
  8932 ;;		_check_md_state
  8933 ;;		_md_uart_write_str_ok
  8934 ;; This function uses a non-reentrant model
  8935 ;;
  8936                           
  8937                           	psect	text31
  8938  0030AA                     __ptext31:
  8939                           	opt stack 0
  8940  0030AA                     _disable_tmr5:
  8941                           	opt stack 23
  8942                           
  8943                           ;io.c: 61: tmr5_cnt = 0;
  8944                           
  8945                           ;incstack = 0
  8946  0030AA  0E00               	movlw	0
  8947  0030AC  6E3E               	movwf	_tmr5_cnt,c
  8948                           
  8949                           ;io.c: 62: T5CONbits.TMR5ON = 0;
  8950  0030AE  010F               	movlb	15	; () banked
  8951  0030B0  914E               	bcf	78,0,b	;volatile
  8952                           
  8953                           ; BSR set to: 15
  8954                           ;io.c: 63: PIE5bits.TMR5IE = 0;
  8955  0030B2  927D               	bcf	3965,1,c	;volatile
  8956                           
  8957                           ; BSR set to: 15
  8958  0030B4  0012               	return		;funcret
  8959  0030B6                     __end_of_disable_tmr5:
  8960                           	opt stack 0
  8961                           tblptru	equ	0xFF8
  8962                           tblptrh	equ	0xFF7
  8963                           tblptrl	equ	0xFF6
  8964                           tablat	equ	0xFF5
  8965                           prodh	equ	0xFF4
  8966                           prodl	equ	0xFF3
  8967                           intcon	equ	0xFF2
  8968                           postinc0	equ	0xFEE
  8969                           wreg	equ	0xFE8
  8970                           indf1	equ	0xFE7
  8971                           postdec1	equ	0xFE5
  8972                           plusw1	equ	0xFE3
  8973                           fsr1h	equ	0xFE2
  8974                           fsr1l	equ	0xFE1
  8975                           indf2	equ	0xFDF
  8976                           postinc2	equ	0xFDE
  8977                           plusw2	equ	0xFDB
  8978                           fsr2h	equ	0xFDA
  8979                           fsr2l	equ	0xFD9
  8980                           status	equ	0xFD8
  8981                           
  8982 ;; *************** function _init_md_uart *****************
  8983 ;; Defined at:
  8984 ;;		line 13 in file "uart.c"
  8985 ;; Parameters:    Size  Location     Type
  8986 ;;		None
  8987 ;; Auto vars:     Size  Location     Type
  8988 ;;		None
  8989 ;; Return value:  Size  Location     Type
  8990 ;;                  1    wreg      void 
  8991 ;; Registers used:
  8992 ;;		wreg, status,2
  8993 ;; Tracked objects:
  8994 ;;		On entry : 0/0
  8995 ;;		On exit  : 0/0
  8996 ;;		Unchanged: 0/0
  8997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9001 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9002 ;;Total ram usage:        0 bytes
  9003 ;; Hardware stack levels used:    1
  9004 ;; Hardware stack levels required when called:    3
  9005 ;; This function calls:
  9006 ;;		Nothing
  9007 ;; This function is called by:
  9008 ;;		_main
  9009 ;;		_startup_ok
  9010 ;;		_start_sms_ok
  9011 ;;		_read_sms
  9012 ;;		_send_sms_ok
  9013 ;; This function uses a non-reentrant model
  9014 ;;
  9015                           
  9016                           	psect	text32
  9017  002F46                     __ptext32:
  9018                           	opt stack 0
  9019  002F46                     _init_md_uart:
  9020                           	opt stack 27
  9021                           
  9022                           ;uart.c: 15: BAUDCON1bits.BRG16 = 1;
  9023                           
  9024                           ; BSR set to: 15
  9025                           ;incstack = 0
  9026  002F46  86B8               	bsf	4024,3,c	;volatile
  9027                           
  9028                           ;uart.c: 16: BAUDCON1bits.RCIDL = 1;
  9029  002F48  8CB8               	bsf	4024,6,c	;volatile
  9030                           
  9031                           ;uart.c: 17: BAUDCONbits.CKTXP = 0;
  9032  002F4A  98B8               	bcf	4024,4,c	;volatile
  9033                           
  9034                           ;uart.c: 18: BAUDCONbits.WUE = 0;
  9035  002F4C  92B8               	bcf	4024,1,c	;volatile
  9036                           
  9037                           ;uart.c: 19: BAUDCONbits.ABDEN = 0;
  9038  002F4E  90B8               	bcf	4024,0,c	;volatile
  9039                           
  9040                           ;uart.c: 20: TXSTA1bits.BRGH = 1;
  9041  002F50  84AC               	bsf	4012,2,c	;volatile
  9042                           
  9043                           ;uart.c: 21: TXSTA1bits.SYNC = 0;
  9044  002F52  98AC               	bcf	4012,4,c	;volatile
  9045                           
  9046                           ;uart.c: 22: SPBRGH1 = 0;
  9047  002F54  0E00               	movlw	0
  9048  002F56  6EB0               	movwf	4016,c	;volatile
  9049                           
  9050                           ;uart.c: 23: SPBRG1 = 16;
  9051  002F58  0E10               	movlw	16
  9052  002F5A  6EAF               	movwf	4015,c	;volatile
  9053                           
  9054                           ;uart.c: 25: RC1STAbits.SPEN = 1;
  9055  002F5C  8EAB               	bsf	4011,7,c	;volatile
  9056                           
  9057                           ;uart.c: 26: TRISCbits.TRISC7 = 1;
  9058  002F5E  8E94               	bsf	3988,7,c	;volatile
  9059                           
  9060                           ;uart.c: 27: TRISCbits.TRISC6 = 0;
  9061  002F60  9C94               	bcf	3988,6,c	;volatile
  9062                           
  9063                           ;uart.c: 29: RCSTA1bits.CREN = 1;
  9064  002F62  88AB               	bsf	4011,4,c	;volatile
  9065                           
  9066                           ;uart.c: 30: TXSTA1bits.TXEN = 1;
  9067  002F64  8AAC               	bsf	4012,5,c	;volatile
  9068                           
  9069                           ;uart.c: 32: LATAbits.LATA3 = 1;
  9070  002F66  8689               	bsf	3977,3,c	;volatile
  9071                           
  9072                           ;uart.c: 33: PIR1bits.RC1IF = 0;
  9073  002F68  9A9E               	bcf	3998,5,c	;volatile
  9074  002F6A  0012               	return		;funcret
  9075  002F6C                     __end_of_init_md_uart:
  9076                           	opt stack 0
  9077                           tblptru	equ	0xFF8
  9078                           tblptrh	equ	0xFF7
  9079                           tblptrl	equ	0xFF6
  9080                           tablat	equ	0xFF5
  9081                           prodh	equ	0xFF4
  9082                           prodl	equ	0xFF3
  9083                           intcon	equ	0xFF2
  9084                           postinc0	equ	0xFEE
  9085                           wreg	equ	0xFE8
  9086                           indf1	equ	0xFE7
  9087                           postdec1	equ	0xFE5
  9088                           plusw1	equ	0xFE3
  9089                           fsr1h	equ	0xFE2
  9090                           fsr1l	equ	0xFE1
  9091                           indf2	equ	0xFDF
  9092                           postinc2	equ	0xFDE
  9093                           plusw2	equ	0xFDB
  9094                           fsr2h	equ	0xFDA
  9095                           fsr2l	equ	0xFD9
  9096                           status	equ	0xFD8
  9097                           
  9098 ;; *************** function _clear_at_ok *****************
  9099 ;; Defined at:
  9100 ;;		line 81 in file "io.c"
  9101 ;; Parameters:    Size  Location     Type
  9102 ;;		None
  9103 ;; Auto vars:     Size  Location     Type
  9104 ;;		None
  9105 ;; Return value:  Size  Location     Type
  9106 ;;                  1    wreg      void 
  9107 ;; Registers used:
  9108 ;;		wreg, status,2
  9109 ;; Tracked objects:
  9110 ;;		On entry : 0/0
  9111 ;;		On exit  : 0/0
  9112 ;;		Unchanged: 0/0
  9113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9115 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9117 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9118 ;;Total ram usage:        0 bytes
  9119 ;; Hardware stack levels used:    1
  9120 ;; Hardware stack levels required when called:    3
  9121 ;; This function calls:
  9122 ;;		Nothing
  9123 ;; This function is called by:
  9124 ;;		_startup_ok
  9125 ;;		_start_sms_ok
  9126 ;;		_read_sms
  9127 ;;		_send_sms_ok
  9128 ;; This function uses a non-reentrant model
  9129 ;;
  9130                           
  9131                           	psect	text33
  9132  002EBC                     __ptext33:
  9133                           	opt stack 0
  9134  002EBC                     _clear_at_ok:
  9135                           	opt stack 24
  9136                           
  9137                           ;io.c: 83: at1 = 0;
  9138                           
  9139                           ;incstack = 0
  9140  002EBC  0E00               	movlw	0
  9141  002EBE  0100               	movlb	0	; () banked
  9142  002EC0  6FF5               	movwf	_at1& (0+255),b
  9143                           
  9144                           ;io.c: 84: at2 = 0;
  9145  002EC2  0E00               	movlw	0
  9146  002EC4  6FF4               	movwf	_at2& (0+255),b
  9147                           
  9148                           ;io.c: 85: at3 = 0;
  9149  002EC6  0E00               	movlw	0
  9150  002EC8  6FF3               	movwf	_at3& (0+255),b
  9151                           
  9152                           ;io.c: 86: at4 = 0;
  9153  002ECA  0E00               	movlw	0
  9154  002ECC  6FF2               	movwf	_at4& (0+255),b
  9155                           
  9156                           ;io.c: 87: at5 = 0;
  9157  002ECE  0E00               	movlw	0
  9158  002ED0  6FF1               	movwf	_at5& (0+255),b
  9159                           
  9160                           ;io.c: 88: at6 = 0;
  9161  002ED2  0E00               	movlw	0
  9162  002ED4  6FF0               	movwf	_at6& (0+255),b
  9163                           
  9164                           ;io.c: 89: at7 = 0;
  9165  002ED6  0E00               	movlw	0
  9166  002ED8  6FEF               	movwf	_at7& (0+255),b
  9167                           
  9168                           ;io.c: 90: at8 = 0;
  9169  002EDA  0E00               	movlw	0
  9170  002EDC  6FEE               	movwf	_at8& (0+255),b
  9171                           
  9172                           ;io.c: 91: at9 = 0;
  9173  002EDE  0E00               	movlw	0
  9174  002EE0  6FED               	movwf	_at9& (0+255),b
  9175                           
  9176                           ;io.c: 92: at10 = 0;
  9177  002EE2  0E00               	movlw	0
  9178  002EE4  6FEC               	movwf	_at10& (0+255),b
  9179                           
  9180                           ;io.c: 93: at11 = 0;
  9181  002EE6  0E00               	movlw	0
  9182  002EE8  6FEB               	movwf	_at11& (0+255),b
  9183                           
  9184                           ;io.c: 94: at12 = 0;
  9185  002EEA  0E00               	movlw	0
  9186  002EEC  6FEA               	movwf	_at12& (0+255),b
  9187                           
  9188                           ; BSR set to: 0
  9189  002EEE  0012               	return		;funcret
  9190  002EF0                     __end_of_clear_at_ok:
  9191                           	opt stack 0
  9192                           tblptru	equ	0xFF8
  9193                           tblptrh	equ	0xFF7
  9194                           tblptrl	equ	0xFF6
  9195                           tablat	equ	0xFF5
  9196                           prodh	equ	0xFF4
  9197                           prodl	equ	0xFF3
  9198                           intcon	equ	0xFF2
  9199                           postinc0	equ	0xFEE
  9200                           wreg	equ	0xFE8
  9201                           indf1	equ	0xFE7
  9202                           postdec1	equ	0xFE5
  9203                           plusw1	equ	0xFE3
  9204                           fsr1h	equ	0xFE2
  9205                           fsr1l	equ	0xFE1
  9206                           indf2	equ	0xFDF
  9207                           postinc2	equ	0xFDE
  9208                           plusw2	equ	0xFDB
  9209                           fsr2h	equ	0xFDA
  9210                           fsr2l	equ	0xFD9
  9211                           status	equ	0xFD8
  9212                           
  9213 ;; *************** function _check_sms_timer *****************
  9214 ;; Defined at:
  9215 ;;		line 315 in file "C:/Users/Scott/InstantCare/Engineering/7102-10 - 906GN-SmokeGSMHub/Firmware/ic_hubCode_jvolk/test_
      +buttonmenu_wSMS.X/sms.c"
  9216 ;; Parameters:    Size  Location     Type
  9217 ;;		None
  9218 ;; Auto vars:     Size  Location     Type
  9219 ;;  sms_duration    1   26[COMRAM] unsigned char 
  9220 ;; Return value:  Size  Location     Type
  9221 ;;                  1    wreg      void 
  9222 ;; Registers used:
  9223 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9224 ;; Tracked objects:
  9225 ;;		On entry : 0/0
  9226 ;;		On exit  : 0/0
  9227 ;;		Unchanged: 0/0
  9228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9230 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9232 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9233 ;;Total ram usage:        1 bytes
  9234 ;; Hardware stack levels used:    1
  9235 ;; Hardware stack levels required when called:    5
  9236 ;; This function calls:
  9237 ;;		_ee_read_ascii_to_value
  9238 ;;		_stop_sms_timer
  9239 ;; This function is called by:
  9240 ;;		_listen_sms
  9241 ;; This function uses a non-reentrant model
  9242 ;;
  9243                           
  9244                           	psect	text34
  9245  002D8C                     __ptext34:
  9246                           	opt stack 0
  9247  002D8C                     _check_sms_timer:
  9248                           	opt stack 23
  9249                           
  9250                           ;sms.c: 317: uint8_t sms_duration = (uint8_t)(ee_read_ascii_to_value(0x00, 0xB8) * 20);
  9251                           
  9252                           ; BSR set to: 0
  9253                           ;incstack = 0
  9254  002D8C  0EB8               	movlw	184
  9255  002D8E  6E18               	movwf	ee_read_ascii_to_value@addr,c
  9256  002D90  0E00               	movlw	0
  9257  002D92  ECB6  F017         	call	_ee_read_ascii_to_value
  9258  002D96  0D14               	mullw	20
  9259  002D98  CFF3 F01B          	movff	prodl,check_sms_timer@sms_duration
  9260                           
  9261                           ;sms.c: 318: switch(SMS_TMR_STATE)
  9262  002D9C  D01F               	goto	l1482
  9263  002D9E                     
  9264                           ;sms.c: 323: if (t2_tick >= 31)
  9265  002D9E  0E1E               	movlw	30
  9266  002DA0  6443               	cpfsgt	_t2_tick,c
  9267  002DA2  D005               	goto	l1486
  9268                           
  9269                           ;sms.c: 324: {
  9270                           ;sms.c: 325: t2_tick = 0;
  9271  002DA4  0E00               	movlw	0
  9272  002DA6  6E43               	movwf	_t2_tick,c
  9273                           
  9274                           ;sms.c: 326: sms_tmr_tick++;
  9275  002DA8  2A44               	incf	_sms_tmr_tick,f,c
  9276                           
  9277                           ;sms.c: 327: SMS_TMR_STATE = NEXT_SMS_READY;
  9278  002DAA  0E02               	movlw	2
  9279  002DAC  6E3C               	movwf	_SMS_TMR_STATE,c
  9280  002DAE                     l1486:
  9281                           
  9282                           ;sms.c: 328: }
  9283                           ;sms.c: 329: if (sms_tmr_tick >= sms_duration)
  9284  002DAE  501B               	movf	check_sms_timer@sms_duration,w,c
  9285  002DB0  5C44               	subwf	_sms_tmr_tick,w,c
  9286  002DB2  A0D8               	btfss	status,0,c
  9287  002DB4  0012               	return	
  9288                           
  9289                           ;sms.c: 330: {
  9290                           ;sms.c: 331: sms_tmr_tick = 0;
  9291  002DB6  0E00               	movlw	0
  9292  002DB8  6E44               	movwf	_sms_tmr_tick,c
  9293                           
  9294                           ;sms.c: 332: SMS_TMR_STATE = LISTEN_MODE_DONE;
  9295  002DBA  0E03               	movlw	3
  9296  002DBC  6E3C               	movwf	_SMS_TMR_STATE,c
  9297                           
  9298                           ;sms.c: 333: }
  9299                           ;sms.c: 334: break;
  9300  002DBE  0012               	return	
  9301  002DC0                     
  9302                           ;sms.c: 336: sms_timer_ready = 1;
  9303  002DC0  0E01               	movlw	1
  9304  002DC2  6E48               	movwf	_sms_timer_ready,c
  9305                           
  9306                           ;sms.c: 337: SMS_TMR_STATE = RUNNING;
  9307  002DC4  0E01               	movlw	1
  9308  002DC6  6E3C               	movwf	_SMS_TMR_STATE,c
  9309                           
  9310                           ;sms.c: 338: break;
  9311  002DC8  0012               	return	
  9312  002DCA                     
  9313                           ;sms.c: 340: stop_sms_timer();
  9314  002DCA  EC66  F018         	call	_stop_sms_timer	;wreg free
  9315                           
  9316                           ;sms.c: 341: modem_ready_sms = 0;
  9317  002DCE  0E00               	movlw	0
  9318  002DD0  6E39               	movwf	_modem_ready_sms,c
  9319                           
  9320                           ;sms.c: 342: state = prev_state;
  9321  002DD2  C030  F031         	movff	_prev_state,_state
  9322                           
  9323                           ;sms.c: 343: SMS_TMR_STATE = 0;
  9324  002DD6  0E00               	movlw	0
  9325  002DD8  6E3C               	movwf	_SMS_TMR_STATE,c
  9326                           
  9327                           ;sms.c: 345: }
  9328                           
  9329                           ;sms.c: 344: break;
  9330  002DDA  0012               	return	
  9331  002DDC                     l1482:
  9332  002DDC  503C               	movf	_SMS_TMR_STATE,w,c
  9333                           
  9334                           ; Switch size 1, requested type "space"
  9335                           ; Number of cases is 4, Range of values is 0 to 3
  9336                           ; switch strategies available:
  9337                           ; Name         Instructions Cycles
  9338                           ; simple_byte           13     7 (average)
  9339                           ;	Chosen strategy is simple_byte
  9340  002DDE  0A00               	xorlw	0	; case 0
  9341  002DE0  B4D8               	btfsc	status,2,c
  9342  002DE2  0012               	return	
  9343  002DE4  0A01               	xorlw	1	; case 1
  9344  002DE6  B4D8               	btfsc	status,2,c
  9345  002DE8  D7DA               	goto	l1485
  9346  002DEA  0A03               	xorlw	3	; case 2
  9347  002DEC  B4D8               	btfsc	status,2,c
  9348  002DEE  D7E8               	goto	l1488
  9349  002DF0  0A01               	xorlw	1	; case 3
  9350  002DF2  A4D8               	btfss	status,2,c
  9351  002DF4  0012               	return	
  9352  002DF6  D7E9               	goto	l1489
  9353  002DF8                     __end_of_check_sms_timer:
  9354                           	opt stack 0
  9355                           tblptru	equ	0xFF8
  9356                           tblptrh	equ	0xFF7
  9357                           tblptrl	equ	0xFF6
  9358                           tablat	equ	0xFF5
  9359                           prodh	equ	0xFF4
  9360                           prodl	equ	0xFF3
  9361                           intcon	equ	0xFF2
  9362                           postinc0	equ	0xFEE
  9363                           wreg	equ	0xFE8
  9364                           indf1	equ	0xFE7
  9365                           postdec1	equ	0xFE5
  9366                           plusw1	equ	0xFE3
  9367                           fsr1h	equ	0xFE2
  9368                           fsr1l	equ	0xFE1
  9369                           indf2	equ	0xFDF
  9370                           postinc2	equ	0xFDE
  9371                           plusw2	equ	0xFDB
  9372                           fsr2h	equ	0xFDA
  9373                           fsr2l	equ	0xFD9
  9374                           status	equ	0xFD8
  9375                           
  9376 ;; *************** function _stop_sms_timer *****************
  9377 ;; Defined at:
  9378 ;;		line 359 in file "C:/Users/Scott/InstantCare/Engineering/7102-10 - 906GN-SmokeGSMHub/Firmware/ic_hubCode_jvolk/test_
      +buttonmenu_wSMS.X/sms.c"
  9379 ;; Parameters:    Size  Location     Type
  9380 ;;		None
  9381 ;; Auto vars:     Size  Location     Type
  9382 ;;		None
  9383 ;; Return value:  Size  Location     Type
  9384 ;;                  1    wreg      void 
  9385 ;; Registers used:
  9386 ;;		None
  9387 ;; Tracked objects:
  9388 ;;		On entry : 0/0
  9389 ;;		On exit  : 0/0
  9390 ;;		Unchanged: 0/0
  9391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9395 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9396 ;;Total ram usage:        0 bytes
  9397 ;; Hardware stack levels used:    1
  9398 ;; Hardware stack levels required when called:    3
  9399 ;; This function calls:
  9400 ;;		Nothing
  9401 ;; This function is called by:
  9402 ;;		_check_sms_timer
  9403 ;; This function uses a non-reentrant model
  9404 ;;
  9405                           
  9406                           	psect	text35
  9407  0030CC                     __ptext35:
  9408                           	opt stack 0
  9409  0030CC                     _stop_sms_timer:
  9410                           	opt stack 24
  9411                           
  9412                           ;sms.c: 361: T2CONbits.TMR2ON = 0;
  9413                           
  9414                           ;incstack = 0
  9415  0030CC  94BA               	bcf	4026,2,c	;volatile
  9416                           
  9417                           ;sms.c: 362: PIE1bits.TMR2IE = 0;
  9418  0030CE  929D               	bcf	3997,1,c	;volatile
  9419  0030D0  0012               	return		;funcret
  9420  0030D2                     __end_of_stop_sms_timer:
  9421                           	opt stack 0
  9422                           tblptru	equ	0xFF8
  9423                           tblptrh	equ	0xFF7
  9424                           tblptrl	equ	0xFF6
  9425                           tablat	equ	0xFF5
  9426                           prodh	equ	0xFF4
  9427                           prodl	equ	0xFF3
  9428                           intcon	equ	0xFF2
  9429                           postinc0	equ	0xFEE
  9430                           wreg	equ	0xFE8
  9431                           indf1	equ	0xFE7
  9432                           postdec1	equ	0xFE5
  9433                           plusw1	equ	0xFE3
  9434                           fsr1h	equ	0xFE2
  9435                           fsr1l	equ	0xFE1
  9436                           indf2	equ	0xFDF
  9437                           postinc2	equ	0xFDE
  9438                           plusw2	equ	0xFDB
  9439                           fsr2h	equ	0xFDA
  9440                           fsr2l	equ	0xFD9
  9441                           status	equ	0xFD8
  9442                           
  9443 ;; *************** function _ee_read_ascii_to_value *****************
  9444 ;; Defined at:
  9445 ;;		line 47 in file "eeprom.c"
  9446 ;; Parameters:    Size  Location     Type
  9447 ;;  page            1    wreg     unsigned char 
  9448 ;;  addr            1   23[COMRAM] unsigned char 
  9449 ;; Auto vars:     Size  Location     Type
  9450 ;;  page            1   24[COMRAM] unsigned char 
  9451 ;;  data            1   25[COMRAM] unsigned char 
  9452 ;; Return value:  Size  Location     Type
  9453 ;;                  1    wreg      unsigned char 
  9454 ;; Registers used:
  9455 ;;		wreg, status,2, status,0, cstack
  9456 ;; Tracked objects:
  9457 ;;		On entry : 0/0
  9458 ;;		On exit  : 0/0
  9459 ;;		Unchanged: 0/0
  9460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9461 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9462 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9464 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9465 ;;Total ram usage:        3 bytes
  9466 ;; Hardware stack levels used:    1
  9467 ;; Hardware stack levels required when called:    4
  9468 ;; This function calls:
  9469 ;;		_ee_read
  9470 ;; This function is called by:
  9471 ;;		_check_sms_timer
  9472 ;; This function uses a non-reentrant model
  9473 ;;
  9474                           
  9475                           	psect	text36
  9476  002F6C                     __ptext36:
  9477                           	opt stack 0
  9478  002F6C                     _ee_read_ascii_to_value:
  9479                           	opt stack 23
  9480                           
  9481                           ;incstack = 0
  9482                           ;ee_read_ascii_to_value@page stored from wreg
  9483  002F6C  6E19               	movwf	ee_read_ascii_to_value@page,c
  9484                           
  9485                           ;eeprom.c: 49: uint8_t data;
  9486                           ;eeprom.c: 50: data = ee_read(page, addr);
  9487  002F6E  C018  F015         	movff	ee_read_ascii_to_value@addr,ee_read@addr
  9488  002F72  5019               	movf	ee_read_ascii_to_value@page,w,c
  9489  002F74  ECD9  F017         	call	_ee_read
  9490  002F78  6E1A               	movwf	ee_read_ascii_to_value@data,c
  9491                           
  9492                           ;eeprom.c: 51: if (data >= 'A')
  9493  002F7A  0E40               	movlw	64
  9494  002F7C  641A               	cpfsgt	ee_read_ascii_to_value@data,c
  9495  002F7E  D003               	goto	l879
  9496                           
  9497                           ;eeprom.c: 52: data = (uint8_t)((data - 0x41) + 0x0A);
  9498  002F80  501A               	movf	ee_read_ascii_to_value@data,w,c
  9499  002F82  0FC9               	addlw	201
  9500  002F84  D002               	goto	L27
  9501  002F86                     l879:
  9502                           
  9503                           ;eeprom.c: 53: else
  9504                           ;eeprom.c: 54: data = (uint8_t)(data - 0x30);
  9505  002F86  501A               	movf	ee_read_ascii_to_value@data,w,c
  9506  002F88  0FD0               	addlw	208
  9507  002F8A                     L27:
  9508  002F8A  6E1A               	movwf	ee_read_ascii_to_value@data,c
  9509                           
  9510                           ;eeprom.c: 56: return data;
  9511  002F8C  501A               	movf	ee_read_ascii_to_value@data,w,c
  9512  002F8E  0012               	return	
  9513  002F90                     __end_of_ee_read_ascii_to_value:
  9514                           	opt stack 0
  9515                           tblptru	equ	0xFF8
  9516                           tblptrh	equ	0xFF7
  9517                           tblptrl	equ	0xFF6
  9518                           tablat	equ	0xFF5
  9519                           prodh	equ	0xFF4
  9520                           prodl	equ	0xFF3
  9521                           intcon	equ	0xFF2
  9522                           postinc0	equ	0xFEE
  9523                           wreg	equ	0xFE8
  9524                           indf1	equ	0xFE7
  9525                           postdec1	equ	0xFE5
  9526                           plusw1	equ	0xFE3
  9527                           fsr1h	equ	0xFE2
  9528                           fsr1l	equ	0xFE1
  9529                           indf2	equ	0xFDF
  9530                           postinc2	equ	0xFDE
  9531                           plusw2	equ	0xFDB
  9532                           fsr2h	equ	0xFDA
  9533                           fsr2l	equ	0xFD9
  9534                           status	equ	0xFD8
  9535                           
  9536 ;; *************** function _ee_read *****************
  9537 ;; Defined at:
  9538 ;;		line 11 in file "eeprom.c"
  9539 ;; Parameters:    Size  Location     Type
  9540 ;;  page            1    wreg     unsigned char 
  9541 ;;  addr            1   20[COMRAM] unsigned char 
  9542 ;; Auto vars:     Size  Location     Type
  9543 ;;  page            1   21[COMRAM] unsigned char 
  9544 ;;  data            1   22[COMRAM] unsigned char 
  9545 ;; Return value:  Size  Location     Type
  9546 ;;                  1    wreg      unsigned char 
  9547 ;; Registers used:
  9548 ;;		wreg, status,2
  9549 ;; Tracked objects:
  9550 ;;		On entry : 0/0
  9551 ;;		On exit  : 0/0
  9552 ;;		Unchanged: 0/0
  9553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9554 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9555 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9557 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9558 ;;Total ram usage:        3 bytes
  9559 ;; Hardware stack levels used:    1
  9560 ;; Hardware stack levels required when called:    3
  9561 ;; This function calls:
  9562 ;;		Nothing
  9563 ;; This function is called by:
  9564 ;;		_ee_read_ascii_to_value
  9565 ;;		_parse_cmgr
  9566 ;;		_write_defaults
  9567 ;;		_is_first_run
  9568 ;; This function uses a non-reentrant model
  9569 ;;
  9570                           
  9571                           	psect	text37
  9572  002FB2                     __ptext37:
  9573                           	opt stack 0
  9574  002FB2                     _ee_read:
  9575                           	opt stack 23
  9576                           
  9577                           ;incstack = 0
  9578                           ;ee_read@page stored from wreg
  9579  002FB2  6E16               	movwf	ee_read@page,c
  9580                           
  9581                           ;eeprom.c: 13: unsigned char data;
  9582                           ;eeprom.c: 14: GIE = 0;
  9583  002FB4  9EF2               	bcf	intcon,7,c	;volatile
  9584                           
  9585                           ;eeprom.c: 15: EEADRH = page;
  9586  002FB6  C016  FFAA         	movff	ee_read@page,4010	;volatile
  9587                           
  9588                           ;eeprom.c: 16: EEADR = addr;
  9589  002FBA  C015  FFA9         	movff	ee_read@addr,4009	;volatile
  9590                           
  9591                           ;eeprom.c: 17: CFGS = 0;
  9592  002FBE  9CA6               	bcf	4006,6,c	;volsfr
  9593                           
  9594                           ;eeprom.c: 18: EEPGD = 0;
  9595  002FC0  9EA6               	bcf	4006,7,c	;volsfr
  9596                           
  9597                           ;eeprom.c: 19: RD = 1;
  9598  002FC2  80A6               	bsf	4006,0,c	;volsfr
  9599                           
  9600                           ;eeprom.c: 20: data = EEDATA;
  9601  002FC4  CFA8 F017          	movff	4008,ee_read@data	;volatile
  9602                           
  9603                           ;eeprom.c: 21: GIE = 1;
  9604  002FC8  8EF2               	bsf	intcon,7,c	;volatile
  9605                           
  9606                           ;eeprom.c: 22: return (data);
  9607  002FCA  5017               	movf	ee_read@data,w,c
  9608  002FCC  0012               	return	
  9609  002FCE                     __end_of_ee_read:
  9610                           	opt stack 0
  9611                           tblptru	equ	0xFF8
  9612                           tblptrh	equ	0xFF7
  9613                           tblptrl	equ	0xFF6
  9614                           tablat	equ	0xFF5
  9615                           prodh	equ	0xFF4
  9616                           prodl	equ	0xFF3
  9617                           intcon	equ	0xFF2
  9618                           postinc0	equ	0xFEE
  9619                           wreg	equ	0xFE8
  9620                           indf1	equ	0xFE7
  9621                           postdec1	equ	0xFE5
  9622                           plusw1	equ	0xFE3
  9623                           fsr1h	equ	0xFE2
  9624                           fsr1l	equ	0xFE1
  9625                           indf2	equ	0xFDF
  9626                           postinc2	equ	0xFDE
  9627                           plusw2	equ	0xFDB
  9628                           fsr2h	equ	0xFDA
  9629                           fsr2l	equ	0xFD9
  9630                           status	equ	0xFD8
  9631                           
  9632 ;; *************** function _isr *****************
  9633 ;; Defined at:
  9634 ;;		line 18 in file "main.c"
  9635 ;; Parameters:    Size  Location     Type
  9636 ;;		None
  9637 ;; Auto vars:     Size  Location     Type
  9638 ;;		None
  9639 ;; Return value:  Size  Location     Type
  9640 ;;                  1    wreg      void 
  9641 ;; Registers used:
  9642 ;;		wreg, status,2, status,0, cstack
  9643 ;; Tracked objects:
  9644 ;;		On entry : 0/0
  9645 ;;		On exit  : 0/0
  9646 ;;		Unchanged: 0/0
  9647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9649 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9650 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9651 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9652 ;;Total ram usage:       18 bytes
  9653 ;; Hardware stack levels used:    1
  9654 ;; Hardware stack levels required when called:    2
  9655 ;; This function calls:
  9656 ;;		_check_state_timeout
  9657 ;;		_control_leds
  9658 ;;		_disable_tmr3
  9659 ;;		_enable_tmr4
  9660 ;;		_reload_timer0
  9661 ;; This function is called by:
  9662 ;;		Interrupt level 2
  9663 ;; This function uses a non-reentrant model
  9664 ;;
  9665                           
  9666                           	psect	intcode
  9667  000008                     __pintcode:
  9668                           	opt stack 0
  9669  000008                     _isr:
  9670                           	opt stack 21
  9671                           
  9672                           ;incstack = 0
  9673  000008  824B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9674  00000A  CFFA F003          	movff	pclath,??_isr
  9675  00000E  CFFB F004          	movff	pclatu,??_isr+1
  9676  000012  CFE9 F005          	movff	fsr0l,??_isr+2
  9677  000016  CFEA F006          	movff	fsr0h,??_isr+3
  9678  00001A  CFE1 F007          	movff	fsr1l,??_isr+4
  9679  00001E  CFE2 F008          	movff	fsr1h,??_isr+5
  9680  000022  CFD9 F009          	movff	fsr2l,??_isr+6
  9681  000026  CFDA F00A          	movff	fsr2h,??_isr+7
  9682  00002A  CFF3 F00B          	movff	prodl,??_isr+8
  9683  00002E  CFF4 F00C          	movff	prodh,??_isr+9
  9684  000032  CFF6 F00D          	movff	tblptrl,??_isr+10
  9685  000036  CFF7 F00E          	movff	tblptrh,??_isr+11
  9686  00003A  CFF8 F00F          	movff	tblptru,??_isr+12
  9687  00003E  CFF5 F010          	movff	tablat,??_isr+13
  9688  000042  C04B  F011         	movff	btemp,??_isr+14
  9689  000046  C04C  F012         	movff	btemp+1,??_isr+15
  9690  00004A  C04D  F013         	movff	btemp+2,??_isr+16
  9691  00004E  C04E  F014         	movff	btemp+3,??_isr+17
  9692                           
  9693                           ;main.c: 20: if (TMR0IF)
  9694  000052  A4F2               	btfss	intcon,2,c	;volatile
  9695  000054  D007               	goto	i2l217
  9696                           
  9697                           ;main.c: 21: {
  9698                           ;main.c: 22: TMR0IF = 0;
  9699  000056  94F2               	bcf	intcon,2,c	;volatile
  9700                           
  9701                           ;main.c: 23: reload_timer0();
  9702  000058  EC5B  F018         	call	_reload_timer0	;wreg free
  9703                           
  9704                           ;main.c: 24: gled_tmr0_tick++;
  9705  00005C  2A41               	incf	_gled_tmr0_tick,f,c
  9706                           
  9707                           ;main.c: 25: bled_tmr0_tick++;
  9708  00005E  2A40               	incf	_bled_tmr0_tick,f,c
  9709                           
  9710                           ;main.c: 26: control_leds();
  9711  000060  ECF1  F013         	call	_control_leds	;wreg free
  9712  000064                     i2l217:
  9713                           
  9714                           ;main.c: 27: }
  9715                           ;main.c: 28: if (TMR3IF)
  9716  000064  A2A1               	btfss	4001,1,c	;volatile
  9717  000066  D064               	goto	i2l234
  9718                           
  9719                           ;main.c: 29: {
  9720                           ;main.c: 30: tmr3_cnt++;
  9721  000068  2A3F               	incf	_tmr3_cnt,f,c
  9722                           
  9723                           ;main.c: 31: TMR3IF = 0;
  9724  00006A  92A1               	bcf	4001,1,c	;volatile
  9725                           
  9726                           ;main.c: 33: if (tmr3_cnt >= 8 && ((inButtonMenu && buttonPressCount > 0) || !inButtonMe
      +                          nu))
  9727  00006C  0E07               	movlw	7
  9728  00006E  643F               	cpfsgt	_tmr3_cnt,c
  9729  000070  D050               	goto	i2l219
  9730  000072  5045               	movf	_inButtonMenu,w,c
  9731  000074  B4D8               	btfsc	status,2,c
  9732  000076  D003               	goto	i2u623_40
  9733  000078  5042               	movf	_buttonPressCount,w,c
  9734  00007A  A4D8               	btfss	status,2,c
  9735  00007C  D003               	goto	i2u624_40
  9736  00007E                     i2u623_40:
  9737  00007E  5045               	movf	_inButtonMenu,w,c
  9738  000080  A4D8               	btfss	status,2,c
  9739  000082  D047               	goto	i2l219
  9740  000084                     i2u624_40:
  9741                           
  9742                           ;main.c: 34: {
  9743                           ;main.c: 35: tmr3_cnt = 0;
  9744  000084  0E00               	movlw	0
  9745  000086  6E3F               	movwf	_tmr3_cnt,c
  9746                           
  9747                           ;main.c: 36: if (inButtonMenu && buttonPressCount == 1)
  9748  000088  5045               	movf	_inButtonMenu,w,c
  9749  00008A  B4D8               	btfsc	status,2,c
  9750  00008C  D00A               	goto	i2l224
  9751  00008E  0442               	decf	_buttonPressCount,w,c
  9752  000090  A4D8               	btfss	status,2,c
  9753  000092  D007               	goto	i2l224
  9754                           
  9755                           ;main.c: 37: {
  9756                           ;main.c: 38: inButtonMenu = 0;
  9757  000094  0E00               	movlw	0
  9758  000096  6E45               	movwf	_inButtonMenu,c
  9759                           
  9760                           ;main.c: 39: disable_tmr3();
  9761  000098  EC3B  F018         	call	_disable_tmr3	;wreg free
  9762                           
  9763                           ;main.c: 40: state = LISTEN_SMS;
  9764  00009C  0E01               	movlw	1
  9765  00009E  6E31               	movwf	_state,c
  9766                           
  9767                           ;main.c: 41: }
  9768  0000A0  D035               	goto	i2l232
  9769  0000A2                     i2l224:
  9770                           
  9771                           ;main.c: 42: else if (inButtonMenu && buttonPressCount == 2)
  9772  0000A2  5045               	movf	_inButtonMenu,w,c
  9773  0000A4  B4D8               	btfsc	status,2,c
  9774  0000A6  D00D               	goto	i2l226
  9775  0000A8  0E02               	movlw	2
  9776  0000AA  1842               	xorwf	_buttonPressCount,w,c
  9777  0000AC  A4D8               	btfss	status,2,c
  9778  0000AE  D009               	goto	i2l226
  9779                           
  9780                           ;main.c: 43: {
  9781                           ;main.c: 44: inButtonMenu = 0;
  9782  0000B0  0E00               	movlw	0
  9783  0000B2  6E45               	movwf	_inButtonMenu,c
  9784                           
  9785                           ;main.c: 45: disable_tmr3();
  9786  0000B4  EC3B  F018         	call	_disable_tmr3	;wreg free
  9787                           
  9788                           ;main.c: 46: state = LEARN_SENSOR;
  9789  0000B8  0E02               	movlw	2
  9790  0000BA  6E31               	movwf	_state,c
  9791                           
  9792                           ;main.c: 47: enable_tmr4();
  9793  0000BC  ECC8  F017         	call	_enable_tmr4	;wreg free
  9794                           
  9795                           ;main.c: 48: }
  9796  0000C0  D025               	goto	i2l232
  9797  0000C2                     i2l226:
  9798                           
  9799                           ;main.c: 49: else if (inButtonMenu && buttonPressCount == 3)
  9800  0000C2  5045               	movf	_inButtonMenu,w,c
  9801  0000C4  B4D8               	btfsc	status,2,c
  9802  0000C6  D00D               	goto	i2l228
  9803  0000C8  0E03               	movlw	3
  9804  0000CA  1842               	xorwf	_buttonPressCount,w,c
  9805  0000CC  A4D8               	btfss	status,2,c
  9806  0000CE  D009               	goto	i2l228
  9807                           
  9808                           ;main.c: 50: {
  9809                           ;main.c: 51: inButtonMenu = 0;
  9810  0000D0  0E00               	movlw	0
  9811  0000D2  6E45               	movwf	_inButtonMenu,c
  9812                           
  9813                           ;main.c: 52: disable_tmr3();
  9814  0000D4  EC3B  F018         	call	_disable_tmr3	;wreg free
  9815                           
  9816                           ;main.c: 53: state = DEL_SENSOR;
  9817  0000D8  0E03               	movlw	3
  9818  0000DA  6E31               	movwf	_state,c
  9819                           
  9820                           ;main.c: 54: enable_tmr4();
  9821  0000DC  ECC8  F017         	call	_enable_tmr4	;wreg free
  9822                           
  9823                           ;main.c: 55: }
  9824  0000E0  D015               	goto	i2l232
  9825  0000E2                     i2l228:
  9826                           
  9827                           ;main.c: 56: else if (inButtonMenu && buttonPressCount == 4)
  9828  0000E2  5045               	movf	_inButtonMenu,w,c
  9829  0000E4  B4D8               	btfsc	status,2,c
  9830  0000E6  D00B               	goto	i2l230
  9831  0000E8  0E04               	movlw	4
  9832  0000EA  1842               	xorwf	_buttonPressCount,w,c
  9833  0000EC  A4D8               	btfss	status,2,c
  9834  0000EE  D007               	goto	i2l230
  9835                           
  9836                           ;main.c: 57: {
  9837                           ;main.c: 58: inButtonMenu = 0;
  9838  0000F0  0E00               	movlw	0
  9839  0000F2  6E45               	movwf	_inButtonMenu,c
  9840                           
  9841                           ;main.c: 59: disable_tmr3();
  9842  0000F4  EC3B  F018         	call	_disable_tmr3	;wreg free
  9843                           
  9844                           ;main.c: 61: enable_tmr4();
  9845  0000F8  ECC8  F017         	call	_enable_tmr4	;wreg free
  9846                           
  9847                           ;main.c: 62: }
  9848  0000FC  D007               	goto	i2l232
  9849  0000FE                     i2l230:
  9850                           
  9851                           ;main.c: 63: else if (buttonPressCount == 5)
  9852  0000FE  0E05               	movlw	5
  9853  000100  1842               	xorwf	_buttonPressCount,w,c
  9854  000102  A4D8               	btfss	status,2,c
  9855  000104  D003               	goto	i2l232
  9856                           
  9857                           ;main.c: 64: {
  9858                           ;main.c: 65: inButtonMenu = (bool)(~inButtonMenu);
  9859  000106  1E45               	comf	_inButtonMenu,f,c
  9860                           
  9861                           ;main.c: 66: tmr3_cnt = 0;
  9862  000108  0E00               	movlw	0
  9863  00010A  6E3F               	movwf	_tmr3_cnt,c
  9864  00010C                     i2l232:
  9865                           
  9866                           ;main.c: 67: }
  9867                           ;main.c: 69: buttonPressCount = 0;
  9868  00010C  0E00               	movlw	0
  9869  00010E  6E42               	movwf	_buttonPressCount,c
  9870                           
  9871                           ;main.c: 70: }
  9872  000110  D00F               	goto	i2l234
  9873  000112                     i2l219:
  9874                           
  9875                           ;main.c: 71: else if (tmr3_cnt >= 40 && inButtonMenu && buttonPressCount == 0)
  9876  000112  0E27               	movlw	39
  9877  000114  643F               	cpfsgt	_tmr3_cnt,c
  9878  000116  D00C               	goto	i2l234
  9879  000118  5045               	movf	_inButtonMenu,w,c
  9880  00011A  B4D8               	btfsc	status,2,c
  9881  00011C  D009               	goto	i2l234
  9882  00011E  5042               	movf	_buttonPressCount,w,c
  9883  000120  A4D8               	btfss	status,2,c
  9884  000122  D006               	goto	i2l234
  9885                           
  9886                           ;main.c: 72: {
  9887                           ;main.c: 73: inButtonMenu = 0;
  9888  000124  0E00               	movlw	0
  9889  000126  6E45               	movwf	_inButtonMenu,c
  9890                           
  9891                           ;main.c: 74: tmr3_cnt = 0;
  9892  000128  0E00               	movlw	0
  9893  00012A  6E3F               	movwf	_tmr3_cnt,c
  9894                           
  9895                           ;main.c: 75: disable_tmr3();
  9896  00012C  EC3B  F018         	call	_disable_tmr3	;wreg free
  9897  000130                     i2l234:
  9898                           
  9899                           ;main.c: 76: }
  9900                           ;main.c: 77: }
  9901                           ;main.c: 78: if (PIR5bits.TMR4IF)
  9902  000130  A07E               	btfss	3966,0,c	;volatile
  9903  000132  D003               	goto	i2l235
  9904                           
  9905                           ;main.c: 79: {
  9906                           ;main.c: 80: PIR5bits.TMR4IF = 0;
  9907  000134  907E               	bcf	3966,0,c	;volatile
  9908                           
  9909                           ;main.c: 81: check_state_timeout();
  9910  000136  EC7F  F015         	call	_check_state_timeout	;wreg free
  9911  00013A                     i2l235:
  9912  00013A  C014  F04E         	movff	??_isr+17,btemp+3
  9913  00013E  C013  F04D         	movff	??_isr+16,btemp+2
  9914  000142  C012  F04C         	movff	??_isr+15,btemp+1
  9915  000146  C011  F04B         	movff	??_isr+14,btemp
  9916  00014A  C010  FFF5         	movff	??_isr+13,tablat
  9917  00014E  C00F  FFF8         	movff	??_isr+12,tblptru
  9918  000152  C00E  FFF7         	movff	??_isr+11,tblptrh
  9919  000156  C00D  FFF6         	movff	??_isr+10,tblptrl
  9920  00015A  C00C  FFF4         	movff	??_isr+9,prodh
  9921  00015E  C00B  FFF3         	movff	??_isr+8,prodl
  9922  000162  C00A  FFDA         	movff	??_isr+7,fsr2h
  9923  000166  C009  FFD9         	movff	??_isr+6,fsr2l
  9924  00016A  C008  FFE2         	movff	??_isr+5,fsr1h
  9925  00016E  C007  FFE1         	movff	??_isr+4,fsr1l
  9926  000172  C006  FFEA         	movff	??_isr+3,fsr0h
  9927  000176  C005  FFE9         	movff	??_isr+2,fsr0l
  9928  00017A  C004  FFFB         	movff	??_isr+1,pclatu
  9929  00017E  C003  FFFA         	movff	??_isr,pclath
  9930  000182  924B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9931  000184  0011               	retfie		f
  9932  000186                     __end_of_isr:
  9933                           	opt stack 0
  9934                           pclatu	equ	0xFFB
  9935                           pclath	equ	0xFFA
  9936                           tblptru	equ	0xFF8
  9937                           tblptrh	equ	0xFF7
  9938                           tblptrl	equ	0xFF6
  9939                           tablat	equ	0xFF5
  9940                           prodh	equ	0xFF4
  9941                           prodl	equ	0xFF3
  9942                           intcon	equ	0xFF2
  9943                           postinc0	equ	0xFEE
  9944                           fsr0h	equ	0xFEA
  9945                           fsr0l	equ	0xFE9
  9946                           wreg	equ	0xFE8
  9947                           indf1	equ	0xFE7
  9948                           postdec1	equ	0xFE5
  9949                           plusw1	equ	0xFE3
  9950                           fsr1h	equ	0xFE2
  9951                           fsr1l	equ	0xFE1
  9952                           indf2	equ	0xFDF
  9953                           postinc2	equ	0xFDE
  9954                           plusw2	equ	0xFDB
  9955                           fsr2h	equ	0xFDA
  9956                           fsr2l	equ	0xFD9
  9957                           status	equ	0xFD8
  9958                           
  9959 ;; *************** function _reload_timer0 *****************
  9960 ;; Defined at:
  9961 ;;		line 221 in file "main.c"
  9962 ;; Parameters:    Size  Location     Type
  9963 ;;		None
  9964 ;; Auto vars:     Size  Location     Type
  9965 ;;		None
  9966 ;; Return value:  Size  Location     Type
  9967 ;;                  1    wreg      void 
  9968 ;; Registers used:
  9969 ;;		wreg, status,2
  9970 ;; Tracked objects:
  9971 ;;		On entry : 0/0
  9972 ;;		On exit  : 0/0
  9973 ;;		Unchanged: 0/0
  9974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9978 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9979 ;;Total ram usage:        0 bytes
  9980 ;; Hardware stack levels used:    1
  9981 ;; This function calls:
  9982 ;;		Nothing
  9983 ;; This function is called by:
  9984 ;;		_isr
  9985 ;; This function uses a non-reentrant model
  9986 ;;
  9987                           
  9988                           	psect	text39
  9989  0030B6                     __ptext39:
  9990                           	opt stack 0
  9991  0030B6                     _reload_timer0:
  9992                           	opt stack 22
  9993                           
  9994                           ;main.c: 223: TMR0L = ((65535-781)%256);
  9995                           
  9996                           ;incstack = 0
  9997  0030B6  0EF2               	movlw	242
  9998  0030B8  6ED6               	movwf	4054,c	;volatile
  9999                           
 10000                           ;main.c: 224: TMR0H = ((65535-781)/256);
 10001  0030BA  0EFC               	movlw	252
 10002  0030BC  6ED7               	movwf	4055,c	;volatile
 10003  0030BE  0012               	return		;funcret
 10004  0030C0                     __end_of_reload_timer0:
 10005                           	opt stack 0
 10006                           pclatu	equ	0xFFB
 10007                           pclath	equ	0xFFA
 10008                           tblptru	equ	0xFF8
 10009                           tblptrh	equ	0xFF7
 10010                           tblptrl	equ	0xFF6
 10011                           tablat	equ	0xFF5
 10012                           prodh	equ	0xFF4
 10013                           prodl	equ	0xFF3
 10014                           intcon	equ	0xFF2
 10015                           postinc0	equ	0xFEE
 10016                           fsr0h	equ	0xFEA
 10017                           fsr0l	equ	0xFE9
 10018                           wreg	equ	0xFE8
 10019                           indf1	equ	0xFE7
 10020                           postdec1	equ	0xFE5
 10021                           plusw1	equ	0xFE3
 10022                           fsr1h	equ	0xFE2
 10023                           fsr1l	equ	0xFE1
 10024                           indf2	equ	0xFDF
 10025                           postinc2	equ	0xFDE
 10026                           plusw2	equ	0xFDB
 10027                           fsr2h	equ	0xFDA
 10028                           fsr2l	equ	0xFD9
 10029                           status	equ	0xFD8
 10030                           
 10031 ;; *************** function _enable_tmr4 *****************
 10032 ;; Defined at:
 10033 ;;		line 38 in file "io.c"
 10034 ;; Parameters:    Size  Location     Type
 10035 ;;		None
 10036 ;; Auto vars:     Size  Location     Type
 10037 ;;		None
 10038 ;; Return value:  Size  Location     Type
 10039 ;;                  1    wreg      void 
 10040 ;; Registers used:
 10041 ;;		wreg, status,2
 10042 ;; Tracked objects:
 10043 ;;		On entry : 0/0
 10044 ;;		On exit  : 0/0
 10045 ;;		Unchanged: 0/0
 10046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10050 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10051 ;;Total ram usage:        0 bytes
 10052 ;; Hardware stack levels used:    1
 10053 ;; This function calls:
 10054 ;;		Nothing
 10055 ;; This function is called by:
 10056 ;;		_isr
 10057 ;; This function uses a non-reentrant model
 10058 ;;
 10059                           
 10060                           	psect	text40
 10061  002F90                     __ptext40:
 10062                           	opt stack 0
 10063  002F90                     _enable_tmr4:
 10064                           	opt stack 22
 10065                           
 10066                           ;io.c: 40: TMR4 = 0x00;
 10067                           
 10068                           ;incstack = 0
 10069  002F90  0E00               	movlw	0
 10070  002F92  010F               	movlb	15	; () banked
 10071  002F94  6F53               	movwf	83,b	;volatile
 10072                           
 10073                           ;io.c: 41: T4CONbits.T4CKPS = 0b10;
 10074  002F96  5151               	movf	81,w,b	;volatile
 10075  002F98  0BFC               	andlw	-4
 10076  002F9A  0902               	iorlw	2
 10077  002F9C  6F51               	movwf	81,b	;volatile
 10078                           
 10079                           ; BSR set to: 15
 10080                           ;io.c: 42: T4CONbits.T4OUTPS = 0b1111;
 10081  002F9E  8751               	bsf	81,3,b	;volatile
 10082  002FA0  8951               	bsf	81,4,b	;volatile
 10083  002FA2  8B51               	bsf	81,5,b	;volatile
 10084  002FA4  8D51               	bsf	81,6,b	;volatile
 10085                           
 10086                           ; BSR set to: 15
 10087                           ;io.c: 43: T4CONbits.TMR4ON = 1;
 10088  002FA6  8551               	bsf	81,2,b	;volatile
 10089                           
 10090                           ; BSR set to: 15
 10091                           ;io.c: 44: PIE5bits.TMR4IE = 1;
 10092  002FA8  807D               	bsf	3965,0,c	;volatile
 10093                           
 10094                           ; BSR set to: 15
 10095                           ;io.c: 45: PIR5bits.TMR4IF = 0;
 10096  002FAA  907E               	bcf	3966,0,c	;volatile
 10097                           
 10098                           ; BSR set to: 15
 10099                           ;io.c: 46: INTCONbits.PEIE = 1;
 10100  002FAC  8CF2               	bsf	intcon,6,c	;volatile
 10101                           
 10102                           ; BSR set to: 15
 10103                           ;io.c: 47: INTCONbits.GIE = 1;
 10104  002FAE  8EF2               	bsf	intcon,7,c	;volatile
 10105                           
 10106                           ; BSR set to: 15
 10107  002FB0  0012               	return		;funcret
 10108  002FB2                     __end_of_enable_tmr4:
 10109                           	opt stack 0
 10110                           pclatu	equ	0xFFB
 10111                           pclath	equ	0xFFA
 10112                           tblptru	equ	0xFF8
 10113                           tblptrh	equ	0xFF7
 10114                           tblptrl	equ	0xFF6
 10115                           tablat	equ	0xFF5
 10116                           prodh	equ	0xFF4
 10117                           prodl	equ	0xFF3
 10118                           intcon	equ	0xFF2
 10119                           postinc0	equ	0xFEE
 10120                           fsr0h	equ	0xFEA
 10121                           fsr0l	equ	0xFE9
 10122                           wreg	equ	0xFE8
 10123                           indf1	equ	0xFE7
 10124                           postdec1	equ	0xFE5
 10125                           plusw1	equ	0xFE3
 10126                           fsr1h	equ	0xFE2
 10127                           fsr1l	equ	0xFE1
 10128                           indf2	equ	0xFDF
 10129                           postinc2	equ	0xFDE
 10130                           plusw2	equ	0xFDB
 10131                           fsr2h	equ	0xFDA
 10132                           fsr2l	equ	0xFD9
 10133                           status	equ	0xFD8
 10134                           
 10135 ;; *************** function _disable_tmr3 *****************
 10136 ;; Defined at:
 10137 ;;		line 202 in file "main.c"
 10138 ;; Parameters:    Size  Location     Type
 10139 ;;		None
 10140 ;; Auto vars:     Size  Location     Type
 10141 ;;		None
 10142 ;; Return value:  Size  Location     Type
 10143 ;;                  1    wreg      void 
 10144 ;; Registers used:
 10145 ;;		wreg, status,2
 10146 ;; Tracked objects:
 10147 ;;		On entry : 0/0
 10148 ;;		On exit  : 0/0
 10149 ;;		Unchanged: 0/0
 10150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10154 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10155 ;;Total ram usage:        0 bytes
 10156 ;; Hardware stack levels used:    1
 10157 ;; This function calls:
 10158 ;;		Nothing
 10159 ;; This function is called by:
 10160 ;;		_isr
 10161 ;; This function uses a non-reentrant model
 10162 ;;
 10163                           
 10164                           	psect	text41
 10165  003076                     __ptext41:
 10166                           	opt stack 0
 10167  003076                     _disable_tmr3:
 10168                           	opt stack 22
 10169                           
 10170                           ;main.c: 204: buttonPressCount = 0;
 10171                           
 10172                           ; BSR set to: 15
 10173                           ;incstack = 0
 10174  003076  0E00               	movlw	0
 10175  003078  6E42               	movwf	_buttonPressCount,c
 10176                           
 10177                           ;main.c: 205: tmr3_cnt = 0;
 10178  00307A  0E00               	movlw	0
 10179  00307C  6E3F               	movwf	_tmr3_cnt,c
 10180                           
 10181                           ;main.c: 206: T3CONbits.TMR3ON = 0;
 10182  00307E  90B1               	bcf	4017,0,c	;volatile
 10183                           
 10184                           ;main.c: 207: PIE2bits.TMR3IE = 0;
 10185  003080  92A0               	bcf	4000,1,c	;volatile
 10186  003082  0012               	return		;funcret
 10187  003084                     __end_of_disable_tmr3:
 10188                           	opt stack 0
 10189                           pclatu	equ	0xFFB
 10190                           pclath	equ	0xFFA
 10191                           tblptru	equ	0xFF8
 10192                           tblptrh	equ	0xFF7
 10193                           tblptrl	equ	0xFF6
 10194                           tablat	equ	0xFF5
 10195                           prodh	equ	0xFF4
 10196                           prodl	equ	0xFF3
 10197                           intcon	equ	0xFF2
 10198                           postinc0	equ	0xFEE
 10199                           fsr0h	equ	0xFEA
 10200                           fsr0l	equ	0xFE9
 10201                           wreg	equ	0xFE8
 10202                           indf1	equ	0xFE7
 10203                           postdec1	equ	0xFE5
 10204                           plusw1	equ	0xFE3
 10205                           fsr1h	equ	0xFE2
 10206                           fsr1l	equ	0xFE1
 10207                           indf2	equ	0xFDF
 10208                           postinc2	equ	0xFDE
 10209                           plusw2	equ	0xFDB
 10210                           fsr2h	equ	0xFDA
 10211                           fsr2l	equ	0xFD9
 10212                           status	equ	0xFD8
 10213                           
 10214 ;; *************** function _control_leds *****************
 10215 ;; Defined at:
 10216 ;;		line 69 in file "state.c"
 10217 ;; Parameters:    Size  Location     Type
 10218 ;;		None
 10219 ;; Auto vars:     Size  Location     Type
 10220 ;;		None
 10221 ;; Return value:  Size  Location     Type
 10222 ;;                  1    wreg      void 
 10223 ;; Registers used:
 10224 ;;		wreg, status,2, status,0
 10225 ;; Tracked objects:
 10226 ;;		On entry : 0/0
 10227 ;;		On exit  : 0/0
 10228 ;;		Unchanged: 0/0
 10229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10233 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10234 ;;Total ram usage:        0 bytes
 10235 ;; Hardware stack levels used:    1
 10236 ;; This function calls:
 10237 ;;		Nothing
 10238 ;; This function is called by:
 10239 ;;		_isr
 10240 ;; This function uses a non-reentrant model
 10241 ;;
 10242                           
 10243                           	psect	text42
 10244  0027E2                     __ptext42:
 10245                           	opt stack 0
 10246  0027E2                     _control_leds:
 10247                           	opt stack 22
 10248                           
 10249                           ;state.c: 71: switch (state)
 10250                           
 10251                           ;incstack = 0
 10252  0027E2  D058               	goto	i2l954
 10253  0027E4                     
 10254                           ;state.c: 74: if (waiting)
 10255  0027E4  5049               	movf	_waiting,w,c
 10256  0027E6  B4D8               	btfsc	status,2,c
 10257  0027E8  0012               	return	
 10258  0027EA  D007               	goto	i2l957
 10259  0027EC                     i2l958:
 10260                           
 10261                           ;state.c: 79: LATBbits.LB3=0;
 10262  0027EC  968A               	bcf	3978,3,c	;volatile
 10263                           
 10264                           ;state.c: 80: break;
 10265  0027EE  D00F               	goto	i2l959
 10266  0027F0                     i2l960:
 10267                           
 10268                           ;state.c: 82: LATBbits.LB3=1;
 10269  0027F0  868A               	bsf	3978,3,c	;volatile
 10270                           
 10271                           ;state.c: 83: break;
 10272  0027F2  D00D               	goto	i2l959
 10273  0027F4                     
 10274                           ;state.c: 85: gled_tmr0_tick = 0;
 10275  0027F4  0E00               	movlw	0
 10276  0027F6  6E41               	movwf	_gled_tmr0_tick,c
 10277                           
 10278                           ;state.c: 87: }
 10279                           
 10280                           ;state.c: 86: break;
 10281  0027F8  D00A               	goto	i2l959
 10282  0027FA                     i2l957:
 10283  0027FA  5041               	movf	_gled_tmr0_tick,w,c
 10284                           
 10285                           ; Switch size 1, requested type "space"
 10286                           ; Number of cases is 3, Range of values is 1 to 20
 10287                           ; switch strategies available:
 10288                           ; Name         Instructions Cycles
 10289                           ; simple_byte           10     6 (average)
 10290                           ;	Chosen strategy is simple_byte
 10291  0027FC  0A01               	xorlw	1	; case 1
 10292  0027FE  B4D8               	btfsc	status,2,c
 10293  002800  D7F5               	goto	i2l958
 10294  002802  0A04               	xorlw	4	; case 5
 10295  002804  B4D8               	btfsc	status,2,c
 10296  002806  D7F4               	goto	i2l960
 10297  002808  0A11               	xorlw	17	; case 20
 10298  00280A  B4D8               	btfsc	status,2,c
 10299  00280C  D7F3               	goto	i2l961
 10300  00280E                     i2l959:
 10301                           
 10302                           ;state.c: 88: LATCbits.LC4=1;
 10303  00280E  888B               	bsf	3979,4,c	;volatile
 10304                           
 10305                           ;state.c: 89: bled_tmr0_tick = 0;
 10306  002810  0E00               	movlw	0
 10307  002812  6E40               	movwf	_bled_tmr0_tick,c
 10308                           
 10309                           ;state.c: 90: }
 10310                           ;state.c: 105: break;
 10311  002814  0012               	return	
 10312  002816                     i2l965:
 10313                           
 10314                           ;state.c: 111: LATCbits.LC4=0;
 10315  002816  988B               	bcf	3979,4,c	;volatile
 10316                           
 10317                           ;state.c: 112: break;
 10318  002818  D00F               	goto	i2l966
 10319  00281A                     i2l967:
 10320                           
 10321                           ;state.c: 114: LATCbits.LC4=1;
 10322  00281A  888B               	bsf	3979,4,c	;volatile
 10323                           
 10324                           ;state.c: 115: break;
 10325  00281C  D00D               	goto	i2l966
 10326  00281E                     
 10327                           ;state.c: 117: bled_tmr0_tick = 0;
 10328  00281E  0E00               	movlw	0
 10329  002820  6E40               	movwf	_bled_tmr0_tick,c
 10330                           
 10331                           ;state.c: 119: }
 10332                           
 10333                           ;state.c: 118: break;
 10334  002822  D00A               	goto	i2l966
 10335  002824  5040               	movf	_bled_tmr0_tick,w,c
 10336                           
 10337                           ; Switch size 1, requested type "space"
 10338                           ; Number of cases is 3, Range of values is 1 to 20
 10339                           ; switch strategies available:
 10340                           ; Name         Instructions Cycles
 10341                           ; simple_byte           10     6 (average)
 10342                           ;	Chosen strategy is simple_byte
 10343  002826  0A01               	xorlw	1	; case 1
 10344  002828  B4D8               	btfsc	status,2,c
 10345  00282A  D7F5               	goto	i2l965
 10346  00282C  0A04               	xorlw	4	; case 5
 10347  00282E  B4D8               	btfsc	status,2,c
 10348  002830  D7F4               	goto	i2l967
 10349  002832  0A11               	xorlw	17	; case 20
 10350  002834  B4D8               	btfsc	status,2,c
 10351  002836  D7F3               	goto	i2l968
 10352  002838                     i2l966:
 10353                           
 10354                           ;state.c: 120: LATBbits.LB3=1;
 10355  002838  868A               	bsf	3978,3,c	;volatile
 10356                           
 10357                           ;state.c: 121: gled_tmr0_tick = 0;
 10358  00283A  0E00               	movlw	0
 10359  00283C  6E41               	movwf	_gled_tmr0_tick,c
 10360                           
 10361                           ;state.c: 122: break;
 10362  00283E  0012               	return	
 10363  002840                     i2l971:
 10364                           
 10365                           ;state.c: 128: LATCbits.LC4=0;
 10366  002840  988B               	bcf	3979,4,c	;volatile
 10367                           
 10368                           ;state.c: 129: break;
 10369  002842  D00F               	goto	i2l972
 10370  002844                     i2l973:
 10371                           
 10372                           ;state.c: 131: LATCbits.LC4=1;
 10373  002844  888B               	bsf	3979,4,c	;volatile
 10374                           
 10375                           ;state.c: 132: break;
 10376  002846  D00D               	goto	i2l972
 10377  002848                     
 10378                           ;state.c: 134: bled_tmr0_tick = 0;
 10379  002848  0E00               	movlw	0
 10380  00284A  6E40               	movwf	_bled_tmr0_tick,c
 10381                           
 10382                           ;state.c: 136: }
 10383                           
 10384                           ;state.c: 135: break;
 10385  00284C  D00A               	goto	i2l972
 10386  00284E  5040               	movf	_bled_tmr0_tick,w,c
 10387                           
 10388                           ; Switch size 1, requested type "space"
 10389                           ; Number of cases is 3, Range of values is 1 to 20
 10390                           ; switch strategies available:
 10391                           ; Name         Instructions Cycles
 10392                           ; simple_byte           10     6 (average)
 10393                           ;	Chosen strategy is simple_byte
 10394  002850  0A01               	xorlw	1	; case 1
 10395  002852  B4D8               	btfsc	status,2,c
 10396  002854  D7F5               	goto	i2l971
 10397  002856  0A04               	xorlw	4	; case 5
 10398  002858  B4D8               	btfsc	status,2,c
 10399  00285A  D7F4               	goto	i2l973
 10400  00285C  0A11               	xorlw	17	; case 20
 10401  00285E  B4D8               	btfsc	status,2,c
 10402  002860  D7F3               	goto	i2l974
 10403  002862                     i2l972:
 10404                           
 10405                           ;state.c: 137: LATBbits.LB3=0;
 10406  002862  968A               	bcf	3978,3,c	;volatile
 10407                           
 10408                           ;state.c: 138: gled_tmr0_tick = 0;
 10409  002864  0E00               	movlw	0
 10410  002866  6E41               	movwf	_gled_tmr0_tick,c
 10411                           
 10412                           ;state.c: 139: break;
 10413  002868  0012               	return	
 10414  00286A                     i2l977:
 10415                           
 10416                           ;state.c: 145: LATBbits.LB3=0;
 10417  00286A  968A               	bcf	3978,3,c	;volatile
 10418                           
 10419                           ;state.c: 146: break;
 10420  00286C  D00F               	goto	i2l978
 10421  00286E                     i2l979:
 10422                           
 10423                           ;state.c: 148: LATBbits.LB3=1;
 10424  00286E  868A               	bsf	3978,3,c	;volatile
 10425                           
 10426                           ;state.c: 149: break;
 10427  002870  D00D               	goto	i2l978
 10428  002872                     
 10429                           ;state.c: 151: gled_tmr0_tick = 0;
 10430  002872  0E00               	movlw	0
 10431  002874  6E41               	movwf	_gled_tmr0_tick,c
 10432                           
 10433                           ;state.c: 153: }
 10434                           
 10435                           ;state.c: 152: break;
 10436  002876  D00A               	goto	i2l978
 10437  002878  5041               	movf	_gled_tmr0_tick,w,c
 10438                           
 10439                           ; Switch size 1, requested type "space"
 10440                           ; Number of cases is 3, Range of values is 1 to 20
 10441                           ; switch strategies available:
 10442                           ; Name         Instructions Cycles
 10443                           ; simple_byte           10     6 (average)
 10444                           ;	Chosen strategy is simple_byte
 10445  00287A  0A01               	xorlw	1	; case 1
 10446  00287C  B4D8               	btfsc	status,2,c
 10447  00287E  D7F5               	goto	i2l977
 10448  002880  0A04               	xorlw	4	; case 5
 10449  002882  B4D8               	btfsc	status,2,c
 10450  002884  D7F4               	goto	i2l979
 10451  002886  0A11               	xorlw	17	; case 20
 10452  002888  B4D8               	btfsc	status,2,c
 10453  00288A  D7F3               	goto	i2l980
 10454  00288C                     i2l978:
 10455                           
 10456                           ;state.c: 154: LATCbits.LC4=0;
 10457  00288C  988B               	bcf	3979,4,c	;volatile
 10458                           
 10459                           ;state.c: 155: bled_tmr0_tick = 0;
 10460  00288E  0E00               	movlw	0
 10461  002890  6E40               	movwf	_bled_tmr0_tick,c
 10462                           
 10463                           ;state.c: 157: }
 10464                           
 10465                           ;state.c: 156: break;
 10466  002892  0012               	return	
 10467  002894                     i2l954:
 10468  002894  5031               	movf	_state,w,c
 10469                           
 10470                           ; Switch size 1, requested type "space"
 10471                           ; Number of cases is 4, Range of values is 0 to 3
 10472                           ; switch strategies available:
 10473                           ; Name         Instructions Cycles
 10474                           ; simple_byte           13     7 (average)
 10475                           ;	Chosen strategy is simple_byte
 10476  002896  0A00               	xorlw	0	; case 0
 10477  002898  B4D8               	btfsc	status,2,c
 10478  00289A  D7A4               	goto	i2l955
 10479  00289C  0A01               	xorlw	1	; case 1
 10480  00289E  B4D8               	btfsc	status,2,c
 10481  0028A0  D7C1               	goto	i2l964
 10482  0028A2  0A03               	xorlw	3	; case 2
 10483  0028A4  B4D8               	btfsc	status,2,c
 10484  0028A6  D7D3               	goto	i2l970
 10485  0028A8  0A01               	xorlw	1	; case 3
 10486  0028AA  A4D8               	btfss	status,2,c
 10487  0028AC  0012               	return	
 10488  0028AE  D7E4               	goto	i2l976
 10489  0028B0                     __end_of_control_leds:
 10490                           	opt stack 0
 10491                           pclatu	equ	0xFFB
 10492                           pclath	equ	0xFFA
 10493                           tblptru	equ	0xFF8
 10494                           tblptrh	equ	0xFF7
 10495                           tblptrl	equ	0xFF6
 10496                           tablat	equ	0xFF5
 10497                           prodh	equ	0xFF4
 10498                           prodl	equ	0xFF3
 10499                           intcon	equ	0xFF2
 10500                           postinc0	equ	0xFEE
 10501                           fsr0h	equ	0xFEA
 10502                           fsr0l	equ	0xFE9
 10503                           wreg	equ	0xFE8
 10504                           indf1	equ	0xFE7
 10505                           postdec1	equ	0xFE5
 10506                           plusw1	equ	0xFE3
 10507                           fsr1h	equ	0xFE2
 10508                           fsr1l	equ	0xFE1
 10509                           indf2	equ	0xFDF
 10510                           postinc2	equ	0xFDE
 10511                           plusw2	equ	0xFDB
 10512                           fsr2h	equ	0xFDA
 10513                           fsr2l	equ	0xFD9
 10514                           status	equ	0xFD8
 10515                           
 10516 ;; *************** function _check_state_timeout *****************
 10517 ;; Defined at:
 10518 ;;		line 7 in file "io.c"
 10519 ;; Parameters:    Size  Location     Type
 10520 ;;		None
 10521 ;; Auto vars:     Size  Location     Type
 10522 ;;		None
 10523 ;; Return value:  Size  Location     Type
 10524 ;;                  1    wreg      void 
 10525 ;; Registers used:
 10526 ;;		wreg, status,2, status,0, cstack
 10527 ;; Tracked objects:
 10528 ;;		On entry : 0/0
 10529 ;;		On exit  : 0/0
 10530 ;;		Unchanged: 0/0
 10531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10534 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10535 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10536 ;;Total ram usage:        2 bytes
 10537 ;; Hardware stack levels used:    1
 10538 ;; Hardware stack levels required when called:    1
 10539 ;; This function calls:
 10540 ;;		_disable_tmr4
 10541 ;; This function is called by:
 10542 ;;		_isr
 10543 ;; This function uses a non-reentrant model
 10544 ;;
 10545                           
 10546                           	psect	text43
 10547  002AFE                     __ptext43:
 10548                           	opt stack 0
 10549  002AFE                     _check_state_timeout:
 10550                           	opt stack 21
 10551                           
 10552                           ;io.c: 9: switch (state)
 10553                           
 10554                           ;incstack = 0
 10555  002AFE  D042               	goto	i2l1144
 10556  002B00                     
 10557                           ;io.c: 12: if (t4_tick++ >= 3660)
 10558  002B00  0100               	movlb	0	; () banked
 10559  002B02  51E6               	movf	_t4_tick& (0+255),w,b
 10560  002B04  6E01               	movwf	??_check_state_timeout& (0+255),c
 10561  002B06  51E7               	movf	(_t4_tick+1)& (0+255),w,b
 10562  002B08  6E02               	movwf	(??_check_state_timeout+1)& (0+255),c
 10563  002B0A  4BE6               	infsnz	_t4_tick& (0+255),f,b
 10564  002B0C  2BE7               	incf	(_t4_tick+1)& (0+255),f,b
 10565  002B0E  0E4C               	movlw	76
 10566  002B10  5C01               	subwf	??_check_state_timeout,w,c
 10567  002B12  0E0E               	movlw	14
 10568  002B14  5802               	subwfb	??_check_state_timeout+1,w,c
 10569  002B16  A0D8               	btfss	status,0,c
 10570  002B18  0012               	return	
 10571                           
 10572                           ; BSR set to: 0
 10573                           ;io.c: 13: {
 10574                           ;io.c: 14: t4_tick = 0;
 10575  002B1A  0E00               	movlw	0
 10576  002B1C  6FE7               	movwf	(_t4_tick+1)& (0+255),b
 10577  002B1E  0E00               	movlw	0
 10578  002B20  6FE6               	movwf	_t4_tick& (0+255),b
 10579                           
 10580                           ; BSR set to: 0
 10581                           ;io.c: 15: disable_tmr4();
 10582  002B22  EC42  F018         	call	_disable_tmr4	;wreg free
 10583                           
 10584                           ;io.c: 16: state = OPERATIONAL;
 10585  002B26  0E00               	movlw	0
 10586  002B28  6E31               	movwf	_state,c
 10587                           
 10588                           ;io.c: 17: }
 10589                           ;io.c: 18: break;
 10590  002B2A  0012               	return	
 10591  002B2C                     
 10592                           ;io.c: 20: if (t4_tick++ >= 1830)
 10593  002B2C  0100               	movlb	0	; () banked
 10594  002B2E  51E6               	movf	_t4_tick& (0+255),w,b
 10595  002B30  6E01               	movwf	??_check_state_timeout& (0+255),c
 10596  002B32  51E7               	movf	(_t4_tick+1)& (0+255),w,b
 10597  002B34  6E02               	movwf	(??_check_state_timeout+1)& (0+255),c
 10598  002B36  4BE6               	infsnz	_t4_tick& (0+255),f,b
 10599  002B38  2BE7               	incf	(_t4_tick+1)& (0+255),f,b
 10600  002B3A  0E26               	movlw	38
 10601  002B3C  5C01               	subwf	??_check_state_timeout,w,c
 10602  002B3E  0E07               	movlw	7
 10603  002B40  5802               	subwfb	??_check_state_timeout+1,w,c
 10604  002B42  A0D8               	btfss	status,0,c
 10605  002B44  0012               	return	
 10606                           
 10607                           ; BSR set to: 0
 10608                           ;io.c: 21: {
 10609                           ;io.c: 22: t4_tick = 0;
 10610  002B46  0E00               	movlw	0
 10611  002B48  6FE7               	movwf	(_t4_tick+1)& (0+255),b
 10612  002B4A  0E00               	movlw	0
 10613  002B4C  6FE6               	movwf	_t4_tick& (0+255),b
 10614                           
 10615                           ; BSR set to: 0
 10616                           ;io.c: 23: disable_tmr4();
 10617  002B4E  EC42  F018         	call	_disable_tmr4	;wreg free
 10618                           
 10619                           ;io.c: 24: state = OPERATIONAL;
 10620  002B52  0E00               	movlw	0
 10621  002B54  6E31               	movwf	_state,c
 10622                           
 10623                           ;io.c: 25: }
 10624                           ;io.c: 26: break;
 10625  002B56  0012               	return	
 10626  002B58                     
 10627                           ;io.c: 28: if (t4_tick++ >= 1830)
 10628  002B58  0100               	movlb	0	; () banked
 10629  002B5A  51E6               	movf	_t4_tick& (0+255),w,b
 10630  002B5C  6E01               	movwf	??_check_state_timeout& (0+255),c
 10631  002B5E  51E7               	movf	(_t4_tick+1)& (0+255),w,b
 10632  002B60  6E02               	movwf	(??_check_state_timeout+1)& (0+255),c
 10633  002B62  4BE6               	infsnz	_t4_tick& (0+255),f,b
 10634  002B64  2BE7               	incf	(_t4_tick+1)& (0+255),f,b
 10635  002B66  0E26               	movlw	38
 10636  002B68  5C01               	subwf	??_check_state_timeout,w,c
 10637  002B6A  0E07               	movlw	7
 10638  002B6C  5802               	subwfb	??_check_state_timeout+1,w,c
 10639  002B6E  A0D8               	btfss	status,0,c
 10640  002B70  0012               	return	
 10641                           
 10642                           ; BSR set to: 0
 10643                           ;io.c: 29: {
 10644                           ;io.c: 30: t4_tick = 0;
 10645  002B72  0E00               	movlw	0
 10646  002B74  6FE7               	movwf	(_t4_tick+1)& (0+255),b
 10647  002B76  0E00               	movlw	0
 10648  002B78  6FE6               	movwf	_t4_tick& (0+255),b
 10649                           
 10650                           ; BSR set to: 0
 10651                           ;io.c: 31: disable_tmr4();
 10652  002B7A  EC42  F018         	call	_disable_tmr4	;wreg free
 10653                           
 10654                           ;io.c: 32: state = OPERATIONAL;
 10655  002B7E  0E00               	movlw	0
 10656  002B80  6E31               	movwf	_state,c
 10657                           
 10658                           ;io.c: 33: }
 10659                           ;io.c: 34: }
 10660  002B82  0012               	return	
 10661  002B84                     i2l1144:
 10662  002B84  5031               	movf	_state,w,c
 10663                           
 10664                           ; Switch size 1, requested type "space"
 10665                           ; Number of cases is 3, Range of values is 1 to 3
 10666                           ; switch strategies available:
 10667                           ; Name         Instructions Cycles
 10668                           ; simple_byte           10     6 (average)
 10669                           ;	Chosen strategy is simple_byte
 10670  002B86  0A01               	xorlw	1	; case 1
 10671  002B88  B4D8               	btfsc	status,2,c
 10672  002B8A  D7BA               	goto	i2l1145
 10673  002B8C  0A03               	xorlw	3	; case 2
 10674  002B8E  B4D8               	btfsc	status,2,c
 10675  002B90  D7CD               	goto	i2l1148
 10676  002B92  0A01               	xorlw	1	; case 3
 10677  002B94  A4D8               	btfss	status,2,c
 10678  002B96  0012               	return	
 10679  002B98  D7DF               	goto	i2l1150
 10680  002B9A                     __end_of_check_state_timeout:
 10681                           	opt stack 0
 10682                           pclatu	equ	0xFFB
 10683                           pclath	equ	0xFFA
 10684                           tblptru	equ	0xFF8
 10685                           tblptrh	equ	0xFF7
 10686                           tblptrl	equ	0xFF6
 10687                           tablat	equ	0xFF5
 10688                           prodh	equ	0xFF4
 10689                           prodl	equ	0xFF3
 10690                           intcon	equ	0xFF2
 10691                           postinc0	equ	0xFEE
 10692                           fsr0h	equ	0xFEA
 10693                           fsr0l	equ	0xFE9
 10694                           wreg	equ	0xFE8
 10695                           indf1	equ	0xFE7
 10696                           postdec1	equ	0xFE5
 10697                           plusw1	equ	0xFE3
 10698                           fsr1h	equ	0xFE2
 10699                           fsr1l	equ	0xFE1
 10700                           indf2	equ	0xFDF
 10701                           postinc2	equ	0xFDE
 10702                           plusw2	equ	0xFDB
 10703                           fsr2h	equ	0xFDA
 10704                           fsr2l	equ	0xFD9
 10705                           status	equ	0xFD8
 10706                           
 10707 ;; *************** function _disable_tmr4 *****************
 10708 ;; Defined at:
 10709 ;;		line 50 in file "io.c"
 10710 ;; Parameters:    Size  Location     Type
 10711 ;;		None
 10712 ;; Auto vars:     Size  Location     Type
 10713 ;;		None
 10714 ;; Return value:  Size  Location     Type
 10715 ;;                  1    wreg      void 
 10716 ;; Registers used:
 10717 ;;		wreg, status,2
 10718 ;; Tracked objects:
 10719 ;;		On entry : 0/0
 10720 ;;		On exit  : 0/0
 10721 ;;		Unchanged: 0/0
 10722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10726 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10727 ;;Total ram usage:        0 bytes
 10728 ;; Hardware stack levels used:    1
 10729 ;; This function calls:
 10730 ;;		Nothing
 10731 ;; This function is called by:
 10732 ;;		_check_state_timeout
 10733 ;; This function uses a non-reentrant model
 10734 ;;
 10735                           
 10736                           	psect	text44
 10737  003084                     __ptext44:
 10738                           	opt stack 0
 10739  003084                     _disable_tmr4:
 10740                           	opt stack 21
 10741                           
 10742                           ;io.c: 52: PIE5bits.TMR4IE = 0;
 10743                           
 10744                           ;incstack = 0
 10745  003084  907D               	bcf	3965,0,c	;volatile
 10746                           
 10747                           ;io.c: 53: PIR5bits.TMR4IF = 0;
 10748  003086  907E               	bcf	3966,0,c	;volatile
 10749                           
 10750                           ;io.c: 54: T4CONbits.TMR4ON = 0;
 10751  003088  010F               	movlb	15	; () banked
 10752  00308A  9551               	bcf	81,2,b	;volatile
 10753                           
 10754                           ; BSR set to: 15
 10755                           ;io.c: 55: TMR4 = 0x00;
 10756  00308C  0E00               	movlw	0
 10757  00308E  6F53               	movwf	83,b	;volatile
 10758                           
 10759                           ; BSR set to: 15
 10760  003090  0012               	return		;funcret
 10761  003092                     __end_of_disable_tmr4:
 10762                           	opt stack 0
 10763                           pclatu	equ	0xFFB
 10764                           pclath	equ	0xFFA
 10765                           tblptru	equ	0xFF8
 10766                           tblptrh	equ	0xFF7
 10767                           tblptrl	equ	0xFF6
 10768                           tablat	equ	0xFF5
 10769                           prodh	equ	0xFF4
 10770                           prodl	equ	0xFF3
 10771                           intcon	equ	0xFF2
 10772                           postinc0	equ	0xFEE
 10773                           fsr0h	equ	0xFEA
 10774                           fsr0l	equ	0xFE9
 10775                           wreg	equ	0xFE8
 10776                           indf1	equ	0xFE7
 10777                           postdec1	equ	0xFE5
 10778                           plusw1	equ	0xFE3
 10779                           fsr1h	equ	0xFE2
 10780                           fsr1l	equ	0xFE1
 10781                           indf2	equ	0xFDF
 10782                           postinc2	equ	0xFDE
 10783                           plusw2	equ	0xFDB
 10784                           fsr2h	equ	0xFDA
 10785                           fsr2l	equ	0xFD9
 10786                           status	equ	0xFD8
 10787                           pclatu	equ	0xFFB
 10788                           pclath	equ	0xFFA
 10789                           tblptru	equ	0xFF8
 10790                           tblptrh	equ	0xFF7
 10791                           tblptrl	equ	0xFF6
 10792                           tablat	equ	0xFF5
 10793                           prodh	equ	0xFF4
 10794                           prodl	equ	0xFF3
 10795                           intcon	equ	0xFF2
 10796                           postinc0	equ	0xFEE
 10797                           fsr0h	equ	0xFEA
 10798                           fsr0l	equ	0xFE9
 10799                           wreg	equ	0xFE8
 10800                           indf1	equ	0xFE7
 10801                           postdec1	equ	0xFE5
 10802                           plusw1	equ	0xFE3
 10803                           fsr1h	equ	0xFE2
 10804                           fsr1l	equ	0xFE1
 10805                           indf2	equ	0xFDF
 10806                           postinc2	equ	0xFDE
 10807                           plusw2	equ	0xFDB
 10808                           fsr2h	equ	0xFDA
 10809                           fsr2l	equ	0xFD9
 10810                           status	equ	0xFD8
 10811                           
 10812                           	psect	rparam
 10813  0000                     pclatu	equ	0xFFB
 10814                           pclath	equ	0xFFA
 10815                           tblptru	equ	0xFF8
 10816                           tblptrh	equ	0xFF7
 10817                           tblptrl	equ	0xFF6
 10818                           tablat	equ	0xFF5
 10819                           prodh	equ	0xFF4
 10820                           prodl	equ	0xFF3
 10821                           intcon	equ	0xFF2
 10822                           postinc0	equ	0xFEE
 10823                           fsr0h	equ	0xFEA
 10824                           fsr0l	equ	0xFE9
 10825                           wreg	equ	0xFE8
 10826                           indf1	equ	0xFE7
 10827                           postdec1	equ	0xFE5
 10828                           plusw1	equ	0xFE3
 10829                           fsr1h	equ	0xFE2
 10830                           fsr1l	equ	0xFE1
 10831                           indf2	equ	0xFDF
 10832                           postinc2	equ	0xFDE
 10833                           plusw2	equ	0xFDB
 10834                           fsr2h	equ	0xFDA
 10835                           fsr2l	equ	0xFD9
 10836                           status	equ	0xFD8
 10837                           
 10838                           	psect	temp
 10839  00004B                     btemp:
 10840                           	opt stack 0
 10841  00004B                     	ds	1
 10842  0000                     int$flags	set	btemp
 10843  0000                     wtemp6	set	btemp+1
 10844                           pclatu	equ	0xFFB
 10845                           pclath	equ	0xFFA
 10846                           tblptru	equ	0xFF8
 10847                           tblptrh	equ	0xFF7
 10848                           tblptrl	equ	0xFF6
 10849                           tablat	equ	0xFF5
 10850                           prodh	equ	0xFF4
 10851                           prodl	equ	0xFF3
 10852                           intcon	equ	0xFF2
 10853                           postinc0	equ	0xFEE
 10854                           fsr0h	equ	0xFEA
 10855                           fsr0l	equ	0xFE9
 10856                           wreg	equ	0xFE8
 10857                           indf1	equ	0xFE7
 10858                           postdec1	equ	0xFE5
 10859                           plusw1	equ	0xFE3
 10860                           fsr1h	equ	0xFE2
 10861                           fsr1l	equ	0xFE1
 10862                           indf2	equ	0xFDF
 10863                           postinc2	equ	0xFDE
 10864                           plusw2	equ	0xFDB
 10865                           fsr2h	equ	0xFDA
 10866                           fsr2l	equ	0xFD9
 10867                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    43
    Data        277
    BSS         415
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     46      74
    BANK0           160    134     160
    BANK1           256      0     253
    BANK2           256      0     225
    BANK3           256      0     160
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    program_field@data_buf	PTR unsigned char  size(2) Largest target is 60
		 -> referenceBuf(BANK3[60]), 

    md_uart_write_str_ok@data	PTR unsigned char  size(2) Largest target is 3895
		 -> sms_buf(BANK2[40]), ph_num(BANK1[9]), send_sms_ok@msgIndex(COMRAM[3]), send_sms_ok@cmgs(COMRAM[9]), 
		 -> RAM(DATA[3895]), read_sms@cmgd(BANK0[9]), read_sms@msgIndex(BANK0[3]), read_sms@cmgr(BANK0[9]), 
		 -> read_sms@cmgl(BANK0[16]), start_sms_ok@cnmi(BANK0[14]), start_sms_ok@cpms(BANK0[25]), start_sms_ok@cmgf(BANK0[12]), 
		 -> startup_ok@csq(BANK0[9]), startup_ok@cereg(BANK0[12]), startup_ok@creg(BANK0[11]), startup_ok@cpin(BANK0[11]), 
		 -> startup_ok@queryVersion(BANK0[10]), startup_ok@ledpattern(BANK0[12]), startup_ok@ledCfg(BANK0[16]), startup_ok@baud(BANK0[16]), 
		 -> startup_ok@cmee(BANK0[12]), startup_ok@ate(BANK0[7]), startup_ok@at(BANK0[5]), 


Critical Paths under _main in COMRAM

    _check_state->_listen_sms
    _listen_sms->_send_sms_ok
    _start_sms_ok->_md_uart_write_str_ok
    _start_modem->_check_md_state
    _write_defaults->_ee_read
    _write_defaults->_ee_write
    _save_first_run->_ee_write
    _is_first_run->_ee_read
    _startup_ok->_parse_csq_ok
    _send_sms_ok->_md_uart_write_str_ok
    _read_sms->_parse_cmgr
    _parse_cmgr->_program_field
    _program_field->___awdiv
    _md_uart_write_str_ok->_md_uart_send
    _check_sms_timer->_ee_read_ascii_to_value
    _ee_read_ascii_to_value->_ee_read

Critical Paths under _isr in COMRAM

    _isr->_check_state_timeout

Critical Paths under _main in BANK0

    _main->_check_state
    _check_state->_listen_sms
    _check_md_state->_startup_ok
    _read_sms->_parse_cmgr

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   70214
                        _check_state
                       _init_md_uart
                           _init_pic
 ---------------------------------------------------------------------------------
 (1) _init_pic                                             0     0      0       0
                        _enable_ints
 ---------------------------------------------------------------------------------
 (2) _enable_ints                                          0     0      0       0
                       _start_timer0
 ---------------------------------------------------------------------------------
 (3) _start_timer0                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _check_state                                          1     1      0   70214
                                            133 BANK0      1     1      0
                         _listen_sms
                  _reload_tmr3_pt25s
 ---------------------------------------------------------------------------------
 (2) _reload_tmr3_pt25s                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _listen_sms                                           2     2      0   70214
                                             45 COMRAM     1     1      0
                                            132 BANK0      1     1      0
                    _check_sms_timer
                           _read_sms
                        _send_sms_ok
                        _start_modem
                       _start_sms_ok
                    _start_sms_timer
 ---------------------------------------------------------------------------------
 (3) _start_sms_timer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _start_sms_ok                                        51    51      0    9867
                                              0 BANK0     51    51      0
                        _clear_at_ok
                       _init_md_uart
               _md_uart_write_str_ok
 ---------------------------------------------------------------------------------
 (3) _start_modem                                          2     2      0   27688
                                             37 COMRAM     2     2      0
                     _check_md_state
                       _is_first_run
                     _save_first_run
                _start_md_boot_timer
                     _write_defaults
 ---------------------------------------------------------------------------------
 (4) _write_defaults                                       6     6      0    8756
                                             23 COMRAM     6     6      0
                            _ee_read
                           _ee_write
 ---------------------------------------------------------------------------------
 (4) _start_md_boot_timer                                  0     0      0       0
                  _reload_tmr5_pt25s
 ---------------------------------------------------------------------------------
 (4) _save_first_run                                       0     0      0    5673
                           _ee_write
 ---------------------------------------------------------------------------------
 (4) _is_first_run                                         0     0      0     906
                            _ee_read
 ---------------------------------------------------------------------------------
 (4) _check_md_state                                       1     1      0   12353
                                             36 COMRAM     1     1      0
                       _disable_tmr5
                         _startup_ok
 ---------------------------------------------------------------------------------
 (5) _startup_ok                                         132   132      0   12254
                                              0 BANK0    132   132      0
                        _clear_at_ok
                       _init_md_uart
               _md_uart_write_str_ok
                     _parse_cereg_ok
                      _parse_creg_ok
                       _parse_csq_ok
 ---------------------------------------------------------------------------------
 (6) _parse_csq_ok                                        16    16      0     891
                                             20 COMRAM    16    16      0
 ---------------------------------------------------------------------------------
 (6) _parse_creg_ok                                       12    12      0     554
                                             20 COMRAM    12    12      0
 ---------------------------------------------------------------------------------
 (6) _parse_cereg_ok                                      13    13      0     619
                                             20 COMRAM    13    13      0
 ---------------------------------------------------------------------------------
 (3) _send_sms_ok                                         17    17      0   10065
                                             28 COMRAM    17    17      0
                        _clear_at_ok
                       _init_md_uart
               _md_uart_write_str_ok
 ---------------------------------------------------------------------------------
 (3) _read_sms                                            39    39      0   21304
                                             39 COMRAM     2     2      0
                                             22 BANK0     37    37      0
                        _clear_at_ok
                       _init_md_uart
               _md_uart_write_str_ok
                         _parse_cmgl
                         _parse_cmgr
 ---------------------------------------------------------------------------------
 (4) _parse_cmgr                                          24    24      0   11007
                                             37 COMRAM     2     2      0
                                              0 BANK0     22    22      0
                            _ee_read
                      _program_field
 ---------------------------------------------------------------------------------
 (5) _program_field                                        9     6      3    8384
                                             28 COMRAM     9     6      3
                            ___awdiv
                            ___awmod
                           _ee_write
 ---------------------------------------------------------------------------------
 (5) _ee_write                                             3     1      2    5673
                                             20 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     613
                                             20 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     625
                                             20 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (4) _parse_cmgl                                           8     8      0     359
                                             20 COMRAM     8     8      0
 ---------------------------------------------------------------------------------
 (4) _md_uart_write_str_ok                                 7     2      5    9747
                                             21 COMRAM     7     2      5
                       _disable_tmr5
                    _enable_md_rxint
                       _md_uart_send
                  _reload_tmr5_pt25s
 ---------------------------------------------------------------------------------
 (5) _reload_tmr5_pt25s                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _md_uart_send                                         1     1      0      31
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _enable_md_rxint                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _disable_tmr5                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_md_uart                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _clear_at_ok                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _check_sms_timer                                      1     1      0    1225
                                             26 COMRAM     1     1      0
             _ee_read_ascii_to_value
                     _stop_sms_timer
 ---------------------------------------------------------------------------------
 (4) _stop_sms_timer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ee_read_ascii_to_value                               3     2      1    1191
                                             23 COMRAM     3     2      1
                            _ee_read
 ---------------------------------------------------------------------------------
 (5) _ee_read                                              3     2      1     906
                                             20 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _isr                                                 18    18      0       0
                                              2 COMRAM    18    18      0
                _check_state_timeout
                       _control_leds
                       _disable_tmr3
                        _enable_tmr4
                      _reload_timer0
 ---------------------------------------------------------------------------------
 (9) _reload_timer0                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _enable_tmr4                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _disable_tmr3                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _control_leds                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _check_state_timeout                                  2     2      0       0
                                              0 COMRAM     2     2      0
                       _disable_tmr4
 ---------------------------------------------------------------------------------
 (10) _disable_tmr4                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _check_state
     _listen_sms
       _check_sms_timer
         _ee_read_ascii_to_value
           _ee_read
         _stop_sms_timer
       _read_sms
         _clear_at_ok
         _init_md_uart
         _md_uart_write_str_ok
           _disable_tmr5
           _enable_md_rxint
           _md_uart_send
           _reload_tmr5_pt25s
         _parse_cmgl
         _parse_cmgr
           _ee_read
           _program_field
             ___awdiv
             ___awmod
             _ee_write
       _send_sms_ok
         _clear_at_ok
         _init_md_uart
         _md_uart_write_str_ok
           _disable_tmr5
           _enable_md_rxint
           _md_uart_send
           _reload_tmr5_pt25s
       _start_modem
         _check_md_state
           _disable_tmr5
           _startup_ok
             _clear_at_ok
             _init_md_uart
             _md_uart_write_str_ok
               _disable_tmr5
               _enable_md_rxint
               _md_uart_send
               _reload_tmr5_pt25s
             _parse_cereg_ok
             _parse_creg_ok
             _parse_csq_ok
         _is_first_run
           _ee_read
         _save_first_run
           _ee_write
         _start_md_boot_timer
           _reload_tmr5_pt25s
         _write_defaults
           _ee_read
           _ee_write
       _start_sms_ok
         _clear_at_ok
         _init_md_uart
         _md_uart_write_str_ok
           _disable_tmr5
           _enable_md_rxint
           _md_uart_send
           _reload_tmr5_pt25s
       _start_sms_timer
     _reload_tmr3_pt25s
   _init_md_uart
   _init_pic
     _enable_ints
       _start_timer0

 _isr (ROOT)
   _check_state_timeout
     _disable_tmr4
   _control_leds
   _disable_tmr3
   _enable_tmr4
   _reload_timer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      A0      11       62.5%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      E1       9       87.9%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      FD       7       98.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     86      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2E      4A       1       78.7%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     368      12        0.0%
DATA                 0      0     368       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Oct 16 16:47:09 2018

                        ??_disable_tmr3 0001                          ??_disable_tmr4 0001  
                        ??_disable_tmr5 0015                   __size_of_start_timer0 0014  
                 _default_SMS_WAIT_TIME 1023                   __size_of_start_sms_ok 010C  
                           __CFG_CP0$ON 000000                             __CFG_CP1$ON 000000  
                           __CFG_CP2$ON 000000                             __CFG_CP3$ON 000000  
                           __CFG_CPB$ON 000000                                      _RD 007D30  
                           __CFG_CPD$ON 000000                   __end_of_parse_creg_ok 25E2  
                                    _WR 007D31                            ___awdiv@sign 001A  
                __end_of_parse_cereg_ok 23A6                            _sms_tmr_tick 0044  
                                   l241 3070                                     l500 15F2  
                                   l510 16EC                                     l502 1624  
                                   l512 171E                                     l504 1656  
                                   l521 17C6                                     l441 2E38  
                                   l522 17DC                                     l506 1688  
                                   l434 2E44                                     l523 183C  
                                   l435 2DFE                                     l508 16BA  
                                   l452 2CBE                                     l517 1766  
                                   l437 2E02                                     l453 2D02  
                                   l519 1796                                     l439 2E2C  
                                   l528 188E                                     l803 20FC  
                                   l804 20B0                                     l813 2124  
                                   l750 23D8                                     l806 20E0  
                                   l760 2456                                     l752 2430  
                                   l808 20F8                                     l770 24BE  
                                   l762 246E                                     l754 243A  
                                   l498 15C0                                     l764 2476  
                                   l748 23CE                                     l940 2BCC  
                                   l773 24D0                                     l765 24C2  
                                   l749 240C                                     l781 25D6  
                                   l941 2BC8                                     l766 2496  
                                   l791 239A                                     l783 25DA  
                                   l943 2BE4                                     l768 24AA  
                                   l944 2BF6                                     l793 239E  
                                   l945 2BFA                                     l874 2F16  
                                   l778 24F2                                     l938 2C0A  
                                   l947 2C04                                     l939 2B9C  
                                   l788 2296                                     l798 1FBE  
                                   l879 2F86                                     _GIE 007F97  
                _ee_read_ascii_to_value 2F6C                                     _at1 00F5  
                                   _at2 00F4                                     _at3 00F3  
                                   _at4 00F2                                     _at5 00F1  
                                   _at6 00F0                                     _at7 00EF  
                                   _at8 00EE                                     _at9 00ED  
                           _start_modem 2CAC                                     _isr 0008  
                        _check_md_state 2DF8                            ___awmod@sign 001A  
                                   prod 000FF3                          ?_program_field 001D  
                                   wreg 000FE8                              _TXSTA1bits 000FAC  
                  __end_of_default_ACCT 1007                            __CFG_LVP$OFF 000000  
                                  l1401 1E8A                                    l1405 1F0C  
                                  l1350 28C4                                    l1407 1F76  
                                  l1424 21D8                                    l1360 2936  
                                  l1352 28F2                                    l1409 1F8A  
                                  l1433 225A                                    l1353 28E2  
                                  l1443 2A5C                                    l1427 21FE  
                                  l1419 21B4                                    l1460 1B18  
                                  l1452 18F2                                    l1436 2268  
                                  l1428 223E                                    l1380 26AE  
                                  l1364 296C                                    l1445 2AF6  
                                  l1701 1CA2                                    l1461 1A92  
                                  l1429 223C                                    l1381 26CE  
                                  l1365 2976                                    l1438 2274  
                                  l1358 2910                                    l1711 1CDE  
                                  l1703 1CAE                                    l1471 1BB6  
                                  l1463 1AF0                                    l1359 2946  
                                  l1456 1956                                    l1376 264A  
                                  l1721 1D30                                    l1713 1CEA  
                                  l1705 1CBA                                    l1482 2DDC  
                                  l1722 1DFA                                    l1474 1BDE  
                                  l1466 1BA2                                    l1386 26EA  
                                  l1378 267C                                    l1723 1D74  
                                  l1715 1CF6                                    l1707 1CC6  
                                  l1475 1BE6                                    l1467 1B78  
                                  l1900 2C62                                    l1724 1D7C  
                                  l1476 1BE4                                    l1652 10F0  
                                  l1485 2D9E                                    l1725 1DD2  
                                  l1717 1D02                                    l1709 1CD2  
                                  l1469 1BA6                                    l1661 11B6  
                                  l1653 10C8                                    l1645 106E  
                                  l1486 2DAE                                    l1910 2D3C  
                                  l1726 1D86                                    l1478 1C0E  
                                  l1398 1E7C                                    l1670 13FC  
                                  l1662 118E                                    l1903 2C8A  
                                  l1719 1D10                                    l1671 13D4  
                                  l1655 1132                                    l1647 10A2  
                                  l1488 2DC0                                    l1904 2C94  
                                  l1912 2D52                                    l6000 24EA  
                                  l1664 1318                                    l1656 110A  
                                  l1648 107C                                    l1489 2DCA  
                                  l1905 2CA2                                    l1913 2D4A  
                                  l1681 1C2A                                    l1665 12F0  
                                  l1658 1174                                    l1691 1C66  
                                  l1683 1C36                                    l1667 13BA  
                                  l1659 114C                                    l1916 2D6A  
                                  l1668 1392                                    l1917 2D74  
                                  l1909 2D30                                    l1693 1C72  
                                  l1685 1C42                                    l1918 2D82  
                                  l1695 1C7E                                    l1687 1C4E  
                                  l1697 1C8A                                    l1689 1C5A  
                                  l1699 1C96                                    l6044 228E  
                                  l1896 2C3C                                    l1897 2C4C  
                                  l1899 2C6A                                    l6094 1FB6  
                                  l7160 21D0                                    l7094 1F04  
                                  l5850 3094                                    ?_isr 0001  
                                  l6912 1BAE                                    l6850 194E  
                                  l6834 18EA                                    _CFGS 007D36  
                                  u7101 14E4                                    u7111 14F6  
                                  u7121 1508                                    u7050 2D56  
                                  u7131 151A                                    u7141 152C  
                                  u7151 153E                                    u9000 2202  
                                  u7161 1550                                    u7081 14C0  
                                  u7171 1562                                    u7091 14D2  
                                  u8300 2AFA                                    u9020 224C  
                                  u7181 1574                                    u6470 2448  
                                  u8150 10B6                                    u8311 189C  
                                  u7191 1586                                    u6800 23A2  
                                  u8241 2A48                                    u8090 3030  
                                  u6811 1FA2                                    u7460 1736  
                                  u6581 24DE                                    u8520 1BD4  
                                  u6680 25DE                                    u6840 1FDC  
                                  u8370 1984                                    u6930 20F4  
                                  u6691 2282                                    u7660 1834  
                                  u8621 25EC                                    u9317 2BB2  
                                  u8631 25FE                                    u9327 2BD4  
                                  u8801 1E1A                                    u9337 2CE0  
                                  u8641 2610                                    u8490 1BAA  
                                  u6890 2088                                    u8811 1E38  
                                  u6990 2C6E                                    u8590 2CD4  
                                  u8750 26C6                                    u8911 2134  
                                  u8940 21C0                                    u8791 1E08  
                                  _TMR4 000F53                                    _WREN 007D32  
                                  _at10 00EC                                    _at11 00EB  
                                  _at12 00EA                                    _main 3068  
                    _buttonStillPressed 002F                                    fsr0h 000FEA  
                                  fsr1h 000FE2                                    fsr2h 000FDA  
                                  fsr0l 000FE9                                    indf1 000FE7  
                                  indf2 000FDF                                    fsr1l 000FE1  
                                  fsr2l 000FD9                                    btemp 004B  
                          _start_timer0 3034                           __CFG_BORV$190 000000  
                          _start_sms_ok 25E2                                    prodh 000FF4  
                                  prodl 000FF3                                    start 0186  
                         __CFG_IESO$OFF 000000                __size_of_start_sms_timer 001A  
                    _ready_to_read_text 00F8                   __end_of_default_CYCLE 1026  
                          ___param_bank 000000                   __end_of_default_RETRY 1025  
                 __end_of_default_PORT1 1018                   __end_of_default_PORT2 1016  
                 __end_of_default_PORT3 1014                   __end_of_default_PORT4 1012  
          __size_of_start_md_boot_timer 0006                   __end_of_default_ZONE1 1029  
                 __end_of_default_ZONE2 1028                 __size_of_save_first_run 0010  
                                 ??_isr 0003                            _BAUDCON1bits 000FB8  
                       ?_parse_cereg_ok 0001             __end_of_default_PROGRAM_ACK 102C  
                    listen_sms@start_ok 00E4                           ?_control_leds 0001  
                __end_of_check_md_state 2E62                                   ?_main 0001  
                       __end_of___awdiv 2CAC                                   _EEADR 000FA9  
                         ?_md_uart_send 0001                         __end_of___awmod 2D8C  
                        _default_TP_PIN 1026                                   _EEPGD 007D37  
                                 _CREN1 007D5C                                   _T0CON 000FD5  
                       ___awdiv@divisor 0017                                   _T3CON 000FB1  
                                 _RC1IF 007CF5                                   _T5CON 000F4E  
                                 i2l230 00FE                                   i2l232 010C  
                                 i2l224 00A2                                   i2l217 0064  
                                 i2l234 0130                                   i2l226 00C2  
                                 i2l235 013A                                   i2l219 0112  
                                 i2l228 00E2                                   i2l960 27F0  
                                 i2l961 27F4                                   i2l954 2894  
                                 i2l970 284E                                   i2l971 2840  
                                 i2l955 27E4                                   i2l980 2872  
                                 i2l972 2862                                   i2l964 2824  
                       ___awdiv@counter 0019                                   i2l973 2844  
                                 i2l965 2816                                   i2l957 27FA  
                                 i2l974 2848                                   i2l966 2838  
                                 i2l958 27EC                                   i2l967 281A  
                                 i2l959 280E                                   i2l976 2878  
                                 i2l968 281E                                   i2l977 286A  
                                 i2l978 288C                                   i2l979 286E  
                                 _TMR0H 000FD7                                   _TMR0L 000FD6  
                                 _TMR3H 000FB3                                   _TMR3L 000FB2  
                                 _TMR5H 000F50                                   _TMR5L 000F4F  
                                 _TRMT1 007D61                         __end_of_ee_read 2FCE  
                         __CFG_WRT0$OFF 000000                           __CFG_WRT1$OFF 000000  
                         __CFG_WRT2$OFF 000000                           __CFG_WRT3$OFF 000000  
                        __CFG_EBTR0$OFF 000000                          __CFG_FCMEN$OFF 000000  
                        __CFG_EBTR1$OFF 000000                          __CFG_EBTR2$OFF 000000  
                        __CFG_EBTR3$OFF 000000                           __CFG_WRTB$OFF 000000  
                         __CFG_WRTC$OFF 000000                           __CFG_WRTD$OFF 000000  
                        __CFG_EBTRB$OFF 000000                    __size_of_check_state 008E  
                    __CFG_MCLRE$INTMCLR 000000                                   _state 0031  
                       _check_sms_timer 2D8C                                   pclath 000FFA  
                                 tablat 000FF5                                   plusw1 000FE3  
                                 plusw2 000FDB                                   status 000FD8  
                                 wtemp6 004C                          __CFG_HFOFST$ON 000000  
                       _sms_timer_ready 0048                         _enable_md_rxint 309E  
                        startup_ok@baud 006B                          startup_ok@cmee 008B  
                        startup_ok@creg 00BA                          startup_ok@cpin 00AF  
                        startup_ok@gprs 0060                         __initialization 297C  
              parse_cmgr@field_num_ones 0070                parse_cmgr@field_num_tens 006F  
                          __end_of_main 3076                   __end_of_reload_timer0 30C0  
                  __size_of_clear_at_ok 0034                        ??_write_defaults 0018  
                __end_of_default_TP_PIN 1027                          ??_control_leds 0001  
                       write_defaults@i 001D                          ??_md_uart_send 0015  
                        _bled_tmr0_tick 0040                                  ??_main 002F  
                       ?_check_md_state 0001                         ??_program_field 0020  
                         __activetblptr 000002                   parse_creg_ok@creg_rsp 0017  
                         ?_is_first_run 0001                    __size_of_enable_ints 0026  
                  __size_of_enable_tmr4 0022                    __end_of_disable_tmr3 3084  
                  __end_of_disable_tmr4 3092                    __end_of_disable_tmr5 30B6  
                                _EEADRH 000FAA                                  _EEDATA 000FA8  
                                _EECON2 000FA7                        ___awdiv@dividend 0015  
                                _ANSELA 000F38                                  _ANSELB 000F39  
                                _ANSELC 000F3A                                  _RC1REG 000FAE  
                          ?_send_sms_ok 0001                                  i2l1150 2B58  
                                i2l1144 2B84                                  i2l1145 2B00  
                                i2l1148 2B2C                                  _INTCON 000FF2  
                         ?_init_md_uart 0001                                  _TMR0IE 007F95  
                                _SPBRG1 000FAF                                  _TMR0IF 007F92  
                                _TMR3IF 007D09                          __CFG_WDTPS$256 000000  
                                _TX1REG 000FAD                      write_defaults@addr 001B  
                    write_defaults@page 001A                 parse_csq_ok@comma_index 0021  
                    write_defaults@temp 001C                        __end_of_ee_write 2F20  
                        __CFG_XINST$OFF 000000                 parse_csq_ok@colon_index 0022  
                             ??___awdiv 0019                          __CFG_STVREN$ON 000000  
                             ??___awmod 0019                        __end_of_init_pic 2EBC  
         __size_of_md_uart_write_str_ok 012E                       ??_start_sms_timer 0015  
                                _ph_num 01F4                               ??_ee_read 0016  
                                clear_0 29FA                                  clear_1 2A06  
                                clear_2 2A12                                  clear_3 2A1E  
                                clear_4 2A2A                        ___awdiv@quotient 001B  
                      __end_of_read_sms 1F98                         ___awmod@divisor 0017  
           __end_of_check_state_timeout 2B9A                         ___awmod@counter 0019  
                    _default_ENCRYPTION 1022                          ??_is_first_run 0018  
                          __pdataCOMRAM 0049                 __end_of_check_sms_timer 2DF8  
                          __mediumconst 0000                                  tblptrh 000FF7  
                                tblptrl 000FF6                                  tblptru 000FF8  
                     program_field@page 0021                         startup_ok@F6830 0120  
                       startup_ok@F6824 01E9                         startup_ok@F6840 0179  
                       startup_ok@F6832 0110                         startup_ok@F6826 01DD  
                       startup_ok@F6834 0156                         startup_ok@F6842 014A  
                       startup_ok@F6836 018F                         startup_ok@F6844 016E  
                       startup_ok@F6828 0162                         startup_ok@F6846 01BD  
                       startup_ok@F6838 0184                       program_field@size 001F  
                         parse_csq_ok@i 0023                          _md_timeout_cnt 0032  
               __end_of_enable_md_rxint 30AA                     _default_ACCESS_CODE 1007  
                        ??_init_md_uart 0015                              __accesstop 0060  
               __end_of__initialization 2A30                         __CFG_PBADEN$OFF 000000  
                         ___rparam_used 000001                         startup_ok@cereg 00A3  
                          _default_ACCT 1001                          __pcstackCOMRAM 0001  
                          __pidataBANK0 30C0                            __pidataBANK1 26EE  
                          __pidataBANK2 3002                          _save_first_run 3058  
                         ?_parse_csq_ok 0001                 ?_ee_read_ascii_to_value 0018  
                          startup_ok@at 00DF                            ?_start_modem 0001  
                   _start_md_boot_timer 30C6                             parse_cmgl@i 001C  
                       send_sms_ok@cmgs 001E                             parse_cmgr@i 0075  
                           parse_cmgr@j 0074                             parse_cmgr@k 006A  
                           parse_cmgr@l 0073                              __pbssBANK0 00E6  
                            __pbssBANK1 01F4                              __pbssBANK2 0200  
                            __pbssBANK3 0300                         __CFG_PLLCFG$OFF 000000  
                  __end_of_control_leds 28B0                    __end_of_md_uart_send 309E  
                __end_of_save_first_run 3068                      __CFG_CCP2MX$PORTC1 000000  
                      ??_parse_cereg_ok 0015                          ??_parse_csq_ok 0015  
        __end_of_ee_read_ascii_to_value 2F90                    ?_start_md_boot_timer 0001  
                    __CFG_CCP3MX$PORTB5 000000                      parse_cmgr@cmgr_rsp 0060  
        parse_cereg_ok@registration_num 0020                    startup_ok@ledpattern 0097  
                 __size_of_disable_tmr3 000E                   __size_of_disable_tmr4 000E  
                 __size_of_disable_tmr5 000C                         __CFG_WDTEN$SWON 000000  
                      ?_check_sms_timer 0001                 __size_of_stop_sms_timer 0006  
                             ?_ee_write 0015                                 _SPBRGH1 000FB0  
               program_field@start_addr 0024                                 _VERSION 00FA  
                      ?_enable_md_rxint 0001                            _inButtonMenu 0045  
                __size_of_parse_creg_ok 010E                               ?_init_pic 0001  
                             ?_read_sms 0001                    __size_of_send_sms_ok 0150  
                       __CFG_PWRTEN$OFF 000000              md_uart_write_str_ok@wantOk 0019  
                  __end_of_is_first_run 3034                                 __Hparam 0000  
                               __Lparam 0000                         ?_save_first_run 0001  
             md_uart_write_str_ok@index 001C                   ??_start_md_boot_timer 0015  
                               _t2_tick 0043                          program_field@i 0023  
                      ??_check_md_state 0025                                 _t4_tick 00E6  
                               ___awdiv 2C28                                 ___awmod 2D1C  
                          _disable_tmr3 3076                            _disable_tmr4 3084  
                          _disable_tmr5 30AA                            __psmallconst 1000  
                               _ee_read 2FB2                                 __pcinit 297C  
                               __ramtop 1000                    __end_of_init_md_uart 2F6C  
                               _mdRxBuf 0200                                 __ptext0 3068  
                               __ptext1 2E62                                 __ptext2 2F20  
                               __ptext3 3034                                 __ptext4 2B9A  
                               __ptext5 3048                                 __ptext6 28B0  
                               __ptext7 2FCE                                 __ptext8 25E2  
                               __ptext9 2CAC                               _T2CONbits 000FBA  
                        _numUartRetries 004A                            __size_of_isr 017E  
                             _T3CONbits 000FB1                        ___awmod@dividend 0015  
                            _receivedOK 0038                           ??_check_state 00E5  
             program_field@field_number 0025                               _T4CONbits 000F51  
               _default_SERVER_ACK_TIME 1029                               _T5CONbits 000F4E  
                            ??_ee_write 0017                              _parse_cmgl 2A3E  
                            _parse_cmgr 1892                                 _waiting 0049  
                               _sms_buf 02A0                              _listen_sms 28B0  
                  end_of_initialization 2A30                     parse_csq_ok@csq_rsp 0019  
                         __Lmediumconst 0000                 md_uart_write_str_ok@pos 001B  
                            ??_init_pic 0015                              ??_read_sms 0028  
                       _start_sms_timer 2FCE                           ??_clear_at_ok 0015  
                        parse_creg_ok@i 0020                                 postdec1 000FE5  
                               postinc0 000FEE                                 postinc2 000FDE  
                      _buttonPressCount 0042                           _parse_creg_ok 24D4  
                             _PORTBbits 000F81                               _PORTCbits 000F82  
                            _prev_state 0030                            read_sms@cmgd 008F  
                          read_sms@cmgl 0076                            read_sms@cmgr 0086  
                         ??_enable_ints 0015                           ??_enable_tmr4 0001  
                      __CFG_FOSC$INTIO7 000000                   __end_of_program_field 1DFE  
                             _TRISAbits 000F92                               _TRISBbits 000F93  
                    parse_creg_ok@F6836 01CE                               _TRISCbits 000F94  
                  __size_of_start_modem 0070                   __size_of_control_leds 00CE  
                 __size_of_md_uart_send 000C                    __end_of_parse_csq_ok 2128  
          __end_of_md_uart_write_str_ok 24D4                  __size_of_reload_timer0 000A  
                   __end_of_check_state 2C28                     __end_of_default_APN 1022  
                   __end_of_default_IP1 1020                     __end_of_default_IP2 101E  
                   __end_of_default_IP3 101C                     __end_of_default_IP4 101A  
                            _startup_ok 14B6                        startup_ok@ledCfg 007B  
                         _default_CYCLE 1025                  send_sms_ok@smsEndIndex 002B  
                         _default_RETRY 1024                           _default_PORT1 1016  
                         _default_PORT2 1014                           _default_PORT3 1012  
                         _default_PORT4 1010                           _default_ZONE1 1028  
                         _default_ZONE2 1027                          ?_parse_creg_ok 0001  
                   __end_of_clear_at_ok 2EF0                             _BAUDCONbits 000FB8  
md_uart_write_str_ok@waitToSendMoreData 001A                           __pidataCOMRAM 30D2  
                          _control_leds 27E2                            _md_uart_send 3092  
                   start_initialization 297C                          _stop_sms_timer 30CC  
                         startup_ok@ate 00D8                           startup_ok@csq 00CF  
                           ?_parse_cmgl 0001                             ?_parse_cmgr 0001  
          __size_of_check_state_timeout 009C                             __end_of_isr 0186  
               __size_of_write_defaults 0488                             ?_listen_sms 0001  
               __end_of_start_sms_timer 2FE8                     __end_of_enable_ints 2F46  
                   parse_cereg_ok@F6846 01B4                     __end_of_enable_tmr4 2FB2  
               parse_cereg_ok@cereg_rsp 0017                   __size_of_is_first_run 0018  
                         ?_start_timer0 0001                           ?_start_sms_ok 0001  
                      send_sms_ok@F6857 0199                        send_sms_ok@F6859 01EE  
                 __size_of_init_md_uart 0026                           _reload_timer0 30B6  
                           __pdataBANK0 00FA                             __pdataBANK1 0100  
                           __pdataBANK2 02C8                check_md_state@tempStatus 0025  
                __end_of_stop_sms_timer 30D2                   parse_cmgr@access_code 006B  
                           __pbssCOMRAM 002F                            _is_first_run 301C  
                           _check_state 2B9A                           __pcstackBANK0 0060  
                     _default_LINE_CARD 100D                             _default_APN 1020  
                           _default_IP1 101E                             _default_IP2 101C  
                           _default_IP3 101A                             _default_IP4 1018  
                     __size_of_ee_write 0030                          ??_start_timer0 0015  
                      ??_save_first_run 0018                          ??_start_sms_ok 001D  
                           ?_startup_ok 0001                            _init_md_uart 2F46  
       __end_of_default_SERVER_ACK_TIME 102A                       parse_cmgl@rec_msg 0017  
           __end_of_default_ACCESS_CODE 100D                       __size_of_init_pic 005A  
         __end_of_default_SMS_WAIT_TIME 1024                             _clear_at_ok 2EBC  
                     __size_of_read_sms 019A                               __pintcode 0008  
                   _default_PROGRAM_ACK 102B                         ??_parse_creg_ok 0015  
                     _default_TEST_FREQ 102A                     __size_of_parse_cmgl 00C0  
                   __size_of_parse_cmgr 0380                          ?_reload_timer0 0001  
                              ?___awdiv 0015                                ?___awmod 0015  
                   __size_of_listen_sms 00CC                    _md_uart_write_str_ok 23A6  
                 send_sms_ok@isValidCmd 002A                  parse_csq_ok@ones_digit 0020  
                              ?_ee_read 0015                        __CFG_PRICLKEN$ON 000000  
                       ?_stop_sms_timer 0001               __end_of_default_LINE_CARD 1010  
                           __smallconst 1000                   __size_of_parse_csq_ok 0190  
                           _enable_ints 2F20                             _enable_tmr4 2F90  
                parse_csq_ok@tens_digit 0024                        ?_start_sms_timer 0001  
                         ??_send_sms_ok 001D                          _waiting_carrot 0034  
                          _receivedRESP 00F6                __size_of_check_sms_timer 006C  
                              _LATAbits 000F89                                _LATBbits 000F8A  
           __end_of_start_md_boot_timer 30CC                                _LATCbits 000F8B  
                          _ph_num_index 00E9                                _PIE1bits 000F9D  
                              _PIE2bits 000FA0                                _PIE5bits 000F7D  
                              _MD_STATE 003B               __end_of_default_TEST_FREQ 102B  
                              _PIR1bits 000F9E                                _PIR2bits 000FA1  
                              i2u623_40 007E                                i2u624_40 0084  
                              _PIR5bits 000F7E                __size_of_enable_md_rxint 000C  
                     _reload_tmr3_pt25s 3048                       _reload_tmr5_pt25s 2FE8  
                             _returnStr 0300                            _parse_csq_ok 1F98  
         parse_creg_ok@registration_num 001F                   ?_md_uart_write_str_ok 0016  
                             _toggleLED 00FF                      ?_reload_tmr3_pt25s 0001  
                    ?_reload_tmr5_pt25s 0001                            _referenceBuf 0364  
                   __size_of_startup_ok 03DC                 __size_of_parse_cereg_ok 012E  
                   ??_reload_tmr3_pt25s 0015                         _modem_ready_sms 0039  
                   ??_reload_tmr5_pt25s 0015                          _write_defaults 102E  
                             copy_data0 2990                               copy_data1 29B0  
                             copy_data2 29D0             check_sms_timer@sms_duration 001B  
                          send_sms_ok@i 002D                ??_ee_read_ascii_to_value 0019  
                 send_sms_ok@poundCount 002C                   program_field@data_buf 001D  
                   __end_of_send_sms_ok 2278                                __Hrparam 0000  
                          ee_write@addr 0015               __end_of_reload_tmr3_pt25s 3058  
                          ee_write@data 0016                         ??_reload_timer0 0001  
                          ee_write@page 0017               __end_of_reload_tmr5_pt25s 3002  
                              __Lrparam 0000                      __CFG_BOREN$SBORDIS 000000  
                   _check_state_timeout 2AFE                       __CFG_P2BMX$PORTB5 000000  
                 parse_cmgr@colon_index 0068                 parse_cmgr@newline_index 0069  
                      __size_of___awdiv 0084                        __size_of___awmod 0070  
                 program_field@max_size 0022                        __size_of_ee_read 001C  
                  __end_of_start_timer0 3048                    __end_of_start_sms_ok 26EE  
                         ??_start_modem 0026                             _currentChar 003D  
                __end_of_write_defaults 14B6                             ee_read@addr 0015  
                           ee_read@data 0017                          _gled_tmr0_tick 0041  
                           ee_read@page 0016                 __size_of_check_md_state 006A  
                              _ee_write 2EF0                            ??_parse_cmgl 0015  
                          ??_parse_cmgr 0026                    ?_check_state_timeout 0001  
                              __ptext10 102E                                __ptext11 30C6  
                              __ptext20 1DFE                                __ptext12 3058  
                              __ptext21 1892                                __ptext13 301C  
                              __ptext30 309E                                __ptext22 1C12  
                              __ptext14 2DF8                                __ptext31 30AA  
                              __ptext23 2EF0                                __ptext15 14B6  
                              __ptext40 2F90                                __ptext32 2F46  
                              __ptext24 2D1C                                __ptext16 1F98  
                              __ptext41 3076                                __ptext33 2EBC  
                              __ptext25 2C28                                __ptext17 24D4  
                              __ptext42 27E2                                __ptext34 2D8C  
                              __ptext26 2A3E                                __ptext18 2278  
                              __ptext43 2AFE                                __ptext35 30CC  
                              __ptext27 23A6                                __ptext19 2128  
                              __ptext44 3084                                __ptext36 2F6C  
                              __ptext28 2FE8                                __ptext37 2FB2  
                              __ptext29 3092                                __ptext39 30B6  
                     parse_csq_ok@F6857 01D6                            ??_listen_sms 002E  
                         __size_of_main 000E                                _init_pic 2E62  
                              _read_sms 1DFE                             _receivedERR 0037  
                           _modem_awake 003A             parse_cmgr@final_field_index 0072  
                        _saveINTCONbits 00E8                                _tmr3_cnt 003F  
                              _tmr5_cnt 003E                              _RC1STAbits 000FAB  
                     ??_check_sms_timer 001B                  __size_of_program_field 01EC  
                              _timedOut 0036                                _retryCnt 0033  
                ??_md_uart_write_str_ok 001B                                int$flags 004B  
                        _receivedSensor 00F9                      __end_of_parse_cmgl 2AFE  
                    __end_of_parse_cmgr 1C12                      __end_of_listen_sms 297C  
                     ??_enable_md_rxint 0015                         parse_cmgl@F6870 01E4  
                       ?_write_defaults 0001                              _INTCONbits 000FF2  
                      read_sms@msgIndex 0098                         parse_cmgr@F6877 01C6  
                          ?_check_state 0001                   ??_check_state_timeout 0001  
                        _sms_echo_ready 0047                md_uart_write_str_ok@data 0016  
              md_uart_write_str_ok@len1 0018                  startup_ok@queryVersion 00C5  
                   __end_of_start_modem 2D1C                                intlevel2 0000  
                       parse_cereg_ok@i 0021                             _send_sms_ok 2128  
                          ??_startup_ok 0025                              _RCSTA1bits 000FAB  
       __size_of_ee_read_ascii_to_value 0024              __end_of_default_ENCRYPTION 1023  
                          ?_clear_at_ok 0001                            _waiting_uart 0035  
                            _OSCCONbits 000FD3              __size_of_reload_tmr3_pt25s 0010  
            parse_cmgr@final_field_term 0071                     send_sms_ok@msgIndex 0027  
            __size_of_reload_tmr5_pt25s 001A                       start_sms_ok@F6832 013E  
                     start_sms_ok@F6834 02C8                       start_sms_ok@F6836 0130  
                      md_uart_send@data 0015                           ?_disable_tmr3 0001  
                         ?_disable_tmr4 0001                           ?_disable_tmr5 0001  
                      ??_stop_sms_timer 0015                          _parse_cereg_ok 2278  
                           _smsMsgIndex 00F7                      __end_of_startup_ok 1892  
                          ?_enable_ints 0001                            ?_enable_tmr4 0001  
                         read_sms@F6841 0100                           read_sms@F6843 01AB  
                         read_sms@F6845 01F1                           read_sms@F6847 01A2  
                         _program_field 1C12                       __CFG_T3CMX$PORTC0 000000  
                      start_sms_ok@cmgf 0087                        start_sms_ok@cnmi 0079  
                      start_sms_ok@cpms 0060                           _sms_err_ready 0046  
            ee_read_ascii_to_value@addr 0018              ee_read_ascii_to_value@data 001A  
            ee_read_ascii_to_value@page 0019                           _SMS_TMR_STATE 003C  
