

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Jul 02 18:05:15 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F26K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    41                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    42                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    43  0000                     
    44                           ; Version 1.45
    45                           ; Generated 16/11/2017 GMT
    46                           ; 
    47                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    48                           ; All rights reserved.
    49                           ; 
    50                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    51                           ; 
    52                           ; Redistribution and use in source and binary forms, with or without modification, are
    53                           ; permitted provided that the following conditions are met:
    54                           ; 
    55                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    56                           ;        conditions and the following disclaimer.
    57                           ; 
    58                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    59                           ;        of conditions and the following disclaimer in the documentation and/or other
    60                           ;        materials provided with the distribution.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC18F26K22 Definitions
    76                           ; 
    77                           ; SFR Addresses
    78  0000                     
    79                           	psect	idataCOMRAM
    80  001D4C                     __pidataCOMRAM:
    81                           	opt stack 0
    82                           
    83                           ;initializer for send_md_cfg_cmds_ok@F6847
    84  001D4C  41                 	db	65
    85  001D4D  54                 	db	84
    86  001D4E  23                 	db	35
    87  001D4F  43                 	db	67
    88  001D50  47                 	db	71
    89  001D51  4D                 	db	77
    90  001D52  52                 	db	82
    91  001D53  0D                 	db	13
    92  001D54  0A                 	db	10
    93  001D55  00                 	db	0
    94                           
    95                           ;initializer for send_md_cfg_cmds_ok@F6857
    96  001D56  41                 	db	65
    97  001D57  54                 	db	84
    98  001D58  2B                 	db	43
    99  001D59  43                 	db	67
   100  001D5A  53                 	db	83
   101  001D5B  51                 	db	81
   102  001D5C  0D                 	db	13
   103  001D5D  0A                 	db	10
   104  001D5E  00                 	db	0
   105                           
   106                           	psect	idataBANK0
   107  001D5F                     __pidataBANK0:
   108                           	opt stack 0
   109                           
   110                           ;initializer for send_md_cfg_cmds_ok@F6837
   111  001D5F  41                 	db	65
   112  001D60  54                 	db	84
   113  001D61  45                 	db	69
   114  001D62  31                 	db	49
   115  001D63  0D                 	db	13
   116  001D64  0A                 	db	10
   117  001D65  00                 	db	0
   118                           
   119                           ;initializer for send_md_cfg_cmds_ok@F6835
   120  001D66  41                 	db	65
   121  001D67  54                 	db	84
   122  001D68  0D                 	db	13
   123  001D69  0A                 	db	10
   124  001D6A  00                 	db	0
   125                           
   126                           	psect	idataBANK1
   127  0018DC                     __pidataBANK1:
   128                           	opt stack 0
   129                           
   130                           ;initializer for setup_data_ok@F6871
   131  0018DC  41                 	db	65
   132  0018DD  54                 	db	84
   133  0018DE  2B                 	db	43
   134  0018DF  43                 	db	67
   135  0018E0  47                 	db	71
   136  0018E1  44                 	db	68
   137  0018E2  43                 	db	67
   138  0018E3  4F                 	db	79
   139  0018E4  4E                 	db	78
   140  0018E5  54                 	db	84
   141  0018E6  3D                 	db	61
   142  0018E7  33                 	db	51
   143  0018E8  2C                 	db	44
   144  0018E9  22                 	db	34
   145  0018EA  49                 	db	73
   146  0018EB  50                 	db	80
   147  0018EC  56                 	db	86
   148  0018ED  34                 	db	52
   149  0018EE  56                 	db	86
   150  0018EF  36                 	db	54
   151  0018F0  22                 	db	34
   152  0018F1  2C                 	db	44
   153  0018F2  22                 	db	34
   154  0018F3  77                 	db	119
   155  0018F4  79                 	db	121
   156  0018F5  6C                 	db	108
   157  0018F6  65                 	db	101
   158  0018F7  73                 	db	115
   159  0018F8  6C                 	db	108
   160  0018F9  74                 	db	116
   161  0018FA  65                 	db	101
   162  0018FB  2E                 	db	46
   163  0018FC  67                 	db	103
   164  0018FD  77                 	db	119
   165  0018FE  37                 	db	55
   166  0018FF  2E                 	db	46
   167  001900  76                 	db	118
   168  001901  7A                 	db	122
   169  001902  77                 	db	119
   170  001903  65                 	db	101
   171  001904  6E                 	db	110
   172  001905  74                 	db	116
   173  001906  70                 	db	112
   174  001907  22                 	db	34
   175  001908  0D                 	db	13
   176  001909  0A                 	db	10
   177  00190A  00                 	db	0
   178                           
   179                           ;initializer for setup_data_ok@F6873
   180  00190B  41                 	db	65
   181  00190C  54                 	db	84
   182  00190D  23                 	db	35
   183  00190E  53                 	db	83
   184  00190F  43                 	db	67
   185  001910  46                 	db	70
   186  001911  47                 	db	71
   187  001912  45                 	db	69
   188  001913  58                 	db	88
   189  001914  54                 	db	84
   190  001915  3D                 	db	61
   191  001916  31                 	db	49
   192  001917  2C                 	db	44
   193  001918  31                 	db	49
   194  001919  2C                 	db	44
   195  00191A  30                 	db	48
   196  00191B  2C                 	db	44
   197  00191C  30                 	db	48
   198  00191D  2C                 	db	44
   199  00191E  30                 	db	48
   200  00191F  2C                 	db	44
   201  001920  30                 	db	48
   202  001921  0D                 	db	13
   203  001922  0A                 	db	10
   204  001923  00                 	db	0
   205                           
   206                           ;initializer for send_md_cfg_cmds_ok@F6843
   207  001924  41                 	db	65
   208  001925  54                 	db	84
   209  001926  23                 	db	35
   210  001927  47                 	db	71
   211  001928  50                 	db	80
   212  001929  49                 	db	73
   213  00192A  4F                 	db	79
   214  00192B  3D                 	db	61
   215  00192C  37                 	db	55
   216  00192D  2C                 	db	44
   217  00192E  30                 	db	48
   218  00192F  2C                 	db	44
   219  001930  32                 	db	50
   220  001931  0D                 	db	13
   221  001932  0A                 	db	10
   222  001933  00                 	db	0
   223                           
   224                           ;initializer for send_md_cfg_cmds_ok@F6841
   225  001934  41                 	db	65
   226  001935  54                 	db	84
   227  001936  2B                 	db	43
   228  001937  49                 	db	73
   229  001938  50                 	db	80
   230  001939  52                 	db	82
   231  00193A  3D                 	db	61
   232  00193B  31                 	db	49
   233  00193C  31                 	db	49
   234  00193D  35                 	db	53
   235  00193E  32                 	db	50
   236  00193F  30                 	db	48
   237  001940  30                 	db	48
   238  001941  0D                 	db	13
   239  001942  0A                 	db	10
   240  001943  00                 	db	0
   241                           
   242                           ;initializer for setup_data_ok@F6875
   243  001944  41                 	db	65
   244  001945  54                 	db	84
   245  001946  23                 	db	35
   246  001947  53                 	db	83
   247  001948  47                 	db	71
   248  001949  41                 	db	65
   249  00194A  43                 	db	67
   250  00194B  54                 	db	84
   251  00194C  3D                 	db	61
   252  00194D  33                 	db	51
   253  00194E  2C                 	db	44
   254  00194F  31                 	db	49
   255  001950  0D                 	db	13
   256  001951  0A                 	db	10
   257  001952  00                 	db	0
   258                           
   259                           ;initializer for send_md_cfg_cmds_ok@F6853
   260  001953  41                 	db	65
   261  001954  54                 	db	84
   262  001955  2B                 	db	43
   263  001956  43                 	db	67
   264  001957  45                 	db	69
   265  001958  52                 	db	82
   266  001959  45                 	db	69
   267  00195A  47                 	db	71
   268  00195B  3F                 	db	63
   269  00195C  0D                 	db	13
   270  00195D  0A                 	db	10
   271  00195E  00                 	db	0
   272                           
   273                           ;initializer for send_md_cfg_cmds_ok@F6845
   274  00195F  41                 	db	65
   275  001960  54                 	db	84
   276  001961  23                 	db	35
   277  001962  53                 	db	83
   278  001963  4C                 	db	76
   279  001964  45                 	db	69
   280  001965  44                 	db	68
   281  001966  3D                 	db	61
   282  001967  34                 	db	52
   283  001968  0D                 	db	13
   284  001969  0A                 	db	10
   285  00196A  00                 	db	0
   286                           
   287                           ;initializer for send_md_cfg_cmds_ok@F6839
   288  00196B  41                 	db	65
   289  00196C  54                 	db	84
   290  00196D  2B                 	db	43
   291  00196E  43                 	db	67
   292  00196F  4D                 	db	77
   293  001970  45                 	db	69
   294  001971  45                 	db	69
   295  001972  3D                 	db	61
   296  001973  32                 	db	50
   297  001974  0D                 	db	13
   298  001975  0A                 	db	10
   299  001976  00                 	db	0
   300                           
   301                           ;initializer for send_md_cfg_cmds_ok@F6855
   302  001977  41                 	db	65
   303  001978  54                 	db	84
   304  001979  23                 	db	35
   305  00197A  47                 	db	71
   306  00197B  50                 	db	80
   307  00197C  52                 	db	82
   308  00197D  53                 	db	83
   309  00197E  3F                 	db	63
   310  00197F  0D                 	db	13
   311  001980  0A                 	db	10
   312  001981  00                 	db	0
   313                           
   314                           ;initializer for send_md_cfg_cmds_ok@F6851
   315  001982  41                 	db	65
   316  001983  54                 	db	84
   317  001984  2B                 	db	43
   318  001985  43                 	db	67
   319  001986  52                 	db	82
   320  001987  45                 	db	69
   321  001988  47                 	db	71
   322  001989  3F                 	db	63
   323  00198A  0D                 	db	13
   324  00198B  0A                 	db	10
   325  00198C  00                 	db	0
   326                           
   327                           ;initializer for send_md_cfg_cmds_ok@F6849
   328  00198D  41                 	db	65
   329  00198E  54                 	db	84
   330  00198F  2B                 	db	43
   331  001990  43                 	db	67
   332  001991  50                 	db	80
   333  001992  49                 	db	73
   334  001993  4E                 	db	78
   335  001994  3F                 	db	63
   336  001995  0D                 	db	13
   337  001996  0A                 	db	10
   338  001997  00                 	db	0
   339                           
   340                           	psect	smallconst
   341  001000                     __psmallconst:
   342                           	opt stack 0
   343  001000  00                 	db	0
   344  001001                     send_over_socket_ok@F6880:
   345                           	opt stack 0
   346  001001  41                 	db	65
   347  001002  54                 	db	84
   348  001003  23                 	db	35
   349  001004  53                 	db	83
   350  001005  44                 	db	68
   351  001006  3D                 	db	61
   352  001007  31                 	db	49
   353  001008  2C                 	db	44
   354  001009  30                 	db	48
   355  00100A  2C                 	db	44
   356  00100B  31                 	db	49
   357  00100C  30                 	db	48
   358  00100D  35                 	db	53
   359  00100E  31                 	db	49
   360  00100F  30                 	db	48
   361  001010  2C                 	db	44
   362  001011  22                 	db	34
   363  001012  6D                 	db	109
   364  001013  6F                 	db	111
   365  001014  64                 	db	100
   366  001015  75                 	db	117
   367  001016  6C                 	db	108
   368  001017  65                 	db	101
   369  001018  73                 	db	115
   370  001019  2E                 	db	46
   371  00101A  74                 	db	116
   372  00101B  65                 	db	101
   373  00101C  6C                 	db	108
   374  00101D  69                 	db	105
   375  00101E  74                 	db	116
   376  00101F  2E                 	db	46
   377  001020  63                 	db	99
   378  001021  6F                 	db	111
   379  001022  6D                 	db	109
   380  001023  22                 	db	34
   381  001024  2C                 	db	44
   382  001025  30                 	db	48
   383  001026  2C                 	db	44
   384  001027  30                 	db	48
   385  001028  2C                 	db	44
   386  001029  31                 	db	49
   387  00102A  0D                 	db	13
   388  00102B  0A                 	db	10
   389  00102C  00                 	db	0
   390  00102D                     __end_ofsend_over_socket_ok@F6880:
   391                           	opt stack 0
   392  00102D                     send_over_socket_ok@F6884:
   393                           	opt stack 0
   394  00102D  41                 	db	65
   395  00102E  54                 	db	84
   396  00102F  23                 	db	35
   397  001030  53                 	db	83
   398  001031  52                 	db	82
   399  001032  45                 	db	69
   400  001033  43                 	db	67
   401  001034  56                 	db	86
   402  001035  3D                 	db	61
   403  001036  31                 	db	49
   404  001037  2C                 	db	44
   405  001038  38                 	db	56
   406  001039  39                 	db	57
   407  00103A  0D                 	db	13
   408  00103B  0A                 	db	10
   409  00103C  00                 	db	0
   410  00103D                     __end_ofsend_over_socket_ok@F6884:
   411                           	opt stack 0
   412  00103D                     close_socket_ok@F6897:
   413                           	opt stack 0
   414  00103D  41                 	db	65
   415  00103E  54                 	db	84
   416  00103F  23                 	db	35
   417  001040  53                 	db	83
   418  001041  47                 	db	71
   419  001042  41                 	db	65
   420  001043  43                 	db	67
   421  001044  54                 	db	84
   422  001045  3D                 	db	61
   423  001046  33                 	db	51
   424  001047  2C                 	db	44
   425  001048  30                 	db	48
   426  001049  0D                 	db	13
   427  00104A  0A                 	db	10
   428  00104B  00                 	db	0
   429  00104C                     __end_ofclose_socket_ok@F6897:
   430                           	opt stack 0
   431  00104C                     send_over_socket_ok@F6882:
   432                           	opt stack 0
   433  00104C  41                 	db	65
   434  00104D  54                 	db	84
   435  00104E  23                 	db	35
   436  00104F  53                 	db	83
   437  001050  53                 	db	83
   438  001051  45                 	db	69
   439  001052  4E                 	db	78
   440  001053  44                 	db	68
   441  001054  3D                 	db	61
   442  001055  31                 	db	49
   443  001056  0D                 	db	13
   444  001057  0A                 	db	10
   445  001058  00                 	db	0
   446  001059                     __end_ofsend_over_socket_ok@F6882:
   447                           	opt stack 0
   448  001059                     close_socket_ok@F6895:
   449                           	opt stack 0
   450  001059  41                 	db	65
   451  00105A  54                 	db	84
   452  00105B  23                 	db	35
   453  00105C  53                 	db	83
   454  00105D  48                 	db	72
   455  00105E  3D                 	db	61
   456  00105F  31                 	db	49
   457  001060  0D                 	db	13
   458  001061  0A                 	db	10
   459  001062  00                 	db	0
   460  001063                     __end_ofclose_socket_ok@F6895:
   461                           	opt stack 0
   462  001063                     send_over_socket_ok@F6886:
   463                           	opt stack 0
   464  001063  45                 	db	69
   465  001064  63                 	db	99
   466  001065  68                 	db	104
   467  001066  6F                 	db	111
   468  001067  2E                 	db	46
   469  001068  0D                 	db	13
   470  001069  0A                 	db	10
   471  00106A  00                 	db	0
   472  00106B                     __end_ofsend_over_socket_ok@F6886:
   473                           	opt stack 0
   474  00106B                     _VERSION:
   475                           	opt stack 0
   476  00106B  32                 	db	50
   477  00106C  30                 	db	48
   478  00106D  32                 	db	50
   479  00106E  30                 	db	48
   480  00106F  00                 	db	0
   481  001070                     __end_of_VERSION:
   482                           	opt stack 0
   483  0000                     _T5CONbits	set	3918
   484  0000                     _TMR5L	set	3919
   485  0000                     _TMR5H	set	3920
   486  0000                     _T5CON	set	3918
   487  0000                     _ANSELB	set	3897
   488  0000                     _ANSELC	set	3898
   489  0000                     _ANSELA	set	3896
   490  0000                     _TX1REG	set	4013
   491  0000                     _PIR1bits	set	3998
   492  0000                     _RCSTA1bits	set	4011
   493  0000                     _RC1STAbits	set	4011
   494  0000                     _SPBRG1	set	4015
   495  0000                     _SPBRGH1	set	4016
   496  0000                     _TXSTA1bits	set	4012
   497  0000                     _BAUDCONbits	set	4024
   498  0000                     _BAUDCON1bits	set	4024
   499  0000                     _T3CONbits	set	4017
   500  0000                     _TMR3L	set	4018
   501  0000                     _TMR3H	set	4019
   502  0000                     _PIR2bits	set	4001
   503  0000                     _PIE2bits	set	4000
   504  0000                     _T3CON	set	4017
   505  0000                     _PIR5bits	set	3966
   506  0000                     _PIE5bits	set	3965
   507  0000                     _INTCONbits	set	4082
   508  0000                     _TMR0L	set	4054
   509  0000                     _TMR0H	set	4055
   510  0000                     _T0CON	set	4053
   511  0000                     _LATBbits	set	3978
   512  0000                     _LATCbits	set	3979
   513  0000                     _TRISCbits	set	3988
   514  0000                     _PORTCbits	set	3970
   515  0000                     _TRISBbits	set	3987
   516  0000                     _PORTAbits	set	3968
   517  0000                     _TRISAbits	set	3986
   518  0000                     _OSCCONbits	set	4051
   519  0000                     _PORTBbits	set	3969
   520  0000                     _RC1REG	set	4014
   521  0000                     _PIE1bits	set	3997
   522  0000                     _TRMT1	set	32097
   523  0000                     _PEIE	set	32662
   524  0000                     _RC1IE	set	31981
   525  0000                     _CREN1	set	32092
   526  0000                     _GIE	set	32663
   527  0000                     _TMR0IF	set	32658
   528  0000                     _TMR3IF	set	32009
   529  0000                     _RC1IF	set	31989
   530                           
   531                           ; #config settings
   532  001070  00                 	db	0	; dummy byte at the end
   533  0000                     
   534                           	psect	cinit
   535  001998                     __pcinit:
   536                           	opt stack 0
   537  001998                     start_initialization:
   538                           	opt stack 0
   539  001998                     __initialization:
   540                           	opt stack 0
   541                           
   542                           ; Initialize objects allocated to BANK1 (188 bytes)
   543                           ; load TBLPTR registers with __pidataBANK1
   544  001998  0EDC               	movlw	low __pidataBANK1
   545  00199A  6EF6               	movwf	tblptrl,c
   546  00199C  0E18               	movlw	high __pidataBANK1
   547  00199E  6EF7               	movwf	tblptrh,c
   548  0019A0  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   549  0019A2  6EF8               	movwf	tblptru,c
   550  0019A4  EE01  F000         	lfsr	0,__pdataBANK1
   551  0019A8  EE10 F0BC          	lfsr	1,188
   552  0019AC                     copy_data0:
   553  0019AC  0009               	tblrd		*+
   554  0019AE  CFF5 FFEE          	movff	tablat,postinc0
   555  0019B2  50E5               	movf	postdec1,w,c
   556  0019B4  50E1               	movf	fsr1l,w,c
   557  0019B6  E1FA               	bnz	copy_data0
   558                           
   559                           ; Initialize objects allocated to BANK0 (12 bytes)
   560                           ; load TBLPTR registers with __pidataBANK0
   561  0019B8  0E5F               	movlw	low __pidataBANK0
   562  0019BA  6EF6               	movwf	tblptrl,c
   563  0019BC  0E1D               	movlw	high __pidataBANK0
   564  0019BE  6EF7               	movwf	tblptrh,c
   565  0019C0  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   566  0019C2  6EF8               	movwf	tblptru,c
   567  0019C4  EE00  F0F3         	lfsr	0,__pdataBANK0
   568  0019C8  EE10 F00C          	lfsr	1,12
   569  0019CC                     copy_data1:
   570  0019CC  0009               	tblrd		*+
   571  0019CE  CFF5 FFEE          	movff	tablat,postinc0
   572  0019D2  50E5               	movf	postdec1,w,c
   573  0019D4  50E1               	movf	fsr1l,w,c
   574  0019D6  E1FA               	bnz	copy_data1
   575                           
   576                           ; Initialize objects allocated to COMRAM (19 bytes)
   577                           ; load TBLPTR registers with __pidataCOMRAM
   578  0019D8  0E4C               	movlw	low __pidataCOMRAM
   579  0019DA  6EF6               	movwf	tblptrl,c
   580  0019DC  0E1D               	movlw	high __pidataCOMRAM
   581  0019DE  6EF7               	movwf	tblptrh,c
   582  0019E0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   583  0019E2  6EF8               	movwf	tblptru,c
   584  0019E4  EE00  F025         	lfsr	0,__pdataCOMRAM
   585  0019E8  EE10 F013          	lfsr	1,19
   586  0019EC                     copy_data2:
   587  0019EC  0009               	tblrd		*+
   588  0019EE  CFF5 FFEE          	movff	tablat,postinc0
   589  0019F2  50E5               	movf	postdec1,w,c
   590  0019F4  50E1               	movf	fsr1l,w,c
   591  0019F6  E1FA               	bnz	copy_data2
   592                           
   593                           ; Clear objects allocated to BANK2 (160 bytes)
   594  0019F8  EE02  F000         	lfsr	0,__pbssBANK2
   595  0019FC  0EA0               	movlw	160
   596  0019FE                     clear_0:
   597  0019FE  6AEE               	clrf	postinc0,c
   598  001A00  06E8               	decf	wreg,f,c
   599  001A02  E1FD               	bnz	clear_0
   600                           
   601                           ; Clear objects allocated to BANK1 (60 bytes)
   602  001A04  EE01  F0BC         	lfsr	0,__pbssBANK1
   603  001A08  0E3C               	movlw	60
   604  001A0A                     clear_1:
   605  001A0A  6AEE               	clrf	postinc0,c
   606  001A0C  06E8               	decf	wreg,f,c
   607  001A0E  E1FD               	bnz	clear_1
   608                           
   609                           ; Clear objects allocated to BANK0 (15 bytes)
   610  001A10  EE00  F0E4         	lfsr	0,__pbssBANK0
   611  001A14  0E0F               	movlw	15
   612  001A16                     clear_2:
   613  001A16  6AEE               	clrf	postinc0,c
   614  001A18  06E8               	decf	wreg,f,c
   615  001A1A  E1FD               	bnz	clear_2
   616                           
   617                           ; Clear objects allocated to COMRAM (16 bytes)
   618  001A1C  EE00  F038         	lfsr	0,__pbssCOMRAM
   619  001A20  0E10               	movlw	16
   620  001A22                     clear_3:
   621  001A22  6AEE               	clrf	postinc0,c
   622  001A24  06E8               	decf	wreg,f,c
   623  001A26  E1FD               	bnz	clear_3
   624  001A28                     end_of_initialization:
   625                           	opt stack 0
   626  001A28                     __end_of__initialization:
   627                           	opt stack 0
   628  001A28  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   629  001A2A  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   630  001A2C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   631  001A2E  6EF8               	movwf	tblptru,c
   632  001A30  0100               	movlb	0
   633  001A32  EF51  F00E         	goto	_main	;jump to C main() function
   634                           tblptru	equ	0xFF8
   635                           tblptrh	equ	0xFF7
   636                           tblptrl	equ	0xFF6
   637                           tablat	equ	0xFF5
   638                           postinc0	equ	0xFEE
   639                           wreg	equ	0xFE8
   640                           postdec1	equ	0xFE5
   641                           fsr1l	equ	0xFE1
   642                           
   643                           	psect	bssCOMRAM
   644  000038                     __pbssCOMRAM:
   645                           	opt stack 0
   646  000038                     _tmr3_cnt:
   647                           	opt stack 0
   648  000038                     	ds	4
   649  00003C                     _lastChar:
   650                           	opt stack 0
   651  00003C                     	ds	1
   652  00003D                     _currentChar:
   653                           	opt stack 0
   654  00003D                     	ds	1
   655  00003E                     _alreadyAwake:
   656                           	opt stack 0
   657  00003E                     	ds	1
   658  00003F                     _md_state:
   659                           	opt stack 0
   660  00003F                     	ds	1
   661  000040                     _timedOut:
   662                           	opt stack 0
   663  000040                     	ds	1
   664  000041                     _receivedRESP:
   665                           	opt stack 0
   666  000041                     	ds	1
   667  000042                     _receivedERR:
   668                           	opt stack 0
   669  000042                     	ds	1
   670  000043                     _receivedOK:
   671                           	opt stack 0
   672  000043                     	ds	1
   673  000044                     _endPtr:
   674                           	opt stack 0
   675  000044                     	ds	1
   676  000045                     _tmr5_cnt:
   677                           	opt stack 0
   678  000045                     	ds	1
   679  000046                     _ledPatternCount:
   680                           	opt stack 0
   681  000046                     	ds	1
   682  000047                     _ledPattern:
   683                           	opt stack 0
   684  000047                     	ds	1
   685                           tblptru	equ	0xFF8
   686                           tblptrh	equ	0xFF7
   687                           tblptrl	equ	0xFF6
   688                           tablat	equ	0xFF5
   689                           postinc0	equ	0xFEE
   690                           wreg	equ	0xFE8
   691                           postdec1	equ	0xFE5
   692                           fsr1l	equ	0xFE1
   693                           
   694                           	psect	dataCOMRAM
   695  000025                     __pdataCOMRAM:
   696                           	opt stack 0
   697  000025                     send_md_cfg_cmds_ok@F6847:
   698                           	opt stack 0
   699  000025                     	ds	10
   700  00002F                     send_md_cfg_cmds_ok@F6857:
   701                           	opt stack 0
   702  00002F                     	ds	9
   703                           tblptru	equ	0xFF8
   704                           tblptrh	equ	0xFF7
   705                           tblptrl	equ	0xFF6
   706                           tablat	equ	0xFF5
   707                           postinc0	equ	0xFEE
   708                           wreg	equ	0xFE8
   709                           postdec1	equ	0xFE5
   710                           fsr1l	equ	0xFE1
   711                           
   712                           	psect	bssBANK0
   713  0000E4                     __pbssBANK0:
   714                           	opt stack 0
   715  0000E4                     _extendedTimer:
   716                           	opt stack 0
   717  0000E4                     	ds	1
   718  0000E5                     _sentAT12:
   719                           	opt stack 0
   720  0000E5                     	ds	1
   721  0000E6                     _sentAT11:
   722                           	opt stack 0
   723  0000E6                     	ds	1
   724  0000E7                     _sentAT10:
   725                           	opt stack 0
   726  0000E7                     	ds	1
   727  0000E8                     _sentAT9:
   728                           	opt stack 0
   729  0000E8                     	ds	1
   730  0000E9                     _sentAT8:
   731                           	opt stack 0
   732  0000E9                     	ds	1
   733  0000EA                     _sentAT7:
   734                           	opt stack 0
   735  0000EA                     	ds	1
   736  0000EB                     _sentAT6:
   737                           	opt stack 0
   738  0000EB                     	ds	1
   739  0000EC                     _sentAT5:
   740                           	opt stack 0
   741  0000EC                     	ds	1
   742  0000ED                     _sentAT4:
   743                           	opt stack 0
   744  0000ED                     	ds	1
   745  0000EE                     _sentAT3:
   746                           	opt stack 0
   747  0000EE                     	ds	1
   748  0000EF                     _sentAT2:
   749                           	opt stack 0
   750  0000EF                     	ds	1
   751  0000F0                     _sentAT1:
   752                           	opt stack 0
   753  0000F0                     	ds	1
   754  0000F1                     _pdpIsActive:
   755                           	opt stack 0
   756  0000F1                     	ds	1
   757  0000F2                     _bootTimerIsDone:
   758                           	opt stack 0
   759  0000F2                     	ds	1
   760                           tblptru	equ	0xFF8
   761                           tblptrh	equ	0xFF7
   762                           tblptrl	equ	0xFF6
   763                           tablat	equ	0xFF5
   764                           postinc0	equ	0xFEE
   765                           wreg	equ	0xFE8
   766                           postdec1	equ	0xFE5
   767                           fsr1l	equ	0xFE1
   768                           
   769                           	psect	dataBANK0
   770  0000F3                     __pdataBANK0:
   771                           	opt stack 0
   772  0000F3                     send_md_cfg_cmds_ok@F6837:
   773                           	opt stack 0
   774  0000F3                     	ds	7
   775  0000FA                     send_md_cfg_cmds_ok@F6835:
   776                           	opt stack 0
   777  0000FA                     	ds	5
   778                           tblptru	equ	0xFF8
   779                           tblptrh	equ	0xFF7
   780                           tblptrl	equ	0xFF6
   781                           tablat	equ	0xFF5
   782                           postinc0	equ	0xFEE
   783                           wreg	equ	0xFE8
   784                           postdec1	equ	0xFE5
   785                           fsr1l	equ	0xFE1
   786                           
   787                           	psect	bssBANK1
   788  0001BC                     __pbssBANK1:
   789                           	opt stack 0
   790  0001BC                     _referenceBuf:
   791                           	opt stack 0
   792  0001BC                     	ds	60
   793                           tblptru	equ	0xFF8
   794                           tblptrh	equ	0xFF7
   795                           tblptrl	equ	0xFF6
   796                           tablat	equ	0xFF5
   797                           postinc0	equ	0xFEE
   798                           wreg	equ	0xFE8
   799                           postdec1	equ	0xFE5
   800                           fsr1l	equ	0xFE1
   801                           
   802                           	psect	dataBANK1
   803  000100                     __pdataBANK1:
   804                           	opt stack 0
   805  000100                     setup_data_ok@F6871:
   806                           	opt stack 0
   807  000100                     	ds	47
   808  00012F                     setup_data_ok@F6873:
   809                           	opt stack 0
   810  00012F                     	ds	25
   811  000148                     send_md_cfg_cmds_ok@F6843:
   812                           	opt stack 0
   813  000148                     	ds	16
   814  000158                     send_md_cfg_cmds_ok@F6841:
   815                           	opt stack 0
   816  000158                     	ds	16
   817  000168                     setup_data_ok@F6875:
   818                           	opt stack 0
   819  000168                     	ds	15
   820  000177                     send_md_cfg_cmds_ok@F6853:
   821                           	opt stack 0
   822  000177                     	ds	12
   823  000183                     send_md_cfg_cmds_ok@F6845:
   824                           	opt stack 0
   825  000183                     	ds	12
   826  00018F                     send_md_cfg_cmds_ok@F6839:
   827                           	opt stack 0
   828  00018F                     	ds	12
   829  00019B                     send_md_cfg_cmds_ok@F6855:
   830                           	opt stack 0
   831  00019B                     	ds	11
   832  0001A6                     send_md_cfg_cmds_ok@F6851:
   833                           	opt stack 0
   834  0001A6                     	ds	11
   835  0001B1                     send_md_cfg_cmds_ok@F6849:
   836                           	opt stack 0
   837  0001B1                     	ds	11
   838                           tblptru	equ	0xFF8
   839                           tblptrh	equ	0xFF7
   840                           tblptrl	equ	0xFF6
   841                           tablat	equ	0xFF5
   842                           postinc0	equ	0xFEE
   843                           wreg	equ	0xFE8
   844                           postdec1	equ	0xFE5
   845                           fsr1l	equ	0xFE1
   846                           
   847                           	psect	bssBANK2
   848  000200                     __pbssBANK2:
   849                           	opt stack 0
   850  000200                     _mdRxBuf:
   851                           	opt stack 0
   852  000200                     	ds	160
   853                           tblptru	equ	0xFF8
   854                           tblptrh	equ	0xFF7
   855                           tblptrl	equ	0xFF6
   856                           tablat	equ	0xFF5
   857                           postinc0	equ	0xFEE
   858                           wreg	equ	0xFE8
   859                           postdec1	equ	0xFE5
   860                           fsr1l	equ	0xFE1
   861                           
   862                           	psect	cstackBANK0
   863  000060                     __pcstackBANK0:
   864                           	opt stack 0
   865  000060                     close_socket_ok@deactivatePDP:
   866                           	opt stack 0
   867  000060                     send_md_cfg_cmds_ok@baud:
   868                           	opt stack 0
   869  000060                     send_over_socket_ok@openConnection:
   870                           	opt stack 0
   871  000060                     setup_data_ok@setApn:
   872                           	opt stack 0
   873                           
   874                           ; 47 bytes @ 0x0
   875  000060                     	ds	15
   876  00006F                     close_socket_ok@closeSocket:
   877                           	opt stack 0
   878                           
   879                           ; 10 bytes @ 0xF
   880  00006F                     	ds	1
   881  000070                     send_md_cfg_cmds_ok@ledCfg:
   882                           	opt stack 0
   883                           
   884                           ; 16 bytes @ 0x10
   885  000070                     	ds	16
   886  000080                     send_md_cfg_cmds_ok@cmee:
   887                           	opt stack 0
   888                           
   889                           ; 12 bytes @ 0x20
   890  000080                     	ds	12
   891  00008C                     send_md_cfg_cmds_ok@ledpattern:
   892                           	opt stack 0
   893  00008C                     send_over_socket_ok@srecv:
   894                           	opt stack 0
   895                           
   896                           ; 16 bytes @ 0x2C
   897  00008C                     	ds	3
   898  00008F                     setup_data_ok@cfgSocket:
   899                           	opt stack 0
   900                           
   901                           ; 25 bytes @ 0x2F
   902  00008F                     	ds	9
   903  000098                     send_md_cfg_cmds_ok@cereg:
   904                           	opt stack 0
   905                           
   906                           ; 12 bytes @ 0x38
   907  000098                     	ds	4
   908  00009C                     send_over_socket_ok@ssend:
   909                           	opt stack 0
   910                           
   911                           ; 13 bytes @ 0x3C
   912  00009C                     	ds	8
   913  0000A4                     send_md_cfg_cmds_ok@cpin:
   914                           	opt stack 0
   915                           
   916                           ; 11 bytes @ 0x44
   917  0000A4                     	ds	4
   918  0000A8                     setup_data_ok@activatePDP:
   919                           	opt stack 0
   920                           
   921                           ; 15 bytes @ 0x48
   922  0000A8                     	ds	1
   923  0000A9                     send_over_socket_ok@msg:
   924                           	opt stack 0
   925                           
   926                           ; 8 bytes @ 0x49
   927  0000A9                     	ds	6
   928  0000AF                     send_md_cfg_cmds_ok@creg:
   929                           	opt stack 0
   930                           
   931                           ; 11 bytes @ 0x4F
   932  0000AF                     	ds	2
   933  0000B1                     send_over_socket_ok@terminateData:
   934                           	opt stack 0
   935                           
   936                           ; 1 bytes @ 0x51
   937  0000B1                     	ds	9
   938  0000BA                     send_md_cfg_cmds_ok@gprs:
   939                           	opt stack 0
   940                           
   941                           ; 11 bytes @ 0x5A
   942  0000BA                     	ds	11
   943  0000C5                     send_md_cfg_cmds_ok@queryVersion:
   944                           	opt stack 0
   945                           
   946                           ; 10 bytes @ 0x65
   947  0000C5                     	ds	10
   948  0000CF                     send_md_cfg_cmds_ok@csq:
   949                           	opt stack 0
   950                           
   951                           ; 9 bytes @ 0x6F
   952  0000CF                     	ds	9
   953  0000D8                     send_md_cfg_cmds_ok@ate:
   954                           	opt stack 0
   955                           
   956                           ; 7 bytes @ 0x78
   957  0000D8                     	ds	7
   958  0000DF                     send_md_cfg_cmds_ok@at:
   959                           	opt stack 0
   960                           
   961                           ; 5 bytes @ 0x7F
   962  0000DF                     	ds	5
   963                           tblptru	equ	0xFF8
   964                           tblptrh	equ	0xFF7
   965                           tblptrl	equ	0xFF6
   966                           tablat	equ	0xFF5
   967                           postinc0	equ	0xFEE
   968                           wreg	equ	0xFE8
   969                           postdec1	equ	0xFE5
   970                           fsr1l	equ	0xFE1
   971                           
   972                           	psect	cstackCOMRAM
   973  000001                     __pcstackCOMRAM:
   974                           	opt stack 0
   975  000001                     ??_check_mdstate_tmr3:
   976  000001                     
   977                           ; 1 bytes @ 0x0
   978  000001                     	ds	1
   979  000002                     ??_isr:
   980                           
   981                           ; 1 bytes @ 0x1
   982  000002                     	ds	20
   983  000016                     ??_start_modem_send_process:
   984  000016                     md_uart_send@data:
   985                           	opt stack 0
   986                           
   987                           ; 1 bytes @ 0x15
   988  000016                     	ds	1
   989  000017                     md_uart_write_str_ok@data:
   990                           	opt stack 0
   991                           
   992                           ; 2 bytes @ 0x16
   993  000017                     	ds	1
   994  000018                     start_modem_send_process@i:
   995                           	opt stack 0
   996                           
   997                           ; 1 bytes @ 0x17
   998  000018                     	ds	1
   999  000019                     md_uart_write_str_ok@len1:
  1000                           	opt stack 0
  1001                           
  1002                           ; 1 bytes @ 0x18
  1003  000019                     	ds	1
  1004  00001A                     md_uart_write_str_ok@wantOk:
  1005                           	opt stack 0
  1006                           
  1007                           ; 1 bytes @ 0x19
  1008  00001A                     	ds	1
  1009  00001B                     md_uart_write_str_ok@waitToSendMoreData:
  1010                           	opt stack 0
  1011                           
  1012                           ; 1 bytes @ 0x1A
  1013  00001B                     	ds	1
  1014  00001C                     ??_md_uart_write_str_ok:
  1015                           
  1016                           ; 1 bytes @ 0x1B
  1017  00001C                     	ds	2
  1018  00001E                     md_uart_write_str_ok@numRetries:
  1019                           	opt stack 0
  1020                           
  1021                           ; 1 bytes @ 0x1D
  1022  00001E                     	ds	1
  1023  00001F                     md_uart_write_str_ok@index:
  1024                           	opt stack 0
  1025                           
  1026                           ; 1 bytes @ 0x1E
  1027  00001F                     	ds	1
  1028  000020                     md_uart_write_str_ok@currentChar:
  1029                           	opt stack 0
  1030                           
  1031                           ; 1 bytes @ 0x1F
  1032  000020                     	ds	1
  1033  000021                     md_uart_write_str_ok@pos:
  1034                           	opt stack 0
  1035                           
  1036                           ; 1 bytes @ 0x20
  1037  000021                     	ds	1
  1038  000022                     ??_send_over_socket_ok:
  1039  000022                     
  1040                           ; 1 bytes @ 0x21
  1041  000022                     	ds	2
  1042  000024                     ??_main:
  1043                           
  1044                           ; 1 bytes @ 0x23
  1045  000024                     	ds	1
  1046                           tblptru	equ	0xFF8
  1047                           tblptrh	equ	0xFF7
  1048                           tblptrl	equ	0xFF6
  1049                           tablat	equ	0xFF5
  1050                           postinc0	equ	0xFEE
  1051                           wreg	equ	0xFE8
  1052                           postdec1	equ	0xFE5
  1053                           fsr1l	equ	0xFE1
  1054                           
  1055 ;;
  1056 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1057 ;;
  1058 ;; *************** function _main *****************
  1059 ;; Defined at:
  1060 ;;		line 71 in file "main.c"
  1061 ;; Parameters:    Size  Location     Type
  1062 ;;		None
  1063 ;; Auto vars:     Size  Location     Type
  1064 ;;		None
  1065 ;; Return value:  Size  Location     Type
  1066 ;;                  1    wreg      void 
  1067 ;; Registers used:
  1068 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1069 ;; Tracked objects:
  1070 ;;		On entry : 0/0
  1071 ;;		On exit  : 0/0
  1072 ;;		Unchanged: 0/0
  1073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1075 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1076 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1077 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1078 ;;Total ram usage:        1 bytes
  1079 ;; Hardware stack levels required when called:    7
  1080 ;; This function calls:
  1081 ;;		_check_modem_state
  1082 ;;		_init_pic
  1083 ;;		_start_modem_send_process
  1084 ;; This function is called by:
  1085 ;;		Startup code after reset
  1086 ;; This function uses a non-reentrant model
  1087 ;;
  1088                           
  1089                           	psect	text0
  1090  001CA2                     __ptext0:
  1091                           	opt stack 0
  1092  001CA2                     _main:
  1093                           	opt stack 24
  1094                           
  1095                           ;main.c: 73: init_pic();
  1096                           
  1097                           ;incstack = 0
  1098  001CA2  ECE0  F00D         	call	_init_pic	;wreg free
  1099  001CA6                     
  1100                           ;main.c: 78: {
  1101                           ;main.c: 79: if (PORTBbits.RB4)
  1102  001CA6  A881               	btfss	3969,4,c	;volatile
  1103  001CA8  D00C               	goto	l139
  1104                           
  1105                           ;main.c: 80: {
  1106                           ;main.c: 81: _delay((unsigned long)((50)*(8000000/4000.0)));
  1107  001CAA  0E82               	movlw	130
  1108  001CAC  6E24               	movwf	??_main& (0+255),c
  1109  001CAE  0EDE               	movlw	222
  1110  001CB0                     u3717:
  1111  001CB0  2EE8               	decfsz	wreg,f,c
  1112  001CB2  D7FE               	bra	u3717
  1113  001CB4  2E24               	decfsz	??_main& (0+255),f,c
  1114  001CB6  D7FC               	bra	u3717
  1115                           
  1116                           ;main.c: 82: if (PORTBbits.RB4)
  1117  001CB8  A881               	btfss	3969,4,c	;volatile
  1118  001CBA  D003               	goto	l139
  1119                           
  1120                           ;main.c: 83: {
  1121                           ;main.c: 84: start_modem_send_process('T');
  1122  001CBC  0E54               	movlw	84
  1123  001CBE  EC12  F00E         	call	_start_modem_send_process
  1124  001CC2                     l139:
  1125                           
  1126                           ;main.c: 85: }
  1127                           ;main.c: 86: }
  1128                           ;main.c: 87: check_modem_state();
  1129  001CC2  EC6A  F00D         	call	_check_modem_state	;wreg free
  1130  001CC6  D7EF               	goto	l137
  1131  001CC8                     __end_of_main:
  1132                           	opt stack 0
  1133                           tblptru	equ	0xFF8
  1134                           tblptrh	equ	0xFF7
  1135                           tblptrl	equ	0xFF6
  1136                           tablat	equ	0xFF5
  1137                           postinc0	equ	0xFEE
  1138                           wreg	equ	0xFE8
  1139                           postdec1	equ	0xFE5
  1140                           fsr1l	equ	0xFE1
  1141                           
  1142 ;; *************** function _init_pic *****************
  1143 ;; Defined at:
  1144 ;;		line 93 in file "main.c"
  1145 ;; Parameters:    Size  Location     Type
  1146 ;;		None
  1147 ;; Auto vars:     Size  Location     Type
  1148 ;;		None
  1149 ;; Return value:  Size  Location     Type
  1150 ;;                  1    wreg      void 
  1151 ;; Registers used:
  1152 ;;		wreg, status,2
  1153 ;; Tracked objects:
  1154 ;;		On entry : 0/0
  1155 ;;		On exit  : 0/0
  1156 ;;		Unchanged: 0/0
  1157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1161 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1162 ;;Total ram usage:        0 bytes
  1163 ;; Hardware stack levels used:    1
  1164 ;; Hardware stack levels required when called:    3
  1165 ;; This function calls:
  1166 ;;		Nothing
  1167 ;; This function is called by:
  1168 ;;		_main
  1169 ;; This function uses a non-reentrant model
  1170 ;;
  1171                           
  1172                           	psect	text1
  1173  001BC0                     __ptext1:
  1174                           	opt stack 0
  1175  001BC0                     _init_pic:
  1176                           	opt stack 27
  1177                           
  1178                           ;main.c: 96: OSCCONbits.IDLEN = 0;
  1179                           
  1180                           ;incstack = 0
  1181  001BC0  9ED3               	bcf	4051,7,c	;volatile
  1182                           
  1183                           ;main.c: 97: OSCCONbits.IRCF = 0b110;
  1184  001BC2  50D3               	movf	4051,w,c	;volatile
  1185  001BC4  0B8F               	andlw	-113
  1186  001BC6  0960               	iorlw	96
  1187  001BC8  6ED3               	movwf	4051,c	;volatile
  1188                           
  1189                           ;main.c: 98: OSCCONbits.OSTS = 1;
  1190  001BCA  86D3               	bsf	4051,3,c	;volatile
  1191                           
  1192                           ;main.c: 102: ANSELA = 0x01;
  1193  001BCC  0E01               	movlw	1
  1194  001BCE  010F               	movlb	15	; () banked
  1195  001BD0  6F38               	movwf	56,b	;volatile
  1196                           
  1197                           ; BSR set to: 15
  1198                           ;main.c: 104: TRISAbits.TRISA0 = 1;
  1199  001BD2  8092               	bsf	3986,0,c	;volatile
  1200                           
  1201                           ; BSR set to: 15
  1202                           ;main.c: 105: TRISAbits.TRISA3 = 0;
  1203  001BD4  9692               	bcf	3986,3,c	;volatile
  1204                           
  1205                           ; BSR set to: 15
  1206                           ;main.c: 106: PORTAbits.RA3 = 0;
  1207  001BD6  9680               	bcf	3968,3,c	;volatile
  1208                           
  1209                           ;main.c: 109: ANSELC = 0x00;
  1210  001BD8  0E00               	movlw	0
  1211  001BDA  6F3A               	movwf	58,b	;volatile
  1212                           
  1213                           ; BSR set to: 15
  1214                           ;main.c: 110: PORTBbits.RB3 = 1;
  1215  001BDC  8681               	bsf	3969,3,c	;volatile
  1216                           
  1217                           ; BSR set to: 15
  1218                           ;main.c: 111: TRISBbits.TRISB3 = 0;
  1219  001BDE  9693               	bcf	3987,3,c	;volatile
  1220                           
  1221                           ; BSR set to: 15
  1222                           ;main.c: 112: PORTCbits.RC6 = 1;
  1223  001BE0  8C82               	bsf	3970,6,c	;volatile
  1224                           
  1225                           ; BSR set to: 15
  1226                           ;main.c: 113: TRISCbits.TRISC6 = 0;
  1227  001BE2  9C94               	bcf	3988,6,c	;volatile
  1228                           
  1229                           ; BSR set to: 15
  1230                           ;main.c: 114: LATCbits.LATC7 = 1;
  1231  001BE4  8E8B               	bsf	3979,7,c	;volatile
  1232                           
  1233                           ; BSR set to: 15
  1234                           ;main.c: 115: TRISCbits.TRISC7 = 1;
  1235  001BE6  8E94               	bsf	3988,7,c	;volatile
  1236                           
  1237                           ;main.c: 118: ANSELB = 0x00;
  1238  001BE8  0E00               	movlw	0
  1239  001BEA  6F39               	movwf	57,b	;volatile
  1240                           
  1241                           ; BSR set to: 15
  1242                           ;main.c: 120: TRISBbits.TRISB0 = 1;
  1243  001BEC  8093               	bsf	3987,0,c	;volatile
  1244                           
  1245                           ; BSR set to: 15
  1246                           ;main.c: 121: TRISCbits.TRISC1 = 1;
  1247  001BEE  8294               	bsf	3988,1,c	;volatile
  1248                           
  1249                           ; BSR set to: 15
  1250                           ;main.c: 122: PORTBbits.RB1 = 1;
  1251  001BF0  8281               	bsf	3969,1,c	;volatile
  1252                           
  1253                           ; BSR set to: 15
  1254                           ;main.c: 123: TRISBbits.TRISB1 = 1;
  1255  001BF2  8293               	bsf	3987,1,c	;volatile
  1256                           
  1257                           ; BSR set to: 15
  1258                           ;main.c: 124: PORTBbits.RB2 = 1;
  1259  001BF4  8481               	bsf	3969,2,c	;volatile
  1260                           
  1261                           ; BSR set to: 15
  1262                           ;main.c: 125: TRISBbits.TRISB2 = 1;
  1263  001BF6  8493               	bsf	3987,2,c	;volatile
  1264                           
  1265                           ; BSR set to: 15
  1266                           ;main.c: 126: PORTCbits.RC4 = 1;
  1267  001BF8  8882               	bsf	3970,4,c	;volatile
  1268                           
  1269                           ; BSR set to: 15
  1270                           ;main.c: 127: TRISCbits.TRISC4 = 0;
  1271  001BFA  9894               	bcf	3988,4,c	;volatile
  1272                           
  1273                           ; BSR set to: 15
  1274                           ;main.c: 128: PORTBbits.RB4 = 1;
  1275  001BFC  8881               	bsf	3969,4,c	;volatile
  1276                           
  1277                           ; BSR set to: 15
  1278                           ;main.c: 129: TRISBbits.TRISB4 = 1;
  1279  001BFE  8893               	bsf	3987,4,c	;volatile
  1280                           
  1281                           ; BSR set to: 15
  1282                           ;main.c: 130: PORTBbits.RB5 = 1;
  1283  001C00  8A81               	bsf	3969,5,c	;volatile
  1284                           
  1285                           ; BSR set to: 15
  1286                           ;main.c: 131: TRISBbits.TRISB5 = 1;
  1287  001C02  8A93               	bsf	3987,5,c	;volatile
  1288                           
  1289                           ; BSR set to: 15
  1290                           ;main.c: 132: LATBbits.LATB6 = 1;
  1291  001C04  8C8A               	bsf	3978,6,c	;volatile
  1292                           
  1293                           ; BSR set to: 15
  1294                           ;main.c: 133: TRISBbits.TRISB6 = 0;
  1295  001C06  9C93               	bcf	3987,6,c	;volatile
  1296                           
  1297                           ; BSR set to: 15
  1298                           ;main.c: 134: PORTBbits.RB7 = 1;
  1299  001C08  8E81               	bsf	3969,7,c	;volatile
  1300                           
  1301                           ; BSR set to: 15
  1302                           ;main.c: 135: TRISBbits.TRISB7 = 1;
  1303  001C0A  8E93               	bsf	3987,7,c	;volatile
  1304                           
  1305                           ; BSR set to: 15
  1306                           ;main.c: 137: PORTAbits.RA1 = 0;
  1307  001C0C  9280               	bcf	3968,1,c	;volatile
  1308                           
  1309                           ; BSR set to: 15
  1310                           ;main.c: 138: TRISAbits.TRISA1 = 0;
  1311  001C0E  9292               	bcf	3986,1,c	;volatile
  1312                           
  1313                           ;main.c: 145: T0CON = 0x87;
  1314  001C10  0E87               	movlw	135
  1315  001C12  6ED5               	movwf	4053,c	;volatile
  1316                           
  1317                           ;main.c: 146: TMR0H = ((65535-780)/256);
  1318  001C14  0EFC               	movlw	252
  1319  001C16  6ED7               	movwf	4055,c	;volatile
  1320                           
  1321                           ;main.c: 147: TMR0L = ((65535-780)%256);
  1322  001C18  0EF3               	movlw	243
  1323  001C1A  6ED6               	movwf	4054,c	;volatile
  1324                           
  1325                           ; BSR set to: 15
  1326                           ;main.c: 148: TMR0IF = 0;
  1327  001C1C  94F2               	bcf	intcon,2,c	;volatile
  1328                           
  1329                           ;main.c: 169: md_state = IDLE;
  1330  001C1E  0E00               	movlw	0
  1331  001C20  6E3F               	movwf	_md_state,c
  1332                           
  1333                           ; BSR set to: 15
  1334  001C22  0012               	return		;funcret
  1335  001C24                     __end_of_init_pic:
  1336                           	opt stack 0
  1337                           tblptru	equ	0xFF8
  1338                           tblptrh	equ	0xFF7
  1339                           tblptrl	equ	0xFF6
  1340                           tablat	equ	0xFF5
  1341                           intcon	equ	0xFF2
  1342                           postinc0	equ	0xFEE
  1343                           wreg	equ	0xFE8
  1344                           postdec1	equ	0xFE5
  1345                           fsr1l	equ	0xFE1
  1346                           
  1347 ;; *************** function _check_modem_state *****************
  1348 ;; Defined at:
  1349 ;;		line 47 in file "modem.c"
  1350 ;; Parameters:    Size  Location     Type
  1351 ;;		None
  1352 ;; Auto vars:     Size  Location     Type
  1353 ;;		None
  1354 ;; Return value:  Size  Location     Type
  1355 ;;                  1    wreg      void 
  1356 ;; Registers used:
  1357 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1358 ;; Tracked objects:
  1359 ;;		On entry : 0/0
  1360 ;;		On exit  : 0/0
  1361 ;;		Unchanged: 0/0
  1362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1366 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1367 ;;Total ram usage:        0 bytes
  1368 ;; Hardware stack levels used:    1
  1369 ;; Hardware stack levels required when called:    6
  1370 ;; This function calls:
  1371 ;;		_close_socket_ok
  1372 ;;		_send_md_cfg_cmds_ok
  1373 ;;		_send_over_socket_ok
  1374 ;;		_setup_data_ok
  1375 ;; This function is called by:
  1376 ;;		_main
  1377 ;; This function uses a non-reentrant model
  1378 ;;
  1379                           
  1380                           	psect	text2
  1381  001AD4                     __ptext2:
  1382                           	opt stack 0
  1383  001AD4                     _check_modem_state:
  1384                           	opt stack 24
  1385                           
  1386                           ;modem.c: 49: switch (md_state)
  1387                           
  1388                           ; BSR set to: 15
  1389                           ;incstack = 0
  1390  001AD4  D02B               	goto	l427
  1391  001AD6                     
  1392                           ;modem.c: 54: if (bootTimerIsDone)
  1393  001AD6  0100               	movlb	0	; () banked
  1394  001AD8  51F2               	movf	_bootTimerIsDone& (0+255),w,b
  1395  001ADA  B4D8               	btfsc	status,2,c
  1396  001ADC  0012               	return	
  1397                           
  1398                           ; BSR set to: 0
  1399                           ;modem.c: 55: md_state = CONFIG;
  1400  001ADE  0E02               	movlw	2
  1401  001AE0  6E3F               	movwf	_md_state,c
  1402                           
  1403                           ; BSR set to: 0
  1404                           ;modem.c: 56: break;
  1405  001AE2  0012               	return	
  1406  001AE4                     
  1407                           ;modem.c: 58: if (send_md_cfg_cmds_ok())
  1408                           
  1409                           ; BSR set to: 0
  1410  001AE4  EC39  F008         	call	_send_md_cfg_cmds_ok	;wreg free
  1411  001AE8  0900               	iorlw	0
  1412  001AEA  B4D8               	btfsc	status,2,c
  1413  001AEC  0012               	return	
  1414                           
  1415                           ;modem.c: 59: {
  1416                           ;modem.c: 61: md_state = SET_UP_DATA;
  1417  001AEE  0E03               	movlw	3
  1418  001AF0  6E3F               	movwf	_md_state,c
  1419                           
  1420                           ;modem.c: 64: }
  1421                           ;modem.c: 65: break;
  1422  001AF2  0012               	return	
  1423  001AF4                     
  1424                           ;modem.c: 67: setup_data_ok();
  1425  001AF4  EC1B  F00D         	call	_setup_data_ok	;wreg free
  1426                           
  1427                           ;modem.c: 68: md_state = SENDING_DATA;
  1428  001AF8  0E05               	movlw	5
  1429  001AFA  6E3F               	movwf	_md_state,c
  1430                           
  1431                           ;modem.c: 69: break;
  1432  001AFC  0012               	return	
  1433  001AFE                     
  1434                           ;modem.c: 71: if (pdpIsActive)
  1435  001AFE  0100               	movlb	0	; () banked
  1436  001B00  51F1               	movf	_pdpIsActive& (0+255),w,b
  1437  001B02  B4D8               	btfsc	status,2,c
  1438  001B04  0012               	return	
  1439                           
  1440                           ; BSR set to: 0
  1441                           ;modem.c: 72: md_state = SENDING_DATA;
  1442  001B06  0E05               	movlw	5
  1443  001B08  6E3F               	movwf	_md_state,c
  1444                           
  1445                           ; BSR set to: 0
  1446                           ;modem.c: 73: break;
  1447  001B0A  0012               	return	
  1448  001B0C                     
  1449                           ;modem.c: 75: send_over_socket_ok();
  1450                           
  1451                           ; BSR set to: 0
  1452  001B0C  ECEC  F00B         	call	_send_over_socket_ok	;wreg free
  1453  001B10  ECAA  F00D         	call	_close_socket_ok	;wreg free
  1454  001B14  0900               	iorlw	0
  1455  001B16  B4D8               	btfsc	status,2,c
  1456  001B18  D7FB               	goto	l439
  1457                           
  1458                           ;modem.c: 77: pdpIsActive = 0;
  1459  001B1A  0E00               	movlw	0
  1460  001B1C  0100               	movlb	0	; () banked
  1461  001B1E  6FF1               	movwf	_pdpIsActive& (0+255),b
  1462                           
  1463                           ;modem.c: 78: md_state = IDLE;
  1464  001B20  0E00               	movlw	0
  1465  001B22  6E3F               	movwf	_md_state,c
  1466                           
  1467                           ; BSR set to: 0
  1468                           ;modem.c: 79: PORTAbits.RA3 = 0;
  1469  001B24  9680               	bcf	3968,3,c	;volatile
  1470                           
  1471                           ;modem.c: 80: alreadyAwake = 0;
  1472  001B26  0E00               	movlw	0
  1473  001B28  6E3E               	movwf	_alreadyAwake,c
  1474                           
  1475                           ; BSR set to: 0
  1476                           ;modem.c: 87: }
  1477                           
  1478                           ;modem.c: 81: break;
  1479  001B2A  0012               	return	
  1480  001B2C                     l427:
  1481                           
  1482                           ; BSR set to: 0
  1483  001B2C  503F               	movf	_md_state,w,c
  1484                           
  1485                           ; Switch size 1, requested type "space"
  1486                           ; Number of cases is 6, Range of values is 0 to 5
  1487                           ; switch strategies available:
  1488                           ; Name         Instructions Cycles
  1489                           ; simple_byte           19    10 (average)
  1490                           ;	Chosen strategy is simple_byte
  1491  001B2E  0A00               	xorlw	0	; case 0
  1492  001B30  B4D8               	btfsc	status,2,c
  1493  001B32  0012               	return	
  1494  001B34  0A01               	xorlw	1	; case 1
  1495  001B36  B4D8               	btfsc	status,2,c
  1496  001B38  D7CE               	goto	l430
  1497  001B3A  0A03               	xorlw	3	; case 2
  1498  001B3C  B4D8               	btfsc	status,2,c
  1499  001B3E  D7D2               	goto	l432
  1500  001B40  0A01               	xorlw	1	; case 3
  1501  001B42  B4D8               	btfsc	status,2,c
  1502  001B44  D7D7               	goto	l434
  1503  001B46  0A07               	xorlw	7	; case 4
  1504  001B48  B4D8               	btfsc	status,2,c
  1505  001B4A  D7D9               	goto	l435
  1506  001B4C  0A01               	xorlw	1	; case 5
  1507  001B4E  A4D8               	btfss	status,2,c
  1508  001B50  0012               	return	
  1509  001B52  D7DC               	goto	l437
  1510  001B54                     __end_of_check_modem_state:
  1511                           	opt stack 0
  1512                           tblptru	equ	0xFF8
  1513                           tblptrh	equ	0xFF7
  1514                           tblptrl	equ	0xFF6
  1515                           tablat	equ	0xFF5
  1516                           intcon	equ	0xFF2
  1517                           postinc0	equ	0xFEE
  1518                           wreg	equ	0xFE8
  1519                           postdec1	equ	0xFE5
  1520                           fsr1l	equ	0xFE1
  1521                           status	equ	0xFD8
  1522                           
  1523 ;; *************** function _setup_data_ok *****************
  1524 ;; Defined at:
  1525 ;;		line 196 in file "modem.c"
  1526 ;; Parameters:    Size  Location     Type
  1527 ;;		None
  1528 ;; Auto vars:     Size  Location     Type
  1529 ;;  setApn         47    0[BANK0 ] unsigned char [47]
  1530 ;;  cfgSocket      25   47[BANK0 ] unsigned char [25]
  1531 ;;  activatePDP    15   72[BANK0 ] unsigned char [15]
  1532 ;; Return value:  Size  Location     Type
  1533 ;;                  1    wreg      unsigned char 
  1534 ;; Registers used:
  1535 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1536 ;; Tracked objects:
  1537 ;;		On entry : 0/0
  1538 ;;		On exit  : 0/0
  1539 ;;		Unchanged: 0/0
  1540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1542 ;;      Locals:         0      87       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1544 ;;      Totals:         0      87       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1545 ;;Total ram usage:       87 bytes
  1546 ;; Hardware stack levels used:    1
  1547 ;; Hardware stack levels required when called:    5
  1548 ;; This function calls:
  1549 ;;		_init_md_uart
  1550 ;;		_md_uart_write_str_ok
  1551 ;;		_terminate_md_uart
  1552 ;; This function is called by:
  1553 ;;		_check_modem_state
  1554 ;; This function uses a non-reentrant model
  1555 ;;
  1556                           
  1557                           	psect	text3
  1558  001A36                     __ptext3:
  1559                           	opt stack 0
  1560  001A36                     _setup_data_ok:
  1561                           	opt stack 24
  1562                           
  1563                           ;modem.c: 198: uint8_t setApn[] = "AT+CGDCONT=3,\"IPV4V6\",\"wyleslte.gw7.vzwentp\"\r\n"
      +                          ;
  1564                           
  1565                           ;incstack = 0
  1566  001A36  EE21  F000         	lfsr	2,setup_data_ok@F6871
  1567  001A3A  EE10  F060         	lfsr	1,setup_data_ok@setApn
  1568  001A3E  0E2E               	movlw	46
  1569  001A40                     u3551:
  1570  001A40  CFDB FFE3          	movff	plusw2,plusw1
  1571  001A44  06E8               	decf	wreg,f,c
  1572  001A46  E2FC               	bc	u3551
  1573                           
  1574                           ;modem.c: 199: uint8_t cfgSocket[] = "AT#SCFGEXT=1,1,0,0,0,0\r\n";
  1575  001A48  EE21  F02F         	lfsr	2,setup_data_ok@F6873
  1576  001A4C  EE10  F08F         	lfsr	1,setup_data_ok@cfgSocket
  1577  001A50  0E18               	movlw	24
  1578  001A52                     u3561:
  1579  001A52  CFDB FFE3          	movff	plusw2,plusw1
  1580  001A56  06E8               	decf	wreg,f,c
  1581  001A58  E2FC               	bc	u3561
  1582                           
  1583                           ;modem.c: 200: uint8_t activatePDP[] = "AT#SGACT=3,1\r\n";
  1584  001A5A  EE21  F068         	lfsr	2,setup_data_ok@F6875
  1585  001A5E  EE10  F0A8         	lfsr	1,setup_data_ok@activatePDP
  1586  001A62  0E0E               	movlw	14
  1587  001A64                     u3571:
  1588  001A64  CFDB FFE3          	movff	plusw2,plusw1
  1589  001A68  06E8               	decf	wreg,f,c
  1590  001A6A  E2FC               	bc	u3571
  1591                           
  1592                           ;modem.c: 202: init_md_uart();
  1593  001A6C  EC64  F00E         	call	_init_md_uart	;wreg free
  1594                           
  1595                           ;modem.c: 205: if (!sentAT1)
  1596  001A70  0100               	movlb	0	; () banked
  1597  001A72  51F0               	movf	_sentAT1& (0+255),w,b
  1598  001A74  A4D8               	btfss	status,2,c
  1599  001A76  D00E               	goto	l493
  1600                           
  1601                           ; BSR set to: 0
  1602                           ;modem.c: 206: sentAT1 &= md_uart_write_str_ok((uint8_t *)&setApn[0], sizeof(setApn), 1,
      +                           0);
  1603  001A78  0E60               	movlw	low setup_data_ok@setApn
  1604  001A7A  6E17               	movwf	md_uart_write_str_ok@data,c
  1605  001A7C  0E00               	movlw	high setup_data_ok@setApn
  1606  001A7E  6E18               	movwf	md_uart_write_str_ok@data+1,c
  1607  001A80  0E2F               	movlw	47
  1608  001A82  6E19               	movwf	md_uart_write_str_ok@len1,c
  1609  001A84  0E01               	movlw	1
  1610  001A86  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  1611  001A88  0E00               	movlw	0
  1612  001A8A  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  1613  001A8C  EC00  F00A         	call	_md_uart_write_str_ok	;wreg free
  1614  001A90  0100               	movlb	0	; () banked
  1615  001A92  17F0               	andwf	_sentAT1& (0+255),f,b
  1616  001A94                     l493:
  1617                           
  1618                           ; BSR set to: 0
  1619                           ;modem.c: 207: md_uart_write_str_ok((uint8_t *)&cfgSocket[0], sizeof(cfgSocket), 1, 0);
  1620  001A94  0E8F               	movlw	low setup_data_ok@cfgSocket
  1621  001A96  6E17               	movwf	md_uart_write_str_ok@data,c
  1622  001A98  0E00               	movlw	high setup_data_ok@cfgSocket
  1623  001A9A  6E18               	movwf	md_uart_write_str_ok@data+1,c
  1624  001A9C  0E19               	movlw	25
  1625  001A9E  6E19               	movwf	md_uart_write_str_ok@len1,c
  1626  001AA0  0E01               	movlw	1
  1627  001AA2  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  1628  001AA4  0E00               	movlw	0
  1629  001AA6  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  1630  001AA8  EC00  F00A         	call	_md_uart_write_str_ok	;wreg free
  1631                           
  1632                           ;modem.c: 208: pdpIsActive = md_uart_write_str_ok((uint8_t *)&activatePDP[0], sizeof(act
      +                          ivatePDP), 1, 0);
  1633  001AAC  0EA8               	movlw	low setup_data_ok@activatePDP
  1634  001AAE  6E17               	movwf	md_uart_write_str_ok@data,c
  1635  001AB0  0E00               	movlw	high setup_data_ok@activatePDP
  1636  001AB2  6E18               	movwf	md_uart_write_str_ok@data+1,c
  1637  001AB4  0E0F               	movlw	15
  1638  001AB6  6E19               	movwf	md_uart_write_str_ok@len1,c
  1639  001AB8  0E01               	movlw	1
  1640  001ABA  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  1641  001ABC  0E00               	movlw	0
  1642  001ABE  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  1643  001AC0  EC00  F00A         	call	_md_uart_write_str_ok	;wreg free
  1644  001AC4  0100               	movlb	0	; () banked
  1645  001AC6  6FF1               	movwf	_pdpIsActive& (0+255),b
  1646                           
  1647                           ; BSR set to: 0
  1648                           ;modem.c: 209: terminate_md_uart();
  1649  001AC8  ECBC  F00E         	call	_terminate_md_uart	;wreg free
  1650                           
  1651                           ;modem.c: 210: pdpIsActive = 1;
  1652  001ACC  0E01               	movlw	1
  1653  001ACE  0100               	movlb	0	; () banked
  1654  001AD0  6FF1               	movwf	_pdpIsActive& (0+255),b
  1655  001AD2  0012               	return	
  1656  001AD4                     __end_of_setup_data_ok:
  1657                           	opt stack 0
  1658                           tblptru	equ	0xFF8
  1659                           tblptrh	equ	0xFF7
  1660                           tblptrl	equ	0xFF6
  1661                           tablat	equ	0xFF5
  1662                           intcon	equ	0xFF2
  1663                           postinc0	equ	0xFEE
  1664                           wreg	equ	0xFE8
  1665                           postdec1	equ	0xFE5
  1666                           plusw1	equ	0xFE3
  1667                           fsr1l	equ	0xFE1
  1668                           plusw2	equ	0xFDB
  1669                           status	equ	0xFD8
  1670                           
  1671 ;; *************** function _send_over_socket_ok *****************
  1672 ;; Defined at:
  1673 ;;		line 216 in file "modem.c"
  1674 ;; Parameters:    Size  Location     Type
  1675 ;;		None
  1676 ;; Auto vars:     Size  Location     Type
  1677 ;;  openConnecti   44    0[BANK0 ] const unsigned char [44]
  1678 ;;  srecv          16   44[BANK0 ] const unsigned char [16]
  1679 ;;  ssend          13   60[BANK0 ] const unsigned char [13]
  1680 ;;  msg             8   73[BANK0 ] const unsigned char [8]
  1681 ;;  terminateDat    1   81[BANK0 ] unsigned char 
  1682 ;; Return value:  Size  Location     Type
  1683 ;;                  1    wreg      unsigned char 
  1684 ;; Registers used:
  1685 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1686 ;; Tracked objects:
  1687 ;;		On entry : 0/0
  1688 ;;		On exit  : 0/0
  1689 ;;		Unchanged: 0/0
  1690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1692 ;;      Locals:         0      82       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1693 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1694 ;;      Totals:         2      82       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1695 ;;Total ram usage:       84 bytes
  1696 ;; Hardware stack levels used:    1
  1697 ;; Hardware stack levels required when called:    5
  1698 ;; This function calls:
  1699 ;;		_init_md_uart
  1700 ;;		_md_uart_write_str_ok
  1701 ;;		_terminate_md_uart
  1702 ;; This function is called by:
  1703 ;;		_check_modem_state
  1704 ;; This function uses a non-reentrant model
  1705 ;;
  1706                           
  1707                           	psect	text4
  1708  0017D8                     __ptext4:
  1709                           	opt stack 0
  1710  0017D8                     _send_over_socket_ok:
  1711                           	opt stack 24
  1712                           
  1713                           ;modem.c: 218: const uint8_t openConnection[] = "AT#SD=1,0,10510,\"modules.telit.com\",0
      +                          ,0,1\r\n";
  1714                           
  1715                           ; BSR set to: 0
  1716                           ;incstack = 0
  1717  0017D8  0E01               	movlw	low send_over_socket_ok@F6880
  1718  0017DA  6EF6               	movwf	tblptrl,c
  1719  0017DC                     	if	1	;There is more than 1 active tblptr byte
  1720  0017DC  0E10               	movlw	high send_over_socket_ok@F6880
  1721  0017DE  6EF7               	movwf	tblptrh,c
  1722  0017E0                     	endif
  1723  0017E0                     	if	0	;There are less than 3 active tblptr bytes
  1724  0017E0                     	endif
  1725  0017E0  EE20  F060         	lfsr	2,send_over_socket_ok@openConnection
  1726  0017E4  0E2B               	movlw	43
  1727  0017E6                     u3590:
  1728  0017E6  0009               	tblrd		*+
  1729  0017E8  CFF5 FFDE          	movff	tablat,postinc2
  1730  0017EC  06E8               	decf	wreg,f,c
  1731  0017EE  E2FB               	bc	u3590
  1732                           
  1733                           ;modem.c: 219: const uint8_t ssend[] = "AT#SSEND=1\r\n";
  1734  0017F0  0E4C               	movlw	low send_over_socket_ok@F6882
  1735  0017F2  6EF6               	movwf	tblptrl,c
  1736  0017F4                     	if	1	;There is more than 1 active tblptr byte
  1737  0017F4  0E10               	movlw	high send_over_socket_ok@F6882
  1738  0017F6  6EF7               	movwf	tblptrh,c
  1739  0017F8                     	endif
  1740  0017F8                     	if	0	;There are less than 3 active tblptr bytes
  1741  0017F8                     	endif
  1742  0017F8  EE20  F09C         	lfsr	2,send_over_socket_ok@ssend
  1743  0017FC  0E0C               	movlw	12
  1744  0017FE                     u3600:
  1745  0017FE  0009               	tblrd		*+
  1746  001800  CFF5 FFDE          	movff	tablat,postinc2
  1747  001804  06E8               	decf	wreg,f,c
  1748  001806  E2FB               	bc	u3600
  1749                           
  1750                           ;modem.c: 220: const uint8_t srecv[]="AT#SRECV=1,89\r\n";
  1751  001808  0E2D               	movlw	low send_over_socket_ok@F6884
  1752  00180A  6EF6               	movwf	tblptrl,c
  1753  00180C                     	if	1	;There is more than 1 active tblptr byte
  1754  00180C  0E10               	movlw	high send_over_socket_ok@F6884
  1755  00180E  6EF7               	movwf	tblptrh,c
  1756  001810                     	endif
  1757  001810                     	if	0	;There are less than 3 active tblptr bytes
  1758  001810                     	endif
  1759  001810  EE20  F08C         	lfsr	2,send_over_socket_ok@srecv
  1760  001814  0E0F               	movlw	15
  1761  001816                     u3610:
  1762  001816  0009               	tblrd		*+
  1763  001818  CFF5 FFDE          	movff	tablat,postinc2
  1764  00181C  06E8               	decf	wreg,f,c
  1765  00181E  E2FB               	bc	u3610
  1766                           
  1767                           ;modem.c: 221: const uint8_t msg[] = "Echo.\r\n";
  1768  001820  0E63               	movlw	low send_over_socket_ok@F6886
  1769  001822  6EF6               	movwf	tblptrl,c
  1770  001824                     	if	1	;There is more than 1 active tblptr byte
  1771  001824  0E10               	movlw	high send_over_socket_ok@F6886
  1772  001826  6EF7               	movwf	tblptrh,c
  1773  001828                     	endif
  1774  001828                     	if	0	;There are less than 3 active tblptr bytes
  1775  001828                     	endif
  1776  001828  EE20  F0A9         	lfsr	2,send_over_socket_ok@msg
  1777  00182C  0E07               	movlw	7
  1778  00182E                     u3620:
  1779  00182E  0009               	tblrd		*+
  1780  001830  CFF5 FFDE          	movff	tablat,postinc2
  1781  001834  06E8               	decf	wreg,f,c
  1782  001836  E2FB               	bc	u3620
  1783                           
  1784                           ;modem.c: 223: uint8_t terminateData = 26;
  1785  001838  0E1A               	movlw	26
  1786  00183A  0100               	movlb	0	; () banked
  1787  00183C  6FB1               	movwf	send_over_socket_ok@terminateData& (0+255),b
  1788                           
  1789                           ; BSR set to: 0
  1790                           ;modem.c: 224: init_md_uart();
  1791  00183E  EC64  F00E         	call	_init_md_uart	;wreg free
  1792                           
  1793                           ;modem.c: 226: md_uart_write_str_ok((uint8_t *)&openConnection[0], sizeof(openConnection
      +                          ), 1, 0);
  1794  001842  0E60               	movlw	low send_over_socket_ok@openConnection
  1795  001844  6E17               	movwf	md_uart_write_str_ok@data,c
  1796  001846  0E00               	movlw	high send_over_socket_ok@openConnection
  1797  001848  6E18               	movwf	md_uart_write_str_ok@data+1,c
  1798  00184A  0E2C               	movlw	44
  1799  00184C  6E19               	movwf	md_uart_write_str_ok@len1,c
  1800  00184E  0E01               	movlw	1
  1801  001850  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  1802  001852  0E00               	movlw	0
  1803  001854  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  1804  001856  EC00  F00A         	call	_md_uart_write_str_ok	;wreg free
  1805                           
  1806                           ;modem.c: 229: md_uart_write_str_ok((uint8_t *)&ssend[0], sizeof(ssend), 0, 1);
  1807  00185A  0E9C               	movlw	low send_over_socket_ok@ssend
  1808  00185C  6E17               	movwf	md_uart_write_str_ok@data,c
  1809  00185E  0E00               	movlw	high send_over_socket_ok@ssend
  1810  001860  6E18               	movwf	md_uart_write_str_ok@data+1,c
  1811  001862  0E0D               	movlw	13
  1812  001864  6E19               	movwf	md_uart_write_str_ok@len1,c
  1813  001866  0E00               	movlw	0
  1814  001868  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  1815  00186A  0E01               	movlw	1
  1816  00186C  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  1817  00186E  EC00  F00A         	call	_md_uart_write_str_ok	;wreg free
  1818                           
  1819                           ;modem.c: 231: md_uart_write_str_ok((uint8_t *)&msg[0], sizeof(msg), 0, 0);
  1820  001872  0EA9               	movlw	low send_over_socket_ok@msg
  1821  001874  6E17               	movwf	md_uart_write_str_ok@data,c
  1822  001876  0E00               	movlw	high send_over_socket_ok@msg
  1823  001878  6E18               	movwf	md_uart_write_str_ok@data+1,c
  1824  00187A  0E08               	movlw	8
  1825  00187C  6E19               	movwf	md_uart_write_str_ok@len1,c
  1826  00187E  0E00               	movlw	0
  1827  001880  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  1828  001882  0E00               	movlw	0
  1829  001884  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  1830  001886  EC00  F00A         	call	_md_uart_write_str_ok	;wreg free
  1831                           
  1832                           ;modem.c: 234: md_uart_write_str_ok((uint8_t *)&terminateData, 1, 1, 0);
  1833  00188A  0EB1               	movlw	low send_over_socket_ok@terminateData
  1834  00188C  6E17               	movwf	md_uart_write_str_ok@data,c
  1835  00188E  0E00               	movlw	high send_over_socket_ok@terminateData
  1836  001890  6E18               	movwf	md_uart_write_str_ok@data+1,c
  1837  001892  0E01               	movlw	1
  1838  001894  6E19               	movwf	md_uart_write_str_ok@len1,c
  1839  001896  0E01               	movlw	1
  1840  001898  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  1841  00189A  0E00               	movlw	0
  1842  00189C  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  1843  00189E  EC00  F00A         	call	_md_uart_write_str_ok	;wreg free
  1844                           
  1845                           ;modem.c: 235: CREN1 = 1;
  1846  0018A2  88AB               	bsf	4011,4,c	;volatile
  1847                           
  1848                           ;modem.c: 236: _delay((unsigned long)((2000)*(8000000/4000.0)));
  1849  0018A4  0E15               	movlw	21
  1850  0018A6  6E23               	movwf	(??_send_over_socket_ok+1)& (0+255),c
  1851  0018A8  0E4B               	movlw	75
  1852  0018AA  6E22               	movwf	??_send_over_socket_ok& (0+255),c
  1853  0018AC  0EBE               	movlw	190
  1854  0018AE                     u3727:
  1855  0018AE  2EE8               	decfsz	wreg,f,c
  1856  0018B0  D7FE               	bra	u3727
  1857  0018B2  2E22               	decfsz	??_send_over_socket_ok& (0+255),f,c
  1858  0018B4  D7FC               	bra	u3727
  1859  0018B6  2E23               	decfsz	(??_send_over_socket_ok+1)& (0+255),f,c
  1860  0018B8  D7FA               	bra	u3727
  1861  0018BA  D000               	nop2	
  1862                           
  1863                           ;modem.c: 237: CREN1 = 0;
  1864  0018BC  98AB               	bcf	4011,4,c	;volatile
  1865                           
  1866                           ;modem.c: 238: md_uart_write_str_ok((uint8_t *)&srecv[0], sizeof(srecv), 1, 0);
  1867  0018BE  0E8C               	movlw	low send_over_socket_ok@srecv
  1868  0018C0  6E17               	movwf	md_uart_write_str_ok@data,c
  1869  0018C2  0E00               	movlw	high send_over_socket_ok@srecv
  1870  0018C4  6E18               	movwf	md_uart_write_str_ok@data+1,c
  1871  0018C6  0E10               	movlw	16
  1872  0018C8  6E19               	movwf	md_uart_write_str_ok@len1,c
  1873  0018CA  0E01               	movlw	1
  1874  0018CC  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  1875  0018CE  0E00               	movlw	0
  1876  0018D0  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  1877  0018D2  EC00  F00A         	call	_md_uart_write_str_ok	;wreg free
  1878                           
  1879                           ;modem.c: 239: terminate_md_uart();
  1880  0018D6  ECBC  F00E         	call	_terminate_md_uart	;wreg free
  1881  0018DA  0012               	return	
  1882  0018DC                     __end_of_send_over_socket_ok:
  1883                           	opt stack 0
  1884                           tblptru	equ	0xFF8
  1885                           tblptrh	equ	0xFF7
  1886                           tblptrl	equ	0xFF6
  1887                           tablat	equ	0xFF5
  1888                           intcon	equ	0xFF2
  1889                           postinc0	equ	0xFEE
  1890                           wreg	equ	0xFE8
  1891                           postdec1	equ	0xFE5
  1892                           plusw1	equ	0xFE3
  1893                           fsr1l	equ	0xFE1
  1894                           postinc2	equ	0xFDE
  1895                           plusw2	equ	0xFDB
  1896                           status	equ	0xFD8
  1897                           
  1898 ;; *************** function _send_md_cfg_cmds_ok *****************
  1899 ;; Defined at:
  1900 ;;		line 91 in file "modem.c"
  1901 ;; Parameters:    Size  Location     Type
  1902 ;;		None
  1903 ;; Auto vars:     Size  Location     Type
  1904 ;;  ledCfg         16   16[BANK0 ] unsigned char [16]
  1905 ;;  baud           16    0[BANK0 ] unsigned char [16]
  1906 ;;  cereg          12   56[BANK0 ] unsigned char [12]
  1907 ;;  ledpattern     12   44[BANK0 ] unsigned char [12]
  1908 ;;  cmee           12   32[BANK0 ] unsigned char [12]
  1909 ;;  gprs           11   90[BANK0 ] unsigned char [11]
  1910 ;;  creg           11   79[BANK0 ] unsigned char [11]
  1911 ;;  cpin           11   68[BANK0 ] unsigned char [11]
  1912 ;;  queryVersion   10  101[BANK0 ] unsigned char [10]
  1913 ;;  csq             9  111[BANK0 ] unsigned char [9]
  1914 ;;  ate             7  120[BANK0 ] unsigned char [7]
  1915 ;;  at              5  127[BANK0 ] unsigned char [5]
  1916 ;; Return value:  Size  Location     Type
  1917 ;;                  1    wreg      unsigned char 
  1918 ;; Registers used:
  1919 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1920 ;; Tracked objects:
  1921 ;;		On entry : 0/0
  1922 ;;		On exit  : 0/0
  1923 ;;		Unchanged: 0/0
  1924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1926 ;;      Locals:         0     132       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1928 ;;      Totals:         0     132       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1929 ;;Total ram usage:      132 bytes
  1930 ;; Hardware stack levels used:    1
  1931 ;; Hardware stack levels required when called:    5
  1932 ;; This function calls:
  1933 ;;		_init_md_uart
  1934 ;;		_md_uart_write_str_ok
  1935 ;;		_reset_AT_marks
  1936 ;;		_start_md_boot_timer
  1937 ;;		_start_modem_send_process
  1938 ;;		_terminate_md_uart
  1939 ;; This function is called by:
  1940 ;;		_check_modem_state
  1941 ;; This function uses a non-reentrant model
  1942 ;;
  1943                           
  1944                           	psect	text5
  1945  001072                     __ptext5:
  1946                           	opt stack 0
  1947  001072                     _send_md_cfg_cmds_ok:
  1948                           	opt stack 24
  1949                           
  1950                           ;modem.c: 93: uint8_t at[] = "AT\r\n";
  1951                           
  1952                           ;incstack = 0
  1953  001072  EE20  F0FA         	lfsr	2,send_md_cfg_cmds_ok@F6835
  1954  001076  EE10  F0DF         	lfsr	1,send_md_cfg_cmds_ok@at
  1955  00107A  0E04               	movlw	4
  1956  00107C                     u3011:
  1957  00107C  CFDB FFE3          	movff	plusw2,plusw1
  1958  001080  06E8               	decf	wreg,f,c
  1959  001082  E2FC               	bc	u3011
  1960                           
  1961                           ;modem.c: 94: uint8_t ate[] = "ATE1\r\n";
  1962  001084  EE20  F0F3         	lfsr	2,send_md_cfg_cmds_ok@F6837
  1963  001088  EE10  F0D8         	lfsr	1,send_md_cfg_cmds_ok@ate
  1964  00108C  0E06               	movlw	6
  1965  00108E                     u3021:
  1966  00108E  CFDB FFE3          	movff	plusw2,plusw1
  1967  001092  06E8               	decf	wreg,f,c
  1968  001094  E2FC               	bc	u3021
  1969                           
  1970                           ;modem.c: 95: uint8_t cmee[] = "AT+CMEE=2\r\n";
  1971  001096  EE21  F08F         	lfsr	2,send_md_cfg_cmds_ok@F6839
  1972  00109A  EE10  F080         	lfsr	1,send_md_cfg_cmds_ok@cmee
  1973  00109E  0E0B               	movlw	11
  1974  0010A0                     u3031:
  1975  0010A0  CFDB FFE3          	movff	plusw2,plusw1
  1976  0010A4  06E8               	decf	wreg,f,c
  1977  0010A6  E2FC               	bc	u3031
  1978                           
  1979                           ;modem.c: 96: uint8_t baud[] = "AT+IPR=115200\r\n";
  1980  0010A8  EE21  F058         	lfsr	2,send_md_cfg_cmds_ok@F6841
  1981  0010AC  EE10  F060         	lfsr	1,send_md_cfg_cmds_ok@baud
  1982  0010B0  0E0F               	movlw	15
  1983  0010B2                     u3041:
  1984  0010B2  CFDB FFE3          	movff	plusw2,plusw1
  1985  0010B6  06E8               	decf	wreg,f,c
  1986  0010B8  E2FC               	bc	u3041
  1987                           
  1988                           ;modem.c: 97: uint8_t ledCfg[] = "AT#GPIO=7,0,2\r\n";
  1989  0010BA  EE21  F048         	lfsr	2,send_md_cfg_cmds_ok@F6843
  1990  0010BE  EE10  F070         	lfsr	1,send_md_cfg_cmds_ok@ledCfg
  1991  0010C2  0E0F               	movlw	15
  1992  0010C4                     u3051:
  1993  0010C4  CFDB FFE3          	movff	plusw2,plusw1
  1994  0010C8  06E8               	decf	wreg,f,c
  1995  0010CA  E2FC               	bc	u3051
  1996                           
  1997                           ;modem.c: 98: uint8_t ledpattern[] = "AT#SLED=4\r\n";
  1998  0010CC  EE21  F083         	lfsr	2,send_md_cfg_cmds_ok@F6845
  1999  0010D0  EE10  F08C         	lfsr	1,send_md_cfg_cmds_ok@ledpattern
  2000  0010D4  0E0B               	movlw	11
  2001  0010D6                     u3061:
  2002  0010D6  CFDB FFE3          	movff	plusw2,plusw1
  2003  0010DA  06E8               	decf	wreg,f,c
  2004  0010DC  E2FC               	bc	u3061
  2005                           
  2006                           ;modem.c: 99: uint8_t queryVersion[] = "AT#CGMR\r\n";
  2007  0010DE  EE20  F025         	lfsr	2,send_md_cfg_cmds_ok@F6847
  2008  0010E2  EE10  F0C5         	lfsr	1,send_md_cfg_cmds_ok@queryVersion
  2009  0010E6  0E09               	movlw	9
  2010  0010E8                     u3071:
  2011  0010E8  CFDB FFE3          	movff	plusw2,plusw1
  2012  0010EC  06E8               	decf	wreg,f,c
  2013  0010EE  E2FC               	bc	u3071
  2014                           
  2015                           ;modem.c: 100: uint8_t cpin[] = "AT+CPIN?\r\n";
  2016  0010F0  EE21  F0B1         	lfsr	2,send_md_cfg_cmds_ok@F6849
  2017  0010F4  EE10  F0A4         	lfsr	1,send_md_cfg_cmds_ok@cpin
  2018  0010F8  0E0A               	movlw	10
  2019  0010FA                     u3081:
  2020  0010FA  CFDB FFE3          	movff	plusw2,plusw1
  2021  0010FE  06E8               	decf	wreg,f,c
  2022  001100  E2FC               	bc	u3081
  2023                           
  2024                           ;modem.c: 101: uint8_t creg[] = "AT+CREG?\r\n";
  2025  001102  EE21  F0A6         	lfsr	2,send_md_cfg_cmds_ok@F6851
  2026  001106  EE10  F0AF         	lfsr	1,send_md_cfg_cmds_ok@creg
  2027  00110A  0E0A               	movlw	10
  2028  00110C                     u3091:
  2029  00110C  CFDB FFE3          	movff	plusw2,plusw1
  2030  001110  06E8               	decf	wreg,f,c
  2031  001112  E2FC               	bc	u3091
  2032                           
  2033                           ;modem.c: 102: uint8_t cereg[] = "AT+CEREG?\r\n";
  2034  001114  EE21  F077         	lfsr	2,send_md_cfg_cmds_ok@F6853
  2035  001118  EE10  F098         	lfsr	1,send_md_cfg_cmds_ok@cereg
  2036  00111C  0E0B               	movlw	11
  2037  00111E                     u3101:
  2038  00111E  CFDB FFE3          	movff	plusw2,plusw1
  2039  001122  06E8               	decf	wreg,f,c
  2040  001124  E2FC               	bc	u3101
  2041                           
  2042                           ;modem.c: 103: uint8_t gprs[] = "AT#GPRS?\r\n";
  2043  001126  EE21  F09B         	lfsr	2,send_md_cfg_cmds_ok@F6855
  2044  00112A  EE10  F0BA         	lfsr	1,send_md_cfg_cmds_ok@gprs
  2045  00112E  0E0A               	movlw	10
  2046  001130                     u3111:
  2047  001130  CFDB FFE3          	movff	plusw2,plusw1
  2048  001134  06E8               	decf	wreg,f,c
  2049  001136  E2FC               	bc	u3111
  2050                           
  2051                           ;modem.c: 104: uint8_t csq[] = "AT+CSQ\r\n";
  2052  001138  EE20  F02F         	lfsr	2,send_md_cfg_cmds_ok@F6857
  2053  00113C  EE10  F0CF         	lfsr	1,send_md_cfg_cmds_ok@csq
  2054  001140  0E08               	movlw	8
  2055  001142                     u3121:
  2056  001142  CFDB FFE3          	movff	plusw2,plusw1
  2057  001146  06E8               	decf	wreg,f,c
  2058  001148  E2FC               	bc	u3121
  2059                           
  2060                           ;modem.c: 107: init_md_uart();
  2061  00114A  EC64  F00E         	call	_init_md_uart	;wreg free
  2062                           
  2063                           ;modem.c: 110: if (!sentAT1)
  2064  00114E  0100               	movlb	0	; () banked
  2065  001150  51F0               	movf	_sentAT1& (0+255),w,b
  2066  001152  A4D8               	btfss	status,2,c
  2067  001154  D00E               	goto	l468
  2068                           
  2069                           ; BSR set to: 0
  2070                           ;modem.c: 111: sentAT1 &= md_uart_write_str_ok((uint8_t *)&at[0], sizeof(at), 1, 0);
  2071  001156  0EDF               	movlw	low send_md_cfg_cmds_ok@at
  2072  001158  6E17               	movwf	md_uart_write_str_ok@data,c
  2073  00115A  0E00               	movlw	high send_md_cfg_cmds_ok@at
  2074  00115C  6E18               	movwf	md_uart_write_str_ok@data+1,c
  2075  00115E  0E05               	movlw	5
  2076  001160  6E19               	movwf	md_uart_write_str_ok@len1,c
  2077  001162  0E01               	movlw	1
  2078  001164  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  2079  001166  0E00               	movlw	0
  2080  001168  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  2081  00116A  EC00  F00A         	call	_md_uart_write_str_ok	;wreg free
  2082  00116E  0100               	movlb	0	; () banked
  2083  001170  17F0               	andwf	_sentAT1& (0+255),f,b
  2084  001172                     l468:
  2085                           
  2086                           ; BSR set to: 0
  2087                           ;modem.c: 112: if (sentAT1 && receivedOK && !sentAT2)
  2088                           
  2089                           ; BSR set to: 0
  2090  001172  51F0               	movf	_sentAT1& (0+255),w,b
  2091  001174  B4D8               	btfsc	status,2,c
  2092  001176  D016               	goto	l469
  2093                           
  2094                           ; BSR set to: 0
  2095  001178  5043               	movf	_receivedOK,w,c
  2096  00117A  B4D8               	btfsc	status,2,c
  2097  00117C  D013               	goto	l469
  2098                           
  2099                           ; BSR set to: 0
  2100  00117E  51EF               	movf	_sentAT2& (0+255),w,b
  2101  001180  A4D8               	btfss	status,2,c
  2102  001182  D010               	goto	l469
  2103                           
  2104                           ; BSR set to: 0
  2105                           ;modem.c: 113: {
  2106                           ;modem.c: 114: receivedOK = 0;
  2107  001184  0E00               	movlw	0
  2108  001186  6E43               	movwf	_receivedOK,c
  2109                           
  2110                           ; BSR set to: 0
  2111                           ;modem.c: 115: sentAT2 &= md_uart_write_str_ok((uint8_t *)&ate[0], sizeof(ate), 1, 0);
  2112  001188  0ED8               	movlw	low send_md_cfg_cmds_ok@ate
  2113  00118A  6E17               	movwf	md_uart_write_str_ok@data,c
  2114  00118C  0E00               	movlw	high send_md_cfg_cmds_ok@ate
  2115  00118E  6E18               	movwf	md_uart_write_str_ok@data+1,c
  2116  001190  0E07               	movlw	7
  2117  001192  6E19               	movwf	md_uart_write_str_ok@len1,c
  2118  001194  0E01               	movlw	1
  2119  001196  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  2120  001198  0E00               	movlw	0
  2121  00119A  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  2122  00119C  EC00  F00A         	call	_md_uart_write_str_ok	;wreg free
  2123  0011A0  0100               	movlb	0	; () banked
  2124  0011A2  17EF               	andwf	_sentAT2& (0+255),f,b
  2125  0011A4                     l469:
  2126                           
  2127                           ; BSR set to: 0
  2128                           ;modem.c: 116: }
  2129                           ;modem.c: 117: if (sentAT2 && receivedOK && !sentAT3)
  2130                           
  2131                           ; BSR set to: 0
  2132  0011A4  51EF               	movf	_sentAT2& (0+255),w,b
  2133  0011A6  B4D8               	btfsc	status,2,c
  2134  0011A8  D016               	goto	l470
  2135                           
  2136                           ; BSR set to: 0
  2137  0011AA  5043               	movf	_receivedOK,w,c
  2138  0011AC  B4D8               	btfsc	status,2,c
  2139  0011AE  D013               	goto	l470
  2140                           
  2141                           ; BSR set to: 0
  2142  0011B0  51EE               	movf	_sentAT3& (0+255),w,b
  2143  0011B2  A4D8               	btfss	status,2,c
  2144  0011B4  D010               	goto	l470
  2145                           
  2146                           ; BSR set to: 0
  2147                           ;modem.c: 118: {
  2148                           ;modem.c: 119: receivedOK = 0;
  2149  0011B6  0E00               	movlw	0
  2150  0011B8  6E43               	movwf	_receivedOK,c
  2151                           
  2152                           ; BSR set to: 0
  2153                           ;modem.c: 120: sentAT3 &= md_uart_write_str_ok((uint8_t *)&cmee[0], sizeof(cmee), 1, 0);
  2154  0011BA  0E80               	movlw	low send_md_cfg_cmds_ok@cmee
  2155  0011BC  6E17               	movwf	md_uart_write_str_ok@data,c
  2156  0011BE  0E00               	movlw	high send_md_cfg_cmds_ok@cmee
  2157  0011C0  6E18               	movwf	md_uart_write_str_ok@data+1,c
  2158  0011C2  0E0C               	movlw	12
  2159  0011C4  6E19               	movwf	md_uart_write_str_ok@len1,c
  2160  0011C6  0E01               	movlw	1
  2161  0011C8  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  2162  0011CA  0E00               	movlw	0
  2163  0011CC  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  2164  0011CE  EC00  F00A         	call	_md_uart_write_str_ok	;wreg free
  2165  0011D2  0100               	movlb	0	; () banked
  2166  0011D4  17EE               	andwf	_sentAT3& (0+255),f,b
  2167  0011D6                     l470:
  2168                           
  2169                           ; BSR set to: 0
  2170                           ;modem.c: 121: }
  2171                           ;modem.c: 122: if (sentAT3 && receivedOK && !sentAT4)
  2172                           
  2173                           ; BSR set to: 0
  2174  0011D6  51EE               	movf	_sentAT3& (0+255),w,b
  2175  0011D8  B4D8               	btfsc	status,2,c
  2176  0011DA  D016               	goto	l471
  2177                           
  2178                           ; BSR set to: 0
  2179  0011DC  5043               	movf	_receivedOK,w,c
  2180  0011DE  B4D8               	btfsc	status,2,c
  2181  0011E0  D013               	goto	l471
  2182                           
  2183                           ; BSR set to: 0
  2184  0011E2  51ED               	movf	_sentAT4& (0+255),w,b
  2185  0011E4  A4D8               	btfss	status,2,c
  2186  0011E6  D010               	goto	l471
  2187                           
  2188                           ; BSR set to: 0
  2189                           ;modem.c: 123: {
  2190                           ;modem.c: 124: receivedOK = 0;
  2191  0011E8  0E00               	movlw	0
  2192  0011EA  6E43               	movwf	_receivedOK,c
  2193                           
  2194                           ; BSR set to: 0
  2195                           ;modem.c: 125: sentAT4 &= md_uart_write_str_ok((uint8_t *)&baud[0], sizeof(baud), 1, 0);
  2196  0011EC  0E60               	movlw	low send_md_cfg_cmds_ok@baud
  2197  0011EE  6E17               	movwf	md_uart_write_str_ok@data,c
  2198  0011F0  0E00               	movlw	high send_md_cfg_cmds_ok@baud
  2199  0011F2  6E18               	movwf	md_uart_write_str_ok@data+1,c
  2200  0011F4  0E10               	movlw	16
  2201  0011F6  6E19               	movwf	md_uart_write_str_ok@len1,c
  2202  0011F8  0E01               	movlw	1
  2203  0011FA  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  2204  0011FC  0E00               	movlw	0
  2205  0011FE  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  2206  001200  EC00  F00A         	call	_md_uart_write_str_ok	;wreg free
  2207  001204  0100               	movlb	0	; () banked
  2208  001206  17ED               	andwf	_sentAT4& (0+255),f,b
  2209  001208                     l471:
  2210                           
  2211                           ; BSR set to: 0
  2212                           ;modem.c: 126: }
  2213                           ;modem.c: 127: if (sentAT4 && receivedOK && !sentAT5)
  2214                           
  2215                           ; BSR set to: 0
  2216  001208  51ED               	movf	_sentAT4& (0+255),w,b
  2217  00120A  B4D8               	btfsc	status,2,c
  2218  00120C  D016               	goto	l472
  2219                           
  2220                           ; BSR set to: 0
  2221  00120E  5043               	movf	_receivedOK,w,c
  2222  001210  B4D8               	btfsc	status,2,c
  2223  001212  D013               	goto	l472
  2224                           
  2225                           ; BSR set to: 0
  2226  001214  51EC               	movf	_sentAT5& (0+255),w,b
  2227  001216  A4D8               	btfss	status,2,c
  2228  001218  D010               	goto	l472
  2229                           
  2230                           ; BSR set to: 0
  2231                           ;modem.c: 128: {
  2232                           ;modem.c: 129: receivedOK = 0;
  2233  00121A  0E00               	movlw	0
  2234  00121C  6E43               	movwf	_receivedOK,c
  2235                           
  2236                           ; BSR set to: 0
  2237                           ;modem.c: 130: sentAT5 &= md_uart_write_str_ok((uint8_t *)&ledCfg[0], sizeof(ledCfg), 1,
      +                           0);
  2238  00121E  0E70               	movlw	low send_md_cfg_cmds_ok@ledCfg
  2239  001220  6E17               	movwf	md_uart_write_str_ok@data,c
  2240  001222  0E00               	movlw	high send_md_cfg_cmds_ok@ledCfg
  2241  001224  6E18               	movwf	md_uart_write_str_ok@data+1,c
  2242  001226  0E10               	movlw	16
  2243  001228  6E19               	movwf	md_uart_write_str_ok@len1,c
  2244  00122A  0E01               	movlw	1
  2245  00122C  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  2246  00122E  0E00               	movlw	0
  2247  001230  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  2248  001232  EC00  F00A         	call	_md_uart_write_str_ok	;wreg free
  2249  001236  0100               	movlb	0	; () banked
  2250  001238  17EC               	andwf	_sentAT5& (0+255),f,b
  2251  00123A                     l472:
  2252                           
  2253                           ; BSR set to: 0
  2254                           ;modem.c: 131: }
  2255                           ;modem.c: 132: if (sentAT5 && receivedOK && !sentAT6)
  2256                           
  2257                           ; BSR set to: 0
  2258  00123A  51EC               	movf	_sentAT5& (0+255),w,b
  2259  00123C  B4D8               	btfsc	status,2,c
  2260  00123E  D016               	goto	l473
  2261                           
  2262                           ; BSR set to: 0
  2263  001240  5043               	movf	_receivedOK,w,c
  2264  001242  B4D8               	btfsc	status,2,c
  2265  001244  D013               	goto	l473
  2266                           
  2267                           ; BSR set to: 0
  2268  001246  51EB               	movf	_sentAT6& (0+255),w,b
  2269  001248  A4D8               	btfss	status,2,c
  2270  00124A  D010               	goto	l473
  2271                           
  2272                           ; BSR set to: 0
  2273                           ;modem.c: 133: {
  2274                           ;modem.c: 134: receivedOK = 0;
  2275  00124C  0E00               	movlw	0
  2276  00124E  6E43               	movwf	_receivedOK,c
  2277                           
  2278                           ; BSR set to: 0
  2279                           ;modem.c: 135: sentAT6 &= md_uart_write_str_ok((uint8_t *)&ledpattern[0], sizeof(ledpatt
      +                          ern), 1, 0);
  2280  001250  0E8C               	movlw	low send_md_cfg_cmds_ok@ledpattern
  2281  001252  6E17               	movwf	md_uart_write_str_ok@data,c
  2282  001254  0E00               	movlw	high send_md_cfg_cmds_ok@ledpattern
  2283  001256  6E18               	movwf	md_uart_write_str_ok@data+1,c
  2284  001258  0E0C               	movlw	12
  2285  00125A  6E19               	movwf	md_uart_write_str_ok@len1,c
  2286  00125C  0E01               	movlw	1
  2287  00125E  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  2288  001260  0E00               	movlw	0
  2289  001262  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  2290  001264  EC00  F00A         	call	_md_uart_write_str_ok	;wreg free
  2291  001268  0100               	movlb	0	; () banked
  2292  00126A  17EB               	andwf	_sentAT6& (0+255),f,b
  2293  00126C                     l473:
  2294                           
  2295                           ; BSR set to: 0
  2296                           ;modem.c: 136: }
  2297                           ;modem.c: 137: if (sentAT6 && receivedOK && !sentAT7)
  2298                           
  2299                           ; BSR set to: 0
  2300  00126C  51EB               	movf	_sentAT6& (0+255),w,b
  2301  00126E  B4D8               	btfsc	status,2,c
  2302  001270  D016               	goto	l474
  2303                           
  2304                           ; BSR set to: 0
  2305  001272  5043               	movf	_receivedOK,w,c
  2306  001274  B4D8               	btfsc	status,2,c
  2307  001276  D013               	goto	l474
  2308                           
  2309                           ; BSR set to: 0
  2310  001278  51EA               	movf	_sentAT7& (0+255),w,b
  2311  00127A  A4D8               	btfss	status,2,c
  2312  00127C  D010               	goto	l474
  2313                           
  2314                           ; BSR set to: 0
  2315                           ;modem.c: 138: {
  2316                           ;modem.c: 139: receivedOK = 0;
  2317  00127E  0E00               	movlw	0
  2318  001280  6E43               	movwf	_receivedOK,c
  2319                           
  2320                           ; BSR set to: 0
  2321                           ;modem.c: 140: sentAT7 &= md_uart_write_str_ok((uint8_t *)&queryVersion[0], sizeof(query
      +                          Version), 1, 0);
  2322  001282  0EC5               	movlw	low send_md_cfg_cmds_ok@queryVersion
  2323  001284  6E17               	movwf	md_uart_write_str_ok@data,c
  2324  001286  0E00               	movlw	high send_md_cfg_cmds_ok@queryVersion
  2325  001288  6E18               	movwf	md_uart_write_str_ok@data+1,c
  2326  00128A  0E0A               	movlw	10
  2327  00128C  6E19               	movwf	md_uart_write_str_ok@len1,c
  2328  00128E  0E01               	movlw	1
  2329  001290  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  2330  001292  0E00               	movlw	0
  2331  001294  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  2332  001296  EC00  F00A         	call	_md_uart_write_str_ok	;wreg free
  2333  00129A  0100               	movlb	0	; () banked
  2334  00129C  17EA               	andwf	_sentAT7& (0+255),f,b
  2335  00129E                     l474:
  2336                           
  2337                           ; BSR set to: 0
  2338                           ;modem.c: 141: }
  2339                           ;modem.c: 142: if (sentAT7 && receivedOK && !sentAT8)
  2340                           
  2341                           ; BSR set to: 0
  2342  00129E  51EA               	movf	_sentAT7& (0+255),w,b
  2343  0012A0  B4D8               	btfsc	status,2,c
  2344  0012A2  D016               	goto	l475
  2345                           
  2346                           ; BSR set to: 0
  2347  0012A4  5043               	movf	_receivedOK,w,c
  2348  0012A6  B4D8               	btfsc	status,2,c
  2349  0012A8  D013               	goto	l475
  2350                           
  2351                           ; BSR set to: 0
  2352  0012AA  51E9               	movf	_sentAT8& (0+255),w,b
  2353  0012AC  A4D8               	btfss	status,2,c
  2354  0012AE  D010               	goto	l475
  2355                           
  2356                           ; BSR set to: 0
  2357                           ;modem.c: 143: {
  2358                           ;modem.c: 144: receivedOK = 0;
  2359  0012B0  0E00               	movlw	0
  2360  0012B2  6E43               	movwf	_receivedOK,c
  2361                           
  2362                           ; BSR set to: 0
  2363                           ;modem.c: 145: sentAT8 &= md_uart_write_str_ok((uint8_t *)&cpin[0], sizeof(cpin), 1, 0);
  2364  0012B4  0EA4               	movlw	low send_md_cfg_cmds_ok@cpin
  2365  0012B6  6E17               	movwf	md_uart_write_str_ok@data,c
  2366  0012B8  0E00               	movlw	high send_md_cfg_cmds_ok@cpin
  2367  0012BA  6E18               	movwf	md_uart_write_str_ok@data+1,c
  2368  0012BC  0E0B               	movlw	11
  2369  0012BE  6E19               	movwf	md_uart_write_str_ok@len1,c
  2370  0012C0  0E01               	movlw	1
  2371  0012C2  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  2372  0012C4  0E00               	movlw	0
  2373  0012C6  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  2374  0012C8  EC00  F00A         	call	_md_uart_write_str_ok	;wreg free
  2375  0012CC  0100               	movlb	0	; () banked
  2376  0012CE  17E9               	andwf	_sentAT8& (0+255),f,b
  2377  0012D0                     l475:
  2378                           
  2379                           ; BSR set to: 0
  2380                           ;modem.c: 146: }
  2381                           ;modem.c: 147: if (sentAT8 && receivedOK && !sentAT9)
  2382                           
  2383                           ; BSR set to: 0
  2384  0012D0  51E9               	movf	_sentAT8& (0+255),w,b
  2385  0012D2  B4D8               	btfsc	status,2,c
  2386  0012D4  D016               	goto	l476
  2387                           
  2388                           ; BSR set to: 0
  2389  0012D6  5043               	movf	_receivedOK,w,c
  2390  0012D8  B4D8               	btfsc	status,2,c
  2391  0012DA  D013               	goto	l476
  2392                           
  2393                           ; BSR set to: 0
  2394  0012DC  51E8               	movf	_sentAT9& (0+255),w,b
  2395  0012DE  A4D8               	btfss	status,2,c
  2396  0012E0  D010               	goto	l476
  2397                           
  2398                           ; BSR set to: 0
  2399                           ;modem.c: 148: {
  2400                           ;modem.c: 149: receivedOK = 0;
  2401  0012E2  0E00               	movlw	0
  2402  0012E4  6E43               	movwf	_receivedOK,c
  2403                           
  2404                           ; BSR set to: 0
  2405                           ;modem.c: 150: sentAT9 &= md_uart_write_str_ok((uint8_t *)&creg[0], sizeof(creg), 1, 0);
  2406  0012E6  0EAF               	movlw	low send_md_cfg_cmds_ok@creg
  2407  0012E8  6E17               	movwf	md_uart_write_str_ok@data,c
  2408  0012EA  0E00               	movlw	high send_md_cfg_cmds_ok@creg
  2409  0012EC  6E18               	movwf	md_uart_write_str_ok@data+1,c
  2410  0012EE  0E0B               	movlw	11
  2411  0012F0  6E19               	movwf	md_uart_write_str_ok@len1,c
  2412  0012F2  0E01               	movlw	1
  2413  0012F4  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  2414  0012F6  0E00               	movlw	0
  2415  0012F8  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  2416  0012FA  EC00  F00A         	call	_md_uart_write_str_ok	;wreg free
  2417  0012FE  0100               	movlb	0	; () banked
  2418  001300  17E8               	andwf	_sentAT9& (0+255),f,b
  2419  001302                     l476:
  2420                           
  2421                           ; BSR set to: 0
  2422                           ;modem.c: 151: }
  2423                           ;modem.c: 152: if (sentAT9 && receivedOK && !sentAT10)
  2424                           
  2425                           ; BSR set to: 0
  2426  001302  51E8               	movf	_sentAT9& (0+255),w,b
  2427  001304  B4D8               	btfsc	status,2,c
  2428  001306  D016               	goto	l477
  2429                           
  2430                           ; BSR set to: 0
  2431  001308  5043               	movf	_receivedOK,w,c
  2432  00130A  B4D8               	btfsc	status,2,c
  2433  00130C  D013               	goto	l477
  2434                           
  2435                           ; BSR set to: 0
  2436  00130E  51E7               	movf	_sentAT10& (0+255),w,b
  2437  001310  A4D8               	btfss	status,2,c
  2438  001312  D010               	goto	l477
  2439                           
  2440                           ; BSR set to: 0
  2441                           ;modem.c: 153: {
  2442                           ;modem.c: 154: receivedOK = 0;
  2443  001314  0E00               	movlw	0
  2444  001316  6E43               	movwf	_receivedOK,c
  2445                           
  2446                           ; BSR set to: 0
  2447                           ;modem.c: 155: sentAT10 &= md_uart_write_str_ok((uint8_t *)&cereg[0], sizeof(cereg), 1, 
      +                          0);
  2448  001318  0E98               	movlw	low send_md_cfg_cmds_ok@cereg
  2449  00131A  6E17               	movwf	md_uart_write_str_ok@data,c
  2450  00131C  0E00               	movlw	high send_md_cfg_cmds_ok@cereg
  2451  00131E  6E18               	movwf	md_uart_write_str_ok@data+1,c
  2452  001320  0E0C               	movlw	12
  2453  001322  6E19               	movwf	md_uart_write_str_ok@len1,c
  2454  001324  0E01               	movlw	1
  2455  001326  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  2456  001328  0E00               	movlw	0
  2457  00132A  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  2458  00132C  EC00  F00A         	call	_md_uart_write_str_ok	;wreg free
  2459  001330  0100               	movlb	0	; () banked
  2460  001332  17E7               	andwf	_sentAT10& (0+255),f,b
  2461  001334                     l477:
  2462                           
  2463                           ; BSR set to: 0
  2464                           ;modem.c: 156: }
  2465                           ;modem.c: 157: if (sentAT10 && receivedOK && !sentAT11)
  2466                           
  2467                           ; BSR set to: 0
  2468  001334  51E7               	movf	_sentAT10& (0+255),w,b
  2469  001336  B4D8               	btfsc	status,2,c
  2470  001338  D016               	goto	l478
  2471                           
  2472                           ; BSR set to: 0
  2473  00133A  5043               	movf	_receivedOK,w,c
  2474  00133C  B4D8               	btfsc	status,2,c
  2475  00133E  D013               	goto	l478
  2476                           
  2477                           ; BSR set to: 0
  2478  001340  51E6               	movf	_sentAT11& (0+255),w,b
  2479  001342  A4D8               	btfss	status,2,c
  2480  001344  D010               	goto	l478
  2481                           
  2482                           ; BSR set to: 0
  2483                           ;modem.c: 158: {
  2484                           ;modem.c: 159: receivedOK = 0;
  2485  001346  0E00               	movlw	0
  2486  001348  6E43               	movwf	_receivedOK,c
  2487                           
  2488                           ; BSR set to: 0
  2489                           ;modem.c: 160: sentAT11 &= md_uart_write_str_ok((uint8_t *)&gprs[0], sizeof(gprs), 1, 0)
      +                          ;
  2490  00134A  0EBA               	movlw	low send_md_cfg_cmds_ok@gprs
  2491  00134C  6E17               	movwf	md_uart_write_str_ok@data,c
  2492  00134E  0E00               	movlw	high send_md_cfg_cmds_ok@gprs
  2493  001350  6E18               	movwf	md_uart_write_str_ok@data+1,c
  2494  001352  0E0B               	movlw	11
  2495  001354  6E19               	movwf	md_uart_write_str_ok@len1,c
  2496  001356  0E01               	movlw	1
  2497  001358  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  2498  00135A  0E00               	movlw	0
  2499  00135C  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  2500  00135E  EC00  F00A         	call	_md_uart_write_str_ok	;wreg free
  2501  001362  0100               	movlb	0	; () banked
  2502  001364  17E6               	andwf	_sentAT11& (0+255),f,b
  2503  001366                     l478:
  2504                           
  2505                           ; BSR set to: 0
  2506                           ;modem.c: 161: }
  2507                           ;modem.c: 162: if (sentAT11 && receivedOK && !sentAT12)
  2508                           
  2509                           ; BSR set to: 0
  2510  001366  51E6               	movf	_sentAT11& (0+255),w,b
  2511  001368  B4D8               	btfsc	status,2,c
  2512  00136A  D016               	goto	l479
  2513                           
  2514                           ; BSR set to: 0
  2515  00136C  5043               	movf	_receivedOK,w,c
  2516  00136E  B4D8               	btfsc	status,2,c
  2517  001370  D013               	goto	l479
  2518                           
  2519                           ; BSR set to: 0
  2520  001372  51E5               	movf	_sentAT12& (0+255),w,b
  2521  001374  A4D8               	btfss	status,2,c
  2522  001376  D010               	goto	l479
  2523                           
  2524                           ; BSR set to: 0
  2525                           ;modem.c: 163: {
  2526                           ;modem.c: 164: receivedOK = 0;
  2527  001378  0E00               	movlw	0
  2528  00137A  6E43               	movwf	_receivedOK,c
  2529                           
  2530                           ; BSR set to: 0
  2531                           ;modem.c: 165: sentAT12 &= md_uart_write_str_ok((uint8_t *)&csq[0], sizeof(csq), 1, 0);
  2532  00137C  0ECF               	movlw	low send_md_cfg_cmds_ok@csq
  2533  00137E  6E17               	movwf	md_uart_write_str_ok@data,c
  2534  001380  0E00               	movlw	high send_md_cfg_cmds_ok@csq
  2535  001382  6E18               	movwf	md_uart_write_str_ok@data+1,c
  2536  001384  0E09               	movlw	9
  2537  001386  6E19               	movwf	md_uart_write_str_ok@len1,c
  2538  001388  0E01               	movlw	1
  2539  00138A  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  2540  00138C  0E00               	movlw	0
  2541  00138E  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  2542  001390  EC00  F00A         	call	_md_uart_write_str_ok	;wreg free
  2543  001394  0100               	movlb	0	; () banked
  2544  001396  17E5               	andwf	_sentAT12& (0+255),f,b
  2545  001398                     l479:
  2546                           
  2547                           ; BSR set to: 0
  2548                           ;modem.c: 166: }
  2549                           ;modem.c: 167: if (sentAT12 && receivedOK)
  2550                           
  2551                           ; BSR set to: 0
  2552  001398  51E5               	movf	_sentAT12& (0+255),w,b
  2553  00139A  B4D8               	btfsc	status,2,c
  2554  00139C  D007               	goto	l480
  2555                           
  2556                           ; BSR set to: 0
  2557  00139E  5043               	movf	_receivedOK,w,c
  2558  0013A0  B4D8               	btfsc	status,2,c
  2559  0013A2  D004               	goto	l480
  2560                           
  2561                           ; BSR set to: 0
  2562                           ;modem.c: 168: {
  2563                           ;modem.c: 169: reset_AT_marks();
  2564  0013A4  EC37  F00E         	call	_reset_AT_marks	;wreg free
  2565                           
  2566                           ;modem.c: 170: alreadyAwake = 1;
  2567  0013A8  0E01               	movlw	1
  2568  0013AA  6E3E               	movwf	_alreadyAwake,c
  2569  0013AC                     l480:
  2570                           
  2571                           ;modem.c: 171: }
  2572                           ;modem.c: 174: if (!receivedOK && timedOut && !extendedTimer)
  2573  0013AC  5043               	movf	_receivedOK,w,c
  2574  0013AE  A4D8               	btfss	status,2,c
  2575  0013B0  D012               	goto	l481
  2576  0013B2  5040               	movf	_timedOut,w,c
  2577  0013B4  B4D8               	btfsc	status,2,c
  2578  0013B6  D00F               	goto	l481
  2579  0013B8  0100               	movlb	0	; () banked
  2580  0013BA  51E4               	movf	_extendedTimer& (0+255),w,b
  2581  0013BC  A4D8               	btfss	status,2,c
  2582  0013BE  D00B               	goto	l481
  2583                           
  2584                           ; BSR set to: 0
  2585                           ;modem.c: 175: {
  2586                           ;modem.c: 176: extendedTimer = 1;
  2587  0013C0  0E01               	movlw	1
  2588  0013C2  6FE4               	movwf	_extendedTimer& (0+255),b
  2589                           
  2590                           ;modem.c: 177: timedOut = 0;
  2591  0013C4  0E00               	movlw	0
  2592  0013C6  6E40               	movwf	_timedOut,c
  2593                           
  2594                           ; BSR set to: 0
  2595                           ;modem.c: 178: reset_AT_marks();
  2596  0013C8  EC37  F00E         	call	_reset_AT_marks	;wreg free
  2597                           
  2598                           ;modem.c: 179: start_md_boot_timer();
  2599  0013CC  ECC6  F00E         	call	_start_md_boot_timer	;wreg free
  2600                           
  2601                           ;modem.c: 180: md_state = WAITING_FOR_BOOT;
  2602  0013D0  0E01               	movlw	1
  2603  0013D2  6E3F               	movwf	_md_state,c
  2604                           
  2605                           ;modem.c: 181: }
  2606  0013D4  D011               	goto	l483
  2607  0013D6                     l481:
  2608                           
  2609                           ;modem.c: 182: else if (!receivedOK && timedOut && extendedTimer)
  2610  0013D6  5043               	movf	_receivedOK,w,c
  2611  0013D8  A4D8               	btfss	status,2,c
  2612  0013DA  D00E               	goto	l483
  2613  0013DC  5040               	movf	_timedOut,w,c
  2614  0013DE  B4D8               	btfsc	status,2,c
  2615  0013E0  D00B               	goto	l483
  2616  0013E2  0100               	movlb	0	; () banked
  2617  0013E4  51E4               	movf	_extendedTimer& (0+255),w,b
  2618  0013E6  B4D8               	btfsc	status,2,c
  2619  0013E8  D007               	goto	l483
  2620                           
  2621                           ; BSR set to: 0
  2622                           ;modem.c: 183: {
  2623                           ;modem.c: 184: extendedTimer = 0;
  2624  0013EA  0E00               	movlw	0
  2625  0013EC  6FE4               	movwf	_extendedTimer& (0+255),b
  2626                           
  2627                           ; BSR set to: 0
  2628                           ;modem.c: 185: reset_AT_marks();
  2629  0013EE  EC37  F00E         	call	_reset_AT_marks	;wreg free
  2630                           
  2631                           ;modem.c: 186: start_modem_send_process(0x00);
  2632  0013F2  0E00               	movlw	0
  2633  0013F4  EC12  F00E         	call	_start_modem_send_process
  2634  0013F8                     l483:
  2635                           
  2636                           ;modem.c: 187: }
  2637                           ;modem.c: 190: terminate_md_uart();
  2638  0013F8  ECBC  F00E         	call	_terminate_md_uart	;wreg free
  2639                           
  2640                           ;modem.c: 192: return alreadyAwake;
  2641  0013FC  503E               	movf	_alreadyAwake,w,c
  2642  0013FE  0012               	return	
  2643  001400                     __end_of_send_md_cfg_cmds_ok:
  2644                           	opt stack 0
  2645                           tblptru	equ	0xFF8
  2646                           tblptrh	equ	0xFF7
  2647                           tblptrl	equ	0xFF6
  2648                           tablat	equ	0xFF5
  2649                           intcon	equ	0xFF2
  2650                           postinc0	equ	0xFEE
  2651                           wreg	equ	0xFE8
  2652                           postdec1	equ	0xFE5
  2653                           plusw1	equ	0xFE3
  2654                           fsr1l	equ	0xFE1
  2655                           postinc2	equ	0xFDE
  2656                           plusw2	equ	0xFDB
  2657                           status	equ	0xFD8
  2658                           
  2659 ;; *************** function _start_modem_send_process *****************
  2660 ;; Defined at:
  2661 ;;		line 13 in file "modem.c"
  2662 ;; Parameters:    Size  Location     Type
  2663 ;;  newEvent        1    wreg     unsigned char 
  2664 ;; Auto vars:     Size  Location     Type
  2665 ;;  newEvent        1    0[COMRAM] unsigned char 
  2666 ;;  i               1   23[COMRAM] unsigned char 
  2667 ;; Return value:  Size  Location     Type
  2668 ;;                  1    wreg      void 
  2669 ;; Registers used:
  2670 ;;		wreg, status,2, status,0
  2671 ;; Tracked objects:
  2672 ;;		On entry : 0/0
  2673 ;;		On exit  : 0/0
  2674 ;;		Unchanged: 0/0
  2675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2677 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2678 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2679 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2680 ;;Total ram usage:        3 bytes
  2681 ;; Hardware stack levels used:    1
  2682 ;; Hardware stack levels required when called:    3
  2683 ;; This function calls:
  2684 ;;		Nothing
  2685 ;; This function is called by:
  2686 ;;		_main
  2687 ;;		_send_md_cfg_cmds_ok
  2688 ;; This function uses a non-reentrant model
  2689 ;;
  2690                           
  2691                           	psect	text6
  2692  001C24                     __ptext6:
  2693                           	opt stack 0
  2694  001C24                     _start_modem_send_process:
  2695                           	opt stack 27
  2696                           
  2697                           ;modem.c: 15: if (!alreadyAwake && md_state != IDLE)
  2698                           
  2699                           ;incstack = 0
  2700  001C24  503E               	movf	_alreadyAwake,w,c
  2701  001C26  A4D8               	btfss	status,2,c
  2702  001C28  D01A               	goto	l416
  2703  001C2A  503F               	movf	_md_state,w,c
  2704  001C2C  B4D8               	btfsc	status,2,c
  2705  001C2E  D017               	goto	l416
  2706                           
  2707                           ;modem.c: 16: {
  2708                           ;modem.c: 17: PORTAbits.RA3 = 0;
  2709  001C30  9680               	bcf	3968,3,c	;volatile
  2710                           
  2711                           ;modem.c: 19: for (uint8_t i = 0; i < 8; i++)
  2712  001C32  0E00               	movlw	0
  2713  001C34  6E18               	movwf	start_modem_send_process@i,c
  2714  001C36  D00E               	goto	L1
  2715  001C38                     l417:
  2716  001C38  0004               	clrwdt		;# 
  2717                           
  2718                           ;modem.c: 22: _delay((unsigned long)((200)*(8000000/4000.0)));
  2719  001C3A  0E03               	movlw	3
  2720  001C3C  6E17               	movwf	(??_start_modem_send_process+1)& (0+255),c
  2721  001C3E  0E08               	movlw	8
  2722  001C40  6E16               	movwf	??_start_modem_send_process& (0+255),c
  2723  001C42  0E77               	movlw	119
  2724  001C44                     u3737:
  2725  001C44  2EE8               	decfsz	wreg,f,c
  2726  001C46  D7FE               	bra	u3737
  2727  001C48  2E16               	decfsz	??_start_modem_send_process& (0+255),f,c
  2728  001C4A  D7FC               	bra	u3737
  2729  001C4C  2E17               	decfsz	(??_start_modem_send_process+1)& (0+255),f,c
  2730  001C4E  D7FA               	bra	u3737
  2731  001C50  F000               	nop	
  2732  001C52  2A18               	incf	start_modem_send_process@i,f,c
  2733  001C54                     L1:
  2734  001C54  0E07               	movlw	7
  2735  001C56  6418               	cpfsgt	start_modem_send_process@i,c
  2736  001C58  D7EF               	goto	l417
  2737  001C5A  0004               	clrwdt		;# 
  2738                           
  2739                           ;modem.c: 25: }
  2740  001C5C  D005               	goto	l420
  2741  001C5E                     l416:
  2742                           
  2743                           ;modem.c: 26: else if (md_state != IDLE)
  2744  001C5E  503F               	movf	_md_state,w,c
  2745  001C60  B4D8               	btfsc	status,2,c
  2746  001C62  D002               	goto	l420
  2747                           
  2748                           ;modem.c: 27: {
  2749                           ;modem.c: 28: md_state = WAITING_FOR_BOOT;
  2750  001C64  0E01               	movlw	1
  2751  001C66  6E3F               	movwf	_md_state,c
  2752  001C68                     l420:
  2753                           
  2754                           ;modem.c: 29: }
  2755                           ;modem.c: 35: md_state = CONFIG;
  2756  001C68  0E02               	movlw	2
  2757  001C6A  6E3F               	movwf	_md_state,c
  2758  001C6C  0012               	return		;funcret
  2759  001C6E                     __end_of_start_modem_send_process:
  2760                           	opt stack 0
  2761                           tblptru	equ	0xFF8
  2762                           tblptrh	equ	0xFF7
  2763                           tblptrl	equ	0xFF6
  2764                           tablat	equ	0xFF5
  2765                           intcon	equ	0xFF2
  2766                           postinc0	equ	0xFEE
  2767                           wreg	equ	0xFE8
  2768                           postdec1	equ	0xFE5
  2769                           plusw1	equ	0xFE3
  2770                           fsr1l	equ	0xFE1
  2771                           postinc2	equ	0xFDE
  2772                           plusw2	equ	0xFDB
  2773                           status	equ	0xFD8
  2774                           
  2775 ;; *************** function _start_md_boot_timer *****************
  2776 ;; Defined at:
  2777 ;;		line 41 in file "modem.c"
  2778 ;; Parameters:    Size  Location     Type
  2779 ;;		None
  2780 ;; Auto vars:     Size  Location     Type
  2781 ;;		None
  2782 ;; Return value:  Size  Location     Type
  2783 ;;                  1    wreg      void 
  2784 ;; Registers used:
  2785 ;;		wreg, status,2, cstack
  2786 ;; Tracked objects:
  2787 ;;		On entry : 0/0
  2788 ;;		On exit  : 0/0
  2789 ;;		Unchanged: 0/0
  2790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2794 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2795 ;;Total ram usage:        0 bytes
  2796 ;; Hardware stack levels used:    1
  2797 ;; Hardware stack levels required when called:    4
  2798 ;; This function calls:
  2799 ;;		_reload_tmr3_10ms
  2800 ;; This function is called by:
  2801 ;;		_send_md_cfg_cmds_ok
  2802 ;; This function uses a non-reentrant model
  2803 ;;
  2804                           
  2805                           	psect	text7
  2806  001D8C                     __ptext7:
  2807                           	opt stack 0
  2808  001D8C                     _start_md_boot_timer:
  2809                           	opt stack 24
  2810                           
  2811                           ;modem.c: 44: reload_tmr3_10ms();
  2812                           
  2813                           ;incstack = 0
  2814  001D8C  EC76  F00E         	call	_reload_tmr3_10ms	;wreg free
  2815  001D90  0012               	return		;funcret
  2816  001D92                     __end_of_start_md_boot_timer:
  2817                           	opt stack 0
  2818                           tblptru	equ	0xFF8
  2819                           tblptrh	equ	0xFF7
  2820                           tblptrl	equ	0xFF6
  2821                           tablat	equ	0xFF5
  2822                           intcon	equ	0xFF2
  2823                           postinc0	equ	0xFEE
  2824                           wreg	equ	0xFE8
  2825                           postdec1	equ	0xFE5
  2826                           plusw1	equ	0xFE3
  2827                           fsr1l	equ	0xFE1
  2828                           postinc2	equ	0xFDE
  2829                           plusw2	equ	0xFDB
  2830                           status	equ	0xFD8
  2831                           
  2832 ;; *************** function _reset_AT_marks *****************
  2833 ;; Defined at:
  2834 ;;		line 259 in file "modem.c"
  2835 ;; Parameters:    Size  Location     Type
  2836 ;;		None
  2837 ;; Auto vars:     Size  Location     Type
  2838 ;;		None
  2839 ;; Return value:  Size  Location     Type
  2840 ;;                  1    wreg      void 
  2841 ;; Registers used:
  2842 ;;		wreg, status,2
  2843 ;; Tracked objects:
  2844 ;;		On entry : 0/0
  2845 ;;		On exit  : 0/0
  2846 ;;		Unchanged: 0/0
  2847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2851 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2852 ;;Total ram usage:        0 bytes
  2853 ;; Hardware stack levels used:    1
  2854 ;; Hardware stack levels required when called:    3
  2855 ;; This function calls:
  2856 ;;		Nothing
  2857 ;; This function is called by:
  2858 ;;		_send_md_cfg_cmds_ok
  2859 ;; This function uses a non-reentrant model
  2860 ;;
  2861                           
  2862                           	psect	text8
  2863  001C6E                     __ptext8:
  2864                           	opt stack 0
  2865  001C6E                     _reset_AT_marks:
  2866                           	opt stack 25
  2867                           
  2868                           ;modem.c: 261: sentAT1 = 0;
  2869                           
  2870                           ;incstack = 0
  2871  001C6E  0E00               	movlw	0
  2872  001C70  0100               	movlb	0	; () banked
  2873  001C72  6FF0               	movwf	_sentAT1& (0+255),b
  2874                           
  2875                           ;modem.c: 262: sentAT2 = 0;
  2876  001C74  0E00               	movlw	0
  2877  001C76  6FEF               	movwf	_sentAT2& (0+255),b
  2878                           
  2879                           ;modem.c: 263: sentAT3 = 0;
  2880  001C78  0E00               	movlw	0
  2881  001C7A  6FEE               	movwf	_sentAT3& (0+255),b
  2882                           
  2883                           ;modem.c: 264: sentAT4 = 0;
  2884  001C7C  0E00               	movlw	0
  2885  001C7E  6FED               	movwf	_sentAT4& (0+255),b
  2886                           
  2887                           ;modem.c: 265: sentAT5 = 0;
  2888  001C80  0E00               	movlw	0
  2889  001C82  6FEC               	movwf	_sentAT5& (0+255),b
  2890                           
  2891                           ;modem.c: 266: sentAT6 = 0;
  2892  001C84  0E00               	movlw	0
  2893  001C86  6FEB               	movwf	_sentAT6& (0+255),b
  2894                           
  2895                           ;modem.c: 267: sentAT7 = 0;
  2896  001C88  0E00               	movlw	0
  2897  001C8A  6FEA               	movwf	_sentAT7& (0+255),b
  2898                           
  2899                           ;modem.c: 268: sentAT8 = 0;
  2900  001C8C  0E00               	movlw	0
  2901  001C8E  6FE9               	movwf	_sentAT8& (0+255),b
  2902                           
  2903                           ;modem.c: 269: sentAT9 = 0;
  2904  001C90  0E00               	movlw	0
  2905  001C92  6FE8               	movwf	_sentAT9& (0+255),b
  2906                           
  2907                           ;modem.c: 270: sentAT10 = 0;
  2908  001C94  0E00               	movlw	0
  2909  001C96  6FE7               	movwf	_sentAT10& (0+255),b
  2910                           
  2911                           ;modem.c: 271: sentAT11 = 0;
  2912  001C98  0E00               	movlw	0
  2913  001C9A  6FE6               	movwf	_sentAT11& (0+255),b
  2914                           
  2915                           ;modem.c: 272: sentAT12 = 0;
  2916  001C9C  0E00               	movlw	0
  2917  001C9E  6FE5               	movwf	_sentAT12& (0+255),b
  2918                           
  2919                           ; BSR set to: 0
  2920  001CA0  0012               	return		;funcret
  2921  001CA2                     __end_of_reset_AT_marks:
  2922                           	opt stack 0
  2923                           tblptru	equ	0xFF8
  2924                           tblptrh	equ	0xFF7
  2925                           tblptrl	equ	0xFF6
  2926                           tablat	equ	0xFF5
  2927                           intcon	equ	0xFF2
  2928                           postinc0	equ	0xFEE
  2929                           wreg	equ	0xFE8
  2930                           postdec1	equ	0xFE5
  2931                           plusw1	equ	0xFE3
  2932                           fsr1l	equ	0xFE1
  2933                           postinc2	equ	0xFDE
  2934                           plusw2	equ	0xFDB
  2935                           status	equ	0xFD8
  2936                           
  2937 ;; *************** function _close_socket_ok *****************
  2938 ;; Defined at:
  2939 ;;		line 246 in file "modem.c"
  2940 ;; Parameters:    Size  Location     Type
  2941 ;;		None
  2942 ;; Auto vars:     Size  Location     Type
  2943 ;;  deactivatePD   15    0[BANK0 ] const unsigned char [15]
  2944 ;;  closeSocket    10   15[BANK0 ] const unsigned char [10]
  2945 ;; Return value:  Size  Location     Type
  2946 ;;                  1    wreg      unsigned char 
  2947 ;; Registers used:
  2948 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2949 ;; Tracked objects:
  2950 ;;		On entry : 0/0
  2951 ;;		On exit  : 0/0
  2952 ;;		Unchanged: 0/0
  2953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2955 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2957 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2958 ;;Total ram usage:       25 bytes
  2959 ;; Hardware stack levels used:    1
  2960 ;; Hardware stack levels required when called:    5
  2961 ;; This function calls:
  2962 ;;		_init_md_uart
  2963 ;;		_md_uart_write_str_ok
  2964 ;;		_terminate_md_uart
  2965 ;; This function is called by:
  2966 ;;		_check_modem_state
  2967 ;; This function uses a non-reentrant model
  2968 ;;
  2969                           
  2970                           	psect	text9
  2971  001B54                     __ptext9:
  2972                           	opt stack 0
  2973  001B54                     _close_socket_ok:
  2974                           	opt stack 24
  2975                           
  2976                           ;modem.c: 248: const uint8_t closeSocket[] = "AT#SH=1\r\n";
  2977                           
  2978                           ; BSR set to: 0
  2979                           ;incstack = 0
  2980  001B54  0E59               	movlw	low close_socket_ok@F6895
  2981  001B56  6EF6               	movwf	tblptrl,c
  2982  001B58                     	if	1	;There is more than 1 active tblptr byte
  2983  001B58  0E10               	movlw	high close_socket_ok@F6895
  2984  001B5A  6EF7               	movwf	tblptrh,c
  2985  001B5C                     	endif
  2986  001B5C                     	if	0	;There are less than 3 active tblptr bytes
  2987  001B5C                     	endif
  2988  001B5C  EE20  F06F         	lfsr	2,close_socket_ok@closeSocket
  2989  001B60  0E09               	movlw	9
  2990  001B62                     u3630:
  2991  001B62  0009               	tblrd		*+
  2992  001B64  CFF5 FFDE          	movff	tablat,postinc2
  2993  001B68  06E8               	decf	wreg,f,c
  2994  001B6A  E2FB               	bc	u3630
  2995                           
  2996                           ;modem.c: 249: const uint8_t deactivatePDP[] = "AT#SGACT=3,0\r\n";
  2997  001B6C  0E3D               	movlw	low close_socket_ok@F6897
  2998  001B6E  6EF6               	movwf	tblptrl,c
  2999  001B70                     	if	1	;There is more than 1 active tblptr byte
  3000  001B70  0E10               	movlw	high close_socket_ok@F6897
  3001  001B72  6EF7               	movwf	tblptrh,c
  3002  001B74                     	endif
  3003  001B74                     	if	0	;There are less than 3 active tblptr bytes
  3004  001B74                     	endif
  3005  001B74  EE20  F060         	lfsr	2,close_socket_ok@deactivatePDP
  3006  001B78  0E0E               	movlw	14
  3007  001B7A                     u3640:
  3008  001B7A  0009               	tblrd		*+
  3009  001B7C  CFF5 FFDE          	movff	tablat,postinc2
  3010  001B80  06E8               	decf	wreg,f,c
  3011  001B82  E2FB               	bc	u3640
  3012                           
  3013                           ;modem.c: 251: init_md_uart();
  3014  001B84  EC64  F00E         	call	_init_md_uart	;wreg free
  3015                           
  3016                           ;modem.c: 253: md_uart_write_str_ok((uint8_t *)&closeSocket[0], sizeof(closeSocket), 1, 
      +                          0);
  3017  001B88  0E6F               	movlw	low close_socket_ok@closeSocket
  3018  001B8A  6E17               	movwf	md_uart_write_str_ok@data,c
  3019  001B8C  0E00               	movlw	high close_socket_ok@closeSocket
  3020  001B8E  6E18               	movwf	md_uart_write_str_ok@data+1,c
  3021  001B90  0E0A               	movlw	10
  3022  001B92  6E19               	movwf	md_uart_write_str_ok@len1,c
  3023  001B94  0E01               	movlw	1
  3024  001B96  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  3025  001B98  0E00               	movlw	0
  3026  001B9A  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  3027  001B9C  EC00  F00A         	call	_md_uart_write_str_ok	;wreg free
  3028                           
  3029                           ;modem.c: 254: md_uart_write_str_ok((uint8_t *)&deactivatePDP[0], sizeof(deactivatePDP),
      +                           1, 0);
  3030  001BA0  0E60               	movlw	low close_socket_ok@deactivatePDP
  3031  001BA2  6E17               	movwf	md_uart_write_str_ok@data,c
  3032  001BA4  0E00               	movlw	high close_socket_ok@deactivatePDP
  3033  001BA6  6E18               	movwf	md_uart_write_str_ok@data+1,c
  3034  001BA8  0E0F               	movlw	15
  3035  001BAA  6E19               	movwf	md_uart_write_str_ok@len1,c
  3036  001BAC  0E01               	movlw	1
  3037  001BAE  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  3038  001BB0  0E00               	movlw	0
  3039  001BB2  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  3040  001BB4  EC00  F00A         	call	_md_uart_write_str_ok	;wreg free
  3041                           
  3042                           ;modem.c: 255: terminate_md_uart();
  3043  001BB8  ECBC  F00E         	call	_terminate_md_uart	;wreg free
  3044                           
  3045                           ;modem.c: 256: return 1;
  3046  001BBC  0E01               	movlw	1
  3047  001BBE  0012               	return	
  3048  001BC0                     __end_of_close_socket_ok:
  3049                           	opt stack 0
  3050                           tblptru	equ	0xFF8
  3051                           tblptrh	equ	0xFF7
  3052                           tblptrl	equ	0xFF6
  3053                           tablat	equ	0xFF5
  3054                           intcon	equ	0xFF2
  3055                           postinc0	equ	0xFEE
  3056                           wreg	equ	0xFE8
  3057                           postdec1	equ	0xFE5
  3058                           plusw1	equ	0xFE3
  3059                           fsr1l	equ	0xFE1
  3060                           postinc2	equ	0xFDE
  3061                           plusw2	equ	0xFDB
  3062                           status	equ	0xFD8
  3063                           
  3064 ;; *************** function _terminate_md_uart *****************
  3065 ;; Defined at:
  3066 ;;		line 57 in file "uart.c"
  3067 ;; Parameters:    Size  Location     Type
  3068 ;;		None
  3069 ;; Auto vars:     Size  Location     Type
  3070 ;;		None
  3071 ;; Return value:  Size  Location     Type
  3072 ;;                  1    wreg      void 
  3073 ;; Registers used:
  3074 ;;		None
  3075 ;; Tracked objects:
  3076 ;;		On entry : 0/0
  3077 ;;		On exit  : 0/0
  3078 ;;		Unchanged: 0/0
  3079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3083 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3084 ;;Total ram usage:        0 bytes
  3085 ;; Hardware stack levels used:    1
  3086 ;; Hardware stack levels required when called:    3
  3087 ;; This function calls:
  3088 ;;		Nothing
  3089 ;; This function is called by:
  3090 ;;		_send_md_cfg_cmds_ok
  3091 ;;		_setup_data_ok
  3092 ;;		_send_over_socket_ok
  3093 ;;		_close_socket_ok
  3094 ;; This function uses a non-reentrant model
  3095 ;;
  3096                           
  3097                           	psect	text10
  3098  001D78                     __ptext10:
  3099                           	opt stack 0
  3100  001D78                     _terminate_md_uart:
  3101                           	opt stack 25
  3102                           
  3103                           ;uart.c: 59: RCSTA1bits.SPEN = 0;
  3104                           
  3105                           ;incstack = 0
  3106  001D78  9EAB               	bcf	4011,7,c	;volatile
  3107                           
  3108                           ;uart.c: 62: TRISCbits.TRISC6 = 0;
  3109  001D7A  9C94               	bcf	3988,6,c	;volatile
  3110                           
  3111                           ;uart.c: 63: PORTCbits.RC6 = 0;
  3112  001D7C  9C82               	bcf	3970,6,c	;volatile
  3113                           
  3114                           ;uart.c: 64: RC1IE = 0;
  3115  001D7E  9A9D               	bcf	3997,5,c	;volatile
  3116  001D80  0012               	return		;funcret
  3117  001D82                     __end_of_terminate_md_uart:
  3118                           	opt stack 0
  3119                           tblptru	equ	0xFF8
  3120                           tblptrh	equ	0xFF7
  3121                           tblptrl	equ	0xFF6
  3122                           tablat	equ	0xFF5
  3123                           intcon	equ	0xFF2
  3124                           postinc0	equ	0xFEE
  3125                           wreg	equ	0xFE8
  3126                           postdec1	equ	0xFE5
  3127                           plusw1	equ	0xFE3
  3128                           fsr1l	equ	0xFE1
  3129                           postinc2	equ	0xFDE
  3130                           plusw2	equ	0xFDB
  3131                           status	equ	0xFD8
  3132                           
  3133 ;; *************** function _md_uart_write_str_ok *****************
  3134 ;; Defined at:
  3135 ;;		line 69 in file "uart.c"
  3136 ;; Parameters:    Size  Location     Type
  3137 ;;  data            2   22[COMRAM] PTR unsigned char 
  3138 ;;		 -> close_socket_ok@deactivatePDP(15), close_socket_ok@closeSocket(10), send_over_socket_ok@terminateData(1), send_o
      +ver_socket_ok@msg(8), 
  3139 ;;		 -> send_over_socket_ok@srecv(16), send_over_socket_ok@ssend(13), send_over_socket_ok@openConnection(44), setup_data
      +_ok@activatePDP(15), 
  3140 ;;		 -> setup_data_ok@cfgSocket(25), setup_data_ok@setApn(47), send_md_cfg_cmds_ok@csq(9), send_md_cfg_cmds_ok@gprs(11),
      + 
  3141 ;;		 -> send_md_cfg_cmds_ok@cereg(12), send_md_cfg_cmds_ok@creg(11), send_md_cfg_cmds_ok@cpin(11), send_md_cfg_cmds_ok@q
      +ueryVersion(10), 
  3142 ;;		 -> send_md_cfg_cmds_ok@ledpattern(12), send_md_cfg_cmds_ok@ledCfg(16), send_md_cfg_cmds_ok@baud(16), send_md_cfg_cm
      +ds_ok@cmee(12), 
  3143 ;;		 -> send_md_cfg_cmds_ok@ate(7), send_md_cfg_cmds_ok@at(5), 
  3144 ;;  len1            1   24[COMRAM] unsigned char 
  3145 ;;  wantOk          1   25[COMRAM] unsigned char 
  3146 ;;  waitToSendMo    1   26[COMRAM] unsigned char 
  3147 ;; Auto vars:     Size  Location     Type
  3148 ;;  pos             1   32[COMRAM] unsigned char 
  3149 ;;  currentChar     1   31[COMRAM] unsigned char 
  3150 ;;  index           1   30[COMRAM] unsigned char 
  3151 ;;  numRetries      1   29[COMRAM] unsigned char 
  3152 ;; Return value:  Size  Location     Type
  3153 ;;                  1    wreg      unsigned char 
  3154 ;; Registers used:
  3155 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3156 ;; Tracked objects:
  3157 ;;		On entry : 0/0
  3158 ;;		On exit  : 0/0
  3159 ;;		Unchanged: 0/0
  3160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3161 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3162 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3163 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3164 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3165 ;;Total ram usage:       11 bytes
  3166 ;; Hardware stack levels used:    1
  3167 ;; Hardware stack levels required when called:    4
  3168 ;; This function calls:
  3169 ;;		_disable_tmr3
  3170 ;;		_md_uart_send
  3171 ;;		_reload_tmr3_10ms
  3172 ;; This function is called by:
  3173 ;;		_send_md_cfg_cmds_ok
  3174 ;;		_setup_data_ok
  3175 ;;		_send_over_socket_ok
  3176 ;;		_close_socket_ok
  3177 ;; This function uses a non-reentrant model
  3178 ;;
  3179                           
  3180                           	psect	text11
  3181  001400                     __ptext11:
  3182                           	opt stack 0
  3183  001400                     _md_uart_write_str_ok:
  3184                           	opt stack 24
  3185                           
  3186                           ;uart.c: 72: uint8_t index = 0, pos = 0, currentChar, numRetries = 15;
  3187                           
  3188                           ;incstack = 0
  3189  001400  0E00               	movlw	0
  3190  001402  6E1F               	movwf	md_uart_write_str_ok@index,c
  3191  001404  0E00               	movlw	0
  3192  001406  6E21               	movwf	md_uart_write_str_ok@pos,c
  3193  001408  0E0F               	movlw	15
  3194  00140A  6E1E               	movwf	md_uart_write_str_ok@numRetries,c
  3195                           
  3196                           ;uart.c: 73: tmr5_cnt = 0;
  3197  00140C  0E00               	movlw	0
  3198  00140E  6E45               	movwf	_tmr5_cnt,c
  3199                           
  3200                           ;uart.c: 74: receivedOK = 0;
  3201  001410  0E00               	movlw	0
  3202  001412  6E43               	movwf	_receivedOK,c
  3203                           
  3204                           ;uart.c: 75: receivedERR = 0;
  3205  001414  0E00               	movlw	0
  3206  001416  6E42               	movwf	_receivedERR,c
  3207                           
  3208                           ;uart.c: 76: timedOut = 0;
  3209  001418  0E00               	movlw	0
  3210  00141A  6E40               	movwf	_timedOut,c
  3211                           
  3212                           ;uart.c: 77: while (numRetries-- > 0 && !receivedOK)
  3213  00141C  D108               	goto	l320
  3214  00141E                     l287:
  3215                           
  3216                           ;uart.c: 78: {
  3217                           ;uart.c: 79: CREN1 = 0;
  3218  00141E  98AB               	bcf	4011,4,c	;volatile
  3219                           
  3220                           ;uart.c: 80: timedOut = 0;
  3221  001420  0E00               	movlw	0
  3222  001422  6E40               	movwf	_timedOut,c
  3223                           
  3224                           ;uart.c: 81: for (index = 0; index < len1; index++)
  3225  001424  0E00               	movlw	0
  3226  001426  6E1F               	movwf	md_uart_write_str_ok@index,c
  3227  001428  D01A               	goto	l288
  3228  00142A                     
  3229                           ;uart.c: 82: {
  3230                           ;uart.c: 83: referenceBuf[index] = *data;
  3231  00142A  C017  FFD9         	movff	md_uart_write_str_ok@data,fsr2l
  3232  00142E  C018  FFDA         	movff	md_uart_write_str_ok@data+1,fsr2h
  3233  001432  501F               	movf	md_uart_write_str_ok@index,w,c
  3234  001434  0D01               	mullw	1
  3235  001436  0EBC               	movlw	low _referenceBuf
  3236  001438  24F3               	addwf	prodl,w,c
  3237  00143A  6EE1               	movwf	fsr1l,c
  3238  00143C  0E01               	movlw	high _referenceBuf
  3239  00143E  20F4               	addwfc	prodh,w,c
  3240  001440  6EE2               	movwf	fsr1h,c
  3241  001442  CFDF FFE7          	movff	indf2,indf1
  3242                           
  3243                           ;uart.c: 84: currentChar = *data;
  3244  001446  C017  FFD9         	movff	md_uart_write_str_ok@data,fsr2l
  3245  00144A  C018  FFDA         	movff	md_uart_write_str_ok@data+1,fsr2h
  3246  00144E  50DF               	movf	indf2,w,c
  3247  001450  6E20               	movwf	md_uart_write_str_ok@currentChar,c
  3248                           
  3249                           ;uart.c: 85: md_uart_send(currentChar);
  3250  001452  5020               	movf	md_uart_write_str_ok@currentChar,w,c
  3251  001454  ECB6  F00E         	call	_md_uart_send
  3252                           
  3253                           ;uart.c: 86: data++;
  3254  001458  4A17               	infsnz	md_uart_write_str_ok@data,f,c
  3255  00145A  2A18               	incf	md_uart_write_str_ok@data+1,f,c
  3256  00145C  2A1F               	incf	md_uart_write_str_ok@index,f,c
  3257  00145E                     l288:
  3258  00145E  5019               	movf	md_uart_write_str_ok@len1,w,c
  3259  001460  5C1F               	subwf	md_uart_write_str_ok@index,w,c
  3260  001462  A0D8               	btfss	status,0,c
  3261  001464  D7E2               	goto	l289
  3262                           
  3263                           ;uart.c: 87: }
  3264                           ;uart.c: 91: reload_tmr3_10ms();
  3265  001466  EC76  F00E         	call	_reload_tmr3_10ms	;wreg free
  3266                           
  3267                           ;uart.c: 92: CREN1 = 1;
  3268  00146A  88AB               	bsf	4011,4,c	;volatile
  3269                           
  3270                           ;uart.c: 95: PORTBbits.RB3=0;
  3271  00146C  9681               	bcf	3969,3,c	;volatile
  3272                           
  3273                           ;uart.c: 96: if (waitToSendMoreData)
  3274  00146E  501B               	movf	md_uart_write_str_ok@waitToSendMoreData,w,c
  3275  001470  B4D8               	btfsc	status,2,c
  3276  001472  D012               	goto	l298
  3277  001474                     u2710:
  3278                           
  3279                           ;uart.c: 97: {
  3280                           ;uart.c: 98: while (!RC1IF && !timedOut);
  3281  001474  BA9E               	btfsc	3998,5,c	;volatile
  3282  001476  D003               	goto	u2730
  3283  001478  5040               	movf	_timedOut,w,c
  3284  00147A  B4D8               	btfsc	status,2,c
  3285  00147C  D7FB               	goto	u2710
  3286  00147E                     u2730:
  3287                           
  3288                           ;uart.c: 99: if (!timedOut)
  3289  00147E  5040               	movf	_timedOut,w,c
  3290  001480  A4D8               	btfss	status,2,c
  3291  001482  D00A               	goto	l298
  3292                           
  3293                           ;uart.c: 100: {
  3294                           ;uart.c: 101: disable_tmr3();
  3295  001484  EC82  F00E         	call	_disable_tmr3	;wreg free
  3296                           
  3297                           ;uart.c: 102: currentChar = RC1REG;
  3298  001488  CFAE F020          	movff	4014,md_uart_write_str_ok@currentChar	;volatile
  3299                           
  3300                           ;uart.c: 103: if (currentChar == '<')
  3301  00148C  0E3C               	movlw	60
  3302  00148E  1820               	xorwf	md_uart_write_str_ok@currentChar,w,c
  3303  001490  A4D8               	btfss	status,2,c
  3304  001492  D002               	goto	l298
  3305                           
  3306                           ;uart.c: 104: {
  3307                           ;uart.c: 105: return 1;
  3308  001494  0E01               	movlw	1
  3309  001496  0012               	return	
  3310  001498                     l298:
  3311                           
  3312                           ;uart.c: 106: }
  3313                           ;uart.c: 107: }
  3314                           ;uart.c: 108: }
  3315                           ;uart.c: 110: if (wantOk && !waitToSendMoreData)
  3316  001498  501A               	movf	md_uart_write_str_ok@wantOk,w,c
  3317  00149A  B4D8               	btfsc	status,2,c
  3318  00149C  D0C2               	goto	u2940
  3319  00149E  501B               	movf	md_uart_write_str_ok@waitToSendMoreData,w,c
  3320  0014A0  B4D8               	btfsc	status,2,c
  3321  0014A2  D0B6               	goto	l308
  3322  0014A4  D0BE               	goto	u2940
  3323  0014A6                     
  3324                           ;uart.c: 114: {
  3325                           ;uart.c: 115: while (!RC1IF && !timedOut);
  3326  0014A6  BA9E               	btfsc	3998,5,c	;volatile
  3327  0014A8  D003               	goto	u2790
  3328  0014AA  5040               	movf	_timedOut,w,c
  3329  0014AC  B4D8               	btfsc	status,2,c
  3330  0014AE  D7FB               	goto	l302
  3331  0014B0                     u2790:
  3332                           
  3333                           ;uart.c: 116: if (!timedOut)
  3334  0014B0  5040               	movf	_timedOut,w,c
  3335  0014B2  A4D8               	btfss	status,2,c
  3336  0014B4  D0AD               	goto	l308
  3337                           
  3338                           ;uart.c: 117: {
  3339                           ;uart.c: 118: currentChar = RC1REG;
  3340  0014B6  CFAE F020          	movff	4014,md_uart_write_str_ok@currentChar	;volatile
  3341                           
  3342                           ;uart.c: 119: mdRxBuf[pos] = currentChar;
  3343  0014BA  5021               	movf	md_uart_write_str_ok@pos,w,c
  3344  0014BC  0D01               	mullw	1
  3345  0014BE  0E00               	movlw	low _mdRxBuf
  3346  0014C0  24F3               	addwf	prodl,w,c
  3347  0014C2  6ED9               	movwf	fsr2l,c
  3348  0014C4  0E02               	movlw	high _mdRxBuf
  3349  0014C6  20F4               	addwfc	prodh,w,c
  3350  0014C8  6EDA               	movwf	fsr2h,c
  3351  0014CA  C020  FFDF         	movff	md_uart_write_str_ok@currentChar,indf2
  3352                           
  3353                           ;uart.c: 120: if (pos >= 2)
  3354  0014CE  0E01               	movlw	1
  3355  0014D0  6421               	cpfsgt	md_uart_write_str_ok@pos,c
  3356  0014D2  D09D               	goto	l314
  3357                           
  3358                           ;uart.c: 121: {
  3359                           ;uart.c: 122: if (mdRxBuf[(uint8_t)(pos - 2)] == 'O' && mdRxBuf[(uint8_t)(pos - 1)] == '
      +                          K' && (mdRxBuf[pos] == '\r' || mdRxBuf[pos] == '\n'))
  3360  0014D4  C021  F01C         	movff	md_uart_write_str_ok@pos,??_md_uart_write_str_ok
  3361  0014D8  0EFE               	movlw	254
  3362  0014DA  261C               	addwf	??_md_uart_write_str_ok,f,c
  3363  0014DC  501C               	movf	??_md_uart_write_str_ok,w,c
  3364  0014DE  0D01               	mullw	1
  3365  0014E0  0E00               	movlw	low _mdRxBuf
  3366  0014E2  24F3               	addwf	prodl,w,c
  3367  0014E4  6ED9               	movwf	fsr2l,c
  3368  0014E6  0E02               	movlw	high _mdRxBuf
  3369  0014E8  20F4               	addwfc	prodh,w,c
  3370  0014EA  6EDA               	movwf	fsr2h,c
  3371  0014EC  0E4F               	movlw	79
  3372  0014EE  18DE               	xorwf	postinc2,w,c
  3373  0014F0  A4D8               	btfss	status,2,c
  3374  0014F2  D032               	goto	l310
  3375  0014F4  C021  F01C         	movff	md_uart_write_str_ok@pos,??_md_uart_write_str_ok
  3376  0014F8  0EFF               	movlw	255
  3377  0014FA  261C               	addwf	??_md_uart_write_str_ok,f,c
  3378  0014FC  501C               	movf	??_md_uart_write_str_ok,w,c
  3379  0014FE  0D01               	mullw	1
  3380  001500  0E00               	movlw	low _mdRxBuf
  3381  001502  24F3               	addwf	prodl,w,c
  3382  001504  6ED9               	movwf	fsr2l,c
  3383  001506  0E02               	movlw	high _mdRxBuf
  3384  001508  20F4               	addwfc	prodh,w,c
  3385  00150A  6EDA               	movwf	fsr2h,c
  3386  00150C  0E4B               	movlw	75
  3387  00150E  18DE               	xorwf	postinc2,w,c
  3388  001510  A4D8               	btfss	status,2,c
  3389  001512  D022               	goto	l310
  3390  001514  5021               	movf	md_uart_write_str_ok@pos,w,c
  3391  001516  0D01               	mullw	1
  3392  001518  0E00               	movlw	low _mdRxBuf
  3393  00151A  24F3               	addwf	prodl,w,c
  3394  00151C  6ED9               	movwf	fsr2l,c
  3395  00151E  0E02               	movlw	high _mdRxBuf
  3396  001520  20F4               	addwfc	prodh,w,c
  3397  001522  6EDA               	movwf	fsr2h,c
  3398  001524  0E0D               	movlw	13
  3399  001526  18DE               	xorwf	postinc2,w,c
  3400  001528  B4D8               	btfsc	status,2,c
  3401  00152A  D00C               	goto	u2850
  3402  00152C  5021               	movf	md_uart_write_str_ok@pos,w,c
  3403  00152E  0D01               	mullw	1
  3404  001530  0E00               	movlw	low _mdRxBuf
  3405  001532  24F3               	addwf	prodl,w,c
  3406  001534  6ED9               	movwf	fsr2l,c
  3407  001536  0E02               	movlw	high _mdRxBuf
  3408  001538  20F4               	addwfc	prodh,w,c
  3409  00153A  6EDA               	movwf	fsr2h,c
  3410  00153C  0E0A               	movlw	10
  3411  00153E  18DE               	xorwf	postinc2,w,c
  3412  001540  A4D8               	btfss	status,2,c
  3413  001542  D00A               	goto	l310
  3414  001544                     u2850:
  3415  001544  0004               	clrwdt		;# 
  3416                           
  3417                           ;uart.c: 127: disable_tmr3();
  3418  001546  EC82  F00E         	call	_disable_tmr3	;wreg free
  3419                           
  3420                           ;uart.c: 128: CREN1 = 0;
  3421  00154A  98AB               	bcf	4011,4,c	;volatile
  3422                           
  3423                           ;uart.c: 129: receivedOK = 1;
  3424  00154C  0E01               	movlw	1
  3425  00154E  6E43               	movwf	_receivedOK,c
  3426                           
  3427                           ;uart.c: 130: receivedERR = 0;
  3428  001550  0E00               	movlw	0
  3429  001552  6E42               	movwf	_receivedERR,c
  3430                           
  3431                           ;uart.c: 131: return receivedOK;
  3432  001554  5043               	movf	_receivedOK,w,c
  3433  001556  0012               	return	
  3434  001558                     l310:
  3435                           
  3436                           ;uart.c: 132: }
  3437                           ;uart.c: 133: if (pos >= 5)
  3438  001558  0E04               	movlw	4
  3439  00155A  6421               	cpfsgt	md_uart_write_str_ok@pos,c
  3440  00155C  D058               	goto	l314
  3441                           
  3442                           ;uart.c: 134: {
  3443                           ;uart.c: 135: if (mdRxBuf[(uint8_t)(pos - 5)] == 'E' && mdRxBuf[(uint8_t)(pos - 4)] == '
      +                          R' && mdRxBuf[(uint8_t)(pos - 3)] == 'R' && mdRxBuf[(uint8_t)(pos - 2)] == 'O' && mdRxBu
      +                          f[(uint8_t)(pos - 1)] == 'R')
  3444  00155E  C021  F01C         	movff	md_uart_write_str_ok@pos,??_md_uart_write_str_ok
  3445  001562  0EFB               	movlw	251
  3446  001564  261C               	addwf	??_md_uart_write_str_ok,f,c
  3447  001566  501C               	movf	??_md_uart_write_str_ok,w,c
  3448  001568  0D01               	mullw	1
  3449  00156A  0E00               	movlw	low _mdRxBuf
  3450  00156C  24F3               	addwf	prodl,w,c
  3451  00156E  6ED9               	movwf	fsr2l,c
  3452  001570  0E02               	movlw	high _mdRxBuf
  3453  001572  20F4               	addwfc	prodh,w,c
  3454  001574  6EDA               	movwf	fsr2h,c
  3455  001576  0E45               	movlw	69
  3456  001578  18DE               	xorwf	postinc2,w,c
  3457  00157A  A4D8               	btfss	status,2,c
  3458  00157C  D048               	goto	l314
  3459  00157E  C021  F01C         	movff	md_uart_write_str_ok@pos,??_md_uart_write_str_ok
  3460  001582  0EFC               	movlw	252
  3461  001584  261C               	addwf	??_md_uart_write_str_ok,f,c
  3462  001586  501C               	movf	??_md_uart_write_str_ok,w,c
  3463  001588  0D01               	mullw	1
  3464  00158A  0E00               	movlw	low _mdRxBuf
  3465  00158C  24F3               	addwf	prodl,w,c
  3466  00158E  6ED9               	movwf	fsr2l,c
  3467  001590  0E02               	movlw	high _mdRxBuf
  3468  001592  20F4               	addwfc	prodh,w,c
  3469  001594  6EDA               	movwf	fsr2h,c
  3470  001596  0E52               	movlw	82
  3471  001598  18DE               	xorwf	postinc2,w,c
  3472  00159A  A4D8               	btfss	status,2,c
  3473  00159C  D038               	goto	l314
  3474  00159E  C021  F01C         	movff	md_uart_write_str_ok@pos,??_md_uart_write_str_ok
  3475  0015A2  0EFD               	movlw	253
  3476  0015A4  261C               	addwf	??_md_uart_write_str_ok,f,c
  3477  0015A6  501C               	movf	??_md_uart_write_str_ok,w,c
  3478  0015A8  0D01               	mullw	1
  3479  0015AA  0E00               	movlw	low _mdRxBuf
  3480  0015AC  24F3               	addwf	prodl,w,c
  3481  0015AE  6ED9               	movwf	fsr2l,c
  3482  0015B0  0E02               	movlw	high _mdRxBuf
  3483  0015B2  20F4               	addwfc	prodh,w,c
  3484  0015B4  6EDA               	movwf	fsr2h,c
  3485  0015B6  0E52               	movlw	82
  3486  0015B8  18DE               	xorwf	postinc2,w,c
  3487  0015BA  A4D8               	btfss	status,2,c
  3488  0015BC  D028               	goto	l314
  3489  0015BE  C021  F01C         	movff	md_uart_write_str_ok@pos,??_md_uart_write_str_ok
  3490  0015C2  0EFE               	movlw	254
  3491  0015C4  261C               	addwf	??_md_uart_write_str_ok,f,c
  3492  0015C6  501C               	movf	??_md_uart_write_str_ok,w,c
  3493  0015C8  0D01               	mullw	1
  3494  0015CA  0E00               	movlw	low _mdRxBuf
  3495  0015CC  24F3               	addwf	prodl,w,c
  3496  0015CE  6ED9               	movwf	fsr2l,c
  3497  0015D0  0E02               	movlw	high _mdRxBuf
  3498  0015D2  20F4               	addwfc	prodh,w,c
  3499  0015D4  6EDA               	movwf	fsr2h,c
  3500  0015D6  0E4F               	movlw	79
  3501  0015D8  18DE               	xorwf	postinc2,w,c
  3502  0015DA  A4D8               	btfss	status,2,c
  3503  0015DC  D018               	goto	l314
  3504  0015DE  C021  F01C         	movff	md_uart_write_str_ok@pos,??_md_uart_write_str_ok
  3505  0015E2  0EFF               	movlw	255
  3506  0015E4  261C               	addwf	??_md_uart_write_str_ok,f,c
  3507  0015E6  501C               	movf	??_md_uart_write_str_ok,w,c
  3508  0015E8  0D01               	mullw	1
  3509  0015EA  0E00               	movlw	low _mdRxBuf
  3510  0015EC  24F3               	addwf	prodl,w,c
  3511  0015EE  6ED9               	movwf	fsr2l,c
  3512  0015F0  0E02               	movlw	high _mdRxBuf
  3513  0015F2  20F4               	addwfc	prodh,w,c
  3514  0015F4  6EDA               	movwf	fsr2h,c
  3515  0015F6  0E52               	movlw	82
  3516  0015F8  18DE               	xorwf	postinc2,w,c
  3517  0015FA  A4D8               	btfss	status,2,c
  3518  0015FC  D008               	goto	l314
  3519  0015FE  0004               	clrwdt		;# 
  3520                           
  3521                           ;uart.c: 141: disable_tmr3();
  3522  001600  EC82  F00E         	call	_disable_tmr3	;wreg free
  3523                           
  3524                           ;uart.c: 142: CREN1 = 0;
  3525  001604  98AB               	bcf	4011,4,c	;volatile
  3526                           
  3527                           ;uart.c: 143: receivedOK = 0;
  3528  001606  0E00               	movlw	0
  3529  001608  6E43               	movwf	_receivedOK,c
  3530                           
  3531                           ;uart.c: 144: receivedERR = 1;
  3532  00160A  0E01               	movlw	1
  3533  00160C  6E42               	movwf	_receivedERR,c
  3534  00160E                     l314:
  3535                           
  3536                           ;uart.c: 145: }
  3537                           ;uart.c: 146: }
  3538                           ;uart.c: 147: }
  3539                           ;uart.c: 148: pos++;
  3540  00160E  2A21               	incf	md_uart_write_str_ok@pos,f,c
  3541  001610                     l308:
  3542  001610  5043               	movf	_receivedOK,w,c
  3543  001612  B4D8               	btfsc	status,2,c
  3544  001614  D003               	goto	u2930
  3545  001616  5042               	movf	_receivedERR,w,c
  3546  001618  A4D8               	btfss	status,2,c
  3547  00161A  D003               	goto	u2940
  3548  00161C                     u2930:
  3549  00161C  5040               	movf	_timedOut,w,c
  3550  00161E  B4D8               	btfsc	status,2,c
  3551  001620  D742               	goto	l302
  3552  001622                     u2940:
  3553                           
  3554                           ;uart.c: 149: }
  3555                           ;uart.c: 150: }
  3556                           ;uart.c: 157: }
  3557                           ;uart.c: 158: if (timedOut)
  3558  001622  5040               	movf	_timedOut,w,c
  3559  001624  B4D8               	btfsc	status,2,c
  3560  001626  D003               	goto	l320
  3561                           
  3562                           ;uart.c: 159: {
  3563                           ;uart.c: 161: disable_tmr3();
  3564  001628  EC82  F00E         	call	_disable_tmr3	;wreg free
  3565                           
  3566                           ;uart.c: 162: PORTBbits.RB3=1;
  3567  00162C  8681               	bsf	3969,3,c	;volatile
  3568  00162E                     l320:
  3569  00162E  061E               	decf	md_uart_write_str_ok@numRetries,f,c
  3570  001630  281E               	incf	md_uart_write_str_ok@numRetries,w,c
  3571  001632  B4D8               	btfsc	status,2,c
  3572  001634  D003               	goto	u2970
  3573  001636  5043               	movf	_receivedOK,w,c
  3574  001638  B4D8               	btfsc	status,2,c
  3575  00163A  D6F1               	goto	l287
  3576  00163C                     u2970:
  3577                           
  3578                           ;uart.c: 163: }
  3579                           ;uart.c: 170: }
  3580                           ;uart.c: 171: if (numRetries == 0)
  3581  00163C  501E               	movf	md_uart_write_str_ok@numRetries,w,c
  3582  00163E  A4D8               	btfss	status,2,c
  3583  001640  D004               	goto	l324
  3584                           
  3585                           ;uart.c: 172: {
  3586                           ;uart.c: 174: disable_tmr3();
  3587  001642  EC82  F00E         	call	_disable_tmr3	;wreg free
  3588                           
  3589                           ;uart.c: 175: return 0;
  3590  001646  0E00               	movlw	0
  3591  001648  0012               	return	
  3592  00164A                     l324:
  3593                           
  3594                           ;uart.c: 176: }
  3595                           ;uart.c: 178: if (!wantOk && !waitToSendMoreData)
  3596  00164A  501A               	movf	md_uart_write_str_ok@wantOk,w,c
  3597  00164C  A4D8               	btfss	status,2,c
  3598  00164E  D00D               	goto	l325
  3599  001650  501B               	movf	md_uart_write_str_ok@waitToSendMoreData,w,c
  3600  001652  A4D8               	btfss	status,2,c
  3601  001654  D00A               	goto	l325
  3602                           
  3603                           ;uart.c: 179: {
  3604                           ;uart.c: 180: receivedOK = 0;
  3605  001656  0E00               	movlw	0
  3606  001658  6E43               	movwf	_receivedOK,c
  3607                           
  3608                           ;uart.c: 181: GIE = 0;
  3609  00165A  9EF2               	bcf	intcon,7,c	;volatile
  3610                           
  3611                           ;uart.c: 182: CREN1 = 1;
  3612  00165C  88AB               	bsf	4011,4,c	;volatile
  3613                           
  3614                           ;uart.c: 183: RC1IE = 1;
  3615  00165E  8A9D               	bsf	3997,5,c	;volatile
  3616                           
  3617                           ;uart.c: 184: PEIE = 1;
  3618  001660  8CF2               	bsf	intcon,6,c	;volatile
  3619                           
  3620                           ;uart.c: 185: RC1IF = 0;
  3621  001662  9A9E               	bcf	3998,5,c	;volatile
  3622                           
  3623                           ;uart.c: 186: GIE = 1;
  3624  001664  8EF2               	bsf	intcon,7,c	;volatile
  3625                           
  3626                           ;uart.c: 187: return 1;
  3627  001666  0E01               	movlw	1
  3628  001668  0012               	return	
  3629  00166A                     l325:
  3630                           
  3631                           ;uart.c: 188: }
  3632                           ;uart.c: 189: return receivedOK;
  3633  00166A  5043               	movf	_receivedOK,w,c
  3634  00166C  0012               	return	
  3635  00166E                     __end_of_md_uart_write_str_ok:
  3636                           	opt stack 0
  3637                           tblptru	equ	0xFF8
  3638                           tblptrh	equ	0xFF7
  3639                           tblptrl	equ	0xFF6
  3640                           tablat	equ	0xFF5
  3641                           prodh	equ	0xFF4
  3642                           prodl	equ	0xFF3
  3643                           intcon	equ	0xFF2
  3644                           postinc0	equ	0xFEE
  3645                           wreg	equ	0xFE8
  3646                           indf1	equ	0xFE7
  3647                           postdec1	equ	0xFE5
  3648                           plusw1	equ	0xFE3
  3649                           fsr1h	equ	0xFE2
  3650                           fsr1l	equ	0xFE1
  3651                           indf2	equ	0xFDF
  3652                           postinc2	equ	0xFDE
  3653                           plusw2	equ	0xFDB
  3654                           fsr2h	equ	0xFDA
  3655                           fsr2l	equ	0xFD9
  3656                           status	equ	0xFD8
  3657                           
  3658 ;; *************** function _reload_tmr3_10ms *****************
  3659 ;; Defined at:
  3660 ;;		line 265 in file "main.c"
  3661 ;; Parameters:    Size  Location     Type
  3662 ;;		None
  3663 ;; Auto vars:     Size  Location     Type
  3664 ;;		None
  3665 ;; Return value:  Size  Location     Type
  3666 ;;                  1    wreg      void 
  3667 ;; Registers used:
  3668 ;;		wreg, status,2
  3669 ;; Tracked objects:
  3670 ;;		On entry : 0/0
  3671 ;;		On exit  : 0/0
  3672 ;;		Unchanged: 0/0
  3673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3677 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3678 ;;Total ram usage:        0 bytes
  3679 ;; Hardware stack levels used:    1
  3680 ;; Hardware stack levels required when called:    3
  3681 ;; This function calls:
  3682 ;;		Nothing
  3683 ;; This function is called by:
  3684 ;;		_md_uart_write_str_ok
  3685 ;;		_start_md_boot_timer
  3686 ;; This function uses a non-reentrant model
  3687 ;;
  3688                           
  3689                           	psect	text12
  3690  001CEC                     __ptext12:
  3691                           	opt stack 0
  3692  001CEC                     _reload_tmr3_10ms:
  3693                           	opt stack 24
  3694                           
  3695                           ;main.c: 267: INTCONbits.GIE = 0;
  3696                           
  3697                           ;incstack = 0
  3698  001CEC  9EF2               	bcf	intcon,7,c	;volatile
  3699                           
  3700                           ;main.c: 268: T3CON = 0b00010101;
  3701  001CEE  0E15               	movlw	21
  3702  001CF0  6EB1               	movwf	4017,c	;volatile
  3703                           
  3704                           ;main.c: 270: PIE2bits.TMR3IE = 1;
  3705  001CF2  82A0               	bsf	4000,1,c	;volatile
  3706                           
  3707                           ;main.c: 271: PIR2bits.TMR3IF = 0;
  3708  001CF4  92A1               	bcf	4001,1,c	;volatile
  3709                           
  3710                           ;main.c: 272: INTCONbits.PEIE = 1;
  3711  001CF6  8CF2               	bsf	intcon,6,c	;volatile
  3712                           
  3713                           ;main.c: 273: TMR3H = 0xD8;
  3714  001CF8  0ED8               	movlw	216
  3715  001CFA  6EB3               	movwf	4019,c	;volatile
  3716                           
  3717                           ;main.c: 274: TMR3L = 0xEF;
  3718  001CFC  0EEF               	movlw	239
  3719  001CFE  6EB2               	movwf	4018,c	;volatile
  3720                           
  3721                           ;main.c: 275: INTCONbits.GIE = 1;
  3722  001D00  8EF2               	bsf	intcon,7,c	;volatile
  3723  001D02  0012               	return		;funcret
  3724  001D04                     __end_of_reload_tmr3_10ms:
  3725                           	opt stack 0
  3726                           tblptru	equ	0xFF8
  3727                           tblptrh	equ	0xFF7
  3728                           tblptrl	equ	0xFF6
  3729                           tablat	equ	0xFF5
  3730                           prodh	equ	0xFF4
  3731                           prodl	equ	0xFF3
  3732                           intcon	equ	0xFF2
  3733                           postinc0	equ	0xFEE
  3734                           wreg	equ	0xFE8
  3735                           indf1	equ	0xFE7
  3736                           postdec1	equ	0xFE5
  3737                           plusw1	equ	0xFE3
  3738                           fsr1h	equ	0xFE2
  3739                           fsr1l	equ	0xFE1
  3740                           indf2	equ	0xFDF
  3741                           postinc2	equ	0xFDE
  3742                           plusw2	equ	0xFDB
  3743                           fsr2h	equ	0xFDA
  3744                           fsr2l	equ	0xFD9
  3745                           status	equ	0xFD8
  3746                           
  3747 ;; *************** function _md_uart_send *****************
  3748 ;; Defined at:
  3749 ;;		line 192 in file "uart.c"
  3750 ;; Parameters:    Size  Location     Type
  3751 ;;  data            1    wreg     unsigned char 
  3752 ;; Auto vars:     Size  Location     Type
  3753 ;;  data            1   21[COMRAM] unsigned char 
  3754 ;; Return value:  Size  Location     Type
  3755 ;;                  1    wreg      void 
  3756 ;; Registers used:
  3757 ;;		wreg
  3758 ;; Tracked objects:
  3759 ;;		On entry : 0/0
  3760 ;;		On exit  : 0/0
  3761 ;;		Unchanged: 0/0
  3762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3764 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3766 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3767 ;;Total ram usage:        1 bytes
  3768 ;; Hardware stack levels used:    1
  3769 ;; Hardware stack levels required when called:    3
  3770 ;; This function calls:
  3771 ;;		Nothing
  3772 ;; This function is called by:
  3773 ;;		_md_uart_write_str_ok
  3774 ;; This function uses a non-reentrant model
  3775 ;;
  3776                           
  3777                           	psect	text13
  3778  001D6C                     __ptext13:
  3779                           	opt stack 0
  3780  001D6C                     _md_uart_send:
  3781                           	opt stack 24
  3782                           
  3783                           ;incstack = 0
  3784                           ;md_uart_send@data stored from wreg
  3785  001D6C  6E16               	movwf	md_uart_send@data,c
  3786  001D6E                     
  3787                           ;uart.c: 195: while (!TRMT1);
  3788  001D6E  A2AC               	btfss	4012,1,c	;volatile
  3789  001D70  D7FE               	goto	l2661
  3790                           
  3791                           ;uart.c: 196: TX1REG = data;
  3792  001D72  C016  FFAD         	movff	md_uart_send@data,4013	;volatile
  3793  001D76  0012               	return		;funcret
  3794  001D78                     __end_of_md_uart_send:
  3795                           	opt stack 0
  3796                           tblptru	equ	0xFF8
  3797                           tblptrh	equ	0xFF7
  3798                           tblptrl	equ	0xFF6
  3799                           tablat	equ	0xFF5
  3800                           prodh	equ	0xFF4
  3801                           prodl	equ	0xFF3
  3802                           intcon	equ	0xFF2
  3803                           postinc0	equ	0xFEE
  3804                           wreg	equ	0xFE8
  3805                           indf1	equ	0xFE7
  3806                           postdec1	equ	0xFE5
  3807                           plusw1	equ	0xFE3
  3808                           fsr1h	equ	0xFE2
  3809                           fsr1l	equ	0xFE1
  3810                           indf2	equ	0xFDF
  3811                           postinc2	equ	0xFDE
  3812                           plusw2	equ	0xFDB
  3813                           fsr2h	equ	0xFDA
  3814                           fsr2l	equ	0xFD9
  3815                           status	equ	0xFD8
  3816                           
  3817 ;; *************** function _disable_tmr3 *****************
  3818 ;; Defined at:
  3819 ;;		line 278 in file "main.c"
  3820 ;; Parameters:    Size  Location     Type
  3821 ;;		None
  3822 ;; Auto vars:     Size  Location     Type
  3823 ;;		None
  3824 ;; Return value:  Size  Location     Type
  3825 ;;                  1    wreg      void 
  3826 ;; Registers used:
  3827 ;;		wreg, status,2
  3828 ;; Tracked objects:
  3829 ;;		On entry : 0/0
  3830 ;;		On exit  : 0/0
  3831 ;;		Unchanged: 0/0
  3832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3836 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3837 ;;Total ram usage:        0 bytes
  3838 ;; Hardware stack levels used:    1
  3839 ;; Hardware stack levels required when called:    3
  3840 ;; This function calls:
  3841 ;;		Nothing
  3842 ;; This function is called by:
  3843 ;;		_md_uart_write_str_ok
  3844 ;; This function uses a non-reentrant model
  3845 ;;
  3846                           
  3847                           	psect	text14
  3848  001D04                     __ptext14:
  3849                           	opt stack 0
  3850  001D04                     _disable_tmr3:
  3851                           	opt stack 24
  3852                           
  3853                           ;main.c: 280: tmr3_cnt = 0;
  3854                           
  3855                           ;incstack = 0
  3856  001D04  0E00               	movlw	0
  3857  001D06  6E38               	movwf	_tmr3_cnt,c
  3858  001D08  0E00               	movlw	0
  3859  001D0A  6E39               	movwf	_tmr3_cnt+1,c
  3860  001D0C  0E00               	movlw	0
  3861  001D0E  6E3A               	movwf	_tmr3_cnt+2,c
  3862  001D10  0E00               	movlw	0
  3863  001D12  6E3B               	movwf	_tmr3_cnt+3,c
  3864                           
  3865                           ;main.c: 281: T3CONbits.TMR3ON = 0;
  3866  001D14  90B1               	bcf	4017,0,c	;volatile
  3867                           
  3868                           ;main.c: 282: PIE2bits.TMR3IE = 0;
  3869  001D16  92A0               	bcf	4000,1,c	;volatile
  3870                           
  3871                           ;main.c: 283: PIR2bits.TMR3IF = 0;
  3872  001D18  92A1               	bcf	4001,1,c	;volatile
  3873  001D1A  0012               	return		;funcret
  3874  001D1C                     __end_of_disable_tmr3:
  3875                           	opt stack 0
  3876                           tblptru	equ	0xFF8
  3877                           tblptrh	equ	0xFF7
  3878                           tblptrl	equ	0xFF6
  3879                           tablat	equ	0xFF5
  3880                           prodh	equ	0xFF4
  3881                           prodl	equ	0xFF3
  3882                           intcon	equ	0xFF2
  3883                           postinc0	equ	0xFEE
  3884                           wreg	equ	0xFE8
  3885                           indf1	equ	0xFE7
  3886                           postdec1	equ	0xFE5
  3887                           plusw1	equ	0xFE3
  3888                           fsr1h	equ	0xFE2
  3889                           fsr1l	equ	0xFE1
  3890                           indf2	equ	0xFDF
  3891                           postinc2	equ	0xFDE
  3892                           plusw2	equ	0xFDB
  3893                           fsr2h	equ	0xFDA
  3894                           fsr2l	equ	0xFD9
  3895                           status	equ	0xFD8
  3896                           
  3897 ;; *************** function _init_md_uart *****************
  3898 ;; Defined at:
  3899 ;;		line 7 in file "uart.c"
  3900 ;; Parameters:    Size  Location     Type
  3901 ;;		None
  3902 ;; Auto vars:     Size  Location     Type
  3903 ;;		None
  3904 ;; Return value:  Size  Location     Type
  3905 ;;                  1    wreg      void 
  3906 ;; Registers used:
  3907 ;;		wreg, status,2
  3908 ;; Tracked objects:
  3909 ;;		On entry : 0/0
  3910 ;;		On exit  : 0/0
  3911 ;;		Unchanged: 0/0
  3912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3914 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3916 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3917 ;;Total ram usage:        0 bytes
  3918 ;; Hardware stack levels used:    1
  3919 ;; Hardware stack levels required when called:    3
  3920 ;; This function calls:
  3921 ;;		Nothing
  3922 ;; This function is called by:
  3923 ;;		_send_md_cfg_cmds_ok
  3924 ;;		_setup_data_ok
  3925 ;;		_send_over_socket_ok
  3926 ;;		_close_socket_ok
  3927 ;; This function uses a non-reentrant model
  3928 ;;
  3929                           
  3930                           	psect	text15
  3931  001CC8                     __ptext15:
  3932                           	opt stack 0
  3933  001CC8                     _init_md_uart:
  3934                           	opt stack 25
  3935                           
  3936                           ;uart.c: 9: BAUDCON1bits.BRG16 = 1;
  3937                           
  3938                           ;incstack = 0
  3939  001CC8  86B8               	bsf	4024,3,c	;volatile
  3940                           
  3941                           ;uart.c: 10: BAUDCON1bits.RCIDL = 1;
  3942  001CCA  8CB8               	bsf	4024,6,c	;volatile
  3943                           
  3944                           ;uart.c: 11: BAUDCONbits.CKTXP = 0;
  3945  001CCC  98B8               	bcf	4024,4,c	;volatile
  3946                           
  3947                           ;uart.c: 12: BAUDCONbits.WUE = 0;
  3948  001CCE  92B8               	bcf	4024,1,c	;volatile
  3949                           
  3950                           ;uart.c: 13: BAUDCONbits.ABDEN = 0;
  3951  001CD0  90B8               	bcf	4024,0,c	;volatile
  3952                           
  3953                           ;uart.c: 14: TXSTA1bits.BRGH = 1;
  3954  001CD2  84AC               	bsf	4012,2,c	;volatile
  3955                           
  3956                           ;uart.c: 15: TXSTA1bits.SYNC = 0;
  3957  001CD4  98AC               	bcf	4012,4,c	;volatile
  3958                           
  3959                           ;uart.c: 16: SPBRGH1 = 0;
  3960  001CD6  0E00               	movlw	0
  3961  001CD8  6EB0               	movwf	4016,c	;volatile
  3962                           
  3963                           ;uart.c: 17: SPBRG1 = 16;
  3964  001CDA  0E10               	movlw	16
  3965  001CDC  6EAF               	movwf	4015,c	;volatile
  3966                           
  3967                           ;uart.c: 19: RC1STAbits.SPEN = 1;
  3968  001CDE  8EAB               	bsf	4011,7,c	;volatile
  3969                           
  3970                           ;uart.c: 20: TRISCbits.TRISC7 = 1;
  3971  001CE0  8E94               	bsf	3988,7,c	;volatile
  3972                           
  3973                           ;uart.c: 21: TRISCbits.TRISC6 = 0;
  3974  001CE2  9C94               	bcf	3988,6,c	;volatile
  3975                           
  3976                           ;uart.c: 24: RCSTA1bits.CREN = 1;
  3977  001CE4  88AB               	bsf	4011,4,c	;volatile
  3978                           
  3979                           ;uart.c: 25: TXSTA1bits.TXEN = 1;
  3980  001CE6  8AAC               	bsf	4012,5,c	;volatile
  3981                           
  3982                           ;uart.c: 33: PIR1bits.RC1IF = 0;
  3983  001CE8  9A9E               	bcf	3998,5,c	;volatile
  3984  001CEA  0012               	return		;funcret
  3985  001CEC                     __end_of_init_md_uart:
  3986                           	opt stack 0
  3987                           tblptru	equ	0xFF8
  3988                           tblptrh	equ	0xFF7
  3989                           tblptrl	equ	0xFF6
  3990                           tablat	equ	0xFF5
  3991                           prodh	equ	0xFF4
  3992                           prodl	equ	0xFF3
  3993                           intcon	equ	0xFF2
  3994                           postinc0	equ	0xFEE
  3995                           wreg	equ	0xFE8
  3996                           indf1	equ	0xFE7
  3997                           postdec1	equ	0xFE5
  3998                           plusw1	equ	0xFE3
  3999                           fsr1h	equ	0xFE2
  4000                           fsr1l	equ	0xFE1
  4001                           indf2	equ	0xFDF
  4002                           postinc2	equ	0xFDE
  4003                           plusw2	equ	0xFDB
  4004                           fsr2h	equ	0xFDA
  4005                           fsr2l	equ	0xFD9
  4006                           status	equ	0xFD8
  4007                           
  4008 ;; *************** function _isr *****************
  4009 ;; Defined at:
  4010 ;;		line 14 in file "main.c"
  4011 ;; Parameters:    Size  Location     Type
  4012 ;;		None
  4013 ;; Auto vars:     Size  Location     Type
  4014 ;;		None
  4015 ;; Return value:  Size  Location     Type
  4016 ;;                  1    wreg      void 
  4017 ;; Registers used:
  4018 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4019 ;; Tracked objects:
  4020 ;;		On entry : 0/0
  4021 ;;		On exit  : 0/0
  4022 ;;		Unchanged: 0/0
  4023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4026 ;;      Temps:         20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4027 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4028 ;;Total ram usage:       20 bytes
  4029 ;; Hardware stack levels used:    1
  4030 ;; Hardware stack levels required when called:    2
  4031 ;; This function calls:
  4032 ;;		_check_mdstate_tmr3
  4033 ;;		_disable_md_rxint
  4034 ;;		i2_disable_tmr3
  4035 ;;		i2_reload_tmr3_10ms
  4036 ;; This function is called by:
  4037 ;;		Interrupt level 2
  4038 ;; This function uses a non-reentrant model
  4039 ;;
  4040                           
  4041                           	psect	intcode
  4042  000008                     __pintcode:
  4043                           	opt stack 0
  4044  000008                     _isr:
  4045                           	opt stack 24
  4046                           
  4047                           ;incstack = 0
  4048  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4049  00000A  CFFA F004          	movff	pclath,??_isr+2
  4050  00000E  CFFB F005          	movff	pclatu,??_isr+3
  4051  000012  CFE9 F006          	movff	fsr0l,??_isr+4
  4052  000016  CFEA F007          	movff	fsr0h,??_isr+5
  4053  00001A  CFE1 F008          	movff	fsr1l,??_isr+6
  4054  00001E  CFE2 F009          	movff	fsr1h,??_isr+7
  4055  000022  CFD9 F00A          	movff	fsr2l,??_isr+8
  4056  000026  CFDA F00B          	movff	fsr2h,??_isr+9
  4057  00002A  CFF3 F00C          	movff	prodl,??_isr+10
  4058  00002E  CFF4 F00D          	movff	prodh,??_isr+11
  4059  000032  CFF6 F00E          	movff	tblptrl,??_isr+12
  4060  000036  CFF7 F00F          	movff	tblptrh,??_isr+13
  4061  00003A  CFF8 F010          	movff	tblptru,??_isr+14
  4062  00003E  CFF5 F011          	movff	tablat,??_isr+15
  4063  000042  C048  F012         	movff	btemp,??_isr+16
  4064  000046  C049  F013         	movff	btemp+1,??_isr+17
  4065  00004A  C04A  F014         	movff	btemp+2,??_isr+18
  4066  00004E  C04B  F015         	movff	btemp+3,??_isr+19
  4067                           
  4068                           ;main.c: 16: if (RC1IF && PIE1bits.RCIE)
  4069  000052  BA9E               	btfsc	3998,5,c	;volatile
  4070  000054  AA9D               	btfss	3997,5,c	;volatile
  4071  000056  D0C1               	goto	i2l130
  4072                           
  4073                           ;main.c: 17: {
  4074                           ;main.c: 18: RC1IF = 0;
  4075  000058  9A9E               	bcf	3998,5,c	;volatile
  4076                           
  4077                           ;main.c: 19: currentChar = RC1REG;
  4078  00005A  CFAE F03D          	movff	4014,_currentChar	;volatile
  4079                           
  4080                           ;main.c: 20: mdRxBuf[endPtr++] = currentChar;
  4081  00005E  5044               	movf	_endPtr,w,c
  4082  000060  0D01               	mullw	1
  4083  000062  0E00               	movlw	low _mdRxBuf
  4084  000064  24F3               	addwf	prodl,w,c
  4085  000066  6ED9               	movwf	fsr2l,c
  4086  000068  0E02               	movlw	high _mdRxBuf
  4087  00006A  20F4               	addwfc	prodh,w,c
  4088  00006C  6EDA               	movwf	fsr2h,c
  4089  00006E  C03D  FFDF         	movff	_currentChar,indf2
  4090  000072  2A44               	incf	_endPtr,f,c
  4091                           
  4092                           ;main.c: 21: if (endPtr >= sizeof(mdRxBuf))
  4093  000074  0E9F               	movlw	159
  4094  000076  6444               	cpfsgt	_endPtr,c
  4095  000078  D001               	goto	i2l124
  4096                           
  4097                           ;main.c: 22: endPtr--;
  4098  00007A  0644               	decf	_endPtr,f,c
  4099  00007C                     i2l124:
  4100                           
  4101                           ;main.c: 23: if (endPtr > 2)
  4102  00007C  0E02               	movlw	2
  4103  00007E  6444               	cpfsgt	_endPtr,c
  4104  000080  D0AC               	goto	i2l130
  4105                           
  4106                           ;main.c: 24: {
  4107                           ;main.c: 26: if (mdRxBuf[(uint8_t)(endPtr - 2)] == 'O' && mdRxBuf[(uint8_t)(endPtr - 1)]
      +                           == 'K' && (mdRxBuf[endPtr] == '\r' || mdRxBuf[endPtr] == '\n'))
  4108  000082  C044  F002         	movff	_endPtr,??_isr
  4109  000086  0EFE               	movlw	254
  4110  000088  2602               	addwf	??_isr,f,c
  4111  00008A  5002               	movf	??_isr,w,c
  4112  00008C  0D01               	mullw	1
  4113  00008E  0E00               	movlw	low _mdRxBuf
  4114  000090  24F3               	addwf	prodl,w,c
  4115  000092  6ED9               	movwf	fsr2l,c
  4116  000094  0E02               	movlw	high _mdRxBuf
  4117  000096  20F4               	addwfc	prodh,w,c
  4118  000098  6EDA               	movwf	fsr2h,c
  4119  00009A  0E4F               	movlw	79
  4120  00009C  18DE               	xorwf	postinc2,w,c
  4121  00009E  A4D8               	btfss	status,2,c
  4122  0000A0  D03B               	goto	i2l126
  4123  0000A2  C044  F002         	movff	_endPtr,??_isr
  4124  0000A6  0EFF               	movlw	255
  4125  0000A8  2602               	addwf	??_isr,f,c
  4126  0000AA  5002               	movf	??_isr,w,c
  4127  0000AC  0D01               	mullw	1
  4128  0000AE  0E00               	movlw	low _mdRxBuf
  4129  0000B0  24F3               	addwf	prodl,w,c
  4130  0000B2  6ED9               	movwf	fsr2l,c
  4131  0000B4  0E02               	movlw	high _mdRxBuf
  4132  0000B6  20F4               	addwfc	prodh,w,c
  4133  0000B8  6EDA               	movwf	fsr2h,c
  4134  0000BA  0E4B               	movlw	75
  4135  0000BC  18DE               	xorwf	postinc2,w,c
  4136  0000BE  A4D8               	btfss	status,2,c
  4137  0000C0  D02B               	goto	i2l126
  4138  0000C2  5044               	movf	_endPtr,w,c
  4139  0000C4  0D01               	mullw	1
  4140  0000C6  0E00               	movlw	low _mdRxBuf
  4141  0000C8  24F3               	addwf	prodl,w,c
  4142  0000CA  6ED9               	movwf	fsr2l,c
  4143  0000CC  0E02               	movlw	high _mdRxBuf
  4144  0000CE  20F4               	addwfc	prodh,w,c
  4145  0000D0  6EDA               	movwf	fsr2h,c
  4146  0000D2  0E0D               	movlw	13
  4147  0000D4  18DE               	xorwf	postinc2,w,c
  4148  0000D6  B4D8               	btfsc	status,2,c
  4149  0000D8  D00C               	goto	i2u253_40
  4150  0000DA  5044               	movf	_endPtr,w,c
  4151  0000DC  0D01               	mullw	1
  4152  0000DE  0E00               	movlw	low _mdRxBuf
  4153  0000E0  24F3               	addwf	prodl,w,c
  4154  0000E2  6ED9               	movwf	fsr2l,c
  4155  0000E4  0E02               	movlw	high _mdRxBuf
  4156  0000E6  20F4               	addwfc	prodh,w,c
  4157  0000E8  6EDA               	movwf	fsr2h,c
  4158  0000EA  0E0A               	movlw	10
  4159  0000EC  18DE               	xorwf	postinc2,w,c
  4160  0000EE  A4D8               	btfss	status,2,c
  4161  0000F0  D013               	goto	i2l126
  4162  0000F2                     i2u253_40:
  4163                           
  4164                           ;main.c: 28: {
  4165                           ;main.c: 29: tmr3_cnt = 0;
  4166  0000F2  0E00               	movlw	0
  4167  0000F4  6E38               	movwf	_tmr3_cnt,c
  4168  0000F6  0E00               	movlw	0
  4169  0000F8  6E39               	movwf	_tmr3_cnt+1,c
  4170  0000FA  0E00               	movlw	0
  4171  0000FC  6E3A               	movwf	_tmr3_cnt+2,c
  4172  0000FE  0E00               	movlw	0
  4173  000100  6E3B               	movwf	_tmr3_cnt+3,c
  4174                           
  4175                           ;main.c: 30: disable_tmr3();
  4176  000102  EC9A  F00E         	call	i2_disable_tmr3	;wreg free
  4177                           
  4178                           ;main.c: 31: receivedOK = 1;
  4179  000106  0E01               	movlw	1
  4180  000108  6E43               	movwf	_receivedOK,c
  4181                           
  4182                           ;main.c: 32: receivedERR = 0;
  4183  00010A  0E00               	movlw	0
  4184  00010C  6E42               	movwf	_receivedERR,c
  4185                           
  4186                           ;main.c: 33: timedOut = 0;
  4187  00010E  0E00               	movlw	0
  4188  000110  6E40               	movwf	_timedOut,c
  4189                           
  4190                           ;main.c: 34: disable_md_rxint();
  4191  000112  ECC1  F00E         	call	_disable_md_rxint	;wreg free
  4192                           
  4193                           ;main.c: 35: }
  4194  000116  D061               	goto	i2l130
  4195  000118                     i2l126:
  4196                           
  4197                           ;main.c: 36: else if (endPtr >= 5 && mdRxBuf[(uint8_t)(endPtr - 4)] == 'E' && mdRxBuf[(u
      +                          int8_t)(endPtr - 3)] == 'R' && mdRxBuf[(uint8_t)(endPtr - 2)] == 'R' && mdRxBuf[(uint8_t
      +                          )(endPtr - 1)] == 'O' && mdRxBuf[endPtr] == 'R')
  4198  000118  0E04               	movlw	4
  4199  00011A  6444               	cpfsgt	_endPtr,c
  4200  00011C  D05E               	goto	i2l130
  4201  00011E  C044  F002         	movff	_endPtr,??_isr
  4202  000122  0EFC               	movlw	252
  4203  000124  2602               	addwf	??_isr,f,c
  4204  000126  5002               	movf	??_isr,w,c
  4205  000128  0D01               	mullw	1
  4206  00012A  0E00               	movlw	low _mdRxBuf
  4207  00012C  24F3               	addwf	prodl,w,c
  4208  00012E  6ED9               	movwf	fsr2l,c
  4209  000130  0E02               	movlw	high _mdRxBuf
  4210  000132  20F4               	addwfc	prodh,w,c
  4211  000134  6EDA               	movwf	fsr2h,c
  4212  000136  0E45               	movlw	69
  4213  000138  18DE               	xorwf	postinc2,w,c
  4214  00013A  A4D8               	btfss	status,2,c
  4215  00013C  D04E               	goto	i2l130
  4216  00013E  C044  F002         	movff	_endPtr,??_isr
  4217  000142  0EFD               	movlw	253
  4218  000144  2602               	addwf	??_isr,f,c
  4219  000146  5002               	movf	??_isr,w,c
  4220  000148  0D01               	mullw	1
  4221  00014A  0E00               	movlw	low _mdRxBuf
  4222  00014C  24F3               	addwf	prodl,w,c
  4223  00014E  6ED9               	movwf	fsr2l,c
  4224  000150  0E02               	movlw	high _mdRxBuf
  4225  000152  20F4               	addwfc	prodh,w,c
  4226  000154  6EDA               	movwf	fsr2h,c
  4227  000156  0E52               	movlw	82
  4228  000158  18DE               	xorwf	postinc2,w,c
  4229  00015A  A4D8               	btfss	status,2,c
  4230  00015C  D03E               	goto	i2l130
  4231  00015E  C044  F002         	movff	_endPtr,??_isr
  4232  000162  0EFE               	movlw	254
  4233  000164  2602               	addwf	??_isr,f,c
  4234  000166  5002               	movf	??_isr,w,c
  4235  000168  0D01               	mullw	1
  4236  00016A  0E00               	movlw	low _mdRxBuf
  4237  00016C  24F3               	addwf	prodl,w,c
  4238  00016E  6ED9               	movwf	fsr2l,c
  4239  000170  0E02               	movlw	high _mdRxBuf
  4240  000172  20F4               	addwfc	prodh,w,c
  4241  000174  6EDA               	movwf	fsr2h,c
  4242  000176  0E52               	movlw	82
  4243  000178  18DE               	xorwf	postinc2,w,c
  4244  00017A  A4D8               	btfss	status,2,c
  4245  00017C  D02E               	goto	i2l130
  4246  00017E  C044  F002         	movff	_endPtr,??_isr
  4247  000182  0EFF               	movlw	255
  4248  000184  2602               	addwf	??_isr,f,c
  4249  000186  5002               	movf	??_isr,w,c
  4250  000188  0D01               	mullw	1
  4251  00018A  0E00               	movlw	low _mdRxBuf
  4252  00018C  24F3               	addwf	prodl,w,c
  4253  00018E  6ED9               	movwf	fsr2l,c
  4254  000190  0E02               	movlw	high _mdRxBuf
  4255  000192  20F4               	addwfc	prodh,w,c
  4256  000194  6EDA               	movwf	fsr2h,c
  4257  000196  0E4F               	movlw	79
  4258  000198  18DE               	xorwf	postinc2,w,c
  4259  00019A  A4D8               	btfss	status,2,c
  4260  00019C  D01E               	goto	i2l130
  4261  00019E  5044               	movf	_endPtr,w,c
  4262  0001A0  0D01               	mullw	1
  4263  0001A2  0E00               	movlw	low _mdRxBuf
  4264  0001A4  24F3               	addwf	prodl,w,c
  4265  0001A6  6ED9               	movwf	fsr2l,c
  4266  0001A8  0E02               	movlw	high _mdRxBuf
  4267  0001AA  20F4               	addwfc	prodh,w,c
  4268  0001AC  6EDA               	movwf	fsr2h,c
  4269  0001AE  0E52               	movlw	82
  4270  0001B0  18DE               	xorwf	postinc2,w,c
  4271  0001B2  A4D8               	btfss	status,2,c
  4272  0001B4  D012               	goto	i2l130
  4273                           
  4274                           ;main.c: 39: {
  4275                           ;main.c: 40: tmr3_cnt = 0;
  4276  0001B6  0E00               	movlw	0
  4277  0001B8  6E38               	movwf	_tmr3_cnt,c
  4278  0001BA  0E00               	movlw	0
  4279  0001BC  6E39               	movwf	_tmr3_cnt+1,c
  4280  0001BE  0E00               	movlw	0
  4281  0001C0  6E3A               	movwf	_tmr3_cnt+2,c
  4282  0001C2  0E00               	movlw	0
  4283  0001C4  6E3B               	movwf	_tmr3_cnt+3,c
  4284                           
  4285                           ;main.c: 41: disable_tmr3();
  4286  0001C6  EC9A  F00E         	call	i2_disable_tmr3	;wreg free
  4287                           
  4288                           ;main.c: 42: receivedOK = 0;
  4289  0001CA  0E00               	movlw	0
  4290  0001CC  6E43               	movwf	_receivedOK,c
  4291                           
  4292                           ;main.c: 43: receivedERR = 1;
  4293  0001CE  0E01               	movlw	1
  4294  0001D0  6E42               	movwf	_receivedERR,c
  4295                           
  4296                           ;main.c: 44: timedOut = 0;
  4297  0001D2  0E00               	movlw	0
  4298  0001D4  6E40               	movwf	_timedOut,c
  4299                           
  4300                           ;main.c: 45: disable_md_rxint();
  4301  0001D6  ECC1  F00E         	call	_disable_md_rxint	;wreg free
  4302  0001DA                     i2l130:
  4303                           
  4304                           ;main.c: 46: }
  4305                           ;main.c: 47: }
  4306                           ;main.c: 48: }
  4307                           ;main.c: 61: if (TMR3IF)
  4308  0001DA  A2A1               	btfss	4001,1,c	;volatile
  4309  0001DC  D00B               	goto	i2l131
  4310                           
  4311                           ;main.c: 62: {
  4312                           ;main.c: 64: tmr3_cnt++;
  4313  0001DE  0E01               	movlw	1
  4314  0001E0  2638               	addwf	_tmr3_cnt,f,c
  4315  0001E2  0E00               	movlw	0
  4316  0001E4  2239               	addwfc	_tmr3_cnt+1,f,c
  4317  0001E6  223A               	addwfc	_tmr3_cnt+2,f,c
  4318  0001E8  223B               	addwfc	_tmr3_cnt+3,f,c
  4319                           
  4320                           ;main.c: 65: TMR3IF = 0;
  4321  0001EA  92A1               	bcf	4001,1,c	;volatile
  4322                           
  4323                           ;main.c: 66: reload_tmr3_10ms();
  4324  0001EC  EC8E  F00E         	call	i2_reload_tmr3_10ms	;wreg free
  4325                           
  4326                           ;main.c: 67: check_mdstate_tmr3();
  4327  0001F0  EC37  F00B         	call	_check_mdstate_tmr3	;wreg free
  4328  0001F4                     i2l131:
  4329  0001F4  C015  F04B         	movff	??_isr+19,btemp+3
  4330  0001F8  C014  F04A         	movff	??_isr+18,btemp+2
  4331  0001FC  C013  F049         	movff	??_isr+17,btemp+1
  4332  000200  C012  F048         	movff	??_isr+16,btemp
  4333  000204  C011  FFF5         	movff	??_isr+15,tablat
  4334  000208  C010  FFF8         	movff	??_isr+14,tblptru
  4335  00020C  C00F  FFF7         	movff	??_isr+13,tblptrh
  4336  000210  C00E  FFF6         	movff	??_isr+12,tblptrl
  4337  000214  C00D  FFF4         	movff	??_isr+11,prodh
  4338  000218  C00C  FFF3         	movff	??_isr+10,prodl
  4339  00021C  C00B  FFDA         	movff	??_isr+9,fsr2h
  4340  000220  C00A  FFD9         	movff	??_isr+8,fsr2l
  4341  000224  C009  FFE2         	movff	??_isr+7,fsr1h
  4342  000228  C008  FFE1         	movff	??_isr+6,fsr1l
  4343  00022C  C007  FFEA         	movff	??_isr+5,fsr0h
  4344  000230  C006  FFE9         	movff	??_isr+4,fsr0l
  4345  000234  C005  FFFB         	movff	??_isr+3,pclatu
  4346  000238  C004  FFFA         	movff	??_isr+2,pclath
  4347  00023C  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4348  00023E  0011               	retfie		f
  4349  000240                     __end_of_isr:
  4350                           	opt stack 0
  4351                           pclatu	equ	0xFFB
  4352                           pclath	equ	0xFFA
  4353                           tblptru	equ	0xFF8
  4354                           tblptrh	equ	0xFF7
  4355                           tblptrl	equ	0xFF6
  4356                           tablat	equ	0xFF5
  4357                           prodh	equ	0xFF4
  4358                           prodl	equ	0xFF3
  4359                           intcon	equ	0xFF2
  4360                           postinc0	equ	0xFEE
  4361                           fsr0h	equ	0xFEA
  4362                           fsr0l	equ	0xFE9
  4363                           wreg	equ	0xFE8
  4364                           indf1	equ	0xFE7
  4365                           postdec1	equ	0xFE5
  4366                           plusw1	equ	0xFE3
  4367                           fsr1h	equ	0xFE2
  4368                           fsr1l	equ	0xFE1
  4369                           indf2	equ	0xFDF
  4370                           postinc2	equ	0xFDE
  4371                           plusw2	equ	0xFDB
  4372                           fsr2h	equ	0xFDA
  4373                           fsr2l	equ	0xFD9
  4374                           status	equ	0xFD8
  4375                           
  4376 ;; *************** function i2_reload_tmr3_10ms *****************
  4377 ;; Defined at:
  4378 ;;		line 265 in file "main.c"
  4379 ;; Parameters:    Size  Location     Type
  4380 ;;		None
  4381 ;; Auto vars:     Size  Location     Type
  4382 ;;		None
  4383 ;; Return value:  Size  Location     Type
  4384 ;;                  1    wreg      void 
  4385 ;; Registers used:
  4386 ;;		wreg, status,2
  4387 ;; Tracked objects:
  4388 ;;		On entry : 0/0
  4389 ;;		On exit  : 0/0
  4390 ;;		Unchanged: 0/0
  4391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4395 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4396 ;;Total ram usage:        0 bytes
  4397 ;; Hardware stack levels used:    1
  4398 ;; This function calls:
  4399 ;;		Nothing
  4400 ;; This function is called by:
  4401 ;;		_isr
  4402 ;; This function uses a non-reentrant model
  4403 ;;
  4404                           
  4405                           	psect	text17
  4406  001D1C                     __ptext17:
  4407                           	opt stack 0
  4408  001D1C                     i2_reload_tmr3_10ms:
  4409                           	opt stack 25
  4410                           
  4411                           ;main.c: 267: INTCONbits.GIE = 0;
  4412                           
  4413                           ;incstack = 0
  4414  001D1C  9EF2               	bcf	intcon,7,c	;volatile
  4415                           
  4416                           ;main.c: 268: T3CON = 0b00010101;
  4417  001D1E  0E15               	movlw	21
  4418  001D20  6EB1               	movwf	4017,c	;volatile
  4419                           
  4420                           ;main.c: 270: PIE2bits.TMR3IE = 1;
  4421  001D22  82A0               	bsf	4000,1,c	;volatile
  4422                           
  4423                           ;main.c: 271: PIR2bits.TMR3IF = 0;
  4424  001D24  92A1               	bcf	4001,1,c	;volatile
  4425                           
  4426                           ;main.c: 272: INTCONbits.PEIE = 1;
  4427  001D26  8CF2               	bsf	intcon,6,c	;volatile
  4428                           
  4429                           ;main.c: 273: TMR3H = 0xD8;
  4430  001D28  0ED8               	movlw	216
  4431  001D2A  6EB3               	movwf	4019,c	;volatile
  4432                           
  4433                           ;main.c: 274: TMR3L = 0xEF;
  4434  001D2C  0EEF               	movlw	239
  4435  001D2E  6EB2               	movwf	4018,c	;volatile
  4436                           
  4437                           ;main.c: 275: INTCONbits.GIE = 1;
  4438  001D30  8EF2               	bsf	intcon,7,c	;volatile
  4439  001D32  0012               	return		;funcret
  4440  001D34                     __end_ofi2_reload_tmr3_10ms:
  4441                           	opt stack 0
  4442                           pclatu	equ	0xFFB
  4443                           pclath	equ	0xFFA
  4444                           tblptru	equ	0xFF8
  4445                           tblptrh	equ	0xFF7
  4446                           tblptrl	equ	0xFF6
  4447                           tablat	equ	0xFF5
  4448                           prodh	equ	0xFF4
  4449                           prodl	equ	0xFF3
  4450                           intcon	equ	0xFF2
  4451                           postinc0	equ	0xFEE
  4452                           fsr0h	equ	0xFEA
  4453                           fsr0l	equ	0xFE9
  4454                           wreg	equ	0xFE8
  4455                           indf1	equ	0xFE7
  4456                           postdec1	equ	0xFE5
  4457                           plusw1	equ	0xFE3
  4458                           fsr1h	equ	0xFE2
  4459                           fsr1l	equ	0xFE1
  4460                           indf2	equ	0xFDF
  4461                           postinc2	equ	0xFDE
  4462                           plusw2	equ	0xFDB
  4463                           fsr2h	equ	0xFDA
  4464                           fsr2l	equ	0xFD9
  4465                           status	equ	0xFD8
  4466                           
  4467 ;; *************** function _disable_md_rxint *****************
  4468 ;; Defined at:
  4469 ;;		line 48 in file "uart.c"
  4470 ;; Parameters:    Size  Location     Type
  4471 ;;		None
  4472 ;; Auto vars:     Size  Location     Type
  4473 ;;		None
  4474 ;; Return value:  Size  Location     Type
  4475 ;;                  1    wreg      void 
  4476 ;; Registers used:
  4477 ;;		None
  4478 ;; Tracked objects:
  4479 ;;		On entry : 0/0
  4480 ;;		On exit  : 0/0
  4481 ;;		Unchanged: 0/0
  4482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4486 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4487 ;;Total ram usage:        0 bytes
  4488 ;; Hardware stack levels used:    1
  4489 ;; This function calls:
  4490 ;;		Nothing
  4491 ;; This function is called by:
  4492 ;;		_isr
  4493 ;; This function uses a non-reentrant model
  4494 ;;
  4495                           
  4496                           	psect	text18
  4497  001D82                     __ptext18:
  4498                           	opt stack 0
  4499  001D82                     _disable_md_rxint:
  4500                           	opt stack 25
  4501                           
  4502                           ;uart.c: 50: CREN1 = 0;
  4503                           
  4504                           ;incstack = 0
  4505  001D82  98AB               	bcf	4011,4,c	;volatile
  4506                           
  4507                           ;uart.c: 51: GIE = 0;
  4508  001D84  9EF2               	bcf	intcon,7,c	;volatile
  4509                           
  4510                           ;uart.c: 52: PIE1bits.RC1IE = 0;
  4511  001D86  9A9D               	bcf	3997,5,c	;volatile
  4512                           
  4513                           ;uart.c: 53: GIE = 1;
  4514  001D88  8EF2               	bsf	intcon,7,c	;volatile
  4515  001D8A  0012               	return		;funcret
  4516  001D8C                     __end_of_disable_md_rxint:
  4517                           	opt stack 0
  4518                           pclatu	equ	0xFFB
  4519                           pclath	equ	0xFFA
  4520                           tblptru	equ	0xFF8
  4521                           tblptrh	equ	0xFF7
  4522                           tblptrl	equ	0xFF6
  4523                           tablat	equ	0xFF5
  4524                           prodh	equ	0xFF4
  4525                           prodl	equ	0xFF3
  4526                           intcon	equ	0xFF2
  4527                           postinc0	equ	0xFEE
  4528                           fsr0h	equ	0xFEA
  4529                           fsr0l	equ	0xFE9
  4530                           wreg	equ	0xFE8
  4531                           indf1	equ	0xFE7
  4532                           postdec1	equ	0xFE5
  4533                           plusw1	equ	0xFE3
  4534                           fsr1h	equ	0xFE2
  4535                           fsr1l	equ	0xFE1
  4536                           indf2	equ	0xFDF
  4537                           postinc2	equ	0xFDE
  4538                           plusw2	equ	0xFDB
  4539                           fsr2h	equ	0xFDA
  4540                           fsr2l	equ	0xFD9
  4541                           status	equ	0xFD8
  4542                           
  4543 ;; *************** function _check_mdstate_tmr3 *****************
  4544 ;; Defined at:
  4545 ;;		line 287 in file "main.c"
  4546 ;; Parameters:    Size  Location     Type
  4547 ;;		None
  4548 ;; Auto vars:     Size  Location     Type
  4549 ;;		None
  4550 ;; Return value:  Size  Location     Type
  4551 ;;                  1    wreg      void 
  4552 ;; Registers used:
  4553 ;;		wreg, status,2, status,0, cstack
  4554 ;; Tracked objects:
  4555 ;;		On entry : 0/0
  4556 ;;		On exit  : 0/0
  4557 ;;		Unchanged: 0/0
  4558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4560 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4561 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4562 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4563 ;;Total ram usage:        1 bytes
  4564 ;; Hardware stack levels used:    1
  4565 ;; Hardware stack levels required when called:    1
  4566 ;; This function calls:
  4567 ;;		i2_disable_tmr3
  4568 ;; This function is called by:
  4569 ;;		_isr
  4570 ;; This function uses a non-reentrant model
  4571 ;;
  4572                           
  4573                           	psect	text19
  4574  00166E                     __ptext19:
  4575                           	opt stack 0
  4576  00166E                     _check_mdstate_tmr3:
  4577                           	opt stack 24
  4578                           
  4579                           ;main.c: 289: switch (md_state)
  4580                           
  4581                           ;incstack = 0
  4582  00166E  D0A0               	goto	i2l177
  4583  001670                     
  4584                           ;main.c: 292: PORTCbits.RC4 = (bool)(tmr3_cnt % 2);
  4585  001670  C038  F001         	movff	_tmr3_cnt,??_check_mdstate_tmr3
  4586  001674  0E01               	movlw	1
  4587  001676  1601               	andwf	??_check_mdstate_tmr3,f,c
  4588  001678  3A01               	swapf	??_check_mdstate_tmr3,f,c
  4589  00167A  5082               	movf	3970,w,c	;volatile
  4590  00167C  1801               	xorwf	??_check_mdstate_tmr3,w,c
  4591  00167E  0BEF               	andlw	-17
  4592  001680  1801               	xorwf	??_check_mdstate_tmr3,w,c
  4593  001682  6E82               	movwf	3970,c	;volatile
  4594                           
  4595                           ;main.c: 293: if (tmr3_cnt >= (100*45))
  4596  001684  503B               	movf	_tmr3_cnt+3,w,c
  4597  001686  103A               	iorwf	_tmr3_cnt+2,w,c
  4598  001688  E106               	bnz	i2u236_40
  4599  00168A  0E94               	movlw	148
  4600  00168C  5C38               	subwf	_tmr3_cnt,w,c
  4601  00168E  0E11               	movlw	17
  4602  001690  5839               	subwfb	_tmr3_cnt+1,w,c
  4603  001692  A0D8               	btfss	status,0,c
  4604  001694  0012               	return	
  4605  001696                     i2u236_40:
  4606                           
  4607                           ;main.c: 294: {
  4608                           ;main.c: 295: disable_tmr3();
  4609  001696  EC9A  F00E         	call	i2_disable_tmr3	;wreg free
  4610                           
  4611                           ;main.c: 296: tmr3_cnt = 0;
  4612  00169A  0E00               	movlw	0
  4613  00169C  6E38               	movwf	_tmr3_cnt,c
  4614  00169E  0E00               	movlw	0
  4615  0016A0  6E39               	movwf	_tmr3_cnt+1,c
  4616  0016A2  0E00               	movlw	0
  4617  0016A4  6E3A               	movwf	_tmr3_cnt+2,c
  4618  0016A6  0E00               	movlw	0
  4619  0016A8  6E3B               	movwf	_tmr3_cnt+3,c
  4620                           
  4621                           ;main.c: 297: bootTimerIsDone = 1;
  4622  0016AA  0E01               	movlw	1
  4623  0016AC  0100               	movlb	0	; () banked
  4624  0016AE  6FF2               	movwf	_bootTimerIsDone& (0+255),b
  4625                           
  4626                           ; BSR set to: 0
  4627                           ;main.c: 298: }
  4628                           ;main.c: 299: break;
  4629  0016B0  0012               	return	
  4630  0016B2                     
  4631                           ;main.c: 301: if (tmr3_cnt >= (100*1))
  4632                           
  4633                           ; BSR set to: 0
  4634  0016B2  503B               	movf	_tmr3_cnt+3,w,c
  4635  0016B4  103A               	iorwf	_tmr3_cnt+2,w,c
  4636  0016B6  1039               	iorwf	_tmr3_cnt+1,w,c
  4637  0016B8  E104               	bnz	i2u237_40
  4638  0016BA  0E64               	movlw	100
  4639  0016BC  5C38               	subwf	_tmr3_cnt,w,c
  4640  0016BE  A0D8               	btfss	status,0,c
  4641  0016C0  0012               	return	
  4642  0016C2                     i2u237_40:
  4643                           
  4644                           ;main.c: 302: {
  4645                           ;main.c: 303: disable_tmr3();
  4646  0016C2  EC9A  F00E         	call	i2_disable_tmr3	;wreg free
  4647                           
  4648                           ;main.c: 304: tmr3_cnt = 0;
  4649  0016C6  0E00               	movlw	0
  4650  0016C8  6E38               	movwf	_tmr3_cnt,c
  4651  0016CA  0E00               	movlw	0
  4652  0016CC  6E39               	movwf	_tmr3_cnt+1,c
  4653  0016CE  0E00               	movlw	0
  4654  0016D0  6E3A               	movwf	_tmr3_cnt+2,c
  4655  0016D2  0E00               	movlw	0
  4656  0016D4  6E3B               	movwf	_tmr3_cnt+3,c
  4657                           
  4658                           ;main.c: 305: receivedOK = 0;
  4659  0016D6  0E00               	movlw	0
  4660  0016D8  6E43               	movwf	_receivedOK,c
  4661                           
  4662                           ;main.c: 306: receivedERR = 0;
  4663  0016DA  0E00               	movlw	0
  4664  0016DC  6E42               	movwf	_receivedERR,c
  4665                           
  4666                           ;main.c: 307: timedOut = 1;
  4667  0016DE  0E01               	movlw	1
  4668  0016E0  6E40               	movwf	_timedOut,c
  4669                           
  4670                           ;main.c: 308: }
  4671                           ;main.c: 309: break;
  4672  0016E2  0012               	return	
  4673  0016E4                     
  4674                           ;main.c: 311: if (tmr3_cnt >= (100*1))
  4675  0016E4  503B               	movf	_tmr3_cnt+3,w,c
  4676  0016E6  103A               	iorwf	_tmr3_cnt+2,w,c
  4677  0016E8  1039               	iorwf	_tmr3_cnt+1,w,c
  4678  0016EA  E104               	bnz	i2u238_40
  4679  0016EC  0E64               	movlw	100
  4680  0016EE  5C38               	subwf	_tmr3_cnt,w,c
  4681  0016F0  A0D8               	btfss	status,0,c
  4682  0016F2  0012               	return	
  4683  0016F4                     i2u238_40:
  4684                           
  4685                           ;main.c: 312: {
  4686                           ;main.c: 313: disable_tmr3();
  4687  0016F4  EC9A  F00E         	call	i2_disable_tmr3	;wreg free
  4688                           
  4689                           ;main.c: 314: tmr3_cnt = 0;
  4690  0016F8  0E00               	movlw	0
  4691  0016FA  6E38               	movwf	_tmr3_cnt,c
  4692  0016FC  0E00               	movlw	0
  4693  0016FE  6E39               	movwf	_tmr3_cnt+1,c
  4694  001700  0E00               	movlw	0
  4695  001702  6E3A               	movwf	_tmr3_cnt+2,c
  4696  001704  0E00               	movlw	0
  4697  001706  6E3B               	movwf	_tmr3_cnt+3,c
  4698                           
  4699                           ;main.c: 315: receivedOK = 0;
  4700  001708  0E00               	movlw	0
  4701  00170A  6E43               	movwf	_receivedOK,c
  4702                           
  4703                           ;main.c: 316: receivedERR = 0;
  4704  00170C  0E00               	movlw	0
  4705  00170E  6E42               	movwf	_receivedERR,c
  4706                           
  4707                           ;main.c: 317: timedOut = 1;
  4708  001710  0E01               	movlw	1
  4709  001712  6E40               	movwf	_timedOut,c
  4710                           
  4711                           ;main.c: 318: }
  4712                           ;main.c: 319: break;
  4713  001714  0012               	return	
  4714  001716                     
  4715                           ;main.c: 321: if (tmr3_cnt >= (100*10))
  4716  001716  503B               	movf	_tmr3_cnt+3,w,c
  4717  001718  103A               	iorwf	_tmr3_cnt+2,w,c
  4718  00171A  E106               	bnz	i2u239_40
  4719  00171C  0EE8               	movlw	232
  4720  00171E  5C38               	subwf	_tmr3_cnt,w,c
  4721  001720  0E03               	movlw	3
  4722  001722  5839               	subwfb	_tmr3_cnt+1,w,c
  4723  001724  A0D8               	btfss	status,0,c
  4724  001726  0012               	return	
  4725  001728                     i2u239_40:
  4726                           
  4727                           ;main.c: 322: {
  4728                           ;main.c: 323: disable_tmr3();
  4729  001728  EC9A  F00E         	call	i2_disable_tmr3	;wreg free
  4730                           
  4731                           ;main.c: 324: tmr3_cnt = 0;
  4732  00172C  0E00               	movlw	0
  4733  00172E  6E38               	movwf	_tmr3_cnt,c
  4734  001730  0E00               	movlw	0
  4735  001732  6E39               	movwf	_tmr3_cnt+1,c
  4736  001734  0E00               	movlw	0
  4737  001736  6E3A               	movwf	_tmr3_cnt+2,c
  4738  001738  0E00               	movlw	0
  4739  00173A  6E3B               	movwf	_tmr3_cnt+3,c
  4740                           
  4741                           ;main.c: 325: receivedOK = 0;
  4742  00173C  0E00               	movlw	0
  4743  00173E  6E43               	movwf	_receivedOK,c
  4744                           
  4745                           ;main.c: 326: receivedERR = 0;
  4746  001740  0E00               	movlw	0
  4747  001742  6E42               	movwf	_receivedERR,c
  4748                           
  4749                           ;main.c: 327: timedOut = 1;
  4750  001744  0E01               	movlw	1
  4751  001746  6E40               	movwf	_timedOut,c
  4752                           
  4753                           ;main.c: 328: }
  4754                           ;main.c: 329: break;
  4755  001748  0012               	return	
  4756  00174A                     
  4757                           ;main.c: 331: if (tmr3_cnt >= (100*10))
  4758  00174A  503B               	movf	_tmr3_cnt+3,w,c
  4759  00174C  103A               	iorwf	_tmr3_cnt+2,w,c
  4760  00174E  E106               	bnz	i2u240_40
  4761  001750  0EE8               	movlw	232
  4762  001752  5C38               	subwf	_tmr3_cnt,w,c
  4763  001754  0E03               	movlw	3
  4764  001756  5839               	subwfb	_tmr3_cnt+1,w,c
  4765  001758  A0D8               	btfss	status,0,c
  4766  00175A  0012               	return	
  4767  00175C                     i2u240_40:
  4768                           
  4769                           ;main.c: 332: {
  4770                           ;main.c: 333: disable_tmr3();
  4771  00175C  EC9A  F00E         	call	i2_disable_tmr3	;wreg free
  4772                           
  4773                           ;main.c: 334: tmr3_cnt = 0;
  4774  001760  0E00               	movlw	0
  4775  001762  6E38               	movwf	_tmr3_cnt,c
  4776  001764  0E00               	movlw	0
  4777  001766  6E39               	movwf	_tmr3_cnt+1,c
  4778  001768  0E00               	movlw	0
  4779  00176A  6E3A               	movwf	_tmr3_cnt+2,c
  4780  00176C  0E00               	movlw	0
  4781  00176E  6E3B               	movwf	_tmr3_cnt+3,c
  4782                           
  4783                           ;main.c: 335: receivedOK = 0;
  4784  001770  0E00               	movlw	0
  4785  001772  6E43               	movwf	_receivedOK,c
  4786                           
  4787                           ;main.c: 336: receivedERR = 0;
  4788  001774  0E00               	movlw	0
  4789  001776  6E42               	movwf	_receivedERR,c
  4790                           
  4791                           ;main.c: 337: timedOut = 1;
  4792  001778  0E01               	movlw	1
  4793  00177A  6E40               	movwf	_timedOut,c
  4794                           
  4795                           ;main.c: 338: }
  4796                           ;main.c: 339: break;
  4797  00177C  0012               	return	
  4798  00177E                     
  4799                           ;main.c: 341: if (tmr3_cnt >= (100*1))
  4800  00177E  503B               	movf	_tmr3_cnt+3,w,c
  4801  001780  103A               	iorwf	_tmr3_cnt+2,w,c
  4802  001782  1039               	iorwf	_tmr3_cnt+1,w,c
  4803  001784  E104               	bnz	i2u241_40
  4804  001786  0E64               	movlw	100
  4805  001788  5C38               	subwf	_tmr3_cnt,w,c
  4806  00178A  A0D8               	btfss	status,0,c
  4807  00178C  0012               	return	
  4808  00178E                     i2u241_40:
  4809                           
  4810                           ;main.c: 342: {
  4811                           ;main.c: 343: disable_tmr3();
  4812  00178E  EC9A  F00E         	call	i2_disable_tmr3	;wreg free
  4813                           
  4814                           ;main.c: 344: tmr3_cnt = 0;
  4815  001792  0E00               	movlw	0
  4816  001794  6E38               	movwf	_tmr3_cnt,c
  4817  001796  0E00               	movlw	0
  4818  001798  6E39               	movwf	_tmr3_cnt+1,c
  4819  00179A  0E00               	movlw	0
  4820  00179C  6E3A               	movwf	_tmr3_cnt+2,c
  4821  00179E  0E00               	movlw	0
  4822  0017A0  6E3B               	movwf	_tmr3_cnt+3,c
  4823                           
  4824                           ;main.c: 345: receivedOK = 0;
  4825  0017A2  0E00               	movlw	0
  4826  0017A4  6E43               	movwf	_receivedOK,c
  4827                           
  4828                           ;main.c: 346: receivedERR = 0;
  4829  0017A6  0E00               	movlw	0
  4830  0017A8  6E42               	movwf	_receivedERR,c
  4831                           
  4832                           ;main.c: 347: timedOut = 1;
  4833  0017AA  0E01               	movlw	1
  4834  0017AC  6E40               	movwf	_timedOut,c
  4835                           
  4836                           ;main.c: 350: }
  4837                           
  4838                           ;main.c: 348: }
  4839                           ;main.c: 349: break;
  4840  0017AE  0012               	return	
  4841  0017B0                     i2l177:
  4842  0017B0  503F               	movf	_md_state,w,c
  4843                           
  4844                           ; Switch size 1, requested type "space"
  4845                           ; Number of cases is 6, Range of values is 1 to 6
  4846                           ; switch strategies available:
  4847                           ; Name         Instructions Cycles
  4848                           ; simple_byte           19    10 (average)
  4849                           ;	Chosen strategy is simple_byte
  4850  0017B2  0A01               	xorlw	1	; case 1
  4851  0017B4  B4D8               	btfsc	status,2,c
  4852  0017B6  D75C               	goto	i2l178
  4853  0017B8  0A03               	xorlw	3	; case 2
  4854  0017BA  B4D8               	btfsc	status,2,c
  4855  0017BC  D77A               	goto	i2l181
  4856  0017BE  0A01               	xorlw	1	; case 3
  4857  0017C0  B4D8               	btfsc	status,2,c
  4858  0017C2  D790               	goto	i2l183
  4859  0017C4  0A07               	xorlw	7	; case 4
  4860  0017C6  B4D8               	btfsc	status,2,c
  4861  0017C8  D7A6               	goto	i2l185
  4862  0017CA  0A01               	xorlw	1	; case 5
  4863  0017CC  B4D8               	btfsc	status,2,c
  4864  0017CE  D7BD               	goto	i2l187
  4865  0017D0  0A03               	xorlw	3	; case 6
  4866  0017D2  A4D8               	btfss	status,2,c
  4867  0017D4  0012               	return	
  4868  0017D6  D7D3               	goto	i2l189
  4869  0017D8                     __end_of_check_mdstate_tmr3:
  4870                           	opt stack 0
  4871                           pclatu	equ	0xFFB
  4872                           pclath	equ	0xFFA
  4873                           tblptru	equ	0xFF8
  4874                           tblptrh	equ	0xFF7
  4875                           tblptrl	equ	0xFF6
  4876                           tablat	equ	0xFF5
  4877                           prodh	equ	0xFF4
  4878                           prodl	equ	0xFF3
  4879                           intcon	equ	0xFF2
  4880                           postinc0	equ	0xFEE
  4881                           fsr0h	equ	0xFEA
  4882                           fsr0l	equ	0xFE9
  4883                           wreg	equ	0xFE8
  4884                           indf1	equ	0xFE7
  4885                           postdec1	equ	0xFE5
  4886                           plusw1	equ	0xFE3
  4887                           fsr1h	equ	0xFE2
  4888                           fsr1l	equ	0xFE1
  4889                           indf2	equ	0xFDF
  4890                           postinc2	equ	0xFDE
  4891                           plusw2	equ	0xFDB
  4892                           fsr2h	equ	0xFDA
  4893                           fsr2l	equ	0xFD9
  4894                           status	equ	0xFD8
  4895                           
  4896 ;; *************** function i2_disable_tmr3 *****************
  4897 ;; Defined at:
  4898 ;;		line 278 in file "main.c"
  4899 ;; Parameters:    Size  Location     Type
  4900 ;;		None
  4901 ;; Auto vars:     Size  Location     Type
  4902 ;;		None
  4903 ;; Return value:  Size  Location     Type
  4904 ;;                  1    wreg      void 
  4905 ;; Registers used:
  4906 ;;		wreg, status,2
  4907 ;; Tracked objects:
  4908 ;;		On entry : 0/0
  4909 ;;		On exit  : 0/0
  4910 ;;		Unchanged: 0/0
  4911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4915 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4916 ;;Total ram usage:        0 bytes
  4917 ;; Hardware stack levels used:    1
  4918 ;; This function calls:
  4919 ;;		Nothing
  4920 ;; This function is called by:
  4921 ;;		_isr
  4922 ;;		_check_mdstate_tmr3
  4923 ;; This function uses a non-reentrant model
  4924 ;;
  4925                           
  4926                           	psect	text20
  4927  001D34                     __ptext20:
  4928                           	opt stack 0
  4929  001D34                     i2_disable_tmr3:
  4930                           	opt stack 25
  4931                           
  4932                           ;main.c: 280: tmr3_cnt = 0;
  4933                           
  4934                           ;incstack = 0
  4935  001D34  0E00               	movlw	0
  4936  001D36  6E38               	movwf	_tmr3_cnt,c
  4937  001D38  0E00               	movlw	0
  4938  001D3A  6E39               	movwf	_tmr3_cnt+1,c
  4939  001D3C  0E00               	movlw	0
  4940  001D3E  6E3A               	movwf	_tmr3_cnt+2,c
  4941  001D40  0E00               	movlw	0
  4942  001D42  6E3B               	movwf	_tmr3_cnt+3,c
  4943                           
  4944                           ;main.c: 281: T3CONbits.TMR3ON = 0;
  4945  001D44  90B1               	bcf	4017,0,c	;volatile
  4946                           
  4947                           ;main.c: 282: PIE2bits.TMR3IE = 0;
  4948  001D46  92A0               	bcf	4000,1,c	;volatile
  4949                           
  4950                           ;main.c: 283: PIR2bits.TMR3IF = 0;
  4951  001D48  92A1               	bcf	4001,1,c	;volatile
  4952  001D4A  0012               	return		;funcret
  4953  001D4C                     __end_ofi2_disable_tmr3:
  4954                           	opt stack 0
  4955                           pclatu	equ	0xFFB
  4956                           pclath	equ	0xFFA
  4957                           tblptru	equ	0xFF8
  4958                           tblptrh	equ	0xFF7
  4959                           tblptrl	equ	0xFF6
  4960                           tablat	equ	0xFF5
  4961                           prodh	equ	0xFF4
  4962                           prodl	equ	0xFF3
  4963                           intcon	equ	0xFF2
  4964                           postinc0	equ	0xFEE
  4965                           fsr0h	equ	0xFEA
  4966                           fsr0l	equ	0xFE9
  4967                           wreg	equ	0xFE8
  4968                           indf1	equ	0xFE7
  4969                           postdec1	equ	0xFE5
  4970                           plusw1	equ	0xFE3
  4971                           fsr1h	equ	0xFE2
  4972                           fsr1l	equ	0xFE1
  4973                           indf2	equ	0xFDF
  4974                           postinc2	equ	0xFDE
  4975                           plusw2	equ	0xFDB
  4976                           fsr2h	equ	0xFDA
  4977                           fsr2l	equ	0xFD9
  4978                           status	equ	0xFD8
  4979                           pclatu	equ	0xFFB
  4980                           pclath	equ	0xFFA
  4981                           tblptru	equ	0xFF8
  4982                           tblptrh	equ	0xFF7
  4983                           tblptrl	equ	0xFF6
  4984                           tablat	equ	0xFF5
  4985                           prodh	equ	0xFF4
  4986                           prodl	equ	0xFF3
  4987                           intcon	equ	0xFF2
  4988                           postinc0	equ	0xFEE
  4989                           fsr0h	equ	0xFEA
  4990                           fsr0l	equ	0xFE9
  4991                           wreg	equ	0xFE8
  4992                           indf1	equ	0xFE7
  4993                           postdec1	equ	0xFE5
  4994                           plusw1	equ	0xFE3
  4995                           fsr1h	equ	0xFE2
  4996                           fsr1l	equ	0xFE1
  4997                           indf2	equ	0xFDF
  4998                           postinc2	equ	0xFDE
  4999                           plusw2	equ	0xFDB
  5000                           fsr2h	equ	0xFDA
  5001                           fsr2l	equ	0xFD9
  5002                           status	equ	0xFD8
  5003                           
  5004                           	psect	rparam
  5005  0000                     pclatu	equ	0xFFB
  5006                           pclath	equ	0xFFA
  5007                           tblptru	equ	0xFF8
  5008                           tblptrh	equ	0xFF7
  5009                           tblptrl	equ	0xFF6
  5010                           tablat	equ	0xFF5
  5011                           prodh	equ	0xFF4
  5012                           prodl	equ	0xFF3
  5013                           intcon	equ	0xFF2
  5014                           postinc0	equ	0xFEE
  5015                           fsr0h	equ	0xFEA
  5016                           fsr0l	equ	0xFE9
  5017                           wreg	equ	0xFE8
  5018                           indf1	equ	0xFE7
  5019                           postdec1	equ	0xFE5
  5020                           plusw1	equ	0xFE3
  5021                           fsr1h	equ	0xFE2
  5022                           fsr1l	equ	0xFE1
  5023                           indf2	equ	0xFDF
  5024                           postinc2	equ	0xFDE
  5025                           plusw2	equ	0xFDB
  5026                           fsr2h	equ	0xFDA
  5027                           fsr2l	equ	0xFD9
  5028                           status	equ	0xFD8
  5029                           
  5030                           	psect	temp
  5031  000048                     btemp:
  5032                           	opt stack 0
  5033  000048                     	ds	1
  5034  0000                     int$flags	set	btemp
  5035  0000                     wtemp6	set	btemp+1
  5036                           pclatu	equ	0xFFB
  5037                           pclath	equ	0xFFA
  5038                           tblptru	equ	0xFF8
  5039                           tblptrh	equ	0xFF7
  5040                           tblptrl	equ	0xFF6
  5041                           tablat	equ	0xFF5
  5042                           prodh	equ	0xFF4
  5043                           prodl	equ	0xFF3
  5044                           intcon	equ	0xFF2
  5045                           postinc0	equ	0xFEE
  5046                           fsr0h	equ	0xFEA
  5047                           fsr0l	equ	0xFE9
  5048                           wreg	equ	0xFE8
  5049                           indf1	equ	0xFE7
  5050                           postdec1	equ	0xFE5
  5051                           plusw1	equ	0xFE3
  5052                           fsr1h	equ	0xFE2
  5053                           fsr1l	equ	0xFE1
  5054                           indf2	equ	0xFDF
  5055                           postinc2	equ	0xFDE
  5056                           plusw2	equ	0xFDB
  5057                           fsr2h	equ	0xFDA
  5058                           fsr2l	equ	0xFD9
  5059                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    111
    Data        219
    BSS         251
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     36      71
    BANK0           160    132     159
    BANK1           256      0     248
    BANK2           256      0     160
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    md_uart_write_str_ok@data	PTR unsigned char  size(2) Largest target is 47
		 -> close_socket_ok@deactivatePDP(BANK0[15]), close_socket_ok@closeSocket(BANK0[10]), send_over_socket_ok@terminateData(BANK0[1]), send_over_socket_ok@msg(BANK0[8]), 
		 -> send_over_socket_ok@srecv(BANK0[16]), send_over_socket_ok@ssend(BANK0[13]), send_over_socket_ok@openConnection(BANK0[44]), setup_data_ok@activatePDP(BANK0[15]), 
		 -> setup_data_ok@cfgSocket(BANK0[25]), setup_data_ok@setApn(BANK0[47]), send_md_cfg_cmds_ok@csq(BANK0[9]), send_md_cfg_cmds_ok@gprs(BANK0[11]), 
		 -> send_md_cfg_cmds_ok@cereg(BANK0[12]), send_md_cfg_cmds_ok@creg(BANK0[11]), send_md_cfg_cmds_ok@cpin(BANK0[11]), send_md_cfg_cmds_ok@queryVersion(BANK0[10]), 
		 -> send_md_cfg_cmds_ok@ledpattern(BANK0[12]), send_md_cfg_cmds_ok@ledCfg(BANK0[16]), send_md_cfg_cmds_ok@baud(BANK0[16]), send_md_cfg_cmds_ok@cmee(BANK0[12]), 
		 -> send_md_cfg_cmds_ok@ate(BANK0[7]), send_md_cfg_cmds_ok@at(BANK0[5]), 


Critical Paths under _main in COMRAM

    _check_modem_state->_send_over_socket_ok
    _setup_data_ok->_md_uart_write_str_ok
    _send_over_socket_ok->_md_uart_write_str_ok
    _send_md_cfg_cmds_ok->_md_uart_write_str_ok
    _close_socket_ok->_md_uart_write_str_ok
    _md_uart_write_str_ok->_md_uart_send

Critical Paths under _isr in COMRAM

    _isr->_check_mdstate_tmr3

Critical Paths under _main in BANK0

    _check_modem_state->_send_md_cfg_cmds_ok

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   36244
                                             35 COMRAM     1     1      0
                  _check_modem_state
                           _init_pic
           _start_modem_send_process
 ---------------------------------------------------------------------------------
 (1) _init_pic                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _check_modem_state                                    0     0      0   36198
                    _close_socket_ok
                _send_md_cfg_cmds_ok
                _send_over_socket_ok
                      _setup_data_ok
 ---------------------------------------------------------------------------------
 (2) _setup_data_ok                                       87    87      0    8938
                                              0 BANK0     87    87      0
                       _init_md_uart
               _md_uart_write_str_ok
                  _terminate_md_uart
 ---------------------------------------------------------------------------------
 (2) _send_over_socket_ok                                 84    84      0    9018
                                             33 COMRAM     2     2      0
                                              0 BANK0     82    82      0
                       _init_md_uart
               _md_uart_write_str_ok
                  _terminate_md_uart
 ---------------------------------------------------------------------------------
 (2) _send_md_cfg_cmds_ok                                132   132      0    9344
                                              0 BANK0    132   132      0
                       _init_md_uart
               _md_uart_write_str_ok
                     _reset_AT_marks
                _start_md_boot_timer
           _start_modem_send_process
                  _terminate_md_uart
 ---------------------------------------------------------------------------------
 (1) _start_modem_send_process                             4     4      0      46
                                             21 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _start_md_boot_timer                                  0     0      0       0
                   _reload_tmr3_10ms
 ---------------------------------------------------------------------------------
 (3) _reset_AT_marks                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _close_socket_ok                                     25    25      0    8898
                                              0 BANK0     25    25      0
                       _init_md_uart
               _md_uart_write_str_ok
                  _terminate_md_uart
 ---------------------------------------------------------------------------------
 (3) _terminate_md_uart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _md_uart_write_str_ok                                11     6      5    8818
                                             22 COMRAM    11     6      5
                       _disable_tmr3
                       _md_uart_send
                   _reload_tmr3_10ms
 ---------------------------------------------------------------------------------
 (4) _reload_tmr3_10ms                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _md_uart_send                                         1     1      0      31
                                             21 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _disable_tmr3                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_md_uart                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 20    20      0       0
                                              1 COMRAM    20    20      0
                 _check_mdstate_tmr3
                   _disable_md_rxint
                     i2_disable_tmr3
                 i2_reload_tmr3_10ms
 ---------------------------------------------------------------------------------
 (6) i2_reload_tmr3_10ms                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _disable_md_rxint                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _check_mdstate_tmr3                                   1     1      0       0
                                              0 COMRAM     1     1      0
                     i2_disable_tmr3
 ---------------------------------------------------------------------------------
 (6) i2_disable_tmr3                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _check_modem_state
     _close_socket_ok
       _init_md_uart
       _md_uart_write_str_ok
         _disable_tmr3
         _md_uart_send
         _reload_tmr3_10ms
       _terminate_md_uart
     _send_md_cfg_cmds_ok
       _init_md_uart
       _md_uart_write_str_ok
         _disable_tmr3
         _md_uart_send
         _reload_tmr3_10ms
       _reset_AT_marks
       _start_md_boot_timer
         _reload_tmr3_10ms
       _start_modem_send_process
       _terminate_md_uart
     _send_over_socket_ok
       _init_md_uart
       _md_uart_write_str_ok
         _disable_tmr3
         _md_uart_send
         _reload_tmr3_10ms
       _terminate_md_uart
     _setup_data_ok
       _init_md_uart
       _md_uart_write_str_ok
         _disable_tmr3
         _md_uart_send
         _reload_tmr3_10ms
       _terminate_md_uart
   _init_pic
   _start_modem_send_process

 _isr (ROOT)
   _check_mdstate_tmr3
     i2_disable_tmr3
   _disable_md_rxint
   i2_disable_tmr3
   i2_reload_tmr3_10ms

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      A0       9       62.5%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      F8       7       96.9%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     84      9F       5       99.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     24      47       1       75.5%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     27E      12        0.0%
DATA                 0      0     27E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Jul 02 18:05:15 2018

                        ??_disable_tmr3 0016                             __CFG_CP0$ON 000000  
                           __CFG_CP1$ON 000000                             __CFG_CP2$ON 000000  
                           __CFG_CP3$ON 000000                             __CFG_CPB$ON 000000  
                      ?_close_socket_ok 0001                             __CFG_CPD$ON 000000  
      __end_ofsend_over_socket_ok@F6880 102D        __end_ofsend_over_socket_ok@F6882 1059  
      __end_ofsend_over_socket_ok@F6884 103D        __end_ofsend_over_socket_ok@F6886 106B  
                     ?_disable_md_rxint 0001                                     l310 1558  
                                   l302 14A6                                     l320 162E  
                                   l137 1CA6                                     l314 160E  
                                   l139 1CC2                                     l324 164A  
                                   l308 1610                                     l420 1C68  
                                   l325 166A                                     l430 1AD6  
                                   l416 1C5E                                     l432 1AE4  
                                   l417 1C38                                     l434 1AF4  
                                   l427 1B2C                                     l435 1AFE  
                                   l437 1B0C                                     l470 11D6  
                                   l287 141E                                     l471 1208  
                                   l439 1B10                                     l288 145E  
                                   l480 13AC                                     l472 123A  
                                   l289 142A                                     l481 13D6  
                                   l473 126C                                     l298 1498  
                                   l474 129E                                     l483 13F8  
                                   l475 12D0                                     l476 1302  
                                   l468 1172                                     l477 1334  
                                   l469 11A4                                     l493 1A94  
                                   l478 1366                                     l479 1398  
                                   _GIE 007F97                                     _isr 0008  
                    ??_disable_md_rxint 0001                                     prod 000FF3  
                                   wreg 000FE8                              _TXSTA1bits 000FAC  
                          __CFG_LVP$OFF 000000                                    l2661 1D6E  
                                  ?_isr 0001                                    u3011 107C  
                                  u3101 111E                                    u3021 108E  
                                  u3111 1130                                    u3031 10A0  
                                  u3121 1142                                    u3041 10B2  
                                  u3051 10C4                                    u3061 10D6  
                                  u3071 10E8                                    u3081 10FA  
                                  u3091 110C                                    u2710 1474  
                                  u3600 17FE                                    u2730 147E  
                                  u3610 1816                                    u3620 182E  
                                  u3630 1B62                                    u3551 1A40  
                                  u3640 1B7A                                    u3561 1A52  
                                  u2930 161C                                    u2850 1544  
                                  u3571 1A64                                    _PEIE 007F96  
                                  u2940 1622                                    u3717 1CB0  
                                  u2790 14B0                                    u3590 17E6  
                                  u3727 18AE                                    u3737 1C44  
                                  u2970 163C                         __end_of_VERSION 1070  
                                  _main 1CA2                                    fsr0h 000FEA  
                                  fsr1h 000FE2                                    fsr2h 000FDA  
                                  fsr0l 000FE9                                    indf1 000FE7  
                                  indf2 000FDF                                    fsr1l 000FE1  
                                  fsr2l 000FD9                                    btemp 0048  
                         __CFG_BORV$190 000000                                    prodh 000FF4  
                                  prodl 000FF3                                    start 0240  
                         __CFG_IESO$OFF 000000                            ___param_bank 000000  
          __size_of_start_md_boot_timer 0006                                   ??_isr 0002  
                          _BAUDCON1bits 000FB8                                   ?_main 0001  
                         ?_md_uart_send 0001                                   _CREN1 007D5C  
                                 _T0CON 000FD5                                   _T3CON 000FB1  
                                 _RC1IE 007CED                                   _RC1IF 007CF5  
                                 _T5CON 000F4E                                   i2l130 01DA  
                                 i2l131 01F4                                   i2l124 007C  
                                 i2l126 0118                                   i2l181 16B2  
                                 i2l183 16E4                                   i2l177 17B0  
                                 i2l185 1716                                   i2l178 1670  
                                 i2l187 174A                                   i2l189 177E  
                    setup_data_ok@F6871 0100                      setup_data_ok@F6873 012F  
                    setup_data_ok@F6875 0168        start_modem_send_process@newEvent 0001  
                                 _TMR0H 000FD7                                   _TMR0L 000FD6  
                                 _TMR3H 000FB3                                   _TMR3L 000FB2  
                                 _TMR5H 000F50                                   _TMR5L 000F4F  
                                 _TRMT1 007D61                __end_of_reload_tmr3_10ms 1D04  
                         __CFG_WRT0$OFF 000000                           __CFG_WRT1$OFF 000000  
                         __CFG_WRT2$OFF 000000                           __CFG_WRT3$OFF 000000  
                        __CFG_EBTR0$OFF 000000                          __CFG_FCMEN$OFF 000000  
                        __CFG_EBTR1$OFF 000000                          __CFG_EBTR2$OFF 000000  
                        __CFG_EBTR3$OFF 000000                           __CFG_WRTB$OFF 000000  
                         __CFG_WRTC$OFF 000000                           __CFG_WRTD$OFF 000000  
                       ??_setup_data_ok 0022                          __CFG_EBTRB$OFF 000000  
              setup_data_ok@activatePDP 00A8                      __CFG_MCLRE$INTMCLR 000000  
                                 pclath 000FFA                                   tablat 000FF5  
                                 plusw1 000FE3                                   plusw2 000FDB  
                                 status 000FD8              ??_start_modem_send_process 0016  
                                 wtemp6 0049                          __CFG_HFOFST$ON 000000  
               __size_of_reset_AT_marks 0034                         __initialization 1998  
                          __end_of_main 1CC8             __end_of_send_over_socket_ok 18DC  
                        ??_md_uart_send 0016                                  ??_main 0024  
                         __activetblptr 000002                    close_socket_ok@F6895 1059  
                  close_socket_ok@F6897 103D                       _terminate_md_uart 1D78  
           __end_of_send_md_cfg_cmds_ok 1400        send_over_socket_ok@terminateData 00B1  
                    ?_terminate_md_uart 0001                    __end_of_disable_tmr3 1D1C  
                                _ANSELA 000F38                                  _ANSELB 000F39  
                                _ANSELC 000F3A                   send_md_cfg_cmds_ok@at 00DF  
                                _RC1REG 000FAE                          __CFG_WDTEN$OFF 000000  
                         ?_init_md_uart 0001                                  _SPBRG1 000FAF  
                                _TMR0IF 007F92                                  _TMR3IF 007D09  
                                _TX1REG 000FAD                     ??_terminate_md_uart 0016  
                        __CFG_XINST$OFF 000000                          __CFG_STVREN$ON 000000  
                                _endPtr 0044                      i2_reload_tmr3_10ms 1D1C  
                      __end_of_init_pic 1C24           __size_of_md_uart_write_str_ok 026E  
                                clear_0 19FE                                  clear_1 1A0A  
                                clear_2 1A16                                  clear_3 1A22  
             __end_of_terminate_md_uart 1D82                     ?i2_reload_tmr3_10ms 0001  
                          __pdataCOMRAM 0025                     setup_data_ok@setApn 0060  
                          __mediumconst 0000                                  tblptrh 000FF7  
                                tblptrl 000FF6                                  tblptru 000FF8  
                        ??_init_md_uart 0016                              __accesstop 0060  
               __end_of__initialization 1A28                         __CFG_PBADEN$OFF 000000  
                  ??i2_reload_tmr3_10ms 0001                           ___rparam_used 000001  
                        __pcstackCOMRAM 0001                            __pidataBANK0 1D5F  
                          __pidataBANK1 18DC              close_socket_ok@closeSocket 006F  
            __end_of_check_mdstate_tmr3 17D8                       _check_modem_state 1AD4  
                    ?_check_modem_state 0001                     _start_md_boot_timer 1D8C  
                            __pbssBANK0 00E4                              __pbssBANK1 01BC  
                            __pbssBANK2 0200                         __CFG_PLLCFG$OFF 000000  
      __end_of_start_modem_send_process 1C6E               __size_of_disable_md_rxint 000A  
                  __end_of_md_uart_send 1D78                     ??_check_modem_state 0024  
                        _reset_AT_marks 1C6E                      __CFG_CCP2MX$PORTC1 000000  
             start_modem_send_process@i 0018                    ?_start_md_boot_timer 0001  
                    __CFG_CCP3MX$PORTB5 000000               __end_of_check_modem_state 1B54  
                send_md_cfg_cmds_ok@ate 00D8              __size_of_terminate_md_uart 000A  
                send_md_cfg_cmds_ok@csq 00CF                              _ledPattern 0047  
                          _alreadyAwake 003E                   __size_of_disable_tmr3 0018  
                     ?_reload_tmr3_10ms 0001                __size_of_close_socket_ok 006C  
                               _SPBRGH1 000FB0                      ??_reload_tmr3_10ms 0016  
                               _VERSION 106B                  __end_of_reset_AT_marks 1CA2  
                             ?_init_pic 0001                         __CFG_PWRTEN$OFF 000000  
            md_uart_write_str_ok@wantOk 001A                                 __Hparam 0000  
                               __Lparam 0000               md_uart_write_str_ok@index 001F  
                 ??_start_md_boot_timer 0016                send_md_cfg_cmds_ok@F6841 0158  
              send_md_cfg_cmds_ok@F6851 01A6                send_md_cfg_cmds_ok@F6843 0148  
              send_md_cfg_cmds_ok@F6835 00FA                send_md_cfg_cmds_ok@F6845 0183  
              send_md_cfg_cmds_ok@F6853 0177                send_md_cfg_cmds_ok@F6837 00F3  
              send_md_cfg_cmds_ok@F6855 019B                send_md_cfg_cmds_ok@F6839 018F  
              send_md_cfg_cmds_ok@F6847 0025                send_md_cfg_cmds_ok@F6849 01B1  
              send_md_cfg_cmds_ok@F6857 002F                            _disable_tmr3 1D04  
                          __psmallconst 1000                                 __pcinit 1998  
                               __ramtop 1000                    __end_of_init_md_uart 1CEC  
                               _mdRxBuf 0200                                 __ptext0 1CA2  
                               __ptext1 1BC0                                 __ptext2 1AD4  
                               __ptext3 1A36                                 __ptext4 17D8  
                               __ptext5 1072                                 __ptext6 1C24  
                               __ptext7 1D8C                                 __ptext8 1C6E  
                               __ptext9 1B54                 __size_ofi2_disable_tmr3 0018  
                       _ledPatternCount 0046                send_md_cfg_cmds_ok@cereg 0098  
                          __size_of_isr 0238                               _T3CONbits 000FB1  
                            _receivedOK 0043                                 _sentAT1 00F0  
                               _sentAT2 00EF                                 _sentAT3 00EE  
                               _sentAT4 00ED                                 _sentAT5 00EC  
                               _sentAT6 00EB                                 _sentAT7 00EA  
                               _sentAT8 00E9                                 _sentAT9 00E8  
                             _T5CONbits 000F4E               send_md_cfg_cmds_ok@ledCfg 0070  
                 __end_of_setup_data_ok 1AD4                    end_of_initialization 1A28  
                       ?_reset_AT_marks 0001                           __Lmediumconst 0000  
               md_uart_write_str_ok@pos 0021                              ??_init_pic 0016  
                               postdec1 000FE5                           _extendedTimer 00E4  
                               postinc0 000FEE                                 postinc2 000FDE  
     __size_of_start_modem_send_process 004A                               _PORTAbits 000F80  
                             _PORTBbits 000F81               ?_start_modem_send_process 0001  
                             _PORTCbits 000F82              __size_of_check_modem_state 0080  
          __size_of_send_over_socket_ok 0104                               _TRISAbits 000F92  
                             _TRISBbits 000F93                               _TRISCbits 000F94  
                 __size_of_md_uart_send 000C            __end_of_md_uart_write_str_ok 166E  
                     ??_close_socket_ok 0022                        _disable_md_rxint 1D82  
          __size_of_send_md_cfg_cmds_ok 038E                             _BAUDCONbits 000FB8  
md_uart_write_str_ok@waitToSendMoreData 001B                           __pidataCOMRAM 1D4C  
                          _md_uart_send 1D6C                     start_initialization 1998  
                           __end_of_isr 0240                send_over_socket_ok@F6880 1001  
              send_over_socket_ok@F6882 104C                send_over_socket_ok@F6884 102D  
              send_over_socket_ok@F6886 1063                      _check_mdstate_tmr3 166E  
           __size_ofi2_reload_tmr3_10ms 0018                     ?_check_mdstate_tmr3 0001  
         send_md_cfg_cmds_ok@ledpattern 008C                send_over_socket_ok@srecv 008C  
              send_over_socket_ok@ssend 009C                   __size_of_init_md_uart 0024  
                           __pdataBANK0 00F3                             __pdataBANK1 0100  
                        i2_disable_tmr3 1D34                             __pbssCOMRAM 0038  
                  ??_check_mdstate_tmr3 0001                           __pcstackBANK0 0060  
                          _init_md_uart 1CC8               __size_of_reload_tmr3_10ms 0018  
                     __size_of_init_pic 0064                               __pintcode 0008  
        md_uart_write_str_ok@numRetries 001E                         _bootTimerIsDone 00F2  
                __end_ofi2_disable_tmr3 1D4C                    _md_uart_write_str_ok 1400  
                      __CFG_PRICLKEN$ON 000000                             __smallconst 1000  
          close_socket_ok@deactivatePDP 0060       send_over_socket_ok@openConnection 0060  
                      ??_reset_AT_marks 0016                 send_md_cfg_cmds_ok@baud 0060  
               send_md_cfg_cmds_ok@cmee 0080                 send_md_cfg_cmds_ok@creg 00AF  
               send_md_cfg_cmds_ok@cpin 00A4                 send_md_cfg_cmds_ok@gprs 00BA  
                          _receivedRESP 0041                                _LATBbits 000F8A  
           __end_of_start_md_boot_timer 1D92                                _LATCbits 000F8B  
                              _PIE1bits 000F9D                                _PIE2bits 000FA0  
                              _PIE5bits 000F7D                     _send_over_socket_ok 17D8  
                              i2u240_40 175C                                i2u241_40 178E  
                              i2u236_40 1696                                i2u237_40 16C2  
                              i2u253_40 00F2                                i2u238_40 16F4  
                              i2u239_40 1728                                _PIR1bits 000F9E  
                              _PIR2bits 000FA1                                _PIR5bits 000F7E  
                      __CFG_WDTPS$32768 000000                         ?i2_disable_tmr3 0001  
                 ?_md_uart_write_str_ok 0017                            _referenceBuf 01BC  
              __end_of_disable_md_rxint 1D8C                     _send_md_cfg_cmds_ok 1072  
                  ?_send_over_socket_ok 0001                         _close_socket_ok 1B54  
                setup_data_ok@cfgSocket 008F                               copy_data0 19AC  
                             copy_data1 19CC                               copy_data2 19EC  
                  ?_send_md_cfg_cmds_ok 0001                                __Hrparam 0000  
                           _pdpIsActive 00F1                                __Lrparam 0000  
                    __CFG_BOREN$SBORDIS 000000                       __CFG_P2BMX$PORTB5 000000  
                __size_of_setup_data_ok 009E                   ??_send_over_socket_ok 0022  
                           _currentChar 003D         md_uart_write_str_ok@currentChar 0020  
                              __ptext10 1D78                                __ptext11 1400  
                              __ptext20 1D34                                __ptext12 1CEC  
                              __ptext13 1D6C                                __ptext14 1D04  
                              __ptext15 1CC8                                __ptext17 1D1C  
                              __ptext18 1D82                                __ptext19 166E  
                              _lastChar 003C                                _md_state 003F  
                 ??_send_md_cfg_cmds_ok 0022                           __size_of_main 0026  
                              _init_pic 1BC0                             _receivedERR 0042  
                              _sentAT10 00E7                                _sentAT11 00E6  
                              _sentAT12 00E5                        _reload_tmr3_10ms 1CEC  
                              _tmr3_cnt 0038                                _tmr5_cnt 0045  
                            _RC1STAbits 000FAB         send_md_cfg_cmds_ok@queryVersion 00C5  
                              _timedOut 0040                  ??_md_uart_write_str_ok 001C  
                              int$flags 0048                _start_modem_send_process 1C24  
               __end_of_close_socket_ok 1BC0                              _INTCONbits 000FF2  
                send_over_socket_ok@msg 00A9                md_uart_write_str_ok@data 0017  
              md_uart_write_str_ok@len1 0019                                intlevel2 0000  
                         _setup_data_ok 1A36              __end_ofi2_reload_tmr3_10ms 1D34  
                            _RCSTA1bits 000FAB                              _OSCCONbits 000FD3  
                      md_uart_send@data 0016                           ?_disable_tmr3 0001  
           __size_of_check_mdstate_tmr3 016A                       __CFG_T3CMX$PORTC0 000000  
                        ?_setup_data_ok 0001                       __CFG_FOSC$INTIO67 000000  
          __end_ofclose_socket_ok@F6895 1063            __end_ofclose_socket_ok@F6897 104C  
                      ??i2_disable_tmr3 0001  
