

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Jun 20 16:02:19 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F26K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    40                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    41                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    42  0000                     
    43                           ; Version 1.45
    44                           ; Generated 16/11/2017 GMT
    45                           ; 
    46                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC18F26K22 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     
    78                           	psect	idataCOMRAM
    79  001A7A                     __pidataCOMRAM:
    80                           	opt stack 0
    81                           
    82                           ;initializer for send_md_cfg_cmds_ok@F6827
    83  001A7A  41                 	db	65
    84  001A7B  54                 	db	84
    85  001A7C  2B                 	db	43
    86  001A7D  43                 	db	67
    87  001A7E  50                 	db	80
    88  001A7F  49                 	db	73
    89  001A80  4E                 	db	78
    90  001A81  3F                 	db	63
    91  001A82  0D                 	db	13
    92  001A83  0A                 	db	10
    93  001A84  00                 	db	0
    94                           
    95                           ;initializer for send_md_cfg_cmds_ok@F6825
    96  001A85  41                 	db	65
    97  001A86  54                 	db	84
    98  001A87  23                 	db	35
    99  001A88  43                 	db	67
   100  001A89  47                 	db	71
   101  001A8A  4D                 	db	77
   102  001A8B  52                 	db	82
   103  001A8C  0D                 	db	13
   104  001A8D  0A                 	db	10
   105  001A8E  00                 	db	0
   106                           
   107                           	psect	idataBANK0
   108  001A8F                     __pidataBANK0:
   109                           	opt stack 0
   110                           
   111                           ;initializer for send_md_cfg_cmds_ok@F6835
   112  001A8F  41                 	db	65
   113  001A90  54                 	db	84
   114  001A91  2B                 	db	43
   115  001A92  43                 	db	67
   116  001A93  53                 	db	83
   117  001A94  51                 	db	81
   118  001A95  0D                 	db	13
   119  001A96  0A                 	db	10
   120  001A97  00                 	db	0
   121                           
   122                           ;initializer for send_md_cfg_cmds_ok@F6815
   123  001A98  41                 	db	65
   124  001A99  54                 	db	84
   125  001A9A  45                 	db	69
   126  001A9B  31                 	db	49
   127  001A9C  0D                 	db	13
   128  001A9D  0A                 	db	10
   129  001A9E  00                 	db	0
   130                           
   131                           ;initializer for send_md_cfg_cmds_ok@F6813
   132  001A9F  41                 	db	65
   133  001AA0  54                 	db	84
   134  001AA1  0D                 	db	13
   135  001AA2  0A                 	db	10
   136  001AA3  00                 	db	0
   137                           
   138                           	psect	idataBANK1
   139  00169E                     __pidataBANK1:
   140                           	opt stack 0
   141                           
   142                           ;initializer for setup_data_ok@F6849
   143  00169E  41                 	db	65
   144  00169F  54                 	db	84
   145  0016A0  2B                 	db	43
   146  0016A1  43                 	db	67
   147  0016A2  47                 	db	71
   148  0016A3  44                 	db	68
   149  0016A4  43                 	db	67
   150  0016A5  4F                 	db	79
   151  0016A6  4E                 	db	78
   152  0016A7  54                 	db	84
   153  0016A8  3D                 	db	61
   154  0016A9  33                 	db	51
   155  0016AA  2C                 	db	44
   156  0016AB  22                 	db	34
   157  0016AC  49                 	db	73
   158  0016AD  50                 	db	80
   159  0016AE  56                 	db	86
   160  0016AF  34                 	db	52
   161  0016B0  56                 	db	86
   162  0016B1  36                 	db	54
   163  0016B2  22                 	db	34
   164  0016B3  2C                 	db	44
   165  0016B4  22                 	db	34
   166  0016B5  77                 	db	119
   167  0016B6  79                 	db	121
   168  0016B7  6C                 	db	108
   169  0016B8  65                 	db	101
   170  0016B9  73                 	db	115
   171  0016BA  6C                 	db	108
   172  0016BB  74                 	db	116
   173  0016BC  65                 	db	101
   174  0016BD  2E                 	db	46
   175  0016BE  67                 	db	103
   176  0016BF  77                 	db	119
   177  0016C0  37                 	db	55
   178  0016C1  2E                 	db	46
   179  0016C2  76                 	db	118
   180  0016C3  7A                 	db	122
   181  0016C4  77                 	db	119
   182  0016C5  65                 	db	101
   183  0016C6  6E                 	db	110
   184  0016C7  74                 	db	116
   185  0016C8  70                 	db	112
   186  0016C9  22                 	db	34
   187  0016CA  0D                 	db	13
   188  0016CB  0A                 	db	10
   189  0016CC  00                 	db	0
   190                           
   191                           ;initializer for setup_data_ok@F6851
   192  0016CD  41                 	db	65
   193  0016CE  54                 	db	84
   194  0016CF  23                 	db	35
   195  0016D0  53                 	db	83
   196  0016D1  43                 	db	67
   197  0016D2  46                 	db	70
   198  0016D3  47                 	db	71
   199  0016D4  45                 	db	69
   200  0016D5  58                 	db	88
   201  0016D6  54                 	db	84
   202  0016D7  3D                 	db	61
   203  0016D8  31                 	db	49
   204  0016D9  2C                 	db	44
   205  0016DA  31                 	db	49
   206  0016DB  2C                 	db	44
   207  0016DC  30                 	db	48
   208  0016DD  2C                 	db	44
   209  0016DE  30                 	db	48
   210  0016DF  2C                 	db	44
   211  0016E0  30                 	db	48
   212  0016E1  2C                 	db	44
   213  0016E2  30                 	db	48
   214  0016E3  0D                 	db	13
   215  0016E4  0A                 	db	10
   216  0016E5  00                 	db	0
   217                           
   218                           ;initializer for send_md_cfg_cmds_ok@F6821
   219  0016E6  41                 	db	65
   220  0016E7  54                 	db	84
   221  0016E8  23                 	db	35
   222  0016E9  47                 	db	71
   223  0016EA  50                 	db	80
   224  0016EB  49                 	db	73
   225  0016EC  4F                 	db	79
   226  0016ED  3D                 	db	61
   227  0016EE  37                 	db	55
   228  0016EF  2C                 	db	44
   229  0016F0  30                 	db	48
   230  0016F1  2C                 	db	44
   231  0016F2  32                 	db	50
   232  0016F3  0D                 	db	13
   233  0016F4  0A                 	db	10
   234  0016F5  00                 	db	0
   235                           
   236                           ;initializer for send_md_cfg_cmds_ok@F6819
   237  0016F6  41                 	db	65
   238  0016F7  54                 	db	84
   239  0016F8  2B                 	db	43
   240  0016F9  49                 	db	73
   241  0016FA  50                 	db	80
   242  0016FB  52                 	db	82
   243  0016FC  3D                 	db	61
   244  0016FD  31                 	db	49
   245  0016FE  31                 	db	49
   246  0016FF  35                 	db	53
   247  001700  32                 	db	50
   248  001701  30                 	db	48
   249  001702  30                 	db	48
   250  001703  0D                 	db	13
   251  001704  0A                 	db	10
   252  001705  00                 	db	0
   253                           
   254                           ;initializer for setup_data_ok@F6853
   255  001706  41                 	db	65
   256  001707  54                 	db	84
   257  001708  23                 	db	35
   258  001709  53                 	db	83
   259  00170A  47                 	db	71
   260  00170B  41                 	db	65
   261  00170C  43                 	db	67
   262  00170D  54                 	db	84
   263  00170E  3D                 	db	61
   264  00170F  33                 	db	51
   265  001710  2C                 	db	44
   266  001711  31                 	db	49
   267  001712  0D                 	db	13
   268  001713  0A                 	db	10
   269  001714  00                 	db	0
   270                           
   271                           ;initializer for send_md_cfg_cmds_ok@F6831
   272  001715  41                 	db	65
   273  001716  54                 	db	84
   274  001717  2B                 	db	43
   275  001718  43                 	db	67
   276  001719  45                 	db	69
   277  00171A  52                 	db	82
   278  00171B  45                 	db	69
   279  00171C  47                 	db	71
   280  00171D  3F                 	db	63
   281  00171E  0D                 	db	13
   282  00171F  0A                 	db	10
   283  001720  00                 	db	0
   284                           
   285                           ;initializer for send_md_cfg_cmds_ok@F6823
   286  001721  41                 	db	65
   287  001722  54                 	db	84
   288  001723  23                 	db	35
   289  001724  53                 	db	83
   290  001725  4C                 	db	76
   291  001726  45                 	db	69
   292  001727  44                 	db	68
   293  001728  3D                 	db	61
   294  001729  34                 	db	52
   295  00172A  0D                 	db	13
   296  00172B  0A                 	db	10
   297  00172C  00                 	db	0
   298                           
   299                           ;initializer for send_md_cfg_cmds_ok@F6817
   300  00172D  41                 	db	65
   301  00172E  54                 	db	84
   302  00172F  2B                 	db	43
   303  001730  43                 	db	67
   304  001731  4D                 	db	77
   305  001732  45                 	db	69
   306  001733  45                 	db	69
   307  001734  3D                 	db	61
   308  001735  32                 	db	50
   309  001736  0D                 	db	13
   310  001737  0A                 	db	10
   311  001738  00                 	db	0
   312                           
   313                           ;initializer for send_md_cfg_cmds_ok@F6833
   314  001739  41                 	db	65
   315  00173A  54                 	db	84
   316  00173B  23                 	db	35
   317  00173C  47                 	db	71
   318  00173D  50                 	db	80
   319  00173E  52                 	db	82
   320  00173F  53                 	db	83
   321  001740  3F                 	db	63
   322  001741  0D                 	db	13
   323  001742  0A                 	db	10
   324  001743  00                 	db	0
   325                           
   326                           ;initializer for send_md_cfg_cmds_ok@F6829
   327  001744  41                 	db	65
   328  001745  54                 	db	84
   329  001746  2B                 	db	43
   330  001747  43                 	db	67
   331  001748  52                 	db	82
   332  001749  45                 	db	69
   333  00174A  47                 	db	71
   334  00174B  3F                 	db	63
   335  00174C  0D                 	db	13
   336  00174D  0A                 	db	10
   337  00174E  00                 	db	0
   338                           
   339                           	psect	smallconst
   340  001000                     __psmallconst:
   341                           	opt stack 0
   342  001000  00                 	db	0
   343  001001                     send_over_socket_ok@F6858:
   344                           	opt stack 0
   345  001001  41                 	db	65
   346  001002  54                 	db	84
   347  001003  23                 	db	35
   348  001004  53                 	db	83
   349  001005  44                 	db	68
   350  001006  3D                 	db	61
   351  001007  31                 	db	49
   352  001008  2C                 	db	44
   353  001009  30                 	db	48
   354  00100A  2C                 	db	44
   355  00100B  31                 	db	49
   356  00100C  30                 	db	48
   357  00100D  35                 	db	53
   358  00100E  31                 	db	49
   359  00100F  30                 	db	48
   360  001010  2C                 	db	44
   361  001011  22                 	db	34
   362  001012  6D                 	db	109
   363  001013  6F                 	db	111
   364  001014  64                 	db	100
   365  001015  75                 	db	117
   366  001016  6C                 	db	108
   367  001017  65                 	db	101
   368  001018  73                 	db	115
   369  001019  2E                 	db	46
   370  00101A  74                 	db	116
   371  00101B  65                 	db	101
   372  00101C  6C                 	db	108
   373  00101D  69                 	db	105
   374  00101E  74                 	db	116
   375  00101F  2E                 	db	46
   376  001020  63                 	db	99
   377  001021  6F                 	db	111
   378  001022  6D                 	db	109
   379  001023  22                 	db	34
   380  001024  2C                 	db	44
   381  001025  30                 	db	48
   382  001026  2C                 	db	44
   383  001027  30                 	db	48
   384  001028  2C                 	db	44
   385  001029  31                 	db	49
   386  00102A  0D                 	db	13
   387  00102B  0A                 	db	10
   388  00102C  00                 	db	0
   389  00102D                     __end_ofsend_over_socket_ok@F6858:
   390                           	opt stack 0
   391  00102D                     send_over_socket_ok@F6862:
   392                           	opt stack 0
   393  00102D  41                 	db	65
   394  00102E  54                 	db	84
   395  00102F  23                 	db	35
   396  001030  53                 	db	83
   397  001031  52                 	db	82
   398  001032  45                 	db	69
   399  001033  43                 	db	67
   400  001034  56                 	db	86
   401  001035  3D                 	db	61
   402  001036  31                 	db	49
   403  001037  2C                 	db	44
   404  001038  38                 	db	56
   405  001039  39                 	db	57
   406  00103A  0D                 	db	13
   407  00103B  0A                 	db	10
   408  00103C  00                 	db	0
   409  00103D                     __end_ofsend_over_socket_ok@F6862:
   410                           	opt stack 0
   411  00103D                     close_socket_ok@F6875:
   412                           	opt stack 0
   413  00103D  41                 	db	65
   414  00103E  54                 	db	84
   415  00103F  23                 	db	35
   416  001040  53                 	db	83
   417  001041  47                 	db	71
   418  001042  41                 	db	65
   419  001043  43                 	db	67
   420  001044  54                 	db	84
   421  001045  3D                 	db	61
   422  001046  33                 	db	51
   423  001047  2C                 	db	44
   424  001048  30                 	db	48
   425  001049  0D                 	db	13
   426  00104A  0A                 	db	10
   427  00104B  00                 	db	0
   428  00104C                     __end_ofclose_socket_ok@F6875:
   429                           	opt stack 0
   430  00104C                     send_over_socket_ok@F6860:
   431                           	opt stack 0
   432  00104C  41                 	db	65
   433  00104D  54                 	db	84
   434  00104E  23                 	db	35
   435  00104F  53                 	db	83
   436  001050  53                 	db	83
   437  001051  45                 	db	69
   438  001052  4E                 	db	78
   439  001053  44                 	db	68
   440  001054  3D                 	db	61
   441  001055  31                 	db	49
   442  001056  0D                 	db	13
   443  001057  0A                 	db	10
   444  001058  00                 	db	0
   445  001059                     __end_ofsend_over_socket_ok@F6860:
   446                           	opt stack 0
   447  001059                     close_socket_ok@F6873:
   448                           	opt stack 0
   449  001059  41                 	db	65
   450  00105A  54                 	db	84
   451  00105B  23                 	db	35
   452  00105C  53                 	db	83
   453  00105D  48                 	db	72
   454  00105E  3D                 	db	61
   455  00105F  31                 	db	49
   456  001060  0D                 	db	13
   457  001061  0A                 	db	10
   458  001062  00                 	db	0
   459  001063                     __end_ofclose_socket_ok@F6873:
   460                           	opt stack 0
   461  001063                     send_over_socket_ok@F6864:
   462                           	opt stack 0
   463  001063  45                 	db	69
   464  001064  63                 	db	99
   465  001065  68                 	db	104
   466  001066  6F                 	db	111
   467  001067  2E                 	db	46
   468  001068  0D                 	db	13
   469  001069  0A                 	db	10
   470  00106A  00                 	db	0
   471  00106B                     __end_ofsend_over_socket_ok@F6864:
   472                           	opt stack 0
   473  00106B                     _VERSION:
   474                           	opt stack 0
   475  00106B  32                 	db	50
   476  00106C  30                 	db	48
   477  00106D  32                 	db	50
   478  00106E  30                 	db	48
   479  00106F  00                 	db	0
   480  001070                     __end_of_VERSION:
   481                           	opt stack 0
   482  0000                     _T5CONbits	set	3918
   483  0000                     _TMR5L	set	3919
   484  0000                     _TMR5H	set	3920
   485  0000                     _T5CON	set	3918
   486  0000                     _ANSELB	set	3897
   487  0000                     _ANSELC	set	3898
   488  0000                     _ANSELA	set	3896
   489  0000                     _TX1REG	set	4013
   490  0000                     _PIR1bits	set	3998
   491  0000                     _RCSTA1bits	set	4011
   492  0000                     _RC1STAbits	set	4011
   493  0000                     _SPBRG1	set	4015
   494  0000                     _SPBRGH1	set	4016
   495  0000                     _TXSTA1bits	set	4012
   496  0000                     _BAUDCONbits	set	4024
   497  0000                     _BAUDCON1bits	set	4024
   498  0000                     _PIR5bits	set	3966
   499  0000                     _PIE5bits	set	3965
   500  0000                     _INTCONbits	set	4082
   501  0000                     _TMR0L	set	4054
   502  0000                     _TMR0H	set	4055
   503  0000                     _T0CON	set	4053
   504  0000                     _LATBbits	set	3978
   505  0000                     _LATCbits	set	3979
   506  0000                     _TRISCbits	set	3988
   507  0000                     _PORTCbits	set	3970
   508  0000                     _TRISBbits	set	3987
   509  0000                     _PORTAbits	set	3968
   510  0000                     _TRISAbits	set	3986
   511  0000                     _OSCCONbits	set	4051
   512  0000                     _PORTBbits	set	3969
   513  0000                     _RC1REG	set	4014
   514  0000                     _PIE1bits	set	3997
   515  0000                     _TRMT1	set	32097
   516  0000                     _PEIE	set	32662
   517  0000                     _CREN1	set	32092
   518  0000                     _RC1IE	set	31981
   519  0000                     _GIE	set	32663
   520  0000                     _TMR0IF	set	32658
   521  0000                     _TMR5IF	set	31729
   522  0000                     _RC1IF	set	31989
   523                           
   524                           ; #config settings
   525  001070  00                 	db	0	; dummy byte at the end
   526  0000                     
   527                           	psect	cinit
   528  001750                     __pcinit:
   529                           	opt stack 0
   530  001750                     start_initialization:
   531                           	opt stack 0
   532  001750                     __initialization:
   533                           	opt stack 0
   534                           
   535                           ; Initialize objects allocated to BANK1 (177 bytes)
   536                           ; load TBLPTR registers with __pidataBANK1
   537  001750  0E9E               	movlw	low __pidataBANK1
   538  001752  6EF6               	movwf	tblptrl,c
   539  001754  0E16               	movlw	high __pidataBANK1
   540  001756  6EF7               	movwf	tblptrh,c
   541  001758  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   542  00175A  6EF8               	movwf	tblptru,c
   543  00175C  EE01  F000         	lfsr	0,__pdataBANK1
   544  001760  EE10 F0B1          	lfsr	1,177
   545  001764                     copy_data0:
   546  001764  0009               	tblrd		*+
   547  001766  CFF5 FFEE          	movff	tablat,postinc0
   548  00176A  50E5               	movf	postdec1,w,c
   549  00176C  50E1               	movf	fsr1l,w,c
   550  00176E  E1FA               	bnz	copy_data0
   551                           
   552                           ; Initialize objects allocated to BANK0 (21 bytes)
   553                           ; load TBLPTR registers with __pidataBANK0
   554  001770  0E8F               	movlw	low __pidataBANK0
   555  001772  6EF6               	movwf	tblptrl,c
   556  001774  0E1A               	movlw	high __pidataBANK0
   557  001776  6EF7               	movwf	tblptrh,c
   558  001778  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   559  00177A  6EF8               	movwf	tblptru,c
   560  00177C  EE00  F0E4         	lfsr	0,__pdataBANK0
   561  001780  EE10 F015          	lfsr	1,21
   562  001784                     copy_data1:
   563  001784  0009               	tblrd		*+
   564  001786  CFF5 FFEE          	movff	tablat,postinc0
   565  00178A  50E5               	movf	postdec1,w,c
   566  00178C  50E1               	movf	fsr1l,w,c
   567  00178E  E1FA               	bnz	copy_data1
   568                           
   569                           ; Initialize objects allocated to COMRAM (21 bytes)
   570                           ; load TBLPTR registers with __pidataCOMRAM
   571  001790  0E7A               	movlw	low __pidataCOMRAM
   572  001792  6EF6               	movwf	tblptrl,c
   573  001794  0E1A               	movlw	high __pidataCOMRAM
   574  001796  6EF7               	movwf	tblptrh,c
   575  001798  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   576  00179A  6EF8               	movwf	tblptru,c
   577  00179C  EE00  F025         	lfsr	0,__pdataCOMRAM
   578  0017A0  EE10 F015          	lfsr	1,21
   579  0017A4                     copy_data2:
   580  0017A4  0009               	tblrd		*+
   581  0017A6  CFF5 FFEE          	movff	tablat,postinc0
   582  0017AA  50E5               	movf	postdec1,w,c
   583  0017AC  50E1               	movf	fsr1l,w,c
   584  0017AE  E1FA               	bnz	copy_data2
   585                           
   586                           ; Clear objects allocated to BANK2 (160 bytes)
   587  0017B0  EE02  F000         	lfsr	0,__pbssBANK2
   588  0017B4  0EA0               	movlw	160
   589  0017B6                     clear_0:
   590  0017B6  6AEE               	clrf	postinc0,c
   591  0017B8  06E8               	decf	wreg,f,c
   592  0017BA  E1FD               	bnz	clear_0
   593                           
   594                           ; Clear objects allocated to BANK1 (60 bytes)
   595  0017BC  EE01  F0B1         	lfsr	0,__pbssBANK1
   596  0017C0  0E3C               	movlw	60
   597  0017C2                     clear_1:
   598  0017C2  6AEE               	clrf	postinc0,c
   599  0017C4  06E8               	decf	wreg,f,c
   600  0017C6  E1FD               	bnz	clear_1
   601                           
   602                           ; Clear objects allocated to BANK0 (3 bytes)
   603  0017C8  0100               	movlb	0
   604  0017CA  6BFB               	clrf	(__pbssBANK0+2)& (0+255),b
   605  0017CC  6BFA               	clrf	(__pbssBANK0+1)& (0+255),b
   606  0017CE  6BF9               	clrf	__pbssBANK0& (0+255),b
   607                           
   608                           ; Clear objects allocated to COMRAM (10 bytes)
   609  0017D0  EE00  F03A         	lfsr	0,__pbssCOMRAM
   610  0017D4  0E0A               	movlw	10
   611  0017D6                     clear_2:
   612  0017D6  6AEE               	clrf	postinc0,c
   613  0017D8  06E8               	decf	wreg,f,c
   614  0017DA  E1FD               	bnz	clear_2
   615  0017DC                     end_of_initialization:
   616                           	opt stack 0
   617  0017DC                     __end_of__initialization:
   618                           	opt stack 0
   619  0017DC  9044               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   620  0017DE  9244               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   621  0017E0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   622  0017E2  6EF8               	movwf	tblptru,c
   623  0017E4  0100               	movlb	0
   624  0017E6  EF12  F00D         	goto	_main	;jump to C main() function
   625                           tblptru	equ	0xFF8
   626                           tblptrh	equ	0xFF7
   627                           tblptrl	equ	0xFF6
   628                           tablat	equ	0xFF5
   629                           postinc0	equ	0xFEE
   630                           wreg	equ	0xFE8
   631                           postdec1	equ	0xFE5
   632                           fsr1l	equ	0xFE1
   633                           
   634                           	psect	bssCOMRAM
   635  00003A                     __pbssCOMRAM:
   636                           	opt stack 0
   637  00003A                     _lastChar:
   638                           	opt stack 0
   639  00003A                     	ds	1
   640  00003B                     _currentChar:
   641                           	opt stack 0
   642  00003B                     	ds	1
   643  00003C                     _timedOut:
   644                           	opt stack 0
   645  00003C                     	ds	1
   646  00003D                     _receivedRESP:
   647                           	opt stack 0
   648  00003D                     	ds	1
   649  00003E                     _receivedERR:
   650                           	opt stack 0
   651  00003E                     	ds	1
   652  00003F                     _receivedOK:
   653                           	opt stack 0
   654  00003F                     	ds	1
   655  000040                     _endPtr:
   656                           	opt stack 0
   657  000040                     	ds	1
   658  000041                     _tmr5_cnt:
   659                           	opt stack 0
   660  000041                     	ds	1
   661  000042                     _ledPatternCount:
   662                           	opt stack 0
   663  000042                     	ds	1
   664  000043                     _ledPattern:
   665                           	opt stack 0
   666  000043                     	ds	1
   667                           tblptru	equ	0xFF8
   668                           tblptrh	equ	0xFF7
   669                           tblptrl	equ	0xFF6
   670                           tablat	equ	0xFF5
   671                           postinc0	equ	0xFEE
   672                           wreg	equ	0xFE8
   673                           postdec1	equ	0xFE5
   674                           fsr1l	equ	0xFE1
   675                           
   676                           	psect	dataCOMRAM
   677  000025                     __pdataCOMRAM:
   678                           	opt stack 0
   679  000025                     send_md_cfg_cmds_ok@F6827:
   680                           	opt stack 0
   681  000025                     	ds	11
   682  000030                     send_md_cfg_cmds_ok@F6825:
   683                           	opt stack 0
   684  000030                     	ds	10
   685                           tblptru	equ	0xFF8
   686                           tblptrh	equ	0xFF7
   687                           tblptrl	equ	0xFF6
   688                           tablat	equ	0xFF5
   689                           postinc0	equ	0xFEE
   690                           wreg	equ	0xFE8
   691                           postdec1	equ	0xFE5
   692                           fsr1l	equ	0xFE1
   693                           
   694                           	psect	bssBANK0
   695  0000F9                     __pbssBANK0:
   696                           	opt stack 0
   697  0000F9                     _pdpIsActive:
   698                           	opt stack 0
   699  0000F9                     	ds	1
   700  0000FA                     _bootTimerIsDone:
   701                           	opt stack 0
   702  0000FA                     	ds	1
   703  0000FB                     _md_state:
   704                           	opt stack 0
   705  0000FB                     	ds	1
   706                           tblptru	equ	0xFF8
   707                           tblptrh	equ	0xFF7
   708                           tblptrl	equ	0xFF6
   709                           tablat	equ	0xFF5
   710                           postinc0	equ	0xFEE
   711                           wreg	equ	0xFE8
   712                           postdec1	equ	0xFE5
   713                           fsr1l	equ	0xFE1
   714                           
   715                           	psect	dataBANK0
   716  0000E4                     __pdataBANK0:
   717                           	opt stack 0
   718  0000E4                     send_md_cfg_cmds_ok@F6835:
   719                           	opt stack 0
   720  0000E4                     	ds	9
   721  0000ED                     send_md_cfg_cmds_ok@F6815:
   722                           	opt stack 0
   723  0000ED                     	ds	7
   724  0000F4                     send_md_cfg_cmds_ok@F6813:
   725                           	opt stack 0
   726  0000F4                     	ds	5
   727                           tblptru	equ	0xFF8
   728                           tblptrh	equ	0xFF7
   729                           tblptrl	equ	0xFF6
   730                           tablat	equ	0xFF5
   731                           postinc0	equ	0xFEE
   732                           wreg	equ	0xFE8
   733                           postdec1	equ	0xFE5
   734                           fsr1l	equ	0xFE1
   735                           
   736                           	psect	bssBANK1
   737  0001B1                     __pbssBANK1:
   738                           	opt stack 0
   739  0001B1                     _referenceBuf:
   740                           	opt stack 0
   741  0001B1                     	ds	60
   742                           tblptru	equ	0xFF8
   743                           tblptrh	equ	0xFF7
   744                           tblptrl	equ	0xFF6
   745                           tablat	equ	0xFF5
   746                           postinc0	equ	0xFEE
   747                           wreg	equ	0xFE8
   748                           postdec1	equ	0xFE5
   749                           fsr1l	equ	0xFE1
   750                           
   751                           	psect	dataBANK1
   752  000100                     __pdataBANK1:
   753                           	opt stack 0
   754  000100                     setup_data_ok@F6849:
   755                           	opt stack 0
   756  000100                     	ds	47
   757  00012F                     setup_data_ok@F6851:
   758                           	opt stack 0
   759  00012F                     	ds	25
   760  000148                     send_md_cfg_cmds_ok@F6821:
   761                           	opt stack 0
   762  000148                     	ds	16
   763  000158                     send_md_cfg_cmds_ok@F6819:
   764                           	opt stack 0
   765  000158                     	ds	16
   766  000168                     setup_data_ok@F6853:
   767                           	opt stack 0
   768  000168                     	ds	15
   769  000177                     send_md_cfg_cmds_ok@F6831:
   770                           	opt stack 0
   771  000177                     	ds	12
   772  000183                     send_md_cfg_cmds_ok@F6823:
   773                           	opt stack 0
   774  000183                     	ds	12
   775  00018F                     send_md_cfg_cmds_ok@F6817:
   776                           	opt stack 0
   777  00018F                     	ds	12
   778  00019B                     send_md_cfg_cmds_ok@F6833:
   779                           	opt stack 0
   780  00019B                     	ds	11
   781  0001A6                     send_md_cfg_cmds_ok@F6829:
   782                           	opt stack 0
   783  0001A6                     	ds	11
   784                           tblptru	equ	0xFF8
   785                           tblptrh	equ	0xFF7
   786                           tblptrl	equ	0xFF6
   787                           tablat	equ	0xFF5
   788                           postinc0	equ	0xFEE
   789                           wreg	equ	0xFE8
   790                           postdec1	equ	0xFE5
   791                           fsr1l	equ	0xFE1
   792                           
   793                           	psect	bssBANK2
   794  000200                     __pbssBANK2:
   795                           	opt stack 0
   796  000200                     _mdRxBuf:
   797                           	opt stack 0
   798  000200                     	ds	160
   799                           tblptru	equ	0xFF8
   800                           tblptrh	equ	0xFF7
   801                           tblptrl	equ	0xFF6
   802                           tablat	equ	0xFF5
   803                           postinc0	equ	0xFEE
   804                           wreg	equ	0xFE8
   805                           postdec1	equ	0xFE5
   806                           fsr1l	equ	0xFE1
   807                           
   808                           	psect	cstackBANK0
   809  000060                     __pcstackBANK0:
   810                           	opt stack 0
   811  000060                     close_socket_ok@deactivatePDP:
   812                           	opt stack 0
   813  000060                     send_md_cfg_cmds_ok@baud:
   814                           	opt stack 0
   815  000060                     send_over_socket_ok@openConnection:
   816                           	opt stack 0
   817  000060                     setup_data_ok@setApn:
   818                           	opt stack 0
   819                           
   820                           ; 47 bytes @ 0x0
   821  000060                     	ds	15
   822  00006F                     close_socket_ok@closeSocket:
   823                           	opt stack 0
   824                           
   825                           ; 10 bytes @ 0xF
   826  00006F                     	ds	1
   827  000070                     send_md_cfg_cmds_ok@ledCfg:
   828                           	opt stack 0
   829                           
   830                           ; 16 bytes @ 0x10
   831  000070                     	ds	16
   832  000080                     send_md_cfg_cmds_ok@cmee:
   833                           	opt stack 0
   834                           
   835                           ; 12 bytes @ 0x20
   836  000080                     	ds	12
   837  00008C                     send_md_cfg_cmds_ok@ledpattern:
   838                           	opt stack 0
   839  00008C                     send_over_socket_ok@srecv:
   840                           	opt stack 0
   841                           
   842                           ; 16 bytes @ 0x2C
   843  00008C                     	ds	3
   844  00008F                     setup_data_ok@cfgSocket:
   845                           	opt stack 0
   846                           
   847                           ; 25 bytes @ 0x2F
   848  00008F                     	ds	9
   849  000098                     send_md_cfg_cmds_ok@cereg:
   850                           	opt stack 0
   851                           
   852                           ; 12 bytes @ 0x38
   853  000098                     	ds	4
   854  00009C                     send_over_socket_ok@ssend:
   855                           	opt stack 0
   856                           
   857                           ; 13 bytes @ 0x3C
   858  00009C                     	ds	8
   859  0000A4                     send_md_cfg_cmds_ok@cpin:
   860                           	opt stack 0
   861                           
   862                           ; 11 bytes @ 0x44
   863  0000A4                     	ds	4
   864  0000A8                     setup_data_ok@activatePDP:
   865                           	opt stack 0
   866                           
   867                           ; 15 bytes @ 0x48
   868  0000A8                     	ds	1
   869  0000A9                     send_over_socket_ok@msg:
   870                           	opt stack 0
   871                           
   872                           ; 8 bytes @ 0x49
   873  0000A9                     	ds	6
   874  0000AF                     send_md_cfg_cmds_ok@creg:
   875                           	opt stack 0
   876                           
   877                           ; 11 bytes @ 0x4F
   878  0000AF                     	ds	2
   879  0000B1                     send_over_socket_ok@terminateData:
   880                           	opt stack 0
   881                           
   882                           ; 1 bytes @ 0x51
   883  0000B1                     	ds	9
   884  0000BA                     send_md_cfg_cmds_ok@gprs:
   885                           	opt stack 0
   886                           
   887                           ; 11 bytes @ 0x5A
   888  0000BA                     	ds	11
   889  0000C5                     send_md_cfg_cmds_ok@queryVersion:
   890                           	opt stack 0
   891                           
   892                           ; 10 bytes @ 0x65
   893  0000C5                     	ds	10
   894  0000CF                     send_md_cfg_cmds_ok@csq:
   895                           	opt stack 0
   896                           
   897                           ; 9 bytes @ 0x6F
   898  0000CF                     	ds	9
   899  0000D8                     send_md_cfg_cmds_ok@ate:
   900                           	opt stack 0
   901                           
   902                           ; 7 bytes @ 0x78
   903  0000D8                     	ds	7
   904  0000DF                     send_md_cfg_cmds_ok@at:
   905                           	opt stack 0
   906                           
   907                           ; 5 bytes @ 0x7F
   908  0000DF                     	ds	5
   909                           tblptru	equ	0xFF8
   910                           tblptrh	equ	0xFF7
   911                           tblptrl	equ	0xFF6
   912                           tablat	equ	0xFF5
   913                           postinc0	equ	0xFEE
   914                           wreg	equ	0xFE8
   915                           postdec1	equ	0xFE5
   916                           fsr1l	equ	0xFE1
   917                           
   918                           	psect	cstackCOMRAM
   919  000001                     __pcstackCOMRAM:
   920                           	opt stack 0
   921  000001                     ??_check_mdstate_tmr5:
   922  000001                     
   923                           ; 1 bytes @ 0x0
   924  000001                     	ds	1
   925  000002                     ??_isr:
   926                           
   927                           ; 1 bytes @ 0x1
   928  000002                     	ds	20
   929  000016                     ??_start_modem_send_process:
   930  000016                     md_uart_send@data:
   931                           	opt stack 0
   932                           
   933                           ; 1 bytes @ 0x15
   934  000016                     	ds	1
   935  000017                     md_uart_write_str_ok@data:
   936                           	opt stack 0
   937                           
   938                           ; 2 bytes @ 0x16
   939  000017                     	ds	2
   940  000019                     md_uart_write_str_ok@len1:
   941                           	opt stack 0
   942                           
   943                           ; 1 bytes @ 0x18
   944  000019                     	ds	1
   945  00001A                     md_uart_write_str_ok@wantOk:
   946                           	opt stack 0
   947                           
   948                           ; 1 bytes @ 0x19
   949  00001A                     	ds	1
   950  00001B                     md_uart_write_str_ok@waitToSendMoreData:
   951                           	opt stack 0
   952                           
   953                           ; 1 bytes @ 0x1A
   954  00001B                     	ds	1
   955  00001C                     ??_md_uart_write_str_ok:
   956                           
   957                           ; 1 bytes @ 0x1B
   958  00001C                     	ds	2
   959  00001E                     md_uart_write_str_ok@numRetries:
   960                           	opt stack 0
   961                           
   962                           ; 1 bytes @ 0x1D
   963  00001E                     	ds	1
   964  00001F                     md_uart_write_str_ok@index:
   965                           	opt stack 0
   966                           
   967                           ; 1 bytes @ 0x1E
   968  00001F                     	ds	1
   969  000020                     md_uart_write_str_ok@currentChar:
   970                           	opt stack 0
   971                           
   972                           ; 1 bytes @ 0x1F
   973  000020                     	ds	1
   974  000021                     md_uart_write_str_ok@pos:
   975                           	opt stack 0
   976                           
   977                           ; 1 bytes @ 0x20
   978  000021                     	ds	1
   979  000022                     ??_send_over_socket_ok:
   980  000022                     
   981                           ; 1 bytes @ 0x21
   982  000022                     	ds	2
   983  000024                     ??_main:
   984                           
   985                           ; 1 bytes @ 0x23
   986  000024                     	ds	1
   987                           tblptru	equ	0xFF8
   988                           tblptrh	equ	0xFF7
   989                           tblptrl	equ	0xFF6
   990                           tablat	equ	0xFF5
   991                           postinc0	equ	0xFEE
   992                           wreg	equ	0xFE8
   993                           postdec1	equ	0xFE5
   994                           fsr1l	equ	0xFE1
   995                           
   996 ;;
   997 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   998 ;;
   999 ;; *************** function _main *****************
  1000 ;; Defined at:
  1001 ;;		line 63 in file "main.c"
  1002 ;; Parameters:    Size  Location     Type
  1003 ;;		None
  1004 ;; Auto vars:     Size  Location     Type
  1005 ;;		None
  1006 ;; Return value:  Size  Location     Type
  1007 ;;                  1    wreg      void 
  1008 ;; Registers used:
  1009 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1010 ;; Tracked objects:
  1011 ;;		On entry : 0/0
  1012 ;;		On exit  : 0/0
  1013 ;;		Unchanged: 0/0
  1014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1017 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1018 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1019 ;;Total ram usage:        1 bytes
  1020 ;; Hardware stack levels required when called:    7
  1021 ;; This function calls:
  1022 ;;		_check_modem_state
  1023 ;;		_init_pic
  1024 ;;		_start_modem_send_process
  1025 ;; This function is called by:
  1026 ;;		Startup code after reset
  1027 ;; This function uses a non-reentrant model
  1028 ;;
  1029                           
  1030                           	psect	text0
  1031  001A24                     __ptext0:
  1032                           	opt stack 0
  1033  001A24                     _main:
  1034                           	opt stack 24
  1035                           
  1036                           ;main.c: 65: init_pic();
  1037                           
  1038                           ;incstack = 0
  1039  001A24  ECB6  F00C         	call	_init_pic	;wreg free
  1040  001A28                     
  1041                           ;main.c: 70: {
  1042                           ;main.c: 71: if (PORTBbits.RB4)
  1043  001A28  A881               	btfss	3969,4,c	;volatile
  1044  001A2A  D00A               	goto	l123
  1045                           
  1046                           ;main.c: 72: {
  1047                           ;main.c: 73: _delay((unsigned long)((50)*(8000000/4000.0)));
  1048  001A2C  0E82               	movlw	130
  1049  001A2E  6E24               	movwf	??_main& (0+255),c
  1050  001A30  0EDE               	movlw	222
  1051  001A32                     u2057:
  1052  001A32  2EE8               	decfsz	wreg,f,c
  1053  001A34  D7FE               	bra	u2057
  1054  001A36  2E24               	decfsz	??_main& (0+255),f,c
  1055  001A38  D7FC               	bra	u2057
  1056                           
  1057                           ;main.c: 74: if (PORTBbits.RB4)
  1058  001A3A  B881               	btfsc	3969,4,c	;volatile
  1059                           
  1060                           ;main.c: 75: {
  1061                           ;main.c: 76: start_modem_send_process();
  1062  001A3C  ECE9  F00C         	call	_start_modem_send_process	;wreg free
  1063  001A40                     l123:
  1064                           
  1065                           ;main.c: 77: }
  1066                           ;main.c: 78: }
  1067                           ;main.c: 79: check_modem_state();
  1068  001A40  EC3E  F00C         	call	_check_modem_state	;wreg free
  1069  001A44  D7F1               	goto	l121
  1070  001A46                     __end_of_main:
  1071                           	opt stack 0
  1072                           tblptru	equ	0xFF8
  1073                           tblptrh	equ	0xFF7
  1074                           tblptrl	equ	0xFF6
  1075                           tablat	equ	0xFF5
  1076                           postinc0	equ	0xFEE
  1077                           wreg	equ	0xFE8
  1078                           postdec1	equ	0xFE5
  1079                           fsr1l	equ	0xFE1
  1080                           
  1081 ;; *************** function _init_pic *****************
  1082 ;; Defined at:
  1083 ;;		line 85 in file "main.c"
  1084 ;; Parameters:    Size  Location     Type
  1085 ;;		None
  1086 ;; Auto vars:     Size  Location     Type
  1087 ;;		None
  1088 ;; Return value:  Size  Location     Type
  1089 ;;                  1    wreg      void 
  1090 ;; Registers used:
  1091 ;;		wreg, status,2
  1092 ;; Tracked objects:
  1093 ;;		On entry : 0/0
  1094 ;;		On exit  : 0/0
  1095 ;;		Unchanged: 0/0
  1096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1100 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1101 ;;Total ram usage:        0 bytes
  1102 ;; Hardware stack levels used:    1
  1103 ;; Hardware stack levels required when called:    3
  1104 ;; This function calls:
  1105 ;;		Nothing
  1106 ;; This function is called by:
  1107 ;;		_main
  1108 ;; This function uses a non-reentrant model
  1109 ;;
  1110                           
  1111                           	psect	text1
  1112  00196C                     __ptext1:
  1113                           	opt stack 0
  1114  00196C                     _init_pic:
  1115                           	opt stack 27
  1116                           
  1117                           ;main.c: 88: OSCCONbits.IDLEN = 0;
  1118                           
  1119                           ;incstack = 0
  1120  00196C  9ED3               	bcf	4051,7,c	;volatile
  1121                           
  1122                           ;main.c: 89: OSCCONbits.IRCF = 0b110;
  1123  00196E  50D3               	movf	4051,w,c	;volatile
  1124  001970  0B8F               	andlw	-113
  1125  001972  0960               	iorlw	96
  1126  001974  6ED3               	movwf	4051,c	;volatile
  1127                           
  1128                           ;main.c: 90: OSCCONbits.OSTS = 1;
  1129  001976  86D3               	bsf	4051,3,c	;volatile
  1130                           
  1131                           ;main.c: 94: ANSELA = 0x01;
  1132  001978  0E01               	movlw	1
  1133  00197A  010F               	movlb	15	; () banked
  1134  00197C  6F38               	movwf	56,b	;volatile
  1135                           
  1136                           ; BSR set to: 15
  1137                           ;main.c: 96: TRISAbits.TRISA0 = 1;
  1138  00197E  8092               	bsf	3986,0,c	;volatile
  1139                           
  1140                           ; BSR set to: 15
  1141                           ;main.c: 97: TRISAbits.TRISA3 = 0;
  1142  001980  9692               	bcf	3986,3,c	;volatile
  1143                           
  1144                           ; BSR set to: 15
  1145                           ;main.c: 98: PORTAbits.RA3 = 0;
  1146  001982  9680               	bcf	3968,3,c	;volatile
  1147                           
  1148                           ;main.c: 101: ANSELC = 0x00;
  1149  001984  0E00               	movlw	0
  1150  001986  6F3A               	movwf	58,b	;volatile
  1151                           
  1152                           ; BSR set to: 15
  1153                           ;main.c: 102: PORTBbits.RB3 = 1;
  1154  001988  8681               	bsf	3969,3,c	;volatile
  1155                           
  1156                           ; BSR set to: 15
  1157                           ;main.c: 103: TRISBbits.TRISB3 = 0;
  1158  00198A  9693               	bcf	3987,3,c	;volatile
  1159                           
  1160                           ; BSR set to: 15
  1161                           ;main.c: 104: PORTCbits.RC6 = 1;
  1162  00198C  8C82               	bsf	3970,6,c	;volatile
  1163                           
  1164                           ; BSR set to: 15
  1165                           ;main.c: 105: TRISCbits.TRISC6 = 0;
  1166  00198E  9C94               	bcf	3988,6,c	;volatile
  1167                           
  1168                           ; BSR set to: 15
  1169                           ;main.c: 106: LATCbits.LATC7 = 1;
  1170  001990  8E8B               	bsf	3979,7,c	;volatile
  1171                           
  1172                           ; BSR set to: 15
  1173                           ;main.c: 107: TRISCbits.TRISC7 = 1;
  1174  001992  8E94               	bsf	3988,7,c	;volatile
  1175                           
  1176                           ;main.c: 110: ANSELB = 0x00;
  1177  001994  0E00               	movlw	0
  1178  001996  6F39               	movwf	57,b	;volatile
  1179                           
  1180                           ; BSR set to: 15
  1181                           ;main.c: 112: TRISBbits.TRISB0 = 1;
  1182  001998  8093               	bsf	3987,0,c	;volatile
  1183                           
  1184                           ; BSR set to: 15
  1185                           ;main.c: 113: TRISCbits.TRISC1 = 1;
  1186  00199A  8294               	bsf	3988,1,c	;volatile
  1187                           
  1188                           ; BSR set to: 15
  1189                           ;main.c: 114: PORTBbits.RB1 = 1;
  1190  00199C  8281               	bsf	3969,1,c	;volatile
  1191                           
  1192                           ; BSR set to: 15
  1193                           ;main.c: 115: TRISBbits.TRISB1 = 1;
  1194  00199E  8293               	bsf	3987,1,c	;volatile
  1195                           
  1196                           ; BSR set to: 15
  1197                           ;main.c: 116: PORTBbits.RB2 = 1;
  1198  0019A0  8481               	bsf	3969,2,c	;volatile
  1199                           
  1200                           ; BSR set to: 15
  1201                           ;main.c: 117: TRISBbits.TRISB2 = 1;
  1202  0019A2  8493               	bsf	3987,2,c	;volatile
  1203                           
  1204                           ; BSR set to: 15
  1205                           ;main.c: 118: PORTCbits.RC4 = 1;
  1206  0019A4  8882               	bsf	3970,4,c	;volatile
  1207                           
  1208                           ; BSR set to: 15
  1209                           ;main.c: 119: TRISCbits.TRISC4 = 0;
  1210  0019A6  9894               	bcf	3988,4,c	;volatile
  1211                           
  1212                           ; BSR set to: 15
  1213                           ;main.c: 120: PORTBbits.RB4 = 1;
  1214  0019A8  8881               	bsf	3969,4,c	;volatile
  1215                           
  1216                           ; BSR set to: 15
  1217                           ;main.c: 121: TRISBbits.TRISB4 = 1;
  1218  0019AA  8893               	bsf	3987,4,c	;volatile
  1219                           
  1220                           ; BSR set to: 15
  1221                           ;main.c: 122: PORTBbits.RB5 = 1;
  1222  0019AC  8A81               	bsf	3969,5,c	;volatile
  1223                           
  1224                           ; BSR set to: 15
  1225                           ;main.c: 123: TRISBbits.TRISB5 = 1;
  1226  0019AE  8A93               	bsf	3987,5,c	;volatile
  1227                           
  1228                           ; BSR set to: 15
  1229                           ;main.c: 124: LATBbits.LATB6 = 1;
  1230  0019B0  8C8A               	bsf	3978,6,c	;volatile
  1231                           
  1232                           ; BSR set to: 15
  1233                           ;main.c: 125: TRISBbits.TRISB6 = 0;
  1234  0019B2  9C93               	bcf	3987,6,c	;volatile
  1235                           
  1236                           ; BSR set to: 15
  1237                           ;main.c: 126: PORTBbits.RB7 = 1;
  1238  0019B4  8E81               	bsf	3969,7,c	;volatile
  1239                           
  1240                           ; BSR set to: 15
  1241                           ;main.c: 127: TRISBbits.TRISB7 = 1;
  1242  0019B6  8E93               	bsf	3987,7,c	;volatile
  1243                           
  1244                           ; BSR set to: 15
  1245                           ;main.c: 129: PORTAbits.RA1 = 0;
  1246  0019B8  9280               	bcf	3968,1,c	;volatile
  1247                           
  1248                           ; BSR set to: 15
  1249                           ;main.c: 130: TRISAbits.TRISA1 = 0;
  1250  0019BA  9292               	bcf	3986,1,c	;volatile
  1251                           
  1252                           ;main.c: 137: T0CON = 0x87;
  1253  0019BC  0E87               	movlw	135
  1254  0019BE  6ED5               	movwf	4053,c	;volatile
  1255                           
  1256                           ;main.c: 138: TMR0H = ((65535-780)/256);
  1257  0019C0  0EFC               	movlw	252
  1258  0019C2  6ED7               	movwf	4055,c	;volatile
  1259                           
  1260                           ;main.c: 139: TMR0L = ((65535-780)%256);
  1261  0019C4  0EF3               	movlw	243
  1262  0019C6  6ED6               	movwf	4054,c	;volatile
  1263                           
  1264                           ; BSR set to: 15
  1265                           ;main.c: 140: TMR0IF = 0;
  1266  0019C8  94F2               	bcf	intcon,2,c	;volatile
  1267                           
  1268                           ;main.c: 161: md_state = IDLE;
  1269  0019CA  0E00               	movlw	0
  1270  0019CC  0100               	movlb	0	; () banked
  1271  0019CE  6FFB               	movwf	_md_state& (0+255),b
  1272                           
  1273                           ; BSR set to: 0
  1274  0019D0  0012               	return		;funcret
  1275  0019D2                     __end_of_init_pic:
  1276                           	opt stack 0
  1277                           tblptru	equ	0xFF8
  1278                           tblptrh	equ	0xFF7
  1279                           tblptrl	equ	0xFF6
  1280                           tablat	equ	0xFF5
  1281                           intcon	equ	0xFF2
  1282                           postinc0	equ	0xFEE
  1283                           wreg	equ	0xFE8
  1284                           postdec1	equ	0xFE5
  1285                           fsr1l	equ	0xFE1
  1286                           
  1287 ;; *************** function _check_modem_state *****************
  1288 ;; Defined at:
  1289 ;;		line 25 in file "modem.c"
  1290 ;; Parameters:    Size  Location     Type
  1291 ;;		None
  1292 ;; Auto vars:     Size  Location     Type
  1293 ;;		None
  1294 ;; Return value:  Size  Location     Type
  1295 ;;                  1    wreg      void 
  1296 ;; Registers used:
  1297 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1298 ;; Tracked objects:
  1299 ;;		On entry : 0/0
  1300 ;;		On exit  : 0/0
  1301 ;;		Unchanged: 0/0
  1302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1306 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1307 ;;Total ram usage:        0 bytes
  1308 ;; Hardware stack levels used:    1
  1309 ;; Hardware stack levels required when called:    6
  1310 ;; This function calls:
  1311 ;;		_close_socket_ok
  1312 ;;		_send_md_cfg_cmds_ok
  1313 ;;		_send_over_socket_ok
  1314 ;;		_setup_data_ok
  1315 ;;		_start_modem_send_process
  1316 ;; This function is called by:
  1317 ;;		_main
  1318 ;; This function uses a non-reentrant model
  1319 ;;
  1320                           
  1321                           	psect	text2
  1322  00187C                     __ptext2:
  1323                           	opt stack 0
  1324  00187C                     _check_modem_state:
  1325                           	opt stack 24
  1326                           
  1327                           ;modem.c: 27: switch (md_state)
  1328                           
  1329                           ; BSR set to: 0
  1330                           ;incstack = 0
  1331  00187C  D02C               	goto	l343
  1332  00187E                     
  1333                           ;modem.c: 32: if (bootTimerIsDone)
  1334  00187E  0100               	movlb	0	; () banked
  1335  001880  51FA               	movf	_bootTimerIsDone& (0+255),w,b
  1336  001882  B4D8               	btfsc	status,2,c
  1337  001884  0012               	return	
  1338                           
  1339                           ; BSR set to: 0
  1340                           ;modem.c: 33: md_state = CONFIG;
  1341  001886  0E02               	movlw	2
  1342  001888  6FFB               	movwf	_md_state& (0+255),b
  1343                           
  1344                           ; BSR set to: 0
  1345                           ;modem.c: 34: break;
  1346  00188A  0012               	return	
  1347  00188C                     
  1348                           ; BSR set to: 0
  1349                           ;modem.c: 36: if (!send_md_cfg_cmds_ok())
  1350                           
  1351                           ; BSR set to: 0
  1352  00188C  EC57  F009         	call	_send_md_cfg_cmds_ok	;wreg free
  1353  001890  0900               	iorlw	0
  1354  001892  A4D8               	btfss	status,2,c
  1355  001894  0012               	return	
  1356                           
  1357                           ;modem.c: 37: {
  1358                           ;modem.c: 38: start_modem_send_process();
  1359  001896  ECE9  F00C         	call	_start_modem_send_process	;wreg free
  1360                           
  1361                           ;modem.c: 39: md_state = WAITING_FOR_BOOT;
  1362  00189A  0E01               	movlw	1
  1363  00189C  0100               	movlb	0	; () banked
  1364  00189E  6FFB               	movwf	_md_state& (0+255),b
  1365                           
  1366                           ; BSR set to: 0
  1367                           ;modem.c: 40: }
  1368                           ;modem.c: 41: break;
  1369  0018A0  0012               	return	
  1370  0018A2                     
  1371                           ; BSR set to: 0
  1372                           ;modem.c: 43: setup_data_ok();
  1373                           
  1374                           ; BSR set to: 0
  1375  0018A2  ECF5  F00B         	call	_setup_data_ok	;wreg free
  1376                           
  1377                           ;modem.c: 44: md_state = SENDING_DATA;
  1378  0018A6  0E05               	movlw	5
  1379  0018A8  0100               	movlb	0	; () banked
  1380  0018AA  6FFB               	movwf	_md_state& (0+255),b
  1381                           
  1382                           ;modem.c: 45: break;
  1383  0018AC  0012               	return	
  1384  0018AE                     
  1385                           ; BSR set to: 0
  1386                           ;modem.c: 47: if (pdpIsActive)
  1387                           
  1388                           ; BSR set to: 0
  1389  0018AE  51F9               	movf	_pdpIsActive& (0+255),w,b
  1390  0018B0  B4D8               	btfsc	status,2,c
  1391  0018B2  0012               	return	
  1392                           
  1393                           ; BSR set to: 0
  1394                           ;modem.c: 48: md_state = SENDING_DATA;
  1395  0018B4  0E05               	movlw	5
  1396  0018B6  6FFB               	movwf	_md_state& (0+255),b
  1397                           
  1398                           ; BSR set to: 0
  1399                           ;modem.c: 49: break;
  1400  0018B8  0012               	return	
  1401  0018BA                     
  1402                           ; BSR set to: 0
  1403                           ;modem.c: 58: send_over_socket_ok();
  1404                           
  1405                           ; BSR set to: 0
  1406  0018BA  EC5C  F00A         	call	_send_over_socket_ok	;wreg free
  1407  0018BE  EC80  F00C         	call	_close_socket_ok	;wreg free
  1408  0018C2  0900               	iorlw	0
  1409  0018C4  B4D8               	btfsc	status,2,c
  1410  0018C6  D7FB               	goto	l355
  1411                           
  1412                           ;modem.c: 60: pdpIsActive = 0;
  1413  0018C8  0E00               	movlw	0
  1414  0018CA  0100               	movlb	0	; () banked
  1415  0018CC  6FF9               	movwf	_pdpIsActive& (0+255),b
  1416                           
  1417                           ;modem.c: 61: md_state = IDLE;
  1418  0018CE  0E00               	movlw	0
  1419  0018D0  6FFB               	movwf	_md_state& (0+255),b
  1420                           
  1421                           ; BSR set to: 0
  1422                           ;modem.c: 62: PORTAbits.RA3 = 0;
  1423  0018D2  9680               	bcf	3968,3,c	;volatile
  1424                           
  1425                           ; BSR set to: 0
  1426                           ;modem.c: 69: }
  1427                           
  1428                           ;modem.c: 63: break;
  1429  0018D4  0012               	return	
  1430  0018D6                     l343:
  1431                           
  1432                           ; BSR set to: 0
  1433  0018D6  0100               	movlb	0	; () banked
  1434  0018D8  51FB               	movf	_md_state& (0+255),w,b
  1435                           
  1436                           ; Switch size 1, requested type "space"
  1437                           ; Number of cases is 6, Range of values is 0 to 5
  1438                           ; switch strategies available:
  1439                           ; Name         Instructions Cycles
  1440                           ; simple_byte           19    10 (average)
  1441                           ;	Chosen strategy is simple_byte
  1442  0018DA  0A00               	xorlw	0	; case 0
  1443  0018DC  B4D8               	btfsc	status,2,c
  1444  0018DE  0012               	return	
  1445  0018E0  0A01               	xorlw	1	; case 1
  1446  0018E2  B4D8               	btfsc	status,2,c
  1447  0018E4  D7CC               	goto	l346
  1448  0018E6  0A03               	xorlw	3	; case 2
  1449  0018E8  B4D8               	btfsc	status,2,c
  1450  0018EA  D7D0               	goto	l348
  1451  0018EC  0A01               	xorlw	1	; case 3
  1452  0018EE  B4D8               	btfsc	status,2,c
  1453  0018F0  D7D8               	goto	l350
  1454  0018F2  0A07               	xorlw	7	; case 4
  1455  0018F4  B4D8               	btfsc	status,2,c
  1456  0018F6  D7DB               	goto	l351
  1457  0018F8  0A01               	xorlw	1	; case 5
  1458  0018FA  A4D8               	btfss	status,2,c
  1459  0018FC  0012               	return	
  1460  0018FE  D7DD               	goto	l353
  1461  001900                     __end_of_check_modem_state:
  1462                           	opt stack 0
  1463                           tblptru	equ	0xFF8
  1464                           tblptrh	equ	0xFF7
  1465                           tblptrl	equ	0xFF6
  1466                           tablat	equ	0xFF5
  1467                           intcon	equ	0xFF2
  1468                           postinc0	equ	0xFEE
  1469                           wreg	equ	0xFE8
  1470                           postdec1	equ	0xFE5
  1471                           fsr1l	equ	0xFE1
  1472                           status	equ	0xFD8
  1473                           
  1474 ;; *************** function _start_modem_send_process *****************
  1475 ;; Defined at:
  1476 ;;		line 8 in file "modem.c"
  1477 ;; Parameters:    Size  Location     Type
  1478 ;;		None
  1479 ;; Auto vars:     Size  Location     Type
  1480 ;;		None
  1481 ;; Return value:  Size  Location     Type
  1482 ;;                  1    wreg      void 
  1483 ;; Registers used:
  1484 ;;		wreg, status,2, cstack
  1485 ;; Tracked objects:
  1486 ;;		On entry : 0/0
  1487 ;;		On exit  : 0/0
  1488 ;;		Unchanged: 0/0
  1489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1492 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1493 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1494 ;;Total ram usage:        2 bytes
  1495 ;; Hardware stack levels used:    1
  1496 ;; Hardware stack levels required when called:    5
  1497 ;; This function calls:
  1498 ;;		_start_md_boot_timer
  1499 ;; This function is called by:
  1500 ;;		_main
  1501 ;;		_check_modem_state
  1502 ;; This function uses a non-reentrant model
  1503 ;;
  1504                           
  1505                           	psect	text3
  1506  0019D2                     __ptext3:
  1507                           	opt stack 0
  1508  0019D2                     _start_modem_send_process:
  1509                           	opt stack 25
  1510                           
  1511                           ;modem.c: 10: if (md_state != IDLE)
  1512                           
  1513                           ;incstack = 0
  1514  0019D2  0100               	movlb	0	; () banked
  1515  0019D4  51FB               	movf	_md_state& (0+255),w,b
  1516  0019D6  B4D8               	btfsc	status,2,c
  1517  0019D8  D00C               	goto	l336
  1518                           
  1519                           ; BSR set to: 0
  1520                           ;modem.c: 11: {
  1521                           ;modem.c: 12: PORTAbits.RA3 = 0;
  1522  0019DA  9680               	bcf	3968,3,c	;volatile
  1523                           
  1524                           ; BSR set to: 0
  1525                           ;modem.c: 13: _delay((unsigned long)((5000)*(8000000/4000.0)));
  1526  0019DC  0E33               	movlw	51
  1527  0019DE  6E17               	movwf	(??_start_modem_send_process+1)& (0+255),c
  1528  0019E0  0EBB               	movlw	187
  1529  0019E2  6E16               	movwf	??_start_modem_send_process& (0+255),c
  1530  0019E4  0EE0               	movlw	224
  1531  0019E6                     u2067:
  1532  0019E6  2EE8               	decfsz	wreg,f,c
  1533  0019E8  D7FE               	bra	u2067
  1534  0019EA  2E16               	decfsz	??_start_modem_send_process& (0+255),f,c
  1535  0019EC  D7FC               	bra	u2067
  1536  0019EE  2E17               	decfsz	(??_start_modem_send_process+1)& (0+255),f,c
  1537  0019F0  D7FA               	bra	u2067
  1538  0019F2                     l336:
  1539                           
  1540                           ;modem.c: 14: }
  1541                           ;modem.c: 15: PORTAbits.RA3 = 1;
  1542  0019F2  8680               	bsf	3968,3,c	;volatile
  1543                           
  1544                           ;modem.c: 16: start_md_boot_timer();
  1545  0019F4  EC6D  F00D         	call	_start_md_boot_timer	;wreg free
  1546                           
  1547                           ;modem.c: 17: md_state = WAITING_FOR_BOOT;
  1548  0019F8  0E01               	movlw	1
  1549  0019FA  0100               	movlb	0	; () banked
  1550  0019FC  6FFB               	movwf	_md_state& (0+255),b
  1551                           
  1552                           ; BSR set to: 0
  1553  0019FE  0012               	return		;funcret
  1554  001A00                     __end_of_start_modem_send_process:
  1555                           	opt stack 0
  1556                           tblptru	equ	0xFF8
  1557                           tblptrh	equ	0xFF7
  1558                           tblptrl	equ	0xFF6
  1559                           tablat	equ	0xFF5
  1560                           intcon	equ	0xFF2
  1561                           postinc0	equ	0xFEE
  1562                           wreg	equ	0xFE8
  1563                           postdec1	equ	0xFE5
  1564                           fsr1l	equ	0xFE1
  1565                           status	equ	0xFD8
  1566                           
  1567 ;; *************** function _start_md_boot_timer *****************
  1568 ;; Defined at:
  1569 ;;		line 20 in file "modem.c"
  1570 ;; Parameters:    Size  Location     Type
  1571 ;;		None
  1572 ;; Auto vars:     Size  Location     Type
  1573 ;;		None
  1574 ;; Return value:  Size  Location     Type
  1575 ;;                  1    wreg      void 
  1576 ;; Registers used:
  1577 ;;		wreg, status,2, cstack
  1578 ;; Tracked objects:
  1579 ;;		On entry : 0/0
  1580 ;;		On exit  : 0/0
  1581 ;;		Unchanged: 0/0
  1582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1586 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1587 ;;Total ram usage:        0 bytes
  1588 ;; Hardware stack levels used:    1
  1589 ;; Hardware stack levels required when called:    4
  1590 ;; This function calls:
  1591 ;;		_reload_tmr5_pt25s
  1592 ;; This function is called by:
  1593 ;;		_start_modem_send_process
  1594 ;; This function uses a non-reentrant model
  1595 ;;
  1596                           
  1597                           	psect	text4
  1598  001ADA                     __ptext4:
  1599                           	opt stack 0
  1600  001ADA                     _start_md_boot_timer:
  1601                           	opt stack 25
  1602                           
  1603                           ;modem.c: 22: reload_tmr5_pt25s();
  1604                           
  1605                           ; BSR set to: 0
  1606                           ;incstack = 0
  1607  001ADA  EC23  F00D         	call	_reload_tmr5_pt25s	;wreg free
  1608  001ADE  0012               	return		;funcret
  1609  001AE0                     __end_of_start_md_boot_timer:
  1610                           	opt stack 0
  1611                           tblptru	equ	0xFF8
  1612                           tblptrh	equ	0xFF7
  1613                           tblptrl	equ	0xFF6
  1614                           tablat	equ	0xFF5
  1615                           intcon	equ	0xFF2
  1616                           postinc0	equ	0xFEE
  1617                           wreg	equ	0xFE8
  1618                           postdec1	equ	0xFE5
  1619                           fsr1l	equ	0xFE1
  1620                           status	equ	0xFD8
  1621                           
  1622 ;; *************** function _setup_data_ok *****************
  1623 ;; Defined at:
  1624 ;;		line 114 in file "modem.c"
  1625 ;; Parameters:    Size  Location     Type
  1626 ;;		None
  1627 ;; Auto vars:     Size  Location     Type
  1628 ;;  setApn         47    0[BANK0 ] unsigned char [47]
  1629 ;;  cfgSocket      25   47[BANK0 ] unsigned char [25]
  1630 ;;  activatePDP    15   72[BANK0 ] unsigned char [15]
  1631 ;; Return value:  Size  Location     Type
  1632 ;;                  1    wreg      unsigned char 
  1633 ;; Registers used:
  1634 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1635 ;; Tracked objects:
  1636 ;;		On entry : 0/0
  1637 ;;		On exit  : 0/0
  1638 ;;		Unchanged: 0/0
  1639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1641 ;;      Locals:         0      87       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1643 ;;      Totals:         0      87       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1644 ;;Total ram usage:       87 bytes
  1645 ;; Hardware stack levels used:    1
  1646 ;; Hardware stack levels required when called:    5
  1647 ;; This function calls:
  1648 ;;		_init_md_uart
  1649 ;;		_md_uart_write_str_ok
  1650 ;;		_terminate_md_uart
  1651 ;; This function is called by:
  1652 ;;		_check_modem_state
  1653 ;; This function uses a non-reentrant model
  1654 ;;
  1655                           
  1656                           	psect	text5
  1657  0017EA                     __ptext5:
  1658                           	opt stack 0
  1659  0017EA                     _setup_data_ok:
  1660                           	opt stack 24
  1661                           
  1662                           ;modem.c: 116: uint8_t setApn[] = "AT+CGDCONT=3,\"IPV4V6\",\"wyleslte.gw7.vzwentp\"\r\n"
      +                          ;
  1663                           
  1664                           ;incstack = 0
  1665  0017EA  EE21  F000         	lfsr	2,setup_data_ok@F6849
  1666  0017EE  EE10  F060         	lfsr	1,setup_data_ok@setApn
  1667  0017F2  0E2E               	movlw	46
  1668  0017F4                     u1901:
  1669  0017F4  CFDB FFE3          	movff	plusw2,plusw1
  1670  0017F8  06E8               	decf	wreg,f,c
  1671  0017FA  E2FC               	bc	u1901
  1672                           
  1673                           ;modem.c: 117: uint8_t cfgSocket[] = "AT#SCFGEXT=1,1,0,0,0,0\r\n";
  1674  0017FC  EE21  F02F         	lfsr	2,setup_data_ok@F6851
  1675  001800  EE10  F08F         	lfsr	1,setup_data_ok@cfgSocket
  1676  001804  0E18               	movlw	24
  1677  001806                     u1911:
  1678  001806  CFDB FFE3          	movff	plusw2,plusw1
  1679  00180A  06E8               	decf	wreg,f,c
  1680  00180C  E2FC               	bc	u1911
  1681                           
  1682                           ;modem.c: 118: uint8_t activatePDP[] = "AT#SGACT=3,1\r\n";
  1683  00180E  EE21  F068         	lfsr	2,setup_data_ok@F6853
  1684  001812  EE10  F0A8         	lfsr	1,setup_data_ok@activatePDP
  1685  001816  0E0E               	movlw	14
  1686  001818                     u1921:
  1687  001818  CFDB FFE3          	movff	plusw2,plusw1
  1688  00181C  06E8               	decf	wreg,f,c
  1689  00181E  E2FC               	bc	u1921
  1690                           
  1691                           ;modem.c: 120: init_md_uart();
  1692  001820  EC00  F00D         	call	_init_md_uart	;wreg free
  1693                           
  1694                           ;modem.c: 123: md_uart_write_str_ok((uint8_t *)&setApn[0], sizeof(setApn), 1, 0);
  1695  001824  0E60               	movlw	low setup_data_ok@setApn
  1696  001826  6E17               	movwf	md_uart_write_str_ok@data,c
  1697  001828  0E00               	movlw	high setup_data_ok@setApn
  1698  00182A  6E18               	movwf	md_uart_write_str_ok@data+1,c
  1699  00182C  0E2F               	movlw	47
  1700  00182E  6E19               	movwf	md_uart_write_str_ok@len1,c
  1701  001830  0E01               	movlw	1
  1702  001832  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  1703  001834  0E00               	movlw	0
  1704  001836  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  1705  001838  EC39  F008         	call	_md_uart_write_str_ok	;wreg free
  1706                           
  1707                           ;modem.c: 124: md_uart_write_str_ok((uint8_t *)&cfgSocket[0], sizeof(cfgSocket), 1, 0);
  1708  00183C  0E8F               	movlw	low setup_data_ok@cfgSocket
  1709  00183E  6E17               	movwf	md_uart_write_str_ok@data,c
  1710  001840  0E00               	movlw	high setup_data_ok@cfgSocket
  1711  001842  6E18               	movwf	md_uart_write_str_ok@data+1,c
  1712  001844  0E19               	movlw	25
  1713  001846  6E19               	movwf	md_uart_write_str_ok@len1,c
  1714  001848  0E01               	movlw	1
  1715  00184A  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  1716  00184C  0E00               	movlw	0
  1717  00184E  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  1718  001850  EC39  F008         	call	_md_uart_write_str_ok	;wreg free
  1719                           
  1720                           ;modem.c: 125: pdpIsActive = md_uart_write_str_ok((uint8_t *)&activatePDP[0], sizeof(act
      +                          ivatePDP), 1, 0);
  1721  001854  0EA8               	movlw	low setup_data_ok@activatePDP
  1722  001856  6E17               	movwf	md_uart_write_str_ok@data,c
  1723  001858  0E00               	movlw	high setup_data_ok@activatePDP
  1724  00185A  6E18               	movwf	md_uart_write_str_ok@data+1,c
  1725  00185C  0E0F               	movlw	15
  1726  00185E  6E19               	movwf	md_uart_write_str_ok@len1,c
  1727  001860  0E01               	movlw	1
  1728  001862  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  1729  001864  0E00               	movlw	0
  1730  001866  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  1731  001868  EC39  F008         	call	_md_uart_write_str_ok	;wreg free
  1732  00186C  0100               	movlb	0	; () banked
  1733  00186E  6FF9               	movwf	_pdpIsActive& (0+255),b
  1734                           
  1735                           ; BSR set to: 0
  1736                           ;modem.c: 126: terminate_md_uart();
  1737  001870  EC64  F00D         	call	_terminate_md_uart	;wreg free
  1738                           
  1739                           ;modem.c: 127: pdpIsActive = 1;
  1740  001874  0E01               	movlw	1
  1741  001876  0100               	movlb	0	; () banked
  1742  001878  6FF9               	movwf	_pdpIsActive& (0+255),b
  1743  00187A  0012               	return	
  1744  00187C                     __end_of_setup_data_ok:
  1745                           	opt stack 0
  1746                           tblptru	equ	0xFF8
  1747                           tblptrh	equ	0xFF7
  1748                           tblptrl	equ	0xFF6
  1749                           tablat	equ	0xFF5
  1750                           intcon	equ	0xFF2
  1751                           postinc0	equ	0xFEE
  1752                           wreg	equ	0xFE8
  1753                           postdec1	equ	0xFE5
  1754                           plusw1	equ	0xFE3
  1755                           fsr1l	equ	0xFE1
  1756                           plusw2	equ	0xFDB
  1757                           status	equ	0xFD8
  1758                           
  1759 ;; *************** function _send_over_socket_ok *****************
  1760 ;; Defined at:
  1761 ;;		line 133 in file "modem.c"
  1762 ;; Parameters:    Size  Location     Type
  1763 ;;		None
  1764 ;; Auto vars:     Size  Location     Type
  1765 ;;  openConnecti   44    0[BANK0 ] const unsigned char [44]
  1766 ;;  srecv          16   44[BANK0 ] const unsigned char [16]
  1767 ;;  ssend          13   60[BANK0 ] const unsigned char [13]
  1768 ;;  msg             8   73[BANK0 ] const unsigned char [8]
  1769 ;;  terminateDat    1   81[BANK0 ] unsigned char 
  1770 ;; Return value:  Size  Location     Type
  1771 ;;                  1    wreg      unsigned char 
  1772 ;; Registers used:
  1773 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1774 ;; Tracked objects:
  1775 ;;		On entry : 0/0
  1776 ;;		On exit  : 0/0
  1777 ;;		Unchanged: 0/0
  1778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1780 ;;      Locals:         0      82       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1781 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1782 ;;      Totals:         2      82       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1783 ;;Total ram usage:       84 bytes
  1784 ;; Hardware stack levels used:    1
  1785 ;; Hardware stack levels required when called:    5
  1786 ;; This function calls:
  1787 ;;		_init_md_uart
  1788 ;;		_md_uart_write_str_ok
  1789 ;;		_terminate_md_uart
  1790 ;; This function is called by:
  1791 ;;		_check_modem_state
  1792 ;; This function uses a non-reentrant model
  1793 ;;
  1794                           
  1795                           	psect	text6
  1796  0014B8                     __ptext6:
  1797                           	opt stack 0
  1798  0014B8                     _send_over_socket_ok:
  1799                           	opt stack 24
  1800                           
  1801                           ;modem.c: 135: const uint8_t openConnection[] = "AT#SD=1,0,10510,\"modules.telit.com\",0
      +                          ,0,1\r\n";
  1802                           
  1803                           ; BSR set to: 0
  1804                           ;incstack = 0
  1805  0014B8  0E01               	movlw	low send_over_socket_ok@F6858
  1806  0014BA  6EF6               	movwf	tblptrl,c
  1807  0014BC                     	if	1	;There is more than 1 active tblptr byte
  1808  0014BC  0E10               	movlw	high send_over_socket_ok@F6858
  1809  0014BE  6EF7               	movwf	tblptrh,c
  1810  0014C0                     	endif
  1811  0014C0                     	if	0	;There are less than 3 active tblptr bytes
  1812  0014C0                     	endif
  1813  0014C0  EE20  F060         	lfsr	2,send_over_socket_ok@openConnection
  1814  0014C4  0E2B               	movlw	43
  1815  0014C6                     u1930:
  1816  0014C6  0009               	tblrd		*+
  1817  0014C8  CFF5 FFDE          	movff	tablat,postinc2
  1818  0014CC  06E8               	decf	wreg,f,c
  1819  0014CE  E2FB               	bc	u1930
  1820                           
  1821                           ;modem.c: 136: const uint8_t ssend[] = "AT#SSEND=1\r\n";
  1822  0014D0  0E4C               	movlw	low send_over_socket_ok@F6860
  1823  0014D2  6EF6               	movwf	tblptrl,c
  1824  0014D4                     	if	1	;There is more than 1 active tblptr byte
  1825  0014D4  0E10               	movlw	high send_over_socket_ok@F6860
  1826  0014D6  6EF7               	movwf	tblptrh,c
  1827  0014D8                     	endif
  1828  0014D8                     	if	0	;There are less than 3 active tblptr bytes
  1829  0014D8                     	endif
  1830  0014D8  EE20  F09C         	lfsr	2,send_over_socket_ok@ssend
  1831  0014DC  0E0C               	movlw	12
  1832  0014DE                     u1940:
  1833  0014DE  0009               	tblrd		*+
  1834  0014E0  CFF5 FFDE          	movff	tablat,postinc2
  1835  0014E4  06E8               	decf	wreg,f,c
  1836  0014E6  E2FB               	bc	u1940
  1837                           
  1838                           ;modem.c: 137: const uint8_t srecv[]="AT#SRECV=1,89\r\n";
  1839  0014E8  0E2D               	movlw	low send_over_socket_ok@F6862
  1840  0014EA  6EF6               	movwf	tblptrl,c
  1841  0014EC                     	if	1	;There is more than 1 active tblptr byte
  1842  0014EC  0E10               	movlw	high send_over_socket_ok@F6862
  1843  0014EE  6EF7               	movwf	tblptrh,c
  1844  0014F0                     	endif
  1845  0014F0                     	if	0	;There are less than 3 active tblptr bytes
  1846  0014F0                     	endif
  1847  0014F0  EE20  F08C         	lfsr	2,send_over_socket_ok@srecv
  1848  0014F4  0E0F               	movlw	15
  1849  0014F6                     u1950:
  1850  0014F6  0009               	tblrd		*+
  1851  0014F8  CFF5 FFDE          	movff	tablat,postinc2
  1852  0014FC  06E8               	decf	wreg,f,c
  1853  0014FE  E2FB               	bc	u1950
  1854                           
  1855                           ;modem.c: 138: const uint8_t msg[] = "Echo.\r\n";
  1856  001500  0E63               	movlw	low send_over_socket_ok@F6864
  1857  001502  6EF6               	movwf	tblptrl,c
  1858  001504                     	if	1	;There is more than 1 active tblptr byte
  1859  001504  0E10               	movlw	high send_over_socket_ok@F6864
  1860  001506  6EF7               	movwf	tblptrh,c
  1861  001508                     	endif
  1862  001508                     	if	0	;There are less than 3 active tblptr bytes
  1863  001508                     	endif
  1864  001508  EE20  F0A9         	lfsr	2,send_over_socket_ok@msg
  1865  00150C  0E07               	movlw	7
  1866  00150E                     u1960:
  1867  00150E  0009               	tblrd		*+
  1868  001510  CFF5 FFDE          	movff	tablat,postinc2
  1869  001514  06E8               	decf	wreg,f,c
  1870  001516  E2FB               	bc	u1960
  1871                           
  1872                           ;modem.c: 140: uint8_t terminateData = 26;
  1873  001518  0E1A               	movlw	26
  1874  00151A  0100               	movlb	0	; () banked
  1875  00151C  6FB1               	movwf	send_over_socket_ok@terminateData& (0+255),b
  1876                           
  1877                           ; BSR set to: 0
  1878                           ;modem.c: 141: init_md_uart();
  1879  00151E  EC00  F00D         	call	_init_md_uart	;wreg free
  1880                           
  1881                           ;modem.c: 143: md_uart_write_str_ok((uint8_t *)&openConnection[0], sizeof(openConnection
      +                          ), 1, 0);
  1882  001522  0E60               	movlw	low send_over_socket_ok@openConnection
  1883  001524  6E17               	movwf	md_uart_write_str_ok@data,c
  1884  001526  0E00               	movlw	high send_over_socket_ok@openConnection
  1885  001528  6E18               	movwf	md_uart_write_str_ok@data+1,c
  1886  00152A  0E2C               	movlw	44
  1887  00152C  6E19               	movwf	md_uart_write_str_ok@len1,c
  1888  00152E  0E01               	movlw	1
  1889  001530  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  1890  001532  0E00               	movlw	0
  1891  001534  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  1892  001536  EC39  F008         	call	_md_uart_write_str_ok	;wreg free
  1893                           
  1894                           ;modem.c: 146: md_uart_write_str_ok((uint8_t *)&ssend[0], sizeof(ssend), 0, 1);
  1895  00153A  0E9C               	movlw	low send_over_socket_ok@ssend
  1896  00153C  6E17               	movwf	md_uart_write_str_ok@data,c
  1897  00153E  0E00               	movlw	high send_over_socket_ok@ssend
  1898  001540  6E18               	movwf	md_uart_write_str_ok@data+1,c
  1899  001542  0E0D               	movlw	13
  1900  001544  6E19               	movwf	md_uart_write_str_ok@len1,c
  1901  001546  0E00               	movlw	0
  1902  001548  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  1903  00154A  0E01               	movlw	1
  1904  00154C  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  1905  00154E  EC39  F008         	call	_md_uart_write_str_ok	;wreg free
  1906                           
  1907                           ;modem.c: 148: md_uart_write_str_ok((uint8_t *)&msg[0], sizeof(msg), 0, 0);
  1908  001552  0EA9               	movlw	low send_over_socket_ok@msg
  1909  001554  6E17               	movwf	md_uart_write_str_ok@data,c
  1910  001556  0E00               	movlw	high send_over_socket_ok@msg
  1911  001558  6E18               	movwf	md_uart_write_str_ok@data+1,c
  1912  00155A  0E08               	movlw	8
  1913  00155C  6E19               	movwf	md_uart_write_str_ok@len1,c
  1914  00155E  0E00               	movlw	0
  1915  001560  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  1916  001562  0E00               	movlw	0
  1917  001564  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  1918  001566  EC39  F008         	call	_md_uart_write_str_ok	;wreg free
  1919                           
  1920                           ;modem.c: 150: md_uart_write_str_ok((uint8_t *)&terminateData, 1, 1, 0);
  1921  00156A  0EB1               	movlw	low send_over_socket_ok@terminateData
  1922  00156C  6E17               	movwf	md_uart_write_str_ok@data,c
  1923  00156E  0E00               	movlw	high send_over_socket_ok@terminateData
  1924  001570  6E18               	movwf	md_uart_write_str_ok@data+1,c
  1925  001572  0E01               	movlw	1
  1926  001574  6E19               	movwf	md_uart_write_str_ok@len1,c
  1927  001576  0E01               	movlw	1
  1928  001578  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  1929  00157A  0E00               	movlw	0
  1930  00157C  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  1931  00157E  EC39  F008         	call	_md_uart_write_str_ok	;wreg free
  1932                           
  1933                           ;modem.c: 151: CREN1 = 1;
  1934  001582  88AB               	bsf	4011,4,c	;volatile
  1935                           
  1936                           ;modem.c: 152: _delay((unsigned long)((2000)*(8000000/4000.0)));
  1937  001584  0E15               	movlw	21
  1938  001586  6E23               	movwf	(??_send_over_socket_ok+1)& (0+255),c
  1939  001588  0E4B               	movlw	75
  1940  00158A  6E22               	movwf	??_send_over_socket_ok& (0+255),c
  1941  00158C  0EBE               	movlw	190
  1942  00158E                     u2077:
  1943  00158E  2EE8               	decfsz	wreg,f,c
  1944  001590  D7FE               	bra	u2077
  1945  001592  2E22               	decfsz	??_send_over_socket_ok& (0+255),f,c
  1946  001594  D7FC               	bra	u2077
  1947  001596  2E23               	decfsz	(??_send_over_socket_ok+1)& (0+255),f,c
  1948  001598  D7FA               	bra	u2077
  1949  00159A  D000               	nop2	
  1950                           
  1951                           ;modem.c: 153: CREN1 = 0;
  1952  00159C  98AB               	bcf	4011,4,c	;volatile
  1953                           
  1954                           ;modem.c: 154: md_uart_write_str_ok((uint8_t *)&srecv[0], sizeof(srecv), 1, 0);
  1955  00159E  0E8C               	movlw	low send_over_socket_ok@srecv
  1956  0015A0  6E17               	movwf	md_uart_write_str_ok@data,c
  1957  0015A2  0E00               	movlw	high send_over_socket_ok@srecv
  1958  0015A4  6E18               	movwf	md_uart_write_str_ok@data+1,c
  1959  0015A6  0E10               	movlw	16
  1960  0015A8  6E19               	movwf	md_uart_write_str_ok@len1,c
  1961  0015AA  0E01               	movlw	1
  1962  0015AC  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  1963  0015AE  0E00               	movlw	0
  1964  0015B0  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  1965  0015B2  EC39  F008         	call	_md_uart_write_str_ok	;wreg free
  1966                           
  1967                           ;modem.c: 155: terminate_md_uart();
  1968  0015B6  EC64  F00D         	call	_terminate_md_uart	;wreg free
  1969  0015BA  0012               	return	
  1970  0015BC                     __end_of_send_over_socket_ok:
  1971                           	opt stack 0
  1972                           tblptru	equ	0xFF8
  1973                           tblptrh	equ	0xFF7
  1974                           tblptrl	equ	0xFF6
  1975                           tablat	equ	0xFF5
  1976                           intcon	equ	0xFF2
  1977                           postinc0	equ	0xFEE
  1978                           wreg	equ	0xFE8
  1979                           postdec1	equ	0xFE5
  1980                           plusw1	equ	0xFE3
  1981                           fsr1l	equ	0xFE1
  1982                           postinc2	equ	0xFDE
  1983                           plusw2	equ	0xFDB
  1984                           status	equ	0xFD8
  1985                           
  1986 ;; *************** function _send_md_cfg_cmds_ok *****************
  1987 ;; Defined at:
  1988 ;;		line 73 in file "modem.c"
  1989 ;; Parameters:    Size  Location     Type
  1990 ;;		None
  1991 ;; Auto vars:     Size  Location     Type
  1992 ;;  ledCfg         16   16[BANK0 ] unsigned char [16]
  1993 ;;  baud           16    0[BANK0 ] unsigned char [16]
  1994 ;;  cereg          12   56[BANK0 ] unsigned char [12]
  1995 ;;  ledpattern     12   44[BANK0 ] unsigned char [12]
  1996 ;;  cmee           12   32[BANK0 ] unsigned char [12]
  1997 ;;  gprs           11   90[BANK0 ] unsigned char [11]
  1998 ;;  creg           11   79[BANK0 ] unsigned char [11]
  1999 ;;  cpin           11   68[BANK0 ] unsigned char [11]
  2000 ;;  queryVersion   10  101[BANK0 ] unsigned char [10]
  2001 ;;  csq             9  111[BANK0 ] unsigned char [9]
  2002 ;;  ate             7  120[BANK0 ] unsigned char [7]
  2003 ;;  at              5  127[BANK0 ] unsigned char [5]
  2004 ;; Return value:  Size  Location     Type
  2005 ;;                  1    wreg      unsigned char 
  2006 ;; Registers used:
  2007 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2008 ;; Tracked objects:
  2009 ;;		On entry : 0/0
  2010 ;;		On exit  : 0/0
  2011 ;;		Unchanged: 0/0
  2012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2014 ;;      Locals:         0     132       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2016 ;;      Totals:         0     132       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2017 ;;Total ram usage:      132 bytes
  2018 ;; Hardware stack levels used:    1
  2019 ;; Hardware stack levels required when called:    5
  2020 ;; This function calls:
  2021 ;;		_init_md_uart
  2022 ;;		_md_uart_write_str_ok
  2023 ;;		_terminate_md_uart
  2024 ;; This function is called by:
  2025 ;;		_check_modem_state
  2026 ;; This function uses a non-reentrant model
  2027 ;;
  2028                           
  2029                           	psect	text7
  2030  0012AE                     __ptext7:
  2031                           	opt stack 0
  2032  0012AE                     _send_md_cfg_cmds_ok:
  2033                           	opt stack 24
  2034                           
  2035                           ;modem.c: 75: uint8_t at[] = "AT\r\n";
  2036                           
  2037                           ;incstack = 0
  2038  0012AE  EE20  F0F4         	lfsr	2,send_md_cfg_cmds_ok@F6813
  2039  0012B2  EE10  F0DF         	lfsr	1,send_md_cfg_cmds_ok@at
  2040  0012B6  0E04               	movlw	4
  2041  0012B8                     u1781:
  2042  0012B8  CFDB FFE3          	movff	plusw2,plusw1
  2043  0012BC  06E8               	decf	wreg,f,c
  2044  0012BE  E2FC               	bc	u1781
  2045                           
  2046                           ;modem.c: 76: uint8_t ate[] = "ATE1\r\n";
  2047  0012C0  EE20  F0ED         	lfsr	2,send_md_cfg_cmds_ok@F6815
  2048  0012C4  EE10  F0D8         	lfsr	1,send_md_cfg_cmds_ok@ate
  2049  0012C8  0E06               	movlw	6
  2050  0012CA                     u1791:
  2051  0012CA  CFDB FFE3          	movff	plusw2,plusw1
  2052  0012CE  06E8               	decf	wreg,f,c
  2053  0012D0  E2FC               	bc	u1791
  2054                           
  2055                           ;modem.c: 77: uint8_t cmee[] = "AT+CMEE=2\r\n";
  2056  0012D2  EE21  F08F         	lfsr	2,send_md_cfg_cmds_ok@F6817
  2057  0012D6  EE10  F080         	lfsr	1,send_md_cfg_cmds_ok@cmee
  2058  0012DA  0E0B               	movlw	11
  2059  0012DC                     u1801:
  2060  0012DC  CFDB FFE3          	movff	plusw2,plusw1
  2061  0012E0  06E8               	decf	wreg,f,c
  2062  0012E2  E2FC               	bc	u1801
  2063                           
  2064                           ;modem.c: 78: uint8_t baud[] = "AT+IPR=115200\r\n";
  2065  0012E4  EE21  F058         	lfsr	2,send_md_cfg_cmds_ok@F6819
  2066  0012E8  EE10  F060         	lfsr	1,send_md_cfg_cmds_ok@baud
  2067  0012EC  0E0F               	movlw	15
  2068  0012EE                     u1811:
  2069  0012EE  CFDB FFE3          	movff	plusw2,plusw1
  2070  0012F2  06E8               	decf	wreg,f,c
  2071  0012F4  E2FC               	bc	u1811
  2072                           
  2073                           ;modem.c: 79: uint8_t ledCfg[] = "AT#GPIO=7,0,2\r\n";
  2074  0012F6  EE21  F048         	lfsr	2,send_md_cfg_cmds_ok@F6821
  2075  0012FA  EE10  F070         	lfsr	1,send_md_cfg_cmds_ok@ledCfg
  2076  0012FE  0E0F               	movlw	15
  2077  001300                     u1821:
  2078  001300  CFDB FFE3          	movff	plusw2,plusw1
  2079  001304  06E8               	decf	wreg,f,c
  2080  001306  E2FC               	bc	u1821
  2081                           
  2082                           ;modem.c: 80: uint8_t ledpattern[] = "AT#SLED=4\r\n";
  2083  001308  EE21  F083         	lfsr	2,send_md_cfg_cmds_ok@F6823
  2084  00130C  EE10  F08C         	lfsr	1,send_md_cfg_cmds_ok@ledpattern
  2085  001310  0E0B               	movlw	11
  2086  001312                     u1831:
  2087  001312  CFDB FFE3          	movff	plusw2,plusw1
  2088  001316  06E8               	decf	wreg,f,c
  2089  001318  E2FC               	bc	u1831
  2090                           
  2091                           ;modem.c: 81: uint8_t queryVersion[] = "AT#CGMR\r\n";
  2092  00131A  EE20  F030         	lfsr	2,send_md_cfg_cmds_ok@F6825
  2093  00131E  EE10  F0C5         	lfsr	1,send_md_cfg_cmds_ok@queryVersion
  2094  001322  0E09               	movlw	9
  2095  001324                     u1841:
  2096  001324  CFDB FFE3          	movff	plusw2,plusw1
  2097  001328  06E8               	decf	wreg,f,c
  2098  00132A  E2FC               	bc	u1841
  2099                           
  2100                           ;modem.c: 82: uint8_t cpin[] = "AT+CPIN?\r\n";
  2101  00132C  EE20  F025         	lfsr	2,send_md_cfg_cmds_ok@F6827
  2102  001330  EE10  F0A4         	lfsr	1,send_md_cfg_cmds_ok@cpin
  2103  001334  0E0A               	movlw	10
  2104  001336                     u1851:
  2105  001336  CFDB FFE3          	movff	plusw2,plusw1
  2106  00133A  06E8               	decf	wreg,f,c
  2107  00133C  E2FC               	bc	u1851
  2108                           
  2109                           ;modem.c: 83: uint8_t creg[] = "AT+CREG?\r\n";
  2110  00133E  EE21  F0A6         	lfsr	2,send_md_cfg_cmds_ok@F6829
  2111  001342  EE10  F0AF         	lfsr	1,send_md_cfg_cmds_ok@creg
  2112  001346  0E0A               	movlw	10
  2113  001348                     u1861:
  2114  001348  CFDB FFE3          	movff	plusw2,plusw1
  2115  00134C  06E8               	decf	wreg,f,c
  2116  00134E  E2FC               	bc	u1861
  2117                           
  2118                           ;modem.c: 84: uint8_t cereg[] = "AT+CEREG?\r\n";
  2119  001350  EE21  F077         	lfsr	2,send_md_cfg_cmds_ok@F6831
  2120  001354  EE10  F098         	lfsr	1,send_md_cfg_cmds_ok@cereg
  2121  001358  0E0B               	movlw	11
  2122  00135A                     u1871:
  2123  00135A  CFDB FFE3          	movff	plusw2,plusw1
  2124  00135E  06E8               	decf	wreg,f,c
  2125  001360  E2FC               	bc	u1871
  2126                           
  2127                           ;modem.c: 85: uint8_t gprs[] = "AT#GPRS?\r\n";
  2128  001362  EE21  F09B         	lfsr	2,send_md_cfg_cmds_ok@F6833
  2129  001366  EE10  F0BA         	lfsr	1,send_md_cfg_cmds_ok@gprs
  2130  00136A  0E0A               	movlw	10
  2131  00136C                     u1881:
  2132  00136C  CFDB FFE3          	movff	plusw2,plusw1
  2133  001370  06E8               	decf	wreg,f,c
  2134  001372  E2FC               	bc	u1881
  2135                           
  2136                           ;modem.c: 86: uint8_t csq[] = "AT+CSQ\r\n";
  2137  001374  EE20  F0E4         	lfsr	2,send_md_cfg_cmds_ok@F6835
  2138  001378  EE10  F0CF         	lfsr	1,send_md_cfg_cmds_ok@csq
  2139  00137C  0E08               	movlw	8
  2140  00137E                     u1891:
  2141  00137E  CFDB FFE3          	movff	plusw2,plusw1
  2142  001382  06E8               	decf	wreg,f,c
  2143  001384  E2FC               	bc	u1891
  2144                           
  2145                           ;modem.c: 89: init_md_uart();
  2146  001386  EC00  F00D         	call	_init_md_uart	;wreg free
  2147                           
  2148                           ;modem.c: 92: md_uart_write_str_ok((uint8_t *)&at[0], sizeof(at), 1, 0);
  2149  00138A  0EDF               	movlw	low send_md_cfg_cmds_ok@at
  2150  00138C  6E17               	movwf	md_uart_write_str_ok@data,c
  2151  00138E  0E00               	movlw	high send_md_cfg_cmds_ok@at
  2152  001390  6E18               	movwf	md_uart_write_str_ok@data+1,c
  2153  001392  0E05               	movlw	5
  2154  001394  6E19               	movwf	md_uart_write_str_ok@len1,c
  2155  001396  0E01               	movlw	1
  2156  001398  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  2157  00139A  0E00               	movlw	0
  2158  00139C  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  2159  00139E  EC39  F008         	call	_md_uart_write_str_ok	;wreg free
  2160                           
  2161                           ;modem.c: 93: md_uart_write_str_ok((uint8_t *)&ate[0], sizeof(ate), 1, 0);
  2162  0013A2  0ED8               	movlw	low send_md_cfg_cmds_ok@ate
  2163  0013A4  6E17               	movwf	md_uart_write_str_ok@data,c
  2164  0013A6  0E00               	movlw	high send_md_cfg_cmds_ok@ate
  2165  0013A8  6E18               	movwf	md_uart_write_str_ok@data+1,c
  2166  0013AA  0E07               	movlw	7
  2167  0013AC  6E19               	movwf	md_uart_write_str_ok@len1,c
  2168  0013AE  0E01               	movlw	1
  2169  0013B0  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  2170  0013B2  0E00               	movlw	0
  2171  0013B4  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  2172  0013B6  EC39  F008         	call	_md_uart_write_str_ok	;wreg free
  2173                           
  2174                           ;modem.c: 94: md_uart_write_str_ok((uint8_t *)&cmee[0], sizeof(cmee), 1, 0);
  2175  0013BA  0E80               	movlw	low send_md_cfg_cmds_ok@cmee
  2176  0013BC  6E17               	movwf	md_uart_write_str_ok@data,c
  2177  0013BE  0E00               	movlw	high send_md_cfg_cmds_ok@cmee
  2178  0013C0  6E18               	movwf	md_uart_write_str_ok@data+1,c
  2179  0013C2  0E0C               	movlw	12
  2180  0013C4  6E19               	movwf	md_uart_write_str_ok@len1,c
  2181  0013C6  0E01               	movlw	1
  2182  0013C8  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  2183  0013CA  0E00               	movlw	0
  2184  0013CC  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  2185  0013CE  EC39  F008         	call	_md_uart_write_str_ok	;wreg free
  2186                           
  2187                           ;modem.c: 95: md_uart_write_str_ok((uint8_t *)&baud[0], sizeof(baud), 1, 0);
  2188  0013D2  0E60               	movlw	low send_md_cfg_cmds_ok@baud
  2189  0013D4  6E17               	movwf	md_uart_write_str_ok@data,c
  2190  0013D6  0E00               	movlw	high send_md_cfg_cmds_ok@baud
  2191  0013D8  6E18               	movwf	md_uart_write_str_ok@data+1,c
  2192  0013DA  0E10               	movlw	16
  2193  0013DC  6E19               	movwf	md_uart_write_str_ok@len1,c
  2194  0013DE  0E01               	movlw	1
  2195  0013E0  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  2196  0013E2  0E00               	movlw	0
  2197  0013E4  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  2198  0013E6  EC39  F008         	call	_md_uart_write_str_ok	;wreg free
  2199                           
  2200                           ;modem.c: 96: md_uart_write_str_ok((uint8_t *)&ledCfg[0], sizeof(ledCfg), 1, 0);
  2201  0013EA  0E70               	movlw	low send_md_cfg_cmds_ok@ledCfg
  2202  0013EC  6E17               	movwf	md_uart_write_str_ok@data,c
  2203  0013EE  0E00               	movlw	high send_md_cfg_cmds_ok@ledCfg
  2204  0013F0  6E18               	movwf	md_uart_write_str_ok@data+1,c
  2205  0013F2  0E10               	movlw	16
  2206  0013F4  6E19               	movwf	md_uart_write_str_ok@len1,c
  2207  0013F6  0E01               	movlw	1
  2208  0013F8  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  2209  0013FA  0E00               	movlw	0
  2210  0013FC  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  2211  0013FE  EC39  F008         	call	_md_uart_write_str_ok	;wreg free
  2212                           
  2213                           ;modem.c: 97: md_uart_write_str_ok((uint8_t *)&ledpattern[0], sizeof(ledpattern), 1, 0);
  2214  001402  0E8C               	movlw	low send_md_cfg_cmds_ok@ledpattern
  2215  001404  6E17               	movwf	md_uart_write_str_ok@data,c
  2216  001406  0E00               	movlw	high send_md_cfg_cmds_ok@ledpattern
  2217  001408  6E18               	movwf	md_uart_write_str_ok@data+1,c
  2218  00140A  0E0C               	movlw	12
  2219  00140C  6E19               	movwf	md_uart_write_str_ok@len1,c
  2220  00140E  0E01               	movlw	1
  2221  001410  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  2222  001412  0E00               	movlw	0
  2223  001414  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  2224  001416  EC39  F008         	call	_md_uart_write_str_ok	;wreg free
  2225                           
  2226                           ;modem.c: 98: md_uart_write_str_ok((uint8_t *)&queryVersion[0], sizeof(queryVersion), 1,
      +                           0);
  2227  00141A  0EC5               	movlw	low send_md_cfg_cmds_ok@queryVersion
  2228  00141C  6E17               	movwf	md_uart_write_str_ok@data,c
  2229  00141E  0E00               	movlw	high send_md_cfg_cmds_ok@queryVersion
  2230  001420  6E18               	movwf	md_uart_write_str_ok@data+1,c
  2231  001422  0E0A               	movlw	10
  2232  001424  6E19               	movwf	md_uart_write_str_ok@len1,c
  2233  001426  0E01               	movlw	1
  2234  001428  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  2235  00142A  0E00               	movlw	0
  2236  00142C  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  2237  00142E  EC39  F008         	call	_md_uart_write_str_ok	;wreg free
  2238                           
  2239                           ;modem.c: 99: md_uart_write_str_ok((uint8_t *)&cpin[0], sizeof(cpin), 1, 0);
  2240  001432  0EA4               	movlw	low send_md_cfg_cmds_ok@cpin
  2241  001434  6E17               	movwf	md_uart_write_str_ok@data,c
  2242  001436  0E00               	movlw	high send_md_cfg_cmds_ok@cpin
  2243  001438  6E18               	movwf	md_uart_write_str_ok@data+1,c
  2244  00143A  0E0B               	movlw	11
  2245  00143C  6E19               	movwf	md_uart_write_str_ok@len1,c
  2246  00143E  0E01               	movlw	1
  2247  001440  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  2248  001442  0E00               	movlw	0
  2249  001444  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  2250  001446  EC39  F008         	call	_md_uart_write_str_ok	;wreg free
  2251                           
  2252                           ;modem.c: 100: md_uart_write_str_ok((uint8_t *)&creg[0], sizeof(creg), 1, 0);
  2253  00144A  0EAF               	movlw	low send_md_cfg_cmds_ok@creg
  2254  00144C  6E17               	movwf	md_uart_write_str_ok@data,c
  2255  00144E  0E00               	movlw	high send_md_cfg_cmds_ok@creg
  2256  001450  6E18               	movwf	md_uart_write_str_ok@data+1,c
  2257  001452  0E0B               	movlw	11
  2258  001454  6E19               	movwf	md_uart_write_str_ok@len1,c
  2259  001456  0E01               	movlw	1
  2260  001458  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  2261  00145A  0E00               	movlw	0
  2262  00145C  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  2263  00145E  EC39  F008         	call	_md_uart_write_str_ok	;wreg free
  2264                           
  2265                           ;modem.c: 101: md_uart_write_str_ok((uint8_t *)&cereg[0], sizeof(cereg), 1, 0);
  2266  001462  0E98               	movlw	low send_md_cfg_cmds_ok@cereg
  2267  001464  6E17               	movwf	md_uart_write_str_ok@data,c
  2268  001466  0E00               	movlw	high send_md_cfg_cmds_ok@cereg
  2269  001468  6E18               	movwf	md_uart_write_str_ok@data+1,c
  2270  00146A  0E0C               	movlw	12
  2271  00146C  6E19               	movwf	md_uart_write_str_ok@len1,c
  2272  00146E  0E01               	movlw	1
  2273  001470  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  2274  001472  0E00               	movlw	0
  2275  001474  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  2276  001476  EC39  F008         	call	_md_uart_write_str_ok	;wreg free
  2277                           
  2278                           ;modem.c: 102: md_uart_write_str_ok((uint8_t *)&gprs[0], sizeof(gprs), 1, 0);
  2279  00147A  0EBA               	movlw	low send_md_cfg_cmds_ok@gprs
  2280  00147C  6E17               	movwf	md_uart_write_str_ok@data,c
  2281  00147E  0E00               	movlw	high send_md_cfg_cmds_ok@gprs
  2282  001480  6E18               	movwf	md_uart_write_str_ok@data+1,c
  2283  001482  0E0B               	movlw	11
  2284  001484  6E19               	movwf	md_uart_write_str_ok@len1,c
  2285  001486  0E01               	movlw	1
  2286  001488  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  2287  00148A  0E00               	movlw	0
  2288  00148C  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  2289  00148E  EC39  F008         	call	_md_uart_write_str_ok	;wreg free
  2290                           
  2291                           ;modem.c: 103: md_uart_write_str_ok((uint8_t *)&csq[0], sizeof(csq), 1, 0);
  2292  001492  0ECF               	movlw	low send_md_cfg_cmds_ok@csq
  2293  001494  6E17               	movwf	md_uart_write_str_ok@data,c
  2294  001496  0E00               	movlw	high send_md_cfg_cmds_ok@csq
  2295  001498  6E18               	movwf	md_uart_write_str_ok@data+1,c
  2296  00149A  0E09               	movlw	9
  2297  00149C  6E19               	movwf	md_uart_write_str_ok@len1,c
  2298  00149E  0E01               	movlw	1
  2299  0014A0  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  2300  0014A2  0E00               	movlw	0
  2301  0014A4  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  2302  0014A6  EC39  F008         	call	_md_uart_write_str_ok	;wreg free
  2303                           
  2304                           ;modem.c: 104: terminate_md_uart();
  2305  0014AA  EC64  F00D         	call	_terminate_md_uart	;wreg free
  2306                           
  2307                           ;modem.c: 107: md_state = SET_UP_DATA;
  2308  0014AE  0E03               	movlw	3
  2309  0014B0  0100               	movlb	0	; () banked
  2310  0014B2  6FFB               	movwf	_md_state& (0+255),b
  2311                           
  2312                           ; BSR set to: 0
  2313                           ;modem.c: 110: return 1;
  2314  0014B4  0E01               	movlw	1
  2315  0014B6  0012               	return	
  2316  0014B8                     __end_of_send_md_cfg_cmds_ok:
  2317                           	opt stack 0
  2318                           tblptru	equ	0xFF8
  2319                           tblptrh	equ	0xFF7
  2320                           tblptrl	equ	0xFF6
  2321                           tablat	equ	0xFF5
  2322                           intcon	equ	0xFF2
  2323                           postinc0	equ	0xFEE
  2324                           wreg	equ	0xFE8
  2325                           postdec1	equ	0xFE5
  2326                           plusw1	equ	0xFE3
  2327                           fsr1l	equ	0xFE1
  2328                           postinc2	equ	0xFDE
  2329                           plusw2	equ	0xFDB
  2330                           status	equ	0xFD8
  2331                           
  2332 ;; *************** function _close_socket_ok *****************
  2333 ;; Defined at:
  2334 ;;		line 162 in file "modem.c"
  2335 ;; Parameters:    Size  Location     Type
  2336 ;;		None
  2337 ;; Auto vars:     Size  Location     Type
  2338 ;;  deactivatePD   15    0[BANK0 ] const unsigned char [15]
  2339 ;;  closeSocket    10   15[BANK0 ] const unsigned char [10]
  2340 ;; Return value:  Size  Location     Type
  2341 ;;                  1    wreg      unsigned char 
  2342 ;; Registers used:
  2343 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2344 ;; Tracked objects:
  2345 ;;		On entry : 0/0
  2346 ;;		On exit  : 0/0
  2347 ;;		Unchanged: 0/0
  2348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2350 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2352 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2353 ;;Total ram usage:       25 bytes
  2354 ;; Hardware stack levels used:    1
  2355 ;; Hardware stack levels required when called:    5
  2356 ;; This function calls:
  2357 ;;		_init_md_uart
  2358 ;;		_md_uart_write_str_ok
  2359 ;;		_terminate_md_uart
  2360 ;; This function is called by:
  2361 ;;		_check_modem_state
  2362 ;; This function uses a non-reentrant model
  2363 ;;
  2364                           
  2365                           	psect	text8
  2366  001900                     __ptext8:
  2367                           	opt stack 0
  2368  001900                     _close_socket_ok:
  2369                           	opt stack 24
  2370                           
  2371                           ;modem.c: 164: const uint8_t closeSocket[] = "AT#SH=1\r\n";
  2372                           
  2373                           ; BSR set to: 0
  2374                           ;incstack = 0
  2375  001900  0E59               	movlw	low close_socket_ok@F6873
  2376  001902  6EF6               	movwf	tblptrl,c
  2377  001904                     	if	1	;There is more than 1 active tblptr byte
  2378  001904  0E10               	movlw	high close_socket_ok@F6873
  2379  001906  6EF7               	movwf	tblptrh,c
  2380  001908                     	endif
  2381  001908                     	if	0	;There are less than 3 active tblptr bytes
  2382  001908                     	endif
  2383  001908  EE20  F06F         	lfsr	2,close_socket_ok@closeSocket
  2384  00190C  0E09               	movlw	9
  2385  00190E                     u1970:
  2386  00190E  0009               	tblrd		*+
  2387  001910  CFF5 FFDE          	movff	tablat,postinc2
  2388  001914  06E8               	decf	wreg,f,c
  2389  001916  E2FB               	bc	u1970
  2390                           
  2391                           ;modem.c: 165: const uint8_t deactivatePDP[] = "AT#SGACT=3,0\r\n";
  2392  001918  0E3D               	movlw	low close_socket_ok@F6875
  2393  00191A  6EF6               	movwf	tblptrl,c
  2394  00191C                     	if	1	;There is more than 1 active tblptr byte
  2395  00191C  0E10               	movlw	high close_socket_ok@F6875
  2396  00191E  6EF7               	movwf	tblptrh,c
  2397  001920                     	endif
  2398  001920                     	if	0	;There are less than 3 active tblptr bytes
  2399  001920                     	endif
  2400  001920  EE20  F060         	lfsr	2,close_socket_ok@deactivatePDP
  2401  001924  0E0E               	movlw	14
  2402  001926                     u1980:
  2403  001926  0009               	tblrd		*+
  2404  001928  CFF5 FFDE          	movff	tablat,postinc2
  2405  00192C  06E8               	decf	wreg,f,c
  2406  00192E  E2FB               	bc	u1980
  2407                           
  2408                           ;modem.c: 167: init_md_uart();
  2409  001930  EC00  F00D         	call	_init_md_uart	;wreg free
  2410                           
  2411                           ;modem.c: 169: md_uart_write_str_ok((uint8_t *)&closeSocket[0], sizeof(closeSocket), 1, 
      +                          0);
  2412  001934  0E6F               	movlw	low close_socket_ok@closeSocket
  2413  001936  6E17               	movwf	md_uart_write_str_ok@data,c
  2414  001938  0E00               	movlw	high close_socket_ok@closeSocket
  2415  00193A  6E18               	movwf	md_uart_write_str_ok@data+1,c
  2416  00193C  0E0A               	movlw	10
  2417  00193E  6E19               	movwf	md_uart_write_str_ok@len1,c
  2418  001940  0E01               	movlw	1
  2419  001942  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  2420  001944  0E00               	movlw	0
  2421  001946  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  2422  001948  EC39  F008         	call	_md_uart_write_str_ok	;wreg free
  2423                           
  2424                           ;modem.c: 170: md_uart_write_str_ok((uint8_t *)&deactivatePDP[0], sizeof(deactivatePDP),
      +                           1, 0);
  2425  00194C  0E60               	movlw	low close_socket_ok@deactivatePDP
  2426  00194E  6E17               	movwf	md_uart_write_str_ok@data,c
  2427  001950  0E00               	movlw	high close_socket_ok@deactivatePDP
  2428  001952  6E18               	movwf	md_uart_write_str_ok@data+1,c
  2429  001954  0E0F               	movlw	15
  2430  001956  6E19               	movwf	md_uart_write_str_ok@len1,c
  2431  001958  0E01               	movlw	1
  2432  00195A  6E1A               	movwf	md_uart_write_str_ok@wantOk,c
  2433  00195C  0E00               	movlw	0
  2434  00195E  6E1B               	movwf	md_uart_write_str_ok@waitToSendMoreData,c
  2435  001960  EC39  F008         	call	_md_uart_write_str_ok	;wreg free
  2436                           
  2437                           ;modem.c: 171: terminate_md_uart();
  2438  001964  EC64  F00D         	call	_terminate_md_uart	;wreg free
  2439                           
  2440                           ;modem.c: 172: return 1;
  2441  001968  0E01               	movlw	1
  2442  00196A  0012               	return	
  2443  00196C                     __end_of_close_socket_ok:
  2444                           	opt stack 0
  2445                           tblptru	equ	0xFF8
  2446                           tblptrh	equ	0xFF7
  2447                           tblptrl	equ	0xFF6
  2448                           tablat	equ	0xFF5
  2449                           intcon	equ	0xFF2
  2450                           postinc0	equ	0xFEE
  2451                           wreg	equ	0xFE8
  2452                           postdec1	equ	0xFE5
  2453                           plusw1	equ	0xFE3
  2454                           fsr1l	equ	0xFE1
  2455                           postinc2	equ	0xFDE
  2456                           plusw2	equ	0xFDB
  2457                           status	equ	0xFD8
  2458                           
  2459 ;; *************** function _terminate_md_uart *****************
  2460 ;; Defined at:
  2461 ;;		line 56 in file "uart.c"
  2462 ;; Parameters:    Size  Location     Type
  2463 ;;		None
  2464 ;; Auto vars:     Size  Location     Type
  2465 ;;		None
  2466 ;; Return value:  Size  Location     Type
  2467 ;;                  1    wreg      void 
  2468 ;; Registers used:
  2469 ;;		None
  2470 ;; Tracked objects:
  2471 ;;		On entry : 0/0
  2472 ;;		On exit  : 0/0
  2473 ;;		Unchanged: 0/0
  2474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2478 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2479 ;;Total ram usage:        0 bytes
  2480 ;; Hardware stack levels used:    1
  2481 ;; Hardware stack levels required when called:    3
  2482 ;; This function calls:
  2483 ;;		Nothing
  2484 ;; This function is called by:
  2485 ;;		_send_md_cfg_cmds_ok
  2486 ;;		_setup_data_ok
  2487 ;;		_send_over_socket_ok
  2488 ;;		_close_socket_ok
  2489 ;; This function uses a non-reentrant model
  2490 ;;
  2491                           
  2492                           	psect	text9
  2493  001AC8                     __ptext9:
  2494                           	opt stack 0
  2495  001AC8                     _terminate_md_uart:
  2496                           	opt stack 25
  2497                           
  2498                           ;uart.c: 58: RCSTA1bits.SPEN = 0;
  2499                           
  2500                           ;incstack = 0
  2501  001AC8  9EAB               	bcf	4011,7,c	;volatile
  2502                           
  2503                           ;uart.c: 61: TRISCbits.TRISC6 = 0;
  2504  001ACA  9C94               	bcf	3988,6,c	;volatile
  2505                           
  2506                           ;uart.c: 62: PORTCbits.RC6 = 0;
  2507  001ACC  9C82               	bcf	3970,6,c	;volatile
  2508                           
  2509                           ;uart.c: 63: RC1IE = 0;
  2510  001ACE  9A9D               	bcf	3997,5,c	;volatile
  2511  001AD0  0012               	return		;funcret
  2512  001AD2                     __end_of_terminate_md_uart:
  2513                           	opt stack 0
  2514                           tblptru	equ	0xFF8
  2515                           tblptrh	equ	0xFF7
  2516                           tblptrl	equ	0xFF6
  2517                           tablat	equ	0xFF5
  2518                           intcon	equ	0xFF2
  2519                           postinc0	equ	0xFEE
  2520                           wreg	equ	0xFE8
  2521                           postdec1	equ	0xFE5
  2522                           plusw1	equ	0xFE3
  2523                           fsr1l	equ	0xFE1
  2524                           postinc2	equ	0xFDE
  2525                           plusw2	equ	0xFDB
  2526                           status	equ	0xFD8
  2527                           
  2528 ;; *************** function _md_uart_write_str_ok *****************
  2529 ;; Defined at:
  2530 ;;		line 68 in file "uart.c"
  2531 ;; Parameters:    Size  Location     Type
  2532 ;;  data            2   22[COMRAM] PTR unsigned char 
  2533 ;;		 -> close_socket_ok@deactivatePDP(15), close_socket_ok@closeSocket(10), send_over_socket_ok@terminateData(1), send_o
      +ver_socket_ok@msg(8), 
  2534 ;;		 -> send_over_socket_ok@srecv(16), send_over_socket_ok@ssend(13), send_over_socket_ok@openConnection(44), setup_data
      +_ok@activatePDP(15), 
  2535 ;;		 -> setup_data_ok@cfgSocket(25), setup_data_ok@setApn(47), send_md_cfg_cmds_ok@csq(9), send_md_cfg_cmds_ok@gprs(11),
      + 
  2536 ;;		 -> send_md_cfg_cmds_ok@cereg(12), send_md_cfg_cmds_ok@creg(11), send_md_cfg_cmds_ok@cpin(11), send_md_cfg_cmds_ok@q
      +ueryVersion(10), 
  2537 ;;		 -> send_md_cfg_cmds_ok@ledpattern(12), send_md_cfg_cmds_ok@ledCfg(16), send_md_cfg_cmds_ok@baud(16), send_md_cfg_cm
      +ds_ok@cmee(12), 
  2538 ;;		 -> send_md_cfg_cmds_ok@ate(7), send_md_cfg_cmds_ok@at(5), 
  2539 ;;  len1            1   24[COMRAM] unsigned char 
  2540 ;;  wantOk          1   25[COMRAM] unsigned char 
  2541 ;;  waitToSendMo    1   26[COMRAM] unsigned char 
  2542 ;; Auto vars:     Size  Location     Type
  2543 ;;  pos             1   32[COMRAM] unsigned char 
  2544 ;;  currentChar     1   31[COMRAM] unsigned char 
  2545 ;;  index           1   30[COMRAM] unsigned char 
  2546 ;;  numRetries      1   29[COMRAM] unsigned char 
  2547 ;; Return value:  Size  Location     Type
  2548 ;;                  1    wreg      unsigned char 
  2549 ;; Registers used:
  2550 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2551 ;; Tracked objects:
  2552 ;;		On entry : 0/0
  2553 ;;		On exit  : 0/0
  2554 ;;		Unchanged: 0/0
  2555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2556 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2557 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2558 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2559 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2560 ;;Total ram usage:       11 bytes
  2561 ;; Hardware stack levels used:    1
  2562 ;; Hardware stack levels required when called:    4
  2563 ;; This function calls:
  2564 ;;		_disable_tmr5
  2565 ;;		_md_uart_send
  2566 ;;		_reload_tmr5_pt25s
  2567 ;; This function is called by:
  2568 ;;		_send_md_cfg_cmds_ok
  2569 ;;		_setup_data_ok
  2570 ;;		_send_over_socket_ok
  2571 ;;		_close_socket_ok
  2572 ;; This function uses a non-reentrant model
  2573 ;;
  2574                           
  2575                           	psect	text10
  2576  001072                     __ptext10:
  2577                           	opt stack 0
  2578  001072                     _md_uart_write_str_ok:
  2579                           	opt stack 24
  2580                           
  2581                           ;uart.c: 71: uint8_t index = 0, pos = 0, currentChar, numRetries = 15;
  2582                           
  2583                           ;incstack = 0
  2584  001072  0E00               	movlw	0
  2585  001074  6E1F               	movwf	md_uart_write_str_ok@index,c
  2586  001076  0E00               	movlw	0
  2587  001078  6E21               	movwf	md_uart_write_str_ok@pos,c
  2588  00107A  0E0F               	movlw	15
  2589  00107C  6E1E               	movwf	md_uart_write_str_ok@numRetries,c
  2590                           
  2591                           ;uart.c: 72: CREN1 = 0;
  2592  00107E  98AB               	bcf	4011,4,c	;volatile
  2593                           
  2594                           ;uart.c: 73: tmr5_cnt = 0;
  2595  001080  0E00               	movlw	0
  2596  001082  6E41               	movwf	_tmr5_cnt,c
  2597                           
  2598                           ;uart.c: 74: receivedOK = 0;
  2599  001084  0E00               	movlw	0
  2600  001086  6E3F               	movwf	_receivedOK,c
  2601                           
  2602                           ;uart.c: 75: receivedERR = 0;
  2603  001088  0E00               	movlw	0
  2604  00108A  6E3E               	movwf	_receivedERR,c
  2605                           
  2606                           ;uart.c: 76: timedOut = 0;
  2607  00108C  0E00               	movlw	0
  2608  00108E  6E3C               	movwf	_timedOut,c
  2609                           
  2610                           ;uart.c: 77: while (numRetries-- > 0 && !receivedOK)
  2611  001090  D0F5               	goto	l271
  2612  001092                     
  2613                           ;uart.c: 78: {
  2614                           ;uart.c: 79: timedOut = 0;
  2615  001092  0E00               	movlw	0
  2616  001094  6E3C               	movwf	_timedOut,c
  2617                           
  2618                           ;uart.c: 80: for (index = 0; index < len1; index++)
  2619  001096  0E00               	movlw	0
  2620  001098  6E1F               	movwf	md_uart_write_str_ok@index,c
  2621  00109A  D01A               	goto	l243
  2622  00109C                     
  2623                           ;uart.c: 81: {
  2624                           ;uart.c: 82: referenceBuf[index] = *data;
  2625  00109C  C017  FFD9         	movff	md_uart_write_str_ok@data,fsr2l
  2626  0010A0  C018  FFDA         	movff	md_uart_write_str_ok@data+1,fsr2h
  2627  0010A4  501F               	movf	md_uart_write_str_ok@index,w,c
  2628  0010A6  0D01               	mullw	1
  2629  0010A8  0EB1               	movlw	low _referenceBuf
  2630  0010AA  24F3               	addwf	prodl,w,c
  2631  0010AC  6EE1               	movwf	fsr1l,c
  2632  0010AE  0E01               	movlw	high _referenceBuf
  2633  0010B0  20F4               	addwfc	prodh,w,c
  2634  0010B2  6EE2               	movwf	fsr1h,c
  2635  0010B4  CFDF FFE7          	movff	indf2,indf1
  2636                           
  2637                           ;uart.c: 83: currentChar = *data;
  2638  0010B8  C017  FFD9         	movff	md_uart_write_str_ok@data,fsr2l
  2639  0010BC  C018  FFDA         	movff	md_uart_write_str_ok@data+1,fsr2h
  2640  0010C0  50DF               	movf	indf2,w,c
  2641  0010C2  6E20               	movwf	md_uart_write_str_ok@currentChar,c
  2642                           
  2643                           ;uart.c: 84: md_uart_send(currentChar);
  2644  0010C4  5020               	movf	md_uart_write_str_ok@currentChar,w,c
  2645  0010C6  EC52  F00D         	call	_md_uart_send
  2646                           
  2647                           ;uart.c: 85: data++;
  2648  0010CA  4A17               	infsnz	md_uart_write_str_ok@data,f,c
  2649  0010CC  2A18               	incf	md_uart_write_str_ok@data+1,f,c
  2650  0010CE  2A1F               	incf	md_uart_write_str_ok@index,f,c
  2651  0010D0                     l243:
  2652  0010D0  5019               	movf	md_uart_write_str_ok@len1,w,c
  2653  0010D2  5C1F               	subwf	md_uart_write_str_ok@index,w,c
  2654  0010D4  A0D8               	btfss	status,0,c
  2655  0010D6  D7E2               	goto	l244
  2656                           
  2657                           ;uart.c: 86: }
  2658                           ;uart.c: 89: if (waitToSendMoreData)
  2659  0010D8  501B               	movf	md_uart_write_str_ok@waitToSendMoreData,w,c
  2660  0010DA  B4D8               	btfsc	status,2,c
  2661  0010DC  D00D               	goto	l252
  2662                           
  2663                           ;uart.c: 90: {
  2664                           ;uart.c: 91: CREN1 = 1;
  2665  0010DE  88AB               	bsf	4011,4,c	;volatile
  2666  0010E0  AA9E               	btfss	3998,5,c	;volatile
  2667  0010E2  D7FE               	goto	l248
  2668                           
  2669                           ;uart.c: 93: currentChar = RC1REG;
  2670  0010E4  CFAE F020          	movff	4014,md_uart_write_str_ok@currentChar	;volatile
  2671                           
  2672                           ;uart.c: 94: if (currentChar == '<')
  2673  0010E8  0E3C               	movlw	60
  2674  0010EA  1820               	xorwf	md_uart_write_str_ok@currentChar,w,c
  2675  0010EC  A4D8               	btfss	status,2,c
  2676  0010EE  D002               	goto	l250
  2677                           
  2678                           ;uart.c: 95: {
  2679                           ;uart.c: 96: return 1;
  2680  0010F0  0E01               	movlw	1
  2681  0010F2  0012               	return	
  2682  0010F4                     l250:
  2683                           
  2684                           ;uart.c: 98: else
  2685                           ;uart.c: 99: return 0;
  2686  0010F4  0E00               	movlw	0
  2687  0010F6  0012               	return	
  2688  0010F8                     l252:
  2689                           
  2690                           ;uart.c: 100: }
  2691                           ;uart.c: 101: if (wantOk)
  2692  0010F8  501A               	movf	md_uart_write_str_ok@wantOk,w,c
  2693  0010FA  B4D8               	btfsc	status,2,c
  2694  0010FC  D0BA               	goto	l253
  2695                           
  2696                           ;uart.c: 102: {
  2697                           ;uart.c: 103: CREN1 = 1;
  2698  0010FE  88AB               	bsf	4011,4,c	;volatile
  2699                           
  2700                           ;uart.c: 104: reload_tmr5_pt25s();
  2701  001100  EC23  F00D         	call	_reload_tmr5_pt25s	;wreg free
  2702                           
  2703                           ;uart.c: 105: while ((!receivedOK || !receivedERR) && !timedOut)
  2704  001104  D0A9               	goto	l254
  2705  001106                     
  2706                           ;uart.c: 106: {
  2707                           ;uart.c: 107: while (!RC1IF);
  2708  001106  AA9E               	btfss	3998,5,c	;volatile
  2709  001108  D7FE               	goto	l255
  2710                           
  2711                           ;uart.c: 108: currentChar = RC1REG;
  2712  00110A  CFAE F020          	movff	4014,md_uart_write_str_ok@currentChar	;volatile
  2713                           
  2714                           ;uart.c: 109: mdRxBuf[pos] = currentChar;
  2715  00110E  5021               	movf	md_uart_write_str_ok@pos,w,c
  2716  001110  0D01               	mullw	1
  2717  001112  0E00               	movlw	low _mdRxBuf
  2718  001114  24F3               	addwf	prodl,w,c
  2719  001116  6ED9               	movwf	fsr2l,c
  2720  001118  0E02               	movlw	high _mdRxBuf
  2721  00111A  20F4               	addwfc	prodh,w,c
  2722  00111C  6EDA               	movwf	fsr2h,c
  2723  00111E  C020  FFDF         	movff	md_uart_write_str_ok@currentChar,indf2
  2724                           
  2725                           ;uart.c: 110: if (pos >= 2)
  2726  001122  0E01               	movlw	1
  2727  001124  6421               	cpfsgt	md_uart_write_str_ok@pos,c
  2728  001126  D097               	goto	l264
  2729                           
  2730                           ;uart.c: 111: {
  2731                           ;uart.c: 112: if (mdRxBuf[(uint8_t)(pos - 2)] == 'O' && mdRxBuf[(uint8_t)(pos - 1)] == '
      +                          K' && (mdRxBuf[pos] == '\r' || mdRxBuf[pos] == '\n'))
  2732  001128  C021  F01C         	movff	md_uart_write_str_ok@pos,??_md_uart_write_str_ok
  2733  00112C  0EFE               	movlw	254
  2734  00112E  261C               	addwf	??_md_uart_write_str_ok,f,c
  2735  001130  501C               	movf	??_md_uart_write_str_ok,w,c
  2736  001132  0D01               	mullw	1
  2737  001134  0E00               	movlw	low _mdRxBuf
  2738  001136  24F3               	addwf	prodl,w,c
  2739  001138  6ED9               	movwf	fsr2l,c
  2740  00113A  0E02               	movlw	high _mdRxBuf
  2741  00113C  20F4               	addwfc	prodh,w,c
  2742  00113E  6EDA               	movwf	fsr2h,c
  2743  001140  0E4F               	movlw	79
  2744  001142  18DE               	xorwf	postinc2,w,c
  2745  001144  A4D8               	btfss	status,2,c
  2746  001146  D02F               	goto	l260
  2747  001148  C021  F01C         	movff	md_uart_write_str_ok@pos,??_md_uart_write_str_ok
  2748  00114C  0EFF               	movlw	255
  2749  00114E  261C               	addwf	??_md_uart_write_str_ok,f,c
  2750  001150  501C               	movf	??_md_uart_write_str_ok,w,c
  2751  001152  0D01               	mullw	1
  2752  001154  0E00               	movlw	low _mdRxBuf
  2753  001156  24F3               	addwf	prodl,w,c
  2754  001158  6ED9               	movwf	fsr2l,c
  2755  00115A  0E02               	movlw	high _mdRxBuf
  2756  00115C  20F4               	addwfc	prodh,w,c
  2757  00115E  6EDA               	movwf	fsr2h,c
  2758  001160  0E4B               	movlw	75
  2759  001162  18DE               	xorwf	postinc2,w,c
  2760  001164  A4D8               	btfss	status,2,c
  2761  001166  D01F               	goto	l260
  2762  001168  5021               	movf	md_uart_write_str_ok@pos,w,c
  2763  00116A  0D01               	mullw	1
  2764  00116C  0E00               	movlw	low _mdRxBuf
  2765  00116E  24F3               	addwf	prodl,w,c
  2766  001170  6ED9               	movwf	fsr2l,c
  2767  001172  0E02               	movlw	high _mdRxBuf
  2768  001174  20F4               	addwfc	prodh,w,c
  2769  001176  6EDA               	movwf	fsr2h,c
  2770  001178  0E0D               	movlw	13
  2771  00117A  18DE               	xorwf	postinc2,w,c
  2772  00117C  B4D8               	btfsc	status,2,c
  2773  00117E  D00C               	goto	u1620
  2774  001180  5021               	movf	md_uart_write_str_ok@pos,w,c
  2775  001182  0D01               	mullw	1
  2776  001184  0E00               	movlw	low _mdRxBuf
  2777  001186  24F3               	addwf	prodl,w,c
  2778  001188  6ED9               	movwf	fsr2l,c
  2779  00118A  0E02               	movlw	high _mdRxBuf
  2780  00118C  20F4               	addwfc	prodh,w,c
  2781  00118E  6EDA               	movwf	fsr2h,c
  2782  001190  0E0A               	movlw	10
  2783  001192  18DE               	xorwf	postinc2,w,c
  2784  001194  A4D8               	btfss	status,2,c
  2785  001196  D007               	goto	l260
  2786  001198                     u1620:
  2787                           
  2788                           ;uart.c: 114: {
  2789                           ;uart.c: 115: CREN1 = 0;
  2790  001198  98AB               	bcf	4011,4,c	;volatile
  2791                           
  2792                           ;uart.c: 116: receivedOK = 1;
  2793  00119A  0E01               	movlw	1
  2794  00119C  6E3F               	movwf	_receivedOK,c
  2795                           
  2796                           ;uart.c: 117: receivedERR = 0;
  2797  00119E  0E00               	movlw	0
  2798  0011A0  6E3E               	movwf	_receivedERR,c
  2799                           
  2800                           ;uart.c: 118: return receivedOK;
  2801  0011A2  503F               	movf	_receivedOK,w,c
  2802  0011A4  0012               	return	
  2803  0011A6                     l260:
  2804                           
  2805                           ;uart.c: 119: }
  2806                           ;uart.c: 120: if (pos >= 5)
  2807  0011A6  0E04               	movlw	4
  2808  0011A8  6421               	cpfsgt	md_uart_write_str_ok@pos,c
  2809  0011AA  D055               	goto	l264
  2810                           
  2811                           ;uart.c: 121: {
  2812                           ;uart.c: 122: if (mdRxBuf[(uint8_t)(pos - 5)] == 'E' && mdRxBuf[(uint8_t)(pos - 4)] == '
      +                          R' && mdRxBuf[(uint8_t)(pos - 3)] == 'R' && mdRxBuf[(uint8_t)(pos - 2)] == 'O' && mdRxBu
      +                          f[(uint8_t)(pos - 1)] == 'R')
  2813  0011AC  C021  F01C         	movff	md_uart_write_str_ok@pos,??_md_uart_write_str_ok
  2814  0011B0  0EFB               	movlw	251
  2815  0011B2  261C               	addwf	??_md_uart_write_str_ok,f,c
  2816  0011B4  501C               	movf	??_md_uart_write_str_ok,w,c
  2817  0011B6  0D01               	mullw	1
  2818  0011B8  0E00               	movlw	low _mdRxBuf
  2819  0011BA  24F3               	addwf	prodl,w,c
  2820  0011BC  6ED9               	movwf	fsr2l,c
  2821  0011BE  0E02               	movlw	high _mdRxBuf
  2822  0011C0  20F4               	addwfc	prodh,w,c
  2823  0011C2  6EDA               	movwf	fsr2h,c
  2824  0011C4  0E45               	movlw	69
  2825  0011C6  18DE               	xorwf	postinc2,w,c
  2826  0011C8  A4D8               	btfss	status,2,c
  2827  0011CA  D045               	goto	l264
  2828  0011CC  C021  F01C         	movff	md_uart_write_str_ok@pos,??_md_uart_write_str_ok
  2829  0011D0  0EFC               	movlw	252
  2830  0011D2  261C               	addwf	??_md_uart_write_str_ok,f,c
  2831  0011D4  501C               	movf	??_md_uart_write_str_ok,w,c
  2832  0011D6  0D01               	mullw	1
  2833  0011D8  0E00               	movlw	low _mdRxBuf
  2834  0011DA  24F3               	addwf	prodl,w,c
  2835  0011DC  6ED9               	movwf	fsr2l,c
  2836  0011DE  0E02               	movlw	high _mdRxBuf
  2837  0011E0  20F4               	addwfc	prodh,w,c
  2838  0011E2  6EDA               	movwf	fsr2h,c
  2839  0011E4  0E52               	movlw	82
  2840  0011E6  18DE               	xorwf	postinc2,w,c
  2841  0011E8  A4D8               	btfss	status,2,c
  2842  0011EA  D035               	goto	l264
  2843  0011EC  C021  F01C         	movff	md_uart_write_str_ok@pos,??_md_uart_write_str_ok
  2844  0011F0  0EFD               	movlw	253
  2845  0011F2  261C               	addwf	??_md_uart_write_str_ok,f,c
  2846  0011F4  501C               	movf	??_md_uart_write_str_ok,w,c
  2847  0011F6  0D01               	mullw	1
  2848  0011F8  0E00               	movlw	low _mdRxBuf
  2849  0011FA  24F3               	addwf	prodl,w,c
  2850  0011FC  6ED9               	movwf	fsr2l,c
  2851  0011FE  0E02               	movlw	high _mdRxBuf
  2852  001200  20F4               	addwfc	prodh,w,c
  2853  001202  6EDA               	movwf	fsr2h,c
  2854  001204  0E52               	movlw	82
  2855  001206  18DE               	xorwf	postinc2,w,c
  2856  001208  A4D8               	btfss	status,2,c
  2857  00120A  D025               	goto	l264
  2858  00120C  C021  F01C         	movff	md_uart_write_str_ok@pos,??_md_uart_write_str_ok
  2859  001210  0EFE               	movlw	254
  2860  001212  261C               	addwf	??_md_uart_write_str_ok,f,c
  2861  001214  501C               	movf	??_md_uart_write_str_ok,w,c
  2862  001216  0D01               	mullw	1
  2863  001218  0E00               	movlw	low _mdRxBuf
  2864  00121A  24F3               	addwf	prodl,w,c
  2865  00121C  6ED9               	movwf	fsr2l,c
  2866  00121E  0E02               	movlw	high _mdRxBuf
  2867  001220  20F4               	addwfc	prodh,w,c
  2868  001222  6EDA               	movwf	fsr2h,c
  2869  001224  0E4F               	movlw	79
  2870  001226  18DE               	xorwf	postinc2,w,c
  2871  001228  A4D8               	btfss	status,2,c
  2872  00122A  D015               	goto	l264
  2873  00122C  C021  F01C         	movff	md_uart_write_str_ok@pos,??_md_uart_write_str_ok
  2874  001230  0EFF               	movlw	255
  2875  001232  261C               	addwf	??_md_uart_write_str_ok,f,c
  2876  001234  501C               	movf	??_md_uart_write_str_ok,w,c
  2877  001236  0D01               	mullw	1
  2878  001238  0E00               	movlw	low _mdRxBuf
  2879  00123A  24F3               	addwf	prodl,w,c
  2880  00123C  6ED9               	movwf	fsr2l,c
  2881  00123E  0E02               	movlw	high _mdRxBuf
  2882  001240  20F4               	addwfc	prodh,w,c
  2883  001242  6EDA               	movwf	fsr2h,c
  2884  001244  0E52               	movlw	82
  2885  001246  18DE               	xorwf	postinc2,w,c
  2886  001248  A4D8               	btfss	status,2,c
  2887  00124A  D005               	goto	l264
  2888                           
  2889                           ;uart.c: 125: {
  2890                           ;uart.c: 126: receivedOK = 0;
  2891  00124C  0E00               	movlw	0
  2892  00124E  6E3F               	movwf	_receivedOK,c
  2893                           
  2894                           ;uart.c: 127: receivedERR = 1;
  2895  001250  0E01               	movlw	1
  2896  001252  6E3E               	movwf	_receivedERR,c
  2897                           
  2898                           ;uart.c: 128: CREN1 = 0;
  2899  001254  98AB               	bcf	4011,4,c	;volatile
  2900  001256                     l264:
  2901                           
  2902                           ;uart.c: 129: }
  2903                           ;uart.c: 130: }
  2904                           ;uart.c: 131: }
  2905                           ;uart.c: 132: pos++;
  2906  001256  2A21               	incf	md_uart_write_str_ok@pos,f,c
  2907  001258                     l254:
  2908  001258  503F               	movf	_receivedOK,w,c
  2909  00125A  B4D8               	btfsc	status,2,c
  2910  00125C  D003               	goto	u1700
  2911  00125E  503E               	movf	_receivedERR,w,c
  2912  001260  A4D8               	btfss	status,2,c
  2913  001262  D003               	goto	u1710
  2914  001264                     u1700:
  2915  001264  503C               	movf	_timedOut,w,c
  2916  001266  B4D8               	btfsc	status,2,c
  2917  001268  D74E               	goto	l255
  2918  00126A                     u1710:
  2919                           
  2920                           ;uart.c: 133: }
  2921                           ;uart.c: 134: disable_tmr5();
  2922  00126A  EC58  F00D         	call	_disable_tmr5	;wreg free
  2923                           
  2924                           ;uart.c: 135: CREN1 = 0;
  2925  00126E  98AB               	bcf	4011,4,c	;volatile
  2926                           
  2927                           ;uart.c: 142: }
  2928  001270  D005               	goto	l271
  2929  001272                     l253:
  2930                           
  2931                           ;uart.c: 143: else if (!wantOk)
  2932  001272  501A               	movf	md_uart_write_str_ok@wantOk,w,c
  2933  001274  A4D8               	btfss	status,2,c
  2934  001276  D002               	goto	l271
  2935                           
  2936                           ;uart.c: 144: receivedOK = 1;
  2937  001278  0E01               	movlw	1
  2938  00127A  6E3F               	movwf	_receivedOK,c
  2939  00127C                     l271:
  2940  00127C  061E               	decf	md_uart_write_str_ok@numRetries,f,c
  2941  00127E  281E               	incf	md_uart_write_str_ok@numRetries,w,c
  2942  001280  B4D8               	btfsc	status,2,c
  2943  001282  D003               	goto	u1740
  2944  001284  503F               	movf	_receivedOK,w,c
  2945  001286  B4D8               	btfsc	status,2,c
  2946  001288  D704               	goto	l242
  2947  00128A                     u1740:
  2948                           
  2949                           ;uart.c: 146: }
  2950                           ;uart.c: 149: if (!wantOk && !waitToSendMoreData)
  2951  00128A  501A               	movf	md_uart_write_str_ok@wantOk,w,c
  2952  00128C  A4D8               	btfss	status,2,c
  2953  00128E  D00D               	goto	l275
  2954  001290  501B               	movf	md_uart_write_str_ok@waitToSendMoreData,w,c
  2955  001292  A4D8               	btfss	status,2,c
  2956  001294  D00A               	goto	l275
  2957                           
  2958                           ;uart.c: 150: {
  2959                           ;uart.c: 151: receivedOK = 0;
  2960  001296  0E00               	movlw	0
  2961  001298  6E3F               	movwf	_receivedOK,c
  2962                           
  2963                           ;uart.c: 152: GIE = 0;
  2964  00129A  9EF2               	bcf	intcon,7,c	;volatile
  2965                           
  2966                           ;uart.c: 153: CREN1 = 1;
  2967  00129C  88AB               	bsf	4011,4,c	;volatile
  2968                           
  2969                           ;uart.c: 154: RC1IE = 1;
  2970  00129E  8A9D               	bsf	3997,5,c	;volatile
  2971                           
  2972                           ;uart.c: 155: PEIE = 1;
  2973  0012A0  8CF2               	bsf	intcon,6,c	;volatile
  2974                           
  2975                           ;uart.c: 156: RC1IF = 0;
  2976  0012A2  9A9E               	bcf	3998,5,c	;volatile
  2977                           
  2978                           ;uart.c: 157: GIE = 1;
  2979  0012A4  8EF2               	bsf	intcon,7,c	;volatile
  2980                           
  2981                           ;uart.c: 158: return 1;
  2982  0012A6  0E01               	movlw	1
  2983  0012A8  0012               	return	
  2984  0012AA                     l275:
  2985                           
  2986                           ;uart.c: 159: }
  2987                           ;uart.c: 160: return receivedOK;
  2988  0012AA  503F               	movf	_receivedOK,w,c
  2989  0012AC  0012               	return	
  2990  0012AE                     __end_of_md_uart_write_str_ok:
  2991                           	opt stack 0
  2992                           tblptru	equ	0xFF8
  2993                           tblptrh	equ	0xFF7
  2994                           tblptrl	equ	0xFF6
  2995                           tablat	equ	0xFF5
  2996                           prodh	equ	0xFF4
  2997                           prodl	equ	0xFF3
  2998                           intcon	equ	0xFF2
  2999                           postinc0	equ	0xFEE
  3000                           wreg	equ	0xFE8
  3001                           indf1	equ	0xFE7
  3002                           postdec1	equ	0xFE5
  3003                           plusw1	equ	0xFE3
  3004                           fsr1h	equ	0xFE2
  3005                           fsr1l	equ	0xFE1
  3006                           indf2	equ	0xFDF
  3007                           postinc2	equ	0xFDE
  3008                           plusw2	equ	0xFDB
  3009                           fsr2h	equ	0xFDA
  3010                           fsr2l	equ	0xFD9
  3011                           status	equ	0xFD8
  3012                           
  3013 ;; *************** function _reload_tmr5_pt25s *****************
  3014 ;; Defined at:
  3015 ;;		line 167 in file "main.c"
  3016 ;; Parameters:    Size  Location     Type
  3017 ;;		None
  3018 ;; Auto vars:     Size  Location     Type
  3019 ;;		None
  3020 ;; Return value:  Size  Location     Type
  3021 ;;                  1    wreg      void 
  3022 ;; Registers used:
  3023 ;;		wreg, status,2
  3024 ;; Tracked objects:
  3025 ;;		On entry : 0/0
  3026 ;;		On exit  : 0/0
  3027 ;;		Unchanged: 0/0
  3028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3032 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3033 ;;Total ram usage:        0 bytes
  3034 ;; Hardware stack levels used:    1
  3035 ;; Hardware stack levels required when called:    3
  3036 ;; This function calls:
  3037 ;;		Nothing
  3038 ;; This function is called by:
  3039 ;;		_md_uart_write_str_ok
  3040 ;;		_start_md_boot_timer
  3041 ;; This function uses a non-reentrant model
  3042 ;;
  3043                           
  3044                           	psect	text11
  3045  001A46                     __ptext11:
  3046                           	opt stack 0
  3047  001A46                     _reload_tmr5_pt25s:
  3048                           	opt stack 25
  3049                           
  3050                           ;main.c: 169: INTCONbits.GIE = 0;
  3051                           
  3052                           ;incstack = 0
  3053  001A46  9EF2               	bcf	intcon,7,c	;volatile
  3054                           
  3055                           ;main.c: 170: T5CON = 0b00110101;
  3056  001A48  0E35               	movlw	53
  3057  001A4A  010F               	movlb	15	; () banked
  3058  001A4C  6F4E               	movwf	78,b	;volatile
  3059                           
  3060                           ; BSR set to: 15
  3061                           ;main.c: 172: PIE5bits.TMR5IE = 1;
  3062  001A4E  827D               	bsf	3965,1,c	;volatile
  3063                           
  3064                           ; BSR set to: 15
  3065                           ;main.c: 173: INTCONbits.PEIE = 1;
  3066  001A50  8CF2               	bsf	intcon,6,c	;volatile
  3067                           
  3068                           ; BSR set to: 15
  3069                           ;main.c: 174: PIR5bits.TMR5IF = 0;
  3070  001A52  927E               	bcf	3966,1,c	;volatile
  3071                           
  3072                           ;main.c: 175: TMR5H = 0x0B;
  3073  001A54  0E0B               	movlw	11
  3074  001A56  6F50               	movwf	80,b	;volatile
  3075                           
  3076                           ;main.c: 176: TMR5L = 0x45;
  3077  001A58  0E45               	movlw	69
  3078  001A5A  6F4F               	movwf	79,b	;volatile
  3079                           
  3080                           ; BSR set to: 15
  3081                           ;main.c: 177: INTCONbits.GIE = 1;
  3082  001A5C  8EF2               	bsf	intcon,7,c	;volatile
  3083                           
  3084                           ; BSR set to: 15
  3085  001A5E  0012               	return		;funcret
  3086  001A60                     __end_of_reload_tmr5_pt25s:
  3087                           	opt stack 0
  3088                           tblptru	equ	0xFF8
  3089                           tblptrh	equ	0xFF7
  3090                           tblptrl	equ	0xFF6
  3091                           tablat	equ	0xFF5
  3092                           prodh	equ	0xFF4
  3093                           prodl	equ	0xFF3
  3094                           intcon	equ	0xFF2
  3095                           postinc0	equ	0xFEE
  3096                           wreg	equ	0xFE8
  3097                           indf1	equ	0xFE7
  3098                           postdec1	equ	0xFE5
  3099                           plusw1	equ	0xFE3
  3100                           fsr1h	equ	0xFE2
  3101                           fsr1l	equ	0xFE1
  3102                           indf2	equ	0xFDF
  3103                           postinc2	equ	0xFDE
  3104                           plusw2	equ	0xFDB
  3105                           fsr2h	equ	0xFDA
  3106                           fsr2l	equ	0xFD9
  3107                           status	equ	0xFD8
  3108                           
  3109 ;; *************** function _md_uart_send *****************
  3110 ;; Defined at:
  3111 ;;		line 163 in file "uart.c"
  3112 ;; Parameters:    Size  Location     Type
  3113 ;;  data            1    wreg     unsigned char 
  3114 ;; Auto vars:     Size  Location     Type
  3115 ;;  data            1   21[COMRAM] unsigned char 
  3116 ;; Return value:  Size  Location     Type
  3117 ;;                  1    wreg      void 
  3118 ;; Registers used:
  3119 ;;		wreg
  3120 ;; Tracked objects:
  3121 ;;		On entry : 0/0
  3122 ;;		On exit  : 0/0
  3123 ;;		Unchanged: 0/0
  3124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3126 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3128 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3129 ;;Total ram usage:        1 bytes
  3130 ;; Hardware stack levels used:    1
  3131 ;; Hardware stack levels required when called:    3
  3132 ;; This function calls:
  3133 ;;		Nothing
  3134 ;; This function is called by:
  3135 ;;		_md_uart_write_str_ok
  3136 ;; This function uses a non-reentrant model
  3137 ;;
  3138                           
  3139                           	psect	text12
  3140  001AA4                     __ptext12:
  3141                           	opt stack 0
  3142  001AA4                     _md_uart_send:
  3143                           	opt stack 24
  3144                           
  3145                           ; BSR set to: 15
  3146                           ;incstack = 0
  3147                           ;md_uart_send@data stored from wreg
  3148  001AA4  6E16               	movwf	md_uart_send@data,c
  3149  001AA6                     
  3150                           ;uart.c: 165: while (!TRMT1);
  3151  001AA6  A2AC               	btfss	4012,1,c	;volatile
  3152  001AA8  D7FE               	goto	l2129
  3153                           
  3154                           ;uart.c: 166: TX1REG = data;
  3155  001AAA  C016  FFAD         	movff	md_uart_send@data,4013	;volatile
  3156  001AAE  0012               	return		;funcret
  3157  001AB0                     __end_of_md_uart_send:
  3158                           	opt stack 0
  3159                           tblptru	equ	0xFF8
  3160                           tblptrh	equ	0xFF7
  3161                           tblptrl	equ	0xFF6
  3162                           tablat	equ	0xFF5
  3163                           prodh	equ	0xFF4
  3164                           prodl	equ	0xFF3
  3165                           intcon	equ	0xFF2
  3166                           postinc0	equ	0xFEE
  3167                           wreg	equ	0xFE8
  3168                           indf1	equ	0xFE7
  3169                           postdec1	equ	0xFE5
  3170                           plusw1	equ	0xFE3
  3171                           fsr1h	equ	0xFE2
  3172                           fsr1l	equ	0xFE1
  3173                           indf2	equ	0xFDF
  3174                           postinc2	equ	0xFDE
  3175                           plusw2	equ	0xFDB
  3176                           fsr2h	equ	0xFDA
  3177                           fsr2l	equ	0xFD9
  3178                           status	equ	0xFD8
  3179                           
  3180 ;; *************** function _disable_tmr5 *****************
  3181 ;; Defined at:
  3182 ;;		line 180 in file "main.c"
  3183 ;; Parameters:    Size  Location     Type
  3184 ;;		None
  3185 ;; Auto vars:     Size  Location     Type
  3186 ;;		None
  3187 ;; Return value:  Size  Location     Type
  3188 ;;                  1    wreg      void 
  3189 ;; Registers used:
  3190 ;;		wreg, status,2
  3191 ;; Tracked objects:
  3192 ;;		On entry : 0/0
  3193 ;;		On exit  : 0/0
  3194 ;;		Unchanged: 0/0
  3195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3199 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3200 ;;Total ram usage:        0 bytes
  3201 ;; Hardware stack levels used:    1
  3202 ;; Hardware stack levels required when called:    3
  3203 ;; This function calls:
  3204 ;;		Nothing
  3205 ;; This function is called by:
  3206 ;;		_md_uart_write_str_ok
  3207 ;; This function uses a non-reentrant model
  3208 ;;
  3209                           
  3210                           	psect	text13
  3211  001AB0                     __ptext13:
  3212                           	opt stack 0
  3213  001AB0                     _disable_tmr5:
  3214                           	opt stack 24
  3215                           
  3216                           ;main.c: 182: tmr5_cnt = 0;
  3217                           
  3218                           ;incstack = 0
  3219  001AB0  0E00               	movlw	0
  3220  001AB2  6E41               	movwf	_tmr5_cnt,c
  3221                           
  3222                           ;main.c: 183: T5CONbits.TMR5ON = 0;
  3223  001AB4  010F               	movlb	15	; () banked
  3224  001AB6  914E               	bcf	78,0,b	;volatile
  3225                           
  3226                           ; BSR set to: 15
  3227                           ;main.c: 184: PIE5bits.TMR5IE = 0;
  3228  001AB8  927D               	bcf	3965,1,c	;volatile
  3229                           
  3230                           ; BSR set to: 15
  3231  001ABA  0012               	return		;funcret
  3232  001ABC                     __end_of_disable_tmr5:
  3233                           	opt stack 0
  3234                           tblptru	equ	0xFF8
  3235                           tblptrh	equ	0xFF7
  3236                           tblptrl	equ	0xFF6
  3237                           tablat	equ	0xFF5
  3238                           prodh	equ	0xFF4
  3239                           prodl	equ	0xFF3
  3240                           intcon	equ	0xFF2
  3241                           postinc0	equ	0xFEE
  3242                           wreg	equ	0xFE8
  3243                           indf1	equ	0xFE7
  3244                           postdec1	equ	0xFE5
  3245                           plusw1	equ	0xFE3
  3246                           fsr1h	equ	0xFE2
  3247                           fsr1l	equ	0xFE1
  3248                           indf2	equ	0xFDF
  3249                           postinc2	equ	0xFDE
  3250                           plusw2	equ	0xFDB
  3251                           fsr2h	equ	0xFDA
  3252                           fsr2l	equ	0xFD9
  3253                           status	equ	0xFD8
  3254                           
  3255 ;; *************** function _init_md_uart *****************
  3256 ;; Defined at:
  3257 ;;		line 7 in file "uart.c"
  3258 ;; Parameters:    Size  Location     Type
  3259 ;;		None
  3260 ;; Auto vars:     Size  Location     Type
  3261 ;;		None
  3262 ;; Return value:  Size  Location     Type
  3263 ;;                  1    wreg      void 
  3264 ;; Registers used:
  3265 ;;		wreg, status,2
  3266 ;; Tracked objects:
  3267 ;;		On entry : 0/0
  3268 ;;		On exit  : 0/0
  3269 ;;		Unchanged: 0/0
  3270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3272 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3274 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3275 ;;Total ram usage:        0 bytes
  3276 ;; Hardware stack levels used:    1
  3277 ;; Hardware stack levels required when called:    3
  3278 ;; This function calls:
  3279 ;;		Nothing
  3280 ;; This function is called by:
  3281 ;;		_send_md_cfg_cmds_ok
  3282 ;;		_setup_data_ok
  3283 ;;		_send_over_socket_ok
  3284 ;;		_close_socket_ok
  3285 ;; This function uses a non-reentrant model
  3286 ;;
  3287                           
  3288                           	psect	text14
  3289  001A00                     __ptext14:
  3290                           	opt stack 0
  3291  001A00                     _init_md_uart:
  3292                           	opt stack 25
  3293                           
  3294                           ;uart.c: 9: BAUDCON1bits.BRG16 = 1;
  3295                           
  3296                           ; BSR set to: 15
  3297                           ;incstack = 0
  3298  001A00  86B8               	bsf	4024,3,c	;volatile
  3299                           
  3300                           ;uart.c: 10: BAUDCON1bits.RCIDL = 1;
  3301  001A02  8CB8               	bsf	4024,6,c	;volatile
  3302                           
  3303                           ;uart.c: 11: BAUDCONbits.CKTXP = 0;
  3304  001A04  98B8               	bcf	4024,4,c	;volatile
  3305                           
  3306                           ;uart.c: 12: BAUDCONbits.WUE = 0;
  3307  001A06  92B8               	bcf	4024,1,c	;volatile
  3308                           
  3309                           ;uart.c: 13: BAUDCONbits.ABDEN = 0;
  3310  001A08  90B8               	bcf	4024,0,c	;volatile
  3311                           
  3312                           ;uart.c: 14: TXSTA1bits.BRGH = 1;
  3313  001A0A  84AC               	bsf	4012,2,c	;volatile
  3314                           
  3315                           ;uart.c: 15: TXSTA1bits.SYNC = 0;
  3316  001A0C  98AC               	bcf	4012,4,c	;volatile
  3317                           
  3318                           ;uart.c: 16: SPBRGH1 = 0;
  3319  001A0E  0E00               	movlw	0
  3320  001A10  6EB0               	movwf	4016,c	;volatile
  3321                           
  3322                           ;uart.c: 17: SPBRG1 = 16;
  3323  001A12  0E10               	movlw	16
  3324  001A14  6EAF               	movwf	4015,c	;volatile
  3325                           
  3326                           ;uart.c: 19: RC1STAbits.SPEN = 1;
  3327  001A16  8EAB               	bsf	4011,7,c	;volatile
  3328                           
  3329                           ;uart.c: 20: TRISCbits.TRISC7 = 1;
  3330  001A18  8E94               	bsf	3988,7,c	;volatile
  3331                           
  3332                           ;uart.c: 21: TRISCbits.TRISC6 = 0;
  3333  001A1A  9C94               	bcf	3988,6,c	;volatile
  3334                           
  3335                           ;uart.c: 24: RCSTA1bits.CREN = 1;
  3336  001A1C  88AB               	bsf	4011,4,c	;volatile
  3337                           
  3338                           ;uart.c: 25: TXSTA1bits.TXEN = 1;
  3339  001A1E  8AAC               	bsf	4012,5,c	;volatile
  3340                           
  3341                           ;uart.c: 33: PIR1bits.RC1IF = 0;
  3342  001A20  9A9E               	bcf	3998,5,c	;volatile
  3343  001A22  0012               	return		;funcret
  3344  001A24                     __end_of_init_md_uart:
  3345                           	opt stack 0
  3346                           tblptru	equ	0xFF8
  3347                           tblptrh	equ	0xFF7
  3348                           tblptrl	equ	0xFF6
  3349                           tablat	equ	0xFF5
  3350                           prodh	equ	0xFF4
  3351                           prodl	equ	0xFF3
  3352                           intcon	equ	0xFF2
  3353                           postinc0	equ	0xFEE
  3354                           wreg	equ	0xFE8
  3355                           indf1	equ	0xFE7
  3356                           postdec1	equ	0xFE5
  3357                           plusw1	equ	0xFE3
  3358                           fsr1h	equ	0xFE2
  3359                           fsr1l	equ	0xFE1
  3360                           indf2	equ	0xFDF
  3361                           postinc2	equ	0xFDE
  3362                           plusw2	equ	0xFDB
  3363                           fsr2h	equ	0xFDA
  3364                           fsr2l	equ	0xFD9
  3365                           status	equ	0xFD8
  3366                           
  3367 ;; *************** function _isr *****************
  3368 ;; Defined at:
  3369 ;;		line 14 in file "main.c"
  3370 ;; Parameters:    Size  Location     Type
  3371 ;;		None
  3372 ;; Auto vars:     Size  Location     Type
  3373 ;;		None
  3374 ;; Return value:  Size  Location     Type
  3375 ;;                  1    wreg      void 
  3376 ;; Registers used:
  3377 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3378 ;; Tracked objects:
  3379 ;;		On entry : 0/0
  3380 ;;		On exit  : 0/0
  3381 ;;		Unchanged: 0/0
  3382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3384 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3385 ;;      Temps:         20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3386 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3387 ;;Total ram usage:       20 bytes
  3388 ;; Hardware stack levels used:    1
  3389 ;; Hardware stack levels required when called:    2
  3390 ;; This function calls:
  3391 ;;		_check_mdstate_tmr5
  3392 ;;		_disable_md_rxint
  3393 ;;		i2_disable_tmr5
  3394 ;;		i2_reload_tmr5_pt25s
  3395 ;; This function is called by:
  3396 ;;		Interrupt level 2
  3397 ;; This function uses a non-reentrant model
  3398 ;;
  3399                           
  3400                           	psect	intcode
  3401  000008                     __pintcode:
  3402                           	opt stack 0
  3403  000008                     _isr:
  3404                           	opt stack 24
  3405                           
  3406                           ;incstack = 0
  3407  000008  8244               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3408  00000A  CFFA F004          	movff	pclath,??_isr+2
  3409  00000E  CFFB F005          	movff	pclatu,??_isr+3
  3410  000012  CFE9 F006          	movff	fsr0l,??_isr+4
  3411  000016  CFEA F007          	movff	fsr0h,??_isr+5
  3412  00001A  CFE1 F008          	movff	fsr1l,??_isr+6
  3413  00001E  CFE2 F009          	movff	fsr1h,??_isr+7
  3414  000022  CFD9 F00A          	movff	fsr2l,??_isr+8
  3415  000026  CFDA F00B          	movff	fsr2h,??_isr+9
  3416  00002A  CFF3 F00C          	movff	prodl,??_isr+10
  3417  00002E  CFF4 F00D          	movff	prodh,??_isr+11
  3418  000032  CFF6 F00E          	movff	tblptrl,??_isr+12
  3419  000036  CFF7 F00F          	movff	tblptrh,??_isr+13
  3420  00003A  CFF8 F010          	movff	tblptru,??_isr+14
  3421  00003E  CFF5 F011          	movff	tablat,??_isr+15
  3422  000042  C044  F012         	movff	btemp,??_isr+16
  3423  000046  C045  F013         	movff	btemp+1,??_isr+17
  3424  00004A  C046  F014         	movff	btemp+2,??_isr+18
  3425  00004E  C047  F015         	movff	btemp+3,??_isr+19
  3426                           
  3427                           ;main.c: 16: if (RC1IF && PIE1bits.RCIE)
  3428  000052  BA9E               	btfsc	3998,5,c	;volatile
  3429  000054  AA9D               	btfss	3997,5,c	;volatile
  3430  000056  D0B7               	goto	i2l114
  3431                           
  3432                           ;main.c: 17: {
  3433                           ;main.c: 18: RC1IF = 0;
  3434  000058  9A9E               	bcf	3998,5,c	;volatile
  3435                           
  3436                           ;main.c: 19: currentChar = RC1REG;
  3437  00005A  CFAE F03B          	movff	4014,_currentChar	;volatile
  3438                           
  3439                           ;main.c: 20: mdRxBuf[endPtr++] = currentChar;
  3440  00005E  5040               	movf	_endPtr,w,c
  3441  000060  0D01               	mullw	1
  3442  000062  0E00               	movlw	low _mdRxBuf
  3443  000064  24F3               	addwf	prodl,w,c
  3444  000066  6ED9               	movwf	fsr2l,c
  3445  000068  0E02               	movlw	high _mdRxBuf
  3446  00006A  20F4               	addwfc	prodh,w,c
  3447  00006C  6EDA               	movwf	fsr2h,c
  3448  00006E  C03B  FFDF         	movff	_currentChar,indf2
  3449  000072  2A40               	incf	_endPtr,f,c
  3450                           
  3451                           ;main.c: 21: if (endPtr >= sizeof(mdRxBuf))
  3452  000074  0E9F               	movlw	159
  3453  000076  6440               	cpfsgt	_endPtr,c
  3454  000078  D001               	goto	i2l108
  3455                           
  3456                           ;main.c: 22: endPtr--;
  3457  00007A  0640               	decf	_endPtr,f,c
  3458  00007C                     i2l108:
  3459                           
  3460                           ;main.c: 23: if (endPtr > 2)
  3461  00007C  0E02               	movlw	2
  3462  00007E  6440               	cpfsgt	_endPtr,c
  3463  000080  D0A2               	goto	i2l114
  3464                           
  3465                           ;main.c: 24: {
  3466                           ;main.c: 26: if (mdRxBuf[(uint8_t)(endPtr - 2)] == 'O' && mdRxBuf[(uint8_t)(endPtr - 1)]
      +                           == 'K' && (mdRxBuf[endPtr] == '\r' || mdRxBuf[endPtr] == '\n'))
  3467  000082  C040  F002         	movff	_endPtr,??_isr
  3468  000086  0EFE               	movlw	254
  3469  000088  2602               	addwf	??_isr,f,c
  3470  00008A  5002               	movf	??_isr,w,c
  3471  00008C  0D01               	mullw	1
  3472  00008E  0E00               	movlw	low _mdRxBuf
  3473  000090  24F3               	addwf	prodl,w,c
  3474  000092  6ED9               	movwf	fsr2l,c
  3475  000094  0E02               	movlw	high _mdRxBuf
  3476  000096  20F4               	addwfc	prodh,w,c
  3477  000098  6EDA               	movwf	fsr2h,c
  3478  00009A  0E4F               	movlw	79
  3479  00009C  18DE               	xorwf	postinc2,w,c
  3480  00009E  A4D8               	btfss	status,2,c
  3481  0000A0  D036               	goto	i2l110
  3482  0000A2  C040  F002         	movff	_endPtr,??_isr
  3483  0000A6  0EFF               	movlw	255
  3484  0000A8  2602               	addwf	??_isr,f,c
  3485  0000AA  5002               	movf	??_isr,w,c
  3486  0000AC  0D01               	mullw	1
  3487  0000AE  0E00               	movlw	low _mdRxBuf
  3488  0000B0  24F3               	addwf	prodl,w,c
  3489  0000B2  6ED9               	movwf	fsr2l,c
  3490  0000B4  0E02               	movlw	high _mdRxBuf
  3491  0000B6  20F4               	addwfc	prodh,w,c
  3492  0000B8  6EDA               	movwf	fsr2h,c
  3493  0000BA  0E4B               	movlw	75
  3494  0000BC  18DE               	xorwf	postinc2,w,c
  3495  0000BE  A4D8               	btfss	status,2,c
  3496  0000C0  D026               	goto	i2l110
  3497  0000C2  5040               	movf	_endPtr,w,c
  3498  0000C4  0D01               	mullw	1
  3499  0000C6  0E00               	movlw	low _mdRxBuf
  3500  0000C8  24F3               	addwf	prodl,w,c
  3501  0000CA  6ED9               	movwf	fsr2l,c
  3502  0000CC  0E02               	movlw	high _mdRxBuf
  3503  0000CE  20F4               	addwfc	prodh,w,c
  3504  0000D0  6EDA               	movwf	fsr2h,c
  3505  0000D2  0E0D               	movlw	13
  3506  0000D4  18DE               	xorwf	postinc2,w,c
  3507  0000D6  B4D8               	btfsc	status,2,c
  3508  0000D8  D00C               	goto	i2u141_40
  3509  0000DA  5040               	movf	_endPtr,w,c
  3510  0000DC  0D01               	mullw	1
  3511  0000DE  0E00               	movlw	low _mdRxBuf
  3512  0000E0  24F3               	addwf	prodl,w,c
  3513  0000E2  6ED9               	movwf	fsr2l,c
  3514  0000E4  0E02               	movlw	high _mdRxBuf
  3515  0000E6  20F4               	addwfc	prodh,w,c
  3516  0000E8  6EDA               	movwf	fsr2h,c
  3517  0000EA  0E0A               	movlw	10
  3518  0000EC  18DE               	xorwf	postinc2,w,c
  3519  0000EE  A4D8               	btfss	status,2,c
  3520  0000F0  D00E               	goto	i2l110
  3521  0000F2                     i2u141_40:
  3522                           
  3523                           ;main.c: 28: {
  3524                           ;main.c: 29: tmr5_cnt = 0;
  3525  0000F2  0E00               	movlw	0
  3526  0000F4  6E41               	movwf	_tmr5_cnt,c
  3527                           
  3528                           ;main.c: 30: disable_tmr5();
  3529  0000F6  EC5E  F00D         	call	i2_disable_tmr5	;wreg free
  3530                           
  3531                           ;main.c: 31: TMR5IF = 0;
  3532  0000FA  927E               	bcf	3966,1,c	;volatile
  3533                           
  3534                           ;main.c: 32: receivedOK = 1;
  3535  0000FC  0E01               	movlw	1
  3536  0000FE  6E3F               	movwf	_receivedOK,c
  3537                           
  3538                           ;main.c: 33: receivedERR = 0;
  3539  000100  0E00               	movlw	0
  3540  000102  6E3E               	movwf	_receivedERR,c
  3541                           
  3542                           ;main.c: 34: timedOut = 0;
  3543  000104  0E00               	movlw	0
  3544  000106  6E3C               	movwf	_timedOut,c
  3545                           
  3546                           ;main.c: 35: disable_md_rxint();
  3547  000108  EC69  F00D         	call	_disable_md_rxint	;wreg free
  3548                           
  3549                           ;main.c: 36: }
  3550  00010C  D05C               	goto	i2l114
  3551  00010E                     i2l110:
  3552                           
  3553                           ;main.c: 37: else if (endPtr >= 5 && mdRxBuf[(uint8_t)(endPtr - 4)] == 'E' && mdRxBuf[(u
      +                          int8_t)(endPtr - 3)] == 'R' && mdRxBuf[(uint8_t)(endPtr - 2)] == 'R' && mdRxBuf[(uint8_t
      +                          )(endPtr - 1)] == 'O' && mdRxBuf[endPtr] == 'R')
  3554  00010E  0E04               	movlw	4
  3555  000110  6440               	cpfsgt	_endPtr,c
  3556  000112  D059               	goto	i2l114
  3557  000114  C040  F002         	movff	_endPtr,??_isr
  3558  000118  0EFC               	movlw	252
  3559  00011A  2602               	addwf	??_isr,f,c
  3560  00011C  5002               	movf	??_isr,w,c
  3561  00011E  0D01               	mullw	1
  3562  000120  0E00               	movlw	low _mdRxBuf
  3563  000122  24F3               	addwf	prodl,w,c
  3564  000124  6ED9               	movwf	fsr2l,c
  3565  000126  0E02               	movlw	high _mdRxBuf
  3566  000128  20F4               	addwfc	prodh,w,c
  3567  00012A  6EDA               	movwf	fsr2h,c
  3568  00012C  0E45               	movlw	69
  3569  00012E  18DE               	xorwf	postinc2,w,c
  3570  000130  A4D8               	btfss	status,2,c
  3571  000132  D049               	goto	i2l114
  3572  000134  C040  F002         	movff	_endPtr,??_isr
  3573  000138  0EFD               	movlw	253
  3574  00013A  2602               	addwf	??_isr,f,c
  3575  00013C  5002               	movf	??_isr,w,c
  3576  00013E  0D01               	mullw	1
  3577  000140  0E00               	movlw	low _mdRxBuf
  3578  000142  24F3               	addwf	prodl,w,c
  3579  000144  6ED9               	movwf	fsr2l,c
  3580  000146  0E02               	movlw	high _mdRxBuf
  3581  000148  20F4               	addwfc	prodh,w,c
  3582  00014A  6EDA               	movwf	fsr2h,c
  3583  00014C  0E52               	movlw	82
  3584  00014E  18DE               	xorwf	postinc2,w,c
  3585  000150  A4D8               	btfss	status,2,c
  3586  000152  D039               	goto	i2l114
  3587  000154  C040  F002         	movff	_endPtr,??_isr
  3588  000158  0EFE               	movlw	254
  3589  00015A  2602               	addwf	??_isr,f,c
  3590  00015C  5002               	movf	??_isr,w,c
  3591  00015E  0D01               	mullw	1
  3592  000160  0E00               	movlw	low _mdRxBuf
  3593  000162  24F3               	addwf	prodl,w,c
  3594  000164  6ED9               	movwf	fsr2l,c
  3595  000166  0E02               	movlw	high _mdRxBuf
  3596  000168  20F4               	addwfc	prodh,w,c
  3597  00016A  6EDA               	movwf	fsr2h,c
  3598  00016C  0E52               	movlw	82
  3599  00016E  18DE               	xorwf	postinc2,w,c
  3600  000170  A4D8               	btfss	status,2,c
  3601  000172  D029               	goto	i2l114
  3602  000174  C040  F002         	movff	_endPtr,??_isr
  3603  000178  0EFF               	movlw	255
  3604  00017A  2602               	addwf	??_isr,f,c
  3605  00017C  5002               	movf	??_isr,w,c
  3606  00017E  0D01               	mullw	1
  3607  000180  0E00               	movlw	low _mdRxBuf
  3608  000182  24F3               	addwf	prodl,w,c
  3609  000184  6ED9               	movwf	fsr2l,c
  3610  000186  0E02               	movlw	high _mdRxBuf
  3611  000188  20F4               	addwfc	prodh,w,c
  3612  00018A  6EDA               	movwf	fsr2h,c
  3613  00018C  0E4F               	movlw	79
  3614  00018E  18DE               	xorwf	postinc2,w,c
  3615  000190  A4D8               	btfss	status,2,c
  3616  000192  D019               	goto	i2l114
  3617  000194  5040               	movf	_endPtr,w,c
  3618  000196  0D01               	mullw	1
  3619  000198  0E00               	movlw	low _mdRxBuf
  3620  00019A  24F3               	addwf	prodl,w,c
  3621  00019C  6ED9               	movwf	fsr2l,c
  3622  00019E  0E02               	movlw	high _mdRxBuf
  3623  0001A0  20F4               	addwfc	prodh,w,c
  3624  0001A2  6EDA               	movwf	fsr2h,c
  3625  0001A4  0E52               	movlw	82
  3626  0001A6  18DE               	xorwf	postinc2,w,c
  3627  0001A8  A4D8               	btfss	status,2,c
  3628  0001AA  D00D               	goto	i2l114
  3629                           
  3630                           ;main.c: 40: {
  3631                           ;main.c: 41: tmr5_cnt = 0;
  3632  0001AC  0E00               	movlw	0
  3633  0001AE  6E41               	movwf	_tmr5_cnt,c
  3634                           
  3635                           ;main.c: 42: disable_tmr5();
  3636  0001B0  EC5E  F00D         	call	i2_disable_tmr5	;wreg free
  3637                           
  3638                           ;main.c: 43: TMR5IF = 0;
  3639  0001B4  927E               	bcf	3966,1,c	;volatile
  3640                           
  3641                           ;main.c: 44: receivedOK = 0;
  3642  0001B6  0E00               	movlw	0
  3643  0001B8  6E3F               	movwf	_receivedOK,c
  3644                           
  3645                           ;main.c: 45: receivedERR = 1;
  3646  0001BA  0E01               	movlw	1
  3647  0001BC  6E3E               	movwf	_receivedERR,c
  3648                           
  3649                           ;main.c: 46: timedOut = 0;
  3650  0001BE  0E00               	movlw	0
  3651  0001C0  6E3C               	movwf	_timedOut,c
  3652                           
  3653                           ;main.c: 47: disable_md_rxint();
  3654  0001C2  EC69  F00D         	call	_disable_md_rxint	;wreg free
  3655  0001C6                     i2l114:
  3656                           
  3657                           ;main.c: 48: }
  3658                           ;main.c: 49: }
  3659                           ;main.c: 50: }
  3660                           ;main.c: 52: if (TMR5IF)
  3661  0001C6  A27E               	btfss	3966,1,c	;volatile
  3662  0001C8  D006               	goto	i2l115
  3663                           
  3664                           ;main.c: 53: {
  3665                           ;main.c: 55: tmr5_cnt++;
  3666  0001CA  2A41               	incf	_tmr5_cnt,f,c
  3667                           
  3668                           ;main.c: 56: TMR5IF = 0;
  3669  0001CC  927E               	bcf	3966,1,c	;volatile
  3670                           
  3671                           ;main.c: 57: reload_tmr5_pt25s();
  3672  0001CE  EC30  F00D         	call	i2_reload_tmr5_pt25s	;wreg free
  3673                           
  3674                           ;main.c: 59: check_mdstate_tmr5();
  3675  0001D2  ECDE  F00A         	call	_check_mdstate_tmr5	;wreg free
  3676  0001D6                     i2l115:
  3677  0001D6  C015  F047         	movff	??_isr+19,btemp+3
  3678  0001DA  C014  F046         	movff	??_isr+18,btemp+2
  3679  0001DE  C013  F045         	movff	??_isr+17,btemp+1
  3680  0001E2  C012  F044         	movff	??_isr+16,btemp
  3681  0001E6  C011  FFF5         	movff	??_isr+15,tablat
  3682  0001EA  C010  FFF8         	movff	??_isr+14,tblptru
  3683  0001EE  C00F  FFF7         	movff	??_isr+13,tblptrh
  3684  0001F2  C00E  FFF6         	movff	??_isr+12,tblptrl
  3685  0001F6  C00D  FFF4         	movff	??_isr+11,prodh
  3686  0001FA  C00C  FFF3         	movff	??_isr+10,prodl
  3687  0001FE  C00B  FFDA         	movff	??_isr+9,fsr2h
  3688  000202  C00A  FFD9         	movff	??_isr+8,fsr2l
  3689  000206  C009  FFE2         	movff	??_isr+7,fsr1h
  3690  00020A  C008  FFE1         	movff	??_isr+6,fsr1l
  3691  00020E  C007  FFEA         	movff	??_isr+5,fsr0h
  3692  000212  C006  FFE9         	movff	??_isr+4,fsr0l
  3693  000216  C005  FFFB         	movff	??_isr+3,pclatu
  3694  00021A  C004  FFFA         	movff	??_isr+2,pclath
  3695  00021E  9244               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3696  000220  0011               	retfie		f
  3697  000222                     __end_of_isr:
  3698                           	opt stack 0
  3699                           pclatu	equ	0xFFB
  3700                           pclath	equ	0xFFA
  3701                           tblptru	equ	0xFF8
  3702                           tblptrh	equ	0xFF7
  3703                           tblptrl	equ	0xFF6
  3704                           tablat	equ	0xFF5
  3705                           prodh	equ	0xFF4
  3706                           prodl	equ	0xFF3
  3707                           intcon	equ	0xFF2
  3708                           postinc0	equ	0xFEE
  3709                           fsr0h	equ	0xFEA
  3710                           fsr0l	equ	0xFE9
  3711                           wreg	equ	0xFE8
  3712                           indf1	equ	0xFE7
  3713                           postdec1	equ	0xFE5
  3714                           plusw1	equ	0xFE3
  3715                           fsr1h	equ	0xFE2
  3716                           fsr1l	equ	0xFE1
  3717                           indf2	equ	0xFDF
  3718                           postinc2	equ	0xFDE
  3719                           plusw2	equ	0xFDB
  3720                           fsr2h	equ	0xFDA
  3721                           fsr2l	equ	0xFD9
  3722                           status	equ	0xFD8
  3723                           
  3724 ;; *************** function i2_reload_tmr5_pt25s *****************
  3725 ;; Defined at:
  3726 ;;		line 167 in file "main.c"
  3727 ;; Parameters:    Size  Location     Type
  3728 ;;		None
  3729 ;; Auto vars:     Size  Location     Type
  3730 ;;		None
  3731 ;; Return value:  Size  Location     Type
  3732 ;;                  1    wreg      void 
  3733 ;; Registers used:
  3734 ;;		wreg, status,2
  3735 ;; Tracked objects:
  3736 ;;		On entry : 0/0
  3737 ;;		On exit  : 0/0
  3738 ;;		Unchanged: 0/0
  3739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3743 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3744 ;;Total ram usage:        0 bytes
  3745 ;; Hardware stack levels used:    1
  3746 ;; This function calls:
  3747 ;;		Nothing
  3748 ;; This function is called by:
  3749 ;;		_isr
  3750 ;; This function uses a non-reentrant model
  3751 ;;
  3752                           
  3753                           	psect	text16
  3754  001A60                     __ptext16:
  3755                           	opt stack 0
  3756  001A60                     i2_reload_tmr5_pt25s:
  3757                           	opt stack 25
  3758                           
  3759                           ;main.c: 169: INTCONbits.GIE = 0;
  3760                           
  3761                           ;incstack = 0
  3762  001A60  9EF2               	bcf	intcon,7,c	;volatile
  3763                           
  3764                           ;main.c: 170: T5CON = 0b00110101;
  3765  001A62  0E35               	movlw	53
  3766  001A64  010F               	movlb	15	; () banked
  3767  001A66  6F4E               	movwf	78,b	;volatile
  3768                           
  3769                           ; BSR set to: 15
  3770                           ;main.c: 172: PIE5bits.TMR5IE = 1;
  3771  001A68  827D               	bsf	3965,1,c	;volatile
  3772                           
  3773                           ; BSR set to: 15
  3774                           ;main.c: 173: INTCONbits.PEIE = 1;
  3775  001A6A  8CF2               	bsf	intcon,6,c	;volatile
  3776                           
  3777                           ; BSR set to: 15
  3778                           ;main.c: 174: PIR5bits.TMR5IF = 0;
  3779  001A6C  927E               	bcf	3966,1,c	;volatile
  3780                           
  3781                           ;main.c: 175: TMR5H = 0x0B;
  3782  001A6E  0E0B               	movlw	11
  3783  001A70  6F50               	movwf	80,b	;volatile
  3784                           
  3785                           ;main.c: 176: TMR5L = 0x45;
  3786  001A72  0E45               	movlw	69
  3787  001A74  6F4F               	movwf	79,b	;volatile
  3788                           
  3789                           ; BSR set to: 15
  3790                           ;main.c: 177: INTCONbits.GIE = 1;
  3791  001A76  8EF2               	bsf	intcon,7,c	;volatile
  3792                           
  3793                           ; BSR set to: 15
  3794  001A78  0012               	return		;funcret
  3795  001A7A                     __end_ofi2_reload_tmr5_pt25s:
  3796                           	opt stack 0
  3797                           pclatu	equ	0xFFB
  3798                           pclath	equ	0xFFA
  3799                           tblptru	equ	0xFF8
  3800                           tblptrh	equ	0xFF7
  3801                           tblptrl	equ	0xFF6
  3802                           tablat	equ	0xFF5
  3803                           prodh	equ	0xFF4
  3804                           prodl	equ	0xFF3
  3805                           intcon	equ	0xFF2
  3806                           postinc0	equ	0xFEE
  3807                           fsr0h	equ	0xFEA
  3808                           fsr0l	equ	0xFE9
  3809                           wreg	equ	0xFE8
  3810                           indf1	equ	0xFE7
  3811                           postdec1	equ	0xFE5
  3812                           plusw1	equ	0xFE3
  3813                           fsr1h	equ	0xFE2
  3814                           fsr1l	equ	0xFE1
  3815                           indf2	equ	0xFDF
  3816                           postinc2	equ	0xFDE
  3817                           plusw2	equ	0xFDB
  3818                           fsr2h	equ	0xFDA
  3819                           fsr2l	equ	0xFD9
  3820                           status	equ	0xFD8
  3821                           
  3822 ;; *************** function _disable_md_rxint *****************
  3823 ;; Defined at:
  3824 ;;		line 48 in file "uart.c"
  3825 ;; Parameters:    Size  Location     Type
  3826 ;;		None
  3827 ;; Auto vars:     Size  Location     Type
  3828 ;;		None
  3829 ;; Return value:  Size  Location     Type
  3830 ;;                  1    wreg      void 
  3831 ;; Registers used:
  3832 ;;		None
  3833 ;; Tracked objects:
  3834 ;;		On entry : 0/0
  3835 ;;		On exit  : 0/0
  3836 ;;		Unchanged: 0/0
  3837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3839 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3841 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3842 ;;Total ram usage:        0 bytes
  3843 ;; Hardware stack levels used:    1
  3844 ;; This function calls:
  3845 ;;		Nothing
  3846 ;; This function is called by:
  3847 ;;		_isr
  3848 ;; This function uses a non-reentrant model
  3849 ;;
  3850                           
  3851                           	psect	text17
  3852  001AD2                     __ptext17:
  3853                           	opt stack 0
  3854  001AD2                     _disable_md_rxint:
  3855                           	opt stack 25
  3856                           
  3857                           ;uart.c: 50: GIE = 0;
  3858                           
  3859                           ; BSR set to: 15
  3860                           ;incstack = 0
  3861  001AD2  9EF2               	bcf	intcon,7,c	;volatile
  3862                           
  3863                           ;uart.c: 51: PIE1bits.RC1IE = 0;
  3864  001AD4  9A9D               	bcf	3997,5,c	;volatile
  3865                           
  3866                           ;uart.c: 52: GIE = 1;
  3867  001AD6  8EF2               	bsf	intcon,7,c	;volatile
  3868  001AD8  0012               	return		;funcret
  3869  001ADA                     __end_of_disable_md_rxint:
  3870                           	opt stack 0
  3871                           pclatu	equ	0xFFB
  3872                           pclath	equ	0xFFA
  3873                           tblptru	equ	0xFF8
  3874                           tblptrh	equ	0xFF7
  3875                           tblptrl	equ	0xFF6
  3876                           tablat	equ	0xFF5
  3877                           prodh	equ	0xFF4
  3878                           prodl	equ	0xFF3
  3879                           intcon	equ	0xFF2
  3880                           postinc0	equ	0xFEE
  3881                           fsr0h	equ	0xFEA
  3882                           fsr0l	equ	0xFE9
  3883                           wreg	equ	0xFE8
  3884                           indf1	equ	0xFE7
  3885                           postdec1	equ	0xFE5
  3886                           plusw1	equ	0xFE3
  3887                           fsr1h	equ	0xFE2
  3888                           fsr1l	equ	0xFE1
  3889                           indf2	equ	0xFDF
  3890                           postinc2	equ	0xFDE
  3891                           plusw2	equ	0xFDB
  3892                           fsr2h	equ	0xFDA
  3893                           fsr2l	equ	0xFD9
  3894                           status	equ	0xFD8
  3895                           
  3896 ;; *************** function _check_mdstate_tmr5 *****************
  3897 ;; Defined at:
  3898 ;;		line 188 in file "main.c"
  3899 ;; Parameters:    Size  Location     Type
  3900 ;;		None
  3901 ;; Auto vars:     Size  Location     Type
  3902 ;;		None
  3903 ;; Return value:  Size  Location     Type
  3904 ;;                  1    wreg      void 
  3905 ;; Registers used:
  3906 ;;		wreg, status,2, status,0, cstack
  3907 ;; Tracked objects:
  3908 ;;		On entry : 0/0
  3909 ;;		On exit  : 0/0
  3910 ;;		Unchanged: 0/0
  3911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3914 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3915 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3916 ;;Total ram usage:        1 bytes
  3917 ;; Hardware stack levels used:    1
  3918 ;; Hardware stack levels required when called:    1
  3919 ;; This function calls:
  3920 ;;		i2_disable_tmr5
  3921 ;; This function is called by:
  3922 ;;		_isr
  3923 ;; This function uses a non-reentrant model
  3924 ;;
  3925                           
  3926                           	psect	text18
  3927  0015BC                     __ptext18:
  3928                           	opt stack 0
  3929  0015BC                     _check_mdstate_tmr5:
  3930                           	opt stack 24
  3931                           
  3932                           ;main.c: 190: switch (md_state)
  3933                           
  3934                           ;incstack = 0
  3935  0015BC  D05B               	goto	i2l138
  3936  0015BE                     
  3937                           ;main.c: 193: PORTCbits.RC4 = (bool)(tmr5_cnt % 2);
  3938  0015BE  C041  F001         	movff	_tmr5_cnt,??_check_mdstate_tmr5
  3939  0015C2  0E01               	movlw	1
  3940  0015C4  1601               	andwf	??_check_mdstate_tmr5,f,c
  3941  0015C6  3A01               	swapf	??_check_mdstate_tmr5,f,c
  3942  0015C8  5082               	movf	3970,w,c	;volatile
  3943  0015CA  1801               	xorwf	??_check_mdstate_tmr5,w,c
  3944  0015CC  0BEF               	andlw	-17
  3945  0015CE  1801               	xorwf	??_check_mdstate_tmr5,w,c
  3946  0015D0  6E82               	movwf	3970,c	;volatile
  3947                           
  3948                           ;main.c: 194: if (tmr5_cnt >= (4*45))
  3949  0015D2  0EB3               	movlw	179
  3950  0015D4  6441               	cpfsgt	_tmr5_cnt,c
  3951  0015D6  0012               	return	
  3952                           
  3953                           ;main.c: 195: {
  3954                           ;main.c: 196: disable_tmr5();
  3955  0015D8  EC5E  F00D         	call	i2_disable_tmr5	;wreg free
  3956                           
  3957                           ;main.c: 197: tmr5_cnt = 0;
  3958  0015DC  0E00               	movlw	0
  3959  0015DE  6E41               	movwf	_tmr5_cnt,c
  3960                           
  3961                           ;main.c: 198: bootTimerIsDone = 1;
  3962  0015E0  0E01               	movlw	1
  3963  0015E2  0100               	movlb	0	; () banked
  3964  0015E4  6FFA               	movwf	_bootTimerIsDone& (0+255),b
  3965                           
  3966                           ; BSR set to: 0
  3967                           ;main.c: 199: }
  3968                           ;main.c: 200: break;
  3969  0015E6  0012               	return	
  3970  0015E8                     
  3971                           ; BSR set to: 0
  3972                           ;main.c: 202: if (tmr5_cnt >= (4*2))
  3973                           
  3974                           ; BSR set to: 0
  3975  0015E8  0E07               	movlw	7
  3976  0015EA  6441               	cpfsgt	_tmr5_cnt,c
  3977  0015EC  0012               	return	
  3978                           
  3979                           ; BSR set to: 0
  3980                           ;main.c: 203: {
  3981                           ;main.c: 204: disable_tmr5();
  3982  0015EE  EC5E  F00D         	call	i2_disable_tmr5	;wreg free
  3983                           
  3984                           ;main.c: 205: tmr5_cnt = 0;
  3985  0015F2  0E00               	movlw	0
  3986  0015F4  6E41               	movwf	_tmr5_cnt,c
  3987                           
  3988                           ;main.c: 206: receivedOK = 0;
  3989  0015F6  0E00               	movlw	0
  3990  0015F8  6E3F               	movwf	_receivedOK,c
  3991                           
  3992                           ;main.c: 207: receivedERR = 0;
  3993  0015FA  0E00               	movlw	0
  3994  0015FC  6E3E               	movwf	_receivedERR,c
  3995                           
  3996                           ;main.c: 208: timedOut = 1;
  3997  0015FE  0E01               	movlw	1
  3998  001600  6E3C               	movwf	_timedOut,c
  3999                           
  4000                           ;main.c: 209: }
  4001                           ;main.c: 210: break;
  4002  001602  0012               	return	
  4003  001604                     
  4004                           ;main.c: 212: if (tmr5_cnt >= (4*10))
  4005  001604  0E27               	movlw	39
  4006  001606  6441               	cpfsgt	_tmr5_cnt,c
  4007  001608  0012               	return	
  4008                           
  4009                           ;main.c: 213: {
  4010                           ;main.c: 214: disable_tmr5();
  4011  00160A  EC5E  F00D         	call	i2_disable_tmr5	;wreg free
  4012                           
  4013                           ;main.c: 215: tmr5_cnt = 0;
  4014  00160E  0E00               	movlw	0
  4015  001610  6E41               	movwf	_tmr5_cnt,c
  4016                           
  4017                           ;main.c: 216: receivedOK = 0;
  4018  001612  0E00               	movlw	0
  4019  001614  6E3F               	movwf	_receivedOK,c
  4020                           
  4021                           ;main.c: 217: receivedERR = 0;
  4022  001616  0E00               	movlw	0
  4023  001618  6E3E               	movwf	_receivedERR,c
  4024                           
  4025                           ;main.c: 218: timedOut = 1;
  4026  00161A  0E01               	movlw	1
  4027  00161C  6E3C               	movwf	_timedOut,c
  4028                           
  4029                           ;main.c: 219: }
  4030                           ;main.c: 220: break;
  4031  00161E  0012               	return	
  4032  001620                     
  4033                           ;main.c: 222: if (tmr5_cnt >= (4*10))
  4034  001620  0E27               	movlw	39
  4035  001622  6441               	cpfsgt	_tmr5_cnt,c
  4036  001624  0012               	return	
  4037                           
  4038                           ;main.c: 223: {
  4039                           ;main.c: 224: disable_tmr5();
  4040  001626  EC5E  F00D         	call	i2_disable_tmr5	;wreg free
  4041                           
  4042                           ;main.c: 225: tmr5_cnt = 0;
  4043  00162A  0E00               	movlw	0
  4044  00162C  6E41               	movwf	_tmr5_cnt,c
  4045                           
  4046                           ;main.c: 226: receivedOK = 0;
  4047  00162E  0E00               	movlw	0
  4048  001630  6E3F               	movwf	_receivedOK,c
  4049                           
  4050                           ;main.c: 227: receivedERR = 0;
  4051  001632  0E00               	movlw	0
  4052  001634  6E3E               	movwf	_receivedERR,c
  4053                           
  4054                           ;main.c: 228: timedOut = 1;
  4055  001636  0E01               	movlw	1
  4056  001638  6E3C               	movwf	_timedOut,c
  4057                           
  4058                           ;main.c: 229: }
  4059                           ;main.c: 230: break;
  4060  00163A  0012               	return	
  4061  00163C                     
  4062                           ;main.c: 232: if (tmr5_cnt >= (4*10))
  4063  00163C  0E27               	movlw	39
  4064  00163E  6441               	cpfsgt	_tmr5_cnt,c
  4065  001640  0012               	return	
  4066                           
  4067                           ;main.c: 233: {
  4068                           ;main.c: 234: disable_tmr5();
  4069  001642  EC5E  F00D         	call	i2_disable_tmr5	;wreg free
  4070                           
  4071                           ;main.c: 235: tmr5_cnt = 0;
  4072  001646  0E00               	movlw	0
  4073  001648  6E41               	movwf	_tmr5_cnt,c
  4074                           
  4075                           ;main.c: 236: receivedOK = 0;
  4076  00164A  0E00               	movlw	0
  4077  00164C  6E3F               	movwf	_receivedOK,c
  4078                           
  4079                           ;main.c: 237: receivedERR = 0;
  4080  00164E  0E00               	movlw	0
  4081  001650  6E3E               	movwf	_receivedERR,c
  4082                           
  4083                           ;main.c: 238: timedOut = 1;
  4084  001652  0E01               	movlw	1
  4085  001654  6E3C               	movwf	_timedOut,c
  4086                           
  4087                           ;main.c: 239: }
  4088                           ;main.c: 240: break;
  4089  001656  0012               	return	
  4090  001658                     
  4091                           ;main.c: 242: if (tmr5_cnt >= (4*10))
  4092  001658  0E27               	movlw	39
  4093  00165A  6441               	cpfsgt	_tmr5_cnt,c
  4094  00165C  0012               	return	
  4095                           
  4096                           ;main.c: 243: {
  4097                           ;main.c: 244: disable_tmr5();
  4098  00165E  EC5E  F00D         	call	i2_disable_tmr5	;wreg free
  4099                           
  4100                           ;main.c: 245: tmr5_cnt = 0;
  4101  001662  0E00               	movlw	0
  4102  001664  6E41               	movwf	_tmr5_cnt,c
  4103                           
  4104                           ;main.c: 246: receivedOK = 0;
  4105  001666  0E00               	movlw	0
  4106  001668  6E3F               	movwf	_receivedOK,c
  4107                           
  4108                           ;main.c: 247: receivedERR = 0;
  4109  00166A  0E00               	movlw	0
  4110  00166C  6E3E               	movwf	_receivedERR,c
  4111                           
  4112                           ;main.c: 248: timedOut = 1;
  4113  00166E  0E01               	movlw	1
  4114  001670  6E3C               	movwf	_timedOut,c
  4115                           
  4116                           ;main.c: 251: }
  4117                           
  4118                           ;main.c: 249: }
  4119                           ;main.c: 250: break;
  4120  001672  0012               	return	
  4121  001674                     i2l138:
  4122  001674  0100               	movlb	0	; () banked
  4123  001676  51FB               	movf	_md_state& (0+255),w,b
  4124                           
  4125                           ; Switch size 1, requested type "space"
  4126                           ; Number of cases is 6, Range of values is 1 to 6
  4127                           ; switch strategies available:
  4128                           ; Name         Instructions Cycles
  4129                           ; simple_byte           19    10 (average)
  4130                           ;	Chosen strategy is simple_byte
  4131  001678  0A01               	xorlw	1	; case 1
  4132  00167A  B4D8               	btfsc	status,2,c
  4133  00167C  D7A0               	goto	i2l139
  4134  00167E  0A03               	xorlw	3	; case 2
  4135  001680  B4D8               	btfsc	status,2,c
  4136  001682  D7B2               	goto	i2l142
  4137  001684  0A01               	xorlw	1	; case 3
  4138  001686  B4D8               	btfsc	status,2,c
  4139  001688  D7BD               	goto	i2l144
  4140  00168A  0A07               	xorlw	7	; case 4
  4141  00168C  B4D8               	btfsc	status,2,c
  4142  00168E  D7C8               	goto	i2l146
  4143  001690  0A01               	xorlw	1	; case 5
  4144  001692  B4D8               	btfsc	status,2,c
  4145  001694  D7D3               	goto	i2l148
  4146  001696  0A03               	xorlw	3	; case 6
  4147  001698  A4D8               	btfss	status,2,c
  4148  00169A  0012               	return	
  4149  00169C  D7DD               	goto	i2l150
  4150  00169E                     __end_of_check_mdstate_tmr5:
  4151                           	opt stack 0
  4152                           pclatu	equ	0xFFB
  4153                           pclath	equ	0xFFA
  4154                           tblptru	equ	0xFF8
  4155                           tblptrh	equ	0xFF7
  4156                           tblptrl	equ	0xFF6
  4157                           tablat	equ	0xFF5
  4158                           prodh	equ	0xFF4
  4159                           prodl	equ	0xFF3
  4160                           intcon	equ	0xFF2
  4161                           postinc0	equ	0xFEE
  4162                           fsr0h	equ	0xFEA
  4163                           fsr0l	equ	0xFE9
  4164                           wreg	equ	0xFE8
  4165                           indf1	equ	0xFE7
  4166                           postdec1	equ	0xFE5
  4167                           plusw1	equ	0xFE3
  4168                           fsr1h	equ	0xFE2
  4169                           fsr1l	equ	0xFE1
  4170                           indf2	equ	0xFDF
  4171                           postinc2	equ	0xFDE
  4172                           plusw2	equ	0xFDB
  4173                           fsr2h	equ	0xFDA
  4174                           fsr2l	equ	0xFD9
  4175                           status	equ	0xFD8
  4176                           
  4177 ;; *************** function i2_disable_tmr5 *****************
  4178 ;; Defined at:
  4179 ;;		line 180 in file "main.c"
  4180 ;; Parameters:    Size  Location     Type
  4181 ;;		None
  4182 ;; Auto vars:     Size  Location     Type
  4183 ;;		None
  4184 ;; Return value:  Size  Location     Type
  4185 ;;                  1    wreg      void 
  4186 ;; Registers used:
  4187 ;;		wreg, status,2
  4188 ;; Tracked objects:
  4189 ;;		On entry : 0/0
  4190 ;;		On exit  : 0/0
  4191 ;;		Unchanged: 0/0
  4192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4196 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4197 ;;Total ram usage:        0 bytes
  4198 ;; Hardware stack levels used:    1
  4199 ;; This function calls:
  4200 ;;		Nothing
  4201 ;; This function is called by:
  4202 ;;		_isr
  4203 ;;		_check_mdstate_tmr5
  4204 ;; This function uses a non-reentrant model
  4205 ;;
  4206                           
  4207                           	psect	text19
  4208  001ABC                     __ptext19:
  4209                           	opt stack 0
  4210  001ABC                     i2_disable_tmr5:
  4211                           	opt stack 25
  4212                           
  4213                           ;main.c: 182: tmr5_cnt = 0;
  4214                           
  4215                           ;incstack = 0
  4216  001ABC  0E00               	movlw	0
  4217  001ABE  6E41               	movwf	_tmr5_cnt,c
  4218                           
  4219                           ;main.c: 183: T5CONbits.TMR5ON = 0;
  4220  001AC0  010F               	movlb	15	; () banked
  4221  001AC2  914E               	bcf	78,0,b	;volatile
  4222                           
  4223                           ; BSR set to: 15
  4224                           ;main.c: 184: PIE5bits.TMR5IE = 0;
  4225  001AC4  927D               	bcf	3965,1,c	;volatile
  4226                           
  4227                           ; BSR set to: 15
  4228  001AC6  0012               	return		;funcret
  4229  001AC8                     __end_ofi2_disable_tmr5:
  4230                           	opt stack 0
  4231                           pclatu	equ	0xFFB
  4232                           pclath	equ	0xFFA
  4233                           tblptru	equ	0xFF8
  4234                           tblptrh	equ	0xFF7
  4235                           tblptrl	equ	0xFF6
  4236                           tablat	equ	0xFF5
  4237                           prodh	equ	0xFF4
  4238                           prodl	equ	0xFF3
  4239                           intcon	equ	0xFF2
  4240                           postinc0	equ	0xFEE
  4241                           fsr0h	equ	0xFEA
  4242                           fsr0l	equ	0xFE9
  4243                           wreg	equ	0xFE8
  4244                           indf1	equ	0xFE7
  4245                           postdec1	equ	0xFE5
  4246                           plusw1	equ	0xFE3
  4247                           fsr1h	equ	0xFE2
  4248                           fsr1l	equ	0xFE1
  4249                           indf2	equ	0xFDF
  4250                           postinc2	equ	0xFDE
  4251                           plusw2	equ	0xFDB
  4252                           fsr2h	equ	0xFDA
  4253                           fsr2l	equ	0xFD9
  4254                           status	equ	0xFD8
  4255                           pclatu	equ	0xFFB
  4256                           pclath	equ	0xFFA
  4257                           tblptru	equ	0xFF8
  4258                           tblptrh	equ	0xFF7
  4259                           tblptrl	equ	0xFF6
  4260                           tablat	equ	0xFF5
  4261                           prodh	equ	0xFF4
  4262                           prodl	equ	0xFF3
  4263                           intcon	equ	0xFF2
  4264                           postinc0	equ	0xFEE
  4265                           fsr0h	equ	0xFEA
  4266                           fsr0l	equ	0xFE9
  4267                           wreg	equ	0xFE8
  4268                           indf1	equ	0xFE7
  4269                           postdec1	equ	0xFE5
  4270                           plusw1	equ	0xFE3
  4271                           fsr1h	equ	0xFE2
  4272                           fsr1l	equ	0xFE1
  4273                           indf2	equ	0xFDF
  4274                           postinc2	equ	0xFDE
  4275                           plusw2	equ	0xFDB
  4276                           fsr2h	equ	0xFDA
  4277                           fsr2l	equ	0xFD9
  4278                           status	equ	0xFD8
  4279                           
  4280                           	psect	rparam
  4281  0000                     pclatu	equ	0xFFB
  4282                           pclath	equ	0xFFA
  4283                           tblptru	equ	0xFF8
  4284                           tblptrh	equ	0xFF7
  4285                           tblptrl	equ	0xFF6
  4286                           tablat	equ	0xFF5
  4287                           prodh	equ	0xFF4
  4288                           prodl	equ	0xFF3
  4289                           intcon	equ	0xFF2
  4290                           postinc0	equ	0xFEE
  4291                           fsr0h	equ	0xFEA
  4292                           fsr0l	equ	0xFE9
  4293                           wreg	equ	0xFE8
  4294                           indf1	equ	0xFE7
  4295                           postdec1	equ	0xFE5
  4296                           plusw1	equ	0xFE3
  4297                           fsr1h	equ	0xFE2
  4298                           fsr1l	equ	0xFE1
  4299                           indf2	equ	0xFDF
  4300                           postinc2	equ	0xFDE
  4301                           plusw2	equ	0xFDB
  4302                           fsr2h	equ	0xFDA
  4303                           fsr2l	equ	0xFD9
  4304                           status	equ	0xFD8
  4305                           
  4306                           	psect	temp
  4307  000044                     btemp:
  4308                           	opt stack 0
  4309  000044                     	ds	1
  4310  0000                     int$flags	set	btemp
  4311  0000                     wtemp6	set	btemp+1
  4312                           pclatu	equ	0xFFB
  4313                           pclath	equ	0xFFA
  4314                           tblptru	equ	0xFF8
  4315                           tblptrh	equ	0xFF7
  4316                           tblptrl	equ	0xFF6
  4317                           tablat	equ	0xFF5
  4318                           prodh	equ	0xFF4
  4319                           prodl	equ	0xFF3
  4320                           intcon	equ	0xFF2
  4321                           postinc0	equ	0xFEE
  4322                           fsr0h	equ	0xFEA
  4323                           fsr0l	equ	0xFE9
  4324                           wreg	equ	0xFE8
  4325                           indf1	equ	0xFE7
  4326                           postdec1	equ	0xFE5
  4327                           plusw1	equ	0xFE3
  4328                           fsr1h	equ	0xFE2
  4329                           fsr1l	equ	0xFE1
  4330                           indf2	equ	0xFDF
  4331                           postinc2	equ	0xFDE
  4332                           plusw2	equ	0xFDB
  4333                           fsr2h	equ	0xFDA
  4334                           fsr2l	equ	0xFD9
  4335                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    111
    Data        219
    BSS         233
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     36      67
    BANK0           160    132     156
    BANK1           256      0     237
    BANK2           256      0     160
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    md_uart_write_str_ok@data	PTR unsigned char  size(2) Largest target is 47
		 -> close_socket_ok@deactivatePDP(BANK0[15]), close_socket_ok@closeSocket(BANK0[10]), send_over_socket_ok@terminateData(BANK0[1]), send_over_socket_ok@msg(BANK0[8]), 
		 -> send_over_socket_ok@srecv(BANK0[16]), send_over_socket_ok@ssend(BANK0[13]), send_over_socket_ok@openConnection(BANK0[44]), setup_data_ok@activatePDP(BANK0[15]), 
		 -> setup_data_ok@cfgSocket(BANK0[25]), setup_data_ok@setApn(BANK0[47]), send_md_cfg_cmds_ok@csq(BANK0[9]), send_md_cfg_cmds_ok@gprs(BANK0[11]), 
		 -> send_md_cfg_cmds_ok@cereg(BANK0[12]), send_md_cfg_cmds_ok@creg(BANK0[11]), send_md_cfg_cmds_ok@cpin(BANK0[11]), send_md_cfg_cmds_ok@queryVersion(BANK0[10]), 
		 -> send_md_cfg_cmds_ok@ledpattern(BANK0[12]), send_md_cfg_cmds_ok@ledCfg(BANK0[16]), send_md_cfg_cmds_ok@baud(BANK0[16]), send_md_cfg_cmds_ok@cmee(BANK0[12]), 
		 -> send_md_cfg_cmds_ok@ate(BANK0[7]), send_md_cfg_cmds_ok@at(BANK0[5]), 


Critical Paths under _main in COMRAM

    _check_modem_state->_send_over_socket_ok
    _setup_data_ok->_md_uart_write_str_ok
    _send_over_socket_ok->_md_uart_write_str_ok
    _send_md_cfg_cmds_ok->_md_uart_write_str_ok
    _close_socket_ok->_md_uart_write_str_ok
    _md_uart_write_str_ok->_md_uart_send

Critical Paths under _isr in COMRAM

    _isr->_check_mdstate_tmr5

Critical Paths under _main in BANK0

    _check_modem_state->_send_md_cfg_cmds_ok

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   36028
                                             35 COMRAM     1     1      0
                  _check_modem_state
                           _init_pic
           _start_modem_send_process
 ---------------------------------------------------------------------------------
 (1) _init_pic                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _check_modem_state                                    0     0      0   36028
                    _close_socket_ok
                _send_md_cfg_cmds_ok
                _send_over_socket_ok
                      _setup_data_ok
           _start_modem_send_process
 ---------------------------------------------------------------------------------
 (1) _start_modem_send_process                             2     2      0       0
                                             21 COMRAM     2     2      0
                _start_md_boot_timer
 ---------------------------------------------------------------------------------
 (2) _start_md_boot_timer                                  0     0      0       0
                  _reload_tmr5_pt25s
 ---------------------------------------------------------------------------------
 (2) _setup_data_ok                                       87    87      0    8907
                                              0 BANK0     87    87      0
                       _init_md_uart
               _md_uart_write_str_ok
                  _terminate_md_uart
 ---------------------------------------------------------------------------------
 (2) _send_over_socket_ok                                 84    84      0    8987
                                             33 COMRAM     2     2      0
                                              0 BANK0     82    82      0
                       _init_md_uart
               _md_uart_write_str_ok
                  _terminate_md_uart
 ---------------------------------------------------------------------------------
 (2) _send_md_cfg_cmds_ok                                132   132      0    9267
                                              0 BANK0    132   132      0
                       _init_md_uart
               _md_uart_write_str_ok
                  _terminate_md_uart
 ---------------------------------------------------------------------------------
 (2) _close_socket_ok                                     25    25      0    8867
                                              0 BANK0     25    25      0
                       _init_md_uart
               _md_uart_write_str_ok
                  _terminate_md_uart
 ---------------------------------------------------------------------------------
 (3) _terminate_md_uart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _md_uart_write_str_ok                                11     6      5    8787
                                             22 COMRAM    11     6      5
                       _disable_tmr5
                       _md_uart_send
                  _reload_tmr5_pt25s
 ---------------------------------------------------------------------------------
 (3) _reload_tmr5_pt25s                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _md_uart_send                                         1     1      0      31
                                             21 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _disable_tmr5                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_md_uart                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 20    20      0       0
                                              1 COMRAM    20    20      0
                 _check_mdstate_tmr5
                   _disable_md_rxint
                     i2_disable_tmr5
                i2_reload_tmr5_pt25s
 ---------------------------------------------------------------------------------
 (6) i2_reload_tmr5_pt25s                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _disable_md_rxint                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _check_mdstate_tmr5                                   1     1      0       0
                                              0 COMRAM     1     1      0
                     i2_disable_tmr5
 ---------------------------------------------------------------------------------
 (6) i2_disable_tmr5                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _check_modem_state
     _close_socket_ok
       _init_md_uart
       _md_uart_write_str_ok
         _disable_tmr5
         _md_uart_send
         _reload_tmr5_pt25s
       _terminate_md_uart
     _send_md_cfg_cmds_ok
       _init_md_uart
       _md_uart_write_str_ok
         _disable_tmr5
         _md_uart_send
         _reload_tmr5_pt25s
       _terminate_md_uart
     _send_over_socket_ok
       _init_md_uart
       _md_uart_write_str_ok
         _disable_tmr5
         _md_uart_send
         _reload_tmr5_pt25s
       _terminate_md_uart
     _setup_data_ok
       _init_md_uart
       _md_uart_write_str_ok
         _disable_tmr5
         _md_uart_send
         _reload_tmr5_pt25s
       _terminate_md_uart
     _start_modem_send_process
       _start_md_boot_timer
         _reload_tmr5_pt25s
   _init_pic
   _start_modem_send_process
     _start_md_boot_timer
       _reload_tmr5_pt25s

 _isr (ROOT)
   _check_mdstate_tmr5
     i2_disable_tmr5
   _disable_md_rxint
   i2_disable_tmr5
   i2_reload_tmr5_pt25s

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      A0       9       62.5%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      ED       7       92.6%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     84      9C       5       97.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     24      43       1       71.3%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     26C      12        0.0%
DATA                 0      0     26C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Jun 20 16:02:19 2018

                        ??_disable_tmr5 0016                             __CFG_CP0$ON 000000  
                           __CFG_CP1$ON 000000                             __CFG_CP2$ON 000000  
                           __CFG_CP3$ON 000000                             __CFG_CPB$ON 000000  
                      ?_close_socket_ok 0001                             __CFG_CPD$ON 000000  
      __end_ofsend_over_socket_ok@F6860 1059        __end_ofsend_over_socket_ok@F6862 103D  
      __end_ofsend_over_socket_ok@F6864 106B        __end_ofsend_over_socket_ok@F6858 102D  
                     ?_disable_md_rxint 0001                                     l121 1A28  
                                   l123 1A40                                     l250 10F4  
                                   l242 1092                                     l243 10D0  
                                   l260 11A6                                     l252 10F8  
                                   l244 109C                                     l253 1272  
                                   l254 1258                                     l350 18A2  
                                   l271 127C                                     l255 1106  
                                   l343 18D6                                     l351 18AE  
                                   l264 1256                                     l248 10E0  
                                   l336 19F2                                     l353 18BA  
                                   l346 187E                                     l275 12AA  
                                   l355 18BE                                     l348 188C  
                                   _GIE 007F97                                     _isr 0008  
                    ??_disable_md_rxint 0001                                     prod 000FF3  
                                   wreg 000FE8                              _TXSTA1bits 000FAC  
                          __CFG_LVP$OFF 000000                                    l2129 1AA6  
                                  ?_isr 0001                                    u2057 1A32  
                                  u2067 19E6                                    u1700 1264  
                                  u1620 1198                                    u2077 158E  
                                  u1710 126A                                    u1801 12DC  
                                  u1811 12EE                                    u1740 128A  
                                  u1821 1300                                    u1901 17F4  
                                  u1831 1312                                    u1911 1806  
                                  u1841 1324                                    u1921 1818  
                                  u1930 14C6                                    u1851 1336  
                                  u1940 14DE                                    u1861 1348  
                                  u1781 12B8                                    u1950 14F6  
                                  u1871 135A                                    u1791 12CA  
                                  u1960 150E                                    u1881 136C  
                                  u1970 190E                                    u1891 137E  
                                  _PEIE 007F96                                    u1980 1926  
                       __end_of_VERSION 1070                                    _main 1A24  
                                  fsr0h 000FEA                                    fsr1h 000FE2  
                                  fsr2h 000FDA                                    fsr0l 000FE9  
                                  indf1 000FE7                                    indf2 000FDF  
                                  fsr1l 000FE1                                    fsr2l 000FD9  
                                  btemp 0044                           __CFG_BORV$190 000000  
                                  prodh 000FF4                                    prodl 000FF3  
                                  start 0222                           __CFG_IESO$OFF 000000  
                          ___param_bank 000000            __size_of_start_md_boot_timer 0006  
                                 ??_isr 0002                            _BAUDCON1bits 000FB8  
                                 ?_main 0001                           ?_md_uart_send 0001  
                                 _CREN1 007D5C                                   _T0CON 000FD5  
                                 _RC1IE 007CED                                   _RC1IF 007CF5  
                                 _T5CON 000F4E                                   i2l110 010E  
                                 i2l114 01C6                                   i2l115 01D6  
                                 i2l108 007C                                   i2l150 1658  
                                 i2l142 15E8                                   i2l144 1604  
                                 i2l138 1674                                   i2l146 1620  
                                 i2l139 15BE                                   i2l148 163C  
                    setup_data_ok@F6851 012F                      setup_data_ok@F6853 0168  
                    setup_data_ok@F6849 0100                                   _TMR0H 000FD7  
                                 _TMR0L 000FD6                                   _TMR5H 000F50  
                                 _TMR5L 000F4F                                   _TRMT1 007D61  
                         __CFG_WRT0$OFF 000000                           __CFG_WRT1$OFF 000000  
                         __CFG_WRT2$OFF 000000                           __CFG_WRT3$OFF 000000  
                        __CFG_EBTR0$OFF 000000                          __CFG_FCMEN$OFF 000000  
                        __CFG_EBTR1$OFF 000000                          __CFG_EBTR2$OFF 000000  
                        __CFG_EBTR3$OFF 000000                           __CFG_WRTB$OFF 000000  
                         __CFG_WRTC$OFF 000000                           __CFG_WRTD$OFF 000000  
                       ??_setup_data_ok 0022                          __CFG_EBTRB$OFF 000000  
              setup_data_ok@activatePDP 00A8                      __CFG_MCLRE$INTMCLR 000000  
                                 pclath 000FFA                                   tablat 000FF5  
                                 plusw1 000FE3                                   plusw2 000FDB  
                                 status 000FD8              ??_start_modem_send_process 0016  
                                 wtemp6 0045                          __CFG_HFOFST$ON 000000  
                       __initialization 1750                            __end_of_main 1A46  
           __end_of_send_over_socket_ok 15BC                          ??_md_uart_send 0016  
                                ??_main 0024                           __activetblptr 000002  
                  close_socket_ok@F6873 1059                    close_socket_ok@F6875 103D  
                     _terminate_md_uart 1AC8             __end_of_send_md_cfg_cmds_ok 14B8  
      send_over_socket_ok@terminateData 00B1                      ?_terminate_md_uart 0001  
                  __end_of_disable_tmr5 1ABC                                  _ANSELA 000F38  
                                _ANSELB 000F39                                  _ANSELC 000F3A  
                 send_md_cfg_cmds_ok@at 00DF                                  _RC1REG 000FAE  
                        __CFG_WDTEN$OFF 000000                           ?_init_md_uart 0001  
                                _SPBRG1 000FAF                                  _TMR0IF 007F92  
                                _TMR5IF 007BF1                                  _TX1REG 000FAD  
                   ??_terminate_md_uart 0016                          __CFG_XINST$OFF 000000  
                        __CFG_STVREN$ON 000000            __size_ofi2_reload_tmr5_pt25s 001A  
                                _endPtr 0040                        __end_of_init_pic 19D2  
         __size_of_md_uart_write_str_ok 023C                                  clear_0 17B6  
                                clear_1 17C2                                  clear_2 17D6  
             __end_of_terminate_md_uart 1AD2                            __pdataCOMRAM 0025  
                   setup_data_ok@setApn 0060                            __mediumconst 0000  
                                tblptrh 000FF7                                  tblptrl 000FF6  
                                tblptru 000FF8                          ??_init_md_uart 0016  
                            __accesstop 0060                 __end_of__initialization 17DC  
                       __CFG_PBADEN$OFF 000000                           ___rparam_used 000001  
                        __pcstackCOMRAM 0001                            __pidataBANK0 1A8F  
                          __pidataBANK1 169E              close_socket_ok@closeSocket 006F  
            __end_of_check_mdstate_tmr5 169E                       _check_modem_state 187C  
                    ?_check_modem_state 0001                     _start_md_boot_timer 1ADA  
                            __pbssBANK0 00F9                              __pbssBANK1 01B1  
                            __pbssBANK2 0200                         __CFG_PLLCFG$OFF 000000  
      __end_of_start_modem_send_process 1A00               __size_of_disable_md_rxint 0008  
                  __end_of_md_uart_send 1AB0                     ??_check_modem_state 0024  
                    __CFG_CCP2MX$PORTC1 000000                    ?_start_md_boot_timer 0001  
                    __CFG_CCP3MX$PORTB5 000000               __end_of_check_modem_state 1900  
                send_md_cfg_cmds_ok@ate 00D8              __size_of_terminate_md_uart 000A  
                send_md_cfg_cmds_ok@csq 00CF                              _ledPattern 0043  
                 __size_of_disable_tmr5 000C                __size_of_close_socket_ok 006C  
                               _SPBRGH1 000FB0                                 _VERSION 106B  
                             ?_init_pic 0001                         __CFG_PWRTEN$OFF 000000  
            md_uart_write_str_ok@wantOk 001A                                 __Hparam 0000  
                               __Lparam 0000               md_uart_write_str_ok@index 001F  
                 ??_start_md_boot_timer 0016                send_md_cfg_cmds_ok@F6821 0148  
              send_md_cfg_cmds_ok@F6813 00F4                send_md_cfg_cmds_ok@F6823 0183  
              send_md_cfg_cmds_ok@F6831 0177                send_md_cfg_cmds_ok@F6815 00ED  
              send_md_cfg_cmds_ok@F6833 019B                send_md_cfg_cmds_ok@F6817 018F  
              send_md_cfg_cmds_ok@F6825 0030                send_md_cfg_cmds_ok@F6819 0158  
              send_md_cfg_cmds_ok@F6835 00E4                send_md_cfg_cmds_ok@F6827 0025  
              send_md_cfg_cmds_ok@F6829 01A6                            _disable_tmr5 1AB0  
                          __psmallconst 1000                                 __pcinit 1750  
                               __ramtop 1000                    __end_of_init_md_uart 1A24  
                               _mdRxBuf 0200                                 __ptext0 1A24  
                               __ptext1 196C                                 __ptext2 187C  
                               __ptext3 19D2                                 __ptext4 1ADA  
                               __ptext5 17EA                                 __ptext6 14B8  
                               __ptext7 12AE                                 __ptext8 1900  
                               __ptext9 1AC8                 __size_ofi2_disable_tmr5 000C  
                       _ledPatternCount 0042                send_md_cfg_cmds_ok@cereg 0098  
                          __size_of_isr 021A                              _receivedOK 003F  
                             _T5CONbits 000F4E                     i2_reload_tmr5_pt25s 1A60  
             send_md_cfg_cmds_ok@ledCfg 0070                   __end_of_setup_data_ok 187C  
                  end_of_initialization 17DC                           __Lmediumconst 0000  
               md_uart_write_str_ok@pos 0021                              ??_init_pic 0016  
                               postdec1 000FE5                    ?i2_reload_tmr5_pt25s 0001  
                               postinc0 000FEE                                 postinc2 000FDE  
     __size_of_start_modem_send_process 002E                               _PORTAbits 000F80  
                             _PORTBbits 000F81               ?_start_modem_send_process 0001  
                             _PORTCbits 000F82              __size_of_check_modem_state 0084  
          __size_of_send_over_socket_ok 0104                               _TRISAbits 000F92  
                             _TRISBbits 000F93                               _TRISCbits 000F94  
                 __size_of_md_uart_send 000C            __end_of_md_uart_write_str_ok 12AE  
                     ??_close_socket_ok 0022                        _disable_md_rxint 1AD2  
          __size_of_send_md_cfg_cmds_ok 020A                   ??i2_reload_tmr5_pt25s 0001  
                           _BAUDCONbits 000FB8  md_uart_write_str_ok@waitToSendMoreData 001B  
                         __pidataCOMRAM 1A7A                            _md_uart_send 1AA4  
                   start_initialization 1750                             __end_of_isr 0222  
              send_over_socket_ok@F6860 104C                send_over_socket_ok@F6862 102D  
              send_over_socket_ok@F6864 1063                send_over_socket_ok@F6858 1001  
                    _check_mdstate_tmr5 15BC                     ?_check_mdstate_tmr5 0001  
         send_md_cfg_cmds_ok@ledpattern 008C                send_over_socket_ok@srecv 008C  
              send_over_socket_ok@ssend 009C                   __size_of_init_md_uart 0024  
                           __pdataBANK0 00E4                             __pdataBANK1 0100  
                        i2_disable_tmr5 1ABC                             __pbssCOMRAM 003A  
                  ??_check_mdstate_tmr5 0001                           __pcstackBANK0 0060  
                          _init_md_uart 1A00                       __size_of_init_pic 0066  
                             __pintcode 0008          md_uart_write_str_ok@numRetries 001E  
                       _bootTimerIsDone 00FA                  __end_ofi2_disable_tmr5 1AC8  
                  _md_uart_write_str_ok 1072                        __CFG_PRICLKEN$ON 000000  
                           __smallconst 1000            close_socket_ok@deactivatePDP 0060  
     send_over_socket_ok@openConnection 0060                 send_md_cfg_cmds_ok@baud 0060  
               send_md_cfg_cmds_ok@cmee 0080                 send_md_cfg_cmds_ok@creg 00AF  
               send_md_cfg_cmds_ok@cpin 00A4                 send_md_cfg_cmds_ok@gprs 00BA  
                          _receivedRESP 003D                                _LATBbits 000F8A  
           __end_of_start_md_boot_timer 1AE0                                _LATCbits 000F8B  
                              _PIE1bits 000F9D                                _PIE5bits 000F7D  
                   _send_over_socket_ok 14B8                                i2u141_40 00F2  
                              _PIR1bits 000F9E                                _PIR5bits 000F7E  
                      __CFG_WDTPS$32768 000000                       _reload_tmr5_pt25s 1A46  
                       ?i2_disable_tmr5 0001                   ?_md_uart_write_str_ok 0017  
                    ?_reload_tmr5_pt25s 0001                            _referenceBuf 01B1  
              __end_of_disable_md_rxint 1ADA                     _send_md_cfg_cmds_ok 12AE  
                  ?_send_over_socket_ok 0001                         _close_socket_ok 1900  
                setup_data_ok@cfgSocket 008F                     ??_reload_tmr5_pt25s 0016  
                             copy_data0 1764                               copy_data1 1784  
                             copy_data2 17A4                    ?_send_md_cfg_cmds_ok 0001  
                              __Hrparam 0000                             _pdpIsActive 00F9  
             __end_of_reload_tmr5_pt25s 1A60                                __Lrparam 0000  
                    __CFG_BOREN$SBORDIS 000000                       __CFG_P2BMX$PORTB5 000000  
                __size_of_setup_data_ok 0092                   ??_send_over_socket_ok 0022  
                           _currentChar 003B         md_uart_write_str_ok@currentChar 0020  
                              __ptext10 1072                                __ptext11 1A46  
                              __ptext12 1AA4                                __ptext13 1AB0  
                              __ptext14 1A00                                __ptext16 1A60  
                              __ptext17 1AD2                                __ptext18 15BC  
                              __ptext19 1ABC                                _lastChar 003A  
                              _md_state 00FB                   ??_send_md_cfg_cmds_ok 0022  
                         __size_of_main 0022                                _init_pic 196C  
           __end_ofi2_reload_tmr5_pt25s 1A7A                             _receivedERR 003E  
                              _tmr5_cnt 0041                              _RC1STAbits 000FAB  
       send_md_cfg_cmds_ok@queryVersion 00C5                                _timedOut 003C  
                ??_md_uart_write_str_ok 001C                                int$flags 0044  
              _start_modem_send_process 19D2                 __end_of_close_socket_ok 196C  
                            _INTCONbits 000FF2                  send_over_socket_ok@msg 00A9  
              md_uart_write_str_ok@data 0017                md_uart_write_str_ok@len1 0019  
                              intlevel2 0000                           _setup_data_ok 17EA  
                            _RCSTA1bits 000FAB                              _OSCCONbits 000FD3  
            __size_of_reload_tmr5_pt25s 001A                        md_uart_send@data 0016  
                         ?_disable_tmr5 0001             __size_of_check_mdstate_tmr5 00E2  
                     __CFG_T3CMX$PORTC0 000000                          ?_setup_data_ok 0001  
                     __CFG_FOSC$INTIO67 000000            __end_ofclose_socket_ok@F6873 1063  
          __end_ofclose_socket_ok@F6875 104C                        ??i2_disable_tmr5 0001  
